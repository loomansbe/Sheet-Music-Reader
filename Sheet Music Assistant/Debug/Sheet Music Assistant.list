
Sheet Music Assistant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015ce4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000314c  08015ec4  08015ec4  00025ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019010  08019010  00030130  2**0
                  CONTENTS
  4 .ARM          00000008  08019010  08019010  00029010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019018  08019018  00030130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019018  08019018  00029018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801901c  0801901c  0002901c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  08019020  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003e374  20000130  08019150  00030130  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2003e4a4  08019150  0003e4a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030130  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a3fd  00000000  00000000  00030160  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000081e9  00000000  00000000  0007a55d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003530  00000000  00000000  00082748  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000031c0  00000000  00000000  00085c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f5e8  00000000  00000000  00088e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000326a1  00000000  00000000  000b8420  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001018f6  00000000  00000000  000eaac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ec3b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e9f4  00000000  00000000  001ec434  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000130 	.word	0x20000130
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015eac 	.word	0x08015eac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000134 	.word	0x20000134
 800021c:	08015eac 	.word	0x08015eac

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <Storage_OpenReadFile>:
  * @param  BufferAddress: A pointer to a buffer to copy the file to
  * @param  FileLen: the File lenght
  * @retval err: Error status (0=> success, 1=> fail)
  */
uint32_t Storage_OpenReadFile(uint8_t *Address, const char* BmpName)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	6018      	str	r0, [r3, #0]
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	6019      	str	r1, [r3, #0]
  uint32_t index = 0, size = 0, i1 = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8000efe:	2300      	movs	r3, #0
 8000f00:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8000f04:	2300      	movs	r3, #0
 8000f06:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
  uint32_t BmpAddress;
  FIL F1;

  if (f_open(&F1, BmpName, FA_READ) != FR_OK)
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	f107 0008 	add.w	r0, r7, #8
 8000f10:	2201      	movs	r2, #1
 8000f12:	6819      	ldr	r1, [r3, #0]
 8000f14:	f010 fa66 	bl	80113e4 <f_open>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d000      	beq.n	8000f20 <Storage_OpenReadFile+0x38>
  {
    while(1)
 8000f1e:	e7fe      	b.n	8000f1e <Storage_OpenReadFile+0x36>
    {
    } 
  }
  if (f_read (&F1, sector, 30, (UINT *)&BytesRead) != FR_OK)
 8000f20:	f107 0008 	add.w	r0, r7, #8
 8000f24:	4b48      	ldr	r3, [pc, #288]	; (8001048 <Storage_OpenReadFile+0x160>)
 8000f26:	221e      	movs	r2, #30
 8000f28:	4948      	ldr	r1, [pc, #288]	; (800104c <Storage_OpenReadFile+0x164>)
 8000f2a:	f010 fc19 	bl	8011760 <f_read>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d000      	beq.n	8000f36 <Storage_OpenReadFile+0x4e>
  {
    while(1)
 8000f34:	e7fe      	b.n	8000f34 <Storage_OpenReadFile+0x4c>
    {
    } 
  }
  
  BmpAddress = (uint32_t)sector;
 8000f36:	4b45      	ldr	r3, [pc, #276]	; (800104c <Storage_OpenReadFile+0x164>)
 8000f38:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

  /* Read bitmap size */
  size = *(uint16_t *) (BmpAddress + 2);
 8000f3c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000f40:	3302      	adds	r3, #2
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
  size |= (*(uint16_t *) (BmpAddress + 4)) << 16;  
 8000f48:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	041b      	lsls	r3, r3, #16
 8000f52:	461a      	mov	r2, r3
 8000f54:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 
  /* Get bitmap data address offset */
  index = *(uint16_t *) (BmpAddress + 10);
 8000f5e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000f62:	330a      	adds	r3, #10
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
  index |= (*(uint16_t *) (BmpAddress + 12)) << 16;  
 8000f6a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000f6e:	330c      	adds	r3, #12
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	041b      	lsls	r3, r3, #16
 8000f74:	461a      	mov	r2, r3
 8000f76:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
  
  f_close (&F1);
 8000f80:	f107 0308 	add.w	r3, r7, #8
 8000f84:	4618      	mov	r0, r3
 8000f86:	f010 fda8 	bl	8011ada <f_close>
  
  f_open (&F1, BmpName, FA_READ);
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	f107 0008 	add.w	r0, r7, #8
 8000f90:	2201      	movs	r2, #1
 8000f92:	6819      	ldr	r1, [r3, #0]
 8000f94:	f010 fa26 	bl	80113e4 <f_open>

  if (size > 240*240*2)
 8000f98:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8000f9c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
 8000fa0:	d903      	bls.n	8000faa <Storage_OpenReadFile+0xc2>
  {
    size = 240*240*2;
 8000fa2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000fa6:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
  }
  
  do
  {
    if (size < 256*2)
 8000faa:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8000fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fb2:	d204      	bcs.n	8000fbe <Storage_OpenReadFile+0xd6>
    {
      i1 = size;
 8000fb4:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8000fb8:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8000fbc:	e003      	b.n	8000fc6 <Storage_OpenReadFile+0xde>
    }
    else
    {
      i1 = 256*2;
 8000fbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fc2:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    }
    size -= i1;
 8000fc6:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8000fca:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
    f_read (&F1, sector, i1, (UINT *)&BytesRead);
 8000fd4:	f107 0008 	add.w	r0, r7, #8
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <Storage_OpenReadFile+0x160>)
 8000fda:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8000fde:	491b      	ldr	r1, [pc, #108]	; (800104c <Storage_OpenReadFile+0x164>)
 8000fe0:	f010 fbbe 	bl	8011760 <f_read>

    for (index = 0; index < i1; index++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8000fea:	e015      	b.n	8001018 <Storage_OpenReadFile+0x130>
    {
      *(__IO uint8_t*) (Address) = *(__IO uint8_t *)BmpAddress;
 8000fec:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	701a      	strb	r2, [r3, #0]
      
      BmpAddress++;  
 8000ffa:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000ffe:	3301      	adds	r3, #1
 8001000:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
      Address++;
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	1d3a      	adds	r2, r7, #4
 8001008:	6812      	ldr	r2, [r2, #0]
 800100a:	3201      	adds	r2, #1
 800100c:	601a      	str	r2, [r3, #0]
    for (index = 0; index < i1; index++)
 800100e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8001012:	3301      	adds	r3, #1
 8001014:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8001018:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800101c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8001020:	429a      	cmp	r2, r3
 8001022:	d3e3      	bcc.n	8000fec <Storage_OpenReadFile+0x104>
    }  
    
    BmpAddress = (uint32_t)sector;
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <Storage_OpenReadFile+0x164>)
 8001026:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
  }
  while (size > 0);
 800102a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1bb      	bne.n	8000faa <Storage_OpenReadFile+0xc2>

  f_close (&F1);
 8001032:	f107 0308 	add.w	r3, r7, #8
 8001036:	4618      	mov	r0, r3
 8001038:	f010 fd4f 	bl	8011ada <f_close>
  
  return 1;
 800103c:	2301      	movs	r3, #1
}
 800103e:	4618      	mov	r0, r3
 8001040:	f507 7712 	add.w	r7, r7, #584	; 0x248
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2000014c 	.word	0x2000014c
 800104c:	20004e14 	.word	0x20004e14

08001050 <Storage_CheckBitmapFile>:
  * @param  BufferAddress: A pointer to a buffer to copy the file to
  * @param  FileLen: the File lenght
  * @retval err: Error status (0=> success, 1=> fail)
  */
uint32_t Storage_CheckBitmapFile(const char* BmpName, uint32_t *FileLen)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  if(f_mount(&fs, (TCHAR const*)"",0))
 800105a:	2200      	movs	r2, #0
 800105c:	4913      	ldr	r1, [pc, #76]	; (80010ac <Storage_CheckBitmapFile+0x5c>)
 800105e:	4814      	ldr	r0, [pc, #80]	; (80010b0 <Storage_CheckBitmapFile+0x60>)
 8001060:	f010 f97a 	bl	8011358 <f_mount>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <Storage_CheckBitmapFile+0x1e>
  {
    return 1;
 800106a:	2301      	movs	r3, #1
 800106c:	e01a      	b.n	80010a4 <Storage_CheckBitmapFile+0x54>
  }
  if (f_open (&F, BmpName, FA_READ))
 800106e:	2201      	movs	r2, #1
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	4810      	ldr	r0, [pc, #64]	; (80010b4 <Storage_CheckBitmapFile+0x64>)
 8001074:	f010 f9b6 	bl	80113e4 <f_open>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <Storage_CheckBitmapFile+0x32>
  {
    return 2;
 800107e:	2302      	movs	r3, #2
 8001080:	e010      	b.n	80010a4 <Storage_CheckBitmapFile+0x54>
  }
  
  f_read (&F, sector, 6, (UINT *)&BytesRead);
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <Storage_CheckBitmapFile+0x68>)
 8001084:	2206      	movs	r2, #6
 8001086:	490d      	ldr	r1, [pc, #52]	; (80010bc <Storage_CheckBitmapFile+0x6c>)
 8001088:	480a      	ldr	r0, [pc, #40]	; (80010b4 <Storage_CheckBitmapFile+0x64>)
 800108a:	f010 fb69 	bl	8011760 <f_read>
  
  if (Buffercmp((uint8_t *)SlidesCheck, (uint8_t *) sector, 2) != 0)
 800108e:	2202      	movs	r2, #2
 8001090:	490a      	ldr	r1, [pc, #40]	; (80010bc <Storage_CheckBitmapFile+0x6c>)
 8001092:	480b      	ldr	r0, [pc, #44]	; (80010c0 <Storage_CheckBitmapFile+0x70>)
 8001094:	f000 f8b2 	bl	80011fc <Buffercmp>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <Storage_CheckBitmapFile+0x52>
  {
    return 3;
 800109e:	2303      	movs	r3, #3
 80010a0:	e000      	b.n	80010a4 <Storage_CheckBitmapFile+0x54>
  }
  return 0;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	08015ec4 	.word	0x08015ec4
 80010b0:	20004be4 	.word	0x20004be4
 80010b4:	20005044 	.word	0x20005044
 80010b8:	2000014c 	.word	0x2000014c
 80010bc:	20004e14 	.word	0x20004e14
 80010c0:	08016004 	.word	0x08016004

080010c4 <Storage_GetDirectoryBitmapFiles>:
  * @brief  List up to 25 file on the root directory with extension .BMP
  * @param  None
  * @retval The number of the found files
  */
uint32_t Storage_GetDirectoryBitmapFiles (const char* DirName, char* Files[])
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	6018      	str	r0, [r3, #0]
 80010d0:	463b      	mov	r3, r7
 80010d2:	6019      	str	r1, [r3, #0]
  FATFS fs;
  FILINFO fno;
  DIR dir;
  uint32_t counter = 0, index = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80010da:	2300      	movs	r3, #0
 80010dc:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
  FRESULT res;

  /* Open filesystem */
  if(f_mount(&fs, (TCHAR const*)"",0) != FR_OK)
 80010e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010e4:	2200      	movs	r2, #0
 80010e6:	4944      	ldr	r1, [pc, #272]	; (80011f8 <Storage_GetDirectoryBitmapFiles+0x134>)
 80010e8:	4618      	mov	r0, r3
 80010ea:	f010 f935 	bl	8011358 <f_mount>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <Storage_GetDirectoryBitmapFiles+0x34>
  {
    return 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	e07a      	b.n	80011ee <Storage_GetDirectoryBitmapFiles+0x12a>
  }

  /* Open directory */
  res = f_opendir(&dir, DirName);
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	f107 020c 	add.w	r2, r7, #12
 80010fe:	6819      	ldr	r1, [r3, #0]
 8001100:	4610      	mov	r0, r2
 8001102:	f010 fd14 	bl	8011b2e <f_opendir>
 8001106:	4603      	mov	r3, r0
 8001108:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
  
  if (res == FR_OK)
 800110c:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 8001110:	2b00      	cmp	r3, #0
 8001112:	d165      	bne.n	80011e0 <Storage_GetDirectoryBitmapFiles+0x11c>
  {
    for (;;)
    {
      res = f_readdir(&dir, &fno);
 8001114:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	4611      	mov	r1, r2
 800111e:	4618      	mov	r0, r3
 8001120:	f010 fd78 	bl	8011c14 <f_readdir>
 8001124:	4603      	mov	r3, r0
 8001126:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
      if (res != FR_OK || fno.fname[0] == 0)
 800112a:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 800112e:	2b00      	cmp	r3, #0
 8001130:	d156      	bne.n	80011e0 <Storage_GetDirectoryBitmapFiles+0x11c>
 8001132:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001136:	7a5b      	ldrb	r3, [r3, #9]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d051      	beq.n	80011e0 <Storage_GetDirectoryBitmapFiles+0x11c>
        break;
      if (fno.fname[0] == '.')
 800113c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001140:	7a5b      	ldrb	r3, [r3, #9]
 8001142:	2b2e      	cmp	r3, #46	; 0x2e
 8001144:	d04a      	beq.n	80011dc <Storage_GetDirectoryBitmapFiles+0x118>
        continue;

      if (!(fno.fattrib & AM_DIR))
 8001146:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800114a:	7a1b      	ldrb	r3, [r3, #8]
 800114c:	f003 0310 	and.w	r3, r3, #16
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1df      	bne.n	8001114 <Storage_GetDirectoryBitmapFiles+0x50>
      {
        do
        {
          counter++;
 8001154:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001158:	3301      	adds	r3, #1
 800115a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
        }
        while (fno.fname[counter] != 0x2E); /* . */
 800115e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001162:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001166:	4413      	add	r3, r2
 8001168:	3309      	adds	r3, #9
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b2e      	cmp	r3, #46	; 0x2e
 800116e:	d1f1      	bne.n	8001154 <Storage_GetDirectoryBitmapFiles+0x90>


        if (index < MAX_BMP_FILES)
 8001170:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8001174:	2b01      	cmp	r3, #1
 8001176:	d82d      	bhi.n	80011d4 <Storage_GetDirectoryBitmapFiles+0x110>
        {
          if ((fno.fname[counter + 1] == 'B') && (fno.fname[counter + 2] == 'M') && (fno.fname[counter + 3] == 'P'))
 8001178:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800117c:	3301      	adds	r3, #1
 800117e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001182:	4413      	add	r3, r2
 8001184:	7a5b      	ldrb	r3, [r3, #9]
 8001186:	2b42      	cmp	r3, #66	; 0x42
 8001188:	d124      	bne.n	80011d4 <Storage_GetDirectoryBitmapFiles+0x110>
 800118a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800118e:	3302      	adds	r3, #2
 8001190:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001194:	4413      	add	r3, r2
 8001196:	7a5b      	ldrb	r3, [r3, #9]
 8001198:	2b4d      	cmp	r3, #77	; 0x4d
 800119a:	d11b      	bne.n	80011d4 <Storage_GetDirectoryBitmapFiles+0x110>
 800119c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80011a0:	3303      	adds	r3, #3
 80011a2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80011a6:	4413      	add	r3, r2
 80011a8:	7a5b      	ldrb	r3, [r3, #9]
 80011aa:	2b50      	cmp	r3, #80	; 0x50
 80011ac:	d112      	bne.n	80011d4 <Storage_GetDirectoryBitmapFiles+0x110>
          {
            if(sizeof(fno.fname) <= (MAX_BMP_FILE_NAME + 2))
            {
              sprintf (Files[index], "%s", fno.fname);
 80011ae:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	463a      	mov	r2, r7
 80011b6:	6812      	ldr	r2, [r2, #0]
 80011b8:	4413      	add	r3, r2
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011c0:	3309      	adds	r3, #9
 80011c2:	4619      	mov	r1, r3
 80011c4:	4610      	mov	r0, r2
 80011c6:	f014 fb45 	bl	8015854 <strcpy>
              index++;
 80011ca:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80011ce:	3301      	adds	r3, #1
 80011d0:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
            }
          }
        }
        counter = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80011da:	e79b      	b.n	8001114 <Storage_GetDirectoryBitmapFiles+0x50>
        continue;
 80011dc:	bf00      	nop
      res = f_readdir(&dir, &fno);
 80011de:	e799      	b.n	8001114 <Storage_GetDirectoryBitmapFiles+0x50>
      }
    }
  }
  f_mount(NULL, (TCHAR const*)"",0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	4905      	ldr	r1, [pc, #20]	; (80011f8 <Storage_GetDirectoryBitmapFiles+0x134>)
 80011e4:	2000      	movs	r0, #0
 80011e6:	f010 f8b7 	bl	8011358 <f_mount>
  return index;
 80011ea:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	f507 7724 	add.w	r7, r7, #656	; 0x290
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	08015ec4 	.word	0x08015ec4

080011fc <Buffercmp>:
  * @param  BufferLength: buffer's length.
  * @retval  0: pBuffer1 identical to pBuffer2
  *          1: pBuffer1 differs from pBuffer2
  */
uint8_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	4613      	mov	r3, r2
 8001208:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 800120a:	e00d      	b.n	8001228 <Buffercmp+0x2c>
  {
    if (*pBuffer1 != *pBuffer2)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	781a      	ldrb	r2, [r3, #0]
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	429a      	cmp	r2, r3
 8001216:	d001      	beq.n	800121c <Buffercmp+0x20>
    {
      return 1;
 8001218:	2301      	movs	r3, #1
 800121a:	e00b      	b.n	8001234 <Buffercmp+0x38>
    }

    pBuffer1++;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	3301      	adds	r3, #1
 8001220:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	3301      	adds	r3, #1
 8001226:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	1e5a      	subs	r2, r3, #1
 800122c:	80fa      	strh	r2, [r7, #6]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1ec      	bne.n	800120c <Buffercmp+0x10>
  }

  return 0;
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001240:	b598      	push	{r3, r4, r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001244:	f003 fd90 	bl	8004d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001248:	f000 f932 	bl	80014b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800124c:	f000 fc3c 	bl	8001ac8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001250:	f000 f9da 	bl	8001608 <MX_ADC1_Init>
  MX_DAC_Init();
 8001254:	f000 fa2a 	bl	80016ac <MX_DAC_Init>
  MX_DFSDM1_Init();
 8001258:	f000 fa52 	bl	8001700 <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 800125c:	f000 fa88 	bl	8001770 <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 8001260:	f000 faf0 	bl	8001844 <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 8001264:	f000 fdc6 	bl	8001df4 <MX_FSMC_Init>
  MX_I2S2_Init();
 8001268:	f000 fb50 	bl	800190c <MX_I2S2_Init>
  MX_QUADSPI_Init();
 800126c:	f000 fb7c 	bl	8001968 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 8001270:	f000 fba6 	bl	80019c0 <MX_SDIO_SD_Init>
  MX_UART10_Init();
 8001274:	f000 fbd4 	bl	8001a20 <MX_UART10_Init>
  MX_USART6_UART_Init();
 8001278:	f000 fbfc 	bl	8001a74 <MX_USART6_UART_Init>
  MX_I2C2_Init();
 800127c:	f000 fb18 	bl	80018b0 <MX_I2C2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001280:	f000 f9b6 	bl	80015f0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* LCD Initialization */
    BSP_LCD_Init();
 8001284:	f003 f81f 	bl	80042c6 <BSP_LCD_Init>

     //Clear the LCD
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001288:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800128c:	f003 f8da 	bl	8004444 <BSP_LCD_Clear>

     //Configure Key Button
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8001290:	2100      	movs	r1, #0
 8001292:	2000      	movs	r0, #0
 8001294:	f002 fe62 	bl	8003f5c <BSP_PB_Init>

     //SD Initialization
    BSP_SD_Init();
 8001298:	f003 fb8e 	bl	80049b8 <BSP_SD_Init>

     //Set the font Size
    BSP_LCD_SetFont(&Font20);
 800129c:	4866      	ldr	r0, [pc, #408]	; (8001438 <main+0x1f8>)
 800129e:	f003 f8c1 	bl	8004424 <BSP_LCD_SetFont>
     //Set the Text Color
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80012a2:	2000      	movs	r0, #0
 80012a4:	f003 f89e 	bl	80043e4 <BSP_LCD_SetTextColor>
     //Set the Back Color
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80012a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80012ac:	f003 f8aa 	bl	8004404 <BSP_LCD_SetBackColor>

    while(BSP_SD_IsDetected() != SD_PRESENT)
 80012b0:	e005      	b.n	80012be <main+0x7e>
      {
        BSP_LCD_DisplayStringAt(0, 112, (uint8_t*)"Insert SD Card", CENTER_MODE);
 80012b2:	2301      	movs	r3, #1
 80012b4:	4a61      	ldr	r2, [pc, #388]	; (800143c <main+0x1fc>)
 80012b6:	2170      	movs	r1, #112	; 0x70
 80012b8:	2000      	movs	r0, #0
 80012ba:	f003 f923 	bl	8004504 <BSP_LCD_DisplayStringAt>
    while(BSP_SD_IsDetected() != SD_PRESENT)
 80012be:	f003 fbc7 	bl	8004a50 <BSP_SD_IsDetected>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d1f4      	bne.n	80012b2 <main+0x72>
      }
     //Clear the LCD
      BSP_LCD_Clear(LCD_COLOR_WHITE);
 80012c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80012cc:	f003 f8ba 	bl	8004444 <BSP_LCD_Clear>

      //##-2- Link the SD Card disk I/O driver ###################################
      if(FATFS_LinkDriver(&SD_Driver, SD_Path) == 0)
 80012d0:	495b      	ldr	r1, [pc, #364]	; (8001440 <main+0x200>)
 80012d2:	485c      	ldr	r0, [pc, #368]	; (8001444 <main+0x204>)
 80012d4:	f010 fd28 	bl	8011d28 <FATFS_LinkDriver>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d14a      	bne.n	8001374 <main+0x134>
      {
        //##-3- Initialize the Directory Files pointers (heap) ###################
        for (counter = 0; counter < MAX_BMP_FILES; counter++)
 80012de:	4b5a      	ldr	r3, [pc, #360]	; (8001448 <main+0x208>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	e01b      	b.n	800131e <main+0xde>
        {
          pDirectoryFiles[counter] = malloc(MAX_BMP_FILE_NAME);
 80012e6:	4b58      	ldr	r3, [pc, #352]	; (8001448 <main+0x208>)
 80012e8:	681c      	ldr	r4, [r3, #0]
 80012ea:	200b      	movs	r0, #11
 80012ec:	f014 f9b6 	bl	801565c <malloc>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b55      	ldr	r3, [pc, #340]	; (800144c <main+0x20c>)
 80012f6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
          if(pDirectoryFiles[counter] == NULL)
 80012fa:	4b53      	ldr	r3, [pc, #332]	; (8001448 <main+0x208>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a53      	ldr	r2, [pc, #332]	; (800144c <main+0x20c>)
 8001300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d105      	bne.n	8001314 <main+0xd4>
          {
            BSP_LCD_DisplayStringAt(0, 112, (uint8_t*)"Cannot allocate memory", CENTER_MODE);
 8001308:	2301      	movs	r3, #1
 800130a:	4a51      	ldr	r2, [pc, #324]	; (8001450 <main+0x210>)
 800130c:	2170      	movs	r1, #112	; 0x70
 800130e:	2000      	movs	r0, #0
 8001310:	f003 f8f8 	bl	8004504 <BSP_LCD_DisplayStringAt>
        for (counter = 0; counter < MAX_BMP_FILES; counter++)
 8001314:	4b4c      	ldr	r3, [pc, #304]	; (8001448 <main+0x208>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	3301      	adds	r3, #1
 800131a:	4a4b      	ldr	r2, [pc, #300]	; (8001448 <main+0x208>)
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	4b4a      	ldr	r3, [pc, #296]	; (8001448 <main+0x208>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d9df      	bls.n	80012e6 <main+0xa6>
          }
        }

         //Get the BMP file names on root directory
        ubNumberOfFiles = Storage_GetDirectoryBitmapFiles("/Music", pDirectoryFiles);
 8001326:	4949      	ldr	r1, [pc, #292]	; (800144c <main+0x20c>)
 8001328:	484a      	ldr	r0, [pc, #296]	; (8001454 <main+0x214>)
 800132a:	f7ff fecb 	bl	80010c4 <Storage_GetDirectoryBitmapFiles>
 800132e:	4603      	mov	r3, r0
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4b49      	ldr	r3, [pc, #292]	; (8001458 <main+0x218>)
 8001334:	701a      	strb	r2, [r3, #0]

        if (ubNumberOfFiles == 0)
 8001336:	4b48      	ldr	r3, [pc, #288]	; (8001458 <main+0x218>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d11a      	bne.n	8001374 <main+0x134>
        {
          for (counter = 0; counter < MAX_BMP_FILES; counter++)
 800133e:	4b42      	ldr	r3, [pc, #264]	; (8001448 <main+0x208>)
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	e00c      	b.n	8001360 <main+0x120>
          {
            free(pDirectoryFiles[counter]);
 8001346:	4b40      	ldr	r3, [pc, #256]	; (8001448 <main+0x208>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a40      	ldr	r2, [pc, #256]	; (800144c <main+0x20c>)
 800134c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001350:	4618      	mov	r0, r3
 8001352:	f014 f98b 	bl	801566c <free>
          for (counter = 0; counter < MAX_BMP_FILES; counter++)
 8001356:	4b3c      	ldr	r3, [pc, #240]	; (8001448 <main+0x208>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	3301      	adds	r3, #1
 800135c:	4a3a      	ldr	r2, [pc, #232]	; (8001448 <main+0x208>)
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	4b39      	ldr	r3, [pc, #228]	; (8001448 <main+0x208>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d9ee      	bls.n	8001346 <main+0x106>
          }

          BSP_LCD_DisplayStringAt(0, 112, (uint8_t*)"No Bitmap files...", CENTER_MODE);
 8001368:	2301      	movs	r3, #1
 800136a:	4a3c      	ldr	r2, [pc, #240]	; (800145c <main+0x21c>)
 800136c:	2170      	movs	r1, #112	; 0x70
 800136e:	2000      	movs	r0, #0
 8001370:	f003 f8c8 	bl	8004504 <BSP_LCD_DisplayStringAt>
      else
      {
         //FatFs Initialization Error
      }

      counter = 0;
 8001374:	4b34      	ldr	r3, [pc, #208]	; (8001448 <main+0x208>)
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]


      if(BSP_SD_IsDetected())
 800137a:	f003 fb69 	bl	8004a50 <BSP_SD_IsDetected>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d026      	beq.n	80013d2 <main+0x192>
        {
    	  while(counter < MAX_BMP_FILES)
 8001384:	e021      	b.n	80013ca <main+0x18a>
    	  {
             //Format the string
            sprintf ((char*)str, "Music/%-11.11s", pDirectoryFiles[counter]);
 8001386:	4b30      	ldr	r3, [pc, #192]	; (8001448 <main+0x208>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a30      	ldr	r2, [pc, #192]	; (800144c <main+0x20c>)
 800138c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001390:	461a      	mov	r2, r3
 8001392:	4933      	ldr	r1, [pc, #204]	; (8001460 <main+0x220>)
 8001394:	4833      	ldr	r0, [pc, #204]	; (8001464 <main+0x224>)
 8001396:	f014 fa3d 	bl	8015814 <siprintf>

            if (Storage_CheckBitmapFile((const char*)str, &uwBmplen) == 0)
 800139a:	4933      	ldr	r1, [pc, #204]	; (8001468 <main+0x228>)
 800139c:	4831      	ldr	r0, [pc, #196]	; (8001464 <main+0x224>)
 800139e:	f7ff fe57 	bl	8001050 <Storage_CheckBitmapFile>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d110      	bne.n	80013ca <main+0x18a>
            {
              // Open a file and copy its content to an internal buffer
              Storage_OpenReadFile(bufferArray[counter].uwInternelBuffer, (const char*)str);
 80013a8:	4b27      	ldr	r3, [pc, #156]	; (8001448 <main+0x208>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b0:	fb02 f303 	mul.w	r3, r2, r3
 80013b4:	4a2d      	ldr	r2, [pc, #180]	; (800146c <main+0x22c>)
 80013b6:	4413      	add	r3, r2
 80013b8:	492a      	ldr	r1, [pc, #168]	; (8001464 <main+0x224>)
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fd94 	bl	8000ee8 <Storage_OpenReadFile>
              counter++;
 80013c0:	4b21      	ldr	r3, [pc, #132]	; (8001448 <main+0x208>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	3301      	adds	r3, #1
 80013c6:	4a20      	ldr	r2, [pc, #128]	; (8001448 <main+0x208>)
 80013c8:	6013      	str	r3, [r2, #0]
    	  while(counter < MAX_BMP_FILES)
 80013ca:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <main+0x208>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d9d9      	bls.n	8001386 <main+0x146>
            }
    	  }
        }
      counter = 0;
 80013d2:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <main+0x208>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
      count = -1;
 80013d8:	4b25      	ldr	r3, [pc, #148]	; (8001470 <main+0x230>)
 80013da:	22ff      	movs	r2, #255	; 0xff
 80013dc:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013de:	f010 fd9f 	bl	8011f20 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 80013e2:	4a24      	ldr	r2, [pc, #144]	; (8001474 <main+0x234>)
 80013e4:	2100      	movs	r1, #0
 80013e6:	4824      	ldr	r0, [pc, #144]	; (8001478 <main+0x238>)
 80013e8:	f010 fe04 	bl	8011ff4 <osThreadNew>
 80013ec:	4602      	mov	r2, r0
 80013ee:	4b23      	ldr	r3, [pc, #140]	; (800147c <main+0x23c>)
 80013f0:	601a      	str	r2, [r3, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 80013f2:	4a23      	ldr	r2, [pc, #140]	; (8001480 <main+0x240>)
 80013f4:	2100      	movs	r1, #0
 80013f6:	4823      	ldr	r0, [pc, #140]	; (8001484 <main+0x244>)
 80013f8:	f010 fdfc 	bl	8011ff4 <osThreadNew>
 80013fc:	4602      	mov	r2, r0
 80013fe:	4b22      	ldr	r3, [pc, #136]	; (8001488 <main+0x248>)
 8001400:	601a      	str	r2, [r3, #0]

  /* creation of buttonPoll */
  buttonPollHandle = osThreadNew(StartButtonPoll, NULL, &buttonPoll_attributes);
 8001402:	4a22      	ldr	r2, [pc, #136]	; (800148c <main+0x24c>)
 8001404:	2100      	movs	r1, #0
 8001406:	4822      	ldr	r0, [pc, #136]	; (8001490 <main+0x250>)
 8001408:	f010 fdf4 	bl	8011ff4 <osThreadNew>
 800140c:	4602      	mov	r2, r0
 800140e:	4b21      	ldr	r3, [pc, #132]	; (8001494 <main+0x254>)
 8001410:	601a      	str	r2, [r3, #0]

  /* creation of displayImage */
  displayImageHandle = osThreadNew(StartDisplayImage, NULL, &displayImage_attributes);
 8001412:	4a21      	ldr	r2, [pc, #132]	; (8001498 <main+0x258>)
 8001414:	2100      	movs	r1, #0
 8001416:	4821      	ldr	r0, [pc, #132]	; (800149c <main+0x25c>)
 8001418:	f010 fdec 	bl	8011ff4 <osThreadNew>
 800141c:	4602      	mov	r2, r0
 800141e:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <main+0x260>)
 8001420:	601a      	str	r2, [r3, #0]

  /* creation of displayNoteLett */
  displayNoteLettHandle = osThreadNew(StartDisplayNoteLetters, NULL, &displayNoteLett_attributes);
 8001422:	4a20      	ldr	r2, [pc, #128]	; (80014a4 <main+0x264>)
 8001424:	2100      	movs	r1, #0
 8001426:	4820      	ldr	r0, [pc, #128]	; (80014a8 <main+0x268>)
 8001428:	f010 fde4 	bl	8011ff4 <osThreadNew>
 800142c:	4602      	mov	r2, r0
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <main+0x26c>)
 8001430:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001432:	f010 fda9 	bl	8011f88 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001436:	e7fe      	b.n	8001436 <main+0x1f6>
 8001438:	20000088 	.word	0x20000088
 800143c:	08015f04 	.word	0x08015f04
 8001440:	2003d8bc 	.word	0x2003d8bc
 8001444:	08018f60 	.word	0x08018f60
 8001448:	20000158 	.word	0x20000158
 800144c:	2003d7cc 	.word	0x2003d7cc
 8001450:	08015f14 	.word	0x08015f14
 8001454:	08015f2c 	.word	0x08015f2c
 8001458:	20000150 	.word	0x20000150
 800145c:	08015f34 	.word	0x08015f34
 8001460:	08015f48 	.word	0x08015f48
 8001464:	2003d9d8 	.word	0x2003d9d8
 8001468:	20000154 	.word	0x20000154
 800146c:	200052ac 	.word	0x200052ac
 8001470:	2000015c 	.word	0x2000015c
 8001474:	08016008 	.word	0x08016008
 8001478:	08001f59 	.word	0x08001f59
 800147c:	2003d9d4 	.word	0x2003d9d4
 8001480:	0801602c 	.word	0x0801602c
 8001484:	08001f7d 	.word	0x08001f7d
 8001488:	2003dc70 	.word	0x2003dc70
 800148c:	08016050 	.word	0x08016050
 8001490:	08001f9d 	.word	0x08001f9d
 8001494:	2003d6ac 	.word	0x2003d6ac
 8001498:	08016074 	.word	0x08016074
 800149c:	08002005 	.word	0x08002005
 80014a0:	2003d810 	.word	0x2003d810
 80014a4:	08016098 	.word	0x08016098
 80014a8:	08002069 	.word	0x08002069
 80014ac:	2003d80c 	.word	0x2003d80c

080014b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b0aa      	sub	sp, #168	; 0xa8
 80014b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014ba:	2234      	movs	r2, #52	; 0x34
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f014 f8e7 	bl	8015692 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d4:	f107 0308 	add.w	r3, r7, #8
 80014d8:	2258      	movs	r2, #88	; 0x58
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f014 f8d8 	bl	8015692 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4b40      	ldr	r3, [pc, #256]	; (80015e8 <SystemClock_Config+0x138>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	4a3f      	ldr	r2, [pc, #252]	; (80015e8 <SystemClock_Config+0x138>)
 80014ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f0:	6413      	str	r3, [r2, #64]	; 0x40
 80014f2:	4b3d      	ldr	r3, [pc, #244]	; (80015e8 <SystemClock_Config+0x138>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014fe:	2300      	movs	r3, #0
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	4b3a      	ldr	r3, [pc, #232]	; (80015ec <SystemClock_Config+0x13c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a39      	ldr	r2, [pc, #228]	; (80015ec <SystemClock_Config+0x13c>)
 8001508:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	4b37      	ldr	r3, [pc, #220]	; (80015ec <SystemClock_Config+0x13c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800151a:	2303      	movs	r3, #3
 800151c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800151e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001522:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001524:	2301      	movs	r3, #1
 8001526:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800152a:	2310      	movs	r3, #16
 800152c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001530:	2302      	movs	r3, #2
 8001532:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001536:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800153a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 800153e:	230f      	movs	r3, #15
 8001540:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001544:	2390      	movs	r3, #144	; 0x90
 8001546:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800154a:	2302      	movs	r3, #2
 800154c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001550:	2305      	movs	r3, #5
 8001552:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001556:	2302      	movs	r3, #2
 8001558:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001560:	4618      	mov	r0, r3
 8001562:	f007 ffdb 	bl	800951c <HAL_RCC_OscConfig>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800156c:	f000 fdb0 	bl	80020d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001570:	230f      	movs	r3, #15
 8001572:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001574:	2300      	movs	r3, #0
 8001576:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001578:	2300      	movs	r3, #0
 800157a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800157c:	2300      	movs	r3, #0
 800157e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001580:	2300      	movs	r3, #0
 8001582:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001584:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f007 f9ec 	bl	8008968 <HAL_RCC_ClockConfig>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8001596:	f000 fd9b 	bl	80020d0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 800159a:	f240 1371 	movw	r3, #369	; 0x171
 800159e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80015a0:	2332      	movs	r3, #50	; 0x32
 80015a2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 80015a4:	230c      	movs	r3, #12
 80015a6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80015a8:	2302      	movs	r3, #2
 80015aa:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80015ac:	2302      	movs	r3, #2
 80015ae:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80015b0:	2300      	movs	r3, #0
 80015b2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 80015b4:	2300      	movs	r3, #0
 80015b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 80015b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80015bc:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 80015be:	2300      	movs	r3, #0
 80015c0:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 80015c2:	2300      	movs	r3, #0
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 80015c6:	2300      	movs	r3, #0
 80015c8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ca:	f107 0308 	add.w	r3, r7, #8
 80015ce:	4618      	mov	r0, r3
 80015d0:	f007 fbc8 	bl	8008d64 <HAL_RCCEx_PeriphCLKConfig>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <SystemClock_Config+0x12e>
  {
    Error_Handler();
 80015da:	f000 fd79 	bl	80020d0 <Error_Handler>
  }
}
 80015de:	bf00      	nop
 80015e0:	37a8      	adds	r7, #168	; 0xa8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40007000 	.word	0x40007000

080015f0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80015f4:	2200      	movs	r2, #0
 80015f6:	2100      	movs	r1, #0
 80015f8:	2006      	movs	r0, #6
 80015fa:	f003 ff43 	bl	8005484 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80015fe:	2006      	movs	r0, #6
 8001600:	f003 ff5c 	bl	80054bc <HAL_NVIC_EnableIRQ>
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}

08001608 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800160e:	463b      	mov	r3, r7
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800161a:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <MX_ADC1_Init+0x98>)
 800161c:	4a21      	ldr	r2, [pc, #132]	; (80016a4 <MX_ADC1_Init+0x9c>)
 800161e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001620:	4b1f      	ldr	r3, [pc, #124]	; (80016a0 <MX_ADC1_Init+0x98>)
 8001622:	2200      	movs	r2, #0
 8001624:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001626:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <MX_ADC1_Init+0x98>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800162c:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <MX_ADC1_Init+0x98>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001632:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <MX_ADC1_Init+0x98>)
 8001634:	2200      	movs	r2, #0
 8001636:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001638:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <MX_ADC1_Init+0x98>)
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001640:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <MX_ADC1_Init+0x98>)
 8001642:	2200      	movs	r2, #0
 8001644:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001646:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <MX_ADC1_Init+0x98>)
 8001648:	4a17      	ldr	r2, [pc, #92]	; (80016a8 <MX_ADC1_Init+0xa0>)
 800164a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <MX_ADC1_Init+0x98>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001652:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <MX_ADC1_Init+0x98>)
 8001654:	2201      	movs	r2, #1
 8001656:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <MX_ADC1_Init+0x98>)
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <MX_ADC1_Init+0x98>)
 8001662:	2201      	movs	r2, #1
 8001664:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001666:	480e      	ldr	r0, [pc, #56]	; (80016a0 <MX_ADC1_Init+0x98>)
 8001668:	f003 fbe2 	bl	8004e30 <HAL_ADC_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001672:	f000 fd2d 	bl	80020d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001676:	230a      	movs	r3, #10
 8001678:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800167a:	2301      	movs	r3, #1
 800167c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001682:	463b      	mov	r3, r7
 8001684:	4619      	mov	r1, r3
 8001686:	4806      	ldr	r0, [pc, #24]	; (80016a0 <MX_ADC1_Init+0x98>)
 8001688:	f003 fc16 	bl	8004eb8 <HAL_ADC_ConfigChannel>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001692:	f000 fd1d 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	2003d814 	.word	0x2003d814
 80016a4:	40012000 	.word	0x40012000
 80016a8:	0f000001 	.word	0x0f000001

080016ac <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016b2:	463b      	mov	r3, r7
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <MX_DAC_Init+0x4c>)
 80016bc:	4a0f      	ldr	r2, [pc, #60]	; (80016fc <MX_DAC_Init+0x50>)
 80016be:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80016c0:	480d      	ldr	r0, [pc, #52]	; (80016f8 <MX_DAC_Init+0x4c>)
 80016c2:	f003 ff09 	bl	80054d8 <HAL_DAC_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80016cc:	f000 fd00 	bl	80020d0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80016d8:	463b      	mov	r3, r7
 80016da:	2200      	movs	r2, #0
 80016dc:	4619      	mov	r1, r3
 80016de:	4806      	ldr	r0, [pc, #24]	; (80016f8 <MX_DAC_Init+0x4c>)
 80016e0:	f003 ff70 	bl	80055c4 <HAL_DAC_ConfigChannel>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80016ea:	f000 fcf1 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2003d85c 	.word	0x2003d85c
 80016fc:	40007400 	.word	0x40007400

08001700 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001704:	4b18      	ldr	r3, [pc, #96]	; (8001768 <MX_DFSDM1_Init+0x68>)
 8001706:	4a19      	ldr	r2, [pc, #100]	; (800176c <MX_DFSDM1_Init+0x6c>)
 8001708:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800170a:	4b17      	ldr	r3, [pc, #92]	; (8001768 <MX_DFSDM1_Init+0x68>)
 800170c:	2201      	movs	r2, #1
 800170e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001710:	4b15      	ldr	r3, [pc, #84]	; (8001768 <MX_DFSDM1_Init+0x68>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001716:	4b14      	ldr	r3, [pc, #80]	; (8001768 <MX_DFSDM1_Init+0x68>)
 8001718:	2202      	movs	r2, #2
 800171a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <MX_DFSDM1_Init+0x68>)
 800171e:	2200      	movs	r2, #0
 8001720:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001722:	4b11      	ldr	r3, [pc, #68]	; (8001768 <MX_DFSDM1_Init+0x68>)
 8001724:	2200      	movs	r2, #0
 8001726:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <MX_DFSDM1_Init+0x68>)
 800172a:	2200      	movs	r2, #0
 800172c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <MX_DFSDM1_Init+0x68>)
 8001730:	2202      	movs	r2, #2
 8001732:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <MX_DFSDM1_Init+0x68>)
 8001736:	2200      	movs	r2, #0
 8001738:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <MX_DFSDM1_Init+0x68>)
 800173c:	2200      	movs	r2, #0
 800173e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <MX_DFSDM1_Init+0x68>)
 8001742:	2201      	movs	r2, #1
 8001744:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <MX_DFSDM1_Init+0x68>)
 8001748:	2200      	movs	r2, #0
 800174a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <MX_DFSDM1_Init+0x68>)
 800174e:	2200      	movs	r2, #0
 8001750:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001752:	4805      	ldr	r0, [pc, #20]	; (8001768 <MX_DFSDM1_Init+0x68>)
 8001754:	f003 ff8e 	bl	8005674 <HAL_DFSDM_ChannelInit>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 800175e:	f000 fcb7 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20005274 	.word	0x20005274
 800176c:	40016020 	.word	0x40016020

08001770 <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 8001774:	4b2f      	ldr	r3, [pc, #188]	; (8001834 <MX_DFSDM2_Init+0xc4>)
 8001776:	4a30      	ldr	r2, [pc, #192]	; (8001838 <MX_DFSDM2_Init+0xc8>)
 8001778:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 800177a:	4b2e      	ldr	r3, [pc, #184]	; (8001834 <MX_DFSDM2_Init+0xc4>)
 800177c:	2201      	movs	r2, #1
 800177e:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001780:	4b2c      	ldr	r3, [pc, #176]	; (8001834 <MX_DFSDM2_Init+0xc4>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 8001786:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <MX_DFSDM2_Init+0xc4>)
 8001788:	2202      	movs	r2, #2
 800178a:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800178c:	4b29      	ldr	r3, [pc, #164]	; (8001834 <MX_DFSDM2_Init+0xc4>)
 800178e:	2200      	movs	r2, #0
 8001790:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001792:	4b28      	ldr	r3, [pc, #160]	; (8001834 <MX_DFSDM2_Init+0xc4>)
 8001794:	2200      	movs	r2, #0
 8001796:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001798:	4b26      	ldr	r3, [pc, #152]	; (8001834 <MX_DFSDM2_Init+0xc4>)
 800179a:	2200      	movs	r2, #0
 800179c:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 800179e:	4b25      	ldr	r3, [pc, #148]	; (8001834 <MX_DFSDM2_Init+0xc4>)
 80017a0:	2202      	movs	r2, #2
 80017a2:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80017a4:	4b23      	ldr	r3, [pc, #140]	; (8001834 <MX_DFSDM2_Init+0xc4>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80017aa:	4b22      	ldr	r3, [pc, #136]	; (8001834 <MX_DFSDM2_Init+0xc4>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 80017b0:	4b20      	ldr	r3, [pc, #128]	; (8001834 <MX_DFSDM2_Init+0xc4>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 80017b6:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <MX_DFSDM2_Init+0xc4>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 80017bc:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <MX_DFSDM2_Init+0xc4>)
 80017be:	2200      	movs	r2, #0
 80017c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 80017c2:	481c      	ldr	r0, [pc, #112]	; (8001834 <MX_DFSDM2_Init+0xc4>)
 80017c4:	f003 ff56 	bl	8005674 <HAL_DFSDM_ChannelInit>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_DFSDM2_Init+0x62>
  {
    Error_Handler();
 80017ce:	f000 fc7f 	bl	80020d0 <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 80017d2:	4b1a      	ldr	r3, [pc, #104]	; (800183c <MX_DFSDM2_Init+0xcc>)
 80017d4:	4a1a      	ldr	r2, [pc, #104]	; (8001840 <MX_DFSDM2_Init+0xd0>)
 80017d6:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 80017d8:	4b18      	ldr	r3, [pc, #96]	; (800183c <MX_DFSDM2_Init+0xcc>)
 80017da:	2201      	movs	r2, #1
 80017dc:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <MX_DFSDM2_Init+0xcc>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 80017e4:	4b15      	ldr	r3, [pc, #84]	; (800183c <MX_DFSDM2_Init+0xcc>)
 80017e6:	2202      	movs	r2, #2
 80017e8:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80017ea:	4b14      	ldr	r3, [pc, #80]	; (800183c <MX_DFSDM2_Init+0xcc>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <MX_DFSDM2_Init+0xcc>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_DFSDM2_Init+0xcc>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <MX_DFSDM2_Init+0xcc>)
 80017fe:	2202      	movs	r2, #2
 8001800:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <MX_DFSDM2_Init+0xcc>)
 8001804:	2200      	movs	r2, #0
 8001806:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <MX_DFSDM2_Init+0xcc>)
 800180a:	2200      	movs	r2, #0
 800180c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <MX_DFSDM2_Init+0xcc>)
 8001810:	2201      	movs	r2, #1
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 8001814:	4b09      	ldr	r3, [pc, #36]	; (800183c <MX_DFSDM2_Init+0xcc>)
 8001816:	2200      	movs	r2, #0
 8001818:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <MX_DFSDM2_Init+0xcc>)
 800181c:	2200      	movs	r2, #0
 800181e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 8001820:	4806      	ldr	r0, [pc, #24]	; (800183c <MX_DFSDM2_Init+0xcc>)
 8001822:	f003 ff27 	bl	8005674 <HAL_DFSDM_ChannelInit>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_DFSDM2_Init+0xc0>
  {
    Error_Handler();
 800182c:	f000 fc50 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	2003d7d4 	.word	0x2003d7d4
 8001838:	40016420 	.word	0x40016420
 800183c:	2003d704 	.word	0x2003d704
 8001840:	400164e0 	.word	0x400164e0

08001844 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8001848:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <MX_FMPI2C1_Init+0x60>)
 800184a:	4a17      	ldr	r2, [pc, #92]	; (80018a8 <MX_FMPI2C1_Init+0x64>)
 800184c:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <MX_FMPI2C1_Init+0x60>)
 8001850:	4a16      	ldr	r2, [pc, #88]	; (80018ac <MX_FMPI2C1_Init+0x68>)
 8001852:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <MX_FMPI2C1_Init+0x60>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 800185a:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <MX_FMPI2C1_Init+0x60>)
 800185c:	2201      	movs	r2, #1
 800185e:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8001860:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <MX_FMPI2C1_Init+0x60>)
 8001862:	2200      	movs	r2, #0
 8001864:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8001866:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <MX_FMPI2C1_Init+0x60>)
 8001868:	2200      	movs	r2, #0
 800186a:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 800186c:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <MX_FMPI2C1_Init+0x60>)
 800186e:	2200      	movs	r2, #0
 8001870:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <MX_FMPI2C1_Init+0x60>)
 8001874:	2200      	movs	r2, #0
 8001876:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <MX_FMPI2C1_Init+0x60>)
 800187a:	2200      	movs	r2, #0
 800187c:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 800187e:	4809      	ldr	r0, [pc, #36]	; (80018a4 <MX_FMPI2C1_Init+0x60>)
 8001880:	f004 fa08 	bl	8005c94 <HAL_FMPI2C_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 800188a:	f000 fc21 	bl	80020d0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800188e:	2100      	movs	r1, #0
 8001890:	4804      	ldr	r0, [pc, #16]	; (80018a4 <MX_FMPI2C1_Init+0x60>)
 8001892:	f004 fa8e 	bl	8005db2 <HAL_FMPI2CEx_ConfigAnalogFilter>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 800189c:	f000 fc18 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	2003d870 	.word	0x2003d870
 80018a8:	40006000 	.word	0x40006000
 80018ac:	00303d5b 	.word	0x00303d5b

080018b0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <MX_I2C2_Init+0x50>)
 80018b6:	4a13      	ldr	r2, [pc, #76]	; (8001904 <MX_I2C2_Init+0x54>)
 80018b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80018ba:	4b11      	ldr	r3, [pc, #68]	; (8001900 <MX_I2C2_Init+0x50>)
 80018bc:	4a12      	ldr	r2, [pc, #72]	; (8001908 <MX_I2C2_Init+0x58>)
 80018be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <MX_I2C2_Init+0x50>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <MX_I2C2_Init+0x50>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <MX_I2C2_Init+0x50>)
 80018ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018d2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018d4:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <MX_I2C2_Init+0x50>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <MX_I2C2_Init+0x50>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018e0:	4b07      	ldr	r3, [pc, #28]	; (8001900 <MX_I2C2_Init+0x50>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <MX_I2C2_Init+0x50>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <MX_I2C2_Init+0x50>)
 80018ee:	f006 f99d 	bl	8007c2c <HAL_I2C_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80018f8:	f000 fbea 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	2003d6b0 	.word	0x2003d6b0
 8001904:	40005800 	.word	0x40005800
 8001908:	000186a0 	.word	0x000186a0

0800190c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001910:	4b13      	ldr	r3, [pc, #76]	; (8001960 <MX_I2S2_Init+0x54>)
 8001912:	4a14      	ldr	r2, [pc, #80]	; (8001964 <MX_I2S2_Init+0x58>)
 8001914:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001916:	4b12      	ldr	r3, [pc, #72]	; (8001960 <MX_I2S2_Init+0x54>)
 8001918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800191c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <MX_I2S2_Init+0x54>)
 8001920:	2200      	movs	r2, #0
 8001922:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001924:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <MX_I2S2_Init+0x54>)
 8001926:	2200      	movs	r2, #0
 8001928:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800192a:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <MX_I2S2_Init+0x54>)
 800192c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001930:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <MX_I2S2_Init+0x54>)
 8001934:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001938:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <MX_I2S2_Init+0x54>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001940:	4b07      	ldr	r3, [pc, #28]	; (8001960 <MX_I2S2_Init+0x54>)
 8001942:	2200      	movs	r2, #0
 8001944:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <MX_I2S2_Init+0x54>)
 8001948:	2201      	movs	r2, #1
 800194a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800194c:	4804      	ldr	r0, [pc, #16]	; (8001960 <MX_I2S2_Init+0x54>)
 800194e:	f006 faa5 	bl	8007e9c <HAL_I2S_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8001958:	f000 fbba 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	2003dc28 	.word	0x2003dc28
 8001964:	40003800 	.word	0x40003800

08001968 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <MX_QUADSPI_Init+0x50>)
 800196e:	4a13      	ldr	r2, [pc, #76]	; (80019bc <MX_QUADSPI_Init+0x54>)
 8001970:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MX_QUADSPI_Init+0x50>)
 8001974:	22ff      	movs	r2, #255	; 0xff
 8001976:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <MX_QUADSPI_Init+0x50>)
 800197a:	2201      	movs	r2, #1
 800197c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <MX_QUADSPI_Init+0x50>)
 8001980:	2200      	movs	r2, #0
 8001982:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <MX_QUADSPI_Init+0x50>)
 8001986:	2201      	movs	r2, #1
 8001988:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800198a:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <MX_QUADSPI_Init+0x50>)
 800198c:	2200      	movs	r2, #0
 800198e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <MX_QUADSPI_Init+0x50>)
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <MX_QUADSPI_Init+0x50>)
 8001998:	2200      	movs	r2, #0
 800199a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <MX_QUADSPI_Init+0x50>)
 800199e:	2200      	movs	r2, #0
 80019a0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80019a2:	4805      	ldr	r0, [pc, #20]	; (80019b8 <MX_QUADSPI_Init+0x50>)
 80019a4:	f006 ff1e 	bl	80087e4 <HAL_QSPI_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80019ae:	f000 fb8f 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	2003dc74 	.word	0x2003dc74
 80019bc:	a0001000 	.word	0xa0001000

080019c0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80019c4:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <MX_SDIO_SD_Init+0x58>)
 80019c6:	4a15      	ldr	r2, [pc, #84]	; (8001a1c <MX_SDIO_SD_Init+0x5c>)
 80019c8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80019ca:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <MX_SDIO_SD_Init+0x58>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <MX_SDIO_SD_Init+0x58>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <MX_SDIO_SD_Init+0x58>)
 80019d8:	2200      	movs	r2, #0
 80019da:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80019dc:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <MX_SDIO_SD_Init+0x58>)
 80019de:	2200      	movs	r2, #0
 80019e0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80019e2:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <MX_SDIO_SD_Init+0x58>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <MX_SDIO_SD_Init+0x58>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 80019ee:	480a      	ldr	r0, [pc, #40]	; (8001a18 <MX_SDIO_SD_Init+0x58>)
 80019f0:	f007 ffd6 	bl	80099a0 <HAL_SD_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 80019fa:	f000 fb69 	bl	80020d0 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80019fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a02:	4805      	ldr	r0, [pc, #20]	; (8001a18 <MX_SDIO_SD_Init+0x58>)
 8001a04:	f008 fdc4 	bl	800a590 <HAL_SD_ConfigWideBusOperation>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8001a0e:	f000 fb5f 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	2003d910 	.word	0x2003d910
 8001a1c:	40012c00 	.word	0x40012c00

08001a20 <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <MX_UART10_Init+0x4c>)
 8001a26:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <MX_UART10_Init+0x50>)
 8001a28:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <MX_UART10_Init+0x4c>)
 8001a2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a30:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <MX_UART10_Init+0x4c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <MX_UART10_Init+0x4c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <MX_UART10_Init+0x4c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <MX_UART10_Init+0x4c>)
 8001a46:	220c      	movs	r2, #12
 8001a48:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a4a:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <MX_UART10_Init+0x4c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <MX_UART10_Init+0x4c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8001a56:	4805      	ldr	r0, [pc, #20]	; (8001a6c <MX_UART10_Init+0x4c>)
 8001a58:	f009 fb9c 	bl	800b194 <HAL_UART_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_UART10_Init+0x46>
  {
    Error_Handler();
 8001a62:	f000 fb35 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	2003d73c 	.word	0x2003d73c
 8001a70:	40011c00 	.word	0x40011c00

08001a74 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <MX_USART6_UART_Init+0x4c>)
 8001a7a:	4a12      	ldr	r2, [pc, #72]	; (8001ac4 <MX_USART6_UART_Init+0x50>)
 8001a7c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <MX_USART6_UART_Init+0x4c>)
 8001a80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a84:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <MX_USART6_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <MX_USART6_UART_Init+0x4c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001a92:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <MX_USART6_UART_Init+0x4c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <MX_USART6_UART_Init+0x4c>)
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9e:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <MX_USART6_UART_Init+0x4c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <MX_USART6_UART_Init+0x4c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001aaa:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <MX_USART6_UART_Init+0x4c>)
 8001aac:	f009 fb72 	bl	800b194 <HAL_UART_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001ab6:	f000 fb0b 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	2003d994 	.word	0x2003d994
 8001ac4:	40011400 	.word	0x40011400

08001ac8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08e      	sub	sp, #56	; 0x38
 8001acc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
 8001adc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	623b      	str	r3, [r7, #32]
 8001ae2:	4bb0      	ldr	r3, [pc, #704]	; (8001da4 <MX_GPIO_Init+0x2dc>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4aaf      	ldr	r2, [pc, #700]	; (8001da4 <MX_GPIO_Init+0x2dc>)
 8001ae8:	f043 0310 	orr.w	r3, r3, #16
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4bad      	ldr	r3, [pc, #692]	; (8001da4 <MX_GPIO_Init+0x2dc>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	623b      	str	r3, [r7, #32]
 8001af8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
 8001afe:	4ba9      	ldr	r3, [pc, #676]	; (8001da4 <MX_GPIO_Init+0x2dc>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4aa8      	ldr	r2, [pc, #672]	; (8001da4 <MX_GPIO_Init+0x2dc>)
 8001b04:	f043 0304 	orr.w	r3, r3, #4
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4ba6      	ldr	r3, [pc, #664]	; (8001da4 <MX_GPIO_Init+0x2dc>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	61fb      	str	r3, [r7, #28]
 8001b14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	61bb      	str	r3, [r7, #24]
 8001b1a:	4ba2      	ldr	r3, [pc, #648]	; (8001da4 <MX_GPIO_Init+0x2dc>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4aa1      	ldr	r2, [pc, #644]	; (8001da4 <MX_GPIO_Init+0x2dc>)
 8001b20:	f043 0320 	orr.w	r3, r3, #32
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b9f      	ldr	r3, [pc, #636]	; (8001da4 <MX_GPIO_Init+0x2dc>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0320 	and.w	r3, r3, #32
 8001b2e:	61bb      	str	r3, [r7, #24]
 8001b30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	4b9b      	ldr	r3, [pc, #620]	; (8001da4 <MX_GPIO_Init+0x2dc>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a9a      	ldr	r2, [pc, #616]	; (8001da4 <MX_GPIO_Init+0x2dc>)
 8001b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b98      	ldr	r3, [pc, #608]	; (8001da4 <MX_GPIO_Init+0x2dc>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	4b94      	ldr	r3, [pc, #592]	; (8001da4 <MX_GPIO_Init+0x2dc>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a93      	ldr	r2, [pc, #588]	; (8001da4 <MX_GPIO_Init+0x2dc>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b91      	ldr	r3, [pc, #580]	; (8001da4 <MX_GPIO_Init+0x2dc>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	4b8d      	ldr	r3, [pc, #564]	; (8001da4 <MX_GPIO_Init+0x2dc>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a8c      	ldr	r2, [pc, #560]	; (8001da4 <MX_GPIO_Init+0x2dc>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b8a      	ldr	r3, [pc, #552]	; (8001da4 <MX_GPIO_Init+0x2dc>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	4b86      	ldr	r3, [pc, #536]	; (8001da4 <MX_GPIO_Init+0x2dc>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a85      	ldr	r2, [pc, #532]	; (8001da4 <MX_GPIO_Init+0x2dc>)
 8001b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b83      	ldr	r3, [pc, #524]	; (8001da4 <MX_GPIO_Init+0x2dc>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	4b7f      	ldr	r3, [pc, #508]	; (8001da4 <MX_GPIO_Init+0x2dc>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a7e      	ldr	r2, [pc, #504]	; (8001da4 <MX_GPIO_Init+0x2dc>)
 8001bac:	f043 0308 	orr.w	r3, r3, #8
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b7c      	ldr	r3, [pc, #496]	; (8001da4 <MX_GPIO_Init+0x2dc>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2138      	movs	r1, #56	; 0x38
 8001bc2:	4879      	ldr	r0, [pc, #484]	; (8001da8 <MX_GPIO_Init+0x2e0>)
 8001bc4:	f004 faea 	bl	800619c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2120      	movs	r1, #32
 8001bcc:	4877      	ldr	r0, [pc, #476]	; (8001dac <MX_GPIO_Init+0x2e4>)
 8001bce:	f004 fae5 	bl	800619c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001bd8:	4875      	ldr	r0, [pc, #468]	; (8001db0 <MX_GPIO_Init+0x2e8>)
 8001bda:	f004 fadf 	bl	800619c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin, GPIO_PIN_RESET);
 8001bde:	2200      	movs	r2, #0
 8001be0:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8001be4:	4873      	ldr	r0, [pc, #460]	; (8001db4 <MX_GPIO_Init+0x2ec>)
 8001be6:	f004 fad9 	bl	800619c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8001bea:	2338      	movs	r3, #56	; 0x38
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4869      	ldr	r0, [pc, #420]	; (8001da8 <MX_GPIO_Init+0x2e0>)
 8001c02:	f004 f921 	bl	8005e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8001c06:	2340      	movs	r3, #64	; 0x40
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c12:	2300      	movs	r3, #0
 8001c14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001c16:	2303      	movs	r3, #3
 8001c18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8001c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4861      	ldr	r0, [pc, #388]	; (8001da8 <MX_GPIO_Init+0x2e0>)
 8001c22:	f004 f911 	bl	8005e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c40:	4619      	mov	r1, r3
 8001c42:	485d      	ldr	r0, [pc, #372]	; (8001db8 <MX_GPIO_Init+0x2f0>)
 8001c44:	f004 f900 	bl	8005e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c4c:	4b5b      	ldr	r3, [pc, #364]	; (8001dbc <MX_GPIO_Init+0x2f4>)
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8001c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4854      	ldr	r0, [pc, #336]	; (8001dac <MX_GPIO_Init+0x2e4>)
 8001c5c:	f004 f8f4 	bl	8005e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c60:	2301      	movs	r3, #1
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c64:	4b55      	ldr	r3, [pc, #340]	; (8001dbc <MX_GPIO_Init+0x2f4>)
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c70:	4619      	mov	r1, r3
 8001c72:	4853      	ldr	r0, [pc, #332]	; (8001dc0 <MX_GPIO_Init+0x2f8>)
 8001c74:	f004 f8e8 	bl	8005e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8001c78:	2320      	movs	r3, #32
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c84:	2300      	movs	r3, #0
 8001c86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4847      	ldr	r0, [pc, #284]	; (8001dac <MX_GPIO_Init+0x2e4>)
 8001c90:	f004 f8da 	bl	8005e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001c94:	2301      	movs	r3, #1
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cac:	4619      	mov	r1, r3
 8001cae:	4840      	ldr	r0, [pc, #256]	; (8001db0 <MX_GPIO_Init+0x2e8>)
 8001cb0:	f004 f8ca 	bl	8005e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8001cb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cba:	4b40      	ldr	r3, [pc, #256]	; (8001dbc <MX_GPIO_Init+0x2f4>)
 8001cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	483b      	ldr	r0, [pc, #236]	; (8001db8 <MX_GPIO_Init+0x2f0>)
 8001cca:	f004 f8bd 	bl	8005e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8001cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001ce0:	2307      	movs	r3, #7
 8001ce2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8001ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4831      	ldr	r0, [pc, #196]	; (8001db0 <MX_GPIO_Init+0x2e8>)
 8001cec:	f004 f8ac 	bl	8005e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 8001cf0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d06:	4619      	mov	r1, r3
 8001d08:	4829      	ldr	r0, [pc, #164]	; (8001db0 <MX_GPIO_Init+0x2e8>)
 8001d0a:	f004 f89d 	bl	8005e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 8001d0e:	f248 0380 	movw	r3, #32896	; 0x8080
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d14:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <MX_GPIO_Init+0x2f4>)
 8001d16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d20:	4619      	mov	r1, r3
 8001d22:	4824      	ldr	r0, [pc, #144]	; (8001db4 <MX_GPIO_Init+0x2ec>)
 8001d24:	f004 f890 	bl	8005e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin;
 8001d28:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2300      	movs	r3, #0
 8001d38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d3e:	4619      	mov	r1, r3
 8001d40:	481c      	ldr	r0, [pc, #112]	; (8001db4 <MX_GPIO_Init+0x2ec>)
 8001d42:	f004 f881 	bl	8005e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 8001d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d54:	2300      	movs	r3, #0
 8001d56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8001d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d60:	4619      	mov	r1, r3
 8001d62:	4817      	ldr	r0, [pc, #92]	; (8001dc0 <MX_GPIO_Init+0x2f8>)
 8001d64:	f004 f870 	bl	8005e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001d68:	2330      	movs	r3, #48	; 0x30
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d74:	2303      	movs	r3, #3
 8001d76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d78:	2306      	movs	r3, #6
 8001d7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d80:	4619      	mov	r1, r3
 8001d82:	480b      	ldr	r0, [pc, #44]	; (8001db0 <MX_GPIO_Init+0x2e8>)
 8001d84:	f004 f860 	bl	8005e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001d88:	2340      	movs	r3, #64	; 0x40
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <MX_GPIO_Init+0x2f4>)
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4805      	ldr	r0, [pc, #20]	; (8001db0 <MX_GPIO_Init+0x2e8>)
 8001d9c:	f004 f854 	bl	8005e48 <HAL_GPIO_Init>
 8001da0:	e010      	b.n	8001dc4 <MX_GPIO_Init+0x2fc>
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40020800 	.word	0x40020800
 8001db0:	40020400 	.word	0x40020400
 8001db4:	40021800 	.word	0x40021800
 8001db8:	40021400 	.word	0x40021400
 8001dbc:	10110000 	.word	0x10110000
 8001dc0:	40020000 	.word	0x40020000

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8001dc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8001dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dde:	4619      	mov	r1, r3
 8001de0:	4803      	ldr	r0, [pc, #12]	; (8001df0 <MX_GPIO_Init+0x328>)
 8001de2:	f004 f831 	bl	8005e48 <HAL_GPIO_Init>

}
 8001de6:	bf00      	nop
 8001de8:	3738      	adds	r7, #56	; 0x38
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40020400 	.word	0x40020400

08001df4 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
 8001e08:	615a      	str	r2, [r3, #20]
 8001e0a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001e0c:	4b4f      	ldr	r3, [pc, #316]	; (8001f4c <MX_FSMC_Init+0x158>)
 8001e0e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001e12:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001e14:	4b4d      	ldr	r3, [pc, #308]	; (8001f4c <MX_FSMC_Init+0x158>)
 8001e16:	4a4e      	ldr	r2, [pc, #312]	; (8001f50 <MX_FSMC_Init+0x15c>)
 8001e18:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001e1a:	4b4c      	ldr	r3, [pc, #304]	; (8001f4c <MX_FSMC_Init+0x158>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001e20:	4b4a      	ldr	r3, [pc, #296]	; (8001f4c <MX_FSMC_Init+0x158>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001e26:	4b49      	ldr	r3, [pc, #292]	; (8001f4c <MX_FSMC_Init+0x158>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001e2c:	4b47      	ldr	r3, [pc, #284]	; (8001f4c <MX_FSMC_Init+0x158>)
 8001e2e:	2210      	movs	r2, #16
 8001e30:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001e32:	4b46      	ldr	r3, [pc, #280]	; (8001f4c <MX_FSMC_Init+0x158>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001e38:	4b44      	ldr	r3, [pc, #272]	; (8001f4c <MX_FSMC_Init+0x158>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001e3e:	4b43      	ldr	r3, [pc, #268]	; (8001f4c <MX_FSMC_Init+0x158>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001e44:	4b41      	ldr	r3, [pc, #260]	; (8001f4c <MX_FSMC_Init+0x158>)
 8001e46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e4a:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001e4c:	4b3f      	ldr	r3, [pc, #252]	; (8001f4c <MX_FSMC_Init+0x158>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001e52:	4b3e      	ldr	r3, [pc, #248]	; (8001f4c <MX_FSMC_Init+0x158>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001e58:	4b3c      	ldr	r3, [pc, #240]	; (8001f4c <MX_FSMC_Init+0x158>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001e5e:	4b3b      	ldr	r3, [pc, #236]	; (8001f4c <MX_FSMC_Init+0x158>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001e64:	4b39      	ldr	r3, [pc, #228]	; (8001f4c <MX_FSMC_Init+0x158>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001e6a:	4b38      	ldr	r3, [pc, #224]	; (8001f4c <MX_FSMC_Init+0x158>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001e70:	4b36      	ldr	r3, [pc, #216]	; (8001f4c <MX_FSMC_Init+0x158>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001e76:	230f      	movs	r3, #15
 8001e78:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001e7a:	230f      	movs	r3, #15
 8001e7c:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001e7e:	23ff      	movs	r3, #255	; 0xff
 8001e80:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001e82:	230f      	movs	r3, #15
 8001e84:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001e86:	2310      	movs	r3, #16
 8001e88:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001e8a:	2311      	movs	r3, #17
 8001e8c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	2200      	movs	r2, #0
 8001e96:	4619      	mov	r1, r3
 8001e98:	482c      	ldr	r0, [pc, #176]	; (8001f4c <MX_FSMC_Init+0x158>)
 8001e9a:	f008 fef9 	bl	800ac90 <HAL_SRAM_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 8001ea4:	f000 f914 	bl	80020d0 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8001ea8:	4b2a      	ldr	r3, [pc, #168]	; (8001f54 <MX_FSMC_Init+0x160>)
 8001eaa:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001eae:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001eb0:	4b28      	ldr	r3, [pc, #160]	; (8001f54 <MX_FSMC_Init+0x160>)
 8001eb2:	4a27      	ldr	r2, [pc, #156]	; (8001f50 <MX_FSMC_Init+0x15c>)
 8001eb4:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 8001eb6:	4b27      	ldr	r3, [pc, #156]	; (8001f54 <MX_FSMC_Init+0x160>)
 8001eb8:	2204      	movs	r2, #4
 8001eba:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001ebc:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <MX_FSMC_Init+0x160>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001ec2:	4b24      	ldr	r3, [pc, #144]	; (8001f54 <MX_FSMC_Init+0x160>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001ec8:	4b22      	ldr	r3, [pc, #136]	; (8001f54 <MX_FSMC_Init+0x160>)
 8001eca:	2210      	movs	r2, #16
 8001ecc:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001ece:	4b21      	ldr	r3, [pc, #132]	; (8001f54 <MX_FSMC_Init+0x160>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001ed4:	4b1f      	ldr	r3, [pc, #124]	; (8001f54 <MX_FSMC_Init+0x160>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001eda:	4b1e      	ldr	r3, [pc, #120]	; (8001f54 <MX_FSMC_Init+0x160>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001ee0:	4b1c      	ldr	r3, [pc, #112]	; (8001f54 <MX_FSMC_Init+0x160>)
 8001ee2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ee6:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001ee8:	4b1a      	ldr	r3, [pc, #104]	; (8001f54 <MX_FSMC_Init+0x160>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001eee:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <MX_FSMC_Init+0x160>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001ef4:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <MX_FSMC_Init+0x160>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001efa:	4b16      	ldr	r3, [pc, #88]	; (8001f54 <MX_FSMC_Init+0x160>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001f00:	4b14      	ldr	r3, [pc, #80]	; (8001f54 <MX_FSMC_Init+0x160>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001f06:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <MX_FSMC_Init+0x160>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <MX_FSMC_Init+0x160>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001f12:	230f      	movs	r3, #15
 8001f14:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001f16:	230f      	movs	r3, #15
 8001f18:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001f1a:	23ff      	movs	r3, #255	; 0xff
 8001f1c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001f1e:	230f      	movs	r3, #15
 8001f20:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001f22:	2310      	movs	r3, #16
 8001f24:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001f26:	2311      	movs	r3, #17
 8001f28:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8001f2e:	1d3b      	adds	r3, r7, #4
 8001f30:	2200      	movs	r2, #0
 8001f32:	4619      	mov	r1, r3
 8001f34:	4807      	ldr	r0, [pc, #28]	; (8001f54 <MX_FSMC_Init+0x160>)
 8001f36:	f008 feab 	bl	800ac90 <HAL_SRAM_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_FSMC_Init+0x150>
  {
    Error_Handler( );
 8001f40:	f000 f8c6 	bl	80020d0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001f44:	bf00      	nop
 8001f46:	3720      	adds	r7, #32
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	2003d77c 	.word	0x2003d77c
 8001f50:	a0000104 	.word	0xa0000104
 8001f54:	2003d8c0 	.word	0x2003d8c0

08001f58 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001f60:	f012 ff44 	bl	8014dec <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8001f64:	2108      	movs	r1, #8
 8001f66:	4804      	ldr	r0, [pc, #16]	; (8001f78 <StartBlink01+0x20>)
 8001f68:	f004 f931 	bl	80061ce <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8001f6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f70:	f010 f8e6 	bl	8012140 <osDelay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8001f74:	e7f6      	b.n	8001f64 <StartBlink01+0xc>
 8001f76:	bf00      	nop
 8001f78:	40021000 	.word	0x40021000

08001f7c <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 8001f84:	2120      	movs	r1, #32
 8001f86:	4804      	ldr	r0, [pc, #16]	; (8001f98 <StartBlink02+0x1c>)
 8001f88:	f004 f921 	bl	80061ce <HAL_GPIO_TogglePin>
	  osDelay(500);
 8001f8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f90:	f010 f8d6 	bl	8012140 <osDelay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 8001f94:	e7f6      	b.n	8001f84 <StartBlink02+0x8>
 8001f96:	bf00      	nop
 8001f98:	40020800 	.word	0x40020800

08001f9c <StartButtonPoll>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonPoll */
void StartButtonPoll(void *argument)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonPoll */
  /* Infinite loop */
  for(;;)
  {
	  bool buttonCurrent = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	4813      	ldr	r0, [pc, #76]	; (8001ff4 <StartButtonPoll+0x58>)
 8001fa8:	f004 f8e0 	bl	800616c <HAL_GPIO_ReadPin>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	bf14      	ite	ne
 8001fb2:	2301      	movne	r3, #1
 8001fb4:	2300      	moveq	r3, #0
 8001fb6:	73fb      	strb	r3, [r7, #15]
	  if(buttonCurrent && !prevState) {
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d012      	beq.n	8001fe4 <StartButtonPoll+0x48>
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <StartButtonPoll+0x5c>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	f083 0301 	eor.w	r3, r3, #1
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00b      	beq.n	8001fe4 <StartButtonPoll+0x48>
		  counter = (counter+1)%ubNumberOfFiles;
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <StartButtonPoll+0x60>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	4a0b      	ldr	r2, [pc, #44]	; (8002000 <StartButtonPoll+0x64>)
 8001fd4:	7812      	ldrb	r2, [r2, #0]
 8001fd6:	fbb3 f1f2 	udiv	r1, r3, r2
 8001fda:	fb02 f201 	mul.w	r2, r2, r1
 8001fde:	1a9b      	subs	r3, r3, r2
 8001fe0:	4a06      	ldr	r2, [pc, #24]	; (8001ffc <StartButtonPoll+0x60>)
 8001fe2:	6013      	str	r3, [r2, #0]
	  }
	  prevState = buttonCurrent;
 8001fe4:	4a04      	ldr	r2, [pc, #16]	; (8001ff8 <StartButtonPoll+0x5c>)
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	7013      	strb	r3, [r2, #0]
	  osDelay(50);
 8001fea:	2032      	movs	r0, #50	; 0x32
 8001fec:	f010 f8a8 	bl	8012140 <osDelay>
  {
 8001ff0:	e7d8      	b.n	8001fa4 <StartButtonPoll+0x8>
 8001ff2:	bf00      	nop
 8001ff4:	40020000 	.word	0x40020000
 8001ff8:	2000015e 	.word	0x2000015e
 8001ffc:	20000158 	.word	0x20000158
 8002000:	20000150 	.word	0x20000150

08002004 <StartDisplayImage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayImage */
void StartDisplayImage(void *argument)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayImage */
	/* Infinite loop */
	for(;;)
	{
		if (counter != count)
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <StartDisplayImage+0x54>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	4b12      	ldr	r3, [pc, #72]	; (800205c <StartDisplayImage+0x58>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d018      	beq.n	800204c <StartDisplayImage+0x48>
		{
			BSP_LCD_Clear(LCD_COLOR_WHITE);
 800201a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800201e:	f002 fa11 	bl	8004444 <BSP_LCD_Clear>
			BSP_LCD_DrawBitmap(0, 0, bufferArray[counter].uwInternelBuffer);
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <StartDisplayImage+0x58>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800202a:	fb02 f303 	mul.w	r3, r2, r3
 800202e:	4a0c      	ldr	r2, [pc, #48]	; (8002060 <StartDisplayImage+0x5c>)
 8002030:	4413      	add	r3, r2
 8002032:	461a      	mov	r2, r3
 8002034:	2100      	movs	r1, #0
 8002036:	2000      	movs	r0, #0
 8002038:	f002 fb4c 	bl	80046d4 <BSP_LCD_DrawBitmap>
			noteDisplayed = true;
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <StartDisplayImage+0x60>)
 800203e:	2201      	movs	r2, #1
 8002040:	701a      	strb	r2, [r3, #0]
			count = counter;
 8002042:	4b06      	ldr	r3, [pc, #24]	; (800205c <StartDisplayImage+0x58>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	b2da      	uxtb	r2, r3
 8002048:	4b03      	ldr	r3, [pc, #12]	; (8002058 <StartDisplayImage+0x54>)
 800204a:	701a      	strb	r2, [r3, #0]
		}
		osDelay(1000);
 800204c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002050:	f010 f876 	bl	8012140 <osDelay>
		if (counter != count)
 8002054:	e7da      	b.n	800200c <StartDisplayImage+0x8>
 8002056:	bf00      	nop
 8002058:	2000015c 	.word	0x2000015c
 800205c:	20000158 	.word	0x20000158
 8002060:	200052ac 	.word	0x200052ac
 8002064:	2000015d 	.word	0x2000015d

08002068 <StartDisplayNoteLetters>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayNoteLetters */
void StartDisplayNoteLetters(void *argument)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayNoteLetters */
  /* Infinite loop */
	for(;;)
	{
		if(noteDisplayed) {
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <StartDisplayNoteLetters+0x38>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00e      	beq.n	8002096 <StartDisplayNoteLetters+0x2e>
			outputNoteLetters(bufferArray[counter].uwInternelBuffer + 108);
 8002078:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <StartDisplayNoteLetters+0x3c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002080:	fb02 f303 	mul.w	r3, r2, r3
 8002084:	4a08      	ldr	r2, [pc, #32]	; (80020a8 <StartDisplayNoteLetters+0x40>)
 8002086:	4413      	add	r3, r2
 8002088:	336c      	adds	r3, #108	; 0x6c
 800208a:	4618      	mov	r0, r3
 800208c:	f000 fb28 	bl	80026e0 <outputNoteLetters>
			noteDisplayed = false;
 8002090:	4b03      	ldr	r3, [pc, #12]	; (80020a0 <StartDisplayNoteLetters+0x38>)
 8002092:	2200      	movs	r2, #0
 8002094:	701a      	strb	r2, [r3, #0]
		}
		osDelay(1000);
 8002096:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800209a:	f010 f851 	bl	8012140 <osDelay>
		if(noteDisplayed) {
 800209e:	e7e7      	b.n	8002070 <StartDisplayNoteLetters+0x8>
 80020a0:	2000015d 	.word	0x2000015d
 80020a4:	20000158 	.word	0x20000158
 80020a8:	200052ac 	.word	0x200052ac

080020ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a04      	ldr	r2, [pc, #16]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d101      	bne.n	80020c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020be:	f002 fe75 	bl	8004dac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40001000 	.word	0x40001000

080020d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <checkNoteSpace>:
extern int C_SPACE = 2;
extern int E_SPACE = 3;


bool checkNoteSpace(int i, int j, uint8_t * imageArray)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b089      	sub	sp, #36	; 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
   bool completeSquare = true;
 80020ec:	2301      	movs	r3, #1
 80020ee:	77fb      	strb	r3, [r7, #31]
   for(int k = i; k < (i + NOTE_PIXEL_SIZE); k = k + 1) //One navigates rows
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	61bb      	str	r3, [r7, #24]
 80020f4:	e03c      	b.n	8002170 <checkNoteSpace+0x90>
   {
      for(int l = j; l < j + (NOTE_PIXEL_SIZE * RGB_BYTE_PER_PIXEL); l = l + RGB_BYTE_PER_PIXEL) //One navigates pixels/columns
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	e02b      	b.n	8002154 <checkNoteSpace+0x74>
      {
         if (k < LCD_PIXEL_HEIGHT || l < LCD_PIXEL_WIDTH * RGB_BYTE_PER_PIXEL) //Check that k and l are in bounds of the image borders
 80020fc:	4b23      	ldr	r3, [pc, #140]	; (800218c <checkNoteSpace+0xac>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	429a      	cmp	r2, r3
 8002104:	db08      	blt.n	8002118 <checkNoteSpace+0x38>
 8002106:	4b22      	ldr	r3, [pc, #136]	; (8002190 <checkNoteSpace+0xb0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a22      	ldr	r2, [pc, #136]	; (8002194 <checkNoteSpace+0xb4>)
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	fb02 f303 	mul.w	r3, r2, r3
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	429a      	cmp	r2, r3
 8002116:	da14      	bge.n	8002142 <checkNoteSpace+0x62>
         {
            uint16_t *rgb565 = (uint16_t*)imageArray + ((LCD_PIXEL_HEIGHT*k) + (l/2)); //Get current pixel color
 8002118:	4b1c      	ldr	r3, [pc, #112]	; (800218c <checkNoteSpace+0xac>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	fb02 f203 	mul.w	r2, r2, r3
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	0fd9      	lsrs	r1, r3, #31
 8002126:	440b      	add	r3, r1
 8002128:	105b      	asrs	r3, r3, #1
 800212a:	4413      	add	r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
            if (*rgb565 != 0)
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <checkNoteSpace+0x68>
            {
               completeSquare = false; //If the current pixel in the square is not black, then the entire area isn't black
 800213c:	2300      	movs	r3, #0
 800213e:	77fb      	strb	r3, [r7, #31]
         {
 8002140:	e002      	b.n	8002148 <checkNoteSpace+0x68>
            }
         }
         else
         {
            completeSquare = false;
 8002142:	2300      	movs	r3, #0
 8002144:	77fb      	strb	r3, [r7, #31]
 8002146:	e000      	b.n	800214a <checkNoteSpace+0x6a>
         {
 8002148:	bf00      	nop
      for(int l = j; l < j + (NOTE_PIXEL_SIZE * RGB_BYTE_PER_PIXEL); l = l + RGB_BYTE_PER_PIXEL) //One navigates pixels/columns
 800214a:	4b12      	ldr	r3, [pc, #72]	; (8002194 <checkNoteSpace+0xb4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	4413      	add	r3, r2
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	4b10      	ldr	r3, [pc, #64]	; (8002198 <checkNoteSpace+0xb8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0e      	ldr	r2, [pc, #56]	; (8002194 <checkNoteSpace+0xb4>)
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	fb02 f203 	mul.w	r2, r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	4413      	add	r3, r2
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	429a      	cmp	r2, r3
 8002168:	dbc8      	blt.n	80020fc <checkNoteSpace+0x1c>
   for(int k = i; k < (i + NOTE_PIXEL_SIZE); k = k + 1) //One navigates rows
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	3301      	adds	r3, #1
 800216e:	61bb      	str	r3, [r7, #24]
 8002170:	4b09      	ldr	r3, [pc, #36]	; (8002198 <checkNoteSpace+0xb8>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4413      	add	r3, r2
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	429a      	cmp	r2, r3
 800217c:	dbbb      	blt.n	80020f6 <checkNoteSpace+0x16>
         }
      }
   }
   return completeSquare;
 800217e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3724      	adds	r7, #36	; 0x24
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	20000000 	.word	0x20000000
 8002190:	20000004 	.word	0x20000004
 8002194:	20000008 	.word	0x20000008
 8002198:	2000000c 	.word	0x2000000c

0800219c <findNotes>:


NoteClass * findNotes(NoteClass * noteArray, uint8_t * imageArray)
{
 800219c:	b5b0      	push	{r4, r5, r7, lr}
 800219e:	b090      	sub	sp, #64	; 0x40
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
   int noteCount = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   int distance = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	62bb      	str	r3, [r7, #40]	; 0x28
   bool existingNote = false;
 80021ae:	2300      	movs	r3, #0
 80021b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
   int yVal = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24

   for (int i = 0; i < (LCD_PIXEL_WIDTH * RGB_BYTE_PER_PIXEL); i = i + RGB_BYTE_PER_PIXEL) //Move pixels
 80021b8:	2300      	movs	r3, #0
 80021ba:	637b      	str	r3, [r7, #52]	; 0x34
 80021bc:	e0d7      	b.n	800236e <findNotes+0x1d2>
   {
      for (int j = 0; j < LCD_PIXEL_HEIGHT; j = j + 1) //Move rows
 80021be:	2300      	movs	r3, #0
 80021c0:	633b      	str	r3, [r7, #48]	; 0x30
 80021c2:	e0c9      	b.n	8002358 <findNotes+0x1bc>
      { //I changed the order of the inner and outer loops 
        //Because notes will never be placed vertically under each other
         uint16_t *rgb565 = (uint16_t*)imageArray + ((LCD_PIXEL_HEIGHT*j) + (i/2)) - 1;
 80021c4:	4b71      	ldr	r3, [pc, #452]	; (800238c <findNotes+0x1f0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021ca:	fb02 f203 	mul.w	r2, r2, r3
 80021ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d0:	0fd9      	lsrs	r1, r3, #31
 80021d2:	440b      	add	r3, r1
 80021d4:	105b      	asrs	r3, r3, #1
 80021d6:	4413      	add	r3, r2
 80021d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80021dc:	3b01      	subs	r3, #1
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	4413      	add	r3, r2
 80021e4:	623b      	str	r3, [r7, #32]
         if (*rgb565 == 0)
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 80b1 	bne.w	8002352 <findNotes+0x1b6>
         {
            bool completeSquare = true;
 80021f0:	2301      	movs	r3, #1
 80021f2:	77fb      	strb	r3, [r7, #31]
            completeSquare = checkNoteSpace(j, i, imageArray); //Swapped the input order due to loop change
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80021f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021fa:	f7ff ff71 	bl	80020e0 <checkNoteSpace>
 80021fe:	4603      	mov	r3, r0
 8002200:	77fb      	strb	r3, [r7, #31]
            if (completeSquare)
 8002202:	7ffb      	ldrb	r3, [r7, #31]
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 80a4 	beq.w	8002352 <findNotes+0x1b6>
            {
               int startingPixelRow = j;
 800220a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220c:	61bb      	str	r3, [r7, #24]
               int startingPixelColumn = i/RGB_BYTE_PER_PIXEL; //The array indexes are 240x480 due to 2 bytes per pixel
 800220e:	4b60      	ldr	r3, [pc, #384]	; (8002390 <findNotes+0x1f4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002214:	fb92 f3f3 	sdiv	r3, r2, r3
 8002218:	617b      	str	r3, [r7, #20]
                                                               //The horizontal index moves twice per loop and is double the 240 index
               i = i + (NOTE_PIXEL_SIZE * RGB_BYTE_PER_PIXEL);
 800221a:	4b5e      	ldr	r3, [pc, #376]	; (8002394 <findNotes+0x1f8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a5c      	ldr	r2, [pc, #368]	; (8002390 <findNotes+0x1f4>)
 8002220:	6812      	ldr	r2, [r2, #0]
 8002222:	fb02 f303 	mul.w	r3, r2, r3
 8002226:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002228:	4413      	add	r3, r2
 800222a:	637b      	str	r3, [r7, #52]	; 0x34

               for(int z = 0; z < noteCount; z++ )
 800222c:	2300      	movs	r3, #0
 800222e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002230:	e05a      	b.n	80022e8 <findNotes+0x14c>
               {
                  distance = (int)sqrt((double)((startingPixelRow-noteArray[z].startPixelRow)*(startingPixelRow-noteArray[z].startPixelRow))+(double)((startingPixelColumn-noteArray[z].startPixelColumn)*(startingPixelColumn-noteArray[z].startPixelColumn)));
 8002232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002234:	4613      	mov	r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4413      	add	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	461a      	mov	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	1ad1      	subs	r1, r2, r3
 8002248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800224a:	4613      	mov	r3, r2
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	4413      	add	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	461a      	mov	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4413      	add	r3, r2
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	fb03 f301 	mul.w	r3, r3, r1
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe f97e 	bl	8000564 <__aeabi_i2d>
 8002268:	4604      	mov	r4, r0
 800226a:	460d      	mov	r5, r1
 800226c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800226e:	4613      	mov	r3, r2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	4413      	add	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	461a      	mov	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4413      	add	r3, r2
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	1ad1      	subs	r1, r2, r3
 8002282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002284:	4613      	mov	r3, r2
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	4413      	add	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	461a      	mov	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	fb03 f301 	mul.w	r3, r3, r1
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe f961 	bl	8000564 <__aeabi_i2d>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4620      	mov	r0, r4
 80022a8:	4629      	mov	r1, r5
 80022aa:	f7fe f80f 	bl	80002cc <__adddf3>
 80022ae:	4603      	mov	r3, r0
 80022b0:	460c      	mov	r4, r1
 80022b2:	ec44 3b17 	vmov	d7, r3, r4
 80022b6:	eeb0 0a47 	vmov.f32	s0, s14
 80022ba:	eef0 0a67 	vmov.f32	s1, s15
 80022be:	f013 f897 	bl	80153f0 <sqrt>
 80022c2:	ec54 3b10 	vmov	r3, r4, d0
 80022c6:	4618      	mov	r0, r3
 80022c8:	4621      	mov	r1, r4
 80022ca:	f7fe fc65 	bl	8000b98 <__aeabi_d2iz>
 80022ce:	4603      	mov	r3, r0
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
                  if(distance < NOTE_DIAMETER)
 80022d2:	4b31      	ldr	r3, [pc, #196]	; (8002398 <findNotes+0x1fc>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022d8:	429a      	cmp	r2, r3
 80022da:	da02      	bge.n	80022e2 <findNotes+0x146>
                     existingNote = true;
 80022dc:	2301      	movs	r3, #1
 80022de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
               for(int z = 0; z < noteCount; z++ )
 80022e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e4:	3301      	adds	r3, #1
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ec:	429a      	cmp	r2, r3
 80022ee:	dba0      	blt.n	8002232 <findNotes+0x96>
               }

               if (noteCount < MAX_NOTE_COUNT && !existingNote)
 80022f0:	4b2a      	ldr	r3, [pc, #168]	; (800239c <findNotes+0x200>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022f6:	429a      	cmp	r2, r3
 80022f8:	da28      	bge.n	800234c <findNotes+0x1b0>
 80022fa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80022fe:	f083 0301 	eor.w	r3, r3, #1
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d021      	beq.n	800234c <findNotes+0x1b0>
               {
                  startingPixelRow += 7;
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	3307      	adds	r3, #7
 800230c:	61bb      	str	r3, [r7, #24]
                  startingPixelColumn += 19;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	3313      	adds	r3, #19
 8002312:	617b      	str	r3, [r7, #20]
                  struct NoteClass newNote = {startingPixelRow, startingPixelColumn};
 8002314:	f107 0308 	add.w	r3, r7, #8
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	60fb      	str	r3, [r7, #12]
                  noteArray[noteCount] = newNote;
 8002328:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800232a:	4613      	mov	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	461a      	mov	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4413      	add	r3, r2
 8002338:	461c      	mov	r4, r3
 800233a:	f107 0308 	add.w	r3, r7, #8
 800233e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002342:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                  noteCount = noteCount + 1; //Creating note structs and storing them in an array like the line structs
 8002346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002348:	3301      	adds	r3, #1
 800234a:	63fb      	str	r3, [r7, #60]	; 0x3c
                  /*printf("%i", startingPixelColumn);
                  printf("%s", "-");
                  printf("%i", startingPixelRow);
                  printf("%s", "  ");*/
               }
               existingNote = false;
 800234c:	2300      	movs	r3, #0
 800234e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      for (int j = 0; j < LCD_PIXEL_HEIGHT; j = j + 1) //Move rows
 8002352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002354:	3301      	adds	r3, #1
 8002356:	633b      	str	r3, [r7, #48]	; 0x30
 8002358:	4b0c      	ldr	r3, [pc, #48]	; (800238c <findNotes+0x1f0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800235e:	429a      	cmp	r2, r3
 8002360:	f6ff af30 	blt.w	80021c4 <findNotes+0x28>
   for (int i = 0; i < (LCD_PIXEL_WIDTH * RGB_BYTE_PER_PIXEL); i = i + RGB_BYTE_PER_PIXEL) //Move pixels
 8002364:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <findNotes+0x1f4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800236a:	4413      	add	r3, r2
 800236c:	637b      	str	r3, [r7, #52]	; 0x34
 800236e:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <findNotes+0x204>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a07      	ldr	r2, [pc, #28]	; (8002390 <findNotes+0x1f4>)
 8002374:	6812      	ldr	r2, [r2, #0]
 8002376:	fb02 f303 	mul.w	r3, r2, r3
 800237a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800237c:	429a      	cmp	r2, r3
 800237e:	f6ff af1e 	blt.w	80021be <findNotes+0x22>
            }
         }
      }
   }
}
 8002382:	bf00      	nop
 8002384:	4618      	mov	r0, r3
 8002386:	3740      	adds	r7, #64	; 0x40
 8002388:	46bd      	mov	sp, r7
 800238a:	bdb0      	pop	{r4, r5, r7, pc}
 800238c:	20000000 	.word	0x20000000
 8002390:	20000008 	.word	0x20000008
 8002394:	2000000c 	.word	0x2000000c
 8002398:	20000018 	.word	0x20000018
 800239c:	20000014 	.word	0x20000014
 80023a0:	20000004 	.word	0x20000004

080023a4 <findLines>:


void findLines(LineClass *lineArray, uint8_t * imageArray)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b08d      	sub	sp, #52	; 0x34
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
   int pixelCounter;

   int lineCounter = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	62bb      	str	r3, [r7, #40]	; 0x28

   bool completeLine = true;
 80023b2:	2301      	movs	r3, #1
 80023b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   int startingRow = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	623b      	str	r3, [r7, #32]
   int endingRow = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	61fb      	str	r3, [r7, #28]


   for (int i = 0; i < LCD_PIXEL_HEIGHT; i = i + 1)
 80023c0:	2300      	movs	r3, #0
 80023c2:	61bb      	str	r3, [r7, #24]
 80023c4:	e05a      	b.n	800247c <findLines+0xd8>
   {
      if (!completeLine)
 80023c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023ca:	f083 0301 	eor.w	r3, r3, #1
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d01f      	beq.n	8002414 <findLines+0x70>
      { //Check if at least one full row of pixels were the expected color 
         if (startingRow != endingRow + 1)
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	3301      	adds	r3, #1
 80023d8:	6a3a      	ldr	r2, [r7, #32]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d016      	beq.n	800240c <findLines+0x68>
         {
            struct LineClass newLine = {startingRow, endingRow};
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	60fb      	str	r3, [r7, #12]
            if (lineCounter < STAFF_COUNT)
 80023e6:	4b2b      	ldr	r3, [pc, #172]	; (8002494 <findLines+0xf0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023ec:	429a      	cmp	r2, r3
 80023ee:	da0d      	bge.n	800240c <findLines+0x68>
            {
               lineArray[lineCounter] = newLine;
 80023f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	4413      	add	r3, r2
 80023f8:	461a      	mov	r2, r3
 80023fa:	f107 0308 	add.w	r3, r7, #8
 80023fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002402:	e882 0003 	stmia.w	r2, {r0, r1}
               lineCounter = lineCounter + 1;
 8002406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002408:	3301      	adds	r3, #1
 800240a:	62bb      	str	r3, [r7, #40]	; 0x28
            }
         }
         startingRow = i;
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	623b      	str	r3, [r7, #32]
         endingRow = i;
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	61fb      	str	r3, [r7, #28]
      }
      completeLine = true;
 8002414:	2301      	movs	r3, #1
 8002416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      pixelCounter = 0;
 800241a:	2300      	movs	r3, #0
 800241c:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (int j = 0; j < (LCD_PIXEL_WIDTH); j = j + 1) //Move over number of bytes per pixel
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	e014      	b.n	800244e <findLines+0xaa>
      {
         uint16_t *rgb565 = (uint16_t*)imageArray + ((LCD_PIXEL_HEIGHT*i) + j);
 8002424:	4b1c      	ldr	r3, [pc, #112]	; (8002498 <findLines+0xf4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	fb02 f203 	mul.w	r2, r2, r3
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	4413      	add	r3, r2
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	4413      	add	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
         
         if (*rgb565 == 0)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d102      	bne.n	8002448 <findLines+0xa4>
         {
            pixelCounter = pixelCounter + 1;
 8002442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002444:	3301      	adds	r3, #1
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (int j = 0; j < (LCD_PIXEL_WIDTH); j = j + 1) //Move over number of bytes per pixel
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	3301      	adds	r3, #1
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	4b13      	ldr	r3, [pc, #76]	; (800249c <findLines+0xf8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	429a      	cmp	r2, r3
 8002456:	dbe5      	blt.n	8002424 <findLines+0x80>
         }
      }
      if (pixelCounter < LCD_PIXEL_WIDTH/RGB_BYTE_PER_PIXEL) //Check to see if a threshold of black pixels per line is met
 8002458:	4b10      	ldr	r3, [pc, #64]	; (800249c <findLines+0xf8>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <findLines+0xfc>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	fb92 f3f3 	sdiv	r3, r2, r3
 8002464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002466:	429a      	cmp	r2, r3
 8002468:	da05      	bge.n	8002476 <findLines+0xd2>
      {
         completeLine = false;
 800246a:	2300      	movs	r3, #0
 800246c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
         endingRow = i - 1;
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	3b01      	subs	r3, #1
 8002474:	61fb      	str	r3, [r7, #28]
   for (int i = 0; i < LCD_PIXEL_HEIGHT; i = i + 1)
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	3301      	adds	r3, #1
 800247a:	61bb      	str	r3, [r7, #24]
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <findLines+0xf4>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	429a      	cmp	r2, r3
 8002484:	db9f      	blt.n	80023c6 <findLines+0x22>
      }
   }
}
 8002486:	bf00      	nop
 8002488:	3734      	adds	r7, #52	; 0x34
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	20000010 	.word	0x20000010
 8002498:	20000000 	.word	0x20000000
 800249c:	20000004 	.word	0x20000004
 80024a0:	20000008 	.word	0x20000008

080024a4 <lineToNoteType>:

char lineToNoteType(int i)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
   if (i == E_LINE)
 80024ac:	4b14      	ldr	r3, [pc, #80]	; (8002500 <lineToNoteType+0x5c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d101      	bne.n	80024ba <lineToNoteType+0x16>
   {
      return 'E';
 80024b6:	2345      	movs	r3, #69	; 0x45
 80024b8:	e01b      	b.n	80024f2 <lineToNoteType+0x4e>
   }
   else if (i == G_LINE)
 80024ba:	4b12      	ldr	r3, [pc, #72]	; (8002504 <lineToNoteType+0x60>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d101      	bne.n	80024c8 <lineToNoteType+0x24>
   {
      return 'G';
 80024c4:	2347      	movs	r3, #71	; 0x47
 80024c6:	e014      	b.n	80024f2 <lineToNoteType+0x4e>
   }
   else if (i == B_LINE)
 80024c8:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <lineToNoteType+0x64>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d101      	bne.n	80024d6 <lineToNoteType+0x32>
   {
      return 'B';
 80024d2:	2342      	movs	r3, #66	; 0x42
 80024d4:	e00d      	b.n	80024f2 <lineToNoteType+0x4e>
   }
   else if (i == D_LINE)
 80024d6:	4b0d      	ldr	r3, [pc, #52]	; (800250c <lineToNoteType+0x68>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d101      	bne.n	80024e4 <lineToNoteType+0x40>
   {
      return 'D';
 80024e0:	2344      	movs	r3, #68	; 0x44
 80024e2:	e006      	b.n	80024f2 <lineToNoteType+0x4e>
   }
   else if (i == F_LINE)
 80024e4:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <lineToNoteType+0x6c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d101      	bne.n	80024f2 <lineToNoteType+0x4e>
   {
      return 'F';
 80024ee:	2346      	movs	r3, #70	; 0x46
 80024f0:	e7ff      	b.n	80024f2 <lineToNoteType+0x4e>
   }
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	20000160 	.word	0x20000160
 8002504:	20000020 	.word	0x20000020
 8002508:	20000024 	.word	0x20000024
 800250c:	20000028 	.word	0x20000028
 8002510:	2000002c 	.word	0x2000002c

08002514 <spaceToNote>:

char spaceToNote(int i)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
   if (i == F_SPACE)
 800251c:	4b10      	ldr	r3, [pc, #64]	; (8002560 <spaceToNote+0x4c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	429a      	cmp	r2, r3
 8002524:	d101      	bne.n	800252a <spaceToNote+0x16>
   {
      return 'F';
 8002526:	2346      	movs	r3, #70	; 0x46
 8002528:	e014      	b.n	8002554 <spaceToNote+0x40>
   }
   else if (i == A_SPACE)
 800252a:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <spaceToNote+0x50>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	429a      	cmp	r2, r3
 8002532:	d101      	bne.n	8002538 <spaceToNote+0x24>
   {
      return 'A';
 8002534:	2341      	movs	r3, #65	; 0x41
 8002536:	e00d      	b.n	8002554 <spaceToNote+0x40>
   }
   else if (i == C_SPACE)
 8002538:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <spaceToNote+0x54>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	429a      	cmp	r2, r3
 8002540:	d101      	bne.n	8002546 <spaceToNote+0x32>
   {
      return 'C';
 8002542:	2343      	movs	r3, #67	; 0x43
 8002544:	e006      	b.n	8002554 <spaceToNote+0x40>
   }
   else if (i == E_SPACE)
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <spaceToNote+0x58>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	429a      	cmp	r2, r3
 800254e:	d101      	bne.n	8002554 <spaceToNote+0x40>
   {
      return 'E';
 8002550:	2345      	movs	r3, #69	; 0x45
 8002552:	e7ff      	b.n	8002554 <spaceToNote+0x40>
   }
}
 8002554:	4618      	mov	r0, r3
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	20000164 	.word	0x20000164
 8002564:	20000030 	.word	0x20000030
 8002568:	20000034 	.word	0x20000034
 800256c:	20000038 	.word	0x20000038

08002570 <checkBetweenLines>:

char checkBetweenLines(LineClass * lineArray, NoteClass * noteArray)
{  
 8002570:	b590      	push	{r4, r7, lr}
 8002572:	b087      	sub	sp, #28
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
   for (int i = 0; i < MAX_NOTE_COUNT; i = i + 1)
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	e047      	b.n	8002610 <checkBetweenLines+0xa0>
   {
      int currentNoteRow = noteArray[i].startPixelRow;
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	4613      	mov	r3, r2
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	461a      	mov	r2, r3
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	4413      	add	r3, r2
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	60fb      	str	r3, [r7, #12]
      for (int j = 0; j < STAFF_COUNT - 1; j = j + 1)
 8002594:	2300      	movs	r3, #0
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	e031      	b.n	80025fe <checkBetweenLines+0x8e>
      {
         if((currentNoteRow < lineArray[j+1].startPixelRow - DISTANCE_FROM_LINE) && (currentNoteRow > lineArray[j].endPixelRow + DISTANCE_FROM_LINE))
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	3301      	adds	r3, #1
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	4413      	add	r3, r2
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <checkBetweenLines+0xb4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	da22      	bge.n	80025f8 <checkBetweenLines+0x88>
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	4b19      	ldr	r3, [pc, #100]	; (8002624 <checkBetweenLines+0xb4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4413      	add	r3, r2
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	dd17      	ble.n	80025f8 <checkBetweenLines+0x88>
         {
            if (noteArray[i].noteName == NULL)
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	4613      	mov	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	461a      	mov	r2, r3
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	4413      	add	r3, r2
 80025d8:	7a1b      	ldrb	r3, [r3, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10c      	bne.n	80025f8 <checkBetweenLines+0x88>
            {
               noteArray[i].noteName = spaceToNote(j);
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	4613      	mov	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	461a      	mov	r2, r3
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	189c      	adds	r4, r3, r2
 80025ee:	6938      	ldr	r0, [r7, #16]
 80025f0:	f7ff ff90 	bl	8002514 <spaceToNote>
 80025f4:	4603      	mov	r3, r0
 80025f6:	7223      	strb	r3, [r4, #8]
      for (int j = 0; j < STAFF_COUNT - 1; j = j + 1)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	3301      	adds	r3, #1
 80025fc:	613b      	str	r3, [r7, #16]
 80025fe:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <checkBetweenLines+0xb8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	3b01      	subs	r3, #1
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	429a      	cmp	r2, r3
 8002608:	dbc7      	blt.n	800259a <checkBetweenLines+0x2a>
   for (int i = 0; i < MAX_NOTE_COUNT; i = i + 1)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	3301      	adds	r3, #1
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	4b06      	ldr	r3, [pc, #24]	; (800262c <checkBetweenLines+0xbc>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	429a      	cmp	r2, r3
 8002618:	dbb2      	blt.n	8002580 <checkBetweenLines+0x10>
            }
         }
      }
   }
}
 800261a:	bf00      	nop
 800261c:	4618      	mov	r0, r3
 800261e:	371c      	adds	r7, #28
 8002620:	46bd      	mov	sp, r7
 8002622:	bd90      	pop	{r4, r7, pc}
 8002624:	2000001c 	.word	0x2000001c
 8002628:	20000010 	.word	0x20000010
 800262c:	20000014 	.word	0x20000014

08002630 <determineNoteTypes>:

NoteClass * determineNoteTypes(LineClass * lineArray, NoteClass * noteArray)
{
 8002630:	b590      	push	{r4, r7, lr}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
   for(int i = 0; i < STAFF_COUNT; i = i + 1)
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	e03a      	b.n	80026b6 <determineNoteTypes+0x86>
   {
      for(int j = 0; j < MAX_NOTE_COUNT; j = j + 1)
 8002640:	2300      	movs	r3, #0
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	e02f      	b.n	80026a6 <determineNoteTypes+0x76>
      {
         int currentNoteRow = noteArray[j].startPixelRow;
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4613      	mov	r3, r2
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	4413      	add	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	461a      	mov	r2, r3
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	4413      	add	r3, r2
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	60fb      	str	r3, [r7, #12]
         if (currentNoteRow < (lineArray[i].endPixelRow + DISTANCE_FROM_LINE) && currentNoteRow > (lineArray[i].startPixelRow - DISTANCE_FROM_LINE))
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	4413      	add	r3, r2
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <determineNoteTypes+0xa4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4413      	add	r3, r2
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	429a      	cmp	r2, r3
 800266e:	da17      	bge.n	80026a0 <determineNoteTypes+0x70>
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	4413      	add	r3, r2
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	4b16      	ldr	r3, [pc, #88]	; (80026d4 <determineNoteTypes+0xa4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	429a      	cmp	r2, r3
 8002684:	dd0c      	ble.n	80026a0 <determineNoteTypes+0x70>
         {
            noteArray[j].noteName = lineToNoteType(i);
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	461a      	mov	r2, r3
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	189c      	adds	r4, r3, r2
 8002696:	6978      	ldr	r0, [r7, #20]
 8002698:	f7ff ff04 	bl	80024a4 <lineToNoteType>
 800269c:	4603      	mov	r3, r0
 800269e:	7223      	strb	r3, [r4, #8]
      for(int j = 0; j < MAX_NOTE_COUNT; j = j + 1)
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	3301      	adds	r3, #1
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <determineNoteTypes+0xa8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	dbca      	blt.n	8002646 <determineNoteTypes+0x16>
   for(int i = 0; i < STAFF_COUNT; i = i + 1)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	3301      	adds	r3, #1
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	4b09      	ldr	r3, [pc, #36]	; (80026dc <determineNoteTypes+0xac>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	429a      	cmp	r2, r3
 80026be:	dbbf      	blt.n	8002640 <determineNoteTypes+0x10>
         }
      }
   }

   checkBetweenLines(lineArray, noteArray);
 80026c0:	6839      	ldr	r1, [r7, #0]
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff ff54 	bl	8002570 <checkBetweenLines>
}
 80026c8:	bf00      	nop
 80026ca:	4618      	mov	r0, r3
 80026cc:	371c      	adds	r7, #28
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd90      	pop	{r4, r7, pc}
 80026d2:	bf00      	nop
 80026d4:	2000001c 	.word	0x2000001c
 80026d8:	20000014 	.word	0x20000014
 80026dc:	20000010 	.word	0x20000010

080026e0 <outputNoteLetters>:
    }
    
}


void outputNoteLetters(uint8_t * arr) {
 80026e0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80026e4:	b088      	sub	sp, #32
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	466b      	mov	r3, sp
 80026ec:	461e      	mov	r6, r3

   LineClass lineArray [STAFF_COUNT]; //Stores structs containing starting and ending line rows
 80026ee:	4bc1      	ldr	r3, [pc, #772]	; (80029f4 <outputNoteLetters+0x314>)
 80026f0:	6818      	ldr	r0, [r3, #0]
 80026f2:	1e43      	subs	r3, r0, #1
 80026f4:	61fb      	str	r3, [r7, #28]
 80026f6:	4603      	mov	r3, r0
 80026f8:	4619      	mov	r1, r3
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	f04f 0300 	mov.w	r3, #0
 8002702:	f04f 0400 	mov.w	r4, #0
 8002706:	0194      	lsls	r4, r2, #6
 8002708:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800270c:	018b      	lsls	r3, r1, #6
 800270e:	4603      	mov	r3, r0
 8002710:	4619      	mov	r1, r3
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	f04f 0300 	mov.w	r3, #0
 800271a:	f04f 0400 	mov.w	r4, #0
 800271e:	0194      	lsls	r4, r2, #6
 8002720:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002724:	018b      	lsls	r3, r1, #6
 8002726:	4603      	mov	r3, r0
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	3303      	adds	r3, #3
 800272c:	3307      	adds	r3, #7
 800272e:	08db      	lsrs	r3, r3, #3
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	ebad 0d03 	sub.w	sp, sp, r3
 8002736:	466b      	mov	r3, sp
 8002738:	3303      	adds	r3, #3
 800273a:	089b      	lsrs	r3, r3, #2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	617b      	str	r3, [r7, #20]
   NoteClass noteArray [MAX_NOTE_COUNT];
 8002740:	4bad      	ldr	r3, [pc, #692]	; (80029f8 <outputNoteLetters+0x318>)
 8002742:	681d      	ldr	r5, [r3, #0]
 8002744:	1e6b      	subs	r3, r5, #1
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	462b      	mov	r3, r5
 800274a:	4619      	mov	r1, r3
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	468b      	mov	fp, r1
 8002752:	4694      	mov	ip, r2
 8002754:	eb1b 030b 	adds.w	r3, fp, fp
 8002758:	eb4c 040c 	adc.w	r4, ip, ip
 800275c:	469b      	mov	fp, r3
 800275e:	46a4      	mov	ip, r4
 8002760:	eb1b 0b01 	adds.w	fp, fp, r1
 8002764:	eb4c 0c02 	adc.w	ip, ip, r2
 8002768:	f04f 0100 	mov.w	r1, #0
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	ea4f 124c 	mov.w	r2, ip, lsl #5
 8002774:	ea42 62db 	orr.w	r2, r2, fp, lsr #27
 8002778:	ea4f 114b 	mov.w	r1, fp, lsl #5
 800277c:	468b      	mov	fp, r1
 800277e:	4694      	mov	ip, r2
 8002780:	462a      	mov	r2, r5
 8002782:	4613      	mov	r3, r2
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	4413      	add	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	462b      	mov	r3, r5
 800278c:	4619      	mov	r1, r3
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	468b      	mov	fp, r1
 8002794:	4694      	mov	ip, r2
 8002796:	eb1b 030b 	adds.w	r3, fp, fp
 800279a:	eb4c 040c 	adc.w	r4, ip, ip
 800279e:	469b      	mov	fp, r3
 80027a0:	46a4      	mov	ip, r4
 80027a2:	eb1b 0b01 	adds.w	fp, fp, r1
 80027a6:	eb4c 0c02 	adc.w	ip, ip, r2
 80027aa:	f04f 0100 	mov.w	r1, #0
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	ea4f 124c 	mov.w	r2, ip, lsl #5
 80027b6:	ea42 62db 	orr.w	r2, r2, fp, lsr #27
 80027ba:	ea4f 114b 	mov.w	r1, fp, lsl #5
 80027be:	468b      	mov	fp, r1
 80027c0:	4694      	mov	ip, r2
 80027c2:	462a      	mov	r2, r5
 80027c4:	4613      	mov	r3, r2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	4413      	add	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	3303      	adds	r3, #3
 80027ce:	3307      	adds	r3, #7
 80027d0:	08db      	lsrs	r3, r3, #3
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	ebad 0d03 	sub.w	sp, sp, r3
 80027d8:	466b      	mov	r3, sp
 80027da:	3303      	adds	r3, #3
 80027dc:	089b      	lsrs	r3, r3, #2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	60fb      	str	r3, [r7, #12]

   findLines(lineArray, arr);
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fddc 	bl	80023a4 <findLines>
         printf("%i", endingRow);
         printf("%s", "  ");
   }
   putchar('\n');*/
   
   findNotes(noteArray, arr);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fcd3 	bl	800219c <findNotes>
   //putchar('\n');

   determineNoteTypes(lineArray, noteArray);
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	4611      	mov	r1, r2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff ff17 	bl	8002630 <determineNoteTypes>

   for(int i = 0; i < sizeof(noteArray)/sizeof(noteArray[0]); i = i + 1)
 8002802:	2300      	movs	r3, #0
 8002804:	61bb      	str	r3, [r7, #24]
 8002806:	e0e0      	b.n	80029ca <outputNoteLetters+0x2ea>
   {
		char currentNoteType = noteArray[i].noteName;
 8002808:	68f9      	ldr	r1, [r7, #12]
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4613      	mov	r3, r2
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	3308      	adds	r3, #8
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	72fb      	strb	r3, [r7, #11]
		switch (currentNoteType) {
 800281c:	7afb      	ldrb	r3, [r7, #11]
 800281e:	3b41      	subs	r3, #65	; 0x41
 8002820:	2b06      	cmp	r3, #6
 8002822:	f200 80ce 	bhi.w	80029c2 <outputNoteLetters+0x2e2>
 8002826:	a201      	add	r2, pc, #4	; (adr r2, 800282c <outputNoteLetters+0x14c>)
 8002828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282c:	08002849 	.word	0x08002849
 8002830:	0800287f 	.word	0x0800287f
 8002834:	080028b5 	.word	0x080028b5
 8002838:	080028eb 	.word	0x080028eb
 800283c:	08002921 	.word	0x08002921
 8002840:	08002957 	.word	0x08002957
 8002844:	0800298d 	.word	0x0800298d
			case 'A' :
				BSP_LCD_DisplayStringAt(noteArray[i].startPixelColumn, 240 - noteArray[i].startPixelRow, (uint8_t*)"A", LEFT_MODE);
 8002848:	68f9      	ldr	r1, [r7, #12]
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4613      	mov	r3, r2
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	4413      	add	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	3304      	adds	r3, #4
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	b298      	uxth	r0, r3
 800285c:	68f9      	ldr	r1, [r7, #12]
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4613      	mov	r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	4413      	add	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	b29b      	uxth	r3, r3
 800286e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002872:	b299      	uxth	r1, r3
 8002874:	2303      	movs	r3, #3
 8002876:	4a61      	ldr	r2, [pc, #388]	; (80029fc <outputNoteLetters+0x31c>)
 8002878:	f001 fe44 	bl	8004504 <BSP_LCD_DisplayStringAt>
				break;
 800287c:	e0a2      	b.n	80029c4 <outputNoteLetters+0x2e4>
			case 'B' :
				BSP_LCD_DisplayStringAt(noteArray[i].startPixelColumn, 240 - noteArray[i].startPixelRow, (uint8_t*)"B", LEFT_MODE);
 800287e:	68f9      	ldr	r1, [r7, #12]
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	440b      	add	r3, r1
 800288c:	3304      	adds	r3, #4
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	b298      	uxth	r0, r3
 8002892:	68f9      	ldr	r1, [r7, #12]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4613      	mov	r3, r2
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	4413      	add	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	440b      	add	r3, r1
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80028a8:	b299      	uxth	r1, r3
 80028aa:	2303      	movs	r3, #3
 80028ac:	4a54      	ldr	r2, [pc, #336]	; (8002a00 <outputNoteLetters+0x320>)
 80028ae:	f001 fe29 	bl	8004504 <BSP_LCD_DisplayStringAt>
				break;
 80028b2:	e087      	b.n	80029c4 <outputNoteLetters+0x2e4>
			case 'C' :
				BSP_LCD_DisplayStringAt(noteArray[i].startPixelColumn, 240 - noteArray[i].startPixelRow, (uint8_t*)"C", LEFT_MODE);
 80028b4:	68f9      	ldr	r1, [r7, #12]
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	3304      	adds	r3, #4
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	b298      	uxth	r0, r3
 80028c8:	68f9      	ldr	r1, [r7, #12]
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4613      	mov	r3, r2
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	4413      	add	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	b29b      	uxth	r3, r3
 80028da:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80028de:	b299      	uxth	r1, r3
 80028e0:	2303      	movs	r3, #3
 80028e2:	4a48      	ldr	r2, [pc, #288]	; (8002a04 <outputNoteLetters+0x324>)
 80028e4:	f001 fe0e 	bl	8004504 <BSP_LCD_DisplayStringAt>
				break;
 80028e8:	e06c      	b.n	80029c4 <outputNoteLetters+0x2e4>
			case 'D' :
				BSP_LCD_DisplayStringAt(noteArray[i].startPixelColumn, 240 - noteArray[i].startPixelRow, (uint8_t*)"D", LEFT_MODE);
 80028ea:	68f9      	ldr	r1, [r7, #12]
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4613      	mov	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	3304      	adds	r3, #4
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	b298      	uxth	r0, r3
 80028fe:	68f9      	ldr	r1, [r7, #12]
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4613      	mov	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	b29b      	uxth	r3, r3
 8002910:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002914:	b299      	uxth	r1, r3
 8002916:	2303      	movs	r3, #3
 8002918:	4a3b      	ldr	r2, [pc, #236]	; (8002a08 <outputNoteLetters+0x328>)
 800291a:	f001 fdf3 	bl	8004504 <BSP_LCD_DisplayStringAt>
				break;
 800291e:	e051      	b.n	80029c4 <outputNoteLetters+0x2e4>
			case 'E' :
				BSP_LCD_DisplayStringAt(noteArray[i].startPixelColumn, 240 - noteArray[i].startPixelRow, (uint8_t*)"E", LEFT_MODE);
 8002920:	68f9      	ldr	r1, [r7, #12]
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4613      	mov	r3, r2
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	4413      	add	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	3304      	adds	r3, #4
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	b298      	uxth	r0, r3
 8002934:	68f9      	ldr	r1, [r7, #12]
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	b29b      	uxth	r3, r3
 8002946:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800294a:	b299      	uxth	r1, r3
 800294c:	2303      	movs	r3, #3
 800294e:	4a2f      	ldr	r2, [pc, #188]	; (8002a0c <outputNoteLetters+0x32c>)
 8002950:	f001 fdd8 	bl	8004504 <BSP_LCD_DisplayStringAt>
				break;
 8002954:	e036      	b.n	80029c4 <outputNoteLetters+0x2e4>
			case 'F' :
				BSP_LCD_DisplayStringAt(noteArray[i].startPixelColumn, 240 - noteArray[i].startPixelRow, (uint8_t*)"F", LEFT_MODE);
 8002956:	68f9      	ldr	r1, [r7, #12]
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4613      	mov	r3, r2
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	4413      	add	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	3304      	adds	r3, #4
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	b298      	uxth	r0, r3
 800296a:	68f9      	ldr	r1, [r7, #12]
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4613      	mov	r3, r2
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	4413      	add	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	b29b      	uxth	r3, r3
 800297c:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002980:	b299      	uxth	r1, r3
 8002982:	2303      	movs	r3, #3
 8002984:	4a22      	ldr	r2, [pc, #136]	; (8002a10 <outputNoteLetters+0x330>)
 8002986:	f001 fdbd 	bl	8004504 <BSP_LCD_DisplayStringAt>
				break;
 800298a:	e01b      	b.n	80029c4 <outputNoteLetters+0x2e4>
			case 'G' :
				BSP_LCD_DisplayStringAt(noteArray[i].startPixelColumn, 240 - noteArray[i].startPixelRow, (uint8_t*)"G", LEFT_MODE);
 800298c:	68f9      	ldr	r1, [r7, #12]
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4613      	mov	r3, r2
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	3304      	adds	r3, #4
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	b298      	uxth	r0, r3
 80029a0:	68f9      	ldr	r1, [r7, #12]
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4613      	mov	r3, r2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80029b6:	b299      	uxth	r1, r3
 80029b8:	2303      	movs	r3, #3
 80029ba:	4a16      	ldr	r2, [pc, #88]	; (8002a14 <outputNoteLetters+0x334>)
 80029bc:	f001 fda2 	bl	8004504 <BSP_LCD_DisplayStringAt>
				break;
 80029c0:	e000      	b.n	80029c4 <outputNoteLetters+0x2e4>
			default :
				break;
 80029c2:	bf00      	nop
   for(int i = 0; i < sizeof(noteArray)/sizeof(noteArray[0]); i = i + 1)
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	3301      	adds	r3, #1
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	462a      	mov	r2, r5
 80029cc:	4613      	mov	r3, r2
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4413      	add	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	461a      	mov	r2, r3
 80029d6:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <outputNoteLetters+0x338>)
 80029d8:	fba3 2302 	umull	r2, r3, r3, r2
 80029dc:	08da      	lsrs	r2, r3, #3
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	f63f af11 	bhi.w	8002808 <outputNoteLetters+0x128>
 80029e6:	46b5      	mov	sp, r6
      }
      /*printf("%c", currentNoteType);
      putchar('\n');*/
   }
}
 80029e8:	bf00      	nop
 80029ea:	3720      	adds	r7, #32
 80029ec:	46bd      	mov	sp, r7
 80029ee:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80029f2:	bf00      	nop
 80029f4:	20000010 	.word	0x20000010
 80029f8:	20000014 	.word	0x20000014
 80029fc:	08015f7c 	.word	0x08015f7c
 8002a00:	08015f80 	.word	0x08015f80
 8002a04:	08015f84 	.word	0x08015f84
 8002a08:	08015f88 	.word	0x08015f88
 8002a0c:	08015f8c 	.word	0x08015f8c
 8002a10:	08015f90 	.word	0x08015f90
 8002a14:	08015f94 	.word	0x08015f94
 8002a18:	aaaaaaab 	.word	0xaaaaaaab

08002a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	607b      	str	r3, [r7, #4]
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <HAL_MspInit+0x4c>)
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	4a0f      	ldr	r2, [pc, #60]	; (8002a68 <HAL_MspInit+0x4c>)
 8002a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a30:	6453      	str	r3, [r2, #68]	; 0x44
 8002a32:	4b0d      	ldr	r3, [pc, #52]	; (8002a68 <HAL_MspInit+0x4c>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a3a:	607b      	str	r3, [r7, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	603b      	str	r3, [r7, #0]
 8002a42:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <HAL_MspInit+0x4c>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	4a08      	ldr	r2, [pc, #32]	; (8002a68 <HAL_MspInit+0x4c>)
 8002a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4e:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <HAL_MspInit+0x4c>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800

08002a6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08c      	sub	sp, #48	; 0x30
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a74:	f107 031c 	add.w	r3, r7, #28
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a31      	ldr	r2, [pc, #196]	; (8002b50 <HAL_ADC_MspInit+0xe4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d15b      	bne.n	8002b46 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61bb      	str	r3, [r7, #24]
 8002a92:	4b30      	ldr	r3, [pc, #192]	; (8002b54 <HAL_ADC_MspInit+0xe8>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	4a2f      	ldr	r2, [pc, #188]	; (8002b54 <HAL_ADC_MspInit+0xe8>)
 8002a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a9e:	4b2d      	ldr	r3, [pc, #180]	; (8002b54 <HAL_ADC_MspInit+0xe8>)
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa6:	61bb      	str	r3, [r7, #24]
 8002aa8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	4b29      	ldr	r3, [pc, #164]	; (8002b54 <HAL_ADC_MspInit+0xe8>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	4a28      	ldr	r2, [pc, #160]	; (8002b54 <HAL_ADC_MspInit+0xe8>)
 8002ab4:	f043 0304 	orr.w	r3, r3, #4
 8002ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aba:	4b26      	ldr	r3, [pc, #152]	; (8002b54 <HAL_ADC_MspInit+0xe8>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	4b22      	ldr	r3, [pc, #136]	; (8002b54 <HAL_ADC_MspInit+0xe8>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	4a21      	ldr	r2, [pc, #132]	; (8002b54 <HAL_ADC_MspInit+0xe8>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad6:	4b1f      	ldr	r3, [pc, #124]	; (8002b54 <HAL_ADC_MspInit+0xe8>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	4b1b      	ldr	r3, [pc, #108]	; (8002b54 <HAL_ADC_MspInit+0xe8>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	4a1a      	ldr	r2, [pc, #104]	; (8002b54 <HAL_ADC_MspInit+0xe8>)
 8002aec:	f043 0302 	orr.w	r3, r3, #2
 8002af0:	6313      	str	r3, [r2, #48]	; 0x30
 8002af2:	4b18      	ldr	r3, [pc, #96]	; (8002b54 <HAL_ADC_MspInit+0xe8>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 8002afe:	2311      	movs	r3, #17
 8002b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b02:	2303      	movs	r3, #3
 8002b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b0a:	f107 031c 	add.w	r3, r7, #28
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4811      	ldr	r0, [pc, #68]	; (8002b58 <HAL_ADC_MspInit+0xec>)
 8002b12:	f003 f999 	bl	8005e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 8002b16:	2326      	movs	r3, #38	; 0x26
 8002b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b22:	f107 031c 	add.w	r3, r7, #28
 8002b26:	4619      	mov	r1, r3
 8002b28:	480c      	ldr	r0, [pc, #48]	; (8002b5c <HAL_ADC_MspInit+0xf0>)
 8002b2a:	f003 f98d 	bl	8005e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b32:	2303      	movs	r3, #3
 8002b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 8002b3a:	f107 031c 	add.w	r3, r7, #28
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4807      	ldr	r0, [pc, #28]	; (8002b60 <HAL_ADC_MspInit+0xf4>)
 8002b42:	f003 f981 	bl	8005e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b46:	bf00      	nop
 8002b48:	3730      	adds	r7, #48	; 0x30
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40012000 	.word	0x40012000
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40020800 	.word	0x40020800
 8002b5c:	40020000 	.word	0x40020000
 8002b60:	40020400 	.word	0x40020400

08002b64 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08a      	sub	sp, #40	; 0x28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6c:	f107 0314 	add.w	r3, r7, #20
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	60da      	str	r2, [r3, #12]
 8002b7a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a1b      	ldr	r2, [pc, #108]	; (8002bf0 <HAL_DAC_MspInit+0x8c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d12f      	bne.n	8002be6 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <HAL_DAC_MspInit+0x90>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	4a19      	ldr	r2, [pc, #100]	; (8002bf4 <HAL_DAC_MspInit+0x90>)
 8002b90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b94:	6413      	str	r3, [r2, #64]	; 0x40
 8002b96:	4b17      	ldr	r3, [pc, #92]	; (8002bf4 <HAL_DAC_MspInit+0x90>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <HAL_DAC_MspInit+0x90>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	4a12      	ldr	r2, [pc, #72]	; (8002bf4 <HAL_DAC_MspInit+0x90>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb2:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <HAL_DAC_MspInit+0x90>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 8002bbe:	2310      	movs	r3, #16
 8002bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 8002bca:	f107 0314 	add.w	r3, r7, #20
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4809      	ldr	r0, [pc, #36]	; (8002bf8 <HAL_DAC_MspInit+0x94>)
 8002bd2:	f003 f939 	bl	8005e48 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2100      	movs	r1, #0
 8002bda:	2036      	movs	r0, #54	; 0x36
 8002bdc:	f002 fc52 	bl	8005484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002be0:	2036      	movs	r0, #54	; 0x36
 8002be2:	f002 fc6b 	bl	80054bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002be6:	bf00      	nop
 8002be8:	3728      	adds	r7, #40	; 0x28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40007400 	.word	0x40007400
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40020000 	.word	0x40020000

08002bfc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08e      	sub	sp, #56	; 0x38
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	60da      	str	r2, [r3, #12]
 8002c12:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a77      	ldr	r2, [pc, #476]	; (8002df8 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d00e      	beq.n	8002c3c <HAL_DFSDM_ChannelMspInit+0x40>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a76      	ldr	r2, [pc, #472]	; (8002dfc <HAL_DFSDM_ChannelMspInit+0x200>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d009      	beq.n	8002c3c <HAL_DFSDM_ChannelMspInit+0x40>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a74      	ldr	r2, [pc, #464]	; (8002e00 <HAL_DFSDM_ChannelMspInit+0x204>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d004      	beq.n	8002c3c <HAL_DFSDM_ChannelMspInit+0x40>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a73      	ldr	r2, [pc, #460]	; (8002e04 <HAL_DFSDM_ChannelMspInit+0x208>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d154      	bne.n	8002ce6 <HAL_DFSDM_ChannelMspInit+0xea>
 8002c3c:	4b72      	ldr	r3, [pc, #456]	; (8002e08 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d150      	bne.n	8002ce6 <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002c44:	2300      	movs	r3, #0
 8002c46:	623b      	str	r3, [r7, #32]
 8002c48:	4b70      	ldr	r3, [pc, #448]	; (8002e0c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4c:	4a6f      	ldr	r2, [pc, #444]	; (8002e0c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002c4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c52:	6453      	str	r3, [r2, #68]	; 0x44
 8002c54:	4b6d      	ldr	r3, [pc, #436]	; (8002e0c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c5c:	623b      	str	r3, [r7, #32]
 8002c5e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c60:	2300      	movs	r3, #0
 8002c62:	61fb      	str	r3, [r7, #28]
 8002c64:	4b69      	ldr	r3, [pc, #420]	; (8002e0c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	4a68      	ldr	r2, [pc, #416]	; (8002e0c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c70:	4b66      	ldr	r3, [pc, #408]	; (8002e0c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	61fb      	str	r3, [r7, #28]
 8002c7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61bb      	str	r3, [r7, #24]
 8002c80:	4b62      	ldr	r3, [pc, #392]	; (8002e0c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	4a61      	ldr	r2, [pc, #388]	; (8002e0c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002c86:	f043 0308 	orr.w	r3, r3, #8
 8002c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8c:	4b5f      	ldr	r3, [pc, #380]	; (8002e0c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	61bb      	str	r3, [r7, #24]
 8002c96:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8002c98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002caa:	2306      	movs	r3, #6
 8002cac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8002cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4856      	ldr	r0, [pc, #344]	; (8002e10 <HAL_DFSDM_ChannelMspInit+0x214>)
 8002cb6:	f003 f8c7 	bl	8005e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8002cba:	2340      	movs	r3, #64	; 0x40
 8002cbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002cca:	2306      	movs	r3, #6
 8002ccc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8002cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	484f      	ldr	r0, [pc, #316]	; (8002e14 <HAL_DFSDM_ChannelMspInit+0x218>)
 8002cd6:	f003 f8b7 	bl	8005e48 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002cda:	4b4b      	ldr	r3, [pc, #300]	; (8002e08 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	4a49      	ldr	r2, [pc, #292]	; (8002e08 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8002ce2:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 8002ce4:	e084      	b.n	8002df0 <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a43      	ldr	r2, [pc, #268]	; (8002df8 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d07f      	beq.n	8002df0 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a41      	ldr	r2, [pc, #260]	; (8002dfc <HAL_DFSDM_ChannelMspInit+0x200>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d07a      	beq.n	8002df0 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a40      	ldr	r2, [pc, #256]	; (8002e00 <HAL_DFSDM_ChannelMspInit+0x204>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d075      	beq.n	8002df0 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a3e      	ldr	r2, [pc, #248]	; (8002e04 <HAL_DFSDM_ChannelMspInit+0x208>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d070      	beq.n	8002df0 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8002d0e:	4b42      	ldr	r3, [pc, #264]	; (8002e18 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d16c      	bne.n	8002df0 <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	4b3c      	ldr	r3, [pc, #240]	; (8002e0c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	4a3b      	ldr	r2, [pc, #236]	; (8002e0c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d24:	6453      	str	r3, [r2, #68]	; 0x44
 8002d26:	4b39      	ldr	r3, [pc, #228]	; (8002e0c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	4b35      	ldr	r3, [pc, #212]	; (8002e0c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	4a34      	ldr	r2, [pc, #208]	; (8002e0c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6313      	str	r3, [r2, #48]	; 0x30
 8002d42:	4b32      	ldr	r3, [pc, #200]	; (8002e0c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	4b2e      	ldr	r3, [pc, #184]	; (8002e0c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	4a2d      	ldr	r2, [pc, #180]	; (8002e0c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d58:	f043 0308 	orr.w	r3, r3, #8
 8002d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5e:	4b2b      	ldr	r3, [pc, #172]	; (8002e0c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	4b27      	ldr	r3, [pc, #156]	; (8002e0c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	4a26      	ldr	r2, [pc, #152]	; (8002e0c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d74:	f043 0302 	orr.w	r3, r3, #2
 8002d78:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7a:	4b24      	ldr	r3, [pc, #144]	; (8002e0c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	60bb      	str	r3, [r7, #8]
 8002d84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8002d86:	2380      	movs	r3, #128	; 0x80
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d92:	2300      	movs	r3, #0
 8002d94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8002d96:	2307      	movs	r3, #7
 8002d98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8002d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d9e:	4619      	mov	r1, r3
 8002da0:	481b      	ldr	r0, [pc, #108]	; (8002e10 <HAL_DFSDM_ChannelMspInit+0x214>)
 8002da2:	f003 f851 	bl	8005e48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8002da6:	2304      	movs	r3, #4
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002daa:	2302      	movs	r3, #2
 8002dac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db2:	2300      	movs	r3, #0
 8002db4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8002db6:	2303      	movs	r3, #3
 8002db8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8002dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4814      	ldr	r0, [pc, #80]	; (8002e14 <HAL_DFSDM_ChannelMspInit+0x218>)
 8002dc2:	f003 f841 	bl	8005e48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8002dc6:	2380      	movs	r3, #128	; 0x80
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8002dd6:	2306      	movs	r3, #6
 8002dd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8002dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dde:	4619      	mov	r1, r3
 8002de0:	480e      	ldr	r0, [pc, #56]	; (8002e1c <HAL_DFSDM_ChannelMspInit+0x220>)
 8002de2:	f003 f831 	bl	8005e48 <HAL_GPIO_Init>
  DFSDM2_Init++;
 8002de6:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	3301      	adds	r3, #1
 8002dec:	4a0a      	ldr	r2, [pc, #40]	; (8002e18 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8002dee:	6013      	str	r3, [r2, #0]
}
 8002df0:	bf00      	nop
 8002df2:	3738      	adds	r7, #56	; 0x38
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40016000 	.word	0x40016000
 8002dfc:	40016020 	.word	0x40016020
 8002e00:	40016040 	.word	0x40016040
 8002e04:	40016060 	.word	0x40016060
 8002e08:	20000168 	.word	0x20000168
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40020000 	.word	0x40020000
 8002e14:	40020c00 	.word	0x40020c00
 8002e18:	2000016c 	.word	0x2000016c
 8002e1c:	40020400 	.word	0x40020400

08002e20 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08a      	sub	sp, #40	; 0x28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e28:	f107 0314 	add.w	r3, r7, #20
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a19      	ldr	r2, [pc, #100]	; (8002ea4 <HAL_FMPI2C_MspInit+0x84>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d12b      	bne.n	8002e9a <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	4b18      	ldr	r3, [pc, #96]	; (8002ea8 <HAL_FMPI2C_MspInit+0x88>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	4a17      	ldr	r2, [pc, #92]	; (8002ea8 <HAL_FMPI2C_MspInit+0x88>)
 8002e4c:	f043 0304 	orr.w	r3, r3, #4
 8002e50:	6313      	str	r3, [r2, #48]	; 0x30
 8002e52:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <HAL_FMPI2C_MspInit+0x88>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 8002e5e:	23c0      	movs	r3, #192	; 0xc0
 8002e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e62:	2312      	movs	r3, #18
 8002e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e66:	2301      	movs	r3, #1
 8002e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8002e6e:	2304      	movs	r3, #4
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e72:	f107 0314 	add.w	r3, r7, #20
 8002e76:	4619      	mov	r1, r3
 8002e78:	480c      	ldr	r0, [pc, #48]	; (8002eac <HAL_FMPI2C_MspInit+0x8c>)
 8002e7a:	f002 ffe5 	bl	8005e48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <HAL_FMPI2C_MspInit+0x88>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	4a08      	ldr	r2, [pc, #32]	; (8002ea8 <HAL_FMPI2C_MspInit+0x88>)
 8002e88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e8e:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <HAL_FMPI2C_MspInit+0x88>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8002e9a:	bf00      	nop
 8002e9c:	3728      	adds	r7, #40	; 0x28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40006000 	.word	0x40006000
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40020800 	.word	0x40020800

08002eb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08a      	sub	sp, #40	; 0x28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb8:	f107 0314 	add.w	r3, r7, #20
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	60da      	str	r2, [r3, #12]
 8002ec6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a19      	ldr	r2, [pc, #100]	; (8002f34 <HAL_I2C_MspInit+0x84>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d12c      	bne.n	8002f2c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	4b18      	ldr	r3, [pc, #96]	; (8002f38 <HAL_I2C_MspInit+0x88>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	4a17      	ldr	r2, [pc, #92]	; (8002f38 <HAL_I2C_MspInit+0x88>)
 8002edc:	f043 0302 	orr.w	r3, r3, #2
 8002ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee2:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <HAL_I2C_MspInit+0x88>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	613b      	str	r3, [r7, #16]
 8002eec:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8002eee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ef4:	2312      	movs	r3, #18
 8002ef6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efc:	2303      	movs	r3, #3
 8002efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f00:	2304      	movs	r3, #4
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f04:	f107 0314 	add.w	r3, r7, #20
 8002f08:	4619      	mov	r1, r3
 8002f0a:	480c      	ldr	r0, [pc, #48]	; (8002f3c <HAL_I2C_MspInit+0x8c>)
 8002f0c:	f002 ff9c 	bl	8005e48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f10:	2300      	movs	r3, #0
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <HAL_I2C_MspInit+0x88>)
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	4a07      	ldr	r2, [pc, #28]	; (8002f38 <HAL_I2C_MspInit+0x88>)
 8002f1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8002f20:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <HAL_I2C_MspInit+0x88>)
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002f2c:	bf00      	nop
 8002f2e:	3728      	adds	r7, #40	; 0x28
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40005800 	.word	0x40005800
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	40020400 	.word	0x40020400

08002f40 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08c      	sub	sp, #48	; 0x30
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f48:	f107 031c 	add.w	r3, r7, #28
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	60da      	str	r2, [r3, #12]
 8002f56:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a4f      	ldr	r2, [pc, #316]	; (800309c <HAL_I2S_MspInit+0x15c>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	f040 8097 	bne.w	8003092 <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f64:	2300      	movs	r3, #0
 8002f66:	61bb      	str	r3, [r7, #24]
 8002f68:	4b4d      	ldr	r3, [pc, #308]	; (80030a0 <HAL_I2S_MspInit+0x160>)
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	4a4c      	ldr	r2, [pc, #304]	; (80030a0 <HAL_I2S_MspInit+0x160>)
 8002f6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f72:	6413      	str	r3, [r2, #64]	; 0x40
 8002f74:	4b4a      	ldr	r3, [pc, #296]	; (80030a0 <HAL_I2S_MspInit+0x160>)
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f7c:	61bb      	str	r3, [r7, #24]
 8002f7e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	4b46      	ldr	r3, [pc, #280]	; (80030a0 <HAL_I2S_MspInit+0x160>)
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	4a45      	ldr	r2, [pc, #276]	; (80030a0 <HAL_I2S_MspInit+0x160>)
 8002f8a:	f043 0304 	orr.w	r3, r3, #4
 8002f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8002f90:	4b43      	ldr	r3, [pc, #268]	; (80030a0 <HAL_I2S_MspInit+0x160>)
 8002f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	4b3f      	ldr	r3, [pc, #252]	; (80030a0 <HAL_I2S_MspInit+0x160>)
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa4:	4a3e      	ldr	r2, [pc, #248]	; (80030a0 <HAL_I2S_MspInit+0x160>)
 8002fa6:	f043 0301 	orr.w	r3, r3, #1
 8002faa:	6313      	str	r3, [r2, #48]	; 0x30
 8002fac:	4b3c      	ldr	r3, [pc, #240]	; (80030a0 <HAL_I2S_MspInit+0x160>)
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	4b38      	ldr	r3, [pc, #224]	; (80030a0 <HAL_I2S_MspInit+0x160>)
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc0:	4a37      	ldr	r2, [pc, #220]	; (80030a0 <HAL_I2S_MspInit+0x160>)
 8002fc2:	f043 0308 	orr.w	r3, r3, #8
 8002fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc8:	4b35      	ldr	r3, [pc, #212]	; (80030a0 <HAL_I2S_MspInit+0x160>)
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60bb      	str	r3, [r7, #8]
 8002fd8:	4b31      	ldr	r3, [pc, #196]	; (80030a0 <HAL_I2S_MspInit+0x160>)
 8002fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fdc:	4a30      	ldr	r2, [pc, #192]	; (80030a0 <HAL_I2S_MspInit+0x160>)
 8002fde:	f043 0302 	orr.w	r3, r3, #2
 8002fe2:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe4:	4b2e      	ldr	r3, [pc, #184]	; (80030a0 <HAL_I2S_MspInit+0x160>)
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	60bb      	str	r3, [r7, #8]
 8002fee:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 8002ff0:	2304      	movs	r3, #4
 8002ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8003000:	2306      	movs	r3, #6
 8003002:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8003004:	f107 031c 	add.w	r3, r7, #28
 8003008:	4619      	mov	r1, r3
 800300a:	4826      	ldr	r0, [pc, #152]	; (80030a4 <HAL_I2S_MspInit+0x164>)
 800300c:	f002 ff1c 	bl	8005e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8003010:	2308      	movs	r3, #8
 8003012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003014:	2302      	movs	r3, #2
 8003016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003018:	2300      	movs	r3, #0
 800301a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301c:	2300      	movs	r3, #0
 800301e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003020:	2305      	movs	r3, #5
 8003022:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8003024:	f107 031c 	add.w	r3, r7, #28
 8003028:	4619      	mov	r1, r3
 800302a:	481e      	ldr	r0, [pc, #120]	; (80030a4 <HAL_I2S_MspInit+0x164>)
 800302c:	f002 ff0c 	bl	8005e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8003030:	2308      	movs	r3, #8
 8003032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003034:	2302      	movs	r3, #2
 8003036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003038:	2300      	movs	r3, #0
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303c:	2300      	movs	r3, #0
 800303e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003040:	2305      	movs	r3, #5
 8003042:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8003044:	f107 031c 	add.w	r3, r7, #28
 8003048:	4619      	mov	r1, r3
 800304a:	4817      	ldr	r0, [pc, #92]	; (80030a8 <HAL_I2S_MspInit+0x168>)
 800304c:	f002 fefc 	bl	8005e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8003050:	2308      	movs	r3, #8
 8003052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003054:	2302      	movs	r3, #2
 8003056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003058:	2300      	movs	r3, #0
 800305a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305c:	2300      	movs	r3, #0
 800305e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003060:	2305      	movs	r3, #5
 8003062:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8003064:	f107 031c 	add.w	r3, r7, #28
 8003068:	4619      	mov	r1, r3
 800306a:	4810      	ldr	r0, [pc, #64]	; (80030ac <HAL_I2S_MspInit+0x16c>)
 800306c:	f002 feec 	bl	8005e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 8003070:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003076:	2302      	movs	r3, #2
 8003078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307a:	2300      	movs	r3, #0
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307e:	2300      	movs	r3, #0
 8003080:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003082:	2305      	movs	r3, #5
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 8003086:	f107 031c 	add.w	r3, r7, #28
 800308a:	4619      	mov	r1, r3
 800308c:	4808      	ldr	r0, [pc, #32]	; (80030b0 <HAL_I2S_MspInit+0x170>)
 800308e:	f002 fedb 	bl	8005e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003092:	bf00      	nop
 8003094:	3730      	adds	r7, #48	; 0x30
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40003800 	.word	0x40003800
 80030a0:	40023800 	.word	0x40023800
 80030a4:	40020800 	.word	0x40020800
 80030a8:	40020000 	.word	0x40020000
 80030ac:	40020c00 	.word	0x40020c00
 80030b0:	40020400 	.word	0x40020400

080030b4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08e      	sub	sp, #56	; 0x38
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	609a      	str	r2, [r3, #8]
 80030c8:	60da      	str	r2, [r3, #12]
 80030ca:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a56      	ldr	r2, [pc, #344]	; (800322c <HAL_QSPI_MspInit+0x178>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	f040 80a6 	bne.w	8003224 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80030d8:	2300      	movs	r3, #0
 80030da:	623b      	str	r3, [r7, #32]
 80030dc:	4b54      	ldr	r3, [pc, #336]	; (8003230 <HAL_QSPI_MspInit+0x17c>)
 80030de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e0:	4a53      	ldr	r2, [pc, #332]	; (8003230 <HAL_QSPI_MspInit+0x17c>)
 80030e2:	f043 0302 	orr.w	r3, r3, #2
 80030e6:	6393      	str	r3, [r2, #56]	; 0x38
 80030e8:	4b51      	ldr	r3, [pc, #324]	; (8003230 <HAL_QSPI_MspInit+0x17c>)
 80030ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	623b      	str	r3, [r7, #32]
 80030f2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80030f4:	2300      	movs	r3, #0
 80030f6:	61fb      	str	r3, [r7, #28]
 80030f8:	4b4d      	ldr	r3, [pc, #308]	; (8003230 <HAL_QSPI_MspInit+0x17c>)
 80030fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fc:	4a4c      	ldr	r2, [pc, #304]	; (8003230 <HAL_QSPI_MspInit+0x17c>)
 80030fe:	f043 0310 	orr.w	r3, r3, #16
 8003102:	6313      	str	r3, [r2, #48]	; 0x30
 8003104:	4b4a      	ldr	r3, [pc, #296]	; (8003230 <HAL_QSPI_MspInit+0x17c>)
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	61fb      	str	r3, [r7, #28]
 800310e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003110:	2300      	movs	r3, #0
 8003112:	61bb      	str	r3, [r7, #24]
 8003114:	4b46      	ldr	r3, [pc, #280]	; (8003230 <HAL_QSPI_MspInit+0x17c>)
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	4a45      	ldr	r2, [pc, #276]	; (8003230 <HAL_QSPI_MspInit+0x17c>)
 800311a:	f043 0320 	orr.w	r3, r3, #32
 800311e:	6313      	str	r3, [r2, #48]	; 0x30
 8003120:	4b43      	ldr	r3, [pc, #268]	; (8003230 <HAL_QSPI_MspInit+0x17c>)
 8003122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003124:	f003 0320 	and.w	r3, r3, #32
 8003128:	61bb      	str	r3, [r7, #24]
 800312a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800312c:	2300      	movs	r3, #0
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	4b3f      	ldr	r3, [pc, #252]	; (8003230 <HAL_QSPI_MspInit+0x17c>)
 8003132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003134:	4a3e      	ldr	r2, [pc, #248]	; (8003230 <HAL_QSPI_MspInit+0x17c>)
 8003136:	f043 0302 	orr.w	r3, r3, #2
 800313a:	6313      	str	r3, [r2, #48]	; 0x30
 800313c:	4b3c      	ldr	r3, [pc, #240]	; (8003230 <HAL_QSPI_MspInit+0x17c>)
 800313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	617b      	str	r3, [r7, #20]
 8003146:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003148:	2300      	movs	r3, #0
 800314a:	613b      	str	r3, [r7, #16]
 800314c:	4b38      	ldr	r3, [pc, #224]	; (8003230 <HAL_QSPI_MspInit+0x17c>)
 800314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003150:	4a37      	ldr	r2, [pc, #220]	; (8003230 <HAL_QSPI_MspInit+0x17c>)
 8003152:	f043 0308 	orr.w	r3, r3, #8
 8003156:	6313      	str	r3, [r2, #48]	; 0x30
 8003158:	4b35      	ldr	r3, [pc, #212]	; (8003230 <HAL_QSPI_MspInit+0x17c>)
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003164:	2300      	movs	r3, #0
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	4b31      	ldr	r3, [pc, #196]	; (8003230 <HAL_QSPI_MspInit+0x17c>)
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	4a30      	ldr	r2, [pc, #192]	; (8003230 <HAL_QSPI_MspInit+0x17c>)
 800316e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003172:	6313      	str	r3, [r2, #48]	; 0x30
 8003174:	4b2e      	ldr	r3, [pc, #184]	; (8003230 <HAL_QSPI_MspInit+0x17c>)
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8003180:	2304      	movs	r3, #4
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003184:	2302      	movs	r3, #2
 8003186:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003188:	2300      	movs	r3, #0
 800318a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800318c:	2303      	movs	r3, #3
 800318e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8003190:	2309      	movs	r3, #9
 8003192:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8003194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003198:	4619      	mov	r1, r3
 800319a:	4826      	ldr	r0, [pc, #152]	; (8003234 <HAL_QSPI_MspInit+0x180>)
 800319c:	f002 fe54 	bl	8005e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 80031a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a6:	2302      	movs	r3, #2
 80031a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ae:	2303      	movs	r3, #3
 80031b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80031b2:	230a      	movs	r3, #10
 80031b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80031b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031ba:	4619      	mov	r1, r3
 80031bc:	481e      	ldr	r0, [pc, #120]	; (8003238 <HAL_QSPI_MspInit+0x184>)
 80031be:	f002 fe43 	bl	8005e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 80031c2:	2304      	movs	r3, #4
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c6:	2302      	movs	r3, #2
 80031c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ca:	2300      	movs	r3, #0
 80031cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ce:	2303      	movs	r3, #3
 80031d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80031d2:	2309      	movs	r3, #9
 80031d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 80031d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031da:	4619      	mov	r1, r3
 80031dc:	4817      	ldr	r0, [pc, #92]	; (800323c <HAL_QSPI_MspInit+0x188>)
 80031de:	f002 fe33 	bl	8005e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 80031e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e8:	2302      	movs	r3, #2
 80031ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f0:	2303      	movs	r3, #3
 80031f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80031f4:	2309      	movs	r3, #9
 80031f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 80031f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031fc:	4619      	mov	r1, r3
 80031fe:	4810      	ldr	r0, [pc, #64]	; (8003240 <HAL_QSPI_MspInit+0x18c>)
 8003200:	f002 fe22 	bl	8005e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8003204:	2340      	movs	r3, #64	; 0x40
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003208:	2302      	movs	r3, #2
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320c:	2300      	movs	r3, #0
 800320e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003210:	2303      	movs	r3, #3
 8003212:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003214:	230a      	movs	r3, #10
 8003216:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8003218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800321c:	4619      	mov	r1, r3
 800321e:	4809      	ldr	r0, [pc, #36]	; (8003244 <HAL_QSPI_MspInit+0x190>)
 8003220:	f002 fe12 	bl	8005e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003224:	bf00      	nop
 8003226:	3738      	adds	r7, #56	; 0x38
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	a0001000 	.word	0xa0001000
 8003230:	40023800 	.word	0x40023800
 8003234:	40021000 	.word	0x40021000
 8003238:	40021400 	.word	0x40021400
 800323c:	40020400 	.word	0x40020400
 8003240:	40020c00 	.word	0x40020c00
 8003244:	40021800 	.word	0x40021800

08003248 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08a      	sub	sp, #40	; 0x28
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003250:	f107 0314 	add.w	r3, r7, #20
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	605a      	str	r2, [r3, #4]
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	60da      	str	r2, [r3, #12]
 800325e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a28      	ldr	r2, [pc, #160]	; (8003308 <HAL_SD_MspInit+0xc0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d14a      	bne.n	8003300 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	4b27      	ldr	r3, [pc, #156]	; (800330c <HAL_SD_MspInit+0xc4>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	4a26      	ldr	r2, [pc, #152]	; (800330c <HAL_SD_MspInit+0xc4>)
 8003274:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003278:	6453      	str	r3, [r2, #68]	; 0x44
 800327a:	4b24      	ldr	r3, [pc, #144]	; (800330c <HAL_SD_MspInit+0xc4>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	4b20      	ldr	r3, [pc, #128]	; (800330c <HAL_SD_MspInit+0xc4>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	4a1f      	ldr	r2, [pc, #124]	; (800330c <HAL_SD_MspInit+0xc4>)
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	6313      	str	r3, [r2, #48]	; 0x30
 8003296:	4b1d      	ldr	r3, [pc, #116]	; (800330c <HAL_SD_MspInit+0xc4>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	4b19      	ldr	r3, [pc, #100]	; (800330c <HAL_SD_MspInit+0xc4>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	4a18      	ldr	r2, [pc, #96]	; (800330c <HAL_SD_MspInit+0xc4>)
 80032ac:	f043 0304 	orr.w	r3, r3, #4
 80032b0:	6313      	str	r3, [r2, #48]	; 0x30
 80032b2:	4b16      	ldr	r3, [pc, #88]	; (800330c <HAL_SD_MspInit+0xc4>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 80032be:	2340      	movs	r3, #64	; 0x40
 80032c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c2:	2302      	movs	r3, #2
 80032c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ca:	2303      	movs	r3, #3
 80032cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80032ce:	230c      	movs	r3, #12
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 80032d2:	f107 0314 	add.w	r3, r7, #20
 80032d6:	4619      	mov	r1, r3
 80032d8:	480d      	ldr	r0, [pc, #52]	; (8003310 <HAL_SD_MspInit+0xc8>)
 80032da:	f002 fdb5 	bl	8005e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 80032de:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80032e2:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e4:	2302      	movs	r3, #2
 80032e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ec:	2303      	movs	r3, #3
 80032ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80032f0:	230c      	movs	r3, #12
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032f4:	f107 0314 	add.w	r3, r7, #20
 80032f8:	4619      	mov	r1, r3
 80032fa:	4806      	ldr	r0, [pc, #24]	; (8003314 <HAL_SD_MspInit+0xcc>)
 80032fc:	f002 fda4 	bl	8005e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003300:	bf00      	nop
 8003302:	3728      	adds	r7, #40	; 0x28
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40012c00 	.word	0x40012c00
 800330c:	40023800 	.word	0x40023800
 8003310:	40020000 	.word	0x40020000
 8003314:	40020800 	.word	0x40020800

08003318 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b08c      	sub	sp, #48	; 0x30
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003320:	f107 031c 	add.w	r3, r7, #28
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	605a      	str	r2, [r3, #4]
 800332a:	609a      	str	r2, [r3, #8]
 800332c:	60da      	str	r2, [r3, #12]
 800332e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a33      	ldr	r2, [pc, #204]	; (8003404 <HAL_UART_MspInit+0xec>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d12d      	bne.n	8003396 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 800333a:	2300      	movs	r3, #0
 800333c:	61bb      	str	r3, [r7, #24]
 800333e:	4b32      	ldr	r3, [pc, #200]	; (8003408 <HAL_UART_MspInit+0xf0>)
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	4a31      	ldr	r2, [pc, #196]	; (8003408 <HAL_UART_MspInit+0xf0>)
 8003344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003348:	6453      	str	r3, [r2, #68]	; 0x44
 800334a:	4b2f      	ldr	r3, [pc, #188]	; (8003408 <HAL_UART_MspInit+0xf0>)
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003352:	61bb      	str	r3, [r7, #24]
 8003354:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
 800335a:	4b2b      	ldr	r3, [pc, #172]	; (8003408 <HAL_UART_MspInit+0xf0>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	4a2a      	ldr	r2, [pc, #168]	; (8003408 <HAL_UART_MspInit+0xf0>)
 8003360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003364:	6313      	str	r3, [r2, #48]	; 0x30
 8003366:	4b28      	ldr	r3, [pc, #160]	; (8003408 <HAL_UART_MspInit+0xf0>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 8003372:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003378:	2302      	movs	r3, #2
 800337a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800337c:	2301      	movs	r3, #1
 800337e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003380:	2303      	movs	r3, #3
 8003382:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 8003384:	230b      	movs	r3, #11
 8003386:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003388:	f107 031c 	add.w	r3, r7, #28
 800338c:	4619      	mov	r1, r3
 800338e:	481f      	ldr	r0, [pc, #124]	; (800340c <HAL_UART_MspInit+0xf4>)
 8003390:	f002 fd5a 	bl	8005e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003394:	e031      	b.n	80033fa <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a1d      	ldr	r2, [pc, #116]	; (8003410 <HAL_UART_MspInit+0xf8>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d12c      	bne.n	80033fa <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80033a0:	2300      	movs	r3, #0
 80033a2:	613b      	str	r3, [r7, #16]
 80033a4:	4b18      	ldr	r3, [pc, #96]	; (8003408 <HAL_UART_MspInit+0xf0>)
 80033a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a8:	4a17      	ldr	r2, [pc, #92]	; (8003408 <HAL_UART_MspInit+0xf0>)
 80033aa:	f043 0320 	orr.w	r3, r3, #32
 80033ae:	6453      	str	r3, [r2, #68]	; 0x44
 80033b0:	4b15      	ldr	r3, [pc, #84]	; (8003408 <HAL_UART_MspInit+0xf0>)
 80033b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b4:	f003 0320 	and.w	r3, r3, #32
 80033b8:	613b      	str	r3, [r7, #16]
 80033ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80033bc:	2300      	movs	r3, #0
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	4b11      	ldr	r3, [pc, #68]	; (8003408 <HAL_UART_MspInit+0xf0>)
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	4a10      	ldr	r2, [pc, #64]	; (8003408 <HAL_UART_MspInit+0xf0>)
 80033c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033ca:	6313      	str	r3, [r2, #48]	; 0x30
 80033cc:	4b0e      	ldr	r3, [pc, #56]	; (8003408 <HAL_UART_MspInit+0xf0>)
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 80033d8:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80033dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033de:	2302      	movs	r3, #2
 80033e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e6:	2303      	movs	r3, #3
 80033e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80033ea:	2308      	movs	r3, #8
 80033ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033ee:	f107 031c 	add.w	r3, r7, #28
 80033f2:	4619      	mov	r1, r3
 80033f4:	4805      	ldr	r0, [pc, #20]	; (800340c <HAL_UART_MspInit+0xf4>)
 80033f6:	f002 fd27 	bl	8005e48 <HAL_GPIO_Init>
}
 80033fa:	bf00      	nop
 80033fc:	3730      	adds	r7, #48	; 0x30
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40011c00 	.word	0x40011c00
 8003408:	40023800 	.word	0x40023800
 800340c:	40021800 	.word	0x40021800
 8003410:	40011400 	.word	0x40011400

08003414 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800341a:	1d3b      	adds	r3, r7, #4
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	605a      	str	r2, [r3, #4]
 8003422:	609a      	str	r2, [r3, #8]
 8003424:	60da      	str	r2, [r3, #12]
 8003426:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8003428:	4b2c      	ldr	r3, [pc, #176]	; (80034dc <HAL_FSMC_MspInit+0xc8>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d151      	bne.n	80034d4 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8003430:	4b2a      	ldr	r3, [pc, #168]	; (80034dc <HAL_FSMC_MspInit+0xc8>)
 8003432:	2201      	movs	r2, #1
 8003434:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	603b      	str	r3, [r7, #0]
 800343a:	4b29      	ldr	r3, [pc, #164]	; (80034e0 <HAL_FSMC_MspInit+0xcc>)
 800343c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343e:	4a28      	ldr	r2, [pc, #160]	; (80034e0 <HAL_FSMC_MspInit+0xcc>)
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	6393      	str	r3, [r2, #56]	; 0x38
 8003446:	4b26      	ldr	r3, [pc, #152]	; (80034e0 <HAL_FSMC_MspInit+0xcc>)
 8003448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	603b      	str	r3, [r7, #0]
 8003450:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 8003452:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8003456:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003458:	2302      	movs	r3, #2
 800345a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345c:	2300      	movs	r3, #0
 800345e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003460:	2303      	movs	r3, #3
 8003462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003464:	230c      	movs	r3, #12
 8003466:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003468:	1d3b      	adds	r3, r7, #4
 800346a:	4619      	mov	r1, r3
 800346c:	481d      	ldr	r0, [pc, #116]	; (80034e4 <HAL_FSMC_MspInit+0xd0>)
 800346e:	f002 fceb 	bl	8005e48 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 8003472:	f240 433f 	movw	r3, #1087	; 0x43f
 8003476:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003478:	2302      	movs	r3, #2
 800347a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347c:	2300      	movs	r3, #0
 800347e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003480:	2303      	movs	r3, #3
 8003482:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003484:	230c      	movs	r3, #12
 8003486:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003488:	1d3b      	adds	r3, r7, #4
 800348a:	4619      	mov	r1, r3
 800348c:	4816      	ldr	r0, [pc, #88]	; (80034e8 <HAL_FSMC_MspInit+0xd4>)
 800348e:	f002 fcdb 	bl	8005e48 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 8003492:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003496:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003498:	2302      	movs	r3, #2
 800349a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349c:	2300      	movs	r3, #0
 800349e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a0:	2303      	movs	r3, #3
 80034a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80034a4:	230c      	movs	r3, #12
 80034a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034a8:	1d3b      	adds	r3, r7, #4
 80034aa:	4619      	mov	r1, r3
 80034ac:	480f      	ldr	r0, [pc, #60]	; (80034ec <HAL_FSMC_MspInit+0xd8>)
 80034ae:	f002 fccb 	bl	8005e48 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 80034b2:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 80034b6:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b8:	2302      	movs	r3, #2
 80034ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c0:	2303      	movs	r3, #3
 80034c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80034c4:	230c      	movs	r3, #12
 80034c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034c8:	1d3b      	adds	r3, r7, #4
 80034ca:	4619      	mov	r1, r3
 80034cc:	4808      	ldr	r0, [pc, #32]	; (80034f0 <HAL_FSMC_MspInit+0xdc>)
 80034ce:	f002 fcbb 	bl	8005e48 <HAL_GPIO_Init>
 80034d2:	e000      	b.n	80034d6 <HAL_FSMC_MspInit+0xc2>
    return;
 80034d4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	20000170 	.word	0x20000170
 80034e0:	40023800 	.word	0x40023800
 80034e4:	40021400 	.word	0x40021400
 80034e8:	40021800 	.word	0x40021800
 80034ec:	40021000 	.word	0x40021000
 80034f0:	40020c00 	.word	0x40020c00

080034f4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80034fc:	f7ff ff8a 	bl	8003414 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8003500:	bf00      	nop
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08c      	sub	sp, #48	; 0x30
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003514:	2300      	movs	r3, #0
 8003516:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003518:	2200      	movs	r2, #0
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	2036      	movs	r0, #54	; 0x36
 800351e:	f001 ffb1 	bl	8005484 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003522:	2036      	movs	r0, #54	; 0x36
 8003524:	f001 ffca 	bl	80054bc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	4b1e      	ldr	r3, [pc, #120]	; (80035a8 <HAL_InitTick+0xa0>)
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	4a1d      	ldr	r2, [pc, #116]	; (80035a8 <HAL_InitTick+0xa0>)
 8003532:	f043 0310 	orr.w	r3, r3, #16
 8003536:	6413      	str	r3, [r2, #64]	; 0x40
 8003538:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <HAL_InitTick+0xa0>)
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003544:	f107 0210 	add.w	r2, r7, #16
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	4611      	mov	r1, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f005 fbd6 	bl	8008d00 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003554:	f005 fbac 	bl	8008cb0 <HAL_RCC_GetPCLK1Freq>
 8003558:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800355a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355c:	4a13      	ldr	r2, [pc, #76]	; (80035ac <HAL_InitTick+0xa4>)
 800355e:	fba2 2303 	umull	r2, r3, r2, r3
 8003562:	0c9b      	lsrs	r3, r3, #18
 8003564:	3b01      	subs	r3, #1
 8003566:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003568:	4b11      	ldr	r3, [pc, #68]	; (80035b0 <HAL_InitTick+0xa8>)
 800356a:	4a12      	ldr	r2, [pc, #72]	; (80035b4 <HAL_InitTick+0xac>)
 800356c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800356e:	4b10      	ldr	r3, [pc, #64]	; (80035b0 <HAL_InitTick+0xa8>)
 8003570:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003574:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003576:	4a0e      	ldr	r2, [pc, #56]	; (80035b0 <HAL_InitTick+0xa8>)
 8003578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800357c:	4b0c      	ldr	r3, [pc, #48]	; (80035b0 <HAL_InitTick+0xa8>)
 800357e:	2200      	movs	r2, #0
 8003580:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003582:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <HAL_InitTick+0xa8>)
 8003584:	2200      	movs	r2, #0
 8003586:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003588:	4809      	ldr	r0, [pc, #36]	; (80035b0 <HAL_InitTick+0xa8>)
 800358a:	f007 fbc5 	bl	800ad18 <HAL_TIM_Base_Init>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d104      	bne.n	800359e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003594:	4806      	ldr	r0, [pc, #24]	; (80035b0 <HAL_InitTick+0xa8>)
 8003596:	f007 fbf4 	bl	800ad82 <HAL_TIM_Base_Start_IT>
 800359a:	4603      	mov	r3, r0
 800359c:	e000      	b.n	80035a0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3730      	adds	r7, #48	; 0x30
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40023800 	.word	0x40023800
 80035ac:	431bde83 	.word	0x431bde83
 80035b0:	2003dcc0 	.word	0x2003dcc0
 80035b4:	40001000 	.word	0x40001000

080035b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80035bc:	bf00      	nop
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035c6:	b480      	push	{r7}
 80035c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035ca:	e7fe      	b.n	80035ca <HardFault_Handler+0x4>

080035cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035d0:	e7fe      	b.n	80035d0 <MemManage_Handler+0x4>

080035d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035d2:	b480      	push	{r7}
 80035d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035d6:	e7fe      	b.n	80035d6 <BusFault_Handler+0x4>

080035d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035dc:	e7fe      	b.n	80035dc <UsageFault_Handler+0x4>

080035de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035de:	b480      	push	{r7}
 80035e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035e2:	bf00      	nop
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80035f0:	2001      	movs	r0, #1
 80035f2:	f002 fe07 	bl	8006204 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8003600:	4803      	ldr	r0, [pc, #12]	; (8003610 <TIM6_DAC_IRQHandler+0x14>)
 8003602:	f001 ff8b 	bl	800551c <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8003606:	4803      	ldr	r0, [pc, #12]	; (8003614 <TIM6_DAC_IRQHandler+0x18>)
 8003608:	f007 fbdf 	bl	800adca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800360c:	bf00      	nop
 800360e:	bd80      	pop	{r7, pc}
 8003610:	2003d85c 	.word	0x2003d85c
 8003614:	2003dcc0 	.word	0x2003dcc0

08003618 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800361c:	4802      	ldr	r0, [pc, #8]	; (8003628 <OTG_FS_IRQHandler+0x10>)
 800361e:	f003 f8a3 	bl	8006768 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003622:	bf00      	nop
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	2003e1dc 	.word	0x2003e1dc

0800362c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003634:	4a14      	ldr	r2, [pc, #80]	; (8003688 <_sbrk+0x5c>)
 8003636:	4b15      	ldr	r3, [pc, #84]	; (800368c <_sbrk+0x60>)
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003640:	4b13      	ldr	r3, [pc, #76]	; (8003690 <_sbrk+0x64>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d102      	bne.n	800364e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003648:	4b11      	ldr	r3, [pc, #68]	; (8003690 <_sbrk+0x64>)
 800364a:	4a12      	ldr	r2, [pc, #72]	; (8003694 <_sbrk+0x68>)
 800364c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800364e:	4b10      	ldr	r3, [pc, #64]	; (8003690 <_sbrk+0x64>)
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4413      	add	r3, r2
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	429a      	cmp	r2, r3
 800365a:	d207      	bcs.n	800366c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800365c:	f011 ffd4 	bl	8015608 <__errno>
 8003660:	4602      	mov	r2, r0
 8003662:	230c      	movs	r3, #12
 8003664:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003666:	f04f 33ff 	mov.w	r3, #4294967295
 800366a:	e009      	b.n	8003680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800366c:	4b08      	ldr	r3, [pc, #32]	; (8003690 <_sbrk+0x64>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003672:	4b07      	ldr	r3, [pc, #28]	; (8003690 <_sbrk+0x64>)
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4413      	add	r3, r2
 800367a:	4a05      	ldr	r2, [pc, #20]	; (8003690 <_sbrk+0x64>)
 800367c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800367e:	68fb      	ldr	r3, [r7, #12]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	20050000 	.word	0x20050000
 800368c:	00000400 	.word	0x00000400
 8003690:	20000174 	.word	0x20000174
 8003694:	2003e4a8 	.word	0x2003e4a8

08003698 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800369c:	4b08      	ldr	r3, [pc, #32]	; (80036c0 <SystemInit+0x28>)
 800369e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a2:	4a07      	ldr	r2, [pc, #28]	; (80036c0 <SystemInit+0x28>)
 80036a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80036ac:	4b04      	ldr	r3, [pc, #16]	; (80036c0 <SystemInit+0x28>)
 80036ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036b2:	609a      	str	r2, [r3, #8]
#endif
}
 80036b4:	bf00      	nop
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80036c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80036c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80036ca:	e003      	b.n	80036d4 <LoopCopyDataInit>

080036cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80036cc:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80036ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80036d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80036d2:	3104      	adds	r1, #4

080036d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80036d4:	480b      	ldr	r0, [pc, #44]	; (8003704 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80036d6:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80036d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80036da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80036dc:	d3f6      	bcc.n	80036cc <CopyDataInit>
  ldr  r2, =_sbss
 80036de:	4a0b      	ldr	r2, [pc, #44]	; (800370c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80036e0:	e002      	b.n	80036e8 <LoopFillZerobss>

080036e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80036e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80036e4:	f842 3b04 	str.w	r3, [r2], #4

080036e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80036e8:	4b09      	ldr	r3, [pc, #36]	; (8003710 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80036ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80036ec:	d3f9      	bcc.n	80036e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80036ee:	f7ff ffd3 	bl	8003698 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036f2:	f011 ff8f 	bl	8015614 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036f6:	f7fd fda3 	bl	8001240 <main>
  bx  lr    
 80036fa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80036fc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003700:	08019020 	.word	0x08019020
  ldr  r0, =_sdata
 8003704:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003708:	20000130 	.word	0x20000130
  ldr  r2, =_sbss
 800370c:	20000130 	.word	0x20000130
  ldr  r3, = _ebss
 8003710:	2003e4a4 	.word	0x2003e4a4

08003714 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003714:	e7fe      	b.n	8003714 <ADC_IRQHandler>

08003716 <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b084      	sub	sp, #16
 800371a:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800371c:	f000 fd6e 	bl	80041fc <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8003720:	2200      	movs	r2, #0
 8003722:	2100      	movs	r1, #0
 8003724:	2010      	movs	r0, #16
 8003726:	f000 f9e4 	bl	8003af2 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 800372a:	200a      	movs	r0, #10
 800372c:	f000 fd8d 	bl	800424a <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8003730:	2200      	movs	r2, #0
 8003732:	2100      	movs	r1, #0
 8003734:	2001      	movs	r0, #1
 8003736:	f000 f9dc 	bl	8003af2 <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 800373a:	20c8      	movs	r0, #200	; 0xc8
 800373c:	f000 fd85 	bl	800424a <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 8003740:	2200      	movs	r2, #0
 8003742:	2100      	movs	r1, #0
 8003744:	2011      	movs	r0, #17
 8003746:	f000 f9d4 	bl	8003af2 <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 800374a:	2078      	movs	r0, #120	; 0x78
 800374c:	f000 fd7d 	bl	800424a <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 8003750:	2300      	movs	r3, #0
 8003752:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8003754:	463b      	mov	r3, r7
 8003756:	2201      	movs	r2, #1
 8003758:	4619      	mov	r1, r3
 800375a:	2036      	movs	r0, #54	; 0x36
 800375c:	f000 f9c9 	bl	8003af2 <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 8003760:	2305      	movs	r3, #5
 8003762:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8003764:	463b      	mov	r3, r7
 8003766:	2201      	movs	r2, #1
 8003768:	4619      	mov	r1, r3
 800376a:	203a      	movs	r0, #58	; 0x3a
 800376c:	f000 f9c1 	bl	8003af2 <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 8003770:	2200      	movs	r2, #0
 8003772:	2100      	movs	r1, #0
 8003774:	2021      	movs	r0, #33	; 0x21
 8003776:	f000 f9bc 	bl	8003af2 <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 800377a:	2300      	movs	r3, #0
 800377c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 800377e:	2300      	movs	r3, #0
 8003780:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8003782:	2300      	movs	r3, #0
 8003784:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8003786:	23ef      	movs	r3, #239	; 0xef
 8003788:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 800378a:	463b      	mov	r3, r7
 800378c:	2204      	movs	r2, #4
 800378e:	4619      	mov	r1, r3
 8003790:	202a      	movs	r0, #42	; 0x2a
 8003792:	f000 f9ae 	bl	8003af2 <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 8003796:	2300      	movs	r3, #0
 8003798:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 800379a:	2300      	movs	r3, #0
 800379c:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 800379e:	2300      	movs	r3, #0
 80037a0:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 80037a2:	23ef      	movs	r3, #239	; 0xef
 80037a4:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 80037a6:	463b      	mov	r3, r7
 80037a8:	2204      	movs	r2, #4
 80037aa:	4619      	mov	r1, r3
 80037ac:	202b      	movs	r0, #43	; 0x2b
 80037ae:	f000 f9a0 	bl	8003af2 <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 80037b2:	230c      	movs	r3, #12
 80037b4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 80037b6:	230c      	movs	r3, #12
 80037b8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80037ba:	2300      	movs	r3, #0
 80037bc:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 80037be:	2333      	movs	r3, #51	; 0x33
 80037c0:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 80037c2:	2333      	movs	r3, #51	; 0x33
 80037c4:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 80037c6:	463b      	mov	r3, r7
 80037c8:	2205      	movs	r2, #5
 80037ca:	4619      	mov	r1, r3
 80037cc:	20b2      	movs	r0, #178	; 0xb2
 80037ce:	f000 f990 	bl	8003af2 <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 80037d2:	2335      	movs	r3, #53	; 0x35
 80037d4:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 80037d6:	463b      	mov	r3, r7
 80037d8:	2201      	movs	r2, #1
 80037da:	4619      	mov	r1, r3
 80037dc:	20b7      	movs	r0, #183	; 0xb7
 80037de:	f000 f988 	bl	8003af2 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 80037e2:	231f      	movs	r3, #31
 80037e4:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 80037e6:	463b      	mov	r3, r7
 80037e8:	2201      	movs	r2, #1
 80037ea:	4619      	mov	r1, r3
 80037ec:	20bb      	movs	r0, #187	; 0xbb
 80037ee:	f000 f980 	bl	8003af2 <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 80037f2:	232c      	movs	r3, #44	; 0x2c
 80037f4:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 80037f6:	463b      	mov	r3, r7
 80037f8:	2201      	movs	r2, #1
 80037fa:	4619      	mov	r1, r3
 80037fc:	20c0      	movs	r0, #192	; 0xc0
 80037fe:	f000 f978 	bl	8003af2 <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 8003802:	2301      	movs	r3, #1
 8003804:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 8003806:	23c3      	movs	r3, #195	; 0xc3
 8003808:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 800380a:	463b      	mov	r3, r7
 800380c:	2202      	movs	r2, #2
 800380e:	4619      	mov	r1, r3
 8003810:	20c2      	movs	r0, #194	; 0xc2
 8003812:	f000 f96e 	bl	8003af2 <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 8003816:	2320      	movs	r3, #32
 8003818:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 800381a:	463b      	mov	r3, r7
 800381c:	2201      	movs	r2, #1
 800381e:	4619      	mov	r1, r3
 8003820:	20c4      	movs	r0, #196	; 0xc4
 8003822:	f000 f966 	bl	8003af2 <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 8003826:	230f      	movs	r3, #15
 8003828:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 800382a:	463b      	mov	r3, r7
 800382c:	2201      	movs	r2, #1
 800382e:	4619      	mov	r1, r3
 8003830:	20c6      	movs	r0, #198	; 0xc6
 8003832:	f000 f95e 	bl	8003af2 <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 8003836:	23a4      	movs	r3, #164	; 0xa4
 8003838:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 800383a:	23a1      	movs	r3, #161	; 0xa1
 800383c:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 1); 
 800383e:	463b      	mov	r3, r7
 8003840:	2201      	movs	r2, #1
 8003842:	4619      	mov	r1, r3
 8003844:	20d0      	movs	r0, #208	; 0xd0
 8003846:	f000 f954 	bl	8003af2 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 800384a:	23d0      	movs	r3, #208	; 0xd0
 800384c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 800384e:	2308      	movs	r3, #8
 8003850:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 8003852:	2311      	movs	r3, #17
 8003854:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8003856:	2308      	movs	r3, #8
 8003858:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 800385a:	230c      	movs	r3, #12
 800385c:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 800385e:	2315      	movs	r3, #21
 8003860:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8003862:	2339      	movs	r3, #57	; 0x39
 8003864:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 8003866:	2333      	movs	r3, #51	; 0x33
 8003868:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 800386a:	2350      	movs	r3, #80	; 0x50
 800386c:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 800386e:	2336      	movs	r3, #54	; 0x36
 8003870:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 8003872:	2313      	movs	r3, #19
 8003874:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8003876:	2314      	movs	r3, #20
 8003878:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 800387a:	2329      	movs	r3, #41	; 0x29
 800387c:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 800387e:	232d      	movs	r3, #45	; 0x2d
 8003880:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 8003882:	463b      	mov	r3, r7
 8003884:	220e      	movs	r2, #14
 8003886:	4619      	mov	r1, r3
 8003888:	20e0      	movs	r0, #224	; 0xe0
 800388a:	f000 f932 	bl	8003af2 <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 800388e:	23d0      	movs	r3, #208	; 0xd0
 8003890:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8003892:	2308      	movs	r3, #8
 8003894:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 8003896:	2310      	movs	r3, #16
 8003898:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 800389a:	2308      	movs	r3, #8
 800389c:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 800389e:	2306      	movs	r3, #6
 80038a0:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 80038a2:	2306      	movs	r3, #6
 80038a4:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 80038a6:	2339      	movs	r3, #57	; 0x39
 80038a8:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 80038aa:	2344      	movs	r3, #68	; 0x44
 80038ac:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 80038ae:	2351      	movs	r3, #81	; 0x51
 80038b0:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 80038b2:	230b      	movs	r3, #11
 80038b4:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 80038b6:	2316      	movs	r3, #22
 80038b8:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 80038ba:	2314      	movs	r3, #20
 80038bc:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 80038be:	232f      	movs	r3, #47	; 0x2f
 80038c0:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 80038c2:	2331      	movs	r3, #49	; 0x31
 80038c4:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 80038c6:	463b      	mov	r3, r7
 80038c8:	220e      	movs	r2, #14
 80038ca:	4619      	mov	r1, r3
 80038cc:	20e1      	movs	r0, #225	; 0xe1
 80038ce:	f000 f910 	bl	8003af2 <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 80038d2:	f000 f847 	bl	8003964 <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 80038d6:	2300      	movs	r3, #0
 80038d8:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 80038da:	463b      	mov	r3, r7
 80038dc:	2201      	movs	r2, #1
 80038de:	4619      	mov	r1, r3
 80038e0:	2035      	movs	r0, #53	; 0x35
 80038e2:	f000 f906 	bl	8003af2 <ST7789H2_WriteReg>

}
 80038e6:	bf00      	nop
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b084      	sub	sp, #16
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d102      	bne.n	8003902 <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 80038fc:	2300      	movs	r3, #0
 80038fe:	723b      	strb	r3, [r7, #8]
 8003900:	e025      	b.n	800394e <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b02      	cmp	r3, #2
 8003906:	d120      	bne.n	800394a <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 8003908:	2300      	movs	r3, #0
 800390a:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 800390c:	2300      	movs	r3, #0
 800390e:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 8003910:	2301      	movs	r3, #1
 8003912:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 8003914:	23f0      	movs	r3, #240	; 0xf0
 8003916:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 8003918:	2300      	movs	r3, #0
 800391a:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 800391c:	2300      	movs	r3, #0
 800391e:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8003920:	f107 0308 	add.w	r3, r7, #8
 8003924:	2206      	movs	r2, #6
 8003926:	4619      	mov	r1, r3
 8003928:	2033      	movs	r0, #51	; 0x33
 800392a:	f000 f8e2 	bl	8003af2 <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 800392e:	2300      	movs	r3, #0
 8003930:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 8003932:	2350      	movs	r3, #80	; 0x50
 8003934:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 8003936:	f107 0308 	add.w	r3, r7, #8
 800393a:	2202      	movs	r2, #2
 800393c:	4619      	mov	r1, r3
 800393e:	2037      	movs	r0, #55	; 0x37
 8003940:	f000 f8d7 	bl	8003af2 <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 8003944:	23c0      	movs	r3, #192	; 0xc0
 8003946:	723b      	strb	r3, [r7, #8]
 8003948:	e001      	b.n	800394e <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 800394a:	2360      	movs	r3, #96	; 0x60
 800394c:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 800394e:	f107 0308 	add.w	r3, r7, #8
 8003952:	2201      	movs	r2, #1
 8003954:	4619      	mov	r1, r3
 8003956:	2036      	movs	r0, #54	; 0x36
 8003958:	f000 f8cb 	bl	8003af2 <ST7789H2_WriteReg>
}
 800395c:	bf00      	nop
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8003968:	2200      	movs	r2, #0
 800396a:	2100      	movs	r1, #0
 800396c:	2029      	movs	r0, #41	; 0x29
 800396e:	f000 f8c0 	bl	8003af2 <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 8003972:	2200      	movs	r2, #0
 8003974:	2100      	movs	r1, #0
 8003976:	2011      	movs	r0, #17
 8003978:	f000 f8bb 	bl	8003af2 <ST7789H2_WriteReg>
}
 800397c:	bf00      	nop
 800397e:	bd80      	pop	{r7, pc}

08003980 <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 8003986:	23fe      	movs	r3, #254	; 0xfe
 8003988:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 800398a:	1d3b      	adds	r3, r7, #4
 800398c:	2201      	movs	r2, #1
 800398e:	4619      	mov	r1, r3
 8003990:	20bd      	movs	r0, #189	; 0xbd
 8003992:	f000 f8ae 	bl	8003af2 <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8003996:	2200      	movs	r2, #0
 8003998:	2100      	movs	r1, #0
 800399a:	2010      	movs	r0, #16
 800399c:	f000 f8a9 	bl	8003af2 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 80039a0:	200a      	movs	r0, #10
 80039a2:	f000 fc52 	bl	800424a <LCD_IO_Delay>
}
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 80039ae:	b480      	push	{r7}
 80039b0:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 80039b2:	23f0      	movs	r3, #240	; 0xf0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 80039be:	b480      	push	{r7}
 80039c0:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 80039c2:	23f0      	movs	r3, #240	; 0xf0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80039d2:	f000 fc13 	bl	80041fc <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 80039d6:	2004      	movs	r0, #4
 80039d8:	f000 f8ad 	bl	8003b36 <ST7789H2_ReadReg>
 80039dc:	4603      	mov	r3, r0
 80039de:	b29b      	uxth	r3, r3
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	460a      	mov	r2, r1
 80039ee:	80fb      	strh	r3, [r7, #6]
 80039f0:	4613      	mov	r3, r2
 80039f2:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 80039f4:	2300      	movs	r3, #0
 80039f6:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 80039f8:	88fb      	ldrh	r3, [r7, #6]
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 80039fe:	2300      	movs	r3, #0
 8003a00:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 8003a02:	88fb      	ldrh	r3, [r7, #6]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	3b11      	subs	r3, #17
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8003a0c:	f107 030c 	add.w	r3, r7, #12
 8003a10:	2204      	movs	r2, #4
 8003a12:	4619      	mov	r1, r3
 8003a14:	202a      	movs	r0, #42	; 0x2a
 8003a16:	f000 f86c 	bl	8003af2 <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 8003a1e:	88bb      	ldrh	r3, [r7, #4]
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8003a24:	2300      	movs	r3, #0
 8003a26:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 8003a28:	88bb      	ldrh	r3, [r7, #4]
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	3b11      	subs	r3, #17
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8003a32:	f107 030c 	add.w	r3, r7, #12
 8003a36:	2204      	movs	r2, #4
 8003a38:	4619      	mov	r1, r3
 8003a3a:	202b      	movs	r0, #43	; 0x2b
 8003a3c:	f000 f859 	bl	8003af2 <ST7789H2_WriteReg>
}
 8003a40:	bf00      	nop
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	80fb      	strh	r3, [r7, #6]
 8003a52:	460b      	mov	r3, r1
 8003a54:	80bb      	strh	r3, [r7, #4]
 8003a56:	4613      	mov	r3, r2
 8003a58:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8003a5a:	88ba      	ldrh	r2, [r7, #4]
 8003a5c:	88fb      	ldrh	r3, [r7, #6]
 8003a5e:	4611      	mov	r1, r2
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff ffbf 	bl	80039e4 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8003a66:	2200      	movs	r2, #0
 8003a68:	2100      	movs	r1, #0
 8003a6a:	202c      	movs	r0, #44	; 0x2c
 8003a6c:	f000 f841 	bl	8003af2 <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 8003a70:	887b      	ldrh	r3, [r7, #2]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 fbc8 	bl	8004208 <LCD_IO_WriteData>
}
 8003a78:	bf00      	nop
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	460a      	mov	r2, r1
 8003a8a:	80fb      	strh	r3, [r7, #6]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8003a90:	88ba      	ldrh	r2, [r7, #4]
 8003a92:	88fb      	ldrh	r3, [r7, #6]
 8003a94:	4611      	mov	r1, r2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff ffa4 	bl	80039e4 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8003a9c:	88ba      	ldrh	r2, [r7, #4]
 8003a9e:	88fb      	ldrh	r3, [r7, #6]
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 f9bd 	bl	8003e22 <ST7789H2_ReadPixel_rgb888>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	461a      	mov	r2, r3
 8003aac:	733a      	strb	r2, [r7, #12]
 8003aae:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003ab2:	737a      	strb	r2, [r7, #13]
 8003ab4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003ab8:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8003aba:	7b3b      	ldrb	r3, [r7, #12]
 8003abc:	08db      	lsrs	r3, r3, #3
 8003abe:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8003ac0:	7b7b      	ldrb	r3, [r7, #13]
 8003ac2:	089b      	lsrs	r3, r3, #2
 8003ac4:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 8003ac6:	7bbb      	ldrb	r3, [r7, #14]
 8003ac8:	08db      	lsrs	r3, r3, #3
 8003aca:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8003acc:	7dfb      	ldrb	r3, [r7, #23]
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	02db      	lsls	r3, r3, #11
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	7dbb      	ldrb	r3, [r7, #22]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	015b      	lsls	r3, r3, #5
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	4413      	add	r3, r2
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	7d7b      	ldrb	r3, [r7, #21]
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8003ae8:	8a7b      	ldrh	r3, [r7, #18]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b084      	sub	sp, #16
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	4603      	mov	r3, r0
 8003afa:	6039      	str	r1, [r7, #0]
 8003afc:	71fb      	strb	r3, [r7, #7]
 8003afe:	4613      	mov	r3, r2
 8003b00:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 8003b02:	79fb      	ldrb	r3, [r7, #7]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 fb8c 	bl	8004222 <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	73fb      	strb	r3, [r7, #15]
 8003b0e:	e00a      	b.n	8003b26 <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	4413      	add	r3, r2
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fb74 	bl	8004208 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	3301      	adds	r3, #1
 8003b24:	73fb      	strb	r3, [r7, #15]
 8003b26:	7bfa      	ldrb	r2, [r7, #15]
 8003b28:	79bb      	ldrb	r3, [r7, #6]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d3f0      	bcc.n	8003b10 <ST7789H2_WriteReg+0x1e>
  }
}
 8003b2e:	bf00      	nop
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b082      	sub	sp, #8
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 8003b40:	79fb      	ldrb	r3, [r7, #7]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 fb6d 	bl	8004222 <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 8003b48:	f000 fb78 	bl	800423c <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 8003b4c:	f000 fb76 	bl	800423c <LCD_IO_ReadData>
 8003b50:	4603      	mov	r3, r0
 8003b52:	b2db      	uxtb	r3, r3
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003b5c:	b490      	push	{r4, r7}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4604      	mov	r4, r0
 8003b64:	4608      	mov	r0, r1
 8003b66:	4611      	mov	r1, r2
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4623      	mov	r3, r4
 8003b6c:	80fb      	strh	r3, [r7, #6]
 8003b6e:	4603      	mov	r3, r0
 8003b70:	80bb      	strh	r3, [r7, #4]
 8003b72:	460b      	mov	r3, r1
 8003b74:	807b      	strh	r3, [r7, #2]
 8003b76:	4613      	mov	r3, r2
 8003b78:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	2bef      	cmp	r3, #239	; 0xef
 8003b7e:	d803      	bhi.n	8003b88 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 8003b80:	4a1b      	ldr	r2, [pc, #108]	; (8003bf0 <ST7789H2_SetDisplayWindow+0x94>)
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	8013      	strh	r3, [r2, #0]
 8003b86:	e002      	b.n	8003b8e <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 8003b88:	4b19      	ldr	r3, [pc, #100]	; (8003bf0 <ST7789H2_SetDisplayWindow+0x94>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 8003b8e:	88bb      	ldrh	r3, [r7, #4]
 8003b90:	2bef      	cmp	r3, #239	; 0xef
 8003b92:	d803      	bhi.n	8003b9c <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 8003b94:	4a17      	ldr	r2, [pc, #92]	; (8003bf4 <ST7789H2_SetDisplayWindow+0x98>)
 8003b96:	88bb      	ldrh	r3, [r7, #4]
 8003b98:	8013      	strh	r3, [r2, #0]
 8003b9a:	e002      	b.n	8003ba2 <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8003b9c:	4b15      	ldr	r3, [pc, #84]	; (8003bf4 <ST7789H2_SetDisplayWindow+0x98>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 8003ba2:	887a      	ldrh	r2, [r7, #2]
 8003ba4:	88fb      	ldrh	r3, [r7, #6]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	2bf0      	cmp	r3, #240	; 0xf0
 8003baa:	dc08      	bgt.n	8003bbe <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8003bac:	887a      	ldrh	r2, [r7, #2]
 8003bae:	88fb      	ldrh	r3, [r7, #6]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	4b0f      	ldr	r3, [pc, #60]	; (8003bf8 <ST7789H2_SetDisplayWindow+0x9c>)
 8003bba:	801a      	strh	r2, [r3, #0]
 8003bbc:	e002      	b.n	8003bc4 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8003bbe:	4b0e      	ldr	r3, [pc, #56]	; (8003bf8 <ST7789H2_SetDisplayWindow+0x9c>)
 8003bc0:	22ef      	movs	r2, #239	; 0xef
 8003bc2:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 8003bc4:	883a      	ldrh	r2, [r7, #0]
 8003bc6:	88bb      	ldrh	r3, [r7, #4]
 8003bc8:	4413      	add	r3, r2
 8003bca:	2bf0      	cmp	r3, #240	; 0xf0
 8003bcc:	dc08      	bgt.n	8003be0 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8003bce:	883a      	ldrh	r2, [r7, #0]
 8003bd0:	88bb      	ldrh	r3, [r7, #4]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	4b08      	ldr	r3, [pc, #32]	; (8003bfc <ST7789H2_SetDisplayWindow+0xa0>)
 8003bdc:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 8003bde:	e002      	b.n	8003be6 <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8003be0:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <ST7789H2_SetDisplayWindow+0xa0>)
 8003be2:	22ef      	movs	r2, #239	; 0xef
 8003be4:	801a      	strh	r2, [r3, #0]
}
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc90      	pop	{r4, r7}
 8003bee:	4770      	bx	lr
 8003bf0:	20000178 	.word	0x20000178
 8003bf4:	2000017a 	.word	0x2000017a
 8003bf8:	20000078 	.word	0x20000078
 8003bfc:	2000007a 	.word	0x2000007a

08003c00 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003c00:	b590      	push	{r4, r7, lr}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4604      	mov	r4, r0
 8003c08:	4608      	mov	r0, r1
 8003c0a:	4611      	mov	r1, r2
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4623      	mov	r3, r4
 8003c10:	80fb      	strh	r3, [r7, #6]
 8003c12:	4603      	mov	r3, r0
 8003c14:	80bb      	strh	r3, [r7, #4]
 8003c16:	460b      	mov	r3, r1
 8003c18:	807b      	strh	r3, [r7, #2]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 8003c22:	887a      	ldrh	r2, [r7, #2]
 8003c24:	88bb      	ldrh	r3, [r7, #4]
 8003c26:	4611      	mov	r1, r2
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff fedb 	bl	80039e4 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2100      	movs	r1, #0
 8003c32:	202c      	movs	r0, #44	; 0x2c
 8003c34:	f7ff ff5d 	bl	8003af2 <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8003c38:	2300      	movs	r3, #0
 8003c3a:	81fb      	strh	r3, [r7, #14]
 8003c3c:	e006      	b.n	8003c4c <ST7789H2_DrawHLine+0x4c>
  {
    LCD_IO_WriteData(RGBCode);
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 fae1 	bl	8004208 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 8003c46:	89fb      	ldrh	r3, [r7, #14]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	81fb      	strh	r3, [r7, #14]
 8003c4c:	89fa      	ldrh	r2, [r7, #14]
 8003c4e:	883b      	ldrh	r3, [r7, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d3f4      	bcc.n	8003c3e <ST7789H2_DrawHLine+0x3e>
  }  
}
 8003c54:	bf00      	nop
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd90      	pop	{r4, r7, pc}

08003c5c <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003c5c:	b590      	push	{r4, r7, lr}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4604      	mov	r4, r0
 8003c64:	4608      	mov	r0, r1
 8003c66:	4611      	mov	r1, r2
 8003c68:	461a      	mov	r2, r3
 8003c6a:	4623      	mov	r3, r4
 8003c6c:	80fb      	strh	r3, [r7, #6]
 8003c6e:	4603      	mov	r3, r0
 8003c70:	80bb      	strh	r3, [r7, #4]
 8003c72:	460b      	mov	r3, r1
 8003c74:	807b      	strh	r3, [r7, #2]
 8003c76:	4613      	mov	r3, r2
 8003c78:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8003c7e:	887a      	ldrh	r2, [r7, #2]
 8003c80:	88bb      	ldrh	r3, [r7, #4]
 8003c82:	4611      	mov	r1, r2
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7ff fead 	bl	80039e4 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	202c      	movs	r0, #44	; 0x2c
 8003c90:	f7ff ff2f 	bl	8003af2 <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8003c94:	2300      	movs	r3, #0
 8003c96:	81fb      	strh	r3, [r7, #14]
 8003c98:	e00b      	b.n	8003cb2 <ST7789H2_DrawVLine+0x56>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8003c9a:	887a      	ldrh	r2, [r7, #2]
 8003c9c:	89fb      	ldrh	r3, [r7, #14]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	b299      	uxth	r1, r3
 8003ca2:	88fa      	ldrh	r2, [r7, #6]
 8003ca4:	88bb      	ldrh	r3, [r7, #4]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff fece 	bl	8003a48 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8003cac:	89fb      	ldrh	r3, [r7, #14]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	81fb      	strh	r3, [r7, #14]
 8003cb2:	89fa      	ldrh	r2, [r7, #14]
 8003cb4:	883b      	ldrh	r3, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d3ef      	bcc.n	8003c9a <ST7789H2_DrawVLine+0x3e>
  }
}
 8003cba:	bf00      	nop
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd90      	pop	{r4, r7, pc}
	...

08003cc4 <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b088      	sub	sp, #32
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	603a      	str	r2, [r7, #0]
 8003cce:	80fb      	strh	r3, [r7, #6]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	2300      	movs	r3, #0
 8003cda:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8003ce0:	4b2f      	ldr	r3, [pc, #188]	; (8003da0 <ST7789H2_DrawBitmap+0xdc>)
 8003ce2:	881a      	ldrh	r2, [r3, #0]
 8003ce4:	4b2f      	ldr	r3, [pc, #188]	; (8003da4 <ST7789H2_DrawBitmap+0xe0>)
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3301      	adds	r3, #1
 8003cee:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8003cf0:	4b2d      	ldr	r3, [pc, #180]	; (8003da8 <ST7789H2_DrawBitmap+0xe4>)
 8003cf2:	881a      	ldrh	r2, [r3, #0]
 8003cf4:	4b2d      	ldr	r3, [pc, #180]	; (8003dac <ST7789H2_DrawBitmap+0xe8>)
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	3302      	adds	r3, #2
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	041b      	lsls	r3, r3, #16
 8003d14:	461a      	mov	r2, r3
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	330a      	adds	r3, #10
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	330c      	adds	r3, #12
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	041b      	lsls	r3, r3, #16
 8003d30:	461a      	mov	r2, r3
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	085b      	lsrs	r3, r3, #1
 8003d40:	613b      	str	r3, [r7, #16]
  pbmp += index;
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	4413      	add	r3, r2
 8003d48:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8003d4a:	88ba      	ldrh	r2, [r7, #4]
 8003d4c:	89bb      	ldrh	r3, [r7, #12]
 8003d4e:	4413      	add	r3, r2
 8003d50:	61fb      	str	r3, [r7, #28]
 8003d52:	e01d      	b.n	8003d90 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	88fb      	ldrh	r3, [r7, #6]
 8003d5e:	4611      	mov	r1, r2
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff fe3f 	bl	80039e4 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b299      	uxth	r1, r3
 8003d6e:	89fb      	ldrh	r3, [r7, #14]
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	fb02 f303 	mul.w	r3, r2, r3
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	89fa      	ldrh	r2, [r7, #14]
 8003d7e:	88f8      	ldrh	r0, [r7, #6]
 8003d80:	f000 f898 	bl	8003eb4 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	3301      	adds	r3, #1
 8003d88:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	61fb      	str	r3, [r7, #28]
 8003d90:	88bb      	ldrh	r3, [r7, #4]
 8003d92:	69fa      	ldr	r2, [r7, #28]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d8dd      	bhi.n	8003d54 <ST7789H2_DrawBitmap+0x90>
  }
}
 8003d98:	bf00      	nop
 8003d9a:	3720      	adds	r7, #32
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	20000078 	.word	0x20000078
 8003da4:	20000178 	.word	0x20000178
 8003da8:	2000007a 	.word	0x2000007a
 8003dac:	2000017a 	.word	0x2000017a

08003db0 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8003db0:	b590      	push	{r4, r7, lr}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	4604      	mov	r4, r0
 8003db8:	4608      	mov	r0, r1
 8003dba:	4611      	mov	r1, r2
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4623      	mov	r3, r4
 8003dc0:	80fb      	strh	r3, [r7, #6]
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	80bb      	strh	r3, [r7, #4]
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	807b      	strh	r3, [r7, #2]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8003dd2:	88bb      	ldrh	r3, [r7, #4]
 8003dd4:	60fb      	str	r3, [r7, #12]
 8003dd6:	e019      	b.n	8003e0c <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	88fb      	ldrh	r3, [r7, #6]
 8003dde:	4611      	mov	r1, r2
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff fdff 	bl	80039e4 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	b299      	uxth	r1, r3
 8003dea:	887b      	ldrh	r3, [r7, #2]
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	fb02 f303 	mul.w	r3, r2, r3
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	6a3a      	ldr	r2, [r7, #32]
 8003df6:	4413      	add	r3, r2
 8003df8:	887a      	ldrh	r2, [r7, #2]
 8003dfa:	88f8      	ldrh	r0, [r7, #6]
 8003dfc:	f000 f85a 	bl	8003eb4 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	3301      	adds	r3, #1
 8003e04:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	88ba      	ldrh	r2, [r7, #4]
 8003e0e:	883b      	ldrh	r3, [r7, #0]
 8003e10:	4413      	add	r3, r2
 8003e12:	461a      	mov	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d3de      	bcc.n	8003dd8 <ST7789H2_DrawRGBImage+0x28>
  }
}
 8003e1a:	bf00      	nop
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd90      	pop	{r4, r7, pc}

08003e22 <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b086      	sub	sp, #24
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	4603      	mov	r3, r0
 8003e2a:	460a      	mov	r2, r1
 8003e2c:	80fb      	strh	r3, [r7, #6]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8003e32:	88ba      	ldrh	r2, [r7, #4]
 8003e34:	88fb      	ldrh	r3, [r7, #6]
 8003e36:	4611      	mov	r1, r2
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff fdd3 	bl	80039e4 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2100      	movs	r1, #0
 8003e42:	202e      	movs	r0, #46	; 0x2e
 8003e44:	f7ff fe55 	bl	8003af2 <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 8003e48:	f000 f9f8 	bl	800423c <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 8003e4c:	f000 f9f6 	bl	800423c <LCD_IO_ReadData>
 8003e50:	4603      	mov	r3, r0
 8003e52:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 8003e54:	f000 f9f2 	bl	800423c <LCD_IO_ReadData>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 8003e5c:	8afb      	ldrh	r3, [r7, #22]
 8003e5e:	121b      	asrs	r3, r3, #8
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	f023 0303 	bic.w	r3, r3, #3
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 8003e6a:	8afb      	ldrh	r3, [r7, #22]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	f023 0303 	bic.w	r3, r3, #3
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 8003e76:	8abb      	ldrh	r3, [r7, #20]
 8003e78:	121b      	asrs	r3, r3, #8
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	f023 0303 	bic.w	r3, r3, #3
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 8003e84:	f107 0310 	add.w	r3, r7, #16
 8003e88:	f107 020c 	add.w	r2, r7, #12
 8003e8c:	6812      	ldr	r2, [r2, #0]
 8003e8e:	4611      	mov	r1, r2
 8003e90:	8019      	strh	r1, [r3, #0]
 8003e92:	3302      	adds	r3, #2
 8003e94:	0c12      	lsrs	r2, r2, #16
 8003e96:	701a      	strb	r2, [r3, #0]
 8003e98:	2300      	movs	r3, #0
 8003e9a:	7c3a      	ldrb	r2, [r7, #16]
 8003e9c:	f362 0307 	bfi	r3, r2, #0, #8
 8003ea0:	7c7a      	ldrb	r2, [r7, #17]
 8003ea2:	f362 230f 	bfi	r3, r2, #8, #8
 8003ea6:	7cba      	ldrb	r2, [r7, #18]
 8003ea8:	f362 4317 	bfi	r3, r2, #16, #8
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b088      	sub	sp, #32
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	607b      	str	r3, [r7, #4]
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	81fb      	strh	r3, [r7, #14]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	81bb      	strh	r3, [r7, #12]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	202c      	movs	r0, #44	; 0x2c
 8003ed6:	f7ff fe0c 	bl	8003af2 <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8003eda:	89fb      	ldrh	r3, [r7, #14]
 8003edc:	61bb      	str	r3, [r7, #24]
 8003ede:	e02a      	b.n	8003f36 <ST7789H2_DrawRGBHLine+0x82>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8003ee0:	4b1a      	ldr	r3, [pc, #104]	; (8003f4c <ST7789H2_DrawRGBHLine+0x98>)
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d321      	bcc.n	8003f30 <ST7789H2_DrawRGBHLine+0x7c>
 8003eec:	4b18      	ldr	r3, [pc, #96]	; (8003f50 <ST7789H2_DrawRGBHLine+0x9c>)
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	89ba      	ldrh	r2, [r7, #12]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d31c      	bcc.n	8003f30 <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8003ef6:	4b17      	ldr	r3, [pc, #92]	; (8003f54 <ST7789H2_DrawRGBHLine+0xa0>)
 8003ef8:	881b      	ldrh	r3, [r3, #0]
 8003efa:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d816      	bhi.n	8003f30 <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8003f02:	4b15      	ldr	r3, [pc, #84]	; (8003f58 <ST7789H2_DrawRGBHLine+0xa4>)
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	89ba      	ldrh	r2, [r7, #12]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d811      	bhi.n	8003f30 <ST7789H2_DrawRGBHLine+0x7c>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8003f0c:	897a      	ldrh	r2, [r7, #10]
 8003f0e:	89fb      	ldrh	r3, [r7, #14]
 8003f10:	4413      	add	r3, r2
 8003f12:	461a      	mov	r2, r3
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d007      	beq.n	8003f2a <ST7789H2_DrawRGBHLine+0x76>
      {
        LCD_IO_WriteData(rgb565[i]);        
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4413      	add	r3, r2
 8003f22:	881b      	ldrh	r3, [r3, #0]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 f96f 	bl	8004208 <LCD_IO_WriteData>
      }      
      i++;
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	3301      	adds	r3, #1
 8003f34:	61bb      	str	r3, [r7, #24]
 8003f36:	897a      	ldrh	r2, [r7, #10]
 8003f38:	89fb      	ldrh	r3, [r7, #14]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d3cd      	bcc.n	8003ee0 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 8003f44:	bf00      	nop
 8003f46:	3720      	adds	r7, #32
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	20000178 	.word	0x20000178
 8003f50:	2000017a 	.word	0x2000017a
 8003f54:	20000078 	.word	0x20000078
 8003f58:	2000007a 	.word	0x2000007a

08003f5c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	4603      	mov	r3, r0
 8003f64:	460a      	mov	r2, r1
 8003f66:	71fb      	strb	r3, [r7, #7]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  WAKEUP_BUTTON_GPIO_CLK_ENABLE();
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60bb      	str	r3, [r7, #8]
 8003f70:	4b22      	ldr	r3, [pc, #136]	; (8003ffc <BSP_PB_Init+0xa0>)
 8003f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f74:	4a21      	ldr	r2, [pc, #132]	; (8003ffc <BSP_PB_Init+0xa0>)
 8003f76:	f043 0301 	orr.w	r3, r3, #1
 8003f7a:	6313      	str	r3, [r2, #48]	; 0x30
 8003f7c:	4b1f      	ldr	r3, [pc, #124]	; (8003ffc <BSP_PB_Init+0xa0>)
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	60bb      	str	r3, [r7, #8]
 8003f86:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8003f88:	79bb      	ldrb	r3, [r7, #6]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d111      	bne.n	8003fb2 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8003f8e:	2301      	movs	r3, #1
 8003f90:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8003f92:	2300      	movs	r3, #0
 8003f94:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8003f96:	2302      	movs	r3, #2
 8003f98:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003f9e:	79fb      	ldrb	r3, [r7, #7]
 8003fa0:	4a17      	ldr	r2, [pc, #92]	; (8004000 <BSP_PB_Init+0xa4>)
 8003fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa6:	f107 020c 	add.w	r2, r7, #12
 8003faa:	4611      	mov	r1, r2
 8003fac:	4618      	mov	r0, r3
 8003fae:	f001 ff4b 	bl	8005e48 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8003fb2:	79bb      	ldrb	r3, [r7, #6]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d11d      	bne.n	8003ff4 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8003fb8:	2301      	movs	r3, #1
 8003fba:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8003fc4:	4b0f      	ldr	r3, [pc, #60]	; (8004004 <BSP_PB_Init+0xa8>)
 8003fc6:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003fc8:	79fb      	ldrb	r3, [r7, #7]
 8003fca:	4a0d      	ldr	r2, [pc, #52]	; (8004000 <BSP_PB_Init+0xa4>)
 8003fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd0:	f107 020c 	add.w	r2, r7, #12
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f001 ff36 	bl	8005e48 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8003fdc:	2306      	movs	r3, #6
 8003fde:	b25b      	sxtb	r3, r3
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	210f      	movs	r1, #15
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f001 fa4d 	bl	8005484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8003fea:	2306      	movs	r3, #6
 8003fec:	b25b      	sxtb	r3, r3
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f001 fa64 	bl	80054bc <HAL_NVIC_EnableIRQ>
  }
}
 8003ff4:	bf00      	nop
 8003ff6:	3720      	adds	r7, #32
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40023800 	.word	0x40023800
 8004000:	2000007c 	.word	0x2000007c
 8004004:	10110000 	.word	0x10110000

08004008 <FMC_BANK3_MspInit>:
/*************************** FMC Routines ************************************/
/**
  * @brief  Initializes FMC_BANK3 MSP.
  */
static void FMC_BANK3_MspInit(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08a      	sub	sp, #40	; 0x28
 800400c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
    
  /* Enable FSMC clock */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800400e:	2300      	movs	r3, #0
 8004010:	613b      	str	r3, [r7, #16]
 8004012:	4b3a      	ldr	r3, [pc, #232]	; (80040fc <FMC_BANK3_MspInit+0xf4>)
 8004014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004016:	4a39      	ldr	r2, [pc, #228]	; (80040fc <FMC_BANK3_MspInit+0xf4>)
 8004018:	f043 0301 	orr.w	r3, r3, #1
 800401c:	6393      	str	r3, [r2, #56]	; 0x38
 800401e:	4b37      	ldr	r3, [pc, #220]	; (80040fc <FMC_BANK3_MspInit+0xf4>)
 8004020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	613b      	str	r3, [r7, #16]
 8004028:	693b      	ldr	r3, [r7, #16]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	4b33      	ldr	r3, [pc, #204]	; (80040fc <FMC_BANK3_MspInit+0xf4>)
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	4a32      	ldr	r2, [pc, #200]	; (80040fc <FMC_BANK3_MspInit+0xf4>)
 8004034:	f043 0308 	orr.w	r3, r3, #8
 8004038:	6313      	str	r3, [r2, #48]	; 0x30
 800403a:	4b30      	ldr	r3, [pc, #192]	; (80040fc <FMC_BANK3_MspInit+0xf4>)
 800403c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004046:	2300      	movs	r3, #0
 8004048:	60bb      	str	r3, [r7, #8]
 800404a:	4b2c      	ldr	r3, [pc, #176]	; (80040fc <FMC_BANK3_MspInit+0xf4>)
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	4a2b      	ldr	r2, [pc, #172]	; (80040fc <FMC_BANK3_MspInit+0xf4>)
 8004050:	f043 0310 	orr.w	r3, r3, #16
 8004054:	6313      	str	r3, [r2, #48]	; 0x30
 8004056:	4b29      	ldr	r3, [pc, #164]	; (80040fc <FMC_BANK3_MspInit+0xf4>)
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	f003 0310 	and.w	r3, r3, #16
 800405e:	60bb      	str	r3, [r7, #8]
 8004060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004062:	2300      	movs	r3, #0
 8004064:	607b      	str	r3, [r7, #4]
 8004066:	4b25      	ldr	r3, [pc, #148]	; (80040fc <FMC_BANK3_MspInit+0xf4>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	4a24      	ldr	r2, [pc, #144]	; (80040fc <FMC_BANK3_MspInit+0xf4>)
 800406c:	f043 0320 	orr.w	r3, r3, #32
 8004070:	6313      	str	r3, [r2, #48]	; 0x30
 8004072:	4b22      	ldr	r3, [pc, #136]	; (80040fc <FMC_BANK3_MspInit+0xf4>)
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	f003 0320 	and.w	r3, r3, #32
 800407a:	607b      	str	r3, [r7, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800407e:	2300      	movs	r3, #0
 8004080:	603b      	str	r3, [r7, #0]
 8004082:	4b1e      	ldr	r3, [pc, #120]	; (80040fc <FMC_BANK3_MspInit+0xf4>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	4a1d      	ldr	r2, [pc, #116]	; (80040fc <FMC_BANK3_MspInit+0xf4>)
 8004088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800408c:	6313      	str	r3, [r2, #48]	; 0x30
 800408e:	4b1b      	ldr	r3, [pc, #108]	; (80040fc <FMC_BANK3_MspInit+0xf4>)
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	683b      	ldr	r3, [r7, #0]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800409a:	2302      	movs	r3, #2
 800409c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800409e:	2301      	movs	r3, #1
 80040a0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a2:	2303      	movs	r3, #3
 80040a4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 80040a6:	230c      	movs	r3, #12
 80040a8:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* GPIOD configuration: GPIO_PIN_7 is  FMC_NE1 , GPIO_PIN_11 ans GPIO_PIN_12 are PSRAM_A16 and PSRAM_A17 */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 80040aa:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 80040ae:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7|\
                              GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80040b0:	f107 0314 	add.w	r3, r7, #20
 80040b4:	4619      	mov	r1, r3
 80040b6:	4812      	ldr	r0, [pc, #72]	; (8004100 <FMC_BANK3_MspInit+0xf8>)
 80040b8:	f001 fec6 	bl	8005e48 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 80040bc:	f64f 7380 	movw	r3, #65408	; 0xff80
 80040c0:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_12 |GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80040c2:	f107 0314 	add.w	r3, r7, #20
 80040c6:	4619      	mov	r1, r3
 80040c8:	480e      	ldr	r0, [pc, #56]	; (8004104 <FMC_BANK3_MspInit+0xfc>)
 80040ca:	f001 febd 	bl	8005e48 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80040ce:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80040d2:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15; 
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80040d4:	f107 0314 	add.w	r3, r7, #20
 80040d8:	4619      	mov	r1, r3
 80040da:	480b      	ldr	r0, [pc, #44]	; (8004108 <FMC_BANK3_MspInit+0x100>)
 80040dc:	f001 feb4 	bl	8005e48 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80040e0:	f240 433f 	movw	r3, #1087	; 0x43f
 80040e4:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_10 ; 
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80040e6:	f107 0314 	add.w	r3, r7, #20
 80040ea:	4619      	mov	r1, r3
 80040ec:	4807      	ldr	r0, [pc, #28]	; (800410c <FMC_BANK3_MspInit+0x104>)
 80040ee:	f001 feab 	bl	8005e48 <HAL_GPIO_Init>
}
 80040f2:	bf00      	nop
 80040f4:	3728      	adds	r7, #40	; 0x28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40023800 	.word	0x40023800
 8004100:	40020c00 	.word	0x40020c00
 8004104:	40021000 	.word	0x40021000
 8004108:	40021400 	.word	0x40021400
 800410c:	40021800 	.word	0x40021800

08004110 <FMC_BANK3_Init>:

/**
  * @brief  Initializes LCD IOs.
  */ 
static void FMC_BANK3_Init(void) 
{  
 8004110:	b580      	push	{r7, lr}
 8004112:	b09c      	sub	sp, #112	; 0x70
 8004114:	af00      	add	r7, sp, #0
  SRAM_HandleTypeDef hsram;
  FSMC_NORSRAM_TimingTypeDef sram_timing;

  /* Initialize the SRAM controller */
  FMC_BANK3_MspInit();
 8004116:	f7ff ff77 	bl	8004008 <FMC_BANK3_MspInit>
  
  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FSMC_NORSRAM_DEVICE;
 800411a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800411e:	623b      	str	r3, [r7, #32]
  hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
 8004120:	4b1e      	ldr	r3, [pc, #120]	; (800419c <FMC_BANK3_Init+0x8c>)
 8004122:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Timing config */
  sram_timing.AddressSetupTime      = 3;
 8004124:	2303      	movs	r3, #3
 8004126:	607b      	str	r3, [r7, #4]
  sram_timing.AddressHoldTime       = 1;
 8004128:	2301      	movs	r3, #1
 800412a:	60bb      	str	r3, [r7, #8]
  sram_timing.DataSetupTime         = 4;
 800412c:	2304      	movs	r3, #4
 800412e:	60fb      	str	r3, [r7, #12]
  sram_timing.BusTurnAroundDuration = 1;
 8004130:	2301      	movs	r3, #1
 8004132:	613b      	str	r3, [r7, #16]
  sram_timing.CLKDivision           = 2;
 8004134:	2302      	movs	r3, #2
 8004136:	617b      	str	r3, [r7, #20]
  sram_timing.DataLatency           = 2;
 8004138:	2302      	movs	r3, #2
 800413a:	61bb      	str	r3, [r7, #24]
  sram_timing.AccessMode            = FSMC_ACCESS_MODE_A;
 800413c:	2300      	movs	r3, #0
 800413e:	61fb      	str	r3, [r7, #28]
      
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK3;
 8004140:	2304      	movs	r3, #4
 8004142:	62bb      	str	r3, [r7, #40]	; 0x28
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8004144:	2300      	movs	r3, #0
 8004146:	62fb      	str	r3, [r7, #44]	; 0x2c
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 8004148:	2300      	movs	r3, #0
 800414a:	633b      	str	r3, [r7, #48]	; 0x30
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800414c:	2310      	movs	r3, #16
 800414e:	637b      	str	r3, [r7, #52]	; 0x34
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 8004150:	2300      	movs	r3, #0
 8004152:	63bb      	str	r3, [r7, #56]	; 0x38
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8004154:	2300      	movs	r3, #0
 8004156:	63fb      	str	r3, [r7, #60]	; 0x3c
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 8004158:	2300      	movs	r3, #0
 800415a:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 800415c:	2300      	movs	r3, #0
 800415e:	647b      	str	r3, [r7, #68]	; 0x44
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 8004160:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004164:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 8004166:	2300      	movs	r3, #0
 8004168:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_ENABLE;
 800416a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800416e:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8004170:	2300      	movs	r3, #0
 8004172:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 8004174:	2300      	movs	r3, #0
 8004176:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 8004178:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800417c:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 800417e:	2300      	movs	r3, #0
 8004180:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.ContinuousClock    = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8004182:	2300      	movs	r3, #0
 8004184:	65fb      	str	r3, [r7, #92]	; 0x5c

  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 8004186:	1d3a      	adds	r2, r7, #4
 8004188:	1d39      	adds	r1, r7, #4
 800418a:	f107 0320 	add.w	r3, r7, #32
 800418e:	4618      	mov	r0, r3
 8004190:	f006 fd7e 	bl	800ac90 <HAL_SRAM_Init>
}
 8004194:	bf00      	nop
 8004196:	3770      	adds	r7, #112	; 0x70
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	a0000104 	.word	0xa0000104

080041a0 <FMC_BANK3_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written 
  */
static void FMC_BANK3_WriteData(uint16_t Data) 
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3->RAM = Data;
 80041aa:	f04f 42d0 	mov.w	r2, #1744830464	; 0x68000000
 80041ae:	88fb      	ldrh	r3, [r7, #6]
 80041b0:	8053      	strh	r3, [r2, #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80041b2:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <FMC_BANK3_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
static void FMC_BANK3_WriteReg(uint8_t Reg) 
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	4603      	mov	r3, r0
 80041ca:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK3->REG = Reg;
 80041cc:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80041d0:	79fa      	ldrb	r2, [r7, #7]
 80041d2:	b292      	uxth	r2, r2
 80041d4:	801a      	strh	r2, [r3, #0]
 80041d6:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <FMC_BANK3_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
static uint16_t FMC_BANK3_ReadData(void) 
{
 80041e6:	b480      	push	{r7}
 80041e8:	af00      	add	r7, sp, #0
  return FMC_BANK3->RAM;
 80041ea:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80041ee:	885b      	ldrh	r3, [r3, #2]
 80041f0:	b29b      	uxth	r3, r3
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <LCD_IO_Init>:
/********************************* LINK LCD ***********************************/
/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  FMC_BANK3_Init();
 8004200:	f7ff ff86 	bl	8004110 <FMC_BANK3_Init>
}
 8004204:	bf00      	nop
 8004206:	bd80      	pop	{r7, pc}

08004208 <LCD_IO_WriteData>:
/**
  * @brief  Writes data on LCD data register.
  * @param  RegValue: Data to be written
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	4603      	mov	r3, r0
 8004210:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3_WriteData(RegValue);
 8004212:	88fb      	ldrh	r3, [r7, #6]
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff ffc3 	bl	80041a0 <FMC_BANK3_WriteData>
}
 800421a:	bf00      	nop
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <LCD_IO_WriteReg>:
/**
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b082      	sub	sp, #8
 8004226:	af00      	add	r7, sp, #0
 8004228:	4603      	mov	r3, r0
 800422a:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK3_WriteReg(Reg);
 800422c:	79fb      	ldrb	r3, [r7, #7]
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff ffc7 	bl	80041c2 <FMC_BANK3_WriteReg>
}
 8004234:	bf00      	nop
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <LCD_IO_ReadData>:
/**
  * @brief  Reads data from LCD data register.
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  return FMC_BANK3_ReadData();
 8004240:	f7ff ffd1 	bl	80041e6 <FMC_BANK3_ReadData>
 8004244:	4603      	mov	r3, r0
}
 8004246:	4618      	mov	r0, r3
 8004248:	bd80      	pop	{r7, pc}

0800424a <LCD_IO_Delay>:
/**
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  */
void LCD_IO_Delay(uint32_t Delay)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b082      	sub	sp, #8
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fdca 	bl	8004dec <HAL_Delay>
}
 8004258:	bf00      	nop
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in STM32F413H_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8004268:	f000 f80e 	bl	8004288 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 800426c:	bf00      	nop
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  BSP_AUDIO_OUT_Error_CallBack();
 800427c:	f000 f80b 	bl	8004296 <BSP_AUDIO_OUT_Error_CallBack>
}
 8004280:	bf00      	nop
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
}
 800428c:	bf00      	nop
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8004296:	b480      	push	{r7}
 8004298:	af00      	add	r7, sp, #0
}
 800429a:	bf00      	nop
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Reception complete callback.
  * @param  hi2s : I2S handle.
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 80042ac:	f000 f804 	bl	80042b8 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80042b0:	bf00      	nop
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 80042bc:	bf00      	nop
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	af00      	add	r7, sp, #0
 return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 80042ca:	2001      	movs	r0, #1
 80042cc:	f000 f804 	bl	80042d8 <BSP_LCD_InitEx>
 80042d0:	4603      	mov	r3, r0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <BSP_LCD_InitEx>:
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  *         or LCD_ORIENTATION_LANDSCAPE_ROT180
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{ 
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	73fb      	strb	r3, [r7, #15]

  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 80042e4:	4b2c      	ldr	r3, [pc, #176]	; (8004398 <BSP_LCD_InitEx+0xc0>)
 80042e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042ea:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 80042ec:	4b2a      	ldr	r3, [pc, #168]	; (8004398 <BSP_LCD_InitEx+0xc0>)
 80042ee:	4a2b      	ldr	r2, [pc, #172]	; (800439c <BSP_LCD_InitEx+0xc4>)
 80042f0:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 80042f2:	4b29      	ldr	r3, [pc, #164]	; (8004398 <BSP_LCD_InitEx+0xc0>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]
  
  /* Initialize LCD special pins GPIOs */
  BSP_LCD_MspInit();
 80042f8:	f000 fa48 	bl	800478c <BSP_LCD_MspInit>
  
  /* Backlight control signal assertion */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80042fc:	2201      	movs	r2, #1
 80042fe:	2120      	movs	r1, #32
 8004300:	4827      	ldr	r0, [pc, #156]	; (80043a0 <BSP_LCD_InitEx+0xc8>)
 8004302:	f001 ff4b 	bl	800619c <HAL_GPIO_WritePin>
  
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8004306:	2200      	movs	r2, #0
 8004308:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800430c:	4825      	ldr	r0, [pc, #148]	; (80043a4 <BSP_LCD_InitEx+0xcc>)
 800430e:	f001 ff45 	bl	800619c <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 8004312:	2005      	movs	r0, #5
 8004314:	f000 fd6a 	bl	8004dec <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8004318:	2201      	movs	r2, #1
 800431a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800431e:	4821      	ldr	r0, [pc, #132]	; (80043a4 <BSP_LCD_InitEx+0xcc>)
 8004320:	f001 ff3c 	bl	800619c <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8004324:	200a      	movs	r0, #10
 8004326:	f000 fd61 	bl	8004dec <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 800432a:	2200      	movs	r2, #0
 800432c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004330:	481c      	ldr	r0, [pc, #112]	; (80043a4 <BSP_LCD_InitEx+0xcc>)
 8004332:	f001 ff33 	bl	800619c <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 8004336:	2014      	movs	r0, #20
 8004338:	f000 fd58 	bl	8004dec <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 800433c:	2201      	movs	r2, #1
 800433e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004342:	4818      	ldr	r0, [pc, #96]	; (80043a4 <BSP_LCD_InitEx+0xcc>)
 8004344:	f001 ff2a 	bl	800619c <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8004348:	200a      	movs	r0, #10
 800434a:	f000 fd4f 	bl	8004dec <HAL_Delay>
  
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 800434e:	4b16      	ldr	r3, [pc, #88]	; (80043a8 <BSP_LCD_InitEx+0xd0>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	4798      	blx	r3
 8004354:	4603      	mov	r3, r0
 8004356:	2b85      	cmp	r3, #133	; 0x85
 8004358:	d118      	bne.n	800438c <BSP_LCD_InitEx+0xb4>
  {    
    LcdDrv = &ST7789H2_drv;
 800435a:	4b14      	ldr	r3, [pc, #80]	; (80043ac <BSP_LCD_InitEx+0xd4>)
 800435c:	4a12      	ldr	r2, [pc, #72]	; (80043a8 <BSP_LCD_InitEx+0xd0>)
 800435e:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 8004360:	4b12      	ldr	r3, [pc, #72]	; (80043ac <BSP_LCD_InitEx+0xd4>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4798      	blx	r3
    
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d103      	bne.n	8004376 <BSP_LCD_InitEx+0x9e>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT); 
 800436e:	2000      	movs	r0, #0
 8004370:	f7ff fabd 	bl	80038ee <ST7789H2_SetOrientation>
 8004374:	e005      	b.n	8004382 <BSP_LCD_InitEx+0xaa>
    }
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b02      	cmp	r3, #2
 800437a:	d102      	bne.n	8004382 <BSP_LCD_InitEx+0xaa>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_LANDSCAPE_ROT180);
 800437c:	2002      	movs	r0, #2
 800437e:	f7ff fab6 	bl	80038ee <ST7789H2_SetOrientation>
    else
    {
      /* Default landscape orientation is selected */
    }
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8004382:	480b      	ldr	r0, [pc, #44]	; (80043b0 <BSP_LCD_InitEx+0xd8>)
 8004384:	f000 f84e 	bl	8004424 <BSP_LCD_SetFont>
    
    ret = LCD_OK;   
 8004388:	2300      	movs	r3, #0
 800438a:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800438c:	7bfb      	ldrb	r3, [r7, #15]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	2003dd00 	.word	0x2003dd00
 800439c:	20000080 	.word	0x20000080
 80043a0:	40021000 	.word	0x40021000
 80043a4:	40020400 	.word	0x40020400
 80043a8:	20000040 	.word	0x20000040
 80043ac:	2000017c 	.word	0x2000017c
 80043b0:	20000090 	.word	0x20000090

080043b4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size. 
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelWidth());
 80043b8:	4b03      	ldr	r3, [pc, #12]	; (80043c8 <BSP_LCD_GetXSize+0x14>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043be:	4798      	blx	r3
 80043c0:	4603      	mov	r3, r0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	2000017c 	.word	0x2000017c

080043cc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size. 
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelHeight());
 80043d0:	4b03      	ldr	r3, [pc, #12]	; (80043e0 <BSP_LCD_GetYSize+0x14>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d6:	4798      	blx	r3
 80043d8:	4603      	mov	r3, r0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	2000017c 	.word	0x2000017c

080043e4 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	4603      	mov	r3, r0
 80043ec:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 80043ee:	88fb      	ldrh	r3, [r7, #6]
 80043f0:	4a03      	ldr	r2, [pc, #12]	; (8004400 <BSP_LCD_SetTextColor+0x1c>)
 80043f2:	6013      	str	r3, [r2, #0]
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	2003dd00 	.word	0x2003dd00

08004404 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	4603      	mov	r3, r0
 800440c:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 800440e:	88fb      	ldrh	r3, [r7, #6]
 8004410:	4a03      	ldr	r2, [pc, #12]	; (8004420 <BSP_LCD_SetBackColor+0x1c>)
 8004412:	6053      	str	r3, [r2, #4]
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	2003dd00 	.word	0x2003dd00

08004424 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 800442c:	4a04      	ldr	r2, [pc, #16]	; (8004440 <BSP_LCD_SetFont+0x1c>)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6093      	str	r3, [r2, #8]
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	2003dd00 	.word	0x2003dd00

08004444 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 8004444:	b590      	push	{r4, r7, lr}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
 800444a:	4603      	mov	r3, r0
 800444c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800444e:	2300      	movs	r3, #0
 8004450:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 8004452:	2300      	movs	r3, #0
 8004454:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor; 
 8004456:	4b15      	ldr	r3, [pc, #84]	; (80044ac <BSP_LCD_Clear+0x68>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 800445c:	88fb      	ldrh	r3, [r7, #6]
 800445e:	4a13      	ldr	r2, [pc, #76]	; (80044ac <BSP_LCD_Clear+0x68>)
 8004460:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 8004462:	f7ff ffb3 	bl	80043cc <BSP_LCD_GetYSize>
 8004466:	6138      	str	r0, [r7, #16]
  
  for(counter = 0; counter < y_size; counter++)
 8004468:	2300      	movs	r3, #0
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	e00d      	b.n	800448a <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	b29c      	uxth	r4, r3
 8004472:	f7ff ff9f 	bl	80043b4 <BSP_LCD_GetXSize>
 8004476:	4603      	mov	r3, r0
 8004478:	b29b      	uxth	r3, r3
 800447a:	461a      	mov	r2, r3
 800447c:	4621      	mov	r1, r4
 800447e:	2000      	movs	r0, #0
 8004480:	f000 f8ee 	bl	8004660 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < y_size; counter++)
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	3301      	adds	r3, #1
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	429a      	cmp	r2, r3
 8004490:	d3ed      	bcc.n	800446e <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup; 
 8004492:	4a06      	ldr	r2, [pc, #24]	; (80044ac <BSP_LCD_Clear+0x68>)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8004498:	4b04      	ldr	r3, [pc, #16]	; (80044ac <BSP_LCD_Clear+0x68>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	b29b      	uxth	r3, r3
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff ffa0 	bl	80043e4 <BSP_LCD_SetTextColor>
}
 80044a4:	bf00      	nop
 80044a6:	371c      	adds	r7, #28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd90      	pop	{r4, r7, pc}
 80044ac:	2003dd00 	.word	0x2003dd00

080044b0 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	4603      	mov	r3, r0
 80044b8:	80fb      	strh	r3, [r7, #6]
 80044ba:	460b      	mov	r3, r1
 80044bc:	80bb      	strh	r3, [r7, #4]
 80044be:	4613      	mov	r3, r2
 80044c0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80044c2:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <BSP_LCD_DisplayChar+0x50>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	78fb      	ldrb	r3, [r7, #3]
 80044ca:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80044cc:	490c      	ldr	r1, [pc, #48]	; (8004500 <BSP_LCD_DisplayChar+0x50>)
 80044ce:	6889      	ldr	r1, [r1, #8]
 80044d0:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80044d2:	fb01 f103 	mul.w	r1, r1, r3
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80044d6:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <BSP_LCD_DisplayChar+0x50>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	889b      	ldrh	r3, [r3, #4]
 80044dc:	3307      	adds	r3, #7
 80044de:	2b00      	cmp	r3, #0
 80044e0:	da00      	bge.n	80044e4 <BSP_LCD_DisplayChar+0x34>
 80044e2:	3307      	adds	r3, #7
 80044e4:	10db      	asrs	r3, r3, #3
 80044e6:	fb03 f301 	mul.w	r3, r3, r1
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80044ea:	441a      	add	r2, r3
 80044ec:	88b9      	ldrh	r1, [r7, #4]
 80044ee:	88fb      	ldrh	r3, [r7, #6]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 f9a7 	bl	8004844 <DrawChar>
}
 80044f6:	bf00      	nop
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	2003dd00 	.word	0x2003dd00

08004504 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8004504:	b590      	push	{r4, r7, lr}
 8004506:	b089      	sub	sp, #36	; 0x24
 8004508:	af00      	add	r7, sp, #0
 800450a:	60ba      	str	r2, [r7, #8]
 800450c:	461a      	mov	r2, r3
 800450e:	4603      	mov	r3, r0
 8004510:	81fb      	strh	r3, [r7, #14]
 8004512:	460b      	mov	r3, r1
 8004514:	81bb      	strh	r3, [r7, #12]
 8004516:	4613      	mov	r3, r2
 8004518:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800451a:	2301      	movs	r3, #1
 800451c:	83fb      	strh	r3, [r7, #30]
 800451e:	2300      	movs	r3, #0
 8004520:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8004522:	2300      	movs	r3, #0
 8004524:	61bb      	str	r3, [r7, #24]
 8004526:	2300      	movs	r3, #0
 8004528:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800452e:	e002      	b.n	8004536 <BSP_LCD_DisplayStringAt+0x32>
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	3301      	adds	r3, #1
 8004534:	61bb      	str	r3, [r7, #24]
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	1c5a      	adds	r2, r3, #1
 800453a:	617a      	str	r2, [r7, #20]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f6      	bne.n	8004530 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8004542:	f7ff ff37 	bl	80043b4 <BSP_LCD_GetXSize>
 8004546:	4602      	mov	r2, r0
 8004548:	4b36      	ldr	r3, [pc, #216]	; (8004624 <BSP_LCD_DisplayStringAt+0x120>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	889b      	ldrh	r3, [r3, #4]
 800454e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004552:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8004554:	79fb      	ldrb	r3, [r7, #7]
 8004556:	2b02      	cmp	r3, #2
 8004558:	d014      	beq.n	8004584 <BSP_LCD_DisplayStringAt+0x80>
 800455a:	2b03      	cmp	r3, #3
 800455c:	d00f      	beq.n	800457e <BSP_LCD_DisplayStringAt+0x7a>
 800455e:	2b01      	cmp	r3, #1
 8004560:	d11e      	bne.n	80045a0 <BSP_LCD_DisplayStringAt+0x9c>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	4a2e      	ldr	r2, [pc, #184]	; (8004624 <BSP_LCD_DisplayStringAt+0x120>)
 800456a:	6892      	ldr	r2, [r2, #8]
 800456c:	8892      	ldrh	r2, [r2, #4]
 800456e:	fb02 f303 	mul.w	r3, r2, r3
 8004572:	085b      	lsrs	r3, r3, #1
 8004574:	b29a      	uxth	r2, r3
 8004576:	89fb      	ldrh	r3, [r7, #14]
 8004578:	4413      	add	r3, r2
 800457a:	83fb      	strh	r3, [r7, #30]
      break;
 800457c:	e013      	b.n	80045a6 <BSP_LCD_DisplayStringAt+0xa2>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 800457e:	89fb      	ldrh	r3, [r7, #14]
 8004580:	83fb      	strh	r3, [r7, #30]
      break;
 8004582:	e010      	b.n	80045a6 <BSP_LCD_DisplayStringAt+0xa2>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	b29a      	uxth	r2, r3
 800458c:	4b25      	ldr	r3, [pc, #148]	; (8004624 <BSP_LCD_DisplayStringAt+0x120>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	889b      	ldrh	r3, [r3, #4]
 8004592:	fb12 f303 	smulbb	r3, r2, r3
 8004596:	b29a      	uxth	r2, r3
 8004598:	89fb      	ldrh	r3, [r7, #14]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	83fb      	strh	r3, [r7, #30]
      break;
 800459e:	e002      	b.n	80045a6 <BSP_LCD_DisplayStringAt+0xa2>
    }    
  default:
    {
      refcolumn = Xpos;
 80045a0:	89fb      	ldrh	r3, [r7, #14]
 80045a2:	83fb      	strh	r3, [r7, #30]
      break;
 80045a4:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80045a6:	8bfb      	ldrh	r3, [r7, #30]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <BSP_LCD_DisplayStringAt+0xb0>
 80045ac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	da15      	bge.n	80045e0 <BSP_LCD_DisplayStringAt+0xdc>
  {
    refcolumn = 1;
 80045b4:	2301      	movs	r3, #1
 80045b6:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80045b8:	e012      	b.n	80045e0 <BSP_LCD_DisplayStringAt+0xdc>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	781a      	ldrb	r2, [r3, #0]
 80045be:	89b9      	ldrh	r1, [r7, #12]
 80045c0:	8bfb      	ldrh	r3, [r7, #30]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff ff74 	bl	80044b0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 80045c8:	4b16      	ldr	r3, [pc, #88]	; (8004624 <BSP_LCD_DisplayStringAt+0x120>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	889a      	ldrh	r2, [r3, #4]
 80045ce:	8bfb      	ldrh	r3, [r7, #30]
 80045d0:	4413      	add	r3, r2
 80045d2:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	3301      	adds	r3, #1
 80045d8:	60bb      	str	r3, [r7, #8]
    i++;
 80045da:	8bbb      	ldrh	r3, [r7, #28]
 80045dc:	3301      	adds	r3, #1
 80045de:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	bf14      	ite	ne
 80045e8:	2301      	movne	r3, #1
 80045ea:	2300      	moveq	r3, #0
 80045ec:	b2dc      	uxtb	r4, r3
 80045ee:	f7ff fee1 	bl	80043b4 <BSP_LCD_GetXSize>
 80045f2:	4601      	mov	r1, r0
 80045f4:	8bbb      	ldrh	r3, [r7, #28]
 80045f6:	4a0b      	ldr	r2, [pc, #44]	; (8004624 <BSP_LCD_DisplayStringAt+0x120>)
 80045f8:	6892      	ldr	r2, [r2, #8]
 80045fa:	8892      	ldrh	r2, [r2, #4]
 80045fc:	fb02 f303 	mul.w	r3, r2, r3
 8004600:	1acb      	subs	r3, r1, r3
 8004602:	b29b      	uxth	r3, r3
 8004604:	4a07      	ldr	r2, [pc, #28]	; (8004624 <BSP_LCD_DisplayStringAt+0x120>)
 8004606:	6892      	ldr	r2, [r2, #8]
 8004608:	8892      	ldrh	r2, [r2, #4]
 800460a:	4293      	cmp	r3, r2
 800460c:	bf2c      	ite	cs
 800460e:	2301      	movcs	r3, #1
 8004610:	2300      	movcc	r3, #0
 8004612:	b2db      	uxtb	r3, r3
 8004614:	4023      	ands	r3, r4
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1ce      	bne.n	80045ba <BSP_LCD_DisplayStringAt+0xb6>
  }
}
 800461c:	bf00      	nop
 800461e:	3724      	adds	r7, #36	; 0x24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd90      	pop	{r4, r7, pc}
 8004624:	2003dd00 	.word	0x2003dd00

08004628 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	4603      	mov	r3, r0
 8004630:	80fb      	strh	r3, [r7, #6]
 8004632:	460b      	mov	r3, r1
 8004634:	80bb      	strh	r3, [r7, #4]
 8004636:	4613      	mov	r3, r2
 8004638:	807b      	strh	r3, [r7, #2]
  if(LcdDrv->WritePixel != NULL)
 800463a:	4b08      	ldr	r3, [pc, #32]	; (800465c <BSP_LCD_DrawPixel+0x34>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d006      	beq.n	8004652 <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 8004644:	4b05      	ldr	r3, [pc, #20]	; (800465c <BSP_LCD_DrawPixel+0x34>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	887a      	ldrh	r2, [r7, #2]
 800464c:	88b9      	ldrh	r1, [r7, #4]
 800464e:	88f8      	ldrh	r0, [r7, #6]
 8004650:	4798      	blx	r3
  }
}
 8004652:	bf00      	nop
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	2000017c 	.word	0x2000017c

08004660 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004660:	b590      	push	{r4, r7, lr}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	4603      	mov	r3, r0
 8004668:	80fb      	strh	r3, [r7, #6]
 800466a:	460b      	mov	r3, r1
 800466c:	80bb      	strh	r3, [r7, #4]
 800466e:	4613      	mov	r3, r2
 8004670:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8004672:	2300      	movs	r3, #0
 8004674:	60fb      	str	r3, [r7, #12]
  
  if(LcdDrv->DrawHLine != NULL)
 8004676:	4b15      	ldr	r3, [pc, #84]	; (80046cc <BSP_LCD_DrawHLine+0x6c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8004680:	4b12      	ldr	r3, [pc, #72]	; (80046cc <BSP_LCD_DrawHLine+0x6c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6a1c      	ldr	r4, [r3, #32]
 8004686:	4b12      	ldr	r3, [pc, #72]	; (80046d0 <BSP_LCD_DrawHLine+0x70>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	b298      	uxth	r0, r3
 800468c:	887b      	ldrh	r3, [r7, #2]
 800468e:	88ba      	ldrh	r2, [r7, #4]
 8004690:	88f9      	ldrh	r1, [r7, #6]
 8004692:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8004694:	e015      	b.n	80046c2 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8004696:	2300      	movs	r3, #0
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	e00e      	b.n	80046ba <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	b29a      	uxth	r2, r3
 80046a0:	88fb      	ldrh	r3, [r7, #6]
 80046a2:	4413      	add	r3, r2
 80046a4:	b298      	uxth	r0, r3
 80046a6:	4b0a      	ldr	r3, [pc, #40]	; (80046d0 <BSP_LCD_DrawHLine+0x70>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	88bb      	ldrh	r3, [r7, #4]
 80046ae:	4619      	mov	r1, r3
 80046b0:	f7ff ffba 	bl	8004628 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	3301      	adds	r3, #1
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	887b      	ldrh	r3, [r7, #2]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d3ec      	bcc.n	800469c <BSP_LCD_DrawHLine+0x3c>
}
 80046c2:	bf00      	nop
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd90      	pop	{r4, r7, pc}
 80046ca:	bf00      	nop
 80046cc:	2000017c 	.word	0x2000017c
 80046d0:	2003dd00 	.word	0x2003dd00

080046d4 <BSP_LCD_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address.
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 80046d4:	b590      	push	{r4, r7, lr}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	4603      	mov	r3, r0
 80046dc:	603a      	str	r2, [r7, #0]
 80046de:	80fb      	strh	r3, [r7, #6]
 80046e0:	460b      	mov	r3, r1
 80046e2:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 80046e4:	2300      	movs	r3, #0
 80046e6:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 80046e8:	2300      	movs	r3, #0
 80046ea:	60bb      	str	r3, [r7, #8]
 
  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	3312      	adds	r3, #18
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	3313      	adds	r3, #19
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	021b      	lsls	r3, r3, #8
 80046fc:	441a      	add	r2, r3
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	3314      	adds	r3, #20
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	041b      	lsls	r3, r3, #16
 8004706:	441a      	add	r2, r3
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	3315      	adds	r3, #21
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	061b      	lsls	r3, r3, #24
 8004710:	4413      	add	r3, r2
 8004712:	60bb      	str	r3, [r7, #8]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	3316      	adds	r3, #22
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	3317      	adds	r3, #23
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	021b      	lsls	r3, r3, #8
 8004724:	441a      	add	r2, r3
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	3318      	adds	r3, #24
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	041b      	lsls	r3, r3, #16
 800472e:	441a      	add	r2, r3
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	3319      	adds	r3, #25
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	061b      	lsls	r3, r3, #24
 8004738:	4413      	add	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]
  
  SetDisplayWindow(Xpos, Ypos, width, height);
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	b29a      	uxth	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	b29b      	uxth	r3, r3
 8004744:	88b9      	ldrh	r1, [r7, #4]
 8004746:	88f8      	ldrh	r0, [r7, #6]
 8004748:	f000 f914 	bl	8004974 <SetDisplayWindow>
  
  if(LcdDrv->DrawBitmap != NULL)
 800474c:	4b0e      	ldr	r3, [pc, #56]	; (8004788 <BSP_LCD_DrawBitmap+0xb4>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004752:	2b00      	cmp	r3, #0
 8004754:	d006      	beq.n	8004764 <BSP_LCD_DrawBitmap+0x90>
  {
    LcdDrv->DrawBitmap(Xpos, Ypos, pbmp);
 8004756:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <BSP_LCD_DrawBitmap+0xb4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475c:	88b9      	ldrh	r1, [r7, #4]
 800475e:	88f8      	ldrh	r0, [r7, #6]
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	4798      	blx	r3
  } 
  SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8004764:	f7ff fe26 	bl	80043b4 <BSP_LCD_GetXSize>
 8004768:	4603      	mov	r3, r0
 800476a:	b29c      	uxth	r4, r3
 800476c:	f7ff fe2e 	bl	80043cc <BSP_LCD_GetYSize>
 8004770:	4603      	mov	r3, r0
 8004772:	b29b      	uxth	r3, r3
 8004774:	4622      	mov	r2, r4
 8004776:	2100      	movs	r1, #0
 8004778:	2000      	movs	r0, #0
 800477a:	f000 f8fb 	bl	8004974 <SetDisplayWindow>
}
 800477e:	bf00      	nop
 8004780:	3714      	adds	r7, #20
 8004782:	46bd      	mov	sp, r7
 8004784:	bd90      	pop	{r4, r7, pc}
 8004786:	bf00      	nop
 8004788:	2000017c 	.word	0x2000017c

0800478c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LCD GPIO special pins MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIOs clock */
  LCD_RESET_GPIO_CLK_ENABLE();
 8004792:	2300      	movs	r3, #0
 8004794:	60bb      	str	r3, [r7, #8]
 8004796:	4b28      	ldr	r3, [pc, #160]	; (8004838 <BSP_LCD_MspInit+0xac>)
 8004798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479a:	4a27      	ldr	r2, [pc, #156]	; (8004838 <BSP_LCD_MspInit+0xac>)
 800479c:	f043 0302 	orr.w	r3, r3, #2
 80047a0:	6313      	str	r3, [r2, #48]	; 0x30
 80047a2:	4b25      	ldr	r3, [pc, #148]	; (8004838 <BSP_LCD_MspInit+0xac>)
 80047a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	60bb      	str	r3, [r7, #8]
 80047ac:	68bb      	ldr	r3, [r7, #8]
  LCD_TE_GPIO_CLK_ENABLE();
 80047ae:	2300      	movs	r3, #0
 80047b0:	607b      	str	r3, [r7, #4]
 80047b2:	4b21      	ldr	r3, [pc, #132]	; (8004838 <BSP_LCD_MspInit+0xac>)
 80047b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b6:	4a20      	ldr	r2, [pc, #128]	; (8004838 <BSP_LCD_MspInit+0xac>)
 80047b8:	f043 0302 	orr.w	r3, r3, #2
 80047bc:	6313      	str	r3, [r2, #48]	; 0x30
 80047be:	4b1e      	ldr	r3, [pc, #120]	; (8004838 <BSP_LCD_MspInit+0xac>)
 80047c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	607b      	str	r3, [r7, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80047ca:	2300      	movs	r3, #0
 80047cc:	603b      	str	r3, [r7, #0]
 80047ce:	4b1a      	ldr	r3, [pc, #104]	; (8004838 <BSP_LCD_MspInit+0xac>)
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	4a19      	ldr	r2, [pc, #100]	; (8004838 <BSP_LCD_MspInit+0xac>)
 80047d4:	f043 0310 	orr.w	r3, r3, #16
 80047d8:	6313      	str	r3, [r2, #48]	; 0x30
 80047da:	4b17      	ldr	r3, [pc, #92]	; (8004838 <BSP_LCD_MspInit+0xac>)
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	f003 0310 	and.w	r3, r3, #16
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 80047e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047ea:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80047f0:	2302      	movs	r3, #2
 80047f2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80047f4:	2301      	movs	r3, #1
 80047f6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 80047f8:	f107 030c 	add.w	r3, r7, #12
 80047fc:	4619      	mov	r1, r3
 80047fe:	480f      	ldr	r0, [pc, #60]	; (800483c <BSP_LCD_MspInit+0xb0>)
 8004800:	f001 fb22 	bl	8005e48 <HAL_GPIO_Init>

  /* LCD_TE GPIO configuration */
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 8004804:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004808:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 800480a:	2300      	movs	r3, #0
 800480c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 800480e:	f107 030c 	add.w	r3, r7, #12
 8004812:	4619      	mov	r1, r3
 8004814:	4809      	ldr	r0, [pc, #36]	; (800483c <BSP_LCD_MspInit+0xb0>)
 8004816:	f001 fb17 	bl	8005e48 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 800481a:	2320      	movs	r3, #32
 800481c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800481e:	2301      	movs	r3, #1
 8004820:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8004822:	f107 030c 	add.w	r3, r7, #12
 8004826:	4619      	mov	r1, r3
 8004828:	4805      	ldr	r0, [pc, #20]	; (8004840 <BSP_LCD_MspInit+0xb4>)
 800482a:	f001 fb0d 	bl	8005e48 <HAL_GPIO_Init>
}
 800482e:	bf00      	nop
 8004830:	3720      	adds	r7, #32
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40023800 	.word	0x40023800
 800483c:	40020400 	.word	0x40020400
 8004840:	40021000 	.word	0x40021000

08004844 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b088      	sub	sp, #32
 8004848:	af00      	add	r7, sp, #0
 800484a:	4603      	mov	r3, r0
 800484c:	603a      	str	r2, [r7, #0]
 800484e:	80fb      	strh	r3, [r7, #6]
 8004850:	460b      	mov	r3, r1
 8004852:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004854:	2300      	movs	r3, #0
 8004856:	61fb      	str	r3, [r7, #28]
 8004858:	2300      	movs	r3, #0
 800485a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;
  
  height = DrawProp.pFont->Height;
 800485c:	4b44      	ldr	r3, [pc, #272]	; (8004970 <DrawChar+0x12c>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	88db      	ldrh	r3, [r3, #6]
 8004862:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 8004864:	4b42      	ldr	r3, [pc, #264]	; (8004970 <DrawChar+0x12c>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	889b      	ldrh	r3, [r3, #4]
 800486a:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 800486c:	8a3b      	ldrh	r3, [r7, #16]
 800486e:	3307      	adds	r3, #7
 8004870:	2b00      	cmp	r3, #0
 8004872:	da00      	bge.n	8004876 <DrawChar+0x32>
 8004874:	3307      	adds	r3, #7
 8004876:	10db      	asrs	r3, r3, #3
 8004878:	b2db      	uxtb	r3, r3
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	b2da      	uxtb	r2, r3
 800487e:	8a3b      	ldrh	r3, [r7, #16]
 8004880:	b2db      	uxtb	r3, r3
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8004886:	2300      	movs	r3, #0
 8004888:	61fb      	str	r3, [r7, #28]
 800488a:	e069      	b.n	8004960 <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800488c:	8a3b      	ldrh	r3, [r7, #16]
 800488e:	3307      	adds	r3, #7
 8004890:	2b00      	cmp	r3, #0
 8004892:	da00      	bge.n	8004896 <DrawChar+0x52>
 8004894:	3307      	adds	r3, #7
 8004896:	10db      	asrs	r3, r3, #3
 8004898:	461a      	mov	r2, r3
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	fb03 f302 	mul.w	r3, r3, r2
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	4413      	add	r3, r2
 80048a4:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80048a6:	8a3b      	ldrh	r3, [r7, #16]
 80048a8:	3307      	adds	r3, #7
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	da00      	bge.n	80048b0 <DrawChar+0x6c>
 80048ae:	3307      	adds	r3, #7
 80048b0:	10db      	asrs	r3, r3, #3
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d002      	beq.n	80048bc <DrawChar+0x78>
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d004      	beq.n	80048c4 <DrawChar+0x80>
 80048ba:	e00c      	b.n	80048d6 <DrawChar+0x92>
    {
    case 1:
      line =  pchar[0];
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	617b      	str	r3, [r7, #20]
      break;    
 80048c2:	e016      	b.n	80048f2 <DrawChar+0xae>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	021b      	lsls	r3, r3, #8
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	3201      	adds	r2, #1
 80048ce:	7812      	ldrb	r2, [r2, #0]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]
      break;
 80048d4:	e00d      	b.n	80048f2 <DrawChar+0xae>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	041a      	lsls	r2, r3, #16
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	3301      	adds	r3, #1
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	021b      	lsls	r3, r3, #8
 80048e4:	4313      	orrs	r3, r2
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	3202      	adds	r2, #2
 80048ea:	7812      	ldrb	r2, [r2, #0]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]
      break;
 80048f0:	bf00      	nop
    }  
    
    for (j = 0; j < width; j++)
 80048f2:	2300      	movs	r3, #0
 80048f4:	61bb      	str	r3, [r7, #24]
 80048f6:	e029      	b.n	800494c <DrawChar+0x108>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80048f8:	8a3a      	ldrh	r2, [r7, #16]
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	1ad2      	subs	r2, r2, r3
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
 8004900:	4413      	add	r3, r2
 8004902:	3b01      	subs	r3, #1
 8004904:	2201      	movs	r2, #1
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	461a      	mov	r2, r3
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	4013      	ands	r3, r2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00c      	beq.n	800492e <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	b29a      	uxth	r2, r3
 8004918:	88fb      	ldrh	r3, [r7, #6]
 800491a:	4413      	add	r3, r2
 800491c:	b298      	uxth	r0, r3
 800491e:	4b14      	ldr	r3, [pc, #80]	; (8004970 <DrawChar+0x12c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	b29a      	uxth	r2, r3
 8004924:	88bb      	ldrh	r3, [r7, #4]
 8004926:	4619      	mov	r1, r3
 8004928:	f7ff fe7e 	bl	8004628 <BSP_LCD_DrawPixel>
 800492c:	e00b      	b.n	8004946 <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	b29a      	uxth	r2, r3
 8004932:	88fb      	ldrh	r3, [r7, #6]
 8004934:	4413      	add	r3, r2
 8004936:	b298      	uxth	r0, r3
 8004938:	4b0d      	ldr	r3, [pc, #52]	; (8004970 <DrawChar+0x12c>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	b29a      	uxth	r2, r3
 800493e:	88bb      	ldrh	r3, [r7, #4]
 8004940:	4619      	mov	r1, r3
 8004942:	f7ff fe71 	bl	8004628 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	3301      	adds	r3, #1
 800494a:	61bb      	str	r3, [r7, #24]
 800494c:	8a3b      	ldrh	r3, [r7, #16]
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	429a      	cmp	r2, r3
 8004952:	d3d1      	bcc.n	80048f8 <DrawChar+0xb4>
      } 
    }
    Ypos++;
 8004954:	88bb      	ldrh	r3, [r7, #4]
 8004956:	3301      	adds	r3, #1
 8004958:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	3301      	adds	r3, #1
 800495e:	61fb      	str	r3, [r7, #28]
 8004960:	8a7b      	ldrh	r3, [r7, #18]
 8004962:	69fa      	ldr	r2, [r7, #28]
 8004964:	429a      	cmp	r2, r3
 8004966:	d391      	bcc.n	800488c <DrawChar+0x48>
  }
}
 8004968:	bf00      	nop
 800496a:	3720      	adds	r7, #32
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	2003dd00 	.word	0x2003dd00

08004974 <SetDisplayWindow>:
  * @param  Ypos: LCD Y position
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  */
static void SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004974:	b590      	push	{r4, r7, lr}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	4604      	mov	r4, r0
 800497c:	4608      	mov	r0, r1
 800497e:	4611      	mov	r1, r2
 8004980:	461a      	mov	r2, r3
 8004982:	4623      	mov	r3, r4
 8004984:	80fb      	strh	r3, [r7, #6]
 8004986:	4603      	mov	r3, r0
 8004988:	80bb      	strh	r3, [r7, #4]
 800498a:	460b      	mov	r3, r1
 800498c:	807b      	strh	r3, [r7, #2]
 800498e:	4613      	mov	r3, r2
 8004990:	803b      	strh	r3, [r7, #0]
  if(LcdDrv->SetDisplayWindow != NULL)
 8004992:	4b08      	ldr	r3, [pc, #32]	; (80049b4 <SetDisplayWindow+0x40>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d007      	beq.n	80049ac <SetDisplayWindow+0x38>
  {
    LcdDrv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 800499c:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <SetDisplayWindow+0x40>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	69dc      	ldr	r4, [r3, #28]
 80049a2:	883b      	ldrh	r3, [r7, #0]
 80049a4:	887a      	ldrh	r2, [r7, #2]
 80049a6:	88b9      	ldrh	r1, [r7, #4]
 80049a8:	88f8      	ldrh	r0, [r7, #6]
 80049aa:	47a0      	blx	r4
  }  
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd90      	pop	{r4, r7, pc}
 80049b4:	2000017c 	.word	0x2000017c

080049b8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{ 
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	71fb      	strb	r3, [r7, #7]
  
  /* uSD device interface configuration */
  uSdHandle.Instance = SDIO;
 80049c2:	4b21      	ldr	r3, [pc, #132]	; (8004a48 <BSP_SD_Init+0x90>)
 80049c4:	4a21      	ldr	r2, [pc, #132]	; (8004a4c <BSP_SD_Init+0x94>)
 80049c6:	601a      	str	r2, [r3, #0]

  uSdHandle.Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80049c8:	4b1f      	ldr	r3, [pc, #124]	; (8004a48 <BSP_SD_Init+0x90>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	605a      	str	r2, [r3, #4]
  uSdHandle.Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80049ce:	4b1e      	ldr	r3, [pc, #120]	; (8004a48 <BSP_SD_Init+0x90>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	609a      	str	r2, [r3, #8]
  uSdHandle.Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80049d4:	4b1c      	ldr	r3, [pc, #112]	; (8004a48 <BSP_SD_Init+0x90>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	60da      	str	r2, [r3, #12]
  uSdHandle.Init.BusWide             = SDIO_BUS_WIDE_1B;
 80049da:	4b1b      	ldr	r3, [pc, #108]	; (8004a48 <BSP_SD_Init+0x90>)
 80049dc:	2200      	movs	r2, #0
 80049de:	611a      	str	r2, [r3, #16]
  uSdHandle.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 80049e0:	4b19      	ldr	r3, [pc, #100]	; (8004a48 <BSP_SD_Init+0x90>)
 80049e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80049e6:	615a      	str	r2, [r3, #20]
  uSdHandle.Init.ClockDiv            = SDIO_TRANSFER_CLK_DIV;
 80049e8:	4b17      	ldr	r3, [pc, #92]	; (8004a48 <BSP_SD_Init+0x90>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	619a      	str	r2, [r3, #24]
  
  /* Msp SD Detect pin initialization */
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 80049ee:	2100      	movs	r1, #0
 80049f0:	4815      	ldr	r0, [pc, #84]	; (8004a48 <BSP_SD_Init+0x90>)
 80049f2:	f000 f971 	bl	8004cd8 <BSP_SD_Detect_MspInit>
  
  /* Check if SD card is present */
  if(BSP_SD_IsDetected() != SD_PRESENT)
 80049f6:	f000 f82b 	bl	8004a50 <BSP_SD_IsDetected>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d001      	beq.n	8004a04 <BSP_SD_Init+0x4c>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8004a00:	2302      	movs	r3, #2
 8004a02:	e01c      	b.n	8004a3e <BSP_SD_Init+0x86>
  }
  
  /* Msp SD initialization */
  BSP_SD_MspInit(&uSdHandle, NULL);
 8004a04:	2100      	movs	r1, #0
 8004a06:	4810      	ldr	r0, [pc, #64]	; (8004a48 <BSP_SD_Init+0x90>)
 8004a08:	f000 f872 	bl	8004af0 <BSP_SD_MspInit>

  /* HAL SD initialization */
  if(HAL_SD_Init(&uSdHandle) != HAL_OK)
 8004a0c:	480e      	ldr	r0, [pc, #56]	; (8004a48 <BSP_SD_Init+0x90>)
 8004a0e:	f004 ffc7 	bl	80099a0 <HAL_SD_Init>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <BSP_SD_Init+0x64>
  {
    sd_state = MSD_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	71fb      	strb	r3, [r7, #7]
  }
  
  /* Configure SD Bus width */
  if(sd_state == MSD_OK)
 8004a1c:	79fb      	ldrb	r3, [r7, #7]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10c      	bne.n	8004a3c <BSP_SD_Init+0x84>
  {
    /* Enable wide operation */
    if(HAL_SD_ConfigWideBusOperation(&uSdHandle, SDIO_BUS_WIDE_4B) != HAL_OK)
 8004a22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a26:	4808      	ldr	r0, [pc, #32]	; (8004a48 <BSP_SD_Init+0x90>)
 8004a28:	f005 fdb2 	bl	800a590 <HAL_SD_ConfigWideBusOperation>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d002      	beq.n	8004a38 <BSP_SD_Init+0x80>
    {
      sd_state = MSD_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	71fb      	strb	r3, [r7, #7]
 8004a36:	e001      	b.n	8004a3c <BSP_SD_Init+0x84>
    }
    else
    {
      sd_state = MSD_OK;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	71fb      	strb	r3, [r7, #7]
    }
  }
  
  return  sd_state;
 8004a3c:	79fb      	ldrb	r3, [r7, #7]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	2003dd0c 	.word	0x2003dd0c
 8004a4c:	40012c00 	.word	0x40012c00

08004a50 <BSP_SD_IsDetected>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004a56:	2301      	movs	r3, #1
 8004a58:	71fb      	strb	r3, [r7, #7]
  
  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 8004a5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a5e:	4807      	ldr	r0, [pc, #28]	; (8004a7c <BSP_SD_IsDetected+0x2c>)
 8004a60:	f001 fb84 	bl	800616c <HAL_GPIO_ReadPin>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <BSP_SD_IsDetected+0x1e>
  {
    status = SD_NOT_PRESENT;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004a6e:	79fb      	ldrb	r3, [r7, #7]
 8004a70:	b2db      	uxtb	r3, r3
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40021400 	.word	0x40021400

08004a80 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af02      	add	r7, sp, #8
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	603b      	str	r3, [r7, #0]
  if(HAL_SD_ReadBlocks(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	68f9      	ldr	r1, [r7, #12]
 8004a98:	4806      	ldr	r0, [pc, #24]	; (8004ab4 <BSP_SD_ReadBlocks+0x34>)
 8004a9a:	f005 f811 	bl	8009ac0 <HAL_SD_ReadBlocks>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <BSP_SD_ReadBlocks+0x28>
  {
    return MSD_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e000      	b.n	8004aaa <BSP_SD_ReadBlocks+0x2a>
  }
  else
  {
    return MSD_OK;
 8004aa8:	2300      	movs	r3, #0
  }
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	2003dd0c 	.word	0x2003dd0c

08004ab8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af02      	add	r7, sp, #8
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
 8004ac4:	603b      	str	r3, [r7, #0]
  if(HAL_SD_WriteBlocks(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	68f9      	ldr	r1, [r7, #12]
 8004ad0:	4806      	ldr	r0, [pc, #24]	; (8004aec <BSP_SD_WriteBlocks+0x34>)
 8004ad2:	f005 f9ed 	bl	8009eb0 <HAL_SD_WriteBlocks>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <BSP_SD_WriteBlocks+0x28>
  {
    return MSD_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e000      	b.n	8004ae2 <BSP_SD_WriteBlocks+0x2a>
  }
  else
  {
    return MSD_OK;
 8004ae0:	2300      	movs	r3, #0
  }
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	2003dd0c 	.word	0x2003dd0c

08004af0 <BSP_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd: SD handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08c      	sub	sp, #48	; 0x30
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Params);

  /* Enable SDIO clock */
  __HAL_RCC_SDIO_CLK_ENABLE();
 8004afa:	2300      	movs	r3, #0
 8004afc:	61bb      	str	r3, [r7, #24]
 8004afe:	4b6f      	ldr	r3, [pc, #444]	; (8004cbc <BSP_SD_MspInit+0x1cc>)
 8004b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b02:	4a6e      	ldr	r2, [pc, #440]	; (8004cbc <BSP_SD_MspInit+0x1cc>)
 8004b04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b08:	6453      	str	r3, [r2, #68]	; 0x44
 8004b0a:	4b6c      	ldr	r3, [pc, #432]	; (8004cbc <BSP_SD_MspInit+0x1cc>)
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b12:	61bb      	str	r3, [r7, #24]
 8004b14:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable DMA2 clocks */
  __DMAx_TxRx_CLK_ENABLE();
 8004b16:	2300      	movs	r3, #0
 8004b18:	617b      	str	r3, [r7, #20]
 8004b1a:	4b68      	ldr	r3, [pc, #416]	; (8004cbc <BSP_SD_MspInit+0x1cc>)
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1e:	4a67      	ldr	r2, [pc, #412]	; (8004cbc <BSP_SD_MspInit+0x1cc>)
 8004b20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b24:	6313      	str	r3, [r2, #48]	; 0x30
 8004b26:	4b65      	ldr	r3, [pc, #404]	; (8004cbc <BSP_SD_MspInit+0x1cc>)
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	697b      	ldr	r3, [r7, #20]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b32:	2300      	movs	r3, #0
 8004b34:	613b      	str	r3, [r7, #16]
 8004b36:	4b61      	ldr	r3, [pc, #388]	; (8004cbc <BSP_SD_MspInit+0x1cc>)
 8004b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3a:	4a60      	ldr	r2, [pc, #384]	; (8004cbc <BSP_SD_MspInit+0x1cc>)
 8004b3c:	f043 0304 	orr.w	r3, r3, #4
 8004b40:	6313      	str	r3, [r2, #48]	; 0x30
 8004b42:	4b5e      	ldr	r3, [pc, #376]	; (8004cbc <BSP_SD_MspInit+0x1cc>)
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	613b      	str	r3, [r7, #16]
 8004b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	4b5a      	ldr	r3, [pc, #360]	; (8004cbc <BSP_SD_MspInit+0x1cc>)
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	4a59      	ldr	r2, [pc, #356]	; (8004cbc <BSP_SD_MspInit+0x1cc>)
 8004b58:	f043 0301 	orr.w	r3, r3, #1
 8004b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b5e:	4b57      	ldr	r3, [pc, #348]	; (8004cbc <BSP_SD_MspInit+0x1cc>)
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8004b72:	2303      	movs	r3, #3
 8004b74:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_SDIO;
 8004b76:	230c      	movs	r3, #12
 8004b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* GPIOC configuration: SD_D[0..3] and SD_clk */
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8004b7a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004b7e:	61fb      	str	r3, [r7, #28]
   
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8004b80:	f107 031c 	add.w	r3, r7, #28
 8004b84:	4619      	mov	r1, r3
 8004b86:	484e      	ldr	r0, [pc, #312]	; (8004cc0 <BSP_SD_MspInit+0x1d0>)
 8004b88:	f001 f95e 	bl	8005e48 <HAL_GPIO_Init>

  /* GPIOA configuration: SD cmd */
  gpio_init_structure.Pin = GPIO_PIN_6;
 8004b8c:	2340      	movs	r3, #64	; 0x40
 8004b8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 8004b90:	f107 031c 	add.w	r3, r7, #28
 8004b94:	4619      	mov	r1, r3
 8004b96:	484b      	ldr	r0, [pc, #300]	; (8004cc4 <BSP_SD_MspInit+0x1d4>)
 8004b98:	f001 f956 	bl	8005e48 <HAL_GPIO_Init>

  /* NVIC configuration for SDIO interrupts */
  HAL_NVIC_SetPriority(SDIO_IRQn, 0x0E, 0x00);
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	210e      	movs	r1, #14
 8004ba0:	2031      	movs	r0, #49	; 0x31
 8004ba2:	f000 fc6f 	bl	8005484 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8004ba6:	2031      	movs	r0, #49	; 0x31
 8004ba8:	f000 fc88 	bl	80054bc <HAL_NVIC_EnableIRQ>
    
  /* Configure DMA Rx parameters */
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 8004bac:	4b46      	ldr	r3, [pc, #280]	; (8004cc8 <BSP_SD_MspInit+0x1d8>)
 8004bae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004bb2:	605a      	str	r2, [r3, #4]
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8004bb4:	4b44      	ldr	r3, [pc, #272]	; (8004cc8 <BSP_SD_MspInit+0x1d8>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	609a      	str	r2, [r3, #8]
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004bba:	4b43      	ldr	r3, [pc, #268]	; (8004cc8 <BSP_SD_MspInit+0x1d8>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	60da      	str	r2, [r3, #12]
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8004bc0:	4b41      	ldr	r3, [pc, #260]	; (8004cc8 <BSP_SD_MspInit+0x1d8>)
 8004bc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bc6:	611a      	str	r2, [r3, #16]
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004bc8:	4b3f      	ldr	r3, [pc, #252]	; (8004cc8 <BSP_SD_MspInit+0x1d8>)
 8004bca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004bce:	615a      	str	r2, [r3, #20]
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004bd0:	4b3d      	ldr	r3, [pc, #244]	; (8004cc8 <BSP_SD_MspInit+0x1d8>)
 8004bd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004bd6:	619a      	str	r2, [r3, #24]
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8004bd8:	4b3b      	ldr	r3, [pc, #236]	; (8004cc8 <BSP_SD_MspInit+0x1d8>)
 8004bda:	2220      	movs	r2, #32
 8004bdc:	61da      	str	r2, [r3, #28]
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8004bde:	4b3a      	ldr	r3, [pc, #232]	; (8004cc8 <BSP_SD_MspInit+0x1d8>)
 8004be0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004be4:	621a      	str	r2, [r3, #32]
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8004be6:	4b38      	ldr	r3, [pc, #224]	; (8004cc8 <BSP_SD_MspInit+0x1d8>)
 8004be8:	2204      	movs	r2, #4
 8004bea:	625a      	str	r2, [r3, #36]	; 0x24
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004bec:	4b36      	ldr	r3, [pc, #216]	; (8004cc8 <BSP_SD_MspInit+0x1d8>)
 8004bee:	2203      	movs	r2, #3
 8004bf0:	629a      	str	r2, [r3, #40]	; 0x28
  dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 8004bf2:	4b35      	ldr	r3, [pc, #212]	; (8004cc8 <BSP_SD_MspInit+0x1d8>)
 8004bf4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004bf8:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8004bfa:	4b33      	ldr	r3, [pc, #204]	; (8004cc8 <BSP_SD_MspInit+0x1d8>)
 8004bfc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004c00:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 8004c02:	4b31      	ldr	r3, [pc, #196]	; (8004cc8 <BSP_SD_MspInit+0x1d8>)
 8004c04:	4a31      	ldr	r2, [pc, #196]	; (8004ccc <BSP_SD_MspInit+0x1dc>)
 8004c06:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a2f      	ldr	r2, [pc, #188]	; (8004cc8 <BSP_SD_MspInit+0x1d8>)
 8004c0c:	641a      	str	r2, [r3, #64]	; 0x40
 8004c0e:	4a2e      	ldr	r2, [pc, #184]	; (8004cc8 <BSP_SD_MspInit+0x1d8>)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_rx_handle);
 8004c14:	482c      	ldr	r0, [pc, #176]	; (8004cc8 <BSP_SD_MspInit+0x1d8>)
 8004c16:	f000 ff2f 	bl	8005a78 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_rx_handle);
 8004c1a:	482b      	ldr	r0, [pc, #172]	; (8004cc8 <BSP_SD_MspInit+0x1d8>)
 8004c1c:	f000 fe7e 	bl	800591c <HAL_DMA_Init>
  
  /* Configure DMA Tx parameters */
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 8004c20:	4b2b      	ldr	r3, [pc, #172]	; (8004cd0 <BSP_SD_MspInit+0x1e0>)
 8004c22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c26:	605a      	str	r2, [r3, #4]
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8004c28:	4b29      	ldr	r3, [pc, #164]	; (8004cd0 <BSP_SD_MspInit+0x1e0>)
 8004c2a:	2240      	movs	r2, #64	; 0x40
 8004c2c:	609a      	str	r2, [r3, #8]
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004c2e:	4b28      	ldr	r3, [pc, #160]	; (8004cd0 <BSP_SD_MspInit+0x1e0>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	60da      	str	r2, [r3, #12]
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8004c34:	4b26      	ldr	r3, [pc, #152]	; (8004cd0 <BSP_SD_MspInit+0x1e0>)
 8004c36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c3a:	611a      	str	r2, [r3, #16]
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004c3c:	4b24      	ldr	r3, [pc, #144]	; (8004cd0 <BSP_SD_MspInit+0x1e0>)
 8004c3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c42:	615a      	str	r2, [r3, #20]
  dma_tx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004c44:	4b22      	ldr	r3, [pc, #136]	; (8004cd0 <BSP_SD_MspInit+0x1e0>)
 8004c46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c4a:	619a      	str	r2, [r3, #24]
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 8004c4c:	4b20      	ldr	r3, [pc, #128]	; (8004cd0 <BSP_SD_MspInit+0x1e0>)
 8004c4e:	2220      	movs	r2, #32
 8004c50:	61da      	str	r2, [r3, #28]
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8004c52:	4b1f      	ldr	r3, [pc, #124]	; (8004cd0 <BSP_SD_MspInit+0x1e0>)
 8004c54:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004c58:	621a      	str	r2, [r3, #32]
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8004c5a:	4b1d      	ldr	r3, [pc, #116]	; (8004cd0 <BSP_SD_MspInit+0x1e0>)
 8004c5c:	2204      	movs	r2, #4
 8004c5e:	625a      	str	r2, [r3, #36]	; 0x24
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004c60:	4b1b      	ldr	r3, [pc, #108]	; (8004cd0 <BSP_SD_MspInit+0x1e0>)
 8004c62:	2203      	movs	r2, #3
 8004c64:	629a      	str	r2, [r3, #40]	; 0x28
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 8004c66:	4b1a      	ldr	r3, [pc, #104]	; (8004cd0 <BSP_SD_MspInit+0x1e0>)
 8004c68:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004c6c:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8004c6e:	4b18      	ldr	r3, [pc, #96]	; (8004cd0 <BSP_SD_MspInit+0x1e0>)
 8004c70:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004c74:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 8004c76:	4b16      	ldr	r3, [pc, #88]	; (8004cd0 <BSP_SD_MspInit+0x1e0>)
 8004c78:	4a16      	ldr	r2, [pc, #88]	; (8004cd4 <BSP_SD_MspInit+0x1e4>)
 8004c7a:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a14      	ldr	r2, [pc, #80]	; (8004cd0 <BSP_SD_MspInit+0x1e0>)
 8004c80:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c82:	4a13      	ldr	r2, [pc, #76]	; (8004cd0 <BSP_SD_MspInit+0x1e0>)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_tx_handle);
 8004c88:	4811      	ldr	r0, [pc, #68]	; (8004cd0 <BSP_SD_MspInit+0x1e0>)
 8004c8a:	f000 fef5 	bl	8005a78 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_tx_handle); 
 8004c8e:	4810      	ldr	r0, [pc, #64]	; (8004cd0 <BSP_SD_MspInit+0x1e0>)
 8004c90:	f000 fe44 	bl	800591c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0F, 0x00);
 8004c94:	2200      	movs	r2, #0
 8004c96:	210f      	movs	r1, #15
 8004c98:	203b      	movs	r0, #59	; 0x3b
 8004c9a:	f000 fbf3 	bl	8005484 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 8004c9e:	203b      	movs	r0, #59	; 0x3b
 8004ca0:	f000 fc0c 	bl	80054bc <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 0x0F, 0x00);
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	210f      	movs	r1, #15
 8004ca8:	2045      	movs	r0, #69	; 0x45
 8004caa:	f000 fbeb 	bl	8005484 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 8004cae:	2045      	movs	r0, #69	; 0x45
 8004cb0:	f000 fc04 	bl	80054bc <HAL_NVIC_EnableIRQ>
}
 8004cb4:	bf00      	nop
 8004cb6:	3730      	adds	r7, #48	; 0x30
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	40020800 	.word	0x40020800
 8004cc4:	40020000 	.word	0x40020000
 8004cc8:	20000180 	.word	0x20000180
 8004ccc:	40026458 	.word	0x40026458
 8004cd0:	200001e0 	.word	0x200001e0
 8004cd4:	400264a0 	.word	0x400264a0

08004cd8 <BSP_SD_Detect_MspInit>:
  * @brief  Initializes the SD Detect pin MSP.
  * @param  hsd: SD handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b088      	sub	sp, #32
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Params);
  
  SD_DETECT_GPIO_CLK_ENABLE();
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60bb      	str	r3, [r7, #8]
 8004ce6:	4b0f      	ldr	r3, [pc, #60]	; (8004d24 <BSP_SD_Detect_MspInit+0x4c>)
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cea:	4a0e      	ldr	r2, [pc, #56]	; (8004d24 <BSP_SD_Detect_MspInit+0x4c>)
 8004cec:	f043 0320 	orr.w	r3, r3, #32
 8004cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8004cf2:	4b0c      	ldr	r3, [pc, #48]	; (8004d24 <BSP_SD_Detect_MspInit+0x4c>)
 8004cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf6:	f003 0320 	and.w	r3, r3, #32
 8004cfa:	60bb      	str	r3, [r7, #8]
 8004cfc:	68bb      	ldr	r3, [r7, #8]

  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin       = SD_DETECT_PIN;
 8004cfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d02:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8004d04:	2300      	movs	r3, #0
 8004d06:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8004d10:	f107 030c 	add.w	r3, r7, #12
 8004d14:	4619      	mov	r1, r3
 8004d16:	4804      	ldr	r0, [pc, #16]	; (8004d28 <BSP_SD_Detect_MspInit+0x50>)
 8004d18:	f001 f896 	bl	8005e48 <HAL_GPIO_Init>
}
 8004d1c:	bf00      	nop
 8004d1e:	3720      	adds	r7, #32
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40023800 	.word	0x40023800
 8004d28:	40021400 	.word	0x40021400

08004d2c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
  return((HAL_SD_GetCardState(&uSdHandle) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004d30:	4805      	ldr	r0, [pc, #20]	; (8004d48 <BSP_SD_GetCardState+0x1c>)
 8004d32:	f005 fca9 	bl	800a688 <HAL_SD_GetCardState>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b04      	cmp	r3, #4
 8004d3a:	bf14      	ite	ne
 8004d3c:	2301      	movne	r3, #1
 8004d3e:	2300      	moveq	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	2003dd0c 	.word	0x2003dd0c

08004d4c <BSP_SD_GetCardInfo>:
/**
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	4803      	ldr	r0, [pc, #12]	; (8004d64 <BSP_SD_GetCardInfo+0x18>)
 8004d58:	f005 fbee 	bl	800a538 <HAL_SD_GetCardInfo>
}
 8004d5c:	bf00      	nop
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	2003dd0c 	.word	0x2003dd0c

08004d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d6c:	4b0e      	ldr	r3, [pc, #56]	; (8004da8 <HAL_Init+0x40>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a0d      	ldr	r2, [pc, #52]	; (8004da8 <HAL_Init+0x40>)
 8004d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d78:	4b0b      	ldr	r3, [pc, #44]	; (8004da8 <HAL_Init+0x40>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a0a      	ldr	r2, [pc, #40]	; (8004da8 <HAL_Init+0x40>)
 8004d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d84:	4b08      	ldr	r3, [pc, #32]	; (8004da8 <HAL_Init+0x40>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a07      	ldr	r2, [pc, #28]	; (8004da8 <HAL_Init+0x40>)
 8004d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d90:	2003      	movs	r0, #3
 8004d92:	f000 fb6c 	bl	800546e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d96:	2000      	movs	r0, #0
 8004d98:	f7fe fbb6 	bl	8003508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d9c:	f7fd fe3e 	bl	8002a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	40023c00 	.word	0x40023c00

08004dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004db0:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <HAL_IncTick+0x20>)
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	461a      	mov	r2, r3
 8004db6:	4b06      	ldr	r3, [pc, #24]	; (8004dd0 <HAL_IncTick+0x24>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4413      	add	r3, r2
 8004dbc:	4a04      	ldr	r2, [pc, #16]	; (8004dd0 <HAL_IncTick+0x24>)
 8004dbe:	6013      	str	r3, [r2, #0]
}
 8004dc0:	bf00      	nop
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	2000009c 	.word	0x2000009c
 8004dd0:	2003dd90 	.word	0x2003dd90

08004dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8004dd8:	4b03      	ldr	r3, [pc, #12]	; (8004de8 <HAL_GetTick+0x14>)
 8004dda:	681b      	ldr	r3, [r3, #0]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	2003dd90 	.word	0x2003dd90

08004dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004df4:	f7ff ffee 	bl	8004dd4 <HAL_GetTick>
 8004df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e04:	d005      	beq.n	8004e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e06:	4b09      	ldr	r3, [pc, #36]	; (8004e2c <HAL_Delay+0x40>)
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4413      	add	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004e12:	bf00      	nop
 8004e14:	f7ff ffde 	bl	8004dd4 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d8f7      	bhi.n	8004e14 <HAL_Delay+0x28>
  {
  }
}
 8004e24:	bf00      	nop
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	2000009c 	.word	0x2000009c

08004e30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e033      	b.n	8004eae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d109      	bne.n	8004e62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7fd fe0c 	bl	8002a6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f003 0310 	and.w	r3, r3, #16
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d118      	bne.n	8004ea0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004e76:	f023 0302 	bic.w	r3, r3, #2
 8004e7a:	f043 0202 	orr.w	r2, r3, #2
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f94a 	bl	800511c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e92:	f023 0303 	bic.w	r3, r3, #3
 8004e96:	f043 0201 	orr.w	r2, r3, #1
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	641a      	str	r2, [r3, #64]	; 0x40
 8004e9e:	e001      	b.n	8004ea4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
	...

08004eb8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_ADC_ConfigChannel+0x1c>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e113      	b.n	80050fc <HAL_ADC_ConfigChannel+0x244>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b09      	cmp	r3, #9
 8004ee2:	d925      	bls.n	8004f30 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68d9      	ldr	r1, [r3, #12]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	4413      	add	r3, r2
 8004ef8:	3b1e      	subs	r3, #30
 8004efa:	2207      	movs	r2, #7
 8004efc:	fa02 f303 	lsl.w	r3, r2, r3
 8004f00:	43da      	mvns	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	400a      	ands	r2, r1
 8004f08:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68d9      	ldr	r1, [r3, #12]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	4403      	add	r3, r0
 8004f22:	3b1e      	subs	r3, #30
 8004f24:	409a      	lsls	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	60da      	str	r2, [r3, #12]
 8004f2e:	e022      	b.n	8004f76 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6919      	ldr	r1, [r3, #16]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	4613      	mov	r3, r2
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	4413      	add	r3, r2
 8004f44:	2207      	movs	r2, #7
 8004f46:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4a:	43da      	mvns	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	400a      	ands	r2, r1
 8004f52:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6919      	ldr	r1, [r3, #16]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	689a      	ldr	r2, [r3, #8]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	4618      	mov	r0, r3
 8004f66:	4603      	mov	r3, r0
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	4403      	add	r3, r0
 8004f6c:	409a      	lsls	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2b06      	cmp	r3, #6
 8004f7c:	d824      	bhi.n	8004fc8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	3b05      	subs	r3, #5
 8004f90:	221f      	movs	r2, #31
 8004f92:	fa02 f303 	lsl.w	r3, r2, r3
 8004f96:	43da      	mvns	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	400a      	ands	r2, r1
 8004f9e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	4618      	mov	r0, r3
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4413      	add	r3, r2
 8004fb8:	3b05      	subs	r3, #5
 8004fba:	fa00 f203 	lsl.w	r2, r0, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	635a      	str	r2, [r3, #52]	; 0x34
 8004fc6:	e04c      	b.n	8005062 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2b0c      	cmp	r3, #12
 8004fce:	d824      	bhi.n	800501a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	3b23      	subs	r3, #35	; 0x23
 8004fe2:	221f      	movs	r2, #31
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	43da      	mvns	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	400a      	ands	r2, r1
 8004ff0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	4618      	mov	r0, r3
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	4613      	mov	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	3b23      	subs	r3, #35	; 0x23
 800500c:	fa00 f203 	lsl.w	r2, r0, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	430a      	orrs	r2, r1
 8005016:	631a      	str	r2, [r3, #48]	; 0x30
 8005018:	e023      	b.n	8005062 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	4613      	mov	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	3b41      	subs	r3, #65	; 0x41
 800502c:	221f      	movs	r2, #31
 800502e:	fa02 f303 	lsl.w	r3, r2, r3
 8005032:	43da      	mvns	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	400a      	ands	r2, r1
 800503a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	b29b      	uxth	r3, r3
 8005048:	4618      	mov	r0, r3
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	4613      	mov	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	3b41      	subs	r3, #65	; 0x41
 8005056:	fa00 f203 	lsl.w	r2, r0, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005062:	4b29      	ldr	r3, [pc, #164]	; (8005108 <HAL_ADC_ConfigChannel+0x250>)
 8005064:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a28      	ldr	r2, [pc, #160]	; (800510c <HAL_ADC_ConfigChannel+0x254>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d10f      	bne.n	8005090 <HAL_ADC_ConfigChannel+0x1d8>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b12      	cmp	r3, #18
 8005076:	d10b      	bne.n	8005090 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a1d      	ldr	r2, [pc, #116]	; (800510c <HAL_ADC_ConfigChannel+0x254>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d12b      	bne.n	80050f2 <HAL_ADC_ConfigChannel+0x23a>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a1c      	ldr	r2, [pc, #112]	; (8005110 <HAL_ADC_ConfigChannel+0x258>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d003      	beq.n	80050ac <HAL_ADC_ConfigChannel+0x1f4>
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b11      	cmp	r3, #17
 80050aa:	d122      	bne.n	80050f2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a11      	ldr	r2, [pc, #68]	; (8005110 <HAL_ADC_ConfigChannel+0x258>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d111      	bne.n	80050f2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80050ce:	4b11      	ldr	r3, [pc, #68]	; (8005114 <HAL_ADC_ConfigChannel+0x25c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a11      	ldr	r2, [pc, #68]	; (8005118 <HAL_ADC_ConfigChannel+0x260>)
 80050d4:	fba2 2303 	umull	r2, r3, r2, r3
 80050d8:	0c9a      	lsrs	r2, r3, #18
 80050da:	4613      	mov	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4413      	add	r3, r2
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80050e4:	e002      	b.n	80050ec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f9      	bne.n	80050e6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	40012300 	.word	0x40012300
 800510c:	40012000 	.word	0x40012000
 8005110:	10000012 	.word	0x10000012
 8005114:	2000003c 	.word	0x2000003c
 8005118:	431bde83 	.word	0x431bde83

0800511c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005124:	4b79      	ldr	r3, [pc, #484]	; (800530c <ADC_Init+0x1f0>)
 8005126:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	431a      	orrs	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005150:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6859      	ldr	r1, [r3, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	021a      	lsls	r2, r3, #8
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005174:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6859      	ldr	r1, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005196:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6899      	ldr	r1, [r3, #8]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68da      	ldr	r2, [r3, #12]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ae:	4a58      	ldr	r2, [pc, #352]	; (8005310 <ADC_Init+0x1f4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d022      	beq.n	80051fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689a      	ldr	r2, [r3, #8]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80051c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6899      	ldr	r1, [r3, #8]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689a      	ldr	r2, [r3, #8]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80051e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6899      	ldr	r1, [r3, #8]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	609a      	str	r2, [r3, #8]
 80051f8:	e00f      	b.n	800521a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005208:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005218:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 0202 	bic.w	r2, r2, #2
 8005228:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6899      	ldr	r1, [r3, #8]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	7e1b      	ldrb	r3, [r3, #24]
 8005234:	005a      	lsls	r2, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d01b      	beq.n	8005280 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005256:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005266:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6859      	ldr	r1, [r3, #4]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	3b01      	subs	r3, #1
 8005274:	035a      	lsls	r2, r3, #13
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	605a      	str	r2, [r3, #4]
 800527e:	e007      	b.n	8005290 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800528e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800529e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	051a      	lsls	r2, r3, #20
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80052c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6899      	ldr	r1, [r3, #8]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80052d2:	025a      	lsls	r2, r3, #9
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689a      	ldr	r2, [r3, #8]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6899      	ldr	r1, [r3, #8]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	029a      	lsls	r2, r3, #10
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	609a      	str	r2, [r3, #8]
}
 8005300:	bf00      	nop
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	40012300 	.word	0x40012300
 8005310:	0f000001 	.word	0x0f000001

08005314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005324:	4b0c      	ldr	r3, [pc, #48]	; (8005358 <__NVIC_SetPriorityGrouping+0x44>)
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005330:	4013      	ands	r3, r2
 8005332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800533c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005346:	4a04      	ldr	r2, [pc, #16]	; (8005358 <__NVIC_SetPriorityGrouping+0x44>)
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	60d3      	str	r3, [r2, #12]
}
 800534c:	bf00      	nop
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	e000ed00 	.word	0xe000ed00

0800535c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005360:	4b04      	ldr	r3, [pc, #16]	; (8005374 <__NVIC_GetPriorityGrouping+0x18>)
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	0a1b      	lsrs	r3, r3, #8
 8005366:	f003 0307 	and.w	r3, r3, #7
}
 800536a:	4618      	mov	r0, r3
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	e000ed00 	.word	0xe000ed00

08005378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	4603      	mov	r3, r0
 8005380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005386:	2b00      	cmp	r3, #0
 8005388:	db0b      	blt.n	80053a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800538a:	79fb      	ldrb	r3, [r7, #7]
 800538c:	f003 021f 	and.w	r2, r3, #31
 8005390:	4907      	ldr	r1, [pc, #28]	; (80053b0 <__NVIC_EnableIRQ+0x38>)
 8005392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005396:	095b      	lsrs	r3, r3, #5
 8005398:	2001      	movs	r0, #1
 800539a:	fa00 f202 	lsl.w	r2, r0, r2
 800539e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80053a2:	bf00      	nop
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	e000e100 	.word	0xe000e100

080053b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	4603      	mov	r3, r0
 80053bc:	6039      	str	r1, [r7, #0]
 80053be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	db0a      	blt.n	80053de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	490c      	ldr	r1, [pc, #48]	; (8005400 <__NVIC_SetPriority+0x4c>)
 80053ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053d2:	0112      	lsls	r2, r2, #4
 80053d4:	b2d2      	uxtb	r2, r2
 80053d6:	440b      	add	r3, r1
 80053d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053dc:	e00a      	b.n	80053f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	4908      	ldr	r1, [pc, #32]	; (8005404 <__NVIC_SetPriority+0x50>)
 80053e4:	79fb      	ldrb	r3, [r7, #7]
 80053e6:	f003 030f 	and.w	r3, r3, #15
 80053ea:	3b04      	subs	r3, #4
 80053ec:	0112      	lsls	r2, r2, #4
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	440b      	add	r3, r1
 80053f2:	761a      	strb	r2, [r3, #24]
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	e000e100 	.word	0xe000e100
 8005404:	e000ed00 	.word	0xe000ed00

08005408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005408:	b480      	push	{r7}
 800540a:	b089      	sub	sp, #36	; 0x24
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	f1c3 0307 	rsb	r3, r3, #7
 8005422:	2b04      	cmp	r3, #4
 8005424:	bf28      	it	cs
 8005426:	2304      	movcs	r3, #4
 8005428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	3304      	adds	r3, #4
 800542e:	2b06      	cmp	r3, #6
 8005430:	d902      	bls.n	8005438 <NVIC_EncodePriority+0x30>
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	3b03      	subs	r3, #3
 8005436:	e000      	b.n	800543a <NVIC_EncodePriority+0x32>
 8005438:	2300      	movs	r3, #0
 800543a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800543c:	f04f 32ff 	mov.w	r2, #4294967295
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	fa02 f303 	lsl.w	r3, r2, r3
 8005446:	43da      	mvns	r2, r3
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	401a      	ands	r2, r3
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005450:	f04f 31ff 	mov.w	r1, #4294967295
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	fa01 f303 	lsl.w	r3, r1, r3
 800545a:	43d9      	mvns	r1, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005460:	4313      	orrs	r3, r2
         );
}
 8005462:	4618      	mov	r0, r3
 8005464:	3724      	adds	r7, #36	; 0x24
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b082      	sub	sp, #8
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7ff ff4c 	bl	8005314 <__NVIC_SetPriorityGrouping>
}
 800547c:	bf00      	nop
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	4603      	mov	r3, r0
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
 8005490:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005492:	2300      	movs	r3, #0
 8005494:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005496:	f7ff ff61 	bl	800535c <__NVIC_GetPriorityGrouping>
 800549a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	68b9      	ldr	r1, [r7, #8]
 80054a0:	6978      	ldr	r0, [r7, #20]
 80054a2:	f7ff ffb1 	bl	8005408 <NVIC_EncodePriority>
 80054a6:	4602      	mov	r2, r0
 80054a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054ac:	4611      	mov	r1, r2
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7ff ff80 	bl	80053b4 <__NVIC_SetPriority>
}
 80054b4:	bf00      	nop
 80054b6:	3718      	adds	r7, #24
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	4603      	mov	r3, r0
 80054c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7ff ff54 	bl	8005378 <__NVIC_EnableIRQ>
}
 80054d0:	bf00      	nop
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e014      	b.n	8005514 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	791b      	ldrb	r3, [r3, #4]
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d105      	bne.n	8005500 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7fd fb32 	bl	8002b64 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800552a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800552e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005532:	d118      	bne.n	8005566 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2204      	movs	r2, #4
 8005538:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f043 0201 	orr.w	r2, r3, #1
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800554e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800555e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f825 	bl	80055b0 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005574:	d118      	bne.n	80055a8 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2204      	movs	r2, #4
 800557a:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	f043 0202 	orr.w	r2, r3, #2
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005590:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80055a0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f85b 	bl	800565e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 80055a8:	bf00      	nop
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	617b      	str	r3, [r7, #20]
 80055d4:	2300      	movs	r3, #0
 80055d6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	795b      	ldrb	r3, [r3, #5]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <HAL_DAC_ConfigChannel+0x20>
 80055e0:	2302      	movs	r3, #2
 80055e2:	e036      	b.n	8005652 <HAL_DAC_ConfigChannel+0x8e>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2201      	movs	r2, #1
 80055e8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2202      	movs	r2, #2
 80055ee:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80055f8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005602:	43db      	mvns	r3, r3
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	4013      	ands	r3, r2
 8005608:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	fa02 f303 	lsl.w	r3, r2, r3
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	4313      	orrs	r3, r2
 8005622:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6819      	ldr	r1, [r3, #0]
 8005632:	22c0      	movs	r2, #192	; 0xc0
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	fa02 f303 	lsl.w	r3, r2, r3
 800563a:	43da      	mvns	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	400a      	ands	r2, r1
 8005642:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2201      	movs	r2, #1
 8005648:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	371c      	adds	r7, #28
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
	...

08005674 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e0cf      	b.n	8005826 <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a69      	ldr	r2, [pc, #420]	; (8005830 <HAL_DFSDM_ChannelInit+0x1bc>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d00e      	beq.n	80056ae <HAL_DFSDM_ChannelInit+0x3a>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a67      	ldr	r2, [pc, #412]	; (8005834 <HAL_DFSDM_ChannelInit+0x1c0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d009      	beq.n	80056ae <HAL_DFSDM_ChannelInit+0x3a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a66      	ldr	r2, [pc, #408]	; (8005838 <HAL_DFSDM_ChannelInit+0x1c4>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d004      	beq.n	80056ae <HAL_DFSDM_ChannelInit+0x3a>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a64      	ldr	r2, [pc, #400]	; (800583c <HAL_DFSDM_ChannelInit+0x1c8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d106      	bne.n	80056bc <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 80056ae:	4b64      	ldr	r3, [pc, #400]	; (8005840 <HAL_DFSDM_ChannelInit+0x1cc>)
 80056b0:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 80056b2:	4b64      	ldr	r3, [pc, #400]	; (8005844 <HAL_DFSDM_ChannelInit+0x1d0>)
 80056b4:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 80056b6:	4b5e      	ldr	r3, [pc, #376]	; (8005830 <HAL_DFSDM_ChannelInit+0x1bc>)
 80056b8:	60fb      	str	r3, [r7, #12]
 80056ba:	e005      	b.n	80056c8 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 80056bc:	4b62      	ldr	r3, [pc, #392]	; (8005848 <HAL_DFSDM_ChannelInit+0x1d4>)
 80056be:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 80056c0:	4b62      	ldr	r3, [pc, #392]	; (800584c <HAL_DFSDM_ChannelInit+0x1d8>)
 80056c2:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 80056c4:	4b62      	ldr	r3, [pc, #392]	; (8005850 <HAL_DFSDM_ChannelInit+0x1dc>)
 80056c6:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f000 f8c1 	bl	8005854 <DFSDM_GetChannelFromInstance>
 80056d2:	4603      	mov	r3, r0
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	4413      	add	r3, r2
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e0a0      	b.n	8005826 <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7fd fa89 	bl	8002bfc <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	1c5a      	adds	r2, r3, #1
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d125      	bne.n	8005748 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	431a      	orrs	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	791b      	ldrb	r3, [r3, #4]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d108      	bne.n	800573c <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	3b01      	subs	r3, #1
 8005734:	041b      	lsls	r3, r3, #16
 8005736:	431a      	orrs	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8005756:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6819      	ldr	r1, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8005766:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 800576c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 020f 	bic.w	r2, r2, #15
 8005784:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6819      	ldr	r1, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8005794:	431a      	orrs	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80057ac:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6899      	ldr	r1, [r3, #8]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057bc:	3b01      	subs	r3, #1
 80057be:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80057c0:	431a      	orrs	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f002 0207 	and.w	r2, r2, #7
 80057d8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6859      	ldr	r1, [r3, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ea:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80057ec:	431a      	orrs	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005804:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4618      	mov	r0, r3
 8005814:	f000 f81e 	bl	8005854 <DFSDM_GetChannelFromInstance>
 8005818:	4603      	mov	r3, r0
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	4413      	add	r3, r2
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	40016000 	.word	0x40016000
 8005834:	40016020 	.word	0x40016020
 8005838:	40016040 	.word	0x40016040
 800583c:	40016060 	.word	0x40016060
 8005840:	20000240 	.word	0x20000240
 8005844:	20000244 	.word	0x20000244
 8005848:	20000254 	.word	0x20000254
 800584c:	20000258 	.word	0x20000258
 8005850:	40016400 	.word	0x40016400

08005854 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a24      	ldr	r2, [pc, #144]	; (80058f0 <DFSDM_GetChannelFromInstance+0x9c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d003      	beq.n	800586c <DFSDM_GetChannelFromInstance+0x18>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a23      	ldr	r2, [pc, #140]	; (80058f4 <DFSDM_GetChannelFromInstance+0xa0>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d102      	bne.n	8005872 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	e037      	b.n	80058e2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a20      	ldr	r2, [pc, #128]	; (80058f8 <DFSDM_GetChannelFromInstance+0xa4>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d003      	beq.n	8005882 <DFSDM_GetChannelFromInstance+0x2e>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a1f      	ldr	r2, [pc, #124]	; (80058fc <DFSDM_GetChannelFromInstance+0xa8>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d102      	bne.n	8005888 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8005882:	2301      	movs	r3, #1
 8005884:	60fb      	str	r3, [r7, #12]
 8005886:	e02c      	b.n	80058e2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a1d      	ldr	r2, [pc, #116]	; (8005900 <DFSDM_GetChannelFromInstance+0xac>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d003      	beq.n	8005898 <DFSDM_GetChannelFromInstance+0x44>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a1c      	ldr	r2, [pc, #112]	; (8005904 <DFSDM_GetChannelFromInstance+0xb0>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d102      	bne.n	800589e <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8005898:	2302      	movs	r3, #2
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	e021      	b.n	80058e2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a19      	ldr	r2, [pc, #100]	; (8005908 <DFSDM_GetChannelFromInstance+0xb4>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d003      	beq.n	80058ae <DFSDM_GetChannelFromInstance+0x5a>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a18      	ldr	r2, [pc, #96]	; (800590c <DFSDM_GetChannelFromInstance+0xb8>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d102      	bne.n	80058b4 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 80058ae:	2303      	movs	r3, #3
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	e016      	b.n	80058e2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a16      	ldr	r2, [pc, #88]	; (8005910 <DFSDM_GetChannelFromInstance+0xbc>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d102      	bne.n	80058c2 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 80058bc:	2304      	movs	r3, #4
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	e00f      	b.n	80058e2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a13      	ldr	r2, [pc, #76]	; (8005914 <DFSDM_GetChannelFromInstance+0xc0>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d102      	bne.n	80058d0 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 80058ca:	2305      	movs	r3, #5
 80058cc:	60fb      	str	r3, [r7, #12]
 80058ce:	e008      	b.n	80058e2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a11      	ldr	r2, [pc, #68]	; (8005918 <DFSDM_GetChannelFromInstance+0xc4>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d102      	bne.n	80058de <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 80058d8:	2306      	movs	r3, #6
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	e001      	b.n	80058e2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 80058de:	2307      	movs	r3, #7
 80058e0:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 80058e2:	68fb      	ldr	r3, [r7, #12]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	40016000 	.word	0x40016000
 80058f4:	40016400 	.word	0x40016400
 80058f8:	40016020 	.word	0x40016020
 80058fc:	40016420 	.word	0x40016420
 8005900:	40016040 	.word	0x40016040
 8005904:	40016440 	.word	0x40016440
 8005908:	40016060 	.word	0x40016060
 800590c:	40016460 	.word	0x40016460
 8005910:	40016480 	.word	0x40016480
 8005914:	400164a0 	.word	0x400164a0
 8005918:	400164c0 	.word	0x400164c0

0800591c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005924:	2300      	movs	r3, #0
 8005926:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005928:	f7ff fa54 	bl	8004dd4 <HAL_GetTick>
 800592c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d101      	bne.n	8005938 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e099      	b.n	8005a6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f022 0201 	bic.w	r2, r2, #1
 8005956:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005958:	e00f      	b.n	800597a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800595a:	f7ff fa3b 	bl	8004dd4 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	2b05      	cmp	r3, #5
 8005966:	d908      	bls.n	800597a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2220      	movs	r2, #32
 800596c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2203      	movs	r2, #3
 8005972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e078      	b.n	8005a6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1e8      	bne.n	800595a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	4b38      	ldr	r3, [pc, #224]	; (8005a74 <HAL_DMA_Init+0x158>)
 8005994:	4013      	ands	r3, r2
 8005996:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a1b      	ldr	r3, [r3, #32]
 80059c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	2b04      	cmp	r3, #4
 80059d2:	d107      	bne.n	80059e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059dc:	4313      	orrs	r3, r2
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f023 0307 	bic.w	r3, r3, #7
 80059fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	d117      	bne.n	8005a3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00e      	beq.n	8005a3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f8bd 	bl	8005ba0 <DMA_CheckFifoParam>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d008      	beq.n	8005a3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2240      	movs	r2, #64	; 0x40
 8005a30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e016      	b.n	8005a6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f874 	bl	8005b34 <DMA_CalcBaseAndBitshift>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a54:	223f      	movs	r2, #63	; 0x3f
 8005a56:	409a      	lsls	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3718      	adds	r7, #24
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	e010803f 	.word	0xe010803f

08005a78 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e050      	b.n	8005b2c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d101      	bne.n	8005a9a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005a96:	2302      	movs	r3, #2
 8005a98:	e048      	b.n	8005b2c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 0201 	bic.w	r2, r2, #1
 8005aa8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2221      	movs	r2, #33	; 0x21
 8005ad8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f82a 	bl	8005b34 <DMA_CalcBaseAndBitshift>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b0c:	223f      	movs	r2, #63	; 0x3f
 8005b0e:	409a      	lsls	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	3b10      	subs	r3, #16
 8005b44:	4a14      	ldr	r2, [pc, #80]	; (8005b98 <DMA_CalcBaseAndBitshift+0x64>)
 8005b46:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4a:	091b      	lsrs	r3, r3, #4
 8005b4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005b4e:	4a13      	ldr	r2, [pc, #76]	; (8005b9c <DMA_CalcBaseAndBitshift+0x68>)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	4413      	add	r3, r2
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	461a      	mov	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2b03      	cmp	r3, #3
 8005b60:	d909      	bls.n	8005b76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b6a:	f023 0303 	bic.w	r3, r3, #3
 8005b6e:	1d1a      	adds	r2, r3, #4
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	659a      	str	r2, [r3, #88]	; 0x58
 8005b74:	e007      	b.n	8005b86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b7e:	f023 0303 	bic.w	r3, r3, #3
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	aaaaaaab 	.word	0xaaaaaaab
 8005b9c:	08018ed8 	.word	0x08018ed8

08005ba0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d11f      	bne.n	8005bfa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2b03      	cmp	r3, #3
 8005bbe:	d855      	bhi.n	8005c6c <DMA_CheckFifoParam+0xcc>
 8005bc0:	a201      	add	r2, pc, #4	; (adr r2, 8005bc8 <DMA_CheckFifoParam+0x28>)
 8005bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc6:	bf00      	nop
 8005bc8:	08005bd9 	.word	0x08005bd9
 8005bcc:	08005beb 	.word	0x08005beb
 8005bd0:	08005bd9 	.word	0x08005bd9
 8005bd4:	08005c6d 	.word	0x08005c6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d045      	beq.n	8005c70 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005be8:	e042      	b.n	8005c70 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005bf2:	d13f      	bne.n	8005c74 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bf8:	e03c      	b.n	8005c74 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c02:	d121      	bne.n	8005c48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2b03      	cmp	r3, #3
 8005c08:	d836      	bhi.n	8005c78 <DMA_CheckFifoParam+0xd8>
 8005c0a:	a201      	add	r2, pc, #4	; (adr r2, 8005c10 <DMA_CheckFifoParam+0x70>)
 8005c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c10:	08005c21 	.word	0x08005c21
 8005c14:	08005c27 	.word	0x08005c27
 8005c18:	08005c21 	.word	0x08005c21
 8005c1c:	08005c39 	.word	0x08005c39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	73fb      	strb	r3, [r7, #15]
      break;
 8005c24:	e02f      	b.n	8005c86 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d024      	beq.n	8005c7c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c36:	e021      	b.n	8005c7c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c40:	d11e      	bne.n	8005c80 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005c46:	e01b      	b.n	8005c80 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d902      	bls.n	8005c54 <DMA_CheckFifoParam+0xb4>
 8005c4e:	2b03      	cmp	r3, #3
 8005c50:	d003      	beq.n	8005c5a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005c52:	e018      	b.n	8005c86 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	73fb      	strb	r3, [r7, #15]
      break;
 8005c58:	e015      	b.n	8005c86 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00e      	beq.n	8005c84 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	73fb      	strb	r3, [r7, #15]
      break;
 8005c6a:	e00b      	b.n	8005c84 <DMA_CheckFifoParam+0xe4>
      break;
 8005c6c:	bf00      	nop
 8005c6e:	e00a      	b.n	8005c86 <DMA_CheckFifoParam+0xe6>
      break;
 8005c70:	bf00      	nop
 8005c72:	e008      	b.n	8005c86 <DMA_CheckFifoParam+0xe6>
      break;
 8005c74:	bf00      	nop
 8005c76:	e006      	b.n	8005c86 <DMA_CheckFifoParam+0xe6>
      break;
 8005c78:	bf00      	nop
 8005c7a:	e004      	b.n	8005c86 <DMA_CheckFifoParam+0xe6>
      break;
 8005c7c:	bf00      	nop
 8005c7e:	e002      	b.n	8005c86 <DMA_CheckFifoParam+0xe6>
      break;   
 8005c80:	bf00      	nop
 8005c82:	e000      	b.n	8005c86 <DMA_CheckFifoParam+0xe6>
      break;
 8005c84:	bf00      	nop
    }
  } 
  
  return status; 
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e081      	b.n	8005daa <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d106      	bne.n	8005cc0 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f7fd f8b0 	bl	8002e20 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2224      	movs	r2, #36	; 0x24
 8005cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 0201 	bic.w	r2, r2, #1
 8005cd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ce4:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cf4:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d107      	bne.n	8005d0e <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689a      	ldr	r2, [r3, #8]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d0a:	609a      	str	r2, [r3, #8]
 8005d0c:	e006      	b.n	8005d1c <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	689a      	ldr	r2, [r3, #8]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005d1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d104      	bne.n	8005d2e <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	6812      	ldr	r2, [r2, #0]
 8005d38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d40:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68da      	ldr	r2, [r3, #12]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d50:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	691a      	ldr	r2, [r3, #16]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	ea42 0103 	orr.w	r1, r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	021a      	lsls	r2, r3, #8
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	69d9      	ldr	r1, [r3, #28]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a1a      	ldr	r2, [r3, #32]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f042 0201 	orr.w	r2, r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2220      	movs	r2, #32
 8005d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
 8005dba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b20      	cmp	r3, #32
 8005dc6:	d138      	bne.n	8005e3a <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d101      	bne.n	8005dd6 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	e032      	b.n	8005e3c <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2224      	movs	r2, #36	; 0x24
 8005de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f022 0201 	bic.w	r2, r2, #1
 8005df4:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e04:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6819      	ldr	r1, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f042 0201 	orr.w	r2, r2, #1
 8005e24:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	e000      	b.n	8005e3c <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e3a:	2302      	movs	r3, #2
  }
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b089      	sub	sp, #36	; 0x24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005e56:	2300      	movs	r3, #0
 8005e58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e5e:	2300      	movs	r3, #0
 8005e60:	61fb      	str	r3, [r7, #28]
 8005e62:	e165      	b.n	8006130 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e64:	2201      	movs	r2, #1
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	4013      	ands	r3, r2
 8005e76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	f040 8154 	bne.w	800612a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d00b      	beq.n	8005ea2 <HAL_GPIO_Init+0x5a>
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d007      	beq.n	8005ea2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005e96:	2b11      	cmp	r3, #17
 8005e98:	d003      	beq.n	8005ea2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2b12      	cmp	r3, #18
 8005ea0:	d130      	bne.n	8005f04 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	005b      	lsls	r3, r3, #1
 8005eac:	2203      	movs	r2, #3
 8005eae:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb2:	43db      	mvns	r3, r3
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	68da      	ldr	r2, [r3, #12]
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	69ba      	ldr	r2, [r7, #24]
 8005ed0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ed8:	2201      	movs	r2, #1
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee0:	43db      	mvns	r3, r3
 8005ee2:	69ba      	ldr	r2, [r7, #24]
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	091b      	lsrs	r3, r3, #4
 8005eee:	f003 0201 	and.w	r2, r3, #1
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	005b      	lsls	r3, r3, #1
 8005f0e:	2203      	movs	r2, #3
 8005f10:	fa02 f303 	lsl.w	r3, r2, r3
 8005f14:	43db      	mvns	r3, r3
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	4013      	ands	r3, r2
 8005f1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	689a      	ldr	r2, [r3, #8]
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	fa02 f303 	lsl.w	r3, r2, r3
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d003      	beq.n	8005f44 <HAL_GPIO_Init+0xfc>
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	2b12      	cmp	r3, #18
 8005f42:	d123      	bne.n	8005f8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	08da      	lsrs	r2, r3, #3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3208      	adds	r2, #8
 8005f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	220f      	movs	r2, #15
 8005f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f60:	43db      	mvns	r3, r3
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	4013      	ands	r3, r2
 8005f66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	691a      	ldr	r2, [r3, #16]
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	f003 0307 	and.w	r3, r3, #7
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	fa02 f303 	lsl.w	r3, r2, r3
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	08da      	lsrs	r2, r3, #3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	3208      	adds	r2, #8
 8005f86:	69b9      	ldr	r1, [r7, #24]
 8005f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	005b      	lsls	r3, r3, #1
 8005f96:	2203      	movs	r2, #3
 8005f98:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9c:	43db      	mvns	r3, r3
 8005f9e:	69ba      	ldr	r2, [r7, #24]
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f003 0203 	and.w	r2, r3, #3
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	005b      	lsls	r3, r3, #1
 8005fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb4:	69ba      	ldr	r2, [r7, #24]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 80ae 	beq.w	800612a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	4b5c      	ldr	r3, [pc, #368]	; (8006144 <HAL_GPIO_Init+0x2fc>)
 8005fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd6:	4a5b      	ldr	r2, [pc, #364]	; (8006144 <HAL_GPIO_Init+0x2fc>)
 8005fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8005fde:	4b59      	ldr	r3, [pc, #356]	; (8006144 <HAL_GPIO_Init+0x2fc>)
 8005fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005fea:	4a57      	ldr	r2, [pc, #348]	; (8006148 <HAL_GPIO_Init+0x300>)
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	089b      	lsrs	r3, r3, #2
 8005ff0:	3302      	adds	r3, #2
 8005ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	f003 0303 	and.w	r3, r3, #3
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	220f      	movs	r2, #15
 8006002:	fa02 f303 	lsl.w	r3, r2, r3
 8006006:	43db      	mvns	r3, r3
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	4013      	ands	r3, r2
 800600c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a4e      	ldr	r2, [pc, #312]	; (800614c <HAL_GPIO_Init+0x304>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d025      	beq.n	8006062 <HAL_GPIO_Init+0x21a>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a4d      	ldr	r2, [pc, #308]	; (8006150 <HAL_GPIO_Init+0x308>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d01f      	beq.n	800605e <HAL_GPIO_Init+0x216>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a4c      	ldr	r2, [pc, #304]	; (8006154 <HAL_GPIO_Init+0x30c>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d019      	beq.n	800605a <HAL_GPIO_Init+0x212>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a4b      	ldr	r2, [pc, #300]	; (8006158 <HAL_GPIO_Init+0x310>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d013      	beq.n	8006056 <HAL_GPIO_Init+0x20e>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a4a      	ldr	r2, [pc, #296]	; (800615c <HAL_GPIO_Init+0x314>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d00d      	beq.n	8006052 <HAL_GPIO_Init+0x20a>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a49      	ldr	r2, [pc, #292]	; (8006160 <HAL_GPIO_Init+0x318>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d007      	beq.n	800604e <HAL_GPIO_Init+0x206>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a48      	ldr	r2, [pc, #288]	; (8006164 <HAL_GPIO_Init+0x31c>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d101      	bne.n	800604a <HAL_GPIO_Init+0x202>
 8006046:	2306      	movs	r3, #6
 8006048:	e00c      	b.n	8006064 <HAL_GPIO_Init+0x21c>
 800604a:	2307      	movs	r3, #7
 800604c:	e00a      	b.n	8006064 <HAL_GPIO_Init+0x21c>
 800604e:	2305      	movs	r3, #5
 8006050:	e008      	b.n	8006064 <HAL_GPIO_Init+0x21c>
 8006052:	2304      	movs	r3, #4
 8006054:	e006      	b.n	8006064 <HAL_GPIO_Init+0x21c>
 8006056:	2303      	movs	r3, #3
 8006058:	e004      	b.n	8006064 <HAL_GPIO_Init+0x21c>
 800605a:	2302      	movs	r3, #2
 800605c:	e002      	b.n	8006064 <HAL_GPIO_Init+0x21c>
 800605e:	2301      	movs	r3, #1
 8006060:	e000      	b.n	8006064 <HAL_GPIO_Init+0x21c>
 8006062:	2300      	movs	r3, #0
 8006064:	69fa      	ldr	r2, [r7, #28]
 8006066:	f002 0203 	and.w	r2, r2, #3
 800606a:	0092      	lsls	r2, r2, #2
 800606c:	4093      	lsls	r3, r2
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	4313      	orrs	r3, r2
 8006072:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006074:	4934      	ldr	r1, [pc, #208]	; (8006148 <HAL_GPIO_Init+0x300>)
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	089b      	lsrs	r3, r3, #2
 800607a:	3302      	adds	r3, #2
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006082:	4b39      	ldr	r3, [pc, #228]	; (8006168 <HAL_GPIO_Init+0x320>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	43db      	mvns	r3, r3
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	4013      	ands	r3, r2
 8006090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80060a6:	4a30      	ldr	r2, [pc, #192]	; (8006168 <HAL_GPIO_Init+0x320>)
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80060ac:	4b2e      	ldr	r3, [pc, #184]	; (8006168 <HAL_GPIO_Init+0x320>)
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	43db      	mvns	r3, r3
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	4013      	ands	r3, r2
 80060ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d003      	beq.n	80060d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80060d0:	4a25      	ldr	r2, [pc, #148]	; (8006168 <HAL_GPIO_Init+0x320>)
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80060d6:	4b24      	ldr	r3, [pc, #144]	; (8006168 <HAL_GPIO_Init+0x320>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	43db      	mvns	r3, r3
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	4013      	ands	r3, r2
 80060e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80060fa:	4a1b      	ldr	r2, [pc, #108]	; (8006168 <HAL_GPIO_Init+0x320>)
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006100:	4b19      	ldr	r3, [pc, #100]	; (8006168 <HAL_GPIO_Init+0x320>)
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	43db      	mvns	r3, r3
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	4013      	ands	r3, r2
 800610e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d003      	beq.n	8006124 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	4313      	orrs	r3, r2
 8006122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006124:	4a10      	ldr	r2, [pc, #64]	; (8006168 <HAL_GPIO_Init+0x320>)
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	3301      	adds	r3, #1
 800612e:	61fb      	str	r3, [r7, #28]
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	2b0f      	cmp	r3, #15
 8006134:	f67f ae96 	bls.w	8005e64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006138:	bf00      	nop
 800613a:	3724      	adds	r7, #36	; 0x24
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr
 8006144:	40023800 	.word	0x40023800
 8006148:	40013800 	.word	0x40013800
 800614c:	40020000 	.word	0x40020000
 8006150:	40020400 	.word	0x40020400
 8006154:	40020800 	.word	0x40020800
 8006158:	40020c00 	.word	0x40020c00
 800615c:	40021000 	.word	0x40021000
 8006160:	40021400 	.word	0x40021400
 8006164:	40021800 	.word	0x40021800
 8006168:	40013c00 	.word	0x40013c00

0800616c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	460b      	mov	r3, r1
 8006176:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	691a      	ldr	r2, [r3, #16]
 800617c:	887b      	ldrh	r3, [r7, #2]
 800617e:	4013      	ands	r3, r2
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006184:	2301      	movs	r3, #1
 8006186:	73fb      	strb	r3, [r7, #15]
 8006188:	e001      	b.n	800618e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800618a:	2300      	movs	r3, #0
 800618c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800618e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	460b      	mov	r3, r1
 80061a6:	807b      	strh	r3, [r7, #2]
 80061a8:	4613      	mov	r3, r2
 80061aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80061ac:	787b      	ldrb	r3, [r7, #1]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d003      	beq.n	80061ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061b2:	887a      	ldrh	r2, [r7, #2]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80061b8:	e003      	b.n	80061c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80061ba:	887b      	ldrh	r3, [r7, #2]
 80061bc:	041a      	lsls	r2, r3, #16
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	619a      	str	r2, [r3, #24]
}
 80061c2:	bf00      	nop
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b083      	sub	sp, #12
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	460b      	mov	r3, r1
 80061d8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	695a      	ldr	r2, [r3, #20]
 80061de:	887b      	ldrh	r3, [r7, #2]
 80061e0:	401a      	ands	r2, r3
 80061e2:	887b      	ldrh	r3, [r7, #2]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d104      	bne.n	80061f2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80061e8:	887b      	ldrh	r3, [r7, #2]
 80061ea:	041a      	lsls	r2, r3, #16
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80061f0:	e002      	b.n	80061f8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80061f2:	887a      	ldrh	r2, [r7, #2]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	619a      	str	r2, [r3, #24]
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	4603      	mov	r3, r0
 800620c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800620e:	4b08      	ldr	r3, [pc, #32]	; (8006230 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006210:	695a      	ldr	r2, [r3, #20]
 8006212:	88fb      	ldrh	r3, [r7, #6]
 8006214:	4013      	ands	r3, r2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d006      	beq.n	8006228 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800621a:	4a05      	ldr	r2, [pc, #20]	; (8006230 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800621c:	88fb      	ldrh	r3, [r7, #6]
 800621e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006220:	88fb      	ldrh	r3, [r7, #6]
 8006222:	4618      	mov	r0, r3
 8006224:	f000 f806 	bl	8006234 <HAL_GPIO_EXTI_Callback>
  }
}
 8006228:	bf00      	nop
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	40013c00 	.word	0x40013c00

08006234 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	4603      	mov	r3, r0
 800623c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800624a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800624c:	b08f      	sub	sp, #60	; 0x3c
 800624e:	af0a      	add	r7, sp, #40	; 0x28
 8006250:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d101      	bne.n	800625c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e054      	b.n	8006306 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d106      	bne.n	800627c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f00e fe0c 	bl	8014e94 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2203      	movs	r2, #3
 8006280:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800628c:	2b00      	cmp	r3, #0
 800628e:	d102      	bne.n	8006296 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4618      	mov	r0, r3
 800629c:	f006 fa3a 	bl	800c714 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	603b      	str	r3, [r7, #0]
 80062a6:	687e      	ldr	r6, [r7, #4]
 80062a8:	466d      	mov	r5, sp
 80062aa:	f106 0410 	add.w	r4, r6, #16
 80062ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80062ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80062be:	1d33      	adds	r3, r6, #4
 80062c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062c2:	6838      	ldr	r0, [r7, #0]
 80062c4:	f006 f9b4 	bl	800c630 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2101      	movs	r1, #1
 80062ce:	4618      	mov	r0, r3
 80062d0:	f006 fa31 	bl	800c736 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	603b      	str	r3, [r7, #0]
 80062da:	687e      	ldr	r6, [r7, #4]
 80062dc:	466d      	mov	r5, sp
 80062de:	f106 0410 	add.w	r4, r6, #16
 80062e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80062ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80062f2:	1d33      	adds	r3, r6, #4
 80062f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062f6:	6838      	ldr	r0, [r7, #0]
 80062f8:	f006 fb44 	bl	800c984 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800630e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800630e:	b590      	push	{r4, r7, lr}
 8006310:	b089      	sub	sp, #36	; 0x24
 8006312:	af04      	add	r7, sp, #16
 8006314:	6078      	str	r0, [r7, #4]
 8006316:	4608      	mov	r0, r1
 8006318:	4611      	mov	r1, r2
 800631a:	461a      	mov	r2, r3
 800631c:	4603      	mov	r3, r0
 800631e:	70fb      	strb	r3, [r7, #3]
 8006320:	460b      	mov	r3, r1
 8006322:	70bb      	strb	r3, [r7, #2]
 8006324:	4613      	mov	r3, r2
 8006326:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800632e:	2b01      	cmp	r3, #1
 8006330:	d101      	bne.n	8006336 <HAL_HCD_HC_Init+0x28>
 8006332:	2302      	movs	r3, #2
 8006334:	e07f      	b.n	8006436 <HAL_HCD_HC_Init+0x128>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800633e:	78fa      	ldrb	r2, [r7, #3]
 8006340:	6879      	ldr	r1, [r7, #4]
 8006342:	4613      	mov	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	00db      	lsls	r3, r3, #3
 800634a:	440b      	add	r3, r1
 800634c:	333d      	adds	r3, #61	; 0x3d
 800634e:	2200      	movs	r2, #0
 8006350:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8006352:	78fa      	ldrb	r2, [r7, #3]
 8006354:	6879      	ldr	r1, [r7, #4]
 8006356:	4613      	mov	r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4413      	add	r3, r2
 800635c:	00db      	lsls	r3, r3, #3
 800635e:	440b      	add	r3, r1
 8006360:	3338      	adds	r3, #56	; 0x38
 8006362:	787a      	ldrb	r2, [r7, #1]
 8006364:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8006366:	78fa      	ldrb	r2, [r7, #3]
 8006368:	6879      	ldr	r1, [r7, #4]
 800636a:	4613      	mov	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	00db      	lsls	r3, r3, #3
 8006372:	440b      	add	r3, r1
 8006374:	3340      	adds	r3, #64	; 0x40
 8006376:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006378:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800637a:	78fa      	ldrb	r2, [r7, #3]
 800637c:	6879      	ldr	r1, [r7, #4]
 800637e:	4613      	mov	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	00db      	lsls	r3, r3, #3
 8006386:	440b      	add	r3, r1
 8006388:	3339      	adds	r3, #57	; 0x39
 800638a:	78fa      	ldrb	r2, [r7, #3]
 800638c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800638e:	78fa      	ldrb	r2, [r7, #3]
 8006390:	6879      	ldr	r1, [r7, #4]
 8006392:	4613      	mov	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	440b      	add	r3, r1
 800639c:	333f      	adds	r3, #63	; 0x3f
 800639e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80063a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80063a4:	78fa      	ldrb	r2, [r7, #3]
 80063a6:	78bb      	ldrb	r3, [r7, #2]
 80063a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063ac:	b2d8      	uxtb	r0, r3
 80063ae:	6879      	ldr	r1, [r7, #4]
 80063b0:	4613      	mov	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	00db      	lsls	r3, r3, #3
 80063b8:	440b      	add	r3, r1
 80063ba:	333a      	adds	r3, #58	; 0x3a
 80063bc:	4602      	mov	r2, r0
 80063be:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80063c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	da0a      	bge.n	80063de <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80063c8:	78fa      	ldrb	r2, [r7, #3]
 80063ca:	6879      	ldr	r1, [r7, #4]
 80063cc:	4613      	mov	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	00db      	lsls	r3, r3, #3
 80063d4:	440b      	add	r3, r1
 80063d6:	333b      	adds	r3, #59	; 0x3b
 80063d8:	2201      	movs	r2, #1
 80063da:	701a      	strb	r2, [r3, #0]
 80063dc:	e009      	b.n	80063f2 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80063de:	78fa      	ldrb	r2, [r7, #3]
 80063e0:	6879      	ldr	r1, [r7, #4]
 80063e2:	4613      	mov	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4413      	add	r3, r2
 80063e8:	00db      	lsls	r3, r3, #3
 80063ea:	440b      	add	r3, r1
 80063ec:	333b      	adds	r3, #59	; 0x3b
 80063ee:	2200      	movs	r2, #0
 80063f0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80063f2:	78fa      	ldrb	r2, [r7, #3]
 80063f4:	6879      	ldr	r1, [r7, #4]
 80063f6:	4613      	mov	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	440b      	add	r3, r1
 8006400:	333c      	adds	r3, #60	; 0x3c
 8006402:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006406:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6818      	ldr	r0, [r3, #0]
 800640c:	787c      	ldrb	r4, [r7, #1]
 800640e:	78ba      	ldrb	r2, [r7, #2]
 8006410:	78f9      	ldrb	r1, [r7, #3]
 8006412:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006414:	9302      	str	r3, [sp, #8]
 8006416:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800641a:	9301      	str	r3, [sp, #4]
 800641c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	4623      	mov	r3, r4
 8006424:	f006 fc2a 	bl	800cc7c <USB_HC_Init>
 8006428:	4603      	mov	r3, r0
 800642a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8006434:	7bfb      	ldrb	r3, [r7, #15]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3714      	adds	r7, #20
 800643a:	46bd      	mov	sp, r7
 800643c:	bd90      	pop	{r4, r7, pc}

0800643e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b084      	sub	sp, #16
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	460b      	mov	r3, r1
 8006448:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8006454:	2b01      	cmp	r3, #1
 8006456:	d101      	bne.n	800645c <HAL_HCD_HC_Halt+0x1e>
 8006458:	2302      	movs	r3, #2
 800645a:	e00f      	b.n	800647c <HAL_HCD_HC_Halt+0x3e>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	78fa      	ldrb	r2, [r7, #3]
 800646a:	4611      	mov	r1, r2
 800646c:	4618      	mov	r0, r3
 800646e:	f006 fe66 	bl	800d13e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800647a:	7bfb      	ldrb	r3, [r7, #15]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	4608      	mov	r0, r1
 800648e:	4611      	mov	r1, r2
 8006490:	461a      	mov	r2, r3
 8006492:	4603      	mov	r3, r0
 8006494:	70fb      	strb	r3, [r7, #3]
 8006496:	460b      	mov	r3, r1
 8006498:	70bb      	strb	r3, [r7, #2]
 800649a:	4613      	mov	r3, r2
 800649c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800649e:	78fa      	ldrb	r2, [r7, #3]
 80064a0:	6879      	ldr	r1, [r7, #4]
 80064a2:	4613      	mov	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	00db      	lsls	r3, r3, #3
 80064aa:	440b      	add	r3, r1
 80064ac:	333b      	adds	r3, #59	; 0x3b
 80064ae:	78ba      	ldrb	r2, [r7, #2]
 80064b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80064b2:	78fa      	ldrb	r2, [r7, #3]
 80064b4:	6879      	ldr	r1, [r7, #4]
 80064b6:	4613      	mov	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	00db      	lsls	r3, r3, #3
 80064be:	440b      	add	r3, r1
 80064c0:	333f      	adds	r3, #63	; 0x3f
 80064c2:	787a      	ldrb	r2, [r7, #1]
 80064c4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80064c6:	7c3b      	ldrb	r3, [r7, #16]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d114      	bne.n	80064f6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80064cc:	78fa      	ldrb	r2, [r7, #3]
 80064ce:	6879      	ldr	r1, [r7, #4]
 80064d0:	4613      	mov	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4413      	add	r3, r2
 80064d6:	00db      	lsls	r3, r3, #3
 80064d8:	440b      	add	r3, r1
 80064da:	3342      	adds	r3, #66	; 0x42
 80064dc:	2203      	movs	r2, #3
 80064de:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80064e0:	78fa      	ldrb	r2, [r7, #3]
 80064e2:	6879      	ldr	r1, [r7, #4]
 80064e4:	4613      	mov	r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4413      	add	r3, r2
 80064ea:	00db      	lsls	r3, r3, #3
 80064ec:	440b      	add	r3, r1
 80064ee:	333d      	adds	r3, #61	; 0x3d
 80064f0:	7f3a      	ldrb	r2, [r7, #28]
 80064f2:	701a      	strb	r2, [r3, #0]
 80064f4:	e009      	b.n	800650a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80064f6:	78fa      	ldrb	r2, [r7, #3]
 80064f8:	6879      	ldr	r1, [r7, #4]
 80064fa:	4613      	mov	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	4413      	add	r3, r2
 8006500:	00db      	lsls	r3, r3, #3
 8006502:	440b      	add	r3, r1
 8006504:	3342      	adds	r3, #66	; 0x42
 8006506:	2202      	movs	r2, #2
 8006508:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800650a:	787b      	ldrb	r3, [r7, #1]
 800650c:	2b03      	cmp	r3, #3
 800650e:	f200 80d6 	bhi.w	80066be <HAL_HCD_HC_SubmitRequest+0x23a>
 8006512:	a201      	add	r2, pc, #4	; (adr r2, 8006518 <HAL_HCD_HC_SubmitRequest+0x94>)
 8006514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006518:	08006529 	.word	0x08006529
 800651c:	080066a9 	.word	0x080066a9
 8006520:	08006595 	.word	0x08006595
 8006524:	0800661f 	.word	0x0800661f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8006528:	7c3b      	ldrb	r3, [r7, #16]
 800652a:	2b01      	cmp	r3, #1
 800652c:	f040 80c9 	bne.w	80066c2 <HAL_HCD_HC_SubmitRequest+0x23e>
 8006530:	78bb      	ldrb	r3, [r7, #2]
 8006532:	2b00      	cmp	r3, #0
 8006534:	f040 80c5 	bne.w	80066c2 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8006538:	8b3b      	ldrh	r3, [r7, #24]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d109      	bne.n	8006552 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800653e:	78fa      	ldrb	r2, [r7, #3]
 8006540:	6879      	ldr	r1, [r7, #4]
 8006542:	4613      	mov	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	00db      	lsls	r3, r3, #3
 800654a:	440b      	add	r3, r1
 800654c:	3351      	adds	r3, #81	; 0x51
 800654e:	2201      	movs	r2, #1
 8006550:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006552:	78fa      	ldrb	r2, [r7, #3]
 8006554:	6879      	ldr	r1, [r7, #4]
 8006556:	4613      	mov	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4413      	add	r3, r2
 800655c:	00db      	lsls	r3, r3, #3
 800655e:	440b      	add	r3, r1
 8006560:	3351      	adds	r3, #81	; 0x51
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10a      	bne.n	800657e <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006568:	78fa      	ldrb	r2, [r7, #3]
 800656a:	6879      	ldr	r1, [r7, #4]
 800656c:	4613      	mov	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	00db      	lsls	r3, r3, #3
 8006574:	440b      	add	r3, r1
 8006576:	3342      	adds	r3, #66	; 0x42
 8006578:	2200      	movs	r2, #0
 800657a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800657c:	e0a1      	b.n	80066c2 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800657e:	78fa      	ldrb	r2, [r7, #3]
 8006580:	6879      	ldr	r1, [r7, #4]
 8006582:	4613      	mov	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	00db      	lsls	r3, r3, #3
 800658a:	440b      	add	r3, r1
 800658c:	3342      	adds	r3, #66	; 0x42
 800658e:	2202      	movs	r2, #2
 8006590:	701a      	strb	r2, [r3, #0]
      break;
 8006592:	e096      	b.n	80066c2 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8006594:	78bb      	ldrb	r3, [r7, #2]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d120      	bne.n	80065dc <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800659a:	78fa      	ldrb	r2, [r7, #3]
 800659c:	6879      	ldr	r1, [r7, #4]
 800659e:	4613      	mov	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	00db      	lsls	r3, r3, #3
 80065a6:	440b      	add	r3, r1
 80065a8:	3351      	adds	r3, #81	; 0x51
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10a      	bne.n	80065c6 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80065b0:	78fa      	ldrb	r2, [r7, #3]
 80065b2:	6879      	ldr	r1, [r7, #4]
 80065b4:	4613      	mov	r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4413      	add	r3, r2
 80065ba:	00db      	lsls	r3, r3, #3
 80065bc:	440b      	add	r3, r1
 80065be:	3342      	adds	r3, #66	; 0x42
 80065c0:	2200      	movs	r2, #0
 80065c2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80065c4:	e07e      	b.n	80066c4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80065c6:	78fa      	ldrb	r2, [r7, #3]
 80065c8:	6879      	ldr	r1, [r7, #4]
 80065ca:	4613      	mov	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4413      	add	r3, r2
 80065d0:	00db      	lsls	r3, r3, #3
 80065d2:	440b      	add	r3, r1
 80065d4:	3342      	adds	r3, #66	; 0x42
 80065d6:	2202      	movs	r2, #2
 80065d8:	701a      	strb	r2, [r3, #0]
      break;
 80065da:	e073      	b.n	80066c4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80065dc:	78fa      	ldrb	r2, [r7, #3]
 80065de:	6879      	ldr	r1, [r7, #4]
 80065e0:	4613      	mov	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	00db      	lsls	r3, r3, #3
 80065e8:	440b      	add	r3, r1
 80065ea:	3350      	adds	r3, #80	; 0x50
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10a      	bne.n	8006608 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80065f2:	78fa      	ldrb	r2, [r7, #3]
 80065f4:	6879      	ldr	r1, [r7, #4]
 80065f6:	4613      	mov	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	00db      	lsls	r3, r3, #3
 80065fe:	440b      	add	r3, r1
 8006600:	3342      	adds	r3, #66	; 0x42
 8006602:	2200      	movs	r2, #0
 8006604:	701a      	strb	r2, [r3, #0]
      break;
 8006606:	e05d      	b.n	80066c4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006608:	78fa      	ldrb	r2, [r7, #3]
 800660a:	6879      	ldr	r1, [r7, #4]
 800660c:	4613      	mov	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	00db      	lsls	r3, r3, #3
 8006614:	440b      	add	r3, r1
 8006616:	3342      	adds	r3, #66	; 0x42
 8006618:	2202      	movs	r2, #2
 800661a:	701a      	strb	r2, [r3, #0]
      break;
 800661c:	e052      	b.n	80066c4 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800661e:	78bb      	ldrb	r3, [r7, #2]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d120      	bne.n	8006666 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006624:	78fa      	ldrb	r2, [r7, #3]
 8006626:	6879      	ldr	r1, [r7, #4]
 8006628:	4613      	mov	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	00db      	lsls	r3, r3, #3
 8006630:	440b      	add	r3, r1
 8006632:	3351      	adds	r3, #81	; 0x51
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10a      	bne.n	8006650 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800663a:	78fa      	ldrb	r2, [r7, #3]
 800663c:	6879      	ldr	r1, [r7, #4]
 800663e:	4613      	mov	r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4413      	add	r3, r2
 8006644:	00db      	lsls	r3, r3, #3
 8006646:	440b      	add	r3, r1
 8006648:	3342      	adds	r3, #66	; 0x42
 800664a:	2200      	movs	r2, #0
 800664c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800664e:	e039      	b.n	80066c4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006650:	78fa      	ldrb	r2, [r7, #3]
 8006652:	6879      	ldr	r1, [r7, #4]
 8006654:	4613      	mov	r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	00db      	lsls	r3, r3, #3
 800665c:	440b      	add	r3, r1
 800665e:	3342      	adds	r3, #66	; 0x42
 8006660:	2202      	movs	r2, #2
 8006662:	701a      	strb	r2, [r3, #0]
      break;
 8006664:	e02e      	b.n	80066c4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006666:	78fa      	ldrb	r2, [r7, #3]
 8006668:	6879      	ldr	r1, [r7, #4]
 800666a:	4613      	mov	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	440b      	add	r3, r1
 8006674:	3350      	adds	r3, #80	; 0x50
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10a      	bne.n	8006692 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800667c:	78fa      	ldrb	r2, [r7, #3]
 800667e:	6879      	ldr	r1, [r7, #4]
 8006680:	4613      	mov	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	00db      	lsls	r3, r3, #3
 8006688:	440b      	add	r3, r1
 800668a:	3342      	adds	r3, #66	; 0x42
 800668c:	2200      	movs	r2, #0
 800668e:	701a      	strb	r2, [r3, #0]
      break;
 8006690:	e018      	b.n	80066c4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006692:	78fa      	ldrb	r2, [r7, #3]
 8006694:	6879      	ldr	r1, [r7, #4]
 8006696:	4613      	mov	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	00db      	lsls	r3, r3, #3
 800669e:	440b      	add	r3, r1
 80066a0:	3342      	adds	r3, #66	; 0x42
 80066a2:	2202      	movs	r2, #2
 80066a4:	701a      	strb	r2, [r3, #0]
      break;
 80066a6:	e00d      	b.n	80066c4 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80066a8:	78fa      	ldrb	r2, [r7, #3]
 80066aa:	6879      	ldr	r1, [r7, #4]
 80066ac:	4613      	mov	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	00db      	lsls	r3, r3, #3
 80066b4:	440b      	add	r3, r1
 80066b6:	3342      	adds	r3, #66	; 0x42
 80066b8:	2200      	movs	r2, #0
 80066ba:	701a      	strb	r2, [r3, #0]
      break;
 80066bc:	e002      	b.n	80066c4 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80066be:	bf00      	nop
 80066c0:	e000      	b.n	80066c4 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80066c2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80066c4:	78fa      	ldrb	r2, [r7, #3]
 80066c6:	6879      	ldr	r1, [r7, #4]
 80066c8:	4613      	mov	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4413      	add	r3, r2
 80066ce:	00db      	lsls	r3, r3, #3
 80066d0:	440b      	add	r3, r1
 80066d2:	3344      	adds	r3, #68	; 0x44
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80066d8:	78fa      	ldrb	r2, [r7, #3]
 80066da:	8b39      	ldrh	r1, [r7, #24]
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	4613      	mov	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	00db      	lsls	r3, r3, #3
 80066e6:	4403      	add	r3, r0
 80066e8:	3348      	adds	r3, #72	; 0x48
 80066ea:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80066ec:	78fa      	ldrb	r2, [r7, #3]
 80066ee:	6879      	ldr	r1, [r7, #4]
 80066f0:	4613      	mov	r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	440b      	add	r3, r1
 80066fa:	335c      	adds	r3, #92	; 0x5c
 80066fc:	2200      	movs	r2, #0
 80066fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8006700:	78fa      	ldrb	r2, [r7, #3]
 8006702:	6879      	ldr	r1, [r7, #4]
 8006704:	4613      	mov	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4413      	add	r3, r2
 800670a:	00db      	lsls	r3, r3, #3
 800670c:	440b      	add	r3, r1
 800670e:	334c      	adds	r3, #76	; 0x4c
 8006710:	2200      	movs	r2, #0
 8006712:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006714:	78fa      	ldrb	r2, [r7, #3]
 8006716:	6879      	ldr	r1, [r7, #4]
 8006718:	4613      	mov	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4413      	add	r3, r2
 800671e:	00db      	lsls	r3, r3, #3
 8006720:	440b      	add	r3, r1
 8006722:	3339      	adds	r3, #57	; 0x39
 8006724:	78fa      	ldrb	r2, [r7, #3]
 8006726:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006728:	78fa      	ldrb	r2, [r7, #3]
 800672a:	6879      	ldr	r1, [r7, #4]
 800672c:	4613      	mov	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	00db      	lsls	r3, r3, #3
 8006734:	440b      	add	r3, r1
 8006736:	335d      	adds	r3, #93	; 0x5d
 8006738:	2200      	movs	r2, #0
 800673a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6818      	ldr	r0, [r3, #0]
 8006740:	78fa      	ldrb	r2, [r7, #3]
 8006742:	4613      	mov	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	4413      	add	r3, r2
 8006748:	00db      	lsls	r3, r3, #3
 800674a:	3338      	adds	r3, #56	; 0x38
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	18d1      	adds	r1, r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	b2db      	uxtb	r3, r3
 8006756:	461a      	mov	r2, r3
 8006758:	f006 fb9a 	bl	800ce90 <USB_HC_StartXfer>
 800675c:	4603      	mov	r3, r0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3708      	adds	r7, #8
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop

08006768 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4618      	mov	r0, r3
 8006780:	f006 f8bd 	bl	800c8fe <USB_GetMode>
 8006784:	4603      	mov	r3, r0
 8006786:	2b01      	cmp	r3, #1
 8006788:	f040 80ef 	bne.w	800696a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4618      	mov	r0, r3
 8006792:	f006 f8a1 	bl	800c8d8 <USB_ReadInterrupts>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 80e5 	beq.w	8006968 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f006 f898 	bl	800c8d8 <USB_ReadInterrupts>
 80067a8:	4603      	mov	r3, r0
 80067aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067b2:	d104      	bne.n	80067be <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80067bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f006 f888 	bl	800c8d8 <USB_ReadInterrupts>
 80067c8:	4603      	mov	r3, r0
 80067ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067d2:	d104      	bne.n	80067de <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80067dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f006 f878 	bl	800c8d8 <USB_ReadInterrupts>
 80067e8:	4603      	mov	r3, r0
 80067ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80067ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067f2:	d104      	bne.n	80067fe <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80067fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4618      	mov	r0, r3
 8006804:	f006 f868 	bl	800c8d8 <USB_ReadInterrupts>
 8006808:	4603      	mov	r3, r0
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b02      	cmp	r3, #2
 8006810:	d103      	bne.n	800681a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2202      	movs	r2, #2
 8006818:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4618      	mov	r0, r3
 8006820:	f006 f85a 	bl	800c8d8 <USB_ReadInterrupts>
 8006824:	4603      	mov	r3, r0
 8006826:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800682a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800682e:	d115      	bne.n	800685c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006838:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d108      	bne.n	800685c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f00e fba0 	bl	8014f90 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2101      	movs	r1, #1
 8006856:	4618      	mov	r0, r3
 8006858:	f006 f94a 	bl	800caf0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4618      	mov	r0, r3
 8006862:	f006 f839 	bl	800c8d8 <USB_ReadInterrupts>
 8006866:	4603      	mov	r3, r0
 8006868:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800686c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006870:	d102      	bne.n	8006878 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f001 f966 	bl	8007b44 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4618      	mov	r0, r3
 800687e:	f006 f82b 	bl	800c8d8 <USB_ReadInterrupts>
 8006882:	4603      	mov	r3, r0
 8006884:	f003 0308 	and.w	r3, r3, #8
 8006888:	2b08      	cmp	r3, #8
 800688a:	d106      	bne.n	800689a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f00e fb63 	bl	8014f58 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2208      	movs	r2, #8
 8006898:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4618      	mov	r0, r3
 80068a0:	f006 f81a 	bl	800c8d8 <USB_ReadInterrupts>
 80068a4:	4603      	mov	r3, r0
 80068a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068ae:	d138      	bne.n	8006922 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f006 fc31 	bl	800d11c <USB_HC_ReadInterrupt>
 80068ba:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80068bc:	2300      	movs	r3, #0
 80068be:	617b      	str	r3, [r7, #20]
 80068c0:	e025      	b.n	800690e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f003 030f 	and.w	r3, r3, #15
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	fa22 f303 	lsr.w	r3, r2, r3
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d018      	beq.n	8006908 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068ec:	d106      	bne.n	80068fc <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f8cf 	bl	8006a98 <HCD_HC_IN_IRQHandler>
 80068fa:	e005      	b.n	8006908 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	4619      	mov	r1, r3
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fcfd 	bl	8007302 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	3301      	adds	r3, #1
 800690c:	617b      	str	r3, [r7, #20]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	429a      	cmp	r2, r3
 8006916:	d3d4      	bcc.n	80068c2 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006920:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4618      	mov	r0, r3
 8006928:	f005 ffd6 	bl	800c8d8 <USB_ReadInterrupts>
 800692c:	4603      	mov	r3, r0
 800692e:	f003 0310 	and.w	r3, r3, #16
 8006932:	2b10      	cmp	r3, #16
 8006934:	d101      	bne.n	800693a <HAL_HCD_IRQHandler+0x1d2>
 8006936:	2301      	movs	r3, #1
 8006938:	e000      	b.n	800693c <HAL_HCD_IRQHandler+0x1d4>
 800693a:	2300      	movs	r3, #0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d014      	beq.n	800696a <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	699a      	ldr	r2, [r3, #24]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 0210 	bic.w	r2, r2, #16
 800694e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f001 f84b 	bl	80079ec <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	699a      	ldr	r2, [r3, #24]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f042 0210 	orr.w	r2, r2, #16
 8006964:	619a      	str	r2, [r3, #24]
 8006966:	e000      	b.n	800696a <HAL_HCD_IRQHandler+0x202>
      return;
 8006968:	bf00      	nop
    }
  }
}
 800696a:	3718      	adds	r7, #24
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800697e:	2b01      	cmp	r3, #1
 8006980:	d101      	bne.n	8006986 <HAL_HCD_Start+0x16>
 8006982:	2302      	movs	r3, #2
 8006984:	e013      	b.n	80069ae <HAL_HCD_Start+0x3e>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4618      	mov	r0, r3
 8006994:	f005 fead 	bl	800c6f2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2101      	movs	r1, #1
 800699e:	4618      	mov	r0, r3
 80069a0:	f006 f90a 	bl	800cbb8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3708      	adds	r7, #8
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b082      	sub	sp, #8
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d101      	bne.n	80069cc <HAL_HCD_Stop+0x16>
 80069c8:	2302      	movs	r3, #2
 80069ca:	e00d      	b.n	80069e8 <HAL_HCD_Stop+0x32>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4618      	mov	r0, r3
 80069da:	f006 fceb 	bl	800d3b4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3708      	adds	r7, #8
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4618      	mov	r0, r3
 80069fe:	f006 f8b1 	bl	800cb64 <USB_ResetPort>
 8006a02:	4603      	mov	r3, r0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3708      	adds	r7, #8
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	460b      	mov	r3, r1
 8006a16:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8006a18:	78fa      	ldrb	r2, [r7, #3]
 8006a1a:	6879      	ldr	r1, [r7, #4]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	00db      	lsls	r3, r3, #3
 8006a24:	440b      	add	r3, r1
 8006a26:	335c      	adds	r3, #92	; 0x5c
 8006a28:	781b      	ldrb	r3, [r3, #0]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b083      	sub	sp, #12
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
 8006a3e:	460b      	mov	r3, r1
 8006a40:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006a42:	78fa      	ldrb	r2, [r7, #3]
 8006a44:	6879      	ldr	r1, [r7, #4]
 8006a46:	4613      	mov	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4413      	add	r3, r2
 8006a4c:	00db      	lsls	r3, r3, #3
 8006a4e:	440b      	add	r3, r1
 8006a50:	334c      	adds	r3, #76	; 0x4c
 8006a52:	681b      	ldr	r3, [r3, #0]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f006 f8f3 	bl	800cc58 <USB_GetCurrentFrame>
 8006a72:	4603      	mov	r3, r0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f006 f8ce 	bl	800cc2a <USB_GetHostSpeed>
 8006a8e:	4603      	mov	r3, r0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006aae:	78fb      	ldrb	r3, [r7, #3]
 8006ab0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f003 0304 	and.w	r3, r3, #4
 8006ac4:	2b04      	cmp	r3, #4
 8006ac6:	d119      	bne.n	8006afc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	015a      	lsls	r2, r3, #5
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	2304      	movs	r3, #4
 8006ad8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	015a      	lsls	r2, r3, #5
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	0151      	lsls	r1, r2, #5
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	440a      	add	r2, r1
 8006af0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006af4:	f043 0302 	orr.w	r3, r3, #2
 8006af8:	60d3      	str	r3, [r2, #12]
 8006afa:	e0ce      	b.n	8006c9a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b12:	d12c      	bne.n	8006b6e <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	015a      	lsls	r2, r3, #5
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b20:	461a      	mov	r2, r3
 8006b22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b26:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006b28:	6879      	ldr	r1, [r7, #4]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	00db      	lsls	r3, r3, #3
 8006b34:	440b      	add	r3, r1
 8006b36:	335d      	adds	r3, #93	; 0x5d
 8006b38:	2207      	movs	r2, #7
 8006b3a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	015a      	lsls	r2, r3, #5
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	4413      	add	r3, r2
 8006b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	0151      	lsls	r1, r2, #5
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	440a      	add	r2, r1
 8006b52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b56:	f043 0302 	orr.w	r3, r3, #2
 8006b5a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	b2d2      	uxtb	r2, r2
 8006b64:	4611      	mov	r1, r2
 8006b66:	4618      	mov	r0, r3
 8006b68:	f006 fae9 	bl	800d13e <USB_HC_Halt>
 8006b6c:	e095      	b.n	8006c9a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	015a      	lsls	r2, r3, #5
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	4413      	add	r3, r2
 8006b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	f003 0320 	and.w	r3, r3, #32
 8006b80:	2b20      	cmp	r3, #32
 8006b82:	d109      	bne.n	8006b98 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b90:	461a      	mov	r2, r3
 8006b92:	2320      	movs	r3, #32
 8006b94:	6093      	str	r3, [r2, #8]
 8006b96:	e080      	b.n	8006c9a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	015a      	lsls	r2, r3, #5
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f003 0308 	and.w	r3, r3, #8
 8006baa:	2b08      	cmp	r3, #8
 8006bac:	d134      	bne.n	8006c18 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	015a      	lsls	r2, r3, #5
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	0151      	lsls	r1, r2, #5
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	440a      	add	r2, r1
 8006bc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bc8:	f043 0302 	orr.w	r3, r3, #2
 8006bcc:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8006bce:	6879      	ldr	r1, [r7, #4]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	00db      	lsls	r3, r3, #3
 8006bda:	440b      	add	r3, r1
 8006bdc:	335d      	adds	r3, #93	; 0x5d
 8006bde:	2205      	movs	r2, #5
 8006be0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	015a      	lsls	r2, r3, #5
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	4413      	add	r3, r2
 8006bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bee:	461a      	mov	r2, r3
 8006bf0:	2310      	movs	r3, #16
 8006bf2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c00:	461a      	mov	r2, r3
 8006c02:	2308      	movs	r3, #8
 8006c04:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	b2d2      	uxtb	r2, r2
 8006c0e:	4611      	mov	r1, r2
 8006c10:	4618      	mov	r0, r3
 8006c12:	f006 fa94 	bl	800d13e <USB_HC_Halt>
 8006c16:	e040      	b.n	8006c9a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c2e:	d134      	bne.n	8006c9a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	0151      	lsls	r1, r2, #5
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	440a      	add	r2, r1
 8006c46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c4a:	f043 0302 	orr.w	r3, r3, #2
 8006c4e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	b2d2      	uxtb	r2, r2
 8006c58:	4611      	mov	r1, r2
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f006 fa6f 	bl	800d13e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	2310      	movs	r3, #16
 8006c70:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006c72:	6879      	ldr	r1, [r7, #4]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	4613      	mov	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	00db      	lsls	r3, r3, #3
 8006c7e:	440b      	add	r3, r1
 8006c80:	335d      	adds	r3, #93	; 0x5d
 8006c82:	2208      	movs	r2, #8
 8006c84:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	015a      	lsls	r2, r3, #5
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c92:	461a      	mov	r2, r3
 8006c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c98:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	015a      	lsls	r2, r3, #5
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cb0:	d122      	bne.n	8006cf8 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	015a      	lsls	r2, r3, #5
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	0151      	lsls	r1, r2, #5
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	440a      	add	r2, r1
 8006cc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ccc:	f043 0302 	orr.w	r3, r3, #2
 8006cd0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	b2d2      	uxtb	r2, r2
 8006cda:	4611      	mov	r1, r2
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f006 fa2e 	bl	800d13e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	015a      	lsls	r2, r3, #5
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cee:	461a      	mov	r2, r3
 8006cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cf4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8006cf6:	e300      	b.n	80072fa <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	f040 80fd 	bne.w	8006f0a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d01b      	beq.n	8006d50 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8006d18:	6879      	ldr	r1, [r7, #4]
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	00db      	lsls	r3, r3, #3
 8006d24:	440b      	add	r3, r1
 8006d26:	3348      	adds	r3, #72	; 0x48
 8006d28:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	0159      	lsls	r1, r3, #5
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	440b      	add	r3, r1
 8006d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8006d3c:	1ad1      	subs	r1, r2, r3
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	4613      	mov	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	00db      	lsls	r3, r3, #3
 8006d4a:	4403      	add	r3, r0
 8006d4c:	334c      	adds	r3, #76	; 0x4c
 8006d4e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006d50:	6879      	ldr	r1, [r7, #4]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	4613      	mov	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	00db      	lsls	r3, r3, #3
 8006d5c:	440b      	add	r3, r1
 8006d5e:	335d      	adds	r3, #93	; 0x5d
 8006d60:	2201      	movs	r2, #1
 8006d62:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006d64:	6879      	ldr	r1, [r7, #4]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	00db      	lsls	r3, r3, #3
 8006d70:	440b      	add	r3, r1
 8006d72:	3358      	adds	r3, #88	; 0x58
 8006d74:	2200      	movs	r2, #0
 8006d76:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d84:	461a      	mov	r2, r3
 8006d86:	2301      	movs	r3, #1
 8006d88:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006d8a:	6879      	ldr	r1, [r7, #4]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	00db      	lsls	r3, r3, #3
 8006d96:	440b      	add	r3, r1
 8006d98:	333f      	adds	r3, #63	; 0x3f
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00a      	beq.n	8006db6 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006da0:	6879      	ldr	r1, [r7, #4]
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	4613      	mov	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4413      	add	r3, r2
 8006daa:	00db      	lsls	r3, r3, #3
 8006dac:	440b      	add	r3, r1
 8006dae:	333f      	adds	r3, #63	; 0x3f
 8006db0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d121      	bne.n	8006dfa <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	015a      	lsls	r2, r3, #5
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	0151      	lsls	r1, r2, #5
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	440a      	add	r2, r1
 8006dcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dd0:	f043 0302 	orr.w	r3, r3, #2
 8006dd4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	b2d2      	uxtb	r2, r2
 8006dde:	4611      	mov	r1, r2
 8006de0:	4618      	mov	r0, r3
 8006de2:	f006 f9ac 	bl	800d13e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	015a      	lsls	r2, r3, #5
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df2:	461a      	mov	r2, r3
 8006df4:	2310      	movs	r3, #16
 8006df6:	6093      	str	r3, [r2, #8]
 8006df8:	e070      	b.n	8006edc <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006dfa:	6879      	ldr	r1, [r7, #4]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	00db      	lsls	r3, r3, #3
 8006e06:	440b      	add	r3, r1
 8006e08:	333f      	adds	r3, #63	; 0x3f
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	2b03      	cmp	r3, #3
 8006e0e:	d12a      	bne.n	8006e66 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	0151      	lsls	r1, r2, #5
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	440a      	add	r2, r1
 8006e26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e2e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006e30:	6879      	ldr	r1, [r7, #4]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	4613      	mov	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	00db      	lsls	r3, r3, #3
 8006e3c:	440b      	add	r3, r1
 8006e3e:	335c      	adds	r3, #92	; 0x5c
 8006e40:	2201      	movs	r2, #1
 8006e42:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	b2d8      	uxtb	r0, r3
 8006e48:	6879      	ldr	r1, [r7, #4]
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	00db      	lsls	r3, r3, #3
 8006e54:	440b      	add	r3, r1
 8006e56:	335c      	adds	r3, #92	; 0x5c
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	4601      	mov	r1, r0
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f00e f8a4 	bl	8014fac <HAL_HCD_HC_NotifyURBChange_Callback>
 8006e64:	e03a      	b.n	8006edc <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8006e66:	6879      	ldr	r1, [r7, #4]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	4413      	add	r3, r2
 8006e70:	00db      	lsls	r3, r3, #3
 8006e72:	440b      	add	r3, r1
 8006e74:	333f      	adds	r3, #63	; 0x3f
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d12f      	bne.n	8006edc <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006e7c:	6879      	ldr	r1, [r7, #4]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	4613      	mov	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4413      	add	r3, r2
 8006e86:	00db      	lsls	r3, r3, #3
 8006e88:	440b      	add	r3, r1
 8006e8a:	335c      	adds	r3, #92	; 0x5c
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006e90:	6879      	ldr	r1, [r7, #4]
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	4613      	mov	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	00db      	lsls	r3, r3, #3
 8006e9c:	440b      	add	r3, r1
 8006e9e:	3350      	adds	r3, #80	; 0x50
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	f083 0301 	eor.w	r3, r3, #1
 8006ea6:	b2d8      	uxtb	r0, r3
 8006ea8:	6879      	ldr	r1, [r7, #4]
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	4613      	mov	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	00db      	lsls	r3, r3, #3
 8006eb4:	440b      	add	r3, r1
 8006eb6:	3350      	adds	r3, #80	; 0x50
 8006eb8:	4602      	mov	r2, r0
 8006eba:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	b2d8      	uxtb	r0, r3
 8006ec0:	6879      	ldr	r1, [r7, #4]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4413      	add	r3, r2
 8006eca:	00db      	lsls	r3, r3, #3
 8006ecc:	440b      	add	r3, r1
 8006ece:	335c      	adds	r3, #92	; 0x5c
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	4601      	mov	r1, r0
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f00e f868 	bl	8014fac <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8006edc:	6879      	ldr	r1, [r7, #4]
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	4413      	add	r3, r2
 8006ee6:	00db      	lsls	r3, r3, #3
 8006ee8:	440b      	add	r3, r1
 8006eea:	3350      	adds	r3, #80	; 0x50
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	f083 0301 	eor.w	r3, r3, #1
 8006ef2:	b2d8      	uxtb	r0, r3
 8006ef4:	6879      	ldr	r1, [r7, #4]
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	4613      	mov	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4413      	add	r3, r2
 8006efe:	00db      	lsls	r3, r3, #3
 8006f00:	440b      	add	r3, r1
 8006f02:	3350      	adds	r3, #80	; 0x50
 8006f04:	4602      	mov	r2, r0
 8006f06:	701a      	strb	r2, [r3, #0]
}
 8006f08:	e1f7      	b.n	80072fa <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f003 0302 	and.w	r3, r3, #2
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	f040 811a 	bne.w	8007156 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	015a      	lsls	r2, r3, #5
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	0151      	lsls	r1, r2, #5
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	440a      	add	r2, r1
 8006f38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f3c:	f023 0302 	bic.w	r3, r3, #2
 8006f40:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006f42:	6879      	ldr	r1, [r7, #4]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	4613      	mov	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	00db      	lsls	r3, r3, #3
 8006f4e:	440b      	add	r3, r1
 8006f50:	335d      	adds	r3, #93	; 0x5d
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d10a      	bne.n	8006f6e <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006f58:	6879      	ldr	r1, [r7, #4]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	00db      	lsls	r3, r3, #3
 8006f64:	440b      	add	r3, r1
 8006f66:	335c      	adds	r3, #92	; 0x5c
 8006f68:	2201      	movs	r2, #1
 8006f6a:	701a      	strb	r2, [r3, #0]
 8006f6c:	e0d9      	b.n	8007122 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006f6e:	6879      	ldr	r1, [r7, #4]
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	4613      	mov	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	00db      	lsls	r3, r3, #3
 8006f7a:	440b      	add	r3, r1
 8006f7c:	335d      	adds	r3, #93	; 0x5d
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	2b05      	cmp	r3, #5
 8006f82:	d10a      	bne.n	8006f9a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006f84:	6879      	ldr	r1, [r7, #4]
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	440b      	add	r3, r1
 8006f92:	335c      	adds	r3, #92	; 0x5c
 8006f94:	2205      	movs	r2, #5
 8006f96:	701a      	strb	r2, [r3, #0]
 8006f98:	e0c3      	b.n	8007122 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006f9a:	6879      	ldr	r1, [r7, #4]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	00db      	lsls	r3, r3, #3
 8006fa6:	440b      	add	r3, r1
 8006fa8:	335d      	adds	r3, #93	; 0x5d
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	2b06      	cmp	r3, #6
 8006fae:	d00a      	beq.n	8006fc6 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006fb0:	6879      	ldr	r1, [r7, #4]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	00db      	lsls	r3, r3, #3
 8006fbc:	440b      	add	r3, r1
 8006fbe:	335d      	adds	r3, #93	; 0x5d
 8006fc0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006fc2:	2b08      	cmp	r3, #8
 8006fc4:	d156      	bne.n	8007074 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8006fc6:	6879      	ldr	r1, [r7, #4]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	00db      	lsls	r3, r3, #3
 8006fd2:	440b      	add	r3, r1
 8006fd4:	3358      	adds	r3, #88	; 0x58
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	1c59      	adds	r1, r3, #1
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	00db      	lsls	r3, r3, #3
 8006fe6:	4403      	add	r3, r0
 8006fe8:	3358      	adds	r3, #88	; 0x58
 8006fea:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006fec:	6879      	ldr	r1, [r7, #4]
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4413      	add	r3, r2
 8006ff6:	00db      	lsls	r3, r3, #3
 8006ff8:	440b      	add	r3, r1
 8006ffa:	3358      	adds	r3, #88	; 0x58
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d914      	bls.n	800702c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007002:	6879      	ldr	r1, [r7, #4]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	4613      	mov	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4413      	add	r3, r2
 800700c:	00db      	lsls	r3, r3, #3
 800700e:	440b      	add	r3, r1
 8007010:	3358      	adds	r3, #88	; 0x58
 8007012:	2200      	movs	r2, #0
 8007014:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007016:	6879      	ldr	r1, [r7, #4]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	4613      	mov	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4413      	add	r3, r2
 8007020:	00db      	lsls	r3, r3, #3
 8007022:	440b      	add	r3, r1
 8007024:	335c      	adds	r3, #92	; 0x5c
 8007026:	2204      	movs	r2, #4
 8007028:	701a      	strb	r2, [r3, #0]
 800702a:	e009      	b.n	8007040 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800702c:	6879      	ldr	r1, [r7, #4]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	4613      	mov	r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4413      	add	r3, r2
 8007036:	00db      	lsls	r3, r3, #3
 8007038:	440b      	add	r3, r1
 800703a:	335c      	adds	r3, #92	; 0x5c
 800703c:	2202      	movs	r2, #2
 800703e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	015a      	lsls	r2, r3, #5
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	4413      	add	r3, r2
 8007048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007056:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800705e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	4413      	add	r3, r2
 8007068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800706c:	461a      	mov	r2, r3
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	e056      	b.n	8007122 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007074:	6879      	ldr	r1, [r7, #4]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	4613      	mov	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4413      	add	r3, r2
 800707e:	00db      	lsls	r3, r3, #3
 8007080:	440b      	add	r3, r1
 8007082:	335d      	adds	r3, #93	; 0x5d
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	2b03      	cmp	r3, #3
 8007088:	d123      	bne.n	80070d2 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800708a:	6879      	ldr	r1, [r7, #4]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	4613      	mov	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4413      	add	r3, r2
 8007094:	00db      	lsls	r3, r3, #3
 8007096:	440b      	add	r3, r1
 8007098:	335c      	adds	r3, #92	; 0x5c
 800709a:	2202      	movs	r2, #2
 800709c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	015a      	lsls	r2, r3, #5
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	4413      	add	r3, r2
 80070a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80070b4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070bc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	015a      	lsls	r2, r3, #5
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	4413      	add	r3, r2
 80070c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ca:	461a      	mov	r2, r3
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	6013      	str	r3, [r2, #0]
 80070d0:	e027      	b.n	8007122 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80070d2:	6879      	ldr	r1, [r7, #4]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	4613      	mov	r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	4413      	add	r3, r2
 80070dc:	00db      	lsls	r3, r3, #3
 80070de:	440b      	add	r3, r1
 80070e0:	335d      	adds	r3, #93	; 0x5d
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	2b07      	cmp	r3, #7
 80070e6:	d11c      	bne.n	8007122 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80070e8:	6879      	ldr	r1, [r7, #4]
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	4613      	mov	r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4413      	add	r3, r2
 80070f2:	00db      	lsls	r3, r3, #3
 80070f4:	440b      	add	r3, r1
 80070f6:	3358      	adds	r3, #88	; 0x58
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	1c59      	adds	r1, r3, #1
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	4613      	mov	r3, r2
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4413      	add	r3, r2
 8007106:	00db      	lsls	r3, r3, #3
 8007108:	4403      	add	r3, r0
 800710a:	3358      	adds	r3, #88	; 0x58
 800710c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800710e:	6879      	ldr	r1, [r7, #4]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	4613      	mov	r3, r2
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	4413      	add	r3, r2
 8007118:	00db      	lsls	r3, r3, #3
 800711a:	440b      	add	r3, r1
 800711c:	335c      	adds	r3, #92	; 0x5c
 800711e:	2204      	movs	r2, #4
 8007120:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	015a      	lsls	r2, r3, #5
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	4413      	add	r3, r2
 800712a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800712e:	461a      	mov	r2, r3
 8007130:	2302      	movs	r3, #2
 8007132:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	b2d8      	uxtb	r0, r3
 8007138:	6879      	ldr	r1, [r7, #4]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	4613      	mov	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	00db      	lsls	r3, r3, #3
 8007144:	440b      	add	r3, r1
 8007146:	335c      	adds	r3, #92	; 0x5c
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	461a      	mov	r2, r3
 800714c:	4601      	mov	r1, r0
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f00d ff2c 	bl	8014fac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8007154:	e0d1      	b.n	80072fa <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	015a      	lsls	r2, r3, #5
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	4413      	add	r3, r2
 800715e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007168:	2b80      	cmp	r3, #128	; 0x80
 800716a:	d13e      	bne.n	80071ea <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	4413      	add	r3, r2
 8007174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	0151      	lsls	r1, r2, #5
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	440a      	add	r2, r1
 8007182:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007186:	f043 0302 	orr.w	r3, r3, #2
 800718a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800718c:	6879      	ldr	r1, [r7, #4]
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	4613      	mov	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	00db      	lsls	r3, r3, #3
 8007198:	440b      	add	r3, r1
 800719a:	3358      	adds	r3, #88	; 0x58
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	1c59      	adds	r1, r3, #1
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	4613      	mov	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	00db      	lsls	r3, r3, #3
 80071ac:	4403      	add	r3, r0
 80071ae:	3358      	adds	r3, #88	; 0x58
 80071b0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80071b2:	6879      	ldr	r1, [r7, #4]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	4613      	mov	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	00db      	lsls	r3, r3, #3
 80071be:	440b      	add	r3, r1
 80071c0:	335d      	adds	r3, #93	; 0x5d
 80071c2:	2206      	movs	r2, #6
 80071c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	b2d2      	uxtb	r2, r2
 80071ce:	4611      	mov	r1, r2
 80071d0:	4618      	mov	r0, r3
 80071d2:	f005 ffb4 	bl	800d13e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	015a      	lsls	r2, r3, #5
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	4413      	add	r3, r2
 80071de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071e2:	461a      	mov	r2, r3
 80071e4:	2380      	movs	r3, #128	; 0x80
 80071e6:	6093      	str	r3, [r2, #8]
}
 80071e8:	e087      	b.n	80072fa <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	015a      	lsls	r2, r3, #5
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	4413      	add	r3, r2
 80071f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f003 0310 	and.w	r3, r3, #16
 80071fc:	2b10      	cmp	r3, #16
 80071fe:	d17c      	bne.n	80072fa <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8007200:	6879      	ldr	r1, [r7, #4]
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	4613      	mov	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	00db      	lsls	r3, r3, #3
 800720c:	440b      	add	r3, r1
 800720e:	333f      	adds	r3, #63	; 0x3f
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	2b03      	cmp	r3, #3
 8007214:	d122      	bne.n	800725c <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007216:	6879      	ldr	r1, [r7, #4]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	4613      	mov	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4413      	add	r3, r2
 8007220:	00db      	lsls	r3, r3, #3
 8007222:	440b      	add	r3, r1
 8007224:	3358      	adds	r3, #88	; 0x58
 8007226:	2200      	movs	r2, #0
 8007228:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	015a      	lsls	r2, r3, #5
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	4413      	add	r3, r2
 8007232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	0151      	lsls	r1, r2, #5
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	440a      	add	r2, r1
 8007240:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007244:	f043 0302 	orr.w	r3, r3, #2
 8007248:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	b2d2      	uxtb	r2, r2
 8007252:	4611      	mov	r1, r2
 8007254:	4618      	mov	r0, r3
 8007256:	f005 ff72 	bl	800d13e <USB_HC_Halt>
 800725a:	e045      	b.n	80072e8 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800725c:	6879      	ldr	r1, [r7, #4]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	4613      	mov	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	00db      	lsls	r3, r3, #3
 8007268:	440b      	add	r3, r1
 800726a:	333f      	adds	r3, #63	; 0x3f
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00a      	beq.n	8007288 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8007272:	6879      	ldr	r1, [r7, #4]
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	4613      	mov	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4413      	add	r3, r2
 800727c:	00db      	lsls	r3, r3, #3
 800727e:	440b      	add	r3, r1
 8007280:	333f      	adds	r3, #63	; 0x3f
 8007282:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007284:	2b02      	cmp	r3, #2
 8007286:	d12f      	bne.n	80072e8 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007288:	6879      	ldr	r1, [r7, #4]
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	4613      	mov	r3, r2
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	4413      	add	r3, r2
 8007292:	00db      	lsls	r3, r3, #3
 8007294:	440b      	add	r3, r1
 8007296:	3358      	adds	r3, #88	; 0x58
 8007298:	2200      	movs	r2, #0
 800729a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d121      	bne.n	80072e8 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80072a4:	6879      	ldr	r1, [r7, #4]
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	4613      	mov	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	00db      	lsls	r3, r3, #3
 80072b0:	440b      	add	r3, r1
 80072b2:	335d      	adds	r3, #93	; 0x5d
 80072b4:	2203      	movs	r2, #3
 80072b6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	015a      	lsls	r2, r3, #5
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	4413      	add	r3, r2
 80072c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	0151      	lsls	r1, r2, #5
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	440a      	add	r2, r1
 80072ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072d2:	f043 0302 	orr.w	r3, r3, #2
 80072d6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	b2d2      	uxtb	r2, r2
 80072e0:	4611      	mov	r1, r2
 80072e2:	4618      	mov	r0, r3
 80072e4:	f005 ff2b 	bl	800d13e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	015a      	lsls	r2, r3, #5
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	4413      	add	r3, r2
 80072f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072f4:	461a      	mov	r2, r3
 80072f6:	2310      	movs	r3, #16
 80072f8:	6093      	str	r3, [r2, #8]
}
 80072fa:	bf00      	nop
 80072fc:	3718      	adds	r7, #24
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b086      	sub	sp, #24
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	460b      	mov	r3, r1
 800730c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8007318:	78fb      	ldrb	r3, [r7, #3]
 800731a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	4413      	add	r3, r2
 8007324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	f003 0304 	and.w	r3, r3, #4
 800732e:	2b04      	cmp	r3, #4
 8007330:	d119      	bne.n	8007366 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	015a      	lsls	r2, r3, #5
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	4413      	add	r3, r2
 800733a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800733e:	461a      	mov	r2, r3
 8007340:	2304      	movs	r3, #4
 8007342:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	4413      	add	r3, r2
 800734c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	0151      	lsls	r1, r2, #5
 8007356:	693a      	ldr	r2, [r7, #16]
 8007358:	440a      	add	r2, r1
 800735a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800735e:	f043 0302 	orr.w	r3, r3, #2
 8007362:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8007364:	e33e      	b.n	80079e4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	015a      	lsls	r2, r3, #5
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	4413      	add	r3, r2
 800736e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f003 0320 	and.w	r3, r3, #32
 8007378:	2b20      	cmp	r3, #32
 800737a:	d141      	bne.n	8007400 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	015a      	lsls	r2, r3, #5
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	4413      	add	r3, r2
 8007384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007388:	461a      	mov	r2, r3
 800738a:	2320      	movs	r3, #32
 800738c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800738e:	6879      	ldr	r1, [r7, #4]
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	4613      	mov	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	00db      	lsls	r3, r3, #3
 800739a:	440b      	add	r3, r1
 800739c:	333d      	adds	r3, #61	; 0x3d
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	f040 831f 	bne.w	80079e4 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80073a6:	6879      	ldr	r1, [r7, #4]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	4613      	mov	r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	4413      	add	r3, r2
 80073b0:	00db      	lsls	r3, r3, #3
 80073b2:	440b      	add	r3, r1
 80073b4:	333d      	adds	r3, #61	; 0x3d
 80073b6:	2200      	movs	r2, #0
 80073b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80073ba:	6879      	ldr	r1, [r7, #4]
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	4613      	mov	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	00db      	lsls	r3, r3, #3
 80073c6:	440b      	add	r3, r1
 80073c8:	335c      	adds	r3, #92	; 0x5c
 80073ca:	2202      	movs	r2, #2
 80073cc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	0151      	lsls	r1, r2, #5
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	440a      	add	r2, r1
 80073e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073e8:	f043 0302 	orr.w	r3, r3, #2
 80073ec:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	b2d2      	uxtb	r2, r2
 80073f6:	4611      	mov	r1, r2
 80073f8:	4618      	mov	r0, r3
 80073fa:	f005 fea0 	bl	800d13e <USB_HC_Halt>
}
 80073fe:	e2f1      	b.n	80079e4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	015a      	lsls	r2, r3, #5
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	4413      	add	r3, r2
 8007408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007412:	2b40      	cmp	r3, #64	; 0x40
 8007414:	d13f      	bne.n	8007496 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8007416:	6879      	ldr	r1, [r7, #4]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	4613      	mov	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4413      	add	r3, r2
 8007420:	00db      	lsls	r3, r3, #3
 8007422:	440b      	add	r3, r1
 8007424:	335d      	adds	r3, #93	; 0x5d
 8007426:	2204      	movs	r2, #4
 8007428:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800742a:	6879      	ldr	r1, [r7, #4]
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	4613      	mov	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	00db      	lsls	r3, r3, #3
 8007436:	440b      	add	r3, r1
 8007438:	333d      	adds	r3, #61	; 0x3d
 800743a:	2201      	movs	r2, #1
 800743c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800743e:	6879      	ldr	r1, [r7, #4]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	4613      	mov	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	00db      	lsls	r3, r3, #3
 800744a:	440b      	add	r3, r1
 800744c:	3358      	adds	r3, #88	; 0x58
 800744e:	2200      	movs	r2, #0
 8007450:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	015a      	lsls	r2, r3, #5
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	4413      	add	r3, r2
 800745a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	0151      	lsls	r1, r2, #5
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	440a      	add	r2, r1
 8007468:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800746c:	f043 0302 	orr.w	r3, r3, #2
 8007470:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	b2d2      	uxtb	r2, r2
 800747a:	4611      	mov	r1, r2
 800747c:	4618      	mov	r0, r3
 800747e:	f005 fe5e 	bl	800d13e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	015a      	lsls	r2, r3, #5
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	4413      	add	r3, r2
 800748a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800748e:	461a      	mov	r2, r3
 8007490:	2340      	movs	r3, #64	; 0x40
 8007492:	6093      	str	r3, [r2, #8]
}
 8007494:	e2a6      	b.n	80079e4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	015a      	lsls	r2, r3, #5
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	4413      	add	r3, r2
 800749e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074ac:	d122      	bne.n	80074f4 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	015a      	lsls	r2, r3, #5
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	0151      	lsls	r1, r2, #5
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	440a      	add	r2, r1
 80074c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074c8:	f043 0302 	orr.w	r3, r3, #2
 80074cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	b2d2      	uxtb	r2, r2
 80074d6:	4611      	mov	r1, r2
 80074d8:	4618      	mov	r0, r3
 80074da:	f005 fe30 	bl	800d13e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	015a      	lsls	r2, r3, #5
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	4413      	add	r3, r2
 80074e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ea:	461a      	mov	r2, r3
 80074ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074f0:	6093      	str	r3, [r2, #8]
}
 80074f2:	e277      	b.n	80079e4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	015a      	lsls	r2, r3, #5
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f003 0301 	and.w	r3, r3, #1
 8007506:	2b01      	cmp	r3, #1
 8007508:	d135      	bne.n	8007576 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800750a:	6879      	ldr	r1, [r7, #4]
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	4613      	mov	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	4413      	add	r3, r2
 8007514:	00db      	lsls	r3, r3, #3
 8007516:	440b      	add	r3, r1
 8007518:	3358      	adds	r3, #88	; 0x58
 800751a:	2200      	movs	r2, #0
 800751c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	4413      	add	r3, r2
 8007526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	0151      	lsls	r1, r2, #5
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	440a      	add	r2, r1
 8007534:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007538:	f043 0302 	orr.w	r3, r3, #2
 800753c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	b2d2      	uxtb	r2, r2
 8007546:	4611      	mov	r1, r2
 8007548:	4618      	mov	r0, r3
 800754a:	f005 fdf8 	bl	800d13e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	015a      	lsls	r2, r3, #5
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	4413      	add	r3, r2
 8007556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800755a:	461a      	mov	r2, r3
 800755c:	2301      	movs	r3, #1
 800755e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007560:	6879      	ldr	r1, [r7, #4]
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	4613      	mov	r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	4413      	add	r3, r2
 800756a:	00db      	lsls	r3, r3, #3
 800756c:	440b      	add	r3, r1
 800756e:	335d      	adds	r3, #93	; 0x5d
 8007570:	2201      	movs	r2, #1
 8007572:	701a      	strb	r2, [r3, #0]
}
 8007574:	e236      	b.n	80079e4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	015a      	lsls	r2, r3, #5
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	4413      	add	r3, r2
 800757e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	f003 0308 	and.w	r3, r3, #8
 8007588:	2b08      	cmp	r3, #8
 800758a:	d12b      	bne.n	80075e4 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	015a      	lsls	r2, r3, #5
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	4413      	add	r3, r2
 8007594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007598:	461a      	mov	r2, r3
 800759a:	2308      	movs	r3, #8
 800759c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	015a      	lsls	r2, r3, #5
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	4413      	add	r3, r2
 80075a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	0151      	lsls	r1, r2, #5
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	440a      	add	r2, r1
 80075b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075b8:	f043 0302 	orr.w	r3, r3, #2
 80075bc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	b2d2      	uxtb	r2, r2
 80075c6:	4611      	mov	r1, r2
 80075c8:	4618      	mov	r0, r3
 80075ca:	f005 fdb8 	bl	800d13e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80075ce:	6879      	ldr	r1, [r7, #4]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	4613      	mov	r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4413      	add	r3, r2
 80075d8:	00db      	lsls	r3, r3, #3
 80075da:	440b      	add	r3, r1
 80075dc:	335d      	adds	r3, #93	; 0x5d
 80075de:	2205      	movs	r2, #5
 80075e0:	701a      	strb	r2, [r3, #0]
}
 80075e2:	e1ff      	b.n	80079e4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	015a      	lsls	r2, r3, #5
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	4413      	add	r3, r2
 80075ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f003 0310 	and.w	r3, r3, #16
 80075f6:	2b10      	cmp	r3, #16
 80075f8:	d155      	bne.n	80076a6 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80075fa:	6879      	ldr	r1, [r7, #4]
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	4613      	mov	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	4413      	add	r3, r2
 8007604:	00db      	lsls	r3, r3, #3
 8007606:	440b      	add	r3, r1
 8007608:	3358      	adds	r3, #88	; 0x58
 800760a:	2200      	movs	r2, #0
 800760c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800760e:	6879      	ldr	r1, [r7, #4]
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	4613      	mov	r3, r2
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	4413      	add	r3, r2
 8007618:	00db      	lsls	r3, r3, #3
 800761a:	440b      	add	r3, r1
 800761c:	335d      	adds	r3, #93	; 0x5d
 800761e:	2203      	movs	r2, #3
 8007620:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8007622:	6879      	ldr	r1, [r7, #4]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	4613      	mov	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	00db      	lsls	r3, r3, #3
 800762e:	440b      	add	r3, r1
 8007630:	333d      	adds	r3, #61	; 0x3d
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d114      	bne.n	8007662 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8007638:	6879      	ldr	r1, [r7, #4]
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	4613      	mov	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4413      	add	r3, r2
 8007642:	00db      	lsls	r3, r3, #3
 8007644:	440b      	add	r3, r1
 8007646:	333c      	adds	r3, #60	; 0x3c
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d109      	bne.n	8007662 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800764e:	6879      	ldr	r1, [r7, #4]
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	4613      	mov	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4413      	add	r3, r2
 8007658:	00db      	lsls	r3, r3, #3
 800765a:	440b      	add	r3, r1
 800765c:	333d      	adds	r3, #61	; 0x3d
 800765e:	2201      	movs	r2, #1
 8007660:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	015a      	lsls	r2, r3, #5
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	4413      	add	r3, r2
 800766a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	0151      	lsls	r1, r2, #5
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	440a      	add	r2, r1
 8007678:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800767c:	f043 0302 	orr.w	r3, r3, #2
 8007680:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	b2d2      	uxtb	r2, r2
 800768a:	4611      	mov	r1, r2
 800768c:	4618      	mov	r0, r3
 800768e:	f005 fd56 	bl	800d13e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	015a      	lsls	r2, r3, #5
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	4413      	add	r3, r2
 800769a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800769e:	461a      	mov	r2, r3
 80076a0:	2310      	movs	r3, #16
 80076a2:	6093      	str	r3, [r2, #8]
}
 80076a4:	e19e      	b.n	80079e4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076b8:	2b80      	cmp	r3, #128	; 0x80
 80076ba:	d12b      	bne.n	8007714 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	0151      	lsls	r1, r2, #5
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	440a      	add	r2, r1
 80076d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076d6:	f043 0302 	orr.w	r3, r3, #2
 80076da:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	b2d2      	uxtb	r2, r2
 80076e4:	4611      	mov	r1, r2
 80076e6:	4618      	mov	r0, r3
 80076e8:	f005 fd29 	bl	800d13e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80076ec:	6879      	ldr	r1, [r7, #4]
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	4613      	mov	r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	4413      	add	r3, r2
 80076f6:	00db      	lsls	r3, r3, #3
 80076f8:	440b      	add	r3, r1
 80076fa:	335d      	adds	r3, #93	; 0x5d
 80076fc:	2206      	movs	r2, #6
 80076fe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	015a      	lsls	r2, r3, #5
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	4413      	add	r3, r2
 8007708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800770c:	461a      	mov	r2, r3
 800770e:	2380      	movs	r3, #128	; 0x80
 8007710:	6093      	str	r3, [r2, #8]
}
 8007712:	e167      	b.n	80079e4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	4413      	add	r3, r2
 800771c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800772a:	d135      	bne.n	8007798 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	015a      	lsls	r2, r3, #5
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	4413      	add	r3, r2
 8007734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	0151      	lsls	r1, r2, #5
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	440a      	add	r2, r1
 8007742:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007746:	f043 0302 	orr.w	r3, r3, #2
 800774a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	b2d2      	uxtb	r2, r2
 8007754:	4611      	mov	r1, r2
 8007756:	4618      	mov	r0, r3
 8007758:	f005 fcf1 	bl	800d13e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	015a      	lsls	r2, r3, #5
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	4413      	add	r3, r2
 8007764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007768:	461a      	mov	r2, r3
 800776a:	2310      	movs	r3, #16
 800776c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	015a      	lsls	r2, r3, #5
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	4413      	add	r3, r2
 8007776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800777a:	461a      	mov	r2, r3
 800777c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007780:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007782:	6879      	ldr	r1, [r7, #4]
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	4613      	mov	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	4413      	add	r3, r2
 800778c:	00db      	lsls	r3, r3, #3
 800778e:	440b      	add	r3, r1
 8007790:	335d      	adds	r3, #93	; 0x5d
 8007792:	2208      	movs	r2, #8
 8007794:	701a      	strb	r2, [r3, #0]
}
 8007796:	e125      	b.n	80079e4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	015a      	lsls	r2, r3, #5
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	4413      	add	r3, r2
 80077a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f003 0302 	and.w	r3, r3, #2
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	f040 811a 	bne.w	80079e4 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	015a      	lsls	r2, r3, #5
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	4413      	add	r3, r2
 80077b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	0151      	lsls	r1, r2, #5
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	440a      	add	r2, r1
 80077c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077ca:	f023 0302 	bic.w	r3, r3, #2
 80077ce:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80077d0:	6879      	ldr	r1, [r7, #4]
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	4613      	mov	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	00db      	lsls	r3, r3, #3
 80077dc:	440b      	add	r3, r1
 80077de:	335d      	adds	r3, #93	; 0x5d
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d137      	bne.n	8007856 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80077e6:	6879      	ldr	r1, [r7, #4]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	4613      	mov	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	00db      	lsls	r3, r3, #3
 80077f2:	440b      	add	r3, r1
 80077f4:	335c      	adds	r3, #92	; 0x5c
 80077f6:	2201      	movs	r2, #1
 80077f8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80077fa:	6879      	ldr	r1, [r7, #4]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	4613      	mov	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4413      	add	r3, r2
 8007804:	00db      	lsls	r3, r3, #3
 8007806:	440b      	add	r3, r1
 8007808:	333f      	adds	r3, #63	; 0x3f
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	2b02      	cmp	r3, #2
 800780e:	d00b      	beq.n	8007828 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8007810:	6879      	ldr	r1, [r7, #4]
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	4613      	mov	r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	4413      	add	r3, r2
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	440b      	add	r3, r1
 800781e:	333f      	adds	r3, #63	; 0x3f
 8007820:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007822:	2b03      	cmp	r3, #3
 8007824:	f040 80c5 	bne.w	80079b2 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8007828:	6879      	ldr	r1, [r7, #4]
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	4613      	mov	r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4413      	add	r3, r2
 8007832:	00db      	lsls	r3, r3, #3
 8007834:	440b      	add	r3, r1
 8007836:	3351      	adds	r3, #81	; 0x51
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	f083 0301 	eor.w	r3, r3, #1
 800783e:	b2d8      	uxtb	r0, r3
 8007840:	6879      	ldr	r1, [r7, #4]
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	4613      	mov	r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	4413      	add	r3, r2
 800784a:	00db      	lsls	r3, r3, #3
 800784c:	440b      	add	r3, r1
 800784e:	3351      	adds	r3, #81	; 0x51
 8007850:	4602      	mov	r2, r0
 8007852:	701a      	strb	r2, [r3, #0]
 8007854:	e0ad      	b.n	80079b2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007856:	6879      	ldr	r1, [r7, #4]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	4613      	mov	r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	4413      	add	r3, r2
 8007860:	00db      	lsls	r3, r3, #3
 8007862:	440b      	add	r3, r1
 8007864:	335d      	adds	r3, #93	; 0x5d
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	2b03      	cmp	r3, #3
 800786a:	d10a      	bne.n	8007882 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800786c:	6879      	ldr	r1, [r7, #4]
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	4613      	mov	r3, r2
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	4413      	add	r3, r2
 8007876:	00db      	lsls	r3, r3, #3
 8007878:	440b      	add	r3, r1
 800787a:	335c      	adds	r3, #92	; 0x5c
 800787c:	2202      	movs	r2, #2
 800787e:	701a      	strb	r2, [r3, #0]
 8007880:	e097      	b.n	80079b2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8007882:	6879      	ldr	r1, [r7, #4]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	4613      	mov	r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4413      	add	r3, r2
 800788c:	00db      	lsls	r3, r3, #3
 800788e:	440b      	add	r3, r1
 8007890:	335d      	adds	r3, #93	; 0x5d
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	2b04      	cmp	r3, #4
 8007896:	d10a      	bne.n	80078ae <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007898:	6879      	ldr	r1, [r7, #4]
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	4613      	mov	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	4413      	add	r3, r2
 80078a2:	00db      	lsls	r3, r3, #3
 80078a4:	440b      	add	r3, r1
 80078a6:	335c      	adds	r3, #92	; 0x5c
 80078a8:	2202      	movs	r2, #2
 80078aa:	701a      	strb	r2, [r3, #0]
 80078ac:	e081      	b.n	80079b2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80078ae:	6879      	ldr	r1, [r7, #4]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	4613      	mov	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	00db      	lsls	r3, r3, #3
 80078ba:	440b      	add	r3, r1
 80078bc:	335d      	adds	r3, #93	; 0x5d
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2b05      	cmp	r3, #5
 80078c2:	d10a      	bne.n	80078da <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80078c4:	6879      	ldr	r1, [r7, #4]
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	4613      	mov	r3, r2
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	4413      	add	r3, r2
 80078ce:	00db      	lsls	r3, r3, #3
 80078d0:	440b      	add	r3, r1
 80078d2:	335c      	adds	r3, #92	; 0x5c
 80078d4:	2205      	movs	r2, #5
 80078d6:	701a      	strb	r2, [r3, #0]
 80078d8:	e06b      	b.n	80079b2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80078da:	6879      	ldr	r1, [r7, #4]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	4613      	mov	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	4413      	add	r3, r2
 80078e4:	00db      	lsls	r3, r3, #3
 80078e6:	440b      	add	r3, r1
 80078e8:	335d      	adds	r3, #93	; 0x5d
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	2b06      	cmp	r3, #6
 80078ee:	d00a      	beq.n	8007906 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80078f0:	6879      	ldr	r1, [r7, #4]
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	4613      	mov	r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4413      	add	r3, r2
 80078fa:	00db      	lsls	r3, r3, #3
 80078fc:	440b      	add	r3, r1
 80078fe:	335d      	adds	r3, #93	; 0x5d
 8007900:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007902:	2b08      	cmp	r3, #8
 8007904:	d155      	bne.n	80079b2 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8007906:	6879      	ldr	r1, [r7, #4]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	4613      	mov	r3, r2
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	4413      	add	r3, r2
 8007910:	00db      	lsls	r3, r3, #3
 8007912:	440b      	add	r3, r1
 8007914:	3358      	adds	r3, #88	; 0x58
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	1c59      	adds	r1, r3, #1
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	4613      	mov	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4413      	add	r3, r2
 8007924:	00db      	lsls	r3, r3, #3
 8007926:	4403      	add	r3, r0
 8007928:	3358      	adds	r3, #88	; 0x58
 800792a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800792c:	6879      	ldr	r1, [r7, #4]
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	4613      	mov	r3, r2
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	4413      	add	r3, r2
 8007936:	00db      	lsls	r3, r3, #3
 8007938:	440b      	add	r3, r1
 800793a:	3358      	adds	r3, #88	; 0x58
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b03      	cmp	r3, #3
 8007940:	d914      	bls.n	800796c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007942:	6879      	ldr	r1, [r7, #4]
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	4613      	mov	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4413      	add	r3, r2
 800794c:	00db      	lsls	r3, r3, #3
 800794e:	440b      	add	r3, r1
 8007950:	3358      	adds	r3, #88	; 0x58
 8007952:	2200      	movs	r2, #0
 8007954:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007956:	6879      	ldr	r1, [r7, #4]
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	4613      	mov	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	00db      	lsls	r3, r3, #3
 8007962:	440b      	add	r3, r1
 8007964:	335c      	adds	r3, #92	; 0x5c
 8007966:	2204      	movs	r2, #4
 8007968:	701a      	strb	r2, [r3, #0]
 800796a:	e009      	b.n	8007980 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800796c:	6879      	ldr	r1, [r7, #4]
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	4613      	mov	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	4413      	add	r3, r2
 8007976:	00db      	lsls	r3, r3, #3
 8007978:	440b      	add	r3, r1
 800797a:	335c      	adds	r3, #92	; 0x5c
 800797c:	2202      	movs	r2, #2
 800797e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	015a      	lsls	r2, r3, #5
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	4413      	add	r3, r2
 8007988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007996:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800799e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	015a      	lsls	r2, r3, #5
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	4413      	add	r3, r2
 80079a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079ac:	461a      	mov	r2, r3
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	015a      	lsls	r2, r3, #5
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	4413      	add	r3, r2
 80079ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079be:	461a      	mov	r2, r3
 80079c0:	2302      	movs	r3, #2
 80079c2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	b2d8      	uxtb	r0, r3
 80079c8:	6879      	ldr	r1, [r7, #4]
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	4613      	mov	r3, r2
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	4413      	add	r3, r2
 80079d2:	00db      	lsls	r3, r3, #3
 80079d4:	440b      	add	r3, r1
 80079d6:	335c      	adds	r3, #92	; 0x5c
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	461a      	mov	r2, r3
 80079dc:	4601      	mov	r1, r0
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f00d fae4 	bl	8014fac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80079e4:	bf00      	nop
 80079e6:	3718      	adds	r7, #24
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b08a      	sub	sp, #40	; 0x28
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fc:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	6a1b      	ldr	r3, [r3, #32]
 8007a04:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	f003 030f 	and.w	r3, r3, #15
 8007a0c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	0c5b      	lsrs	r3, r3, #17
 8007a12:	f003 030f 	and.w	r3, r3, #15
 8007a16:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	091b      	lsrs	r3, r3, #4
 8007a1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a20:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d003      	beq.n	8007a30 <HCD_RXQLVL_IRQHandler+0x44>
 8007a28:	2b05      	cmp	r3, #5
 8007a2a:	f000 8082 	beq.w	8007b32 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007a2e:	e083      	b.n	8007b38 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d07f      	beq.n	8007b36 <HCD_RXQLVL_IRQHandler+0x14a>
 8007a36:	6879      	ldr	r1, [r7, #4]
 8007a38:	69ba      	ldr	r2, [r7, #24]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	00db      	lsls	r3, r3, #3
 8007a42:	440b      	add	r3, r1
 8007a44:	3344      	adds	r3, #68	; 0x44
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d074      	beq.n	8007b36 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6818      	ldr	r0, [r3, #0]
 8007a50:	6879      	ldr	r1, [r7, #4]
 8007a52:	69ba      	ldr	r2, [r7, #24]
 8007a54:	4613      	mov	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	00db      	lsls	r3, r3, #3
 8007a5c:	440b      	add	r3, r1
 8007a5e:	3344      	adds	r3, #68	; 0x44
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	b292      	uxth	r2, r2
 8007a66:	4619      	mov	r1, r3
 8007a68:	f004 ff0d 	bl	800c886 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8007a6c:	6879      	ldr	r1, [r7, #4]
 8007a6e:	69ba      	ldr	r2, [r7, #24]
 8007a70:	4613      	mov	r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4413      	add	r3, r2
 8007a76:	00db      	lsls	r3, r3, #3
 8007a78:	440b      	add	r3, r1
 8007a7a:	3344      	adds	r3, #68	; 0x44
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	18d1      	adds	r1, r2, r3
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	69ba      	ldr	r2, [r7, #24]
 8007a86:	4613      	mov	r3, r2
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4413      	add	r3, r2
 8007a8c:	00db      	lsls	r3, r3, #3
 8007a8e:	4403      	add	r3, r0
 8007a90:	3344      	adds	r3, #68	; 0x44
 8007a92:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8007a94:	6879      	ldr	r1, [r7, #4]
 8007a96:	69ba      	ldr	r2, [r7, #24]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	4413      	add	r3, r2
 8007a9e:	00db      	lsls	r3, r3, #3
 8007aa0:	440b      	add	r3, r1
 8007aa2:	334c      	adds	r3, #76	; 0x4c
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	18d1      	adds	r1, r2, r3
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	69ba      	ldr	r2, [r7, #24]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4413      	add	r3, r2
 8007ab4:	00db      	lsls	r3, r3, #3
 8007ab6:	4403      	add	r3, r0
 8007ab8:	334c      	adds	r3, #76	; 0x4c
 8007aba:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	015a      	lsls	r2, r3, #5
 8007ac0:	6a3b      	ldr	r3, [r7, #32]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ac8:	691a      	ldr	r2, [r3, #16]
 8007aca:	4b1d      	ldr	r3, [pc, #116]	; (8007b40 <HCD_RXQLVL_IRQHandler+0x154>)
 8007acc:	4013      	ands	r3, r2
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d031      	beq.n	8007b36 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	015a      	lsls	r2, r3, #5
 8007ad6:	6a3b      	ldr	r3, [r7, #32]
 8007ad8:	4413      	add	r3, r2
 8007ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ae8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007af0:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	015a      	lsls	r2, r3, #5
 8007af6:	6a3b      	ldr	r3, [r7, #32]
 8007af8:	4413      	add	r3, r2
 8007afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007afe:	461a      	mov	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8007b04:	6879      	ldr	r1, [r7, #4]
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	4613      	mov	r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	4413      	add	r3, r2
 8007b0e:	00db      	lsls	r3, r3, #3
 8007b10:	440b      	add	r3, r1
 8007b12:	3350      	adds	r3, #80	; 0x50
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	f083 0301 	eor.w	r3, r3, #1
 8007b1a:	b2d8      	uxtb	r0, r3
 8007b1c:	6879      	ldr	r1, [r7, #4]
 8007b1e:	69ba      	ldr	r2, [r7, #24]
 8007b20:	4613      	mov	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	00db      	lsls	r3, r3, #3
 8007b28:	440b      	add	r3, r1
 8007b2a:	3350      	adds	r3, #80	; 0x50
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	701a      	strb	r2, [r3, #0]
      break;
 8007b30:	e001      	b.n	8007b36 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8007b32:	bf00      	nop
 8007b34:	e000      	b.n	8007b38 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8007b36:	bf00      	nop
  }
}
 8007b38:	bf00      	nop
 8007b3a:	3728      	adds	r7, #40	; 0x28
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	1ff80000 	.word	0x1ff80000

08007b44 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007b70:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f003 0302 	and.w	r3, r3, #2
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d10b      	bne.n	8007b94 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d102      	bne.n	8007b8c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f00d f9f4 	bl	8014f74 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	f043 0302 	orr.w	r3, r3, #2
 8007b92:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f003 0308 	and.w	r3, r3, #8
 8007b9a:	2b08      	cmp	r3, #8
 8007b9c:	d132      	bne.n	8007c04 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	f043 0308 	orr.w	r3, r3, #8
 8007ba4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f003 0304 	and.w	r3, r3, #4
 8007bac:	2b04      	cmp	r3, #4
 8007bae:	d126      	bne.n	8007bfe <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d113      	bne.n	8007be0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007bbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007bc2:	d106      	bne.n	8007bd2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2102      	movs	r1, #2
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f004 ff90 	bl	800caf0 <USB_InitFSLSPClkSel>
 8007bd0:	e011      	b.n	8007bf6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2101      	movs	r1, #1
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f004 ff89 	bl	800caf0 <USB_InitFSLSPClkSel>
 8007bde:	e00a      	b.n	8007bf6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d106      	bne.n	8007bf6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bee:	461a      	mov	r2, r3
 8007bf0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8007bf4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f00d f9ea 	bl	8014fd0 <HAL_HCD_PortEnabled_Callback>
 8007bfc:	e002      	b.n	8007c04 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f00d f9f4 	bl	8014fec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f003 0320 	and.w	r3, r3, #32
 8007c0a:	2b20      	cmp	r3, #32
 8007c0c:	d103      	bne.n	8007c16 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	f043 0320 	orr.w	r3, r3, #32
 8007c14:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	6013      	str	r3, [r2, #0]
}
 8007c22:	bf00      	nop
 8007c24:	3718      	adds	r7, #24
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
	...

08007c2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d101      	bne.n	8007c3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e11f      	b.n	8007e7e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d106      	bne.n	8007c58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f7fb f92c 	bl	8002eb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2224      	movs	r2, #36	; 0x24
 8007c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f022 0201 	bic.w	r2, r2, #1
 8007c6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007c90:	f001 f80e 	bl	8008cb0 <HAL_RCC_GetPCLK1Freq>
 8007c94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	4a7b      	ldr	r2, [pc, #492]	; (8007e88 <HAL_I2C_Init+0x25c>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d807      	bhi.n	8007cb0 <HAL_I2C_Init+0x84>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	4a7a      	ldr	r2, [pc, #488]	; (8007e8c <HAL_I2C_Init+0x260>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	bf94      	ite	ls
 8007ca8:	2301      	movls	r3, #1
 8007caa:	2300      	movhi	r3, #0
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	e006      	b.n	8007cbe <HAL_I2C_Init+0x92>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	4a77      	ldr	r2, [pc, #476]	; (8007e90 <HAL_I2C_Init+0x264>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	bf94      	ite	ls
 8007cb8:	2301      	movls	r3, #1
 8007cba:	2300      	movhi	r3, #0
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d001      	beq.n	8007cc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e0db      	b.n	8007e7e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	4a72      	ldr	r2, [pc, #456]	; (8007e94 <HAL_I2C_Init+0x268>)
 8007cca:	fba2 2303 	umull	r2, r3, r2, r3
 8007cce:	0c9b      	lsrs	r3, r3, #18
 8007cd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	430a      	orrs	r2, r1
 8007ce4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6a1b      	ldr	r3, [r3, #32]
 8007cec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	4a64      	ldr	r2, [pc, #400]	; (8007e88 <HAL_I2C_Init+0x25c>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d802      	bhi.n	8007d00 <HAL_I2C_Init+0xd4>
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	e009      	b.n	8007d14 <HAL_I2C_Init+0xe8>
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007d06:	fb02 f303 	mul.w	r3, r2, r3
 8007d0a:	4a63      	ldr	r2, [pc, #396]	; (8007e98 <HAL_I2C_Init+0x26c>)
 8007d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d10:	099b      	lsrs	r3, r3, #6
 8007d12:	3301      	adds	r3, #1
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	6812      	ldr	r2, [r2, #0]
 8007d18:	430b      	orrs	r3, r1
 8007d1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	69db      	ldr	r3, [r3, #28]
 8007d22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007d26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	4956      	ldr	r1, [pc, #344]	; (8007e88 <HAL_I2C_Init+0x25c>)
 8007d30:	428b      	cmp	r3, r1
 8007d32:	d80d      	bhi.n	8007d50 <HAL_I2C_Init+0x124>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	1e59      	subs	r1, r3, #1
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	005b      	lsls	r3, r3, #1
 8007d3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d42:	3301      	adds	r3, #1
 8007d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d48:	2b04      	cmp	r3, #4
 8007d4a:	bf38      	it	cc
 8007d4c:	2304      	movcc	r3, #4
 8007d4e:	e04f      	b.n	8007df0 <HAL_I2C_Init+0x1c4>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d111      	bne.n	8007d7c <HAL_I2C_Init+0x150>
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	1e58      	subs	r0, r3, #1
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6859      	ldr	r1, [r3, #4]
 8007d60:	460b      	mov	r3, r1
 8007d62:	005b      	lsls	r3, r3, #1
 8007d64:	440b      	add	r3, r1
 8007d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	bf0c      	ite	eq
 8007d74:	2301      	moveq	r3, #1
 8007d76:	2300      	movne	r3, #0
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	e012      	b.n	8007da2 <HAL_I2C_Init+0x176>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	1e58      	subs	r0, r3, #1
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6859      	ldr	r1, [r3, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	440b      	add	r3, r1
 8007d8a:	0099      	lsls	r1, r3, #2
 8007d8c:	440b      	add	r3, r1
 8007d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d92:	3301      	adds	r3, #1
 8007d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	bf0c      	ite	eq
 8007d9c:	2301      	moveq	r3, #1
 8007d9e:	2300      	movne	r3, #0
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d001      	beq.n	8007daa <HAL_I2C_Init+0x17e>
 8007da6:	2301      	movs	r3, #1
 8007da8:	e022      	b.n	8007df0 <HAL_I2C_Init+0x1c4>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10e      	bne.n	8007dd0 <HAL_I2C_Init+0x1a4>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	1e58      	subs	r0, r3, #1
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6859      	ldr	r1, [r3, #4]
 8007dba:	460b      	mov	r3, r1
 8007dbc:	005b      	lsls	r3, r3, #1
 8007dbe:	440b      	add	r3, r1
 8007dc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dce:	e00f      	b.n	8007df0 <HAL_I2C_Init+0x1c4>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	1e58      	subs	r0, r3, #1
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6859      	ldr	r1, [r3, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	440b      	add	r3, r1
 8007dde:	0099      	lsls	r1, r3, #2
 8007de0:	440b      	add	r3, r1
 8007de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8007de6:	3301      	adds	r3, #1
 8007de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007df0:	6879      	ldr	r1, [r7, #4]
 8007df2:	6809      	ldr	r1, [r1, #0]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	69da      	ldr	r2, [r3, #28]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	431a      	orrs	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	430a      	orrs	r2, r1
 8007e12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007e1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	6911      	ldr	r1, [r2, #16]
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	68d2      	ldr	r2, [r2, #12]
 8007e2a:	4311      	orrs	r1, r2
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	6812      	ldr	r2, [r2, #0]
 8007e30:	430b      	orrs	r3, r1
 8007e32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	695a      	ldr	r2, [r3, #20]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	431a      	orrs	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	430a      	orrs	r2, r1
 8007e4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f042 0201 	orr.w	r2, r2, #1
 8007e5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2220      	movs	r2, #32
 8007e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	000186a0 	.word	0x000186a0
 8007e8c:	001e847f 	.word	0x001e847f
 8007e90:	003d08ff 	.word	0x003d08ff
 8007e94:	431bde83 	.word	0x431bde83
 8007e98:	10624dd3 	.word	0x10624dd3

08007e9c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b088      	sub	sp, #32
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d101      	bne.n	8007eae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e154      	b.n	8008158 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d109      	bne.n	8007ece <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a98      	ldr	r2, [pc, #608]	; (8008128 <HAL_I2S_Init+0x28c>)
 8007ec6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f7fb f839 	bl	8002f40 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2202      	movs	r2, #2
 8007ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	69db      	ldr	r3, [r3, #28]
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	6812      	ldr	r2, [r2, #0]
 8007ee0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8007ee4:	f023 030f 	bic.w	r3, r3, #15
 8007ee8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2202      	movs	r2, #2
 8007ef0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	695b      	ldr	r3, [r3, #20]
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d06f      	beq.n	8007fda <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d102      	bne.n	8007f08 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8007f02:	2310      	movs	r3, #16
 8007f04:	617b      	str	r3, [r7, #20]
 8007f06:	e001      	b.n	8007f0c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8007f08:	2320      	movs	r3, #32
 8007f0a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	2b20      	cmp	r3, #32
 8007f12:	d802      	bhi.n	8007f1a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	005b      	lsls	r3, r3, #1
 8007f18:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a83      	ldr	r2, [pc, #524]	; (800812c <HAL_I2S_Init+0x290>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d004      	beq.n	8007f2e <HAL_I2S_Init+0x92>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a81      	ldr	r2, [pc, #516]	; (8008130 <HAL_I2S_Init+0x294>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d104      	bne.n	8007f38 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8007f2e:	2001      	movs	r0, #1
 8007f30:	f001 f9a4 	bl	800927c <HAL_RCCEx_GetPeriphCLKFreq>
 8007f34:	60f8      	str	r0, [r7, #12]
 8007f36:	e003      	b.n	8007f40 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8007f38:	2002      	movs	r0, #2
 8007f3a:	f001 f99f 	bl	800927c <HAL_RCCEx_GetPeriphCLKFreq>
 8007f3e:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f48:	d125      	bne.n	8007f96 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d010      	beq.n	8007f74 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	4413      	add	r3, r2
 8007f62:	005b      	lsls	r3, r3, #1
 8007f64:	461a      	mov	r2, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f6e:	3305      	adds	r3, #5
 8007f70:	613b      	str	r3, [r7, #16]
 8007f72:	e01f      	b.n	8007fb4 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	00db      	lsls	r3, r3, #3
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f7e:	4613      	mov	r3, r2
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	4413      	add	r3, r2
 8007f84:	005b      	lsls	r3, r3, #1
 8007f86:	461a      	mov	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	695b      	ldr	r3, [r3, #20]
 8007f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f90:	3305      	adds	r3, #5
 8007f92:	613b      	str	r3, [r7, #16]
 8007f94:	e00e      	b.n	8007fb4 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4413      	add	r3, r2
 8007fa4:	005b      	lsls	r3, r3, #1
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	695b      	ldr	r3, [r3, #20]
 8007fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb0:	3305      	adds	r3, #5
 8007fb2:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	4a5f      	ldr	r2, [pc, #380]	; (8008134 <HAL_I2S_Init+0x298>)
 8007fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007fbc:	08db      	lsrs	r3, r3, #3
 8007fbe:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	f003 0301 	and.w	r3, r3, #1
 8007fc6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8007fc8:	693a      	ldr	r2, [r7, #16]
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	085b      	lsrs	r3, r3, #1
 8007fd0:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	021b      	lsls	r3, r3, #8
 8007fd6:	61bb      	str	r3, [r7, #24]
 8007fd8:	e003      	b.n	8007fe2 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8007fda:	2302      	movs	r3, #2
 8007fdc:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d902      	bls.n	8007fee <HAL_I2S_Init+0x152>
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	2bff      	cmp	r3, #255	; 0xff
 8007fec:	d907      	bls.n	8007ffe <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff2:	f043 0210 	orr.w	r2, r3, #16
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e0ac      	b.n	8008158 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	691a      	ldr	r2, [r3, #16]
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	ea42 0103 	orr.w	r1, r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	69fa      	ldr	r2, [r7, #28]
 800800e:	430a      	orrs	r2, r1
 8008010:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	69db      	ldr	r3, [r3, #28]
 8008018:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800801c:	f023 030f 	bic.w	r3, r3, #15
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	6851      	ldr	r1, [r2, #4]
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	6892      	ldr	r2, [r2, #8]
 8008028:	4311      	orrs	r1, r2
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	68d2      	ldr	r2, [r2, #12]
 800802e:	4311      	orrs	r1, r2
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	6992      	ldr	r2, [r2, #24]
 8008034:	430a      	orrs	r2, r1
 8008036:	431a      	orrs	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008040:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	2b30      	cmp	r3, #48	; 0x30
 8008048:	d003      	beq.n	8008052 <HAL_I2S_Init+0x1b6>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	2bb0      	cmp	r3, #176	; 0xb0
 8008050:	d107      	bne.n	8008062 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	69da      	ldr	r2, [r3, #28]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008060:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a1b      	ldr	r3, [r3, #32]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d16e      	bne.n	8008148 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a32      	ldr	r2, [pc, #200]	; (8008138 <HAL_I2S_Init+0x29c>)
 800806e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a2d      	ldr	r2, [pc, #180]	; (800812c <HAL_I2S_Init+0x290>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d101      	bne.n	800807e <HAL_I2S_Init+0x1e2>
 800807a:	4b30      	ldr	r3, [pc, #192]	; (800813c <HAL_I2S_Init+0x2a0>)
 800807c:	e001      	b.n	8008082 <HAL_I2S_Init+0x1e6>
 800807e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008082:	69db      	ldr	r3, [r3, #28]
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	6812      	ldr	r2, [r2, #0]
 8008088:	4928      	ldr	r1, [pc, #160]	; (800812c <HAL_I2S_Init+0x290>)
 800808a:	428a      	cmp	r2, r1
 800808c:	d101      	bne.n	8008092 <HAL_I2S_Init+0x1f6>
 800808e:	4a2b      	ldr	r2, [pc, #172]	; (800813c <HAL_I2S_Init+0x2a0>)
 8008090:	e001      	b.n	8008096 <HAL_I2S_Init+0x1fa>
 8008092:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8008096:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800809a:	f023 030f 	bic.w	r3, r3, #15
 800809e:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a21      	ldr	r2, [pc, #132]	; (800812c <HAL_I2S_Init+0x290>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d101      	bne.n	80080ae <HAL_I2S_Init+0x212>
 80080aa:	4b24      	ldr	r3, [pc, #144]	; (800813c <HAL_I2S_Init+0x2a0>)
 80080ac:	e001      	b.n	80080b2 <HAL_I2S_Init+0x216>
 80080ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80080b2:	2202      	movs	r2, #2
 80080b4:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a1c      	ldr	r2, [pc, #112]	; (800812c <HAL_I2S_Init+0x290>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d101      	bne.n	80080c4 <HAL_I2S_Init+0x228>
 80080c0:	4b1e      	ldr	r3, [pc, #120]	; (800813c <HAL_I2S_Init+0x2a0>)
 80080c2:	e001      	b.n	80080c8 <HAL_I2S_Init+0x22c>
 80080c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80080c8:	69db      	ldr	r3, [r3, #28]
 80080ca:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080d4:	d003      	beq.n	80080de <HAL_I2S_Init+0x242>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d103      	bne.n	80080e6 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80080de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080e2:	613b      	str	r3, [r7, #16]
 80080e4:	e001      	b.n	80080ea <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80080e6:	2300      	movs	r3, #0
 80080e8:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	b299      	uxth	r1, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8008100:	4303      	orrs	r3, r0
 8008102:	b29b      	uxth	r3, r3
 8008104:	430b      	orrs	r3, r1
 8008106:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8008108:	4313      	orrs	r3, r2
 800810a:	b29a      	uxth	r2, r3
 800810c:	897b      	ldrh	r3, [r7, #10]
 800810e:	4313      	orrs	r3, r2
 8008110:	b29b      	uxth	r3, r3
 8008112:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008116:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a03      	ldr	r2, [pc, #12]	; (800812c <HAL_I2S_Init+0x290>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d10e      	bne.n	8008140 <HAL_I2S_Init+0x2a4>
 8008122:	4b06      	ldr	r3, [pc, #24]	; (800813c <HAL_I2S_Init+0x2a0>)
 8008124:	e00e      	b.n	8008144 <HAL_I2S_Init+0x2a8>
 8008126:	bf00      	nop
 8008128:	0800821b 	.word	0x0800821b
 800812c:	40003800 	.word	0x40003800
 8008130:	40003c00 	.word	0x40003c00
 8008134:	cccccccd 	.word	0xcccccccd
 8008138:	08008331 	.word	0x08008331
 800813c:	40003400 	.word	0x40003400
 8008140:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008144:	897a      	ldrh	r2, [r7, #10]
 8008146:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3720      	adds	r7, #32
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816c:	881a      	ldrh	r2, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008178:	1c9a      	adds	r2, r3, #2
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008182:	b29b      	uxth	r3, r3
 8008184:	3b01      	subs	r3, #1
 8008186:	b29a      	uxth	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008190:	b29b      	uxth	r3, r3
 8008192:	2b00      	cmp	r3, #0
 8008194:	d10e      	bne.n	80081b4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	685a      	ldr	r2, [r3, #4]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80081a4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2201      	movs	r2, #1
 80081aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7fc f856 	bl	8004260 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80081b4:	bf00      	nop
 80081b6:	3708      	adds	r7, #8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68da      	ldr	r2, [r3, #12]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ce:	b292      	uxth	r2, r2
 80081d0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d6:	1c9a      	adds	r2, r3, #2
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	3b01      	subs	r3, #1
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10e      	bne.n	8008212 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	685a      	ldr	r2, [r3, #4]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008202:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f7fc f849 	bl	80042a4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8008212:	bf00      	nop
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b086      	sub	sp, #24
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008230:	b2db      	uxtb	r3, r3
 8008232:	2b04      	cmp	r3, #4
 8008234:	d13a      	bne.n	80082ac <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	f003 0301 	and.w	r3, r3, #1
 800823c:	2b01      	cmp	r3, #1
 800823e:	d109      	bne.n	8008254 <I2S_IRQHandler+0x3a>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800824a:	2b40      	cmp	r3, #64	; 0x40
 800824c:	d102      	bne.n	8008254 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f7ff ffb4 	bl	80081bc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800825a:	2b40      	cmp	r3, #64	; 0x40
 800825c:	d126      	bne.n	80082ac <I2S_IRQHandler+0x92>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	f003 0320 	and.w	r3, r3, #32
 8008268:	2b20      	cmp	r3, #32
 800826a:	d11f      	bne.n	80082ac <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	685a      	ldr	r2, [r3, #4]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800827a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800827c:	2300      	movs	r3, #0
 800827e:	613b      	str	r3, [r7, #16]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	613b      	str	r3, [r7, #16]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	613b      	str	r3, [r7, #16]
 8008290:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2201      	movs	r2, #1
 8008296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800829e:	f043 0202 	orr.w	r2, r3, #2
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7fb ffe4 	bl	8004274 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	2b03      	cmp	r3, #3
 80082b6:	d136      	bne.n	8008326 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	f003 0302 	and.w	r3, r3, #2
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d109      	bne.n	80082d6 <I2S_IRQHandler+0xbc>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082cc:	2b80      	cmp	r3, #128	; 0x80
 80082ce:	d102      	bne.n	80082d6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f7ff ff45 	bl	8008160 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f003 0308 	and.w	r3, r3, #8
 80082dc:	2b08      	cmp	r3, #8
 80082de:	d122      	bne.n	8008326 <I2S_IRQHandler+0x10c>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	f003 0320 	and.w	r3, r3, #32
 80082ea:	2b20      	cmp	r3, #32
 80082ec:	d11b      	bne.n	8008326 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	685a      	ldr	r2, [r3, #4]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80082fc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80082fe:	2300      	movs	r3, #0
 8008300:	60fb      	str	r3, [r7, #12]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	60fb      	str	r3, [r7, #12]
 800830a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008318:	f043 0204 	orr.w	r2, r3, #4
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f7fb ffa7 	bl	8004274 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008326:	bf00      	nop
 8008328:	3718      	adds	r7, #24
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
	...

08008330 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b088      	sub	sp, #32
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4aa2      	ldr	r2, [pc, #648]	; (80085d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d101      	bne.n	800834e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800834a:	4ba2      	ldr	r3, [pc, #648]	; (80085d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800834c:	e001      	b.n	8008352 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800834e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a9b      	ldr	r2, [pc, #620]	; (80085d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d101      	bne.n	800836c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8008368:	4b9a      	ldr	r3, [pc, #616]	; (80085d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800836a:	e001      	b.n	8008370 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800836c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800837c:	d004      	beq.n	8008388 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	f040 8099 	bne.w	80084ba <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	f003 0302 	and.w	r3, r3, #2
 800838e:	2b02      	cmp	r3, #2
 8008390:	d107      	bne.n	80083a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008398:	2b00      	cmp	r3, #0
 800839a:	d002      	beq.n	80083a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 f925 	bl	80085ec <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	f003 0301 	and.w	r3, r3, #1
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d107      	bne.n	80083bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d002      	beq.n	80083bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f9c8 	bl	800874c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c2:	2b40      	cmp	r3, #64	; 0x40
 80083c4:	d13a      	bne.n	800843c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	f003 0320 	and.w	r3, r3, #32
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d035      	beq.n	800843c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a7e      	ldr	r2, [pc, #504]	; (80085d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d101      	bne.n	80083de <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80083da:	4b7e      	ldr	r3, [pc, #504]	; (80085d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80083dc:	e001      	b.n	80083e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80083de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4979      	ldr	r1, [pc, #484]	; (80085d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80083ea:	428b      	cmp	r3, r1
 80083ec:	d101      	bne.n	80083f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80083ee:	4b79      	ldr	r3, [pc, #484]	; (80085d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80083f0:	e001      	b.n	80083f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80083f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80083f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80083fa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	685a      	ldr	r2, [r3, #4]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800840a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800840c:	2300      	movs	r3, #0
 800840e:	60fb      	str	r3, [r7, #12]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	60fb      	str	r3, [r7, #12]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	60fb      	str	r3, [r7, #12]
 8008420:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2201      	movs	r2, #1
 8008426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800842e:	f043 0202 	orr.w	r2, r3, #2
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f7fb ff1c 	bl	8004274 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	f003 0308 	and.w	r3, r3, #8
 8008442:	2b08      	cmp	r3, #8
 8008444:	f040 80be 	bne.w	80085c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	f003 0320 	and.w	r3, r3, #32
 800844e:	2b00      	cmp	r3, #0
 8008450:	f000 80b8 	beq.w	80085c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	685a      	ldr	r2, [r3, #4]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008462:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a59      	ldr	r2, [pc, #356]	; (80085d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d101      	bne.n	8008472 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800846e:	4b59      	ldr	r3, [pc, #356]	; (80085d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8008470:	e001      	b.n	8008476 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8008472:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008476:	685a      	ldr	r2, [r3, #4]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4954      	ldr	r1, [pc, #336]	; (80085d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800847e:	428b      	cmp	r3, r1
 8008480:	d101      	bne.n	8008486 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8008482:	4b54      	ldr	r3, [pc, #336]	; (80085d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8008484:	e001      	b.n	800848a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8008486:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800848a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800848e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8008490:	2300      	movs	r3, #0
 8008492:	60bb      	str	r3, [r7, #8]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	60bb      	str	r3, [r7, #8]
 800849c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2201      	movs	r2, #1
 80084a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084aa:	f043 0204 	orr.w	r2, r3, #4
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f7fb fede 	bl	8004274 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80084b8:	e084      	b.n	80085c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	f003 0302 	and.w	r3, r3, #2
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d107      	bne.n	80084d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d002      	beq.n	80084d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f8be 	bl	8008650 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	f003 0301 	and.w	r3, r3, #1
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d107      	bne.n	80084ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d002      	beq.n	80084ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 f8fd 	bl	80086e8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f4:	2b40      	cmp	r3, #64	; 0x40
 80084f6:	d12f      	bne.n	8008558 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	f003 0320 	and.w	r3, r3, #32
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d02a      	beq.n	8008558 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	685a      	ldr	r2, [r3, #4]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008510:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a2e      	ldr	r2, [pc, #184]	; (80085d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d101      	bne.n	8008520 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800851c:	4b2d      	ldr	r3, [pc, #180]	; (80085d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800851e:	e001      	b.n	8008524 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8008520:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008524:	685a      	ldr	r2, [r3, #4]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4929      	ldr	r1, [pc, #164]	; (80085d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800852c:	428b      	cmp	r3, r1
 800852e:	d101      	bne.n	8008534 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8008530:	4b28      	ldr	r3, [pc, #160]	; (80085d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8008532:	e001      	b.n	8008538 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8008534:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008538:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800853c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2201      	movs	r2, #1
 8008542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800854a:	f043 0202 	orr.w	r2, r3, #2
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f7fb fe8e 	bl	8004274 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	f003 0308 	and.w	r3, r3, #8
 800855e:	2b08      	cmp	r3, #8
 8008560:	d131      	bne.n	80085c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	f003 0320 	and.w	r3, r3, #32
 8008568:	2b00      	cmp	r3, #0
 800856a:	d02c      	beq.n	80085c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a17      	ldr	r2, [pc, #92]	; (80085d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d101      	bne.n	800857a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8008576:	4b17      	ldr	r3, [pc, #92]	; (80085d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8008578:	e001      	b.n	800857e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800857a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800857e:	685a      	ldr	r2, [r3, #4]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4912      	ldr	r1, [pc, #72]	; (80085d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8008586:	428b      	cmp	r3, r1
 8008588:	d101      	bne.n	800858e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800858a:	4b12      	ldr	r3, [pc, #72]	; (80085d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800858c:	e001      	b.n	8008592 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800858e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008592:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008596:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	685a      	ldr	r2, [r3, #4]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80085a6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085b4:	f043 0204 	orr.w	r2, r3, #4
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f7fb fe59 	bl	8004274 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80085c2:	e000      	b.n	80085c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80085c4:	bf00      	nop
}
 80085c6:	bf00      	nop
 80085c8:	3720      	adds	r7, #32
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	40003800 	.word	0x40003800
 80085d4:	40003400 	.word	0x40003400

080085d8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f8:	1c99      	adds	r1, r3, #2
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	6251      	str	r1, [r2, #36]	; 0x24
 80085fe:	881a      	ldrh	r2, [r3, #0]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800860a:	b29b      	uxth	r3, r3
 800860c:	3b01      	subs	r3, #1
 800860e:	b29a      	uxth	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008618:	b29b      	uxth	r3, r3
 800861a:	2b00      	cmp	r3, #0
 800861c:	d113      	bne.n	8008646 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	685a      	ldr	r2, [r3, #4]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800862c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008632:	b29b      	uxth	r3, r3
 8008634:	2b00      	cmp	r3, #0
 8008636:	d106      	bne.n	8008646 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f7ff ffc9 	bl	80085d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008646:	bf00      	nop
 8008648:	3708      	adds	r7, #8
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
	...

08008650 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865c:	1c99      	adds	r1, r3, #2
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	6251      	str	r1, [r2, #36]	; 0x24
 8008662:	8819      	ldrh	r1, [r3, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a1d      	ldr	r2, [pc, #116]	; (80086e0 <I2SEx_TxISR_I2SExt+0x90>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d101      	bne.n	8008672 <I2SEx_TxISR_I2SExt+0x22>
 800866e:	4b1d      	ldr	r3, [pc, #116]	; (80086e4 <I2SEx_TxISR_I2SExt+0x94>)
 8008670:	e001      	b.n	8008676 <I2SEx_TxISR_I2SExt+0x26>
 8008672:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008676:	460a      	mov	r2, r1
 8008678:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800867e:	b29b      	uxth	r3, r3
 8008680:	3b01      	subs	r3, #1
 8008682:	b29a      	uxth	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800868c:	b29b      	uxth	r3, r3
 800868e:	2b00      	cmp	r3, #0
 8008690:	d121      	bne.n	80086d6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a12      	ldr	r2, [pc, #72]	; (80086e0 <I2SEx_TxISR_I2SExt+0x90>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d101      	bne.n	80086a0 <I2SEx_TxISR_I2SExt+0x50>
 800869c:	4b11      	ldr	r3, [pc, #68]	; (80086e4 <I2SEx_TxISR_I2SExt+0x94>)
 800869e:	e001      	b.n	80086a4 <I2SEx_TxISR_I2SExt+0x54>
 80086a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80086a4:	685a      	ldr	r2, [r3, #4]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	490d      	ldr	r1, [pc, #52]	; (80086e0 <I2SEx_TxISR_I2SExt+0x90>)
 80086ac:	428b      	cmp	r3, r1
 80086ae:	d101      	bne.n	80086b4 <I2SEx_TxISR_I2SExt+0x64>
 80086b0:	4b0c      	ldr	r3, [pc, #48]	; (80086e4 <I2SEx_TxISR_I2SExt+0x94>)
 80086b2:	e001      	b.n	80086b8 <I2SEx_TxISR_I2SExt+0x68>
 80086b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80086b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80086bc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d106      	bne.n	80086d6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f7ff ff81 	bl	80085d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80086d6:	bf00      	nop
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	40003800 	.word	0x40003800
 80086e4:	40003400 	.word	0x40003400

080086e8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	68d8      	ldr	r0, [r3, #12]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086fa:	1c99      	adds	r1, r3, #2
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	62d1      	str	r1, [r2, #44]	; 0x2c
 8008700:	b282      	uxth	r2, r0
 8008702:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008708:	b29b      	uxth	r3, r3
 800870a:	3b01      	subs	r3, #1
 800870c:	b29a      	uxth	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008716:	b29b      	uxth	r3, r3
 8008718:	2b00      	cmp	r3, #0
 800871a:	d113      	bne.n	8008744 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	685a      	ldr	r2, [r3, #4]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800872a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008730:	b29b      	uxth	r3, r3
 8008732:	2b00      	cmp	r3, #0
 8008734:	d106      	bne.n	8008744 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2201      	movs	r2, #1
 800873a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f7ff ff4a 	bl	80085d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008744:	bf00      	nop
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a20      	ldr	r2, [pc, #128]	; (80087dc <I2SEx_RxISR_I2SExt+0x90>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d101      	bne.n	8008762 <I2SEx_RxISR_I2SExt+0x16>
 800875e:	4b20      	ldr	r3, [pc, #128]	; (80087e0 <I2SEx_RxISR_I2SExt+0x94>)
 8008760:	e001      	b.n	8008766 <I2SEx_RxISR_I2SExt+0x1a>
 8008762:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008766:	68d8      	ldr	r0, [r3, #12]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876c:	1c99      	adds	r1, r3, #2
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	62d1      	str	r1, [r2, #44]	; 0x2c
 8008772:	b282      	uxth	r2, r0
 8008774:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800877a:	b29b      	uxth	r3, r3
 800877c:	3b01      	subs	r3, #1
 800877e:	b29a      	uxth	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008788:	b29b      	uxth	r3, r3
 800878a:	2b00      	cmp	r3, #0
 800878c:	d121      	bne.n	80087d2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a12      	ldr	r2, [pc, #72]	; (80087dc <I2SEx_RxISR_I2SExt+0x90>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d101      	bne.n	800879c <I2SEx_RxISR_I2SExt+0x50>
 8008798:	4b11      	ldr	r3, [pc, #68]	; (80087e0 <I2SEx_RxISR_I2SExt+0x94>)
 800879a:	e001      	b.n	80087a0 <I2SEx_RxISR_I2SExt+0x54>
 800879c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80087a0:	685a      	ldr	r2, [r3, #4]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	490d      	ldr	r1, [pc, #52]	; (80087dc <I2SEx_RxISR_I2SExt+0x90>)
 80087a8:	428b      	cmp	r3, r1
 80087aa:	d101      	bne.n	80087b0 <I2SEx_RxISR_I2SExt+0x64>
 80087ac:	4b0c      	ldr	r3, [pc, #48]	; (80087e0 <I2SEx_RxISR_I2SExt+0x94>)
 80087ae:	e001      	b.n	80087b4 <I2SEx_RxISR_I2SExt+0x68>
 80087b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80087b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80087b8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087be:	b29b      	uxth	r3, r3
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d106      	bne.n	80087d2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f7ff ff03 	bl	80085d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80087d2:	bf00      	nop
 80087d4:	3708      	adds	r7, #8
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	40003800 	.word	0x40003800
 80087e0:	40003400 	.word	0x40003400

080087e4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af02      	add	r7, sp, #8
 80087ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80087ec:	f7fc faf2 	bl	8004dd4 <HAL_GetTick>
 80087f0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d101      	bne.n	80087fc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e069      	b.n	80088d0 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008802:	b2db      	uxtb	r3, r3
 8008804:	2b00      	cmp	r3, #0
 8008806:	d10b      	bne.n	8008820 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f7fa fc4f 	bl	80030b4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008816:	f241 3188 	movw	r1, #5000	; 0x1388
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f85e 	bl	80088dc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	3b01      	subs	r3, #1
 8008830:	021a      	lsls	r2, r3, #8
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	430a      	orrs	r2, r1
 8008838:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800883e:	9300      	str	r3, [sp, #0]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2200      	movs	r2, #0
 8008844:	2120      	movs	r1, #32
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 f856 	bl	80088f8 <QSPI_WaitFlagStateUntilTimeout>
 800884c:	4603      	mov	r3, r0
 800884e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008850:	7afb      	ldrb	r3, [r7, #11]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d137      	bne.n	80088c6 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008860:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	6852      	ldr	r2, [r2, #4]
 8008868:	0611      	lsls	r1, r2, #24
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	68d2      	ldr	r2, [r2, #12]
 800886e:	4311      	orrs	r1, r2
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	69d2      	ldr	r2, [r2, #28]
 8008874:	4311      	orrs	r1, r2
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	6a12      	ldr	r2, [r2, #32]
 800887a:	4311      	orrs	r1, r2
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	6812      	ldr	r2, [r2, #0]
 8008880:	430b      	orrs	r3, r1
 8008882:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	685a      	ldr	r2, [r3, #4]
 800888a:	4b13      	ldr	r3, [pc, #76]	; (80088d8 <HAL_QSPI_Init+0xf4>)
 800888c:	4013      	ands	r3, r2
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	6912      	ldr	r2, [r2, #16]
 8008892:	0411      	lsls	r1, r2, #16
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	6952      	ldr	r2, [r2, #20]
 8008898:	4311      	orrs	r1, r2
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	6992      	ldr	r2, [r2, #24]
 800889e:	4311      	orrs	r1, r2
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	6812      	ldr	r2, [r2, #0]
 80088a4:	430b      	orrs	r3, r1
 80088a6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f042 0201 	orr.w	r2, r2, #1
 80088b6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80088ce:	7afb      	ldrb	r3, [r7, #11]
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	ffe0f8fe 	.word	0xffe0f8fe

080088dc <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	683a      	ldr	r2, [r7, #0]
 80088ea:	649a      	str	r2, [r3, #72]	; 0x48
}
 80088ec:	bf00      	nop
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	603b      	str	r3, [r7, #0]
 8008904:	4613      	mov	r3, r2
 8008906:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008908:	e01a      	b.n	8008940 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008910:	d016      	beq.n	8008940 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008912:	f7fc fa5f 	bl	8004dd4 <HAL_GetTick>
 8008916:	4602      	mov	r2, r0
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	69ba      	ldr	r2, [r7, #24]
 800891e:	429a      	cmp	r2, r3
 8008920:	d302      	bcc.n	8008928 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d10b      	bne.n	8008940 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2204      	movs	r2, #4
 800892c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008934:	f043 0201 	orr.w	r2, r3, #1
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	e00e      	b.n	800895e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	689a      	ldr	r2, [r3, #8]
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	4013      	ands	r3, r2
 800894a:	2b00      	cmp	r3, #0
 800894c:	bf14      	ite	ne
 800894e:	2301      	movne	r3, #1
 8008950:	2300      	moveq	r3, #0
 8008952:	b2db      	uxtb	r3, r3
 8008954:	461a      	mov	r2, r3
 8008956:	79fb      	ldrb	r3, [r7, #7]
 8008958:	429a      	cmp	r2, r3
 800895a:	d1d6      	bne.n	800890a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
	...

08008968 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d101      	bne.n	800897c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	e0cc      	b.n	8008b16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800897c:	4b68      	ldr	r3, [pc, #416]	; (8008b20 <HAL_RCC_ClockConfig+0x1b8>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 030f 	and.w	r3, r3, #15
 8008984:	683a      	ldr	r2, [r7, #0]
 8008986:	429a      	cmp	r2, r3
 8008988:	d90c      	bls.n	80089a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800898a:	4b65      	ldr	r3, [pc, #404]	; (8008b20 <HAL_RCC_ClockConfig+0x1b8>)
 800898c:	683a      	ldr	r2, [r7, #0]
 800898e:	b2d2      	uxtb	r2, r2
 8008990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008992:	4b63      	ldr	r3, [pc, #396]	; (8008b20 <HAL_RCC_ClockConfig+0x1b8>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f003 030f 	and.w	r3, r3, #15
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	429a      	cmp	r2, r3
 800899e:	d001      	beq.n	80089a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	e0b8      	b.n	8008b16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f003 0302 	and.w	r3, r3, #2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d020      	beq.n	80089f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 0304 	and.w	r3, r3, #4
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d005      	beq.n	80089c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80089bc:	4b59      	ldr	r3, [pc, #356]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	4a58      	ldr	r2, [pc, #352]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 80089c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80089c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f003 0308 	and.w	r3, r3, #8
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d005      	beq.n	80089e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80089d4:	4b53      	ldr	r3, [pc, #332]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	4a52      	ldr	r2, [pc, #328]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 80089da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80089de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089e0:	4b50      	ldr	r3, [pc, #320]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	494d      	ldr	r1, [pc, #308]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 80089ee:	4313      	orrs	r3, r2
 80089f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 0301 	and.w	r3, r3, #1
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d044      	beq.n	8008a88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d107      	bne.n	8008a16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a06:	4b47      	ldr	r3, [pc, #284]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d119      	bne.n	8008a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e07f      	b.n	8008b16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d003      	beq.n	8008a26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a22:	2b03      	cmp	r3, #3
 8008a24:	d107      	bne.n	8008a36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a26:	4b3f      	ldr	r3, [pc, #252]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d109      	bne.n	8008a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e06f      	b.n	8008b16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a36:	4b3b      	ldr	r3, [pc, #236]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 0302 	and.w	r3, r3, #2
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e067      	b.n	8008b16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a46:	4b37      	ldr	r3, [pc, #220]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	f023 0203 	bic.w	r2, r3, #3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	4934      	ldr	r1, [pc, #208]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 8008a54:	4313      	orrs	r3, r2
 8008a56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008a58:	f7fc f9bc 	bl	8004dd4 <HAL_GetTick>
 8008a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a5e:	e00a      	b.n	8008a76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a60:	f7fc f9b8 	bl	8004dd4 <HAL_GetTick>
 8008a64:	4602      	mov	r2, r0
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d901      	bls.n	8008a76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008a72:	2303      	movs	r3, #3
 8008a74:	e04f      	b.n	8008b16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a76:	4b2b      	ldr	r3, [pc, #172]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	f003 020c 	and.w	r2, r3, #12
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d1eb      	bne.n	8008a60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008a88:	4b25      	ldr	r3, [pc, #148]	; (8008b20 <HAL_RCC_ClockConfig+0x1b8>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 030f 	and.w	r3, r3, #15
 8008a90:	683a      	ldr	r2, [r7, #0]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d20c      	bcs.n	8008ab0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a96:	4b22      	ldr	r3, [pc, #136]	; (8008b20 <HAL_RCC_ClockConfig+0x1b8>)
 8008a98:	683a      	ldr	r2, [r7, #0]
 8008a9a:	b2d2      	uxtb	r2, r2
 8008a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a9e:	4b20      	ldr	r3, [pc, #128]	; (8008b20 <HAL_RCC_ClockConfig+0x1b8>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 030f 	and.w	r3, r3, #15
 8008aa6:	683a      	ldr	r2, [r7, #0]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d001      	beq.n	8008ab0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	e032      	b.n	8008b16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 0304 	and.w	r3, r3, #4
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d008      	beq.n	8008ace <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008abc:	4b19      	ldr	r3, [pc, #100]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	4916      	ldr	r1, [pc, #88]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 8008aca:	4313      	orrs	r3, r2
 8008acc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 0308 	and.w	r3, r3, #8
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d009      	beq.n	8008aee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008ada:	4b12      	ldr	r3, [pc, #72]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	691b      	ldr	r3, [r3, #16]
 8008ae6:	00db      	lsls	r3, r3, #3
 8008ae8:	490e      	ldr	r1, [pc, #56]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 8008aea:	4313      	orrs	r3, r2
 8008aec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008aee:	f000 f821 	bl	8008b34 <HAL_RCC_GetSysClockFreq>
 8008af2:	4601      	mov	r1, r0
 8008af4:	4b0b      	ldr	r3, [pc, #44]	; (8008b24 <HAL_RCC_ClockConfig+0x1bc>)
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	091b      	lsrs	r3, r3, #4
 8008afa:	f003 030f 	and.w	r3, r3, #15
 8008afe:	4a0a      	ldr	r2, [pc, #40]	; (8008b28 <HAL_RCC_ClockConfig+0x1c0>)
 8008b00:	5cd3      	ldrb	r3, [r2, r3]
 8008b02:	fa21 f303 	lsr.w	r3, r1, r3
 8008b06:	4a09      	ldr	r2, [pc, #36]	; (8008b2c <HAL_RCC_ClockConfig+0x1c4>)
 8008b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008b0a:	4b09      	ldr	r3, [pc, #36]	; (8008b30 <HAL_RCC_ClockConfig+0x1c8>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fa fcfa 	bl	8003508 <HAL_InitTick>

  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	40023c00 	.word	0x40023c00
 8008b24:	40023800 	.word	0x40023800
 8008b28:	080160bc 	.word	0x080160bc
 8008b2c:	2000003c 	.word	0x2000003c
 8008b30:	20000098 	.word	0x20000098

08008b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	607b      	str	r3, [r7, #4]
 8008b3e:	2300      	movs	r3, #0
 8008b40:	60fb      	str	r3, [r7, #12]
 8008b42:	2300      	movs	r3, #0
 8008b44:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008b46:	2300      	movs	r3, #0
 8008b48:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b4a:	4b50      	ldr	r3, [pc, #320]	; (8008c8c <HAL_RCC_GetSysClockFreq+0x158>)
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	f003 030c 	and.w	r3, r3, #12
 8008b52:	2b04      	cmp	r3, #4
 8008b54:	d007      	beq.n	8008b66 <HAL_RCC_GetSysClockFreq+0x32>
 8008b56:	2b08      	cmp	r3, #8
 8008b58:	d008      	beq.n	8008b6c <HAL_RCC_GetSysClockFreq+0x38>
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f040 808d 	bne.w	8008c7a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008b60:	4b4b      	ldr	r3, [pc, #300]	; (8008c90 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008b62:	60bb      	str	r3, [r7, #8]
       break;
 8008b64:	e08c      	b.n	8008c80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008b66:	4b4b      	ldr	r3, [pc, #300]	; (8008c94 <HAL_RCC_GetSysClockFreq+0x160>)
 8008b68:	60bb      	str	r3, [r7, #8]
      break;
 8008b6a:	e089      	b.n	8008c80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008b6c:	4b47      	ldr	r3, [pc, #284]	; (8008c8c <HAL_RCC_GetSysClockFreq+0x158>)
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b74:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008b76:	4b45      	ldr	r3, [pc, #276]	; (8008c8c <HAL_RCC_GetSysClockFreq+0x158>)
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d023      	beq.n	8008bca <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b82:	4b42      	ldr	r3, [pc, #264]	; (8008c8c <HAL_RCC_GetSysClockFreq+0x158>)
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	099b      	lsrs	r3, r3, #6
 8008b88:	f04f 0400 	mov.w	r4, #0
 8008b8c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008b90:	f04f 0200 	mov.w	r2, #0
 8008b94:	ea03 0501 	and.w	r5, r3, r1
 8008b98:	ea04 0602 	and.w	r6, r4, r2
 8008b9c:	4a3d      	ldr	r2, [pc, #244]	; (8008c94 <HAL_RCC_GetSysClockFreq+0x160>)
 8008b9e:	fb02 f106 	mul.w	r1, r2, r6
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	fb02 f205 	mul.w	r2, r2, r5
 8008ba8:	440a      	add	r2, r1
 8008baa:	493a      	ldr	r1, [pc, #232]	; (8008c94 <HAL_RCC_GetSysClockFreq+0x160>)
 8008bac:	fba5 0101 	umull	r0, r1, r5, r1
 8008bb0:	1853      	adds	r3, r2, r1
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f04f 0400 	mov.w	r4, #0
 8008bba:	461a      	mov	r2, r3
 8008bbc:	4623      	mov	r3, r4
 8008bbe:	f7f8 f813 	bl	8000be8 <__aeabi_uldivmod>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	460c      	mov	r4, r1
 8008bc6:	60fb      	str	r3, [r7, #12]
 8008bc8:	e049      	b.n	8008c5e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008bca:	4b30      	ldr	r3, [pc, #192]	; (8008c8c <HAL_RCC_GetSysClockFreq+0x158>)
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	099b      	lsrs	r3, r3, #6
 8008bd0:	f04f 0400 	mov.w	r4, #0
 8008bd4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008bd8:	f04f 0200 	mov.w	r2, #0
 8008bdc:	ea03 0501 	and.w	r5, r3, r1
 8008be0:	ea04 0602 	and.w	r6, r4, r2
 8008be4:	4629      	mov	r1, r5
 8008be6:	4632      	mov	r2, r6
 8008be8:	f04f 0300 	mov.w	r3, #0
 8008bec:	f04f 0400 	mov.w	r4, #0
 8008bf0:	0154      	lsls	r4, r2, #5
 8008bf2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008bf6:	014b      	lsls	r3, r1, #5
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	4622      	mov	r2, r4
 8008bfc:	1b49      	subs	r1, r1, r5
 8008bfe:	eb62 0206 	sbc.w	r2, r2, r6
 8008c02:	f04f 0300 	mov.w	r3, #0
 8008c06:	f04f 0400 	mov.w	r4, #0
 8008c0a:	0194      	lsls	r4, r2, #6
 8008c0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008c10:	018b      	lsls	r3, r1, #6
 8008c12:	1a5b      	subs	r3, r3, r1
 8008c14:	eb64 0402 	sbc.w	r4, r4, r2
 8008c18:	f04f 0100 	mov.w	r1, #0
 8008c1c:	f04f 0200 	mov.w	r2, #0
 8008c20:	00e2      	lsls	r2, r4, #3
 8008c22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008c26:	00d9      	lsls	r1, r3, #3
 8008c28:	460b      	mov	r3, r1
 8008c2a:	4614      	mov	r4, r2
 8008c2c:	195b      	adds	r3, r3, r5
 8008c2e:	eb44 0406 	adc.w	r4, r4, r6
 8008c32:	f04f 0100 	mov.w	r1, #0
 8008c36:	f04f 0200 	mov.w	r2, #0
 8008c3a:	02a2      	lsls	r2, r4, #10
 8008c3c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008c40:	0299      	lsls	r1, r3, #10
 8008c42:	460b      	mov	r3, r1
 8008c44:	4614      	mov	r4, r2
 8008c46:	4618      	mov	r0, r3
 8008c48:	4621      	mov	r1, r4
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f04f 0400 	mov.w	r4, #0
 8008c50:	461a      	mov	r2, r3
 8008c52:	4623      	mov	r3, r4
 8008c54:	f7f7 ffc8 	bl	8000be8 <__aeabi_uldivmod>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	460c      	mov	r4, r1
 8008c5c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008c5e:	4b0b      	ldr	r3, [pc, #44]	; (8008c8c <HAL_RCC_GetSysClockFreq+0x158>)
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	0c1b      	lsrs	r3, r3, #16
 8008c64:	f003 0303 	and.w	r3, r3, #3
 8008c68:	3301      	adds	r3, #1
 8008c6a:	005b      	lsls	r3, r3, #1
 8008c6c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c76:	60bb      	str	r3, [r7, #8]
      break;
 8008c78:	e002      	b.n	8008c80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008c7a:	4b05      	ldr	r3, [pc, #20]	; (8008c90 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008c7c:	60bb      	str	r3, [r7, #8]
      break;
 8008c7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008c80:	68bb      	ldr	r3, [r7, #8]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3714      	adds	r7, #20
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	40023800 	.word	0x40023800
 8008c90:	00f42400 	.word	0x00f42400
 8008c94:	017d7840 	.word	0x017d7840

08008c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c9c:	4b03      	ldr	r3, [pc, #12]	; (8008cac <HAL_RCC_GetHCLKFreq+0x14>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	2000003c 	.word	0x2000003c

08008cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008cb4:	f7ff fff0 	bl	8008c98 <HAL_RCC_GetHCLKFreq>
 8008cb8:	4601      	mov	r1, r0
 8008cba:	4b05      	ldr	r3, [pc, #20]	; (8008cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	0a9b      	lsrs	r3, r3, #10
 8008cc0:	f003 0307 	and.w	r3, r3, #7
 8008cc4:	4a03      	ldr	r2, [pc, #12]	; (8008cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008cc6:	5cd3      	ldrb	r3, [r2, r3]
 8008cc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	40023800 	.word	0x40023800
 8008cd4:	080160cc 	.word	0x080160cc

08008cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008cdc:	f7ff ffdc 	bl	8008c98 <HAL_RCC_GetHCLKFreq>
 8008ce0:	4601      	mov	r1, r0
 8008ce2:	4b05      	ldr	r3, [pc, #20]	; (8008cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	0b5b      	lsrs	r3, r3, #13
 8008ce8:	f003 0307 	and.w	r3, r3, #7
 8008cec:	4a03      	ldr	r2, [pc, #12]	; (8008cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8008cee:	5cd3      	ldrb	r3, [r2, r3]
 8008cf0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	40023800 	.word	0x40023800
 8008cfc:	080160cc 	.word	0x080160cc

08008d00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	220f      	movs	r2, #15
 8008d0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008d10:	4b12      	ldr	r3, [pc, #72]	; (8008d5c <HAL_RCC_GetClockConfig+0x5c>)
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	f003 0203 	and.w	r2, r3, #3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008d1c:	4b0f      	ldr	r3, [pc, #60]	; (8008d5c <HAL_RCC_GetClockConfig+0x5c>)
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008d28:	4b0c      	ldr	r3, [pc, #48]	; (8008d5c <HAL_RCC_GetClockConfig+0x5c>)
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008d34:	4b09      	ldr	r3, [pc, #36]	; (8008d5c <HAL_RCC_GetClockConfig+0x5c>)
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	08db      	lsrs	r3, r3, #3
 8008d3a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008d42:	4b07      	ldr	r3, [pc, #28]	; (8008d60 <HAL_RCC_GetClockConfig+0x60>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 020f 	and.w	r2, r3, #15
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	601a      	str	r2, [r3, #0]
}
 8008d4e:	bf00      	nop
 8008d50:	370c      	adds	r7, #12
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	40023800 	.word	0x40023800
 8008d60:	40023c00 	.word	0x40023c00

08008d64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b088      	sub	sp, #32
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8008d70:	2300      	movs	r3, #0
 8008d72:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8008d74:	2300      	movs	r3, #0
 8008d76:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f003 0301 	and.w	r3, r3, #1
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d010      	beq.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8008d88:	4b7a      	ldr	r3, [pc, #488]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d8e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	69db      	ldr	r3, [r3, #28]
 8008d96:	4977      	ldr	r1, [pc, #476]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	69db      	ldr	r3, [r3, #28]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d101      	bne.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8008da6:	2301      	movs	r3, #1
 8008da8:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 0302 	and.w	r3, r3, #2
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d010      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8008db6:	4b6f      	ldr	r3, [pc, #444]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dbc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6a1b      	ldr	r3, [r3, #32]
 8008dc4:	496b      	ldr	r1, [pc, #428]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6a1b      	ldr	r3, [r3, #32]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d101      	bne.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d022      	beq.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8008de4:	4b63      	ldr	r3, [pc, #396]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008df2:	4960      	ldr	r1, [pc, #384]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008df4:	4313      	orrs	r3, r2
 8008df6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d101      	bne.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8008e02:	2301      	movs	r3, #1
 8008e04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e0e:	d10c      	bne.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8008e10:	4b58      	ldr	r3, [pc, #352]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008e12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e16:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	695b      	ldr	r3, [r3, #20]
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	021b      	lsls	r3, r3, #8
 8008e22:	4954      	ldr	r1, [pc, #336]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008e24:	4313      	orrs	r3, r2
 8008e26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d022      	beq.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8008e36:	4b4f      	ldr	r3, [pc, #316]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e44:	494b      	ldr	r1, [pc, #300]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008e46:	4313      	orrs	r3, r2
 8008e48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d101      	bne.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8008e54:	2301      	movs	r3, #1
 8008e56:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e60:	d10c      	bne.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8008e62:	4b44      	ldr	r3, [pc, #272]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e68:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	695b      	ldr	r3, [r3, #20]
 8008e70:	3b01      	subs	r3, #1
 8008e72:	021b      	lsls	r3, r3, #8
 8008e74:	493f      	ldr	r1, [pc, #252]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008e76:	4313      	orrs	r3, r2
 8008e78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f003 0308 	and.w	r3, r3, #8
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f000 808a 	beq.w	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	60fb      	str	r3, [r7, #12]
 8008e8e:	4b39      	ldr	r3, [pc, #228]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e92:	4a38      	ldr	r2, [pc, #224]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e98:	6413      	str	r3, [r2, #64]	; 0x40
 8008e9a:	4b36      	ldr	r3, [pc, #216]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ea2:	60fb      	str	r3, [r7, #12]
 8008ea4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008ea6:	4b34      	ldr	r3, [pc, #208]	; (8008f78 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a33      	ldr	r2, [pc, #204]	; (8008f78 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8008eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008eb0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008eb2:	f7fb ff8f 	bl	8004dd4 <HAL_GetTick>
 8008eb6:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008eb8:	e008      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008eba:	f7fb ff8b 	bl	8004dd4 <HAL_GetTick>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	1ad3      	subs	r3, r2, r3
 8008ec4:	2b02      	cmp	r3, #2
 8008ec6:	d901      	bls.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	e1d1      	b.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008ecc:	4b2a      	ldr	r3, [pc, #168]	; (8008f78 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d0f0      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008ed8:	4b26      	ldr	r3, [pc, #152]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ee0:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d02f      	beq.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ef0:	697a      	ldr	r2, [r7, #20]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d028      	beq.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008ef6:	4b1f      	ldr	r3, [pc, #124]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008efe:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008f00:	4b1e      	ldr	r3, [pc, #120]	; (8008f7c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8008f02:	2201      	movs	r2, #1
 8008f04:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008f06:	4b1d      	ldr	r3, [pc, #116]	; (8008f7c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8008f08:	2200      	movs	r2, #0
 8008f0a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008f0c:	4a19      	ldr	r2, [pc, #100]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008f12:	4b18      	ldr	r3, [pc, #96]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f16:	f003 0301 	and.w	r3, r3, #1
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d114      	bne.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008f1e:	f7fb ff59 	bl	8004dd4 <HAL_GetTick>
 8008f22:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f24:	e00a      	b.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f26:	f7fb ff55 	bl	8004dd4 <HAL_GetTick>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	1ad3      	subs	r3, r2, r3
 8008f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d901      	bls.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8008f38:	2303      	movs	r3, #3
 8008f3a:	e199      	b.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f3c:	4b0d      	ldr	r3, [pc, #52]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f40:	f003 0302 	and.w	r3, r3, #2
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d0ee      	beq.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f54:	d114      	bne.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8008f56:	4b07      	ldr	r3, [pc, #28]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f62:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f6a:	4902      	ldr	r1, [pc, #8]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	608b      	str	r3, [r1, #8]
 8008f70:	e00c      	b.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x228>
 8008f72:	bf00      	nop
 8008f74:	40023800 	.word	0x40023800
 8008f78:	40007000 	.word	0x40007000
 8008f7c:	42470e40 	.word	0x42470e40
 8008f80:	4b89      	ldr	r3, [pc, #548]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	4a88      	ldr	r2, [pc, #544]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008f86:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008f8a:	6093      	str	r3, [r2, #8]
 8008f8c:	4b86      	ldr	r3, [pc, #536]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008f8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f98:	4983      	ldr	r1, [pc, #524]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f003 0304 	and.w	r3, r3, #4
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d004      	beq.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8008fb0:	4b7e      	ldr	r3, [pc, #504]	; (80091ac <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8008fb2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f003 0310 	and.w	r3, r3, #16
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00a      	beq.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8008fc0:	4b79      	ldr	r3, [pc, #484]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fce:	4976      	ldr	r1, [pc, #472]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 0320 	and.w	r3, r3, #32
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d011      	beq.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008fe2:	4b71      	ldr	r3, [pc, #452]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fe8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff0:	496d      	ldr	r1, [pc, #436]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ffc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009000:	d101      	bne.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8009002:	2301      	movs	r3, #1
 8009004:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00a      	beq.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8009012:	4b65      	ldr	r3, [pc, #404]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8009014:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009018:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009020:	4961      	ldr	r1, [pc, #388]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8009022:	4313      	orrs	r3, r2
 8009024:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	2b01      	cmp	r3, #1
 800902c:	d004      	beq.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2b80      	cmp	r3, #128	; 0x80
 8009034:	f040 80c6 	bne.w	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009038:	4b5d      	ldr	r3, [pc, #372]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800903a:	2200      	movs	r2, #0
 800903c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800903e:	f7fb fec9 	bl	8004dd4 <HAL_GetTick>
 8009042:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009044:	e008      	b.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009046:	f7fb fec5 	bl	8004dd4 <HAL_GetTick>
 800904a:	4602      	mov	r2, r0
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	1ad3      	subs	r3, r2, r3
 8009050:	2b02      	cmp	r3, #2
 8009052:	d901      	bls.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009054:	2303      	movs	r3, #3
 8009056:	e10b      	b.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009058:	4b53      	ldr	r3, [pc, #332]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1f0      	bne.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8009064:	4a53      	ldr	r2, [pc, #332]	; (80091b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800906a:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 0301 	and.w	r3, r3, #1
 8009074:	2b00      	cmp	r3, #0
 8009076:	d003      	beq.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	69db      	ldr	r3, [r3, #28]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d023      	beq.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8009088:	2b00      	cmp	r3, #0
 800908a:	d003      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6a1b      	ldr	r3, [r3, #32]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d019      	beq.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800909c:	2b00      	cmp	r3, #0
 800909e:	d004      	beq.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090a8:	d00e      	beq.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d019      	beq.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d115      	bne.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x386>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090c6:	d110      	bne.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	685a      	ldr	r2, [r3, #4]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	019b      	lsls	r3, r3, #6
 80090d2:	431a      	orrs	r2, r3
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	061b      	lsls	r3, r3, #24
 80090da:	431a      	orrs	r2, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	071b      	lsls	r3, r3, #28
 80090e2:	4931      	ldr	r1, [pc, #196]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80090e4:	4313      	orrs	r3, r2
 80090e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d003      	beq.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d009      	beq.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8009106:	2b00      	cmp	r3, #0
 8009108:	d026      	beq.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800910e:	2b00      	cmp	r3, #0
 8009110:	d122      	bne.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009112:	4b25      	ldr	r3, [pc, #148]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8009114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009118:	0e1b      	lsrs	r3, r3, #24
 800911a:	f003 030f 	and.w	r3, r3, #15
 800911e:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	685a      	ldr	r2, [r3, #4]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	019b      	lsls	r3, r3, #6
 800912a:	431a      	orrs	r2, r3
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	061b      	lsls	r3, r3, #24
 8009130:	431a      	orrs	r2, r3
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	691b      	ldr	r3, [r3, #16]
 8009136:	071b      	lsls	r3, r3, #28
 8009138:	491b      	ldr	r1, [pc, #108]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800913a:	4313      	orrs	r3, r2
 800913c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8009140:	4b19      	ldr	r3, [pc, #100]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8009142:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009146:	f023 021f 	bic.w	r2, r3, #31
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	699b      	ldr	r3, [r3, #24]
 800914e:	3b01      	subs	r3, #1
 8009150:	4915      	ldr	r1, [pc, #84]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8009152:	4313      	orrs	r3, r2
 8009154:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009160:	2b00      	cmp	r3, #0
 8009162:	d010      	beq.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	685a      	ldr	r2, [r3, #4]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	019b      	lsls	r3, r3, #6
 800916e:	431a      	orrs	r2, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	061b      	lsls	r3, r3, #24
 8009176:	431a      	orrs	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	071b      	lsls	r3, r3, #28
 800917e:	490a      	ldr	r1, [pc, #40]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8009180:	4313      	orrs	r3, r2
 8009182:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009186:	4b0a      	ldr	r3, [pc, #40]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8009188:	2201      	movs	r2, #1
 800918a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800918c:	f7fb fe22 	bl	8004dd4 <HAL_GetTick>
 8009190:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009192:	e011      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009194:	f7fb fe1e 	bl	8004dd4 <HAL_GetTick>
 8009198:	4602      	mov	r2, r0
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	1ad3      	subs	r3, r2, r3
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d90a      	bls.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80091a2:	2303      	movs	r3, #3
 80091a4:	e064      	b.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80091a6:	bf00      	nop
 80091a8:	40023800 	.word	0x40023800
 80091ac:	424711e0 	.word	0x424711e0
 80091b0:	42470068 	.word	0x42470068
 80091b4:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80091b8:	4b2f      	ldr	r3, [pc, #188]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d0e7      	beq.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00a      	beq.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80091d0:	4b29      	ldr	r3, [pc, #164]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80091d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091de:	4926      	ldr	r1, [pc, #152]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80091e0:	4313      	orrs	r3, r2
 80091e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00a      	beq.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80091f2:	4b21      	ldr	r3, [pc, #132]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80091f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091f8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009200:	491d      	ldr	r1, [pc, #116]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8009202:	4313      	orrs	r3, r2
 8009204:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00a      	beq.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8009214:	4b18      	ldr	r3, [pc, #96]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8009216:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800921a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009222:	4915      	ldr	r1, [pc, #84]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8009224:	4313      	orrs	r3, r2
 8009226:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00a      	beq.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8009236:	4b10      	ldr	r3, [pc, #64]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8009238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800923c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009244:	490c      	ldr	r1, [pc, #48]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8009246:	4313      	orrs	r3, r2
 8009248:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009254:	2b00      	cmp	r3, #0
 8009256:	d00a      	beq.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009258:	4b07      	ldr	r3, [pc, #28]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800925a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800925e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009266:	4904      	ldr	r1, [pc, #16]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8009268:	4313      	orrs	r3, r2
 800926a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3720      	adds	r7, #32
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}
 8009278:	40023800 	.word	0x40023800

0800927c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800927c:	b480      	push	{r7}
 800927e:	b087      	sub	sp, #28
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8009284:	2300      	movs	r3, #0
 8009286:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8009288:	2300      	movs	r3, #0
 800928a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800928c:	2300      	movs	r3, #0
 800928e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8009290:	2300      	movs	r3, #0
 8009292:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d003      	beq.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 800929a:	2b02      	cmp	r3, #2
 800929c:	f000 8098 	beq.w	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80092a0:	e12d      	b.n	80094fe <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80092a2:	4b9a      	ldr	r3, [pc, #616]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80092a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092a8:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80092ac:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092b4:	d00c      	beq.n	80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 80092b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092ba:	d802      	bhi.n	80092c2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00a      	beq.n	80092d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80092c0:	e082      	b.n	80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80092c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80092c6:	d047      	beq.n	8009358 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80092c8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80092cc:	d06f      	beq.n	80093ae <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 80092ce:	e07b      	b.n	80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80092d0:	4b8f      	ldr	r3, [pc, #572]	; (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80092d2:	617b      	str	r3, [r7, #20]
          break;
 80092d4:	e07b      	b.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 80092d6:	4b8d      	ldr	r3, [pc, #564]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80092d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092e4:	d109      	bne.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80092e6:	4b89      	ldr	r3, [pc, #548]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80092e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092f0:	4a87      	ldr	r2, [pc, #540]	; (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80092f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80092f6:	613b      	str	r3, [r7, #16]
 80092f8:	e019      	b.n	800932e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80092fa:	4b84      	ldr	r3, [pc, #528]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009306:	d109      	bne.n	800931c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8009308:	4b80      	ldr	r3, [pc, #512]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800930a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800930e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009312:	4a80      	ldr	r2, [pc, #512]	; (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009314:	fbb2 f3f3 	udiv	r3, r2, r3
 8009318:	613b      	str	r3, [r7, #16]
 800931a:	e008      	b.n	800932e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800931c:	4b7b      	ldr	r3, [pc, #492]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800931e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009322:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009326:	4a7c      	ldr	r2, [pc, #496]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009328:	fbb2 f3f3 	udiv	r3, r2, r3
 800932c:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800932e:	4b77      	ldr	r3, [pc, #476]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009334:	099b      	lsrs	r3, r3, #6
 8009336:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	fb02 f303 	mul.w	r3, r2, r3
 8009340:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8009342:	4b72      	ldr	r3, [pc, #456]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009348:	0f1b      	lsrs	r3, r3, #28
 800934a:	f003 0307 	and.w	r3, r3, #7
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	fbb2 f3f3 	udiv	r3, r2, r3
 8009354:	617b      	str	r3, [r7, #20]
          break;
 8009356:	e03a      	b.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009358:	4b6c      	ldr	r3, [pc, #432]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009360:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009364:	d108      	bne.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009366:	4b69      	ldr	r3, [pc, #420]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800936e:	4a69      	ldr	r2, [pc, #420]	; (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009370:	fbb2 f3f3 	udiv	r3, r2, r3
 8009374:	613b      	str	r3, [r7, #16]
 8009376:	e007      	b.n	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009378:	4b64      	ldr	r3, [pc, #400]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009380:	4a65      	ldr	r2, [pc, #404]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009382:	fbb2 f3f3 	udiv	r3, r2, r3
 8009386:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8009388:	4b60      	ldr	r3, [pc, #384]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	099b      	lsrs	r3, r3, #6
 800938e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	fb02 f303 	mul.w	r3, r2, r3
 8009398:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800939a:	4b5c      	ldr	r3, [pc, #368]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	0f1b      	lsrs	r3, r3, #28
 80093a0:	f003 0307 	and.w	r3, r3, #7
 80093a4:	68ba      	ldr	r2, [r7, #8]
 80093a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80093aa:	617b      	str	r3, [r7, #20]
          break;
 80093ac:	e00f      	b.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80093ae:	4b57      	ldr	r3, [pc, #348]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80093ba:	d102      	bne.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 80093bc:	4b55      	ldr	r3, [pc, #340]	; (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80093be:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80093c0:	e005      	b.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 80093c2:	4b55      	ldr	r3, [pc, #340]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80093c4:	617b      	str	r3, [r7, #20]
          break;
 80093c6:	e002      	b.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80093c8:	2300      	movs	r3, #0
 80093ca:	617b      	str	r3, [r7, #20]
          break;
 80093cc:	bf00      	nop
        }
      }
      break;
 80093ce:	e096      	b.n	80094fe <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80093d0:	4b4e      	ldr	r3, [pc, #312]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80093d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093d6:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80093da:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093e2:	d00c      	beq.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 80093e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093e8:	d802      	bhi.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00a      	beq.n	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80093ee:	e082      	b.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80093f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093f4:	d047      	beq.n	8009486 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80093f6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80093fa:	d06f      	beq.n	80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80093fc:	e07b      	b.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80093fe:	4b44      	ldr	r3, [pc, #272]	; (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009400:	617b      	str	r3, [r7, #20]
          break;
 8009402:	e07b      	b.n	80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8009404:	4b41      	ldr	r3, [pc, #260]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800940a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800940e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009412:	d109      	bne.n	8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8009414:	4b3d      	ldr	r3, [pc, #244]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800941a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800941e:	4a3c      	ldr	r2, [pc, #240]	; (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009420:	fbb2 f3f3 	udiv	r3, r2, r3
 8009424:	613b      	str	r3, [r7, #16]
 8009426:	e019      	b.n	800945c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009428:	4b38      	ldr	r3, [pc, #224]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009430:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009434:	d109      	bne.n	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8009436:	4b35      	ldr	r3, [pc, #212]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800943c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009440:	4a34      	ldr	r2, [pc, #208]	; (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009442:	fbb2 f3f3 	udiv	r3, r2, r3
 8009446:	613b      	str	r3, [r7, #16]
 8009448:	e008      	b.n	800945c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800944a:	4b30      	ldr	r3, [pc, #192]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800944c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009454:	4a30      	ldr	r2, [pc, #192]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009456:	fbb2 f3f3 	udiv	r3, r2, r3
 800945a:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800945c:	4b2b      	ldr	r3, [pc, #172]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800945e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009462:	099b      	lsrs	r3, r3, #6
 8009464:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	fb02 f303 	mul.w	r3, r2, r3
 800946e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8009470:	4b26      	ldr	r3, [pc, #152]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009476:	0f1b      	lsrs	r3, r3, #28
 8009478:	f003 0307 	and.w	r3, r3, #7
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009482:	617b      	str	r3, [r7, #20]
          break;
 8009484:	e03a      	b.n	80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009486:	4b21      	ldr	r3, [pc, #132]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800948e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009492:	d108      	bne.n	80094a6 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009494:	4b1d      	ldr	r3, [pc, #116]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800949c:	4a1d      	ldr	r2, [pc, #116]	; (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800949e:	fbb2 f3f3 	udiv	r3, r2, r3
 80094a2:	613b      	str	r3, [r7, #16]
 80094a4:	e007      	b.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80094a6:	4b19      	ldr	r3, [pc, #100]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094ae:	4a1a      	ldr	r2, [pc, #104]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80094b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80094b4:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80094b6:	4b15      	ldr	r3, [pc, #84]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	099b      	lsrs	r3, r3, #6
 80094bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	fb02 f303 	mul.w	r3, r2, r3
 80094c6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80094c8:	4b10      	ldr	r3, [pc, #64]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	0f1b      	lsrs	r3, r3, #28
 80094ce:	f003 0307 	and.w	r3, r3, #7
 80094d2:	68ba      	ldr	r2, [r7, #8]
 80094d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80094d8:	617b      	str	r3, [r7, #20]
          break;
 80094da:	e00f      	b.n	80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80094dc:	4b0b      	ldr	r3, [pc, #44]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094e8:	d102      	bne.n	80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 80094ea:	4b0a      	ldr	r3, [pc, #40]	; (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80094ec:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80094ee:	e005      	b.n	80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 80094f0:	4b09      	ldr	r3, [pc, #36]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80094f2:	617b      	str	r3, [r7, #20]
          break;
 80094f4:	e002      	b.n	80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80094f6:	2300      	movs	r3, #0
 80094f8:	617b      	str	r3, [r7, #20]
          break;
 80094fa:	bf00      	nop
        }
      }
      break;
 80094fc:	bf00      	nop
    }
  }
  return frequency;
 80094fe:	697b      	ldr	r3, [r7, #20]
}
 8009500:	4618      	mov	r0, r3
 8009502:	371c      	adds	r7, #28
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr
 800950c:	40023800 	.word	0x40023800
 8009510:	00bb8000 	.word	0x00bb8000
 8009514:	017d7840 	.word	0x017d7840
 8009518:	00f42400 	.word	0x00f42400

0800951c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009524:	2300      	movs	r3, #0
 8009526:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f003 0301 	and.w	r3, r3, #1
 8009530:	2b00      	cmp	r3, #0
 8009532:	d075      	beq.n	8009620 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009534:	4ba2      	ldr	r3, [pc, #648]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	f003 030c 	and.w	r3, r3, #12
 800953c:	2b04      	cmp	r3, #4
 800953e:	d00c      	beq.n	800955a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009540:	4b9f      	ldr	r3, [pc, #636]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009548:	2b08      	cmp	r3, #8
 800954a:	d112      	bne.n	8009572 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800954c:	4b9c      	ldr	r3, [pc, #624]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009554:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009558:	d10b      	bne.n	8009572 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800955a:	4b99      	ldr	r3, [pc, #612]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009562:	2b00      	cmp	r3, #0
 8009564:	d05b      	beq.n	800961e <HAL_RCC_OscConfig+0x102>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d157      	bne.n	800961e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	e20b      	b.n	800998a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800957a:	d106      	bne.n	800958a <HAL_RCC_OscConfig+0x6e>
 800957c:	4b90      	ldr	r3, [pc, #576]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a8f      	ldr	r2, [pc, #572]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 8009582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009586:	6013      	str	r3, [r2, #0]
 8009588:	e01d      	b.n	80095c6 <HAL_RCC_OscConfig+0xaa>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009592:	d10c      	bne.n	80095ae <HAL_RCC_OscConfig+0x92>
 8009594:	4b8a      	ldr	r3, [pc, #552]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a89      	ldr	r2, [pc, #548]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 800959a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800959e:	6013      	str	r3, [r2, #0]
 80095a0:	4b87      	ldr	r3, [pc, #540]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a86      	ldr	r2, [pc, #536]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 80095a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095aa:	6013      	str	r3, [r2, #0]
 80095ac:	e00b      	b.n	80095c6 <HAL_RCC_OscConfig+0xaa>
 80095ae:	4b84      	ldr	r3, [pc, #528]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a83      	ldr	r2, [pc, #524]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 80095b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095b8:	6013      	str	r3, [r2, #0]
 80095ba:	4b81      	ldr	r3, [pc, #516]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a80      	ldr	r2, [pc, #512]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 80095c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80095c4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d013      	beq.n	80095f6 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095ce:	f7fb fc01 	bl	8004dd4 <HAL_GetTick>
 80095d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80095d4:	e008      	b.n	80095e8 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80095d6:	f7fb fbfd 	bl	8004dd4 <HAL_GetTick>
 80095da:	4602      	mov	r2, r0
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	1ad3      	subs	r3, r2, r3
 80095e0:	2b64      	cmp	r3, #100	; 0x64
 80095e2:	d901      	bls.n	80095e8 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80095e4:	2303      	movs	r3, #3
 80095e6:	e1d0      	b.n	800998a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80095e8:	4b75      	ldr	r3, [pc, #468]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d0f0      	beq.n	80095d6 <HAL_RCC_OscConfig+0xba>
 80095f4:	e014      	b.n	8009620 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095f6:	f7fb fbed 	bl	8004dd4 <HAL_GetTick>
 80095fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80095fc:	e008      	b.n	8009610 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80095fe:	f7fb fbe9 	bl	8004dd4 <HAL_GetTick>
 8009602:	4602      	mov	r2, r0
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	1ad3      	subs	r3, r2, r3
 8009608:	2b64      	cmp	r3, #100	; 0x64
 800960a:	d901      	bls.n	8009610 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800960c:	2303      	movs	r3, #3
 800960e:	e1bc      	b.n	800998a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009610:	4b6b      	ldr	r3, [pc, #428]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1f0      	bne.n	80095fe <HAL_RCC_OscConfig+0xe2>
 800961c:	e000      	b.n	8009620 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800961e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 0302 	and.w	r3, r3, #2
 8009628:	2b00      	cmp	r3, #0
 800962a:	d063      	beq.n	80096f4 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800962c:	4b64      	ldr	r3, [pc, #400]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	f003 030c 	and.w	r3, r3, #12
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00b      	beq.n	8009650 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009638:	4b61      	ldr	r3, [pc, #388]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009640:	2b08      	cmp	r3, #8
 8009642:	d11c      	bne.n	800967e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009644:	4b5e      	ldr	r3, [pc, #376]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800964c:	2b00      	cmp	r3, #0
 800964e:	d116      	bne.n	800967e <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009650:	4b5b      	ldr	r3, [pc, #364]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f003 0302 	and.w	r3, r3, #2
 8009658:	2b00      	cmp	r3, #0
 800965a:	d005      	beq.n	8009668 <HAL_RCC_OscConfig+0x14c>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	2b01      	cmp	r3, #1
 8009662:	d001      	beq.n	8009668 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	e190      	b.n	800998a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009668:	4b55      	ldr	r3, [pc, #340]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	00db      	lsls	r3, r3, #3
 8009676:	4952      	ldr	r1, [pc, #328]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 8009678:	4313      	orrs	r3, r2
 800967a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800967c:	e03a      	b.n	80096f4 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d020      	beq.n	80096c8 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009686:	4b4f      	ldr	r3, [pc, #316]	; (80097c4 <HAL_RCC_OscConfig+0x2a8>)
 8009688:	2201      	movs	r2, #1
 800968a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800968c:	f7fb fba2 	bl	8004dd4 <HAL_GetTick>
 8009690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009692:	e008      	b.n	80096a6 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009694:	f7fb fb9e 	bl	8004dd4 <HAL_GetTick>
 8009698:	4602      	mov	r2, r0
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	1ad3      	subs	r3, r2, r3
 800969e:	2b02      	cmp	r3, #2
 80096a0:	d901      	bls.n	80096a6 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80096a2:	2303      	movs	r3, #3
 80096a4:	e171      	b.n	800998a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80096a6:	4b46      	ldr	r3, [pc, #280]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 0302 	and.w	r3, r3, #2
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d0f0      	beq.n	8009694 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096b2:	4b43      	ldr	r3, [pc, #268]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	691b      	ldr	r3, [r3, #16]
 80096be:	00db      	lsls	r3, r3, #3
 80096c0:	493f      	ldr	r1, [pc, #252]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 80096c2:	4313      	orrs	r3, r2
 80096c4:	600b      	str	r3, [r1, #0]
 80096c6:	e015      	b.n	80096f4 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80096c8:	4b3e      	ldr	r3, [pc, #248]	; (80097c4 <HAL_RCC_OscConfig+0x2a8>)
 80096ca:	2200      	movs	r2, #0
 80096cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096ce:	f7fb fb81 	bl	8004dd4 <HAL_GetTick>
 80096d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80096d4:	e008      	b.n	80096e8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80096d6:	f7fb fb7d 	bl	8004dd4 <HAL_GetTick>
 80096da:	4602      	mov	r2, r0
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	1ad3      	subs	r3, r2, r3
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	d901      	bls.n	80096e8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80096e4:	2303      	movs	r3, #3
 80096e6:	e150      	b.n	800998a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80096e8:	4b35      	ldr	r3, [pc, #212]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f003 0302 	and.w	r3, r3, #2
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d1f0      	bne.n	80096d6 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 0308 	and.w	r3, r3, #8
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d030      	beq.n	8009762 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	695b      	ldr	r3, [r3, #20]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d016      	beq.n	8009736 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009708:	4b2f      	ldr	r3, [pc, #188]	; (80097c8 <HAL_RCC_OscConfig+0x2ac>)
 800970a:	2201      	movs	r2, #1
 800970c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800970e:	f7fb fb61 	bl	8004dd4 <HAL_GetTick>
 8009712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009714:	e008      	b.n	8009728 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009716:	f7fb fb5d 	bl	8004dd4 <HAL_GetTick>
 800971a:	4602      	mov	r2, r0
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	1ad3      	subs	r3, r2, r3
 8009720:	2b02      	cmp	r3, #2
 8009722:	d901      	bls.n	8009728 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8009724:	2303      	movs	r3, #3
 8009726:	e130      	b.n	800998a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009728:	4b25      	ldr	r3, [pc, #148]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 800972a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800972c:	f003 0302 	and.w	r3, r3, #2
 8009730:	2b00      	cmp	r3, #0
 8009732:	d0f0      	beq.n	8009716 <HAL_RCC_OscConfig+0x1fa>
 8009734:	e015      	b.n	8009762 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009736:	4b24      	ldr	r3, [pc, #144]	; (80097c8 <HAL_RCC_OscConfig+0x2ac>)
 8009738:	2200      	movs	r2, #0
 800973a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800973c:	f7fb fb4a 	bl	8004dd4 <HAL_GetTick>
 8009740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009742:	e008      	b.n	8009756 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009744:	f7fb fb46 	bl	8004dd4 <HAL_GetTick>
 8009748:	4602      	mov	r2, r0
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	1ad3      	subs	r3, r2, r3
 800974e:	2b02      	cmp	r3, #2
 8009750:	d901      	bls.n	8009756 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8009752:	2303      	movs	r3, #3
 8009754:	e119      	b.n	800998a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009756:	4b1a      	ldr	r3, [pc, #104]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 8009758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800975a:	f003 0302 	and.w	r3, r3, #2
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1f0      	bne.n	8009744 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f003 0304 	and.w	r3, r3, #4
 800976a:	2b00      	cmp	r3, #0
 800976c:	f000 809f 	beq.w	80098ae <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009770:	2300      	movs	r3, #0
 8009772:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009774:	4b12      	ldr	r3, [pc, #72]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 8009776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10f      	bne.n	80097a0 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009780:	2300      	movs	r3, #0
 8009782:	60fb      	str	r3, [r7, #12]
 8009784:	4b0e      	ldr	r3, [pc, #56]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 8009786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009788:	4a0d      	ldr	r2, [pc, #52]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 800978a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800978e:	6413      	str	r3, [r2, #64]	; 0x40
 8009790:	4b0b      	ldr	r3, [pc, #44]	; (80097c0 <HAL_RCC_OscConfig+0x2a4>)
 8009792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009798:	60fb      	str	r3, [r7, #12]
 800979a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800979c:	2301      	movs	r3, #1
 800979e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097a0:	4b0a      	ldr	r3, [pc, #40]	; (80097cc <HAL_RCC_OscConfig+0x2b0>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d120      	bne.n	80097ee <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80097ac:	4b07      	ldr	r3, [pc, #28]	; (80097cc <HAL_RCC_OscConfig+0x2b0>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a06      	ldr	r2, [pc, #24]	; (80097cc <HAL_RCC_OscConfig+0x2b0>)
 80097b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80097b8:	f7fb fb0c 	bl	8004dd4 <HAL_GetTick>
 80097bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097be:	e010      	b.n	80097e2 <HAL_RCC_OscConfig+0x2c6>
 80097c0:	40023800 	.word	0x40023800
 80097c4:	42470000 	.word	0x42470000
 80097c8:	42470e80 	.word	0x42470e80
 80097cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097d0:	f7fb fb00 	bl	8004dd4 <HAL_GetTick>
 80097d4:	4602      	mov	r2, r0
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	1ad3      	subs	r3, r2, r3
 80097da:	2b02      	cmp	r3, #2
 80097dc:	d901      	bls.n	80097e2 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80097de:	2303      	movs	r3, #3
 80097e0:	e0d3      	b.n	800998a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097e2:	4b6c      	ldr	r3, [pc, #432]	; (8009994 <HAL_RCC_OscConfig+0x478>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d0f0      	beq.n	80097d0 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d106      	bne.n	8009804 <HAL_RCC_OscConfig+0x2e8>
 80097f6:	4b68      	ldr	r3, [pc, #416]	; (8009998 <HAL_RCC_OscConfig+0x47c>)
 80097f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097fa:	4a67      	ldr	r2, [pc, #412]	; (8009998 <HAL_RCC_OscConfig+0x47c>)
 80097fc:	f043 0301 	orr.w	r3, r3, #1
 8009800:	6713      	str	r3, [r2, #112]	; 0x70
 8009802:	e01c      	b.n	800983e <HAL_RCC_OscConfig+0x322>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	2b05      	cmp	r3, #5
 800980a:	d10c      	bne.n	8009826 <HAL_RCC_OscConfig+0x30a>
 800980c:	4b62      	ldr	r3, [pc, #392]	; (8009998 <HAL_RCC_OscConfig+0x47c>)
 800980e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009810:	4a61      	ldr	r2, [pc, #388]	; (8009998 <HAL_RCC_OscConfig+0x47c>)
 8009812:	f043 0304 	orr.w	r3, r3, #4
 8009816:	6713      	str	r3, [r2, #112]	; 0x70
 8009818:	4b5f      	ldr	r3, [pc, #380]	; (8009998 <HAL_RCC_OscConfig+0x47c>)
 800981a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800981c:	4a5e      	ldr	r2, [pc, #376]	; (8009998 <HAL_RCC_OscConfig+0x47c>)
 800981e:	f043 0301 	orr.w	r3, r3, #1
 8009822:	6713      	str	r3, [r2, #112]	; 0x70
 8009824:	e00b      	b.n	800983e <HAL_RCC_OscConfig+0x322>
 8009826:	4b5c      	ldr	r3, [pc, #368]	; (8009998 <HAL_RCC_OscConfig+0x47c>)
 8009828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800982a:	4a5b      	ldr	r2, [pc, #364]	; (8009998 <HAL_RCC_OscConfig+0x47c>)
 800982c:	f023 0301 	bic.w	r3, r3, #1
 8009830:	6713      	str	r3, [r2, #112]	; 0x70
 8009832:	4b59      	ldr	r3, [pc, #356]	; (8009998 <HAL_RCC_OscConfig+0x47c>)
 8009834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009836:	4a58      	ldr	r2, [pc, #352]	; (8009998 <HAL_RCC_OscConfig+0x47c>)
 8009838:	f023 0304 	bic.w	r3, r3, #4
 800983c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d015      	beq.n	8009872 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009846:	f7fb fac5 	bl	8004dd4 <HAL_GetTick>
 800984a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800984c:	e00a      	b.n	8009864 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800984e:	f7fb fac1 	bl	8004dd4 <HAL_GetTick>
 8009852:	4602      	mov	r2, r0
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	1ad3      	subs	r3, r2, r3
 8009858:	f241 3288 	movw	r2, #5000	; 0x1388
 800985c:	4293      	cmp	r3, r2
 800985e:	d901      	bls.n	8009864 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8009860:	2303      	movs	r3, #3
 8009862:	e092      	b.n	800998a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009864:	4b4c      	ldr	r3, [pc, #304]	; (8009998 <HAL_RCC_OscConfig+0x47c>)
 8009866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009868:	f003 0302 	and.w	r3, r3, #2
 800986c:	2b00      	cmp	r3, #0
 800986e:	d0ee      	beq.n	800984e <HAL_RCC_OscConfig+0x332>
 8009870:	e014      	b.n	800989c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009872:	f7fb faaf 	bl	8004dd4 <HAL_GetTick>
 8009876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009878:	e00a      	b.n	8009890 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800987a:	f7fb faab 	bl	8004dd4 <HAL_GetTick>
 800987e:	4602      	mov	r2, r0
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	1ad3      	subs	r3, r2, r3
 8009884:	f241 3288 	movw	r2, #5000	; 0x1388
 8009888:	4293      	cmp	r3, r2
 800988a:	d901      	bls.n	8009890 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800988c:	2303      	movs	r3, #3
 800988e:	e07c      	b.n	800998a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009890:	4b41      	ldr	r3, [pc, #260]	; (8009998 <HAL_RCC_OscConfig+0x47c>)
 8009892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009894:	f003 0302 	and.w	r3, r3, #2
 8009898:	2b00      	cmp	r3, #0
 800989a:	d1ee      	bne.n	800987a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800989c:	7dfb      	ldrb	r3, [r7, #23]
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d105      	bne.n	80098ae <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80098a2:	4b3d      	ldr	r3, [pc, #244]	; (8009998 <HAL_RCC_OscConfig+0x47c>)
 80098a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a6:	4a3c      	ldr	r2, [pc, #240]	; (8009998 <HAL_RCC_OscConfig+0x47c>)
 80098a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	699b      	ldr	r3, [r3, #24]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d068      	beq.n	8009988 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80098b6:	4b38      	ldr	r3, [pc, #224]	; (8009998 <HAL_RCC_OscConfig+0x47c>)
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	f003 030c 	and.w	r3, r3, #12
 80098be:	2b08      	cmp	r3, #8
 80098c0:	d060      	beq.n	8009984 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	699b      	ldr	r3, [r3, #24]
 80098c6:	2b02      	cmp	r3, #2
 80098c8:	d145      	bne.n	8009956 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098ca:	4b34      	ldr	r3, [pc, #208]	; (800999c <HAL_RCC_OscConfig+0x480>)
 80098cc:	2200      	movs	r2, #0
 80098ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098d0:	f7fb fa80 	bl	8004dd4 <HAL_GetTick>
 80098d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098d6:	e008      	b.n	80098ea <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098d8:	f7fb fa7c 	bl	8004dd4 <HAL_GetTick>
 80098dc:	4602      	mov	r2, r0
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	1ad3      	subs	r3, r2, r3
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	d901      	bls.n	80098ea <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80098e6:	2303      	movs	r3, #3
 80098e8:	e04f      	b.n	800998a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098ea:	4b2b      	ldr	r3, [pc, #172]	; (8009998 <HAL_RCC_OscConfig+0x47c>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d1f0      	bne.n	80098d8 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	69da      	ldr	r2, [r3, #28]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a1b      	ldr	r3, [r3, #32]
 80098fe:	431a      	orrs	r2, r3
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009904:	019b      	lsls	r3, r3, #6
 8009906:	431a      	orrs	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800990c:	085b      	lsrs	r3, r3, #1
 800990e:	3b01      	subs	r3, #1
 8009910:	041b      	lsls	r3, r3, #16
 8009912:	431a      	orrs	r2, r3
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009918:	061b      	lsls	r3, r3, #24
 800991a:	431a      	orrs	r2, r3
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009920:	071b      	lsls	r3, r3, #28
 8009922:	491d      	ldr	r1, [pc, #116]	; (8009998 <HAL_RCC_OscConfig+0x47c>)
 8009924:	4313      	orrs	r3, r2
 8009926:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009928:	4b1c      	ldr	r3, [pc, #112]	; (800999c <HAL_RCC_OscConfig+0x480>)
 800992a:	2201      	movs	r2, #1
 800992c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800992e:	f7fb fa51 	bl	8004dd4 <HAL_GetTick>
 8009932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009934:	e008      	b.n	8009948 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009936:	f7fb fa4d 	bl	8004dd4 <HAL_GetTick>
 800993a:	4602      	mov	r2, r0
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	1ad3      	subs	r3, r2, r3
 8009940:	2b02      	cmp	r3, #2
 8009942:	d901      	bls.n	8009948 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009944:	2303      	movs	r3, #3
 8009946:	e020      	b.n	800998a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009948:	4b13      	ldr	r3, [pc, #76]	; (8009998 <HAL_RCC_OscConfig+0x47c>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009950:	2b00      	cmp	r3, #0
 8009952:	d0f0      	beq.n	8009936 <HAL_RCC_OscConfig+0x41a>
 8009954:	e018      	b.n	8009988 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009956:	4b11      	ldr	r3, [pc, #68]	; (800999c <HAL_RCC_OscConfig+0x480>)
 8009958:	2200      	movs	r2, #0
 800995a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800995c:	f7fb fa3a 	bl	8004dd4 <HAL_GetTick>
 8009960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009962:	e008      	b.n	8009976 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009964:	f7fb fa36 	bl	8004dd4 <HAL_GetTick>
 8009968:	4602      	mov	r2, r0
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	1ad3      	subs	r3, r2, r3
 800996e:	2b02      	cmp	r3, #2
 8009970:	d901      	bls.n	8009976 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8009972:	2303      	movs	r3, #3
 8009974:	e009      	b.n	800998a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009976:	4b08      	ldr	r3, [pc, #32]	; (8009998 <HAL_RCC_OscConfig+0x47c>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800997e:	2b00      	cmp	r3, #0
 8009980:	d1f0      	bne.n	8009964 <HAL_RCC_OscConfig+0x448>
 8009982:	e001      	b.n	8009988 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	e000      	b.n	800998a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8009988:	2300      	movs	r3, #0
}
 800998a:	4618      	mov	r0, r3
 800998c:	3718      	adds	r7, #24
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	40007000 	.word	0x40007000
 8009998:	40023800 	.word	0x40023800
 800999c:	42470060 	.word	0x42470060

080099a0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d101      	bne.n	80099b2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	e022      	b.n	80099f8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d105      	bne.n	80099ca <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f7f9 fc3f 	bl	8003248 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2203      	movs	r2, #3
 80099ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 f814 	bl	8009a00 <HAL_SD_InitCard>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d001      	beq.n	80099e2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	e00a      	b.n	80099f8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2200      	movs	r2, #0
 80099e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2201      	movs	r2, #1
 80099f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3708      	adds	r7, #8
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009a00:	b5b0      	push	{r4, r5, r7, lr}
 8009a02:	b08e      	sub	sp, #56	; 0x38
 8009a04:	af04      	add	r7, sp, #16
 8009a06:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009a10:	2300      	movs	r3, #0
 8009a12:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009a14:	2300      	movs	r3, #0
 8009a16:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009a1c:	2376      	movs	r3, #118	; 0x76
 8009a1e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681d      	ldr	r5, [r3, #0]
 8009a24:	466c      	mov	r4, sp
 8009a26:	f107 0314 	add.w	r3, r7, #20
 8009a2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009a2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009a32:	f107 0308 	add.w	r3, r7, #8
 8009a36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a38:	4628      	mov	r0, r5
 8009a3a:	f002 f895 	bl	800bb68 <SDIO_Init>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009a44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d001      	beq.n	8009a50 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e031      	b.n	8009ab4 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009a50:	4b1a      	ldr	r3, [pc, #104]	; (8009abc <HAL_SD_InitCard+0xbc>)
 8009a52:	2200      	movs	r2, #0
 8009a54:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f002 f8cd 	bl	800bbfa <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009a60:	4b16      	ldr	r3, [pc, #88]	; (8009abc <HAL_SD_InitCard+0xbc>)
 8009a62:	2201      	movs	r2, #1
 8009a64:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 fefc 	bl	800a864 <SD_PowerON>
 8009a6c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a6e:	6a3b      	ldr	r3, [r7, #32]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00b      	beq.n	8009a8c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a80:	6a3b      	ldr	r3, [r7, #32]
 8009a82:	431a      	orrs	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e013      	b.n	8009ab4 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fe1b 	bl	800a6c8 <SD_InitCard>
 8009a92:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a94:	6a3b      	ldr	r3, [r7, #32]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00b      	beq.n	8009ab2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009aa6:	6a3b      	ldr	r3, [r7, #32]
 8009aa8:	431a      	orrs	r2, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e000      	b.n	8009ab4 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8009ab2:	2300      	movs	r3, #0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3728      	adds	r7, #40	; 0x28
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bdb0      	pop	{r4, r5, r7, pc}
 8009abc:	422580a0 	.word	0x422580a0

08009ac0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b092      	sub	sp, #72	; 0x48
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	607a      	str	r2, [r7, #4]
 8009acc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009ace:	f7fb f981 	bl	8004dd4 <HAL_GetTick>
 8009ad2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d107      	bne.n	8009af2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ae6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009aee:	2301      	movs	r3, #1
 8009af0:	e1d7      	b.n	8009ea2 <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	f040 81ca 	bne.w	8009e94 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2200      	movs	r2, #0
 8009b04:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009b06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	441a      	add	r2, r3
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d907      	bls.n	8009b24 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b18:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009b20:	2301      	movs	r3, #1
 8009b22:	e1be      	b.n	8009ea2 <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2203      	movs	r2, #3
 8009b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2200      	movs	r2, #0
 8009b32:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d002      	beq.n	8009b42 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8009b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b3e:	025b      	lsls	r3, r3, #9
 8009b40:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f002 f8e8 	bl	800bd20 <SDMMC_CmdBlockLength>
 8009b50:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00f      	beq.n	8009b78 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a9a      	ldr	r2, [pc, #616]	; (8009dc8 <HAL_SD_ReadBlocks+0x308>)
 8009b5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b66:	431a      	orrs	r2, r3
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	e194      	b.n	8009ea2 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009b78:	f04f 33ff 	mov.w	r3, #4294967295
 8009b7c:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	025b      	lsls	r3, r3, #9
 8009b82:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009b84:	2390      	movs	r3, #144	; 0x90
 8009b86:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009b88:	2302      	movs	r3, #2
 8009b8a:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8009b90:	2301      	movs	r3, #1
 8009b92:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f107 0214 	add.w	r2, r7, #20
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f002 f892 	bl	800bcc8 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d90a      	bls.n	8009bc0 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2202      	movs	r2, #2
 8009bae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f002 f8f6 	bl	800bda8 <SDMMC_CmdReadMultiBlock>
 8009bbc:	6478      	str	r0, [r7, #68]	; 0x44
 8009bbe:	e009      	b.n	8009bd4 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f002 f8c9 	bl	800bd64 <SDMMC_CmdReadSingleBlock>
 8009bd2:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d012      	beq.n	8009c00 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a7a      	ldr	r2, [pc, #488]	; (8009dc8 <HAL_SD_ReadBlocks+0x308>)
 8009be0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009be8:	431a      	orrs	r2, r3
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e150      	b.n	8009ea2 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8009c04:	e061      	b.n	8009cca <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d03c      	beq.n	8009c8e <HAL_SD_ReadBlocks+0x1ce>
 8009c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d039      	beq.n	8009c8e <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	643b      	str	r3, [r7, #64]	; 0x40
 8009c1e:	e033      	b.n	8009c88 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4618      	mov	r0, r3
 8009c26:	f001 ffca 	bl	800bbbe <SDIO_ReadFIFO>
 8009c2a:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c2e:	b2da      	uxtb	r2, r3
 8009c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c32:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c36:	3301      	adds	r3, #1
 8009c38:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c3c:	3b01      	subs	r3, #1
 8009c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c42:	0a1b      	lsrs	r3, r3, #8
 8009c44:	b2da      	uxtb	r2, r3
 8009c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c48:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c52:	3b01      	subs	r3, #1
 8009c54:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c58:	0c1b      	lsrs	r3, r3, #16
 8009c5a:	b2da      	uxtb	r2, r3
 8009c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c5e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c62:	3301      	adds	r3, #1
 8009c64:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c68:	3b01      	subs	r3, #1
 8009c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c6e:	0e1b      	lsrs	r3, r3, #24
 8009c70:	b2da      	uxtb	r2, r3
 8009c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c74:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c78:	3301      	adds	r3, #1
 8009c7a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c7e:	3b01      	subs	r3, #1
 8009c80:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8009c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c84:	3301      	adds	r3, #1
 8009c86:	643b      	str	r3, [r7, #64]	; 0x40
 8009c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c8a:	2b07      	cmp	r3, #7
 8009c8c:	d9c8      	bls.n	8009c20 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009c8e:	f7fb f8a1 	bl	8004dd4 <HAL_GetTick>
 8009c92:	4602      	mov	r2, r0
 8009c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c96:	1ad3      	subs	r3, r2, r3
 8009c98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d902      	bls.n	8009ca4 <HAL_SD_ReadBlocks+0x1e4>
 8009c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d112      	bne.n	8009cca <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a47      	ldr	r2, [pc, #284]	; (8009dc8 <HAL_SD_ReadBlocks+0x308>)
 8009caa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009cc6:	2303      	movs	r3, #3
 8009cc8:	e0eb      	b.n	8009ea2 <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cd0:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d096      	beq.n	8009c06 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d022      	beq.n	8009d2c <HAL_SD_ReadBlocks+0x26c>
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d91f      	bls.n	8009d2c <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cf0:	2b03      	cmp	r3, #3
 8009cf2:	d01b      	beq.n	8009d2c <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f002 f8bb 	bl	800be74 <SDMMC_CmdStopTransfer>
 8009cfe:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d012      	beq.n	8009d2c <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a2f      	ldr	r2, [pc, #188]	; (8009dc8 <HAL_SD_ReadBlocks+0x308>)
 8009d0c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d14:	431a      	orrs	r2, r3
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2200      	movs	r2, #0
 8009d26:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e0ba      	b.n	8009ea2 <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d32:	f003 0308 	and.w	r3, r3, #8
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d012      	beq.n	8009d60 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a22      	ldr	r2, [pc, #136]	; (8009dc8 <HAL_SD_ReadBlocks+0x308>)
 8009d40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d46:	f043 0208 	orr.w	r2, r3, #8
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2201      	movs	r2, #1
 8009d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e0a0      	b.n	8009ea2 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d66:	f003 0302 	and.w	r3, r3, #2
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d012      	beq.n	8009d94 <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a15      	ldr	r2, [pc, #84]	; (8009dc8 <HAL_SD_ReadBlocks+0x308>)
 8009d74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d7a:	f043 0202 	orr.w	r2, r3, #2
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2201      	movs	r2, #1
 8009d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009d90:	2301      	movs	r3, #1
 8009d92:	e086      	b.n	8009ea2 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d9a:	f003 0320 	and.w	r3, r3, #32
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d063      	beq.n	8009e6a <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a08      	ldr	r2, [pc, #32]	; (8009dc8 <HAL_SD_ReadBlocks+0x308>)
 8009da8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dae:	f043 0220 	orr.w	r2, r3, #32
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2201      	movs	r2, #1
 8009dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	e06c      	b.n	8009ea2 <HAL_SD_ReadBlocks+0x3e2>
 8009dc8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f001 fef4 	bl	800bbbe <SDIO_ReadFIFO>
 8009dd6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8009dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dda:	b2da      	uxtb	r2, r3
 8009ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dde:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009de2:	3301      	adds	r3, #1
 8009de4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009de8:	3b01      	subs	r3, #1
 8009dea:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dee:	0a1b      	lsrs	r3, r3, #8
 8009df0:	b2da      	uxtb	r2, r3
 8009df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009df4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009df8:	3301      	adds	r3, #1
 8009dfa:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dfe:	3b01      	subs	r3, #1
 8009e00:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e04:	0c1b      	lsrs	r3, r3, #16
 8009e06:	b2da      	uxtb	r2, r3
 8009e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e0a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e0e:	3301      	adds	r3, #1
 8009e10:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e14:	3b01      	subs	r3, #1
 8009e16:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1a:	0e1b      	lsrs	r3, r3, #24
 8009e1c:	b2da      	uxtb	r2, r3
 8009e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e20:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e24:	3301      	adds	r3, #1
 8009e26:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009e2e:	f7fa ffd1 	bl	8004dd4 <HAL_GetTick>
 8009e32:	4602      	mov	r2, r0
 8009e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e36:	1ad3      	subs	r3, r2, r3
 8009e38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d902      	bls.n	8009e44 <HAL_SD_ReadBlocks+0x384>
 8009e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d112      	bne.n	8009e6a <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a18      	ldr	r2, [pc, #96]	; (8009eac <HAL_SD_ReadBlocks+0x3ec>)
 8009e4a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2200      	movs	r2, #0
 8009e64:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	e01b      	b.n	8009ea2 <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d002      	beq.n	8009e7e <HAL_SD_ReadBlocks+0x3be>
 8009e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d1a6      	bne.n	8009dcc <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f240 523a 	movw	r2, #1338	; 0x53a
 8009e86:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009e90:	2300      	movs	r3, #0
 8009e92:	e006      	b.n	8009ea2 <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e98:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
  }
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3748      	adds	r7, #72	; 0x48
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	004005ff 	.word	0x004005ff

08009eb0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b092      	sub	sp, #72	; 0x48
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
 8009ebc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009ebe:	f7fa ff89 	bl	8004dd4 <HAL_GetTick>
 8009ec2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d107      	bne.n	8009ee2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e182      	b.n	800a1e8 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	f040 8175 	bne.w	800a1da <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009ef6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	441a      	add	r2, r3
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d907      	bls.n	8009f14 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f08:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009f10:	2301      	movs	r3, #1
 8009f12:	e169      	b.n	800a1e8 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2203      	movs	r2, #3
 8009f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	2200      	movs	r2, #0
 8009f22:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d002      	beq.n	8009f32 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2e:	025b      	lsls	r3, r3, #9
 8009f30:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f001 fef0 	bl	800bd20 <SDMMC_CmdBlockLength>
 8009f40:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d00f      	beq.n	8009f68 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a9c      	ldr	r2, [pc, #624]	; (800a1c0 <HAL_SD_WriteBlocks+0x310>)
 8009f4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f56:	431a      	orrs	r2, r3
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009f64:	2301      	movs	r3, #1
 8009f66:	e13f      	b.n	800a1e8 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009f68:	f04f 33ff 	mov.w	r3, #4294967295
 8009f6c:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	025b      	lsls	r3, r3, #9
 8009f72:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009f74:	2390      	movs	r3, #144	; 0x90
 8009f76:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8009f80:	2301      	movs	r3, #1
 8009f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f107 0218 	add.w	r2, r7, #24
 8009f8c:	4611      	mov	r1, r2
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f001 fe9a 	bl	800bcc8 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d90a      	bls.n	8009fb0 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2220      	movs	r2, #32
 8009f9e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f001 ff42 	bl	800be30 <SDMMC_CmdWriteMultiBlock>
 8009fac:	6478      	str	r0, [r7, #68]	; 0x44
 8009fae:	e009      	b.n	8009fc4 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2210      	movs	r2, #16
 8009fb4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f001 ff15 	bl	800bdec <SDMMC_CmdWriteSingleBlock>
 8009fc2:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d012      	beq.n	8009ff0 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a7c      	ldr	r2, [pc, #496]	; (800a1c0 <HAL_SD_WriteBlocks+0x310>)
 8009fd0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fd8:	431a      	orrs	r2, r3
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	e0fb      	b.n	800a1e8 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8009ff4:	e065      	b.n	800a0c2 <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a000:	2b00      	cmp	r3, #0
 800a002:	d040      	beq.n	800a086 <HAL_SD_WriteBlocks+0x1d6>
 800a004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a006:	2b00      	cmp	r3, #0
 800a008:	d03d      	beq.n	800a086 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800a00a:	2300      	movs	r3, #0
 800a00c:	643b      	str	r3, [r7, #64]	; 0x40
 800a00e:	e037      	b.n	800a080 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 800a010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a018:	3301      	adds	r3, #1
 800a01a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800a01c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a01e:	3b01      	subs	r3, #1
 800a020:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800a022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	021a      	lsls	r2, r3, #8
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	4313      	orrs	r3, r2
 800a02c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a02e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a030:	3301      	adds	r3, #1
 800a032:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800a034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a036:	3b01      	subs	r3, #1
 800a038:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800a03a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	041a      	lsls	r2, r3, #16
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	4313      	orrs	r3, r2
 800a044:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a048:	3301      	adds	r3, #1
 800a04a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800a04c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a04e:	3b01      	subs	r3, #1
 800a050:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	061a      	lsls	r2, r3, #24
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	4313      	orrs	r3, r2
 800a05c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a05e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a060:	3301      	adds	r3, #1
 800a062:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800a064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a066:	3b01      	subs	r3, #1
 800a068:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f107 0214 	add.w	r2, r7, #20
 800a072:	4611      	mov	r1, r2
 800a074:	4618      	mov	r0, r3
 800a076:	f001 fdaf 	bl	800bbd8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800a07a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a07c:	3301      	adds	r3, #1
 800a07e:	643b      	str	r3, [r7, #64]	; 0x40
 800a080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a082:	2b07      	cmp	r3, #7
 800a084:	d9c4      	bls.n	800a010 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a086:	f7fa fea5 	bl	8004dd4 <HAL_GetTick>
 800a08a:	4602      	mov	r2, r0
 800a08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08e:	1ad3      	subs	r3, r2, r3
 800a090:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a092:	429a      	cmp	r2, r3
 800a094:	d902      	bls.n	800a09c <HAL_SD_WriteBlocks+0x1ec>
 800a096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d112      	bne.n	800a0c2 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a47      	ldr	r2, [pc, #284]	; (800a1c0 <HAL_SD_WriteBlocks+0x310>)
 800a0a2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0aa:	431a      	orrs	r2, r3
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800a0be:	2303      	movs	r3, #3
 800a0c0:	e092      	b.n	800a1e8 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0c8:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d092      	beq.n	8009ff6 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d022      	beq.n	800a124 <HAL_SD_WriteBlocks+0x274>
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d91f      	bls.n	800a124 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0e8:	2b03      	cmp	r3, #3
 800a0ea:	d01b      	beq.n	800a124 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f001 febf 	bl	800be74 <SDMMC_CmdStopTransfer>
 800a0f6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a0f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d012      	beq.n	800a124 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a2f      	ldr	r2, [pc, #188]	; (800a1c0 <HAL_SD_WriteBlocks+0x310>)
 800a104:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a10a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a10c:	431a      	orrs	r2, r3
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2201      	movs	r2, #1
 800a116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2200      	movs	r2, #0
 800a11e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	e061      	b.n	800a1e8 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a12a:	f003 0308 	and.w	r3, r3, #8
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d012      	beq.n	800a158 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a22      	ldr	r2, [pc, #136]	; (800a1c0 <HAL_SD_WriteBlocks+0x310>)
 800a138:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a13e:	f043 0208 	orr.w	r2, r3, #8
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2201      	movs	r2, #1
 800a14a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2200      	movs	r2, #0
 800a152:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a154:	2301      	movs	r3, #1
 800a156:	e047      	b.n	800a1e8 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a15e:	f003 0302 	and.w	r3, r3, #2
 800a162:	2b00      	cmp	r3, #0
 800a164:	d012      	beq.n	800a18c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a15      	ldr	r2, [pc, #84]	; (800a1c0 <HAL_SD_WriteBlocks+0x310>)
 800a16c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a172:	f043 0202 	orr.w	r2, r3, #2
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2201      	movs	r2, #1
 800a17e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2200      	movs	r2, #0
 800a186:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a188:	2301      	movs	r3, #1
 800a18a:	e02d      	b.n	800a1e8 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a192:	f003 0310 	and.w	r3, r3, #16
 800a196:	2b00      	cmp	r3, #0
 800a198:	d014      	beq.n	800a1c4 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a08      	ldr	r2, [pc, #32]	; (800a1c0 <HAL_SD_WriteBlocks+0x310>)
 800a1a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a6:	f043 0210 	orr.w	r2, r3, #16
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	e013      	b.n	800a1e8 <HAL_SD_WriteBlocks+0x338>
 800a1c0:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f240 523a 	movw	r2, #1338	; 0x53a
 800a1cc:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	e006      	b.n	800a1e8 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
  }
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3748      	adds	r7, #72	; 0x48
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1fe:	0f9b      	lsrs	r3, r3, #30
 800a200:	b2da      	uxtb	r2, r3
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a20a:	0e9b      	lsrs	r3, r3, #26
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	f003 030f 	and.w	r3, r3, #15
 800a212:	b2da      	uxtb	r2, r3
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a21c:	0e1b      	lsrs	r3, r3, #24
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	f003 0303 	and.w	r3, r3, #3
 800a224:	b2da      	uxtb	r2, r3
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a22e:	0c1b      	lsrs	r3, r3, #16
 800a230:	b2da      	uxtb	r2, r3
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a23a:	0a1b      	lsrs	r3, r3, #8
 800a23c:	b2da      	uxtb	r2, r3
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a246:	b2da      	uxtb	r2, r3
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a250:	0d1b      	lsrs	r3, r3, #20
 800a252:	b29a      	uxth	r2, r3
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a25c:	0c1b      	lsrs	r3, r3, #16
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	f003 030f 	and.w	r3, r3, #15
 800a264:	b2da      	uxtb	r2, r3
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a26e:	0bdb      	lsrs	r3, r3, #15
 800a270:	b2db      	uxtb	r3, r3
 800a272:	f003 0301 	and.w	r3, r3, #1
 800a276:	b2da      	uxtb	r2, r3
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a280:	0b9b      	lsrs	r3, r3, #14
 800a282:	b2db      	uxtb	r3, r3
 800a284:	f003 0301 	and.w	r3, r3, #1
 800a288:	b2da      	uxtb	r2, r3
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a292:	0b5b      	lsrs	r3, r3, #13
 800a294:	b2db      	uxtb	r3, r3
 800a296:	f003 0301 	and.w	r3, r3, #1
 800a29a:	b2da      	uxtb	r2, r3
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2a4:	0b1b      	lsrs	r3, r3, #12
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	f003 0301 	and.w	r3, r3, #1
 800a2ac:	b2da      	uxtb	r2, r3
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d163      	bne.n	800a388 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2c4:	009a      	lsls	r2, r3, #2
 800a2c6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a2ca:	4013      	ands	r3, r2
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a2d0:	0f92      	lsrs	r2, r2, #30
 800a2d2:	431a      	orrs	r2, r3
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2dc:	0edb      	lsrs	r3, r3, #27
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	f003 0307 	and.w	r3, r3, #7
 800a2e4:	b2da      	uxtb	r2, r3
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2ee:	0e1b      	lsrs	r3, r3, #24
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	f003 0307 	and.w	r3, r3, #7
 800a2f6:	b2da      	uxtb	r2, r3
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a300:	0d5b      	lsrs	r3, r3, #21
 800a302:	b2db      	uxtb	r3, r3
 800a304:	f003 0307 	and.w	r3, r3, #7
 800a308:	b2da      	uxtb	r2, r3
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a312:	0c9b      	lsrs	r3, r3, #18
 800a314:	b2db      	uxtb	r3, r3
 800a316:	f003 0307 	and.w	r3, r3, #7
 800a31a:	b2da      	uxtb	r2, r3
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a324:	0bdb      	lsrs	r3, r3, #15
 800a326:	b2db      	uxtb	r3, r3
 800a328:	f003 0307 	and.w	r3, r3, #7
 800a32c:	b2da      	uxtb	r2, r3
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	691b      	ldr	r3, [r3, #16]
 800a336:	1c5a      	adds	r2, r3, #1
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	7e1b      	ldrb	r3, [r3, #24]
 800a340:	b2db      	uxtb	r3, r3
 800a342:	f003 0307 	and.w	r3, r3, #7
 800a346:	3302      	adds	r3, #2
 800a348:	2201      	movs	r2, #1
 800a34a:	fa02 f303 	lsl.w	r3, r2, r3
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a352:	fb02 f203 	mul.w	r2, r2, r3
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	7a1b      	ldrb	r3, [r3, #8]
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	f003 030f 	and.w	r3, r3, #15
 800a364:	2201      	movs	r2, #1
 800a366:	409a      	lsls	r2, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a374:	0a52      	lsrs	r2, r2, #9
 800a376:	fb02 f203 	mul.w	r2, r2, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a384:	661a      	str	r2, [r3, #96]	; 0x60
 800a386:	e031      	b.n	800a3ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d11d      	bne.n	800a3cc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a394:	041b      	lsls	r3, r3, #16
 800a396:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a39e:	0c1b      	lsrs	r3, r3, #16
 800a3a0:	431a      	orrs	r2, r3
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	691b      	ldr	r3, [r3, #16]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	029a      	lsls	r2, r3, #10
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3c0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	661a      	str	r2, [r3, #96]	; 0x60
 800a3ca:	e00f      	b.n	800a3ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a58      	ldr	r2, [pc, #352]	; (800a534 <HAL_SD_GetCardCSD+0x344>)
 800a3d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e09d      	b.n	800a528 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3f0:	0b9b      	lsrs	r3, r3, #14
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	f003 0301 	and.w	r3, r3, #1
 800a3f8:	b2da      	uxtb	r2, r3
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a402:	09db      	lsrs	r3, r3, #7
 800a404:	b2db      	uxtb	r3, r3
 800a406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a40a:	b2da      	uxtb	r2, r3
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a414:	b2db      	uxtb	r3, r3
 800a416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a41a:	b2da      	uxtb	r2, r3
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a424:	0fdb      	lsrs	r3, r3, #31
 800a426:	b2da      	uxtb	r2, r3
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a430:	0f5b      	lsrs	r3, r3, #29
 800a432:	b2db      	uxtb	r3, r3
 800a434:	f003 0303 	and.w	r3, r3, #3
 800a438:	b2da      	uxtb	r2, r3
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a442:	0e9b      	lsrs	r3, r3, #26
 800a444:	b2db      	uxtb	r3, r3
 800a446:	f003 0307 	and.w	r3, r3, #7
 800a44a:	b2da      	uxtb	r2, r3
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a454:	0d9b      	lsrs	r3, r3, #22
 800a456:	b2db      	uxtb	r3, r3
 800a458:	f003 030f 	and.w	r3, r3, #15
 800a45c:	b2da      	uxtb	r2, r3
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a466:	0d5b      	lsrs	r3, r3, #21
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	f003 0301 	and.w	r3, r3, #1
 800a46e:	b2da      	uxtb	r2, r3
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	2200      	movs	r2, #0
 800a47a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a482:	0c1b      	lsrs	r3, r3, #16
 800a484:	b2db      	uxtb	r3, r3
 800a486:	f003 0301 	and.w	r3, r3, #1
 800a48a:	b2da      	uxtb	r2, r3
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a496:	0bdb      	lsrs	r3, r3, #15
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	f003 0301 	and.w	r3, r3, #1
 800a49e:	b2da      	uxtb	r2, r3
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4aa:	0b9b      	lsrs	r3, r3, #14
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	f003 0301 	and.w	r3, r3, #1
 800a4b2:	b2da      	uxtb	r2, r3
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4be:	0b5b      	lsrs	r3, r3, #13
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	f003 0301 	and.w	r3, r3, #1
 800a4c6:	b2da      	uxtb	r2, r3
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4d2:	0b1b      	lsrs	r3, r3, #12
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	f003 0301 	and.w	r3, r3, #1
 800a4da:	b2da      	uxtb	r2, r3
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4e6:	0a9b      	lsrs	r3, r3, #10
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	f003 0303 	and.w	r3, r3, #3
 800a4ee:	b2da      	uxtb	r2, r3
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4fa:	0a1b      	lsrs	r3, r3, #8
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	f003 0303 	and.w	r3, r3, #3
 800a502:	b2da      	uxtb	r2, r3
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a50e:	085b      	lsrs	r3, r3, #1
 800a510:	b2db      	uxtb	r3, r3
 800a512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a516:	b2da      	uxtb	r2, r3
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	2201      	movs	r2, #1
 800a522:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a526:	2300      	movs	r3, #0
}
 800a528:	4618      	mov	r0, r3
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr
 800a534:	004005ff 	.word	0x004005ff

0800a538 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a582:	2300      	movs	r3, #0
}
 800a584:	4618      	mov	r0, r3
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a590:	b5b0      	push	{r4, r5, r7, lr}
 800a592:	b08e      	sub	sp, #56	; 0x38
 800a594:	af04      	add	r7, sp, #16
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2203      	movs	r2, #3
 800a59e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5a6:	2b03      	cmp	r3, #3
 800a5a8:	d02e      	beq.n	800a608 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5b0:	d106      	bne.n	800a5c0 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	639a      	str	r2, [r3, #56]	; 0x38
 800a5be:	e029      	b.n	800a614 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5c6:	d10a      	bne.n	800a5de <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f000 fa01 	bl	800a9d0 <SD_WideBus_Enable>
 800a5ce:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d6:	431a      	orrs	r2, r3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	639a      	str	r2, [r3, #56]	; 0x38
 800a5dc:	e01a      	b.n	800a614 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d10a      	bne.n	800a5fa <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 fa3e 	bl	800aa66 <SD_WideBus_Disable>
 800a5ea:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f2:	431a      	orrs	r2, r3
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	639a      	str	r2, [r3, #56]	; 0x38
 800a5f8:	e00c      	b.n	800a614 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	639a      	str	r2, [r3, #56]	; 0x38
 800a606:	e005      	b.n	800a614 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a60c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d009      	beq.n	800a630 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	4a18      	ldr	r2, [pc, #96]	; (800a684 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800a622:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2201      	movs	r2, #1
 800a628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a62c:	2301      	movs	r3, #1
 800a62e:	e024      	b.n	800a67a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	695b      	ldr	r3, [r3, #20]
 800a64a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	699b      	ldr	r3, [r3, #24]
 800a650:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681d      	ldr	r5, [r3, #0]
 800a656:	466c      	mov	r4, sp
 800a658:	f107 0318 	add.w	r3, r7, #24
 800a65c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a660:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a664:	f107 030c 	add.w	r3, r7, #12
 800a668:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a66a:	4628      	mov	r0, r5
 800a66c:	f001 fa7c 	bl	800bb68 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2201      	movs	r2, #1
 800a674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a678:	2300      	movs	r3, #0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3728      	adds	r7, #40	; 0x28
 800a67e:	46bd      	mov	sp, r7
 800a680:	bdb0      	pop	{r4, r5, r7, pc}
 800a682:	bf00      	nop
 800a684:	004005ff 	.word	0x004005ff

0800a688 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b086      	sub	sp, #24
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a690:	2300      	movs	r3, #0
 800a692:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a694:	f107 030c 	add.w	r3, r7, #12
 800a698:	4619      	mov	r1, r3
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 f970 	bl	800a980 <SD_SendStatus>
 800a6a0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d005      	beq.n	800a6b4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	431a      	orrs	r2, r3
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	0a5b      	lsrs	r3, r3, #9
 800a6b8:	f003 030f 	and.w	r3, r3, #15
 800a6bc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a6be:	693b      	ldr	r3, [r7, #16]
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3718      	adds	r7, #24
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a6c8:	b5b0      	push	{r4, r5, r7, lr}
 800a6ca:	b094      	sub	sp, #80	; 0x50
 800a6cc:	af04      	add	r7, sp, #16
 800a6ce:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f001 fa9d 	bl	800bc18 <SDIO_GetPowerState>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d102      	bne.n	800a6ea <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a6e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a6e8:	e0b7      	b.n	800a85a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6ee:	2b03      	cmp	r3, #3
 800a6f0:	d02f      	beq.n	800a752 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f001 fcc6 	bl	800c088 <SDMMC_CmdSendCID>
 800a6fc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a700:	2b00      	cmp	r3, #0
 800a702:	d001      	beq.n	800a708 <SD_InitCard+0x40>
    {
      return errorstate;
 800a704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a706:	e0a8      	b.n	800a85a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2100      	movs	r1, #0
 800a70e:	4618      	mov	r0, r3
 800a710:	f001 fac7 	bl	800bca2 <SDIO_GetResponse>
 800a714:	4602      	mov	r2, r0
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	2104      	movs	r1, #4
 800a720:	4618      	mov	r0, r3
 800a722:	f001 fabe 	bl	800bca2 <SDIO_GetResponse>
 800a726:	4602      	mov	r2, r0
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2108      	movs	r1, #8
 800a732:	4618      	mov	r0, r3
 800a734:	f001 fab5 	bl	800bca2 <SDIO_GetResponse>
 800a738:	4602      	mov	r2, r0
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	210c      	movs	r1, #12
 800a744:	4618      	mov	r0, r3
 800a746:	f001 faac 	bl	800bca2 <SDIO_GetResponse>
 800a74a:	4602      	mov	r2, r0
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a756:	2b03      	cmp	r3, #3
 800a758:	d00d      	beq.n	800a776 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f107 020e 	add.w	r2, r7, #14
 800a762:	4611      	mov	r1, r2
 800a764:	4618      	mov	r0, r3
 800a766:	f001 fccc 	bl	800c102 <SDMMC_CmdSetRelAdd>
 800a76a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a76c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d001      	beq.n	800a776 <SD_InitCard+0xae>
    {
      return errorstate;
 800a772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a774:	e071      	b.n	800a85a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a77a:	2b03      	cmp	r3, #3
 800a77c:	d036      	beq.n	800a7ec <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a77e:	89fb      	ldrh	r3, [r7, #14]
 800a780:	461a      	mov	r2, r3
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a78e:	041b      	lsls	r3, r3, #16
 800a790:	4619      	mov	r1, r3
 800a792:	4610      	mov	r0, r2
 800a794:	f001 fc96 	bl	800c0c4 <SDMMC_CmdSendCSD>
 800a798:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a79a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d001      	beq.n	800a7a4 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a7a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7a2:	e05a      	b.n	800a85a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f001 fa79 	bl	800bca2 <SDIO_GetResponse>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	2104      	movs	r1, #4
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f001 fa70 	bl	800bca2 <SDIO_GetResponse>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2108      	movs	r1, #8
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f001 fa67 	bl	800bca2 <SDIO_GetResponse>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	210c      	movs	r1, #12
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f001 fa5e 	bl	800bca2 <SDIO_GetResponse>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	2104      	movs	r1, #4
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f001 fa55 	bl	800bca2 <SDIO_GetResponse>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	0d1a      	lsrs	r2, r3, #20
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a800:	f107 0310 	add.w	r3, r7, #16
 800a804:	4619      	mov	r1, r3
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f7ff fcf2 	bl	800a1f0 <HAL_SD_GetCardCSD>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d002      	beq.n	800a818 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a812:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a816:	e020      	b.n	800a85a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6819      	ldr	r1, [r3, #0]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a820:	041b      	lsls	r3, r3, #16
 800a822:	f04f 0400 	mov.w	r4, #0
 800a826:	461a      	mov	r2, r3
 800a828:	4623      	mov	r3, r4
 800a82a:	4608      	mov	r0, r1
 800a82c:	f001 fb44 	bl	800beb8 <SDMMC_CmdSelDesel>
 800a830:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a834:	2b00      	cmp	r3, #0
 800a836:	d001      	beq.n	800a83c <SD_InitCard+0x174>
  {
    return errorstate;
 800a838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a83a:	e00e      	b.n	800a85a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681d      	ldr	r5, [r3, #0]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	466c      	mov	r4, sp
 800a844:	f103 0210 	add.w	r2, r3, #16
 800a848:	ca07      	ldmia	r2, {r0, r1, r2}
 800a84a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a84e:	3304      	adds	r3, #4
 800a850:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a852:	4628      	mov	r0, r5
 800a854:	f001 f988 	bl	800bb68 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3740      	adds	r7, #64	; 0x40
 800a85e:	46bd      	mov	sp, r7
 800a860:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a864 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b086      	sub	sp, #24
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a86c:	2300      	movs	r3, #0
 800a86e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a870:	2300      	movs	r3, #0
 800a872:	617b      	str	r3, [r7, #20]
 800a874:	2300      	movs	r3, #0
 800a876:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4618      	mov	r0, r3
 800a87e:	f001 fb3e 	bl	800befe <SDMMC_CmdGoIdleState>
 800a882:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d001      	beq.n	800a88e <SD_PowerON+0x2a>
  {
    return errorstate;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	e072      	b.n	800a974 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	4618      	mov	r0, r3
 800a894:	f001 fb51 	bl	800bf3a <SDMMC_CmdOperCond>
 800a898:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d00d      	beq.n	800a8bc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f001 fb27 	bl	800befe <SDMMC_CmdGoIdleState>
 800a8b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d004      	beq.n	800a8c2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	e05b      	b.n	800a974 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d137      	bne.n	800a93a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2100      	movs	r1, #0
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f001 fb51 	bl	800bf78 <SDMMC_CmdAppCommand>
 800a8d6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d02d      	beq.n	800a93a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a8de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a8e2:	e047      	b.n	800a974 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2100      	movs	r1, #0
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f001 fb44 	bl	800bf78 <SDMMC_CmdAppCommand>
 800a8f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d001      	beq.n	800a8fc <SD_PowerON+0x98>
    {
      return errorstate;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	e03b      	b.n	800a974 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	491e      	ldr	r1, [pc, #120]	; (800a97c <SD_PowerON+0x118>)
 800a902:	4618      	mov	r0, r3
 800a904:	f001 fb5a 	bl	800bfbc <SDMMC_CmdAppOperCommand>
 800a908:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d002      	beq.n	800a916 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a910:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a914:	e02e      	b.n	800a974 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2100      	movs	r1, #0
 800a91c:	4618      	mov	r0, r3
 800a91e:	f001 f9c0 	bl	800bca2 <SDIO_GetResponse>
 800a922:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	0fdb      	lsrs	r3, r3, #31
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d101      	bne.n	800a930 <SD_PowerON+0xcc>
 800a92c:	2301      	movs	r3, #1
 800a92e:	e000      	b.n	800a932 <SD_PowerON+0xce>
 800a930:	2300      	movs	r3, #0
 800a932:	613b      	str	r3, [r7, #16]

    count++;
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	3301      	adds	r3, #1
 800a938:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a940:	4293      	cmp	r3, r2
 800a942:	d802      	bhi.n	800a94a <SD_PowerON+0xe6>
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d0cc      	beq.n	800a8e4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a950:	4293      	cmp	r3, r2
 800a952:	d902      	bls.n	800a95a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a954:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a958:	e00c      	b.n	800a974 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a960:	2b00      	cmp	r3, #0
 800a962:	d003      	beq.n	800a96c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2201      	movs	r2, #1
 800a968:	645a      	str	r2, [r3, #68]	; 0x44
 800a96a:	e002      	b.n	800a972 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3718      	adds	r7, #24
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	c1100000 	.word	0xc1100000

0800a980 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d102      	bne.n	800a996 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a990:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a994:	e018      	b.n	800a9c8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a99e:	041b      	lsls	r3, r3, #16
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	4610      	mov	r0, r2
 800a9a4:	f001 fbce 	bl	800c144 <SDMMC_CmdSendStatus>
 800a9a8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d001      	beq.n	800a9b4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	e009      	b.n	800a9c8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2100      	movs	r1, #0
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f001 f971 	bl	800bca2 <SDIO_GetResponse>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3710      	adds	r7, #16
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b086      	sub	sp, #24
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a9d8:	2300      	movs	r3, #0
 800a9da:	60fb      	str	r3, [r7, #12]
 800a9dc:	2300      	movs	r3, #0
 800a9de:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f001 f95b 	bl	800bca2 <SDIO_GetResponse>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9f6:	d102      	bne.n	800a9fe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a9f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a9fc:	e02f      	b.n	800aa5e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a9fe:	f107 030c 	add.w	r3, r7, #12
 800aa02:	4619      	mov	r1, r3
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 f879 	bl	800aafc <SD_FindSCR>
 800aa0a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d001      	beq.n	800aa16 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	e023      	b.n	800aa5e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d01c      	beq.n	800aa5a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa28:	041b      	lsls	r3, r3, #16
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	4610      	mov	r0, r2
 800aa2e:	f001 faa3 	bl	800bf78 <SDMMC_CmdAppCommand>
 800aa32:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d001      	beq.n	800aa3e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	e00f      	b.n	800aa5e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2102      	movs	r1, #2
 800aa44:	4618      	mov	r0, r3
 800aa46:	f001 fadc 	bl	800c002 <SDMMC_CmdBusWidth>
 800aa4a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d001      	beq.n	800aa56 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	e003      	b.n	800aa5e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800aa56:	2300      	movs	r3, #0
 800aa58:	e001      	b.n	800aa5e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aa5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3718      	adds	r7, #24
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b086      	sub	sp, #24
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800aa6e:	2300      	movs	r3, #0
 800aa70:	60fb      	str	r3, [r7, #12]
 800aa72:	2300      	movs	r3, #0
 800aa74:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f001 f910 	bl	800bca2 <SDIO_GetResponse>
 800aa82:	4603      	mov	r3, r0
 800aa84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa8c:	d102      	bne.n	800aa94 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800aa8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa92:	e02f      	b.n	800aaf4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800aa94:	f107 030c 	add.w	r3, r7, #12
 800aa98:	4619      	mov	r1, r3
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 f82e 	bl	800aafc <SD_FindSCR>
 800aaa0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d001      	beq.n	800aaac <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	e023      	b.n	800aaf4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d01c      	beq.n	800aaf0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aabe:	041b      	lsls	r3, r3, #16
 800aac0:	4619      	mov	r1, r3
 800aac2:	4610      	mov	r0, r2
 800aac4:	f001 fa58 	bl	800bf78 <SDMMC_CmdAppCommand>
 800aac8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d001      	beq.n	800aad4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	e00f      	b.n	800aaf4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2100      	movs	r1, #0
 800aada:	4618      	mov	r0, r3
 800aadc:	f001 fa91 	bl	800c002 <SDMMC_CmdBusWidth>
 800aae0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d001      	beq.n	800aaec <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	e003      	b.n	800aaf4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800aaec:	2300      	movs	r3, #0
 800aaee:	e001      	b.n	800aaf4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aaf0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3718      	adds	r7, #24
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800aafc:	b590      	push	{r4, r7, lr}
 800aafe:	b08f      	sub	sp, #60	; 0x3c
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ab06:	f7fa f965 	bl	8004dd4 <HAL_GetTick>
 800ab0a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800ab10:	2300      	movs	r3, #0
 800ab12:	60bb      	str	r3, [r7, #8]
 800ab14:	2300      	movs	r3, #0
 800ab16:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2108      	movs	r1, #8
 800ab22:	4618      	mov	r0, r3
 800ab24:	f001 f8fc 	bl	800bd20 <SDMMC_CmdBlockLength>
 800ab28:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d001      	beq.n	800ab34 <SD_FindSCR+0x38>
  {
    return errorstate;
 800ab30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab32:	e0a9      	b.n	800ac88 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab3c:	041b      	lsls	r3, r3, #16
 800ab3e:	4619      	mov	r1, r3
 800ab40:	4610      	mov	r0, r2
 800ab42:	f001 fa19 	bl	800bf78 <SDMMC_CmdAppCommand>
 800ab46:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d001      	beq.n	800ab52 <SD_FindSCR+0x56>
  {
    return errorstate;
 800ab4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab50:	e09a      	b.n	800ac88 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ab52:	f04f 33ff 	mov.w	r3, #4294967295
 800ab56:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ab58:	2308      	movs	r3, #8
 800ab5a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800ab5c:	2330      	movs	r3, #48	; 0x30
 800ab5e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800ab60:	2302      	movs	r3, #2
 800ab62:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ab64:	2300      	movs	r3, #0
 800ab66:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800ab68:	2301      	movs	r3, #1
 800ab6a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f107 0210 	add.w	r2, r7, #16
 800ab74:	4611      	mov	r1, r2
 800ab76:	4618      	mov	r0, r3
 800ab78:	f001 f8a6 	bl	800bcc8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4618      	mov	r0, r3
 800ab82:	f001 fa60 	bl	800c046 <SDMMC_CmdSendSCR>
 800ab86:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d022      	beq.n	800abd4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800ab8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab90:	e07a      	b.n	800ac88 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00e      	beq.n	800abbe <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6819      	ldr	r1, [r3, #0]
 800aba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	f107 0208 	add.w	r2, r7, #8
 800abac:	18d4      	adds	r4, r2, r3
 800abae:	4608      	mov	r0, r1
 800abb0:	f001 f805 	bl	800bbbe <SDIO_ReadFIFO>
 800abb4:	4603      	mov	r3, r0
 800abb6:	6023      	str	r3, [r4, #0]
      index++;
 800abb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abba:	3301      	adds	r3, #1
 800abbc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800abbe:	f7fa f909 	bl	8004dd4 <HAL_GetTick>
 800abc2:	4602      	mov	r2, r0
 800abc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc6:	1ad3      	subs	r3, r2, r3
 800abc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abcc:	d102      	bne.n	800abd4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800abce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800abd2:	e059      	b.n	800ac88 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abda:	f240 432a 	movw	r3, #1066	; 0x42a
 800abde:	4013      	ands	r3, r2
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d0d6      	beq.n	800ab92 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abea:	f003 0308 	and.w	r3, r3, #8
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d005      	beq.n	800abfe <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2208      	movs	r2, #8
 800abf8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800abfa:	2308      	movs	r3, #8
 800abfc:	e044      	b.n	800ac88 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac04:	f003 0302 	and.w	r3, r3, #2
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d005      	beq.n	800ac18 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	2202      	movs	r2, #2
 800ac12:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ac14:	2302      	movs	r3, #2
 800ac16:	e037      	b.n	800ac88 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac1e:	f003 0320 	and.w	r3, r3, #32
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d005      	beq.n	800ac32 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2220      	movs	r2, #32
 800ac2c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ac2e:	2320      	movs	r3, #32
 800ac30:	e02a      	b.n	800ac88 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f240 523a 	movw	r2, #1338	; 0x53a
 800ac3a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	061a      	lsls	r2, r3, #24
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	021b      	lsls	r3, r3, #8
 800ac44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ac48:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	0a1b      	lsrs	r3, r3, #8
 800ac4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ac52:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	0e1b      	lsrs	r3, r3, #24
 800ac58:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ac5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac5c:	601a      	str	r2, [r3, #0]
    scr++;
 800ac5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac60:	3304      	adds	r3, #4
 800ac62:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	061a      	lsls	r2, r3, #24
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	021b      	lsls	r3, r3, #8
 800ac6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ac70:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	0a1b      	lsrs	r3, r3, #8
 800ac76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ac7a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	0e1b      	lsrs	r3, r3, #24
 800ac80:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ac82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac84:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ac86:	2300      	movs	r3, #0
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	373c      	adds	r7, #60	; 0x3c
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd90      	pop	{r4, r7, pc}

0800ac90 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	60f8      	str	r0, [r7, #12]
 800ac98:	60b9      	str	r1, [r7, #8]
 800ac9a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d101      	bne.n	800aca6 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800aca2:	2301      	movs	r3, #1
 800aca4:	e034      	b.n	800ad10 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800acac:	b2db      	uxtb	r3, r3
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d106      	bne.n	800acc0 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2200      	movs	r2, #0
 800acb6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800acba:	68f8      	ldr	r0, [r7, #12]
 800acbc:	f7f8 fc1a 	bl	80034f4 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	3308      	adds	r3, #8
 800acc8:	4619      	mov	r1, r3
 800acca:	4610      	mov	r0, r2
 800accc:	f000 fe48 	bl	800b960 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	6818      	ldr	r0, [r3, #0]
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	461a      	mov	r2, r3
 800acda:	68b9      	ldr	r1, [r7, #8]
 800acdc:	f000 feb0 	bl	800ba40 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	6858      	ldr	r0, [r3, #4]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	689a      	ldr	r2, [r3, #8]
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acec:	6879      	ldr	r1, [r7, #4]
 800acee:	f000 fefb 	bl	800bae8 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	68fa      	ldr	r2, [r7, #12]
 800acf8:	6892      	ldr	r2, [r2, #8]
 800acfa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	68fa      	ldr	r2, [r7, #12]
 800ad04:	6892      	ldr	r2, [r2, #8]
 800ad06:	f041 0101 	orr.w	r1, r1, #1
 800ad0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3710      	adds	r7, #16
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d101      	bne.n	800ad2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ad26:	2301      	movs	r3, #1
 800ad28:	e01d      	b.n	800ad66 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad30:	b2db      	uxtb	r3, r3
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d106      	bne.n	800ad44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 f815 	bl	800ad6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2202      	movs	r2, #2
 800ad48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681a      	ldr	r2, [r3, #0]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	3304      	adds	r3, #4
 800ad54:	4619      	mov	r1, r3
 800ad56:	4610      	mov	r0, r2
 800ad58:	f000 f968 	bl	800b02c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ad64:	2300      	movs	r3, #0
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3708      	adds	r7, #8
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800ad6e:	b480      	push	{r7}
 800ad70:	b083      	sub	sp, #12
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ad76:	bf00      	nop
 800ad78:	370c      	adds	r7, #12
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad80:	4770      	bx	lr

0800ad82 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ad82:	b480      	push	{r7}
 800ad84:	b085      	sub	sp, #20
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	68da      	ldr	r2, [r3, #12]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f042 0201 	orr.w	r2, r2, #1
 800ad98:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	f003 0307 	and.w	r3, r3, #7
 800ada4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2b06      	cmp	r3, #6
 800adaa:	d007      	beq.n	800adbc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f042 0201 	orr.w	r2, r2, #1
 800adba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800adbc:	2300      	movs	r3, #0
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3714      	adds	r7, #20
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr

0800adca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800adca:	b580      	push	{r7, lr}
 800adcc:	b082      	sub	sp, #8
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	691b      	ldr	r3, [r3, #16]
 800add8:	f003 0302 	and.w	r3, r3, #2
 800addc:	2b02      	cmp	r3, #2
 800adde:	d122      	bne.n	800ae26 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68db      	ldr	r3, [r3, #12]
 800ade6:	f003 0302 	and.w	r3, r3, #2
 800adea:	2b02      	cmp	r3, #2
 800adec:	d11b      	bne.n	800ae26 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f06f 0202 	mvn.w	r2, #2
 800adf6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2201      	movs	r2, #1
 800adfc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	699b      	ldr	r3, [r3, #24]
 800ae04:	f003 0303 	and.w	r3, r3, #3
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d003      	beq.n	800ae14 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 f8ee 	bl	800afee <HAL_TIM_IC_CaptureCallback>
 800ae12:	e005      	b.n	800ae20 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 f8e0 	bl	800afda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 f8f1 	bl	800b002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	691b      	ldr	r3, [r3, #16]
 800ae2c:	f003 0304 	and.w	r3, r3, #4
 800ae30:	2b04      	cmp	r3, #4
 800ae32:	d122      	bne.n	800ae7a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	68db      	ldr	r3, [r3, #12]
 800ae3a:	f003 0304 	and.w	r3, r3, #4
 800ae3e:	2b04      	cmp	r3, #4
 800ae40:	d11b      	bne.n	800ae7a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f06f 0204 	mvn.w	r2, #4
 800ae4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2202      	movs	r2, #2
 800ae50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	699b      	ldr	r3, [r3, #24]
 800ae58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d003      	beq.n	800ae68 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 f8c4 	bl	800afee <HAL_TIM_IC_CaptureCallback>
 800ae66:	e005      	b.n	800ae74 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 f8b6 	bl	800afda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 f8c7 	bl	800b002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2200      	movs	r2, #0
 800ae78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	691b      	ldr	r3, [r3, #16]
 800ae80:	f003 0308 	and.w	r3, r3, #8
 800ae84:	2b08      	cmp	r3, #8
 800ae86:	d122      	bne.n	800aece <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	68db      	ldr	r3, [r3, #12]
 800ae8e:	f003 0308 	and.w	r3, r3, #8
 800ae92:	2b08      	cmp	r3, #8
 800ae94:	d11b      	bne.n	800aece <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f06f 0208 	mvn.w	r2, #8
 800ae9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2204      	movs	r2, #4
 800aea4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	69db      	ldr	r3, [r3, #28]
 800aeac:	f003 0303 	and.w	r3, r3, #3
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d003      	beq.n	800aebc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 f89a 	bl	800afee <HAL_TIM_IC_CaptureCallback>
 800aeba:	e005      	b.n	800aec8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 f88c 	bl	800afda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 f89d 	bl	800b002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2200      	movs	r2, #0
 800aecc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	691b      	ldr	r3, [r3, #16]
 800aed4:	f003 0310 	and.w	r3, r3, #16
 800aed8:	2b10      	cmp	r3, #16
 800aeda:	d122      	bne.n	800af22 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	68db      	ldr	r3, [r3, #12]
 800aee2:	f003 0310 	and.w	r3, r3, #16
 800aee6:	2b10      	cmp	r3, #16
 800aee8:	d11b      	bne.n	800af22 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f06f 0210 	mvn.w	r2, #16
 800aef2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2208      	movs	r2, #8
 800aef8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	69db      	ldr	r3, [r3, #28]
 800af00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af04:	2b00      	cmp	r3, #0
 800af06:	d003      	beq.n	800af10 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 f870 	bl	800afee <HAL_TIM_IC_CaptureCallback>
 800af0e:	e005      	b.n	800af1c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 f862 	bl	800afda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 f873 	bl	800b002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	691b      	ldr	r3, [r3, #16]
 800af28:	f003 0301 	and.w	r3, r3, #1
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d10e      	bne.n	800af4e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	68db      	ldr	r3, [r3, #12]
 800af36:	f003 0301 	and.w	r3, r3, #1
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d107      	bne.n	800af4e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f06f 0201 	mvn.w	r2, #1
 800af46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f7f7 f8af 	bl	80020ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	691b      	ldr	r3, [r3, #16]
 800af54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af58:	2b80      	cmp	r3, #128	; 0x80
 800af5a:	d10e      	bne.n	800af7a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	68db      	ldr	r3, [r3, #12]
 800af62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af66:	2b80      	cmp	r3, #128	; 0x80
 800af68:	d107      	bne.n	800af7a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800af72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 f903 	bl	800b180 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	691b      	ldr	r3, [r3, #16]
 800af80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af84:	2b40      	cmp	r3, #64	; 0x40
 800af86:	d10e      	bne.n	800afa6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	68db      	ldr	r3, [r3, #12]
 800af8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af92:	2b40      	cmp	r3, #64	; 0x40
 800af94:	d107      	bne.n	800afa6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800af9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 f838 	bl	800b016 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	691b      	ldr	r3, [r3, #16]
 800afac:	f003 0320 	and.w	r3, r3, #32
 800afb0:	2b20      	cmp	r3, #32
 800afb2:	d10e      	bne.n	800afd2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	68db      	ldr	r3, [r3, #12]
 800afba:	f003 0320 	and.w	r3, r3, #32
 800afbe:	2b20      	cmp	r3, #32
 800afc0:	d107      	bne.n	800afd2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f06f 0220 	mvn.w	r2, #32
 800afca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f000 f8cd 	bl	800b16c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800afd2:	bf00      	nop
 800afd4:	3708      	adds	r7, #8
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800afda:	b480      	push	{r7}
 800afdc:	b083      	sub	sp, #12
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800afe2:	bf00      	nop
 800afe4:	370c      	adds	r7, #12
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr

0800afee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800afee:	b480      	push	{r7}
 800aff0:	b083      	sub	sp, #12
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aff6:	bf00      	nop
 800aff8:	370c      	adds	r7, #12
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr

0800b002 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b002:	b480      	push	{r7}
 800b004:	b083      	sub	sp, #12
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b00a:	bf00      	nop
 800b00c:	370c      	adds	r7, #12
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr

0800b016 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b016:	b480      	push	{r7}
 800b018:	b083      	sub	sp, #12
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b01e:	bf00      	nop
 800b020:	370c      	adds	r7, #12
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr
	...

0800b02c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b085      	sub	sp, #20
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	4a40      	ldr	r2, [pc, #256]	; (800b140 <TIM_Base_SetConfig+0x114>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d013      	beq.n	800b06c <TIM_Base_SetConfig+0x40>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b04a:	d00f      	beq.n	800b06c <TIM_Base_SetConfig+0x40>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	4a3d      	ldr	r2, [pc, #244]	; (800b144 <TIM_Base_SetConfig+0x118>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d00b      	beq.n	800b06c <TIM_Base_SetConfig+0x40>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	4a3c      	ldr	r2, [pc, #240]	; (800b148 <TIM_Base_SetConfig+0x11c>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d007      	beq.n	800b06c <TIM_Base_SetConfig+0x40>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	4a3b      	ldr	r2, [pc, #236]	; (800b14c <TIM_Base_SetConfig+0x120>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d003      	beq.n	800b06c <TIM_Base_SetConfig+0x40>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	4a3a      	ldr	r2, [pc, #232]	; (800b150 <TIM_Base_SetConfig+0x124>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d108      	bne.n	800b07e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	4a2f      	ldr	r2, [pc, #188]	; (800b140 <TIM_Base_SetConfig+0x114>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d02b      	beq.n	800b0de <TIM_Base_SetConfig+0xb2>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b08c:	d027      	beq.n	800b0de <TIM_Base_SetConfig+0xb2>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	4a2c      	ldr	r2, [pc, #176]	; (800b144 <TIM_Base_SetConfig+0x118>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d023      	beq.n	800b0de <TIM_Base_SetConfig+0xb2>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	4a2b      	ldr	r2, [pc, #172]	; (800b148 <TIM_Base_SetConfig+0x11c>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d01f      	beq.n	800b0de <TIM_Base_SetConfig+0xb2>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4a2a      	ldr	r2, [pc, #168]	; (800b14c <TIM_Base_SetConfig+0x120>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d01b      	beq.n	800b0de <TIM_Base_SetConfig+0xb2>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4a29      	ldr	r2, [pc, #164]	; (800b150 <TIM_Base_SetConfig+0x124>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d017      	beq.n	800b0de <TIM_Base_SetConfig+0xb2>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	4a28      	ldr	r2, [pc, #160]	; (800b154 <TIM_Base_SetConfig+0x128>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d013      	beq.n	800b0de <TIM_Base_SetConfig+0xb2>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	4a27      	ldr	r2, [pc, #156]	; (800b158 <TIM_Base_SetConfig+0x12c>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d00f      	beq.n	800b0de <TIM_Base_SetConfig+0xb2>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	4a26      	ldr	r2, [pc, #152]	; (800b15c <TIM_Base_SetConfig+0x130>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d00b      	beq.n	800b0de <TIM_Base_SetConfig+0xb2>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	4a25      	ldr	r2, [pc, #148]	; (800b160 <TIM_Base_SetConfig+0x134>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d007      	beq.n	800b0de <TIM_Base_SetConfig+0xb2>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	4a24      	ldr	r2, [pc, #144]	; (800b164 <TIM_Base_SetConfig+0x138>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d003      	beq.n	800b0de <TIM_Base_SetConfig+0xb2>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	4a23      	ldr	r2, [pc, #140]	; (800b168 <TIM_Base_SetConfig+0x13c>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d108      	bne.n	800b0f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	68fa      	ldr	r2, [r7, #12]
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	695b      	ldr	r3, [r3, #20]
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	68fa      	ldr	r2, [r7, #12]
 800b102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	689a      	ldr	r2, [r3, #8]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	681a      	ldr	r2, [r3, #0]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	4a0a      	ldr	r2, [pc, #40]	; (800b140 <TIM_Base_SetConfig+0x114>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d003      	beq.n	800b124 <TIM_Base_SetConfig+0xf8>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	4a0c      	ldr	r2, [pc, #48]	; (800b150 <TIM_Base_SetConfig+0x124>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d103      	bne.n	800b12c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	691a      	ldr	r2, [r3, #16]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2201      	movs	r2, #1
 800b130:	615a      	str	r2, [r3, #20]
}
 800b132:	bf00      	nop
 800b134:	3714      	adds	r7, #20
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr
 800b13e:	bf00      	nop
 800b140:	40010000 	.word	0x40010000
 800b144:	40000400 	.word	0x40000400
 800b148:	40000800 	.word	0x40000800
 800b14c:	40000c00 	.word	0x40000c00
 800b150:	40010400 	.word	0x40010400
 800b154:	40014000 	.word	0x40014000
 800b158:	40014400 	.word	0x40014400
 800b15c:	40014800 	.word	0x40014800
 800b160:	40001800 	.word	0x40001800
 800b164:	40001c00 	.word	0x40001c00
 800b168:	40002000 	.word	0x40002000

0800b16c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b083      	sub	sp, #12
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b174:	bf00      	nop
 800b176:	370c      	adds	r7, #12
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b180:	b480      	push	{r7}
 800b182:	b083      	sub	sp, #12
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b188:	bf00      	nop
 800b18a:	370c      	adds	r7, #12
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b082      	sub	sp, #8
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d101      	bne.n	800b1a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	e03f      	b.n	800b226 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d106      	bne.n	800b1c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f7f8 f8ac 	bl	8003318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2224      	movs	r2, #36	; 0x24
 800b1c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	68da      	ldr	r2, [r3, #12]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b1d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 f829 	bl	800b230 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	691a      	ldr	r2, [r3, #16]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b1ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	695a      	ldr	r2, [r3, #20]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b1fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	68da      	ldr	r2, [r3, #12]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b20c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2220      	movs	r2, #32
 800b218:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2220      	movs	r2, #32
 800b220:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b224:	2300      	movs	r3, #0
}
 800b226:	4618      	mov	r0, r3
 800b228:	3708      	adds	r7, #8
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
	...

0800b230 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b234:	b085      	sub	sp, #20
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	691b      	ldr	r3, [r3, #16]
 800b240:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	68da      	ldr	r2, [r3, #12]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	430a      	orrs	r2, r1
 800b24e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	689a      	ldr	r2, [r3, #8]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	691b      	ldr	r3, [r3, #16]
 800b258:	431a      	orrs	r2, r3
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	695b      	ldr	r3, [r3, #20]
 800b25e:	431a      	orrs	r2, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	69db      	ldr	r3, [r3, #28]
 800b264:	4313      	orrs	r3, r2
 800b266:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	68db      	ldr	r3, [r3, #12]
 800b26e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b272:	f023 030c 	bic.w	r3, r3, #12
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	6812      	ldr	r2, [r2, #0]
 800b27a:	68f9      	ldr	r1, [r7, #12]
 800b27c:	430b      	orrs	r3, r1
 800b27e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	695b      	ldr	r3, [r3, #20]
 800b286:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	699a      	ldr	r2, [r3, #24]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	430a      	orrs	r2, r1
 800b294:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	69db      	ldr	r3, [r3, #28]
 800b29a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b29e:	f040 8199 	bne.w	800b5d4 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4ac6      	ldr	r2, [pc, #792]	; (800b5c0 <UART_SetConfig+0x390>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d00f      	beq.n	800b2cc <UART_SetConfig+0x9c>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4ac4      	ldr	r2, [pc, #784]	; (800b5c4 <UART_SetConfig+0x394>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d00a      	beq.n	800b2cc <UART_SetConfig+0x9c>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4ac3      	ldr	r2, [pc, #780]	; (800b5c8 <UART_SetConfig+0x398>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d005      	beq.n	800b2cc <UART_SetConfig+0x9c>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4ac1      	ldr	r2, [pc, #772]	; (800b5cc <UART_SetConfig+0x39c>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	f040 80bd 	bne.w	800b446 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b2cc:	f7fd fd04 	bl	8008cd8 <HAL_RCC_GetPCLK2Freq>
 800b2d0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	461d      	mov	r5, r3
 800b2d6:	f04f 0600 	mov.w	r6, #0
 800b2da:	46a8      	mov	r8, r5
 800b2dc:	46b1      	mov	r9, r6
 800b2de:	eb18 0308 	adds.w	r3, r8, r8
 800b2e2:	eb49 0409 	adc.w	r4, r9, r9
 800b2e6:	4698      	mov	r8, r3
 800b2e8:	46a1      	mov	r9, r4
 800b2ea:	eb18 0805 	adds.w	r8, r8, r5
 800b2ee:	eb49 0906 	adc.w	r9, r9, r6
 800b2f2:	f04f 0100 	mov.w	r1, #0
 800b2f6:	f04f 0200 	mov.w	r2, #0
 800b2fa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b2fe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b302:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b306:	4688      	mov	r8, r1
 800b308:	4691      	mov	r9, r2
 800b30a:	eb18 0005 	adds.w	r0, r8, r5
 800b30e:	eb49 0106 	adc.w	r1, r9, r6
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	461d      	mov	r5, r3
 800b318:	f04f 0600 	mov.w	r6, #0
 800b31c:	196b      	adds	r3, r5, r5
 800b31e:	eb46 0406 	adc.w	r4, r6, r6
 800b322:	461a      	mov	r2, r3
 800b324:	4623      	mov	r3, r4
 800b326:	f7f5 fc5f 	bl	8000be8 <__aeabi_uldivmod>
 800b32a:	4603      	mov	r3, r0
 800b32c:	460c      	mov	r4, r1
 800b32e:	461a      	mov	r2, r3
 800b330:	4ba7      	ldr	r3, [pc, #668]	; (800b5d0 <UART_SetConfig+0x3a0>)
 800b332:	fba3 2302 	umull	r2, r3, r3, r2
 800b336:	095b      	lsrs	r3, r3, #5
 800b338:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	461d      	mov	r5, r3
 800b340:	f04f 0600 	mov.w	r6, #0
 800b344:	46a9      	mov	r9, r5
 800b346:	46b2      	mov	sl, r6
 800b348:	eb19 0309 	adds.w	r3, r9, r9
 800b34c:	eb4a 040a 	adc.w	r4, sl, sl
 800b350:	4699      	mov	r9, r3
 800b352:	46a2      	mov	sl, r4
 800b354:	eb19 0905 	adds.w	r9, r9, r5
 800b358:	eb4a 0a06 	adc.w	sl, sl, r6
 800b35c:	f04f 0100 	mov.w	r1, #0
 800b360:	f04f 0200 	mov.w	r2, #0
 800b364:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b368:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b36c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b370:	4689      	mov	r9, r1
 800b372:	4692      	mov	sl, r2
 800b374:	eb19 0005 	adds.w	r0, r9, r5
 800b378:	eb4a 0106 	adc.w	r1, sl, r6
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	461d      	mov	r5, r3
 800b382:	f04f 0600 	mov.w	r6, #0
 800b386:	196b      	adds	r3, r5, r5
 800b388:	eb46 0406 	adc.w	r4, r6, r6
 800b38c:	461a      	mov	r2, r3
 800b38e:	4623      	mov	r3, r4
 800b390:	f7f5 fc2a 	bl	8000be8 <__aeabi_uldivmod>
 800b394:	4603      	mov	r3, r0
 800b396:	460c      	mov	r4, r1
 800b398:	461a      	mov	r2, r3
 800b39a:	4b8d      	ldr	r3, [pc, #564]	; (800b5d0 <UART_SetConfig+0x3a0>)
 800b39c:	fba3 1302 	umull	r1, r3, r3, r2
 800b3a0:	095b      	lsrs	r3, r3, #5
 800b3a2:	2164      	movs	r1, #100	; 0x64
 800b3a4:	fb01 f303 	mul.w	r3, r1, r3
 800b3a8:	1ad3      	subs	r3, r2, r3
 800b3aa:	00db      	lsls	r3, r3, #3
 800b3ac:	3332      	adds	r3, #50	; 0x32
 800b3ae:	4a88      	ldr	r2, [pc, #544]	; (800b5d0 <UART_SetConfig+0x3a0>)
 800b3b0:	fba2 2303 	umull	r2, r3, r2, r3
 800b3b4:	095b      	lsrs	r3, r3, #5
 800b3b6:	005b      	lsls	r3, r3, #1
 800b3b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b3bc:	4498      	add	r8, r3
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	461d      	mov	r5, r3
 800b3c2:	f04f 0600 	mov.w	r6, #0
 800b3c6:	46a9      	mov	r9, r5
 800b3c8:	46b2      	mov	sl, r6
 800b3ca:	eb19 0309 	adds.w	r3, r9, r9
 800b3ce:	eb4a 040a 	adc.w	r4, sl, sl
 800b3d2:	4699      	mov	r9, r3
 800b3d4:	46a2      	mov	sl, r4
 800b3d6:	eb19 0905 	adds.w	r9, r9, r5
 800b3da:	eb4a 0a06 	adc.w	sl, sl, r6
 800b3de:	f04f 0100 	mov.w	r1, #0
 800b3e2:	f04f 0200 	mov.w	r2, #0
 800b3e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b3ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b3ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b3f2:	4689      	mov	r9, r1
 800b3f4:	4692      	mov	sl, r2
 800b3f6:	eb19 0005 	adds.w	r0, r9, r5
 800b3fa:	eb4a 0106 	adc.w	r1, sl, r6
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	685b      	ldr	r3, [r3, #4]
 800b402:	461d      	mov	r5, r3
 800b404:	f04f 0600 	mov.w	r6, #0
 800b408:	196b      	adds	r3, r5, r5
 800b40a:	eb46 0406 	adc.w	r4, r6, r6
 800b40e:	461a      	mov	r2, r3
 800b410:	4623      	mov	r3, r4
 800b412:	f7f5 fbe9 	bl	8000be8 <__aeabi_uldivmod>
 800b416:	4603      	mov	r3, r0
 800b418:	460c      	mov	r4, r1
 800b41a:	461a      	mov	r2, r3
 800b41c:	4b6c      	ldr	r3, [pc, #432]	; (800b5d0 <UART_SetConfig+0x3a0>)
 800b41e:	fba3 1302 	umull	r1, r3, r3, r2
 800b422:	095b      	lsrs	r3, r3, #5
 800b424:	2164      	movs	r1, #100	; 0x64
 800b426:	fb01 f303 	mul.w	r3, r1, r3
 800b42a:	1ad3      	subs	r3, r2, r3
 800b42c:	00db      	lsls	r3, r3, #3
 800b42e:	3332      	adds	r3, #50	; 0x32
 800b430:	4a67      	ldr	r2, [pc, #412]	; (800b5d0 <UART_SetConfig+0x3a0>)
 800b432:	fba2 2303 	umull	r2, r3, r2, r3
 800b436:	095b      	lsrs	r3, r3, #5
 800b438:	f003 0207 	and.w	r2, r3, #7
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4442      	add	r2, r8
 800b442:	609a      	str	r2, [r3, #8]
 800b444:	e27d      	b.n	800b942 <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b446:	f7fd fc33 	bl	8008cb0 <HAL_RCC_GetPCLK1Freq>
 800b44a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	461d      	mov	r5, r3
 800b450:	f04f 0600 	mov.w	r6, #0
 800b454:	46a8      	mov	r8, r5
 800b456:	46b1      	mov	r9, r6
 800b458:	eb18 0308 	adds.w	r3, r8, r8
 800b45c:	eb49 0409 	adc.w	r4, r9, r9
 800b460:	4698      	mov	r8, r3
 800b462:	46a1      	mov	r9, r4
 800b464:	eb18 0805 	adds.w	r8, r8, r5
 800b468:	eb49 0906 	adc.w	r9, r9, r6
 800b46c:	f04f 0100 	mov.w	r1, #0
 800b470:	f04f 0200 	mov.w	r2, #0
 800b474:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b478:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b47c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b480:	4688      	mov	r8, r1
 800b482:	4691      	mov	r9, r2
 800b484:	eb18 0005 	adds.w	r0, r8, r5
 800b488:	eb49 0106 	adc.w	r1, r9, r6
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	461d      	mov	r5, r3
 800b492:	f04f 0600 	mov.w	r6, #0
 800b496:	196b      	adds	r3, r5, r5
 800b498:	eb46 0406 	adc.w	r4, r6, r6
 800b49c:	461a      	mov	r2, r3
 800b49e:	4623      	mov	r3, r4
 800b4a0:	f7f5 fba2 	bl	8000be8 <__aeabi_uldivmod>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	460c      	mov	r4, r1
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	4b49      	ldr	r3, [pc, #292]	; (800b5d0 <UART_SetConfig+0x3a0>)
 800b4ac:	fba3 2302 	umull	r2, r3, r3, r2
 800b4b0:	095b      	lsrs	r3, r3, #5
 800b4b2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	461d      	mov	r5, r3
 800b4ba:	f04f 0600 	mov.w	r6, #0
 800b4be:	46a9      	mov	r9, r5
 800b4c0:	46b2      	mov	sl, r6
 800b4c2:	eb19 0309 	adds.w	r3, r9, r9
 800b4c6:	eb4a 040a 	adc.w	r4, sl, sl
 800b4ca:	4699      	mov	r9, r3
 800b4cc:	46a2      	mov	sl, r4
 800b4ce:	eb19 0905 	adds.w	r9, r9, r5
 800b4d2:	eb4a 0a06 	adc.w	sl, sl, r6
 800b4d6:	f04f 0100 	mov.w	r1, #0
 800b4da:	f04f 0200 	mov.w	r2, #0
 800b4de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b4e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b4e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b4ea:	4689      	mov	r9, r1
 800b4ec:	4692      	mov	sl, r2
 800b4ee:	eb19 0005 	adds.w	r0, r9, r5
 800b4f2:	eb4a 0106 	adc.w	r1, sl, r6
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	461d      	mov	r5, r3
 800b4fc:	f04f 0600 	mov.w	r6, #0
 800b500:	196b      	adds	r3, r5, r5
 800b502:	eb46 0406 	adc.w	r4, r6, r6
 800b506:	461a      	mov	r2, r3
 800b508:	4623      	mov	r3, r4
 800b50a:	f7f5 fb6d 	bl	8000be8 <__aeabi_uldivmod>
 800b50e:	4603      	mov	r3, r0
 800b510:	460c      	mov	r4, r1
 800b512:	461a      	mov	r2, r3
 800b514:	4b2e      	ldr	r3, [pc, #184]	; (800b5d0 <UART_SetConfig+0x3a0>)
 800b516:	fba3 1302 	umull	r1, r3, r3, r2
 800b51a:	095b      	lsrs	r3, r3, #5
 800b51c:	2164      	movs	r1, #100	; 0x64
 800b51e:	fb01 f303 	mul.w	r3, r1, r3
 800b522:	1ad3      	subs	r3, r2, r3
 800b524:	00db      	lsls	r3, r3, #3
 800b526:	3332      	adds	r3, #50	; 0x32
 800b528:	4a29      	ldr	r2, [pc, #164]	; (800b5d0 <UART_SetConfig+0x3a0>)
 800b52a:	fba2 2303 	umull	r2, r3, r2, r3
 800b52e:	095b      	lsrs	r3, r3, #5
 800b530:	005b      	lsls	r3, r3, #1
 800b532:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b536:	4498      	add	r8, r3
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	461d      	mov	r5, r3
 800b53c:	f04f 0600 	mov.w	r6, #0
 800b540:	46a9      	mov	r9, r5
 800b542:	46b2      	mov	sl, r6
 800b544:	eb19 0309 	adds.w	r3, r9, r9
 800b548:	eb4a 040a 	adc.w	r4, sl, sl
 800b54c:	4699      	mov	r9, r3
 800b54e:	46a2      	mov	sl, r4
 800b550:	eb19 0905 	adds.w	r9, r9, r5
 800b554:	eb4a 0a06 	adc.w	sl, sl, r6
 800b558:	f04f 0100 	mov.w	r1, #0
 800b55c:	f04f 0200 	mov.w	r2, #0
 800b560:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b564:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b568:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b56c:	4689      	mov	r9, r1
 800b56e:	4692      	mov	sl, r2
 800b570:	eb19 0005 	adds.w	r0, r9, r5
 800b574:	eb4a 0106 	adc.w	r1, sl, r6
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	461d      	mov	r5, r3
 800b57e:	f04f 0600 	mov.w	r6, #0
 800b582:	196b      	adds	r3, r5, r5
 800b584:	eb46 0406 	adc.w	r4, r6, r6
 800b588:	461a      	mov	r2, r3
 800b58a:	4623      	mov	r3, r4
 800b58c:	f7f5 fb2c 	bl	8000be8 <__aeabi_uldivmod>
 800b590:	4603      	mov	r3, r0
 800b592:	460c      	mov	r4, r1
 800b594:	461a      	mov	r2, r3
 800b596:	4b0e      	ldr	r3, [pc, #56]	; (800b5d0 <UART_SetConfig+0x3a0>)
 800b598:	fba3 1302 	umull	r1, r3, r3, r2
 800b59c:	095b      	lsrs	r3, r3, #5
 800b59e:	2164      	movs	r1, #100	; 0x64
 800b5a0:	fb01 f303 	mul.w	r3, r1, r3
 800b5a4:	1ad3      	subs	r3, r2, r3
 800b5a6:	00db      	lsls	r3, r3, #3
 800b5a8:	3332      	adds	r3, #50	; 0x32
 800b5aa:	4a09      	ldr	r2, [pc, #36]	; (800b5d0 <UART_SetConfig+0x3a0>)
 800b5ac:	fba2 2303 	umull	r2, r3, r2, r3
 800b5b0:	095b      	lsrs	r3, r3, #5
 800b5b2:	f003 0207 	and.w	r2, r3, #7
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4442      	add	r2, r8
 800b5bc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800b5be:	e1c0      	b.n	800b942 <UART_SetConfig+0x712>
 800b5c0:	40011000 	.word	0x40011000
 800b5c4:	40011400 	.word	0x40011400
 800b5c8:	40011800 	.word	0x40011800
 800b5cc:	40011c00 	.word	0x40011c00
 800b5d0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4adc      	ldr	r2, [pc, #880]	; (800b94c <UART_SetConfig+0x71c>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d00f      	beq.n	800b5fe <UART_SetConfig+0x3ce>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	4adb      	ldr	r2, [pc, #876]	; (800b950 <UART_SetConfig+0x720>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d00a      	beq.n	800b5fe <UART_SetConfig+0x3ce>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4ad9      	ldr	r2, [pc, #868]	; (800b954 <UART_SetConfig+0x724>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d005      	beq.n	800b5fe <UART_SetConfig+0x3ce>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4ad8      	ldr	r2, [pc, #864]	; (800b958 <UART_SetConfig+0x728>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	f040 80d1 	bne.w	800b7a0 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 800b5fe:	f7fd fb6b 	bl	8008cd8 <HAL_RCC_GetPCLK2Freq>
 800b602:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	469a      	mov	sl, r3
 800b608:	f04f 0b00 	mov.w	fp, #0
 800b60c:	46d0      	mov	r8, sl
 800b60e:	46d9      	mov	r9, fp
 800b610:	eb18 0308 	adds.w	r3, r8, r8
 800b614:	eb49 0409 	adc.w	r4, r9, r9
 800b618:	4698      	mov	r8, r3
 800b61a:	46a1      	mov	r9, r4
 800b61c:	eb18 080a 	adds.w	r8, r8, sl
 800b620:	eb49 090b 	adc.w	r9, r9, fp
 800b624:	f04f 0100 	mov.w	r1, #0
 800b628:	f04f 0200 	mov.w	r2, #0
 800b62c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b630:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b634:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b638:	4688      	mov	r8, r1
 800b63a:	4691      	mov	r9, r2
 800b63c:	eb1a 0508 	adds.w	r5, sl, r8
 800b640:	eb4b 0609 	adc.w	r6, fp, r9
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	4619      	mov	r1, r3
 800b64a:	f04f 0200 	mov.w	r2, #0
 800b64e:	f04f 0300 	mov.w	r3, #0
 800b652:	f04f 0400 	mov.w	r4, #0
 800b656:	0094      	lsls	r4, r2, #2
 800b658:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b65c:	008b      	lsls	r3, r1, #2
 800b65e:	461a      	mov	r2, r3
 800b660:	4623      	mov	r3, r4
 800b662:	4628      	mov	r0, r5
 800b664:	4631      	mov	r1, r6
 800b666:	f7f5 fabf 	bl	8000be8 <__aeabi_uldivmod>
 800b66a:	4603      	mov	r3, r0
 800b66c:	460c      	mov	r4, r1
 800b66e:	461a      	mov	r2, r3
 800b670:	4bba      	ldr	r3, [pc, #744]	; (800b95c <UART_SetConfig+0x72c>)
 800b672:	fba3 2302 	umull	r2, r3, r3, r2
 800b676:	095b      	lsrs	r3, r3, #5
 800b678:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	469b      	mov	fp, r3
 800b680:	f04f 0c00 	mov.w	ip, #0
 800b684:	46d9      	mov	r9, fp
 800b686:	46e2      	mov	sl, ip
 800b688:	eb19 0309 	adds.w	r3, r9, r9
 800b68c:	eb4a 040a 	adc.w	r4, sl, sl
 800b690:	4699      	mov	r9, r3
 800b692:	46a2      	mov	sl, r4
 800b694:	eb19 090b 	adds.w	r9, r9, fp
 800b698:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b69c:	f04f 0100 	mov.w	r1, #0
 800b6a0:	f04f 0200 	mov.w	r2, #0
 800b6a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b6a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b6ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b6b0:	4689      	mov	r9, r1
 800b6b2:	4692      	mov	sl, r2
 800b6b4:	eb1b 0509 	adds.w	r5, fp, r9
 800b6b8:	eb4c 060a 	adc.w	r6, ip, sl
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	f04f 0200 	mov.w	r2, #0
 800b6c6:	f04f 0300 	mov.w	r3, #0
 800b6ca:	f04f 0400 	mov.w	r4, #0
 800b6ce:	0094      	lsls	r4, r2, #2
 800b6d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b6d4:	008b      	lsls	r3, r1, #2
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	4623      	mov	r3, r4
 800b6da:	4628      	mov	r0, r5
 800b6dc:	4631      	mov	r1, r6
 800b6de:	f7f5 fa83 	bl	8000be8 <__aeabi_uldivmod>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	460c      	mov	r4, r1
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	4b9c      	ldr	r3, [pc, #624]	; (800b95c <UART_SetConfig+0x72c>)
 800b6ea:	fba3 1302 	umull	r1, r3, r3, r2
 800b6ee:	095b      	lsrs	r3, r3, #5
 800b6f0:	2164      	movs	r1, #100	; 0x64
 800b6f2:	fb01 f303 	mul.w	r3, r1, r3
 800b6f6:	1ad3      	subs	r3, r2, r3
 800b6f8:	011b      	lsls	r3, r3, #4
 800b6fa:	3332      	adds	r3, #50	; 0x32
 800b6fc:	4a97      	ldr	r2, [pc, #604]	; (800b95c <UART_SetConfig+0x72c>)
 800b6fe:	fba2 2303 	umull	r2, r3, r2, r3
 800b702:	095b      	lsrs	r3, r3, #5
 800b704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b708:	4498      	add	r8, r3
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	469b      	mov	fp, r3
 800b70e:	f04f 0c00 	mov.w	ip, #0
 800b712:	46d9      	mov	r9, fp
 800b714:	46e2      	mov	sl, ip
 800b716:	eb19 0309 	adds.w	r3, r9, r9
 800b71a:	eb4a 040a 	adc.w	r4, sl, sl
 800b71e:	4699      	mov	r9, r3
 800b720:	46a2      	mov	sl, r4
 800b722:	eb19 090b 	adds.w	r9, r9, fp
 800b726:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b72a:	f04f 0100 	mov.w	r1, #0
 800b72e:	f04f 0200 	mov.w	r2, #0
 800b732:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b736:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b73a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b73e:	4689      	mov	r9, r1
 800b740:	4692      	mov	sl, r2
 800b742:	eb1b 0509 	adds.w	r5, fp, r9
 800b746:	eb4c 060a 	adc.w	r6, ip, sl
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	4619      	mov	r1, r3
 800b750:	f04f 0200 	mov.w	r2, #0
 800b754:	f04f 0300 	mov.w	r3, #0
 800b758:	f04f 0400 	mov.w	r4, #0
 800b75c:	0094      	lsls	r4, r2, #2
 800b75e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b762:	008b      	lsls	r3, r1, #2
 800b764:	461a      	mov	r2, r3
 800b766:	4623      	mov	r3, r4
 800b768:	4628      	mov	r0, r5
 800b76a:	4631      	mov	r1, r6
 800b76c:	f7f5 fa3c 	bl	8000be8 <__aeabi_uldivmod>
 800b770:	4603      	mov	r3, r0
 800b772:	460c      	mov	r4, r1
 800b774:	461a      	mov	r2, r3
 800b776:	4b79      	ldr	r3, [pc, #484]	; (800b95c <UART_SetConfig+0x72c>)
 800b778:	fba3 1302 	umull	r1, r3, r3, r2
 800b77c:	095b      	lsrs	r3, r3, #5
 800b77e:	2164      	movs	r1, #100	; 0x64
 800b780:	fb01 f303 	mul.w	r3, r1, r3
 800b784:	1ad3      	subs	r3, r2, r3
 800b786:	011b      	lsls	r3, r3, #4
 800b788:	3332      	adds	r3, #50	; 0x32
 800b78a:	4a74      	ldr	r2, [pc, #464]	; (800b95c <UART_SetConfig+0x72c>)
 800b78c:	fba2 2303 	umull	r2, r3, r2, r3
 800b790:	095b      	lsrs	r3, r3, #5
 800b792:	f003 020f 	and.w	r2, r3, #15
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4442      	add	r2, r8
 800b79c:	609a      	str	r2, [r3, #8]
 800b79e:	e0d0      	b.n	800b942 <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 800b7a0:	f7fd fa86 	bl	8008cb0 <HAL_RCC_GetPCLK1Freq>
 800b7a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	469a      	mov	sl, r3
 800b7aa:	f04f 0b00 	mov.w	fp, #0
 800b7ae:	46d0      	mov	r8, sl
 800b7b0:	46d9      	mov	r9, fp
 800b7b2:	eb18 0308 	adds.w	r3, r8, r8
 800b7b6:	eb49 0409 	adc.w	r4, r9, r9
 800b7ba:	4698      	mov	r8, r3
 800b7bc:	46a1      	mov	r9, r4
 800b7be:	eb18 080a 	adds.w	r8, r8, sl
 800b7c2:	eb49 090b 	adc.w	r9, r9, fp
 800b7c6:	f04f 0100 	mov.w	r1, #0
 800b7ca:	f04f 0200 	mov.w	r2, #0
 800b7ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b7d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b7d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b7da:	4688      	mov	r8, r1
 800b7dc:	4691      	mov	r9, r2
 800b7de:	eb1a 0508 	adds.w	r5, sl, r8
 800b7e2:	eb4b 0609 	adc.w	r6, fp, r9
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	f04f 0200 	mov.w	r2, #0
 800b7f0:	f04f 0300 	mov.w	r3, #0
 800b7f4:	f04f 0400 	mov.w	r4, #0
 800b7f8:	0094      	lsls	r4, r2, #2
 800b7fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b7fe:	008b      	lsls	r3, r1, #2
 800b800:	461a      	mov	r2, r3
 800b802:	4623      	mov	r3, r4
 800b804:	4628      	mov	r0, r5
 800b806:	4631      	mov	r1, r6
 800b808:	f7f5 f9ee 	bl	8000be8 <__aeabi_uldivmod>
 800b80c:	4603      	mov	r3, r0
 800b80e:	460c      	mov	r4, r1
 800b810:	461a      	mov	r2, r3
 800b812:	4b52      	ldr	r3, [pc, #328]	; (800b95c <UART_SetConfig+0x72c>)
 800b814:	fba3 2302 	umull	r2, r3, r3, r2
 800b818:	095b      	lsrs	r3, r3, #5
 800b81a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	469b      	mov	fp, r3
 800b822:	f04f 0c00 	mov.w	ip, #0
 800b826:	46d9      	mov	r9, fp
 800b828:	46e2      	mov	sl, ip
 800b82a:	eb19 0309 	adds.w	r3, r9, r9
 800b82e:	eb4a 040a 	adc.w	r4, sl, sl
 800b832:	4699      	mov	r9, r3
 800b834:	46a2      	mov	sl, r4
 800b836:	eb19 090b 	adds.w	r9, r9, fp
 800b83a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b83e:	f04f 0100 	mov.w	r1, #0
 800b842:	f04f 0200 	mov.w	r2, #0
 800b846:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b84a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b84e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b852:	4689      	mov	r9, r1
 800b854:	4692      	mov	sl, r2
 800b856:	eb1b 0509 	adds.w	r5, fp, r9
 800b85a:	eb4c 060a 	adc.w	r6, ip, sl
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	4619      	mov	r1, r3
 800b864:	f04f 0200 	mov.w	r2, #0
 800b868:	f04f 0300 	mov.w	r3, #0
 800b86c:	f04f 0400 	mov.w	r4, #0
 800b870:	0094      	lsls	r4, r2, #2
 800b872:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b876:	008b      	lsls	r3, r1, #2
 800b878:	461a      	mov	r2, r3
 800b87a:	4623      	mov	r3, r4
 800b87c:	4628      	mov	r0, r5
 800b87e:	4631      	mov	r1, r6
 800b880:	f7f5 f9b2 	bl	8000be8 <__aeabi_uldivmod>
 800b884:	4603      	mov	r3, r0
 800b886:	460c      	mov	r4, r1
 800b888:	461a      	mov	r2, r3
 800b88a:	4b34      	ldr	r3, [pc, #208]	; (800b95c <UART_SetConfig+0x72c>)
 800b88c:	fba3 1302 	umull	r1, r3, r3, r2
 800b890:	095b      	lsrs	r3, r3, #5
 800b892:	2164      	movs	r1, #100	; 0x64
 800b894:	fb01 f303 	mul.w	r3, r1, r3
 800b898:	1ad3      	subs	r3, r2, r3
 800b89a:	011b      	lsls	r3, r3, #4
 800b89c:	3332      	adds	r3, #50	; 0x32
 800b89e:	4a2f      	ldr	r2, [pc, #188]	; (800b95c <UART_SetConfig+0x72c>)
 800b8a0:	fba2 2303 	umull	r2, r3, r2, r3
 800b8a4:	095b      	lsrs	r3, r3, #5
 800b8a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b8aa:	4498      	add	r8, r3
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	469b      	mov	fp, r3
 800b8b0:	f04f 0c00 	mov.w	ip, #0
 800b8b4:	46d9      	mov	r9, fp
 800b8b6:	46e2      	mov	sl, ip
 800b8b8:	eb19 0309 	adds.w	r3, r9, r9
 800b8bc:	eb4a 040a 	adc.w	r4, sl, sl
 800b8c0:	4699      	mov	r9, r3
 800b8c2:	46a2      	mov	sl, r4
 800b8c4:	eb19 090b 	adds.w	r9, r9, fp
 800b8c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b8cc:	f04f 0100 	mov.w	r1, #0
 800b8d0:	f04f 0200 	mov.w	r2, #0
 800b8d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b8d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b8dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b8e0:	4689      	mov	r9, r1
 800b8e2:	4692      	mov	sl, r2
 800b8e4:	eb1b 0509 	adds.w	r5, fp, r9
 800b8e8:	eb4c 060a 	adc.w	r6, ip, sl
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	f04f 0200 	mov.w	r2, #0
 800b8f6:	f04f 0300 	mov.w	r3, #0
 800b8fa:	f04f 0400 	mov.w	r4, #0
 800b8fe:	0094      	lsls	r4, r2, #2
 800b900:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b904:	008b      	lsls	r3, r1, #2
 800b906:	461a      	mov	r2, r3
 800b908:	4623      	mov	r3, r4
 800b90a:	4628      	mov	r0, r5
 800b90c:	4631      	mov	r1, r6
 800b90e:	f7f5 f96b 	bl	8000be8 <__aeabi_uldivmod>
 800b912:	4603      	mov	r3, r0
 800b914:	460c      	mov	r4, r1
 800b916:	461a      	mov	r2, r3
 800b918:	4b10      	ldr	r3, [pc, #64]	; (800b95c <UART_SetConfig+0x72c>)
 800b91a:	fba3 1302 	umull	r1, r3, r3, r2
 800b91e:	095b      	lsrs	r3, r3, #5
 800b920:	2164      	movs	r1, #100	; 0x64
 800b922:	fb01 f303 	mul.w	r3, r1, r3
 800b926:	1ad3      	subs	r3, r2, r3
 800b928:	011b      	lsls	r3, r3, #4
 800b92a:	3332      	adds	r3, #50	; 0x32
 800b92c:	4a0b      	ldr	r2, [pc, #44]	; (800b95c <UART_SetConfig+0x72c>)
 800b92e:	fba2 2303 	umull	r2, r3, r2, r3
 800b932:	095b      	lsrs	r3, r3, #5
 800b934:	f003 020f 	and.w	r2, r3, #15
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	4442      	add	r2, r8
 800b93e:	609a      	str	r2, [r3, #8]
}
 800b940:	e7ff      	b.n	800b942 <UART_SetConfig+0x712>
 800b942:	bf00      	nop
 800b944:	3714      	adds	r7, #20
 800b946:	46bd      	mov	sp, r7
 800b948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b94c:	40011000 	.word	0x40011000
 800b950:	40011400 	.word	0x40011400
 800b954:	40011800 	.word	0x40011800
 800b958:	40011c00 	.word	0x40011c00
 800b95c:	51eb851f 	.word	0x51eb851f

0800b960 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800b960:	b480      	push	{r7}
 800b962:	b085      	sub	sp, #20
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800b96a:	2300      	movs	r3, #0
 800b96c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b978:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 800b97a:	68fa      	ldr	r2, [r7, #12]
 800b97c:	4b2f      	ldr	r3, [pc, #188]	; (800ba3c <FSMC_NORSRAM_Init+0xdc>)
 800b97e:	4013      	ands	r3, r2
 800b980:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800b98a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800b990:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800b996:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800b99c:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 800b9a2:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800b9a8:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800b9ae:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800b9b4:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800b9ba:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 800b9c0:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 800b9c6:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 800b9cc:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 800b9d2:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800b9d4:	68fa      	ldr	r2, [r7, #12]
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	689b      	ldr	r3, [r3, #8]
 800b9de:	2b08      	cmp	r3, #8
 800b9e0:	d103      	bne.n	800b9ea <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9e8:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	68f9      	ldr	r1, [r7, #12]
 800b9f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9fe:	d10a      	bne.n	800ba16 <FSMC_NORSRAM_Init+0xb6>
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d006      	beq.n	800ba16 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba10:	431a      	orrs	r2, r3
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d006      	beq.n	800ba2c <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681a      	ldr	r2, [r3, #0]
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba26:	431a      	orrs	r2, r3
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800ba2c:	2300      	movs	r3, #0
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3714      	adds	r7, #20
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr
 800ba3a:	bf00      	nop
 800ba3c:	ffc00480 	.word	0xffc00480

0800ba40 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b087      	sub	sp, #28
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	1c5a      	adds	r2, r3, #1
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba5a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800ba62:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ba6e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800ba76:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	68db      	ldr	r3, [r3, #12]
 800ba7c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800ba7e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	691b      	ldr	r3, [r3, #16]
 800ba84:	3b01      	subs	r3, #1
 800ba86:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ba88:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	695b      	ldr	r3, [r3, #20]
 800ba8e:	3b02      	subs	r3, #2
 800ba90:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800ba92:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	697a      	ldr	r2, [r7, #20]
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	1c5a      	adds	r2, r3, #1
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	6979      	ldr	r1, [r7, #20]
 800baa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bab4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bab8:	d10e      	bne.n	800bad8 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bac2:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	691b      	ldr	r3, [r3, #16]
 800bac8:	3b01      	subs	r3, #1
 800baca:	051b      	lsls	r3, r3, #20
 800bacc:	697a      	ldr	r2, [r7, #20]
 800bace:	4313      	orrs	r3, r2
 800bad0:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	697a      	ldr	r2, [r7, #20]
 800bad6:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800bad8:	2300      	movs	r3, #0
}
 800bada:	4618      	mov	r0, r3
 800badc:	371c      	adds	r7, #28
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr
	...

0800bae8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800bae8:	b480      	push	{r7}
 800baea:	b087      	sub	sp, #28
 800baec:	af00      	add	r7, sp, #0
 800baee:	60f8      	str	r0, [r7, #12]
 800baf0:	60b9      	str	r1, [r7, #8]
 800baf2:	607a      	str	r2, [r7, #4]
 800baf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800baf6:	2300      	movs	r3, #0
 800baf8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb00:	d122      	bne.n	800bb48 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb0a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800bb0c:	697a      	ldr	r2, [r7, #20]
 800bb0e:	4b15      	ldr	r3, [pc, #84]	; (800bb64 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800bb10:	4013      	ands	r3, r2
 800bb12:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bb1e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	689b      	ldr	r3, [r3, #8]
 800bb24:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800bb26:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	68db      	ldr	r3, [r3, #12]
 800bb2c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800bb2e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800bb34:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bb36:	697a      	ldr	r2, [r7, #20]
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	687a      	ldr	r2, [r7, #4]
 800bb40:	6979      	ldr	r1, [r7, #20]
 800bb42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bb46:	e005      	b.n	800bb54 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800bb50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800bb54:	2300      	movs	r3, #0
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	371c      	adds	r7, #28
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr
 800bb62:	bf00      	nop
 800bb64:	cff00000 	.word	0xcff00000

0800bb68 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800bb68:	b084      	sub	sp, #16
 800bb6a:	b480      	push	{r7}
 800bb6c:	b085      	sub	sp, #20
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
 800bb72:	f107 001c 	add.w	r0, r7, #28
 800bb76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800bb7e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800bb80:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bb82:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800bb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800bb86:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800bb8a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800bb8e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bb90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800bb92:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bb94:	68fa      	ldr	r2, [r7, #12]
 800bb96:	4313      	orrs	r3, r2
 800bb98:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800bba2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bba6:	68fa      	ldr	r2, [r7, #12]
 800bba8:	431a      	orrs	r2, r3
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bbae:	2300      	movs	r3, #0
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3714      	adds	r7, #20
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	b004      	add	sp, #16
 800bbbc:	4770      	bx	lr

0800bbbe <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800bbbe:	b480      	push	{r7}
 800bbc0:	b083      	sub	sp, #12
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	370c      	adds	r7, #12
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd6:	4770      	bx	lr

0800bbd8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800bbd8:	b480      	push	{r7}
 800bbda:	b083      	sub	sp, #12
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bbec:	2300      	movs	r3, #0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	370c      	adds	r7, #12
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf8:	4770      	bx	lr

0800bbfa <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800bbfa:	b580      	push	{r7, lr}
 800bbfc:	b082      	sub	sp, #8
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2203      	movs	r2, #3
 800bc06:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800bc08:	2002      	movs	r0, #2
 800bc0a:	f7f9 f8ef 	bl	8004dec <HAL_Delay>
  
  return HAL_OK;
 800bc0e:	2300      	movs	r3, #0
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3708      	adds	r7, #8
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b083      	sub	sp, #12
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f003 0303 	and.w	r3, r3, #3
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	370c      	adds	r7, #12
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr

0800bc34 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b085      	sub	sp, #20
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	681a      	ldr	r2, [r3, #0]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bc52:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bc58:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800bc5e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bc60:	68fa      	ldr	r2, [r7, #12]
 800bc62:	4313      	orrs	r3, r2
 800bc64:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	68db      	ldr	r3, [r3, #12]
 800bc6a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800bc6e:	f023 030f 	bic.w	r3, r3, #15
 800bc72:	68fa      	ldr	r2, [r7, #12]
 800bc74:	431a      	orrs	r2, r3
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800bc7a:	2300      	movs	r3, #0
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3714      	adds	r7, #20
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr

0800bc88 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b083      	sub	sp, #12
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	691b      	ldr	r3, [r3, #16]
 800bc94:	b2db      	uxtb	r3, r3
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	370c      	adds	r7, #12
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr

0800bca2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800bca2:	b480      	push	{r7}
 800bca4:	b085      	sub	sp, #20
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	6078      	str	r0, [r7, #4]
 800bcaa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	3314      	adds	r3, #20
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	4413      	add	r3, r2
 800bcb6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
}  
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3714      	adds	r7, #20
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr

0800bcc8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b085      	sub	sp, #20
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	681a      	ldr	r2, [r3, #0]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	685a      	ldr	r2, [r3, #4]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bcee:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800bcf4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800bcfa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bcfc:	68fa      	ldr	r2, [r7, #12]
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd06:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	431a      	orrs	r2, r3
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bd12:	2300      	movs	r3, #0

}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3714      	adds	r7, #20
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr

0800bd20 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b088      	sub	sp, #32
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bd2e:	2310      	movs	r3, #16
 800bd30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bd32:	2340      	movs	r3, #64	; 0x40
 800bd34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bd36:	2300      	movs	r3, #0
 800bd38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bd3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bd40:	f107 0308 	add.w	r3, r7, #8
 800bd44:	4619      	mov	r1, r3
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f7ff ff74 	bl	800bc34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800bd4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd50:	2110      	movs	r1, #16
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f000 fa40 	bl	800c1d8 <SDMMC_GetCmdResp1>
 800bd58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd5a:	69fb      	ldr	r3, [r7, #28]
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3720      	adds	r7, #32
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b088      	sub	sp, #32
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bd72:	2311      	movs	r3, #17
 800bd74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bd76:	2340      	movs	r3, #64	; 0x40
 800bd78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bd7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bd84:	f107 0308 	add.w	r3, r7, #8
 800bd88:	4619      	mov	r1, r3
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f7ff ff52 	bl	800bc34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800bd90:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd94:	2111      	movs	r1, #17
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 fa1e 	bl	800c1d8 <SDMMC_GetCmdResp1>
 800bd9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd9e:	69fb      	ldr	r3, [r7, #28]
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3720      	adds	r7, #32
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b088      	sub	sp, #32
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bdb6:	2312      	movs	r3, #18
 800bdb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bdba:	2340      	movs	r3, #64	; 0x40
 800bdbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bdc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdc6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bdc8:	f107 0308 	add.w	r3, r7, #8
 800bdcc:	4619      	mov	r1, r3
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f7ff ff30 	bl	800bc34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800bdd4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdd8:	2112      	movs	r1, #18
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 f9fc 	bl	800c1d8 <SDMMC_GetCmdResp1>
 800bde0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bde2:	69fb      	ldr	r3, [r7, #28]
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3720      	adds	r7, #32
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b088      	sub	sp, #32
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bdfa:	2318      	movs	r3, #24
 800bdfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bdfe:	2340      	movs	r3, #64	; 0x40
 800be00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800be02:	2300      	movs	r3, #0
 800be04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800be06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800be0c:	f107 0308 	add.w	r3, r7, #8
 800be10:	4619      	mov	r1, r3
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f7ff ff0e 	bl	800bc34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800be18:	f241 3288 	movw	r2, #5000	; 0x1388
 800be1c:	2118      	movs	r1, #24
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 f9da 	bl	800c1d8 <SDMMC_GetCmdResp1>
 800be24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be26:	69fb      	ldr	r3, [r7, #28]
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3720      	adds	r7, #32
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}

0800be30 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b088      	sub	sp, #32
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800be3e:	2319      	movs	r3, #25
 800be40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800be42:	2340      	movs	r3, #64	; 0x40
 800be44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800be46:	2300      	movs	r3, #0
 800be48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800be4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800be50:	f107 0308 	add.w	r3, r7, #8
 800be54:	4619      	mov	r1, r3
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f7ff feec 	bl	800bc34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800be5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800be60:	2119      	movs	r1, #25
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 f9b8 	bl	800c1d8 <SDMMC_GetCmdResp1>
 800be68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be6a:	69fb      	ldr	r3, [r7, #28]
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3720      	adds	r7, #32
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b088      	sub	sp, #32
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800be7c:	2300      	movs	r3, #0
 800be7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800be80:	230c      	movs	r3, #12
 800be82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800be84:	2340      	movs	r3, #64	; 0x40
 800be86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800be88:	2300      	movs	r3, #0
 800be8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800be8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be90:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800be92:	f107 0308 	add.w	r3, r7, #8
 800be96:	4619      	mov	r1, r3
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f7ff fecb 	bl	800bc34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800be9e:	4a05      	ldr	r2, [pc, #20]	; (800beb4 <SDMMC_CmdStopTransfer+0x40>)
 800bea0:	210c      	movs	r1, #12
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 f998 	bl	800c1d8 <SDMMC_GetCmdResp1>
 800bea8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800beaa:	69fb      	ldr	r3, [r7, #28]
}
 800beac:	4618      	mov	r0, r3
 800beae:	3720      	adds	r7, #32
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	05f5e100 	.word	0x05f5e100

0800beb8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b08a      	sub	sp, #40	; 0x28
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	60f8      	str	r0, [r7, #12]
 800bec0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bec8:	2307      	movs	r3, #7
 800beca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800becc:	2340      	movs	r3, #64	; 0x40
 800bece:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bed0:	2300      	movs	r3, #0
 800bed2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bed8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800beda:	f107 0310 	add.w	r3, r7, #16
 800bede:	4619      	mov	r1, r3
 800bee0:	68f8      	ldr	r0, [r7, #12]
 800bee2:	f7ff fea7 	bl	800bc34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800bee6:	f241 3288 	movw	r2, #5000	; 0x1388
 800beea:	2107      	movs	r1, #7
 800beec:	68f8      	ldr	r0, [r7, #12]
 800beee:	f000 f973 	bl	800c1d8 <SDMMC_GetCmdResp1>
 800bef2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800bef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3728      	adds	r7, #40	; 0x28
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}

0800befe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800befe:	b580      	push	{r7, lr}
 800bf00:	b088      	sub	sp, #32
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800bf06:	2300      	movs	r3, #0
 800bf08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bf12:	2300      	movs	r3, #0
 800bf14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bf16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bf1c:	f107 0308 	add.w	r3, r7, #8
 800bf20:	4619      	mov	r1, r3
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f7ff fe86 	bl	800bc34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f000 f92d 	bl	800c188 <SDMMC_GetCmdError>
 800bf2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf30:	69fb      	ldr	r3, [r7, #28]
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3720      	adds	r7, #32
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}

0800bf3a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800bf3a:	b580      	push	{r7, lr}
 800bf3c:	b088      	sub	sp, #32
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bf42:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bf46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bf48:	2308      	movs	r3, #8
 800bf4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bf4c:	2340      	movs	r3, #64	; 0x40
 800bf4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bf50:	2300      	movs	r3, #0
 800bf52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bf54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bf5a:	f107 0308 	add.w	r3, r7, #8
 800bf5e:	4619      	mov	r1, r3
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f7ff fe67 	bl	800bc34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 fb16 	bl	800c598 <SDMMC_GetCmdResp7>
 800bf6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf6e:	69fb      	ldr	r3, [r7, #28]
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3720      	adds	r7, #32
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b088      	sub	sp, #32
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bf86:	2337      	movs	r3, #55	; 0x37
 800bf88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bf8a:	2340      	movs	r3, #64	; 0x40
 800bf8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bf92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bf98:	f107 0308 	add.w	r3, r7, #8
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f7ff fe48 	bl	800bc34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800bfa4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfa8:	2137      	movs	r1, #55	; 0x37
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 f914 	bl	800c1d8 <SDMMC_GetCmdResp1>
 800bfb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfb2:	69fb      	ldr	r3, [r7, #28]
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3720      	adds	r7, #32
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b088      	sub	sp, #32
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bfcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bfd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bfd2:	2329      	movs	r3, #41	; 0x29
 800bfd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bfd6:	2340      	movs	r3, #64	; 0x40
 800bfd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bfde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfe2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bfe4:	f107 0308 	add.w	r3, r7, #8
 800bfe8:	4619      	mov	r1, r3
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f7ff fe22 	bl	800bc34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f000 fa23 	bl	800c43c <SDMMC_GetCmdResp3>
 800bff6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bff8:	69fb      	ldr	r3, [r7, #28]
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3720      	adds	r7, #32
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800c002:	b580      	push	{r7, lr}
 800c004:	b088      	sub	sp, #32
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
 800c00a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c010:	2306      	movs	r3, #6
 800c012:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c014:	2340      	movs	r3, #64	; 0x40
 800c016:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c018:	2300      	movs	r3, #0
 800c01a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c01c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c020:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c022:	f107 0308 	add.w	r3, r7, #8
 800c026:	4619      	mov	r1, r3
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f7ff fe03 	bl	800bc34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800c02e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c032:	2106      	movs	r1, #6
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 f8cf 	bl	800c1d8 <SDMMC_GetCmdResp1>
 800c03a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c03c:	69fb      	ldr	r3, [r7, #28]
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3720      	adds	r7, #32
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}

0800c046 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800c046:	b580      	push	{r7, lr}
 800c048:	b088      	sub	sp, #32
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c04e:	2300      	movs	r3, #0
 800c050:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c052:	2333      	movs	r3, #51	; 0x33
 800c054:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c056:	2340      	movs	r3, #64	; 0x40
 800c058:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c05a:	2300      	movs	r3, #0
 800c05c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c05e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c062:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c064:	f107 0308 	add.w	r3, r7, #8
 800c068:	4619      	mov	r1, r3
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f7ff fde2 	bl	800bc34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800c070:	f241 3288 	movw	r2, #5000	; 0x1388
 800c074:	2133      	movs	r1, #51	; 0x33
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 f8ae 	bl	800c1d8 <SDMMC_GetCmdResp1>
 800c07c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c07e:	69fb      	ldr	r3, [r7, #28]
}
 800c080:	4618      	mov	r0, r3
 800c082:	3720      	adds	r7, #32
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}

0800c088 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b088      	sub	sp, #32
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c090:	2300      	movs	r3, #0
 800c092:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c094:	2302      	movs	r3, #2
 800c096:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c098:	23c0      	movs	r3, #192	; 0xc0
 800c09a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c09c:	2300      	movs	r3, #0
 800c09e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c0a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c0a6:	f107 0308 	add.w	r3, r7, #8
 800c0aa:	4619      	mov	r1, r3
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f7ff fdc1 	bl	800bc34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 f97c 	bl	800c3b0 <SDMMC_GetCmdResp2>
 800c0b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0ba:	69fb      	ldr	r3, [r7, #28]
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3720      	adds	r7, #32
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b088      	sub	sp, #32
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c0d2:	2309      	movs	r3, #9
 800c0d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c0d6:	23c0      	movs	r3, #192	; 0xc0
 800c0d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c0de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c0e4:	f107 0308 	add.w	r3, r7, #8
 800c0e8:	4619      	mov	r1, r3
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f7ff fda2 	bl	800bc34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 f95d 	bl	800c3b0 <SDMMC_GetCmdResp2>
 800c0f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0f8:	69fb      	ldr	r3, [r7, #28]
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3720      	adds	r7, #32
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}

0800c102 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800c102:	b580      	push	{r7, lr}
 800c104:	b088      	sub	sp, #32
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
 800c10a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c10c:	2300      	movs	r3, #0
 800c10e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c110:	2303      	movs	r3, #3
 800c112:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c114:	2340      	movs	r3, #64	; 0x40
 800c116:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c118:	2300      	movs	r3, #0
 800c11a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c11c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c120:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c122:	f107 0308 	add.w	r3, r7, #8
 800c126:	4619      	mov	r1, r3
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f7ff fd83 	bl	800bc34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c12e:	683a      	ldr	r2, [r7, #0]
 800c130:	2103      	movs	r1, #3
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 f9bc 	bl	800c4b0 <SDMMC_GetCmdResp6>
 800c138:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c13a:	69fb      	ldr	r3, [r7, #28]
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3720      	adds	r7, #32
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b088      	sub	sp, #32
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c152:	230d      	movs	r3, #13
 800c154:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c156:	2340      	movs	r3, #64	; 0x40
 800c158:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c15a:	2300      	movs	r3, #0
 800c15c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c15e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c162:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c164:	f107 0308 	add.w	r3, r7, #8
 800c168:	4619      	mov	r1, r3
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f7ff fd62 	bl	800bc34 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800c170:	f241 3288 	movw	r2, #5000	; 0x1388
 800c174:	210d      	movs	r1, #13
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f000 f82e 	bl	800c1d8 <SDMMC_GetCmdResp1>
 800c17c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c17e:	69fb      	ldr	r3, [r7, #28]
}
 800c180:	4618      	mov	r0, r3
 800c182:	3720      	adds	r7, #32
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800c188:	b490      	push	{r4, r7}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c190:	4b0f      	ldr	r3, [pc, #60]	; (800c1d0 <SDMMC_GetCmdError+0x48>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4a0f      	ldr	r2, [pc, #60]	; (800c1d4 <SDMMC_GetCmdError+0x4c>)
 800c196:	fba2 2303 	umull	r2, r3, r2, r3
 800c19a:	0a5b      	lsrs	r3, r3, #9
 800c19c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1a0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c1a4:	4623      	mov	r3, r4
 800c1a6:	1e5c      	subs	r4, r3, #1
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d102      	bne.n	800c1b2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c1ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c1b0:	e009      	b.n	800c1c6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d0f2      	beq.n	800c1a4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	22c5      	movs	r2, #197	; 0xc5
 800c1c2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c1c4:	2300      	movs	r3, #0
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3708      	adds	r7, #8
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bc90      	pop	{r4, r7}
 800c1ce:	4770      	bx	lr
 800c1d0:	2000003c 	.word	0x2000003c
 800c1d4:	10624dd3 	.word	0x10624dd3

0800c1d8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c1d8:	b590      	push	{r4, r7, lr}
 800c1da:	b087      	sub	sp, #28
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	60f8      	str	r0, [r7, #12]
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	607a      	str	r2, [r7, #4]
 800c1e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c1e6:	4b6f      	ldr	r3, [pc, #444]	; (800c3a4 <SDMMC_GetCmdResp1+0x1cc>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4a6f      	ldr	r2, [pc, #444]	; (800c3a8 <SDMMC_GetCmdResp1+0x1d0>)
 800c1ec:	fba2 2303 	umull	r2, r3, r2, r3
 800c1f0:	0a5b      	lsrs	r3, r3, #9
 800c1f2:	687a      	ldr	r2, [r7, #4]
 800c1f4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c1f8:	4623      	mov	r3, r4
 800c1fa:	1e5c      	subs	r4, r3, #1
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d102      	bne.n	800c206 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c200:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c204:	e0c9      	b.n	800c39a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c20a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c212:	2b00      	cmp	r3, #0
 800c214:	d0f0      	beq.n	800c1f8 <SDMMC_GetCmdResp1+0x20>
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d1eb      	bne.n	800c1f8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c224:	f003 0304 	and.w	r3, r3, #4
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d004      	beq.n	800c236 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2204      	movs	r2, #4
 800c230:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c232:	2304      	movs	r3, #4
 800c234:	e0b1      	b.n	800c39a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c23a:	f003 0301 	and.w	r3, r3, #1
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d004      	beq.n	800c24c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	2201      	movs	r2, #1
 800c246:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c248:	2301      	movs	r3, #1
 800c24a:	e0a6      	b.n	800c39a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	22c5      	movs	r2, #197	; 0xc5
 800c250:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c252:	68f8      	ldr	r0, [r7, #12]
 800c254:	f7ff fd18 	bl	800bc88 <SDIO_GetCommandResponse>
 800c258:	4603      	mov	r3, r0
 800c25a:	461a      	mov	r2, r3
 800c25c:	7afb      	ldrb	r3, [r7, #11]
 800c25e:	4293      	cmp	r3, r2
 800c260:	d001      	beq.n	800c266 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c262:	2301      	movs	r3, #1
 800c264:	e099      	b.n	800c39a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c266:	2100      	movs	r1, #0
 800c268:	68f8      	ldr	r0, [r7, #12]
 800c26a:	f7ff fd1a 	bl	800bca2 <SDIO_GetResponse>
 800c26e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c270:	693a      	ldr	r2, [r7, #16]
 800c272:	4b4e      	ldr	r3, [pc, #312]	; (800c3ac <SDMMC_GetCmdResp1+0x1d4>)
 800c274:	4013      	ands	r3, r2
 800c276:	2b00      	cmp	r3, #0
 800c278:	d101      	bne.n	800c27e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800c27a:	2300      	movs	r3, #0
 800c27c:	e08d      	b.n	800c39a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	2b00      	cmp	r3, #0
 800c282:	da02      	bge.n	800c28a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c284:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c288:	e087      	b.n	800c39a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c290:	2b00      	cmp	r3, #0
 800c292:	d001      	beq.n	800c298 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c294:	2340      	movs	r3, #64	; 0x40
 800c296:	e080      	b.n	800c39a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d001      	beq.n	800c2a6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c2a2:	2380      	movs	r3, #128	; 0x80
 800c2a4:	e079      	b.n	800c39a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d002      	beq.n	800c2b6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c2b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c2b4:	e071      	b.n	800c39a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d002      	beq.n	800c2c6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c2c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2c4:	e069      	b.n	800c39a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d002      	beq.n	800c2d6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c2d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2d4:	e061      	b.n	800c39a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d002      	beq.n	800c2e6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c2e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c2e4:	e059      	b.n	800c39a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d002      	beq.n	800c2f6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c2f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c2f4:	e051      	b.n	800c39a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d002      	beq.n	800c306 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c300:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c304:	e049      	b.n	800c39a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d002      	beq.n	800c316 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c310:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c314:	e041      	b.n	800c39a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d002      	beq.n	800c326 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800c320:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c324:	e039      	b.n	800c39a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d002      	beq.n	800c336 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c330:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c334:	e031      	b.n	800c39a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d002      	beq.n	800c346 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c340:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c344:	e029      	b.n	800c39a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d002      	beq.n	800c356 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c350:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c354:	e021      	b.n	800c39a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d002      	beq.n	800c366 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c360:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c364:	e019      	b.n	800c39a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d002      	beq.n	800c376 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c370:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c374:	e011      	b.n	800c39a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d002      	beq.n	800c386 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c380:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c384:	e009      	b.n	800c39a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	f003 0308 	and.w	r3, r3, #8
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d002      	beq.n	800c396 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c390:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c394:	e001      	b.n	800c39a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c396:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	371c      	adds	r7, #28
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd90      	pop	{r4, r7, pc}
 800c3a2:	bf00      	nop
 800c3a4:	2000003c 	.word	0x2000003c
 800c3a8:	10624dd3 	.word	0x10624dd3
 800c3ac:	fdffe008 	.word	0xfdffe008

0800c3b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800c3b0:	b490      	push	{r4, r7}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c3b8:	4b1e      	ldr	r3, [pc, #120]	; (800c434 <SDMMC_GetCmdResp2+0x84>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a1e      	ldr	r2, [pc, #120]	; (800c438 <SDMMC_GetCmdResp2+0x88>)
 800c3be:	fba2 2303 	umull	r2, r3, r2, r3
 800c3c2:	0a5b      	lsrs	r3, r3, #9
 800c3c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3c8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c3cc:	4623      	mov	r3, r4
 800c3ce:	1e5c      	subs	r4, r3, #1
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d102      	bne.n	800c3da <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c3d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c3d8:	e026      	b.n	800c428 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3de:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d0f0      	beq.n	800c3cc <SDMMC_GetCmdResp2+0x1c>
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d1eb      	bne.n	800c3cc <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3f8:	f003 0304 	and.w	r3, r3, #4
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d004      	beq.n	800c40a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2204      	movs	r2, #4
 800c404:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c406:	2304      	movs	r3, #4
 800c408:	e00e      	b.n	800c428 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c40e:	f003 0301 	and.w	r3, r3, #1
 800c412:	2b00      	cmp	r3, #0
 800c414:	d004      	beq.n	800c420 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2201      	movs	r2, #1
 800c41a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c41c:	2301      	movs	r3, #1
 800c41e:	e003      	b.n	800c428 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	22c5      	movs	r2, #197	; 0xc5
 800c424:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c426:	2300      	movs	r3, #0
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3710      	adds	r7, #16
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bc90      	pop	{r4, r7}
 800c430:	4770      	bx	lr
 800c432:	bf00      	nop
 800c434:	2000003c 	.word	0x2000003c
 800c438:	10624dd3 	.word	0x10624dd3

0800c43c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800c43c:	b490      	push	{r4, r7}
 800c43e:	b084      	sub	sp, #16
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c444:	4b18      	ldr	r3, [pc, #96]	; (800c4a8 <SDMMC_GetCmdResp3+0x6c>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	4a18      	ldr	r2, [pc, #96]	; (800c4ac <SDMMC_GetCmdResp3+0x70>)
 800c44a:	fba2 2303 	umull	r2, r3, r2, r3
 800c44e:	0a5b      	lsrs	r3, r3, #9
 800c450:	f241 3288 	movw	r2, #5000	; 0x1388
 800c454:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c458:	4623      	mov	r3, r4
 800c45a:	1e5c      	subs	r4, r3, #1
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d102      	bne.n	800c466 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c460:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c464:	e01b      	b.n	800c49e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c46a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c472:	2b00      	cmp	r3, #0
 800c474:	d0f0      	beq.n	800c458 <SDMMC_GetCmdResp3+0x1c>
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d1eb      	bne.n	800c458 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c484:	f003 0304 	and.w	r3, r3, #4
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d004      	beq.n	800c496 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2204      	movs	r2, #4
 800c490:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c492:	2304      	movs	r3, #4
 800c494:	e003      	b.n	800c49e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	22c5      	movs	r2, #197	; 0xc5
 800c49a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c49c:	2300      	movs	r3, #0
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3710      	adds	r7, #16
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bc90      	pop	{r4, r7}
 800c4a6:	4770      	bx	lr
 800c4a8:	2000003c 	.word	0x2000003c
 800c4ac:	10624dd3 	.word	0x10624dd3

0800c4b0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c4b0:	b590      	push	{r4, r7, lr}
 800c4b2:	b087      	sub	sp, #28
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	60f8      	str	r0, [r7, #12]
 800c4b8:	460b      	mov	r3, r1
 800c4ba:	607a      	str	r2, [r7, #4]
 800c4bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c4be:	4b34      	ldr	r3, [pc, #208]	; (800c590 <SDMMC_GetCmdResp6+0xe0>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	4a34      	ldr	r2, [pc, #208]	; (800c594 <SDMMC_GetCmdResp6+0xe4>)
 800c4c4:	fba2 2303 	umull	r2, r3, r2, r3
 800c4c8:	0a5b      	lsrs	r3, r3, #9
 800c4ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4ce:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c4d2:	4623      	mov	r3, r4
 800c4d4:	1e5c      	subs	r4, r3, #1
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d102      	bne.n	800c4e0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c4da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c4de:	e052      	b.n	800c586 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4e4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d0f0      	beq.n	800c4d2 <SDMMC_GetCmdResp6+0x22>
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d1eb      	bne.n	800c4d2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4fe:	f003 0304 	and.w	r3, r3, #4
 800c502:	2b00      	cmp	r3, #0
 800c504:	d004      	beq.n	800c510 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2204      	movs	r2, #4
 800c50a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c50c:	2304      	movs	r3, #4
 800c50e:	e03a      	b.n	800c586 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c514:	f003 0301 	and.w	r3, r3, #1
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d004      	beq.n	800c526 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2201      	movs	r2, #1
 800c520:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c522:	2301      	movs	r3, #1
 800c524:	e02f      	b.n	800c586 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c526:	68f8      	ldr	r0, [r7, #12]
 800c528:	f7ff fbae 	bl	800bc88 <SDIO_GetCommandResponse>
 800c52c:	4603      	mov	r3, r0
 800c52e:	461a      	mov	r2, r3
 800c530:	7afb      	ldrb	r3, [r7, #11]
 800c532:	4293      	cmp	r3, r2
 800c534:	d001      	beq.n	800c53a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c536:	2301      	movs	r3, #1
 800c538:	e025      	b.n	800c586 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	22c5      	movs	r2, #197	; 0xc5
 800c53e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c540:	2100      	movs	r1, #0
 800c542:	68f8      	ldr	r0, [r7, #12]
 800c544:	f7ff fbad 	bl	800bca2 <SDIO_GetResponse>
 800c548:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c550:	2b00      	cmp	r3, #0
 800c552:	d106      	bne.n	800c562 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	0c1b      	lsrs	r3, r3, #16
 800c558:	b29a      	uxth	r2, r3
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c55e:	2300      	movs	r3, #0
 800c560:	e011      	b.n	800c586 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d002      	beq.n	800c572 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c56c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c570:	e009      	b.n	800c586 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d002      	beq.n	800c582 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c57c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c580:	e001      	b.n	800c586 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c582:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c586:	4618      	mov	r0, r3
 800c588:	371c      	adds	r7, #28
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd90      	pop	{r4, r7, pc}
 800c58e:	bf00      	nop
 800c590:	2000003c 	.word	0x2000003c
 800c594:	10624dd3 	.word	0x10624dd3

0800c598 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800c598:	b490      	push	{r4, r7}
 800c59a:	b084      	sub	sp, #16
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c5a0:	4b21      	ldr	r3, [pc, #132]	; (800c628 <SDMMC_GetCmdResp7+0x90>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4a21      	ldr	r2, [pc, #132]	; (800c62c <SDMMC_GetCmdResp7+0x94>)
 800c5a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c5aa:	0a5b      	lsrs	r3, r3, #9
 800c5ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5b0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c5b4:	4623      	mov	r3, r4
 800c5b6:	1e5c      	subs	r4, r3, #1
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d102      	bne.n	800c5c2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c5bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c5c0:	e02c      	b.n	800c61c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5c6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d0f0      	beq.n	800c5b4 <SDMMC_GetCmdResp7+0x1c>
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d1eb      	bne.n	800c5b4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5e0:	f003 0304 	and.w	r3, r3, #4
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d004      	beq.n	800c5f2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2204      	movs	r2, #4
 800c5ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c5ee:	2304      	movs	r3, #4
 800c5f0:	e014      	b.n	800c61c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5f6:	f003 0301 	and.w	r3, r3, #1
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d004      	beq.n	800c608 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2201      	movs	r2, #1
 800c602:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c604:	2301      	movs	r3, #1
 800c606:	e009      	b.n	800c61c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c60c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c610:	2b00      	cmp	r3, #0
 800c612:	d002      	beq.n	800c61a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2240      	movs	r2, #64	; 0x40
 800c618:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c61a:	2300      	movs	r3, #0
  
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3710      	adds	r7, #16
 800c620:	46bd      	mov	sp, r7
 800c622:	bc90      	pop	{r4, r7}
 800c624:	4770      	bx	lr
 800c626:	bf00      	nop
 800c628:	2000003c 	.word	0x2000003c
 800c62c:	10624dd3 	.word	0x10624dd3

0800c630 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c630:	b084      	sub	sp, #16
 800c632:	b580      	push	{r7, lr}
 800c634:	b084      	sub	sp, #16
 800c636:	af00      	add	r7, sp, #0
 800c638:	6078      	str	r0, [r7, #4]
 800c63a:	f107 001c 	add.w	r0, r7, #28
 800c63e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c644:	2b01      	cmp	r3, #1
 800c646:	d122      	bne.n	800c68e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c64c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	68db      	ldr	r3, [r3, #12]
 800c658:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c65c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	68db      	ldr	r3, [r3, #12]
 800c668:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c672:	2b01      	cmp	r3, #1
 800c674:	d105      	bne.n	800c682 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	68db      	ldr	r3, [r3, #12]
 800c67a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f000 f94a 	bl	800c91c <USB_CoreReset>
 800c688:	4603      	mov	r3, r0
 800c68a:	73fb      	strb	r3, [r7, #15]
 800c68c:	e01a      	b.n	800c6c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	68db      	ldr	r3, [r3, #12]
 800c692:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f000 f93e 	bl	800c91c <USB_CoreReset>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c6a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d106      	bne.n	800c6b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	639a      	str	r2, [r3, #56]	; 0x38
 800c6b6:	e005      	b.n	800c6c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c6:	2b01      	cmp	r3, #1
 800c6c8:	d10b      	bne.n	800c6e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	689b      	ldr	r3, [r3, #8]
 800c6ce:	f043 0206 	orr.w	r2, r3, #6
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	689b      	ldr	r3, [r3, #8]
 800c6da:	f043 0220 	orr.w	r2, r3, #32
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c6e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3710      	adds	r7, #16
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c6ee:	b004      	add	sp, #16
 800c6f0:	4770      	bx	lr

0800c6f2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c6f2:	b480      	push	{r7}
 800c6f4:	b083      	sub	sp, #12
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	689b      	ldr	r3, [r3, #8]
 800c6fe:	f043 0201 	orr.w	r2, r3, #1
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c706:	2300      	movs	r3, #0
}
 800c708:	4618      	mov	r0, r3
 800c70a:	370c      	adds	r7, #12
 800c70c:	46bd      	mov	sp, r7
 800c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c712:	4770      	bx	lr

0800c714 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c714:	b480      	push	{r7}
 800c716:	b083      	sub	sp, #12
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	689b      	ldr	r3, [r3, #8]
 800c720:	f023 0201 	bic.w	r2, r3, #1
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c728:	2300      	movs	r3, #0
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	370c      	adds	r7, #12
 800c72e:	46bd      	mov	sp, r7
 800c730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c734:	4770      	bx	lr

0800c736 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c736:	b580      	push	{r7, lr}
 800c738:	b082      	sub	sp, #8
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	6078      	str	r0, [r7, #4]
 800c73e:	460b      	mov	r3, r1
 800c740:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	68db      	ldr	r3, [r3, #12]
 800c746:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c74e:	78fb      	ldrb	r3, [r7, #3]
 800c750:	2b01      	cmp	r3, #1
 800c752:	d106      	bne.n	800c762 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	68db      	ldr	r3, [r3, #12]
 800c758:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	60da      	str	r2, [r3, #12]
 800c760:	e00b      	b.n	800c77a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c762:	78fb      	ldrb	r3, [r7, #3]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d106      	bne.n	800c776 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	68db      	ldr	r3, [r3, #12]
 800c76c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	60da      	str	r2, [r3, #12]
 800c774:	e001      	b.n	800c77a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c776:	2301      	movs	r3, #1
 800c778:	e003      	b.n	800c782 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c77a:	2032      	movs	r0, #50	; 0x32
 800c77c:	f7f8 fb36 	bl	8004dec <HAL_Delay>

  return HAL_OK;
 800c780:	2300      	movs	r3, #0
}
 800c782:	4618      	mov	r0, r3
 800c784:	3708      	adds	r7, #8
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
	...

0800c78c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c78c:	b480      	push	{r7}
 800c78e:	b085      	sub	sp, #20
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
 800c794:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c796:	2300      	movs	r3, #0
 800c798:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	019b      	lsls	r3, r3, #6
 800c79e:	f043 0220 	orr.w	r2, r3, #32
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	60fb      	str	r3, [r7, #12]
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	4a09      	ldr	r2, [pc, #36]	; (800c7d4 <USB_FlushTxFifo+0x48>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d901      	bls.n	800c7b8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c7b4:	2303      	movs	r3, #3
 800c7b6:	e006      	b.n	800c7c6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	691b      	ldr	r3, [r3, #16]
 800c7bc:	f003 0320 	and.w	r3, r3, #32
 800c7c0:	2b20      	cmp	r3, #32
 800c7c2:	d0f0      	beq.n	800c7a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c7c4:	2300      	movs	r3, #0
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3714      	adds	r7, #20
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d0:	4770      	bx	lr
 800c7d2:	bf00      	nop
 800c7d4:	00030d40 	.word	0x00030d40

0800c7d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b085      	sub	sp, #20
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2210      	movs	r2, #16
 800c7e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	60fb      	str	r3, [r7, #12]
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	4a09      	ldr	r2, [pc, #36]	; (800c818 <USB_FlushRxFifo+0x40>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d901      	bls.n	800c7fc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c7f8:	2303      	movs	r3, #3
 800c7fa:	e006      	b.n	800c80a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	691b      	ldr	r3, [r3, #16]
 800c800:	f003 0310 	and.w	r3, r3, #16
 800c804:	2b10      	cmp	r3, #16
 800c806:	d0f0      	beq.n	800c7ea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c808:	2300      	movs	r3, #0
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	3714      	adds	r7, #20
 800c80e:	46bd      	mov	sp, r7
 800c810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c814:	4770      	bx	lr
 800c816:	bf00      	nop
 800c818:	00030d40 	.word	0x00030d40

0800c81c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b089      	sub	sp, #36	; 0x24
 800c820:	af00      	add	r7, sp, #0
 800c822:	60f8      	str	r0, [r7, #12]
 800c824:	60b9      	str	r1, [r7, #8]
 800c826:	4611      	mov	r1, r2
 800c828:	461a      	mov	r2, r3
 800c82a:	460b      	mov	r3, r1
 800c82c:	71fb      	strb	r3, [r7, #7]
 800c82e:	4613      	mov	r3, r2
 800c830:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c83a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d11a      	bne.n	800c878 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c842:	88bb      	ldrh	r3, [r7, #4]
 800c844:	3303      	adds	r3, #3
 800c846:	089b      	lsrs	r3, r3, #2
 800c848:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c84a:	2300      	movs	r3, #0
 800c84c:	61bb      	str	r3, [r7, #24]
 800c84e:	e00f      	b.n	800c870 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c850:	79fb      	ldrb	r3, [r7, #7]
 800c852:	031a      	lsls	r2, r3, #12
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	4413      	add	r3, r2
 800c858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c85c:	461a      	mov	r2, r3
 800c85e:	69fb      	ldr	r3, [r7, #28]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c864:	69fb      	ldr	r3, [r7, #28]
 800c866:	3304      	adds	r3, #4
 800c868:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c86a:	69bb      	ldr	r3, [r7, #24]
 800c86c:	3301      	adds	r3, #1
 800c86e:	61bb      	str	r3, [r7, #24]
 800c870:	69ba      	ldr	r2, [r7, #24]
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	429a      	cmp	r2, r3
 800c876:	d3eb      	bcc.n	800c850 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c878:	2300      	movs	r3, #0
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3724      	adds	r7, #36	; 0x24
 800c87e:	46bd      	mov	sp, r7
 800c880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c884:	4770      	bx	lr

0800c886 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c886:	b480      	push	{r7}
 800c888:	b089      	sub	sp, #36	; 0x24
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	60f8      	str	r0, [r7, #12]
 800c88e:	60b9      	str	r1, [r7, #8]
 800c890:	4613      	mov	r3, r2
 800c892:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c89c:	88fb      	ldrh	r3, [r7, #6]
 800c89e:	3303      	adds	r3, #3
 800c8a0:	089b      	lsrs	r3, r3, #2
 800c8a2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	61bb      	str	r3, [r7, #24]
 800c8a8:	e00b      	b.n	800c8c2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8b0:	681a      	ldr	r2, [r3, #0]
 800c8b2:	69fb      	ldr	r3, [r7, #28]
 800c8b4:	601a      	str	r2, [r3, #0]
    pDest++;
 800c8b6:	69fb      	ldr	r3, [r7, #28]
 800c8b8:	3304      	adds	r3, #4
 800c8ba:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c8bc:	69bb      	ldr	r3, [r7, #24]
 800c8be:	3301      	adds	r3, #1
 800c8c0:	61bb      	str	r3, [r7, #24]
 800c8c2:	69ba      	ldr	r2, [r7, #24]
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d3ef      	bcc.n	800c8aa <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c8ca:	69fb      	ldr	r3, [r7, #28]
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3724      	adds	r7, #36	; 0x24
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr

0800c8d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b085      	sub	sp, #20
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	695b      	ldr	r3, [r3, #20]
 800c8e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	699b      	ldr	r3, [r3, #24]
 800c8ea:	68fa      	ldr	r2, [r7, #12]
 800c8ec:	4013      	ands	r3, r2
 800c8ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3714      	adds	r7, #20
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fc:	4770      	bx	lr

0800c8fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c8fe:	b480      	push	{r7}
 800c900:	b083      	sub	sp, #12
 800c902:	af00      	add	r7, sp, #0
 800c904:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	695b      	ldr	r3, [r3, #20]
 800c90a:	f003 0301 	and.w	r3, r3, #1
}
 800c90e:	4618      	mov	r0, r3
 800c910:	370c      	adds	r7, #12
 800c912:	46bd      	mov	sp, r7
 800c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c918:	4770      	bx	lr
	...

0800c91c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b085      	sub	sp, #20
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c924:	2300      	movs	r3, #0
 800c926:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	3301      	adds	r3, #1
 800c92c:	60fb      	str	r3, [r7, #12]
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	4a13      	ldr	r2, [pc, #76]	; (800c980 <USB_CoreReset+0x64>)
 800c932:	4293      	cmp	r3, r2
 800c934:	d901      	bls.n	800c93a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c936:	2303      	movs	r3, #3
 800c938:	e01b      	b.n	800c972 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	691b      	ldr	r3, [r3, #16]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	daf2      	bge.n	800c928 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c942:	2300      	movs	r3, #0
 800c944:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	691b      	ldr	r3, [r3, #16]
 800c94a:	f043 0201 	orr.w	r2, r3, #1
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	3301      	adds	r3, #1
 800c956:	60fb      	str	r3, [r7, #12]
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	4a09      	ldr	r2, [pc, #36]	; (800c980 <USB_CoreReset+0x64>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d901      	bls.n	800c964 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c960:	2303      	movs	r3, #3
 800c962:	e006      	b.n	800c972 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	691b      	ldr	r3, [r3, #16]
 800c968:	f003 0301 	and.w	r3, r3, #1
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	d0f0      	beq.n	800c952 <USB_CoreReset+0x36>

  return HAL_OK;
 800c970:	2300      	movs	r3, #0
}
 800c972:	4618      	mov	r0, r3
 800c974:	3714      	adds	r7, #20
 800c976:	46bd      	mov	sp, r7
 800c978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97c:	4770      	bx	lr
 800c97e:	bf00      	nop
 800c980:	00030d40 	.word	0x00030d40

0800c984 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c984:	b084      	sub	sp, #16
 800c986:	b580      	push	{r7, lr}
 800c988:	b084      	sub	sp, #16
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
 800c98e:	f107 001c 	add.w	r0, r7, #28
 800c992:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d018      	beq.n	800c9fc <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800c9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	d10a      	bne.n	800c9e6 <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	68ba      	ldr	r2, [r7, #8]
 800c9da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c9de:	f043 0304 	orr.w	r3, r3, #4
 800c9e2:	6013      	str	r3, [r2, #0]
 800c9e4:	e014      	b.n	800ca10 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	68ba      	ldr	r2, [r7, #8]
 800c9f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c9f4:	f023 0304 	bic.w	r3, r3, #4
 800c9f8:	6013      	str	r3, [r2, #0]
 800c9fa:	e009      	b.n	800ca10 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	68ba      	ldr	r2, [r7, #8]
 800ca06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ca0a:	f023 0304 	bic.w	r3, r3, #4
 800ca0e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800ca10:	2110      	movs	r1, #16
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f7ff feba 	bl	800c78c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f7ff fedd 	bl	800c7d8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800ca1e:	2300      	movs	r3, #0
 800ca20:	60fb      	str	r3, [r7, #12]
 800ca22:	e015      	b.n	800ca50 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	015a      	lsls	r2, r3, #5
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	4413      	add	r3, r2
 800ca2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca30:	461a      	mov	r2, r3
 800ca32:	f04f 33ff 	mov.w	r3, #4294967295
 800ca36:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	015a      	lsls	r2, r3, #5
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	4413      	add	r3, r2
 800ca40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca44:	461a      	mov	r2, r3
 800ca46:	2300      	movs	r3, #0
 800ca48:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	60fb      	str	r3, [r7, #12]
 800ca50:	6a3b      	ldr	r3, [r7, #32]
 800ca52:	68fa      	ldr	r2, [r7, #12]
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d3e5      	bcc.n	800ca24 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800ca58:	2101      	movs	r1, #1
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f000 f8ac 	bl	800cbb8 <USB_DriveVbus>

  HAL_Delay(200U);
 800ca60:	20c8      	movs	r0, #200	; 0xc8
 800ca62:	f7f8 f9c3 	bl	8004dec <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ca72:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d00b      	beq.n	800ca98 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca86:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	4a14      	ldr	r2, [pc, #80]	; (800cadc <USB_HostInit+0x158>)
 800ca8c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	4a13      	ldr	r2, [pc, #76]	; (800cae0 <USB_HostInit+0x15c>)
 800ca92:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800ca96:	e009      	b.n	800caac <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2280      	movs	r2, #128	; 0x80
 800ca9c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	4a10      	ldr	r2, [pc, #64]	; (800cae4 <USB_HostInit+0x160>)
 800caa2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	4a10      	ldr	r2, [pc, #64]	; (800cae8 <USB_HostInit+0x164>)
 800caa8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800caac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d105      	bne.n	800cabe <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	699b      	ldr	r3, [r3, #24]
 800cab6:	f043 0210 	orr.w	r2, r3, #16
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	699a      	ldr	r2, [r3, #24]
 800cac2:	4b0a      	ldr	r3, [pc, #40]	; (800caec <USB_HostInit+0x168>)
 800cac4:	4313      	orrs	r3, r2
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800caca:	2300      	movs	r3, #0
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3710      	adds	r7, #16
 800cad0:	46bd      	mov	sp, r7
 800cad2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cad6:	b004      	add	sp, #16
 800cad8:	4770      	bx	lr
 800cada:	bf00      	nop
 800cadc:	01000200 	.word	0x01000200
 800cae0:	00e00300 	.word	0x00e00300
 800cae4:	00600080 	.word	0x00600080
 800cae8:	004000e0 	.word	0x004000e0
 800caec:	a3200008 	.word	0xa3200008

0800caf0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b085      	sub	sp, #20
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	460b      	mov	r3, r1
 800cafa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	68fa      	ldr	r2, [r7, #12]
 800cb0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cb0e:	f023 0303 	bic.w	r3, r3, #3
 800cb12:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb1a:	681a      	ldr	r2, [r3, #0]
 800cb1c:	78fb      	ldrb	r3, [r7, #3]
 800cb1e:	f003 0303 	and.w	r3, r3, #3
 800cb22:	68f9      	ldr	r1, [r7, #12]
 800cb24:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cb28:	4313      	orrs	r3, r2
 800cb2a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800cb2c:	78fb      	ldrb	r3, [r7, #3]
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	d107      	bne.n	800cb42 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb38:	461a      	mov	r2, r3
 800cb3a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800cb3e:	6053      	str	r3, [r2, #4]
 800cb40:	e009      	b.n	800cb56 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800cb42:	78fb      	ldrb	r3, [r7, #3]
 800cb44:	2b02      	cmp	r3, #2
 800cb46:	d106      	bne.n	800cb56 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb4e:	461a      	mov	r2, r3
 800cb50:	f241 7370 	movw	r3, #6000	; 0x1770
 800cb54:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800cb56:	2300      	movs	r3, #0
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3714      	adds	r7, #20
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr

0800cb64 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b084      	sub	sp, #16
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800cb70:	2300      	movs	r3, #0
 800cb72:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800cb84:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	68fa      	ldr	r2, [r7, #12]
 800cb8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cb8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb92:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800cb94:	2064      	movs	r0, #100	; 0x64
 800cb96:	f7f8 f929 	bl	8004dec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	68fa      	ldr	r2, [r7, #12]
 800cb9e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cba2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cba6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800cba8:	200a      	movs	r0, #10
 800cbaa:	f7f8 f91f 	bl	8004dec <HAL_Delay>

  return HAL_OK;
 800cbae:	2300      	movs	r3, #0
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3710      	adds	r7, #16
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}

0800cbb8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b085      	sub	sp, #20
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800cbdc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d109      	bne.n	800cbfc <USB_DriveVbus+0x44>
 800cbe8:	78fb      	ldrb	r3, [r7, #3]
 800cbea:	2b01      	cmp	r3, #1
 800cbec:	d106      	bne.n	800cbfc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	68fa      	ldr	r2, [r7, #12]
 800cbf2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cbf6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cbfa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cc02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc06:	d109      	bne.n	800cc1c <USB_DriveVbus+0x64>
 800cc08:	78fb      	ldrb	r3, [r7, #3]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d106      	bne.n	800cc1c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	68fa      	ldr	r2, [r7, #12]
 800cc12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cc16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc1a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800cc1c:	2300      	movs	r3, #0
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3714      	adds	r7, #20
 800cc22:	46bd      	mov	sp, r7
 800cc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc28:	4770      	bx	lr

0800cc2a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cc2a:	b480      	push	{r7}
 800cc2c:	b085      	sub	sp, #20
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800cc36:	2300      	movs	r3, #0
 800cc38:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	0c5b      	lsrs	r3, r3, #17
 800cc48:	f003 0303 	and.w	r3, r3, #3
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3714      	adds	r7, #20
 800cc50:	46bd      	mov	sp, r7
 800cc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc56:	4770      	bx	lr

0800cc58 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b085      	sub	sp, #20
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc6a:	689b      	ldr	r3, [r3, #8]
 800cc6c:	b29b      	uxth	r3, r3
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3714      	adds	r7, #20
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr
	...

0800cc7c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b087      	sub	sp, #28
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	4608      	mov	r0, r1
 800cc86:	4611      	mov	r1, r2
 800cc88:	461a      	mov	r2, r3
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	70fb      	strb	r3, [r7, #3]
 800cc8e:	460b      	mov	r3, r1
 800cc90:	70bb      	strb	r3, [r7, #2]
 800cc92:	4613      	mov	r3, r2
 800cc94:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800cc96:	2300      	movs	r3, #0
 800cc98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800cc9e:	78fb      	ldrb	r3, [r7, #3]
 800cca0:	015a      	lsls	r2, r3, #5
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	4413      	add	r3, r2
 800cca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ccaa:	461a      	mov	r2, r3
 800ccac:	f04f 33ff 	mov.w	r3, #4294967295
 800ccb0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800ccb2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ccb6:	2b03      	cmp	r3, #3
 800ccb8:	d87e      	bhi.n	800cdb8 <USB_HC_Init+0x13c>
 800ccba:	a201      	add	r2, pc, #4	; (adr r2, 800ccc0 <USB_HC_Init+0x44>)
 800ccbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccc0:	0800ccd1 	.word	0x0800ccd1
 800ccc4:	0800cd7b 	.word	0x0800cd7b
 800ccc8:	0800ccd1 	.word	0x0800ccd1
 800cccc:	0800cd3d 	.word	0x0800cd3d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ccd0:	78fb      	ldrb	r3, [r7, #3]
 800ccd2:	015a      	lsls	r2, r3, #5
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	4413      	add	r3, r2
 800ccd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ccdc:	461a      	mov	r2, r3
 800ccde:	f240 439d 	movw	r3, #1181	; 0x49d
 800cce2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800cce4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	da10      	bge.n	800cd0e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ccec:	78fb      	ldrb	r3, [r7, #3]
 800ccee:	015a      	lsls	r2, r3, #5
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	4413      	add	r3, r2
 800ccf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ccf8:	68db      	ldr	r3, [r3, #12]
 800ccfa:	78fa      	ldrb	r2, [r7, #3]
 800ccfc:	0151      	lsls	r1, r2, #5
 800ccfe:	68ba      	ldr	r2, [r7, #8]
 800cd00:	440a      	add	r2, r1
 800cd02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cd06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd0a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800cd0c:	e057      	b.n	800cdbe <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d051      	beq.n	800cdbe <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800cd1a:	78fb      	ldrb	r3, [r7, #3]
 800cd1c:	015a      	lsls	r2, r3, #5
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	4413      	add	r3, r2
 800cd22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd26:	68db      	ldr	r3, [r3, #12]
 800cd28:	78fa      	ldrb	r2, [r7, #3]
 800cd2a:	0151      	lsls	r1, r2, #5
 800cd2c:	68ba      	ldr	r2, [r7, #8]
 800cd2e:	440a      	add	r2, r1
 800cd30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cd34:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800cd38:	60d3      	str	r3, [r2, #12]
      break;
 800cd3a:	e040      	b.n	800cdbe <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800cd3c:	78fb      	ldrb	r3, [r7, #3]
 800cd3e:	015a      	lsls	r2, r3, #5
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	4413      	add	r3, r2
 800cd44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd48:	461a      	mov	r2, r3
 800cd4a:	f240 639d 	movw	r3, #1693	; 0x69d
 800cd4e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800cd50:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	da34      	bge.n	800cdc2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800cd58:	78fb      	ldrb	r3, [r7, #3]
 800cd5a:	015a      	lsls	r2, r3, #5
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	4413      	add	r3, r2
 800cd60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd64:	68db      	ldr	r3, [r3, #12]
 800cd66:	78fa      	ldrb	r2, [r7, #3]
 800cd68:	0151      	lsls	r1, r2, #5
 800cd6a:	68ba      	ldr	r2, [r7, #8]
 800cd6c:	440a      	add	r2, r1
 800cd6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cd72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd76:	60d3      	str	r3, [r2, #12]
      }

      break;
 800cd78:	e023      	b.n	800cdc2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800cd7a:	78fb      	ldrb	r3, [r7, #3]
 800cd7c:	015a      	lsls	r2, r3, #5
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	4413      	add	r3, r2
 800cd82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd86:	461a      	mov	r2, r3
 800cd88:	f240 2325 	movw	r3, #549	; 0x225
 800cd8c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800cd8e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	da17      	bge.n	800cdc6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800cd96:	78fb      	ldrb	r3, [r7, #3]
 800cd98:	015a      	lsls	r2, r3, #5
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	4413      	add	r3, r2
 800cd9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cda2:	68db      	ldr	r3, [r3, #12]
 800cda4:	78fa      	ldrb	r2, [r7, #3]
 800cda6:	0151      	lsls	r1, r2, #5
 800cda8:	68ba      	ldr	r2, [r7, #8]
 800cdaa:	440a      	add	r2, r1
 800cdac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cdb0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800cdb4:	60d3      	str	r3, [r2, #12]
      }
      break;
 800cdb6:	e006      	b.n	800cdc6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800cdb8:	2301      	movs	r3, #1
 800cdba:	75fb      	strb	r3, [r7, #23]
      break;
 800cdbc:	e004      	b.n	800cdc8 <USB_HC_Init+0x14c>
      break;
 800cdbe:	bf00      	nop
 800cdc0:	e002      	b.n	800cdc8 <USB_HC_Init+0x14c>
      break;
 800cdc2:	bf00      	nop
 800cdc4:	e000      	b.n	800cdc8 <USB_HC_Init+0x14c>
      break;
 800cdc6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cdce:	699a      	ldr	r2, [r3, #24]
 800cdd0:	78fb      	ldrb	r3, [r7, #3]
 800cdd2:	f003 030f 	and.w	r3, r3, #15
 800cdd6:	2101      	movs	r1, #1
 800cdd8:	fa01 f303 	lsl.w	r3, r1, r3
 800cddc:	68b9      	ldr	r1, [r7, #8]
 800cdde:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cde2:	4313      	orrs	r3, r2
 800cde4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	699b      	ldr	r3, [r3, #24]
 800cdea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800cdf2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	da03      	bge.n	800ce02 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800cdfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cdfe:	613b      	str	r3, [r7, #16]
 800ce00:	e001      	b.n	800ce06 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800ce02:	2300      	movs	r3, #0
 800ce04:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800ce06:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ce0a:	2b02      	cmp	r3, #2
 800ce0c:	d103      	bne.n	800ce16 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800ce0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ce12:	60fb      	str	r3, [r7, #12]
 800ce14:	e001      	b.n	800ce1a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800ce16:	2300      	movs	r3, #0
 800ce18:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ce1a:	787b      	ldrb	r3, [r7, #1]
 800ce1c:	059b      	lsls	r3, r3, #22
 800ce1e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ce22:	78bb      	ldrb	r3, [r7, #2]
 800ce24:	02db      	lsls	r3, r3, #11
 800ce26:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ce2a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ce2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ce30:	049b      	lsls	r3, r3, #18
 800ce32:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ce36:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ce38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ce3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ce3e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ce40:	693b      	ldr	r3, [r7, #16]
 800ce42:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ce44:	78fb      	ldrb	r3, [r7, #3]
 800ce46:	0159      	lsls	r1, r3, #5
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	440b      	add	r3, r1
 800ce4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce50:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ce56:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800ce58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ce5c:	2b03      	cmp	r3, #3
 800ce5e:	d10f      	bne.n	800ce80 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800ce60:	78fb      	ldrb	r3, [r7, #3]
 800ce62:	015a      	lsls	r2, r3, #5
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	4413      	add	r3, r2
 800ce68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	78fa      	ldrb	r2, [r7, #3]
 800ce70:	0151      	lsls	r1, r2, #5
 800ce72:	68ba      	ldr	r2, [r7, #8]
 800ce74:	440a      	add	r2, r1
 800ce76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ce7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ce7e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800ce80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	371c      	adds	r7, #28
 800ce86:	46bd      	mov	sp, r7
 800ce88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8c:	4770      	bx	lr
 800ce8e:	bf00      	nop

0800ce90 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b08c      	sub	sp, #48	; 0x30
 800ce94:	af02      	add	r7, sp, #8
 800ce96:	60f8      	str	r0, [r7, #12]
 800ce98:	60b9      	str	r1, [r7, #8]
 800ce9a:	4613      	mov	r3, r2
 800ce9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	785b      	ldrb	r3, [r3, #1]
 800cea6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800cea8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ceac:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d028      	beq.n	800cf0c <USB_HC_StartXfer+0x7c>
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	791b      	ldrb	r3, [r3, #4]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d124      	bne.n	800cf0c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800cec2:	79fb      	ldrb	r3, [r7, #7]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d10b      	bne.n	800cee0 <USB_HC_StartXfer+0x50>
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	795b      	ldrb	r3, [r3, #5]
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d107      	bne.n	800cee0 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	785b      	ldrb	r3, [r3, #1]
 800ced4:	4619      	mov	r1, r3
 800ced6:	68f8      	ldr	r0, [r7, #12]
 800ced8:	f000 fa30 	bl	800d33c <USB_DoPing>
      return HAL_OK;
 800cedc:	2300      	movs	r3, #0
 800cede:	e114      	b.n	800d10a <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800cee0:	79fb      	ldrb	r3, [r7, #7]
 800cee2:	2b01      	cmp	r3, #1
 800cee4:	d112      	bne.n	800cf0c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800cee6:	69fb      	ldr	r3, [r7, #28]
 800cee8:	015a      	lsls	r2, r3, #5
 800ceea:	6a3b      	ldr	r3, [r7, #32]
 800ceec:	4413      	add	r3, r2
 800ceee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cef2:	68db      	ldr	r3, [r3, #12]
 800cef4:	69fa      	ldr	r2, [r7, #28]
 800cef6:	0151      	lsls	r1, r2, #5
 800cef8:	6a3a      	ldr	r2, [r7, #32]
 800cefa:	440a      	add	r2, r1
 800cefc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cf00:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800cf04:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800cf0c:	68bb      	ldr	r3, [r7, #8]
 800cf0e:	691b      	ldr	r3, [r3, #16]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d018      	beq.n	800cf46 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	691b      	ldr	r3, [r3, #16]
 800cf18:	68ba      	ldr	r2, [r7, #8]
 800cf1a:	8912      	ldrh	r2, [r2, #8]
 800cf1c:	4413      	add	r3, r2
 800cf1e:	3b01      	subs	r3, #1
 800cf20:	68ba      	ldr	r2, [r7, #8]
 800cf22:	8912      	ldrh	r2, [r2, #8]
 800cf24:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf28:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800cf2a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cf2c:	8b7b      	ldrh	r3, [r7, #26]
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d90b      	bls.n	800cf4a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800cf32:	8b7b      	ldrh	r3, [r7, #26]
 800cf34:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800cf36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cf38:	68ba      	ldr	r2, [r7, #8]
 800cf3a:	8912      	ldrh	r2, [r2, #8]
 800cf3c:	fb02 f203 	mul.w	r2, r2, r3
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	611a      	str	r2, [r3, #16]
 800cf44:	e001      	b.n	800cf4a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800cf46:	2301      	movs	r3, #1
 800cf48:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	78db      	ldrb	r3, [r3, #3]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d006      	beq.n	800cf60 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800cf52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cf54:	68ba      	ldr	r2, [r7, #8]
 800cf56:	8912      	ldrh	r2, [r2, #8]
 800cf58:	fb02 f203 	mul.w	r2, r2, r3
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	691b      	ldr	r3, [r3, #16]
 800cf64:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cf68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cf6a:	04d9      	lsls	r1, r3, #19
 800cf6c:	4b69      	ldr	r3, [pc, #420]	; (800d114 <USB_HC_StartXfer+0x284>)
 800cf6e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800cf70:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	7a9b      	ldrb	r3, [r3, #10]
 800cf76:	075b      	lsls	r3, r3, #29
 800cf78:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800cf7c:	69f9      	ldr	r1, [r7, #28]
 800cf7e:	0148      	lsls	r0, r1, #5
 800cf80:	6a39      	ldr	r1, [r7, #32]
 800cf82:	4401      	add	r1, r0
 800cf84:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cf88:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800cf8a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800cf8c:	79fb      	ldrb	r3, [r7, #7]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d009      	beq.n	800cfa6 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	68d9      	ldr	r1, [r3, #12]
 800cf96:	69fb      	ldr	r3, [r7, #28]
 800cf98:	015a      	lsls	r2, r3, #5
 800cf9a:	6a3b      	ldr	r3, [r7, #32]
 800cf9c:	4413      	add	r3, r2
 800cf9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfa2:	460a      	mov	r2, r1
 800cfa4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800cfa6:	6a3b      	ldr	r3, [r7, #32]
 800cfa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cfac:	689b      	ldr	r3, [r3, #8]
 800cfae:	f003 0301 	and.w	r3, r3, #1
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	bf0c      	ite	eq
 800cfb6:	2301      	moveq	r3, #1
 800cfb8:	2300      	movne	r3, #0
 800cfba:	b2db      	uxtb	r3, r3
 800cfbc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800cfbe:	69fb      	ldr	r3, [r7, #28]
 800cfc0:	015a      	lsls	r2, r3, #5
 800cfc2:	6a3b      	ldr	r3, [r7, #32]
 800cfc4:	4413      	add	r3, r2
 800cfc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	69fa      	ldr	r2, [r7, #28]
 800cfce:	0151      	lsls	r1, r2, #5
 800cfd0:	6a3a      	ldr	r2, [r7, #32]
 800cfd2:	440a      	add	r2, r1
 800cfd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cfd8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cfdc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800cfde:	69fb      	ldr	r3, [r7, #28]
 800cfe0:	015a      	lsls	r2, r3, #5
 800cfe2:	6a3b      	ldr	r3, [r7, #32]
 800cfe4:	4413      	add	r3, r2
 800cfe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfea:	681a      	ldr	r2, [r3, #0]
 800cfec:	7e7b      	ldrb	r3, [r7, #25]
 800cfee:	075b      	lsls	r3, r3, #29
 800cff0:	69f9      	ldr	r1, [r7, #28]
 800cff2:	0148      	lsls	r0, r1, #5
 800cff4:	6a39      	ldr	r1, [r7, #32]
 800cff6:	4401      	add	r1, r0
 800cff8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800cffc:	4313      	orrs	r3, r2
 800cffe:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d000:	69fb      	ldr	r3, [r7, #28]
 800d002:	015a      	lsls	r2, r3, #5
 800d004:	6a3b      	ldr	r3, [r7, #32]
 800d006:	4413      	add	r3, r2
 800d008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	4a42      	ldr	r2, [pc, #264]	; (800d118 <USB_HC_StartXfer+0x288>)
 800d010:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d012:	4b41      	ldr	r3, [pc, #260]	; (800d118 <USB_HC_StartXfer+0x288>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d01a:	4a3f      	ldr	r2, [pc, #252]	; (800d118 <USB_HC_StartXfer+0x288>)
 800d01c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	78db      	ldrb	r3, [r3, #3]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d006      	beq.n	800d034 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d026:	4b3c      	ldr	r3, [pc, #240]	; (800d118 <USB_HC_StartXfer+0x288>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d02e:	4a3a      	ldr	r2, [pc, #232]	; (800d118 <USB_HC_StartXfer+0x288>)
 800d030:	6013      	str	r3, [r2, #0]
 800d032:	e005      	b.n	800d040 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d034:	4b38      	ldr	r3, [pc, #224]	; (800d118 <USB_HC_StartXfer+0x288>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d03c:	4a36      	ldr	r2, [pc, #216]	; (800d118 <USB_HC_StartXfer+0x288>)
 800d03e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d040:	4b35      	ldr	r3, [pc, #212]	; (800d118 <USB_HC_StartXfer+0x288>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d048:	4a33      	ldr	r2, [pc, #204]	; (800d118 <USB_HC_StartXfer+0x288>)
 800d04a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d04c:	69fb      	ldr	r3, [r7, #28]
 800d04e:	015a      	lsls	r2, r3, #5
 800d050:	6a3b      	ldr	r3, [r7, #32]
 800d052:	4413      	add	r3, r2
 800d054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d058:	461a      	mov	r2, r3
 800d05a:	4b2f      	ldr	r3, [pc, #188]	; (800d118 <USB_HC_StartXfer+0x288>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800d060:	79fb      	ldrb	r3, [r7, #7]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d001      	beq.n	800d06a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800d066:	2300      	movs	r3, #0
 800d068:	e04f      	b.n	800d10a <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	78db      	ldrb	r3, [r3, #3]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d14a      	bne.n	800d108 <USB_HC_StartXfer+0x278>
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	691b      	ldr	r3, [r3, #16]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d046      	beq.n	800d108 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	79db      	ldrb	r3, [r3, #7]
 800d07e:	2b03      	cmp	r3, #3
 800d080:	d830      	bhi.n	800d0e4 <USB_HC_StartXfer+0x254>
 800d082:	a201      	add	r2, pc, #4	; (adr r2, 800d088 <USB_HC_StartXfer+0x1f8>)
 800d084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d088:	0800d099 	.word	0x0800d099
 800d08c:	0800d0bd 	.word	0x0800d0bd
 800d090:	0800d099 	.word	0x0800d099
 800d094:	0800d0bd 	.word	0x0800d0bd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	691b      	ldr	r3, [r3, #16]
 800d09c:	3303      	adds	r3, #3
 800d09e:	089b      	lsrs	r3, r3, #2
 800d0a0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d0a2:	8afa      	ldrh	r2, [r7, #22]
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a8:	b29b      	uxth	r3, r3
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d91c      	bls.n	800d0e8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	699b      	ldr	r3, [r3, #24]
 800d0b2:	f043 0220 	orr.w	r2, r3, #32
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	619a      	str	r2, [r3, #24]
        }
        break;
 800d0ba:	e015      	b.n	800d0e8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	691b      	ldr	r3, [r3, #16]
 800d0c0:	3303      	adds	r3, #3
 800d0c2:	089b      	lsrs	r3, r3, #2
 800d0c4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d0c6:	8afa      	ldrh	r2, [r7, #22]
 800d0c8:	6a3b      	ldr	r3, [r7, #32]
 800d0ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d0ce:	691b      	ldr	r3, [r3, #16]
 800d0d0:	b29b      	uxth	r3, r3
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d90a      	bls.n	800d0ec <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	699b      	ldr	r3, [r3, #24]
 800d0da:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	619a      	str	r2, [r3, #24]
        }
        break;
 800d0e2:	e003      	b.n	800d0ec <USB_HC_StartXfer+0x25c>

      default:
        break;
 800d0e4:	bf00      	nop
 800d0e6:	e002      	b.n	800d0ee <USB_HC_StartXfer+0x25e>
        break;
 800d0e8:	bf00      	nop
 800d0ea:	e000      	b.n	800d0ee <USB_HC_StartXfer+0x25e>
        break;
 800d0ec:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	68d9      	ldr	r1, [r3, #12]
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	785a      	ldrb	r2, [r3, #1]
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	691b      	ldr	r3, [r3, #16]
 800d0fa:	b298      	uxth	r0, r3
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	9300      	str	r3, [sp, #0]
 800d100:	4603      	mov	r3, r0
 800d102:	68f8      	ldr	r0, [r7, #12]
 800d104:	f7ff fb8a 	bl	800c81c <USB_WritePacket>
  }

  return HAL_OK;
 800d108:	2300      	movs	r3, #0
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3728      	adds	r7, #40	; 0x28
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
 800d112:	bf00      	nop
 800d114:	1ff80000 	.word	0x1ff80000
 800d118:	20000278 	.word	0x20000278

0800d11c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b085      	sub	sp, #20
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d12e:	695b      	ldr	r3, [r3, #20]
 800d130:	b29b      	uxth	r3, r3
}
 800d132:	4618      	mov	r0, r3
 800d134:	3714      	adds	r7, #20
 800d136:	46bd      	mov	sp, r7
 800d138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13c:	4770      	bx	lr

0800d13e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800d13e:	b480      	push	{r7}
 800d140:	b087      	sub	sp, #28
 800d142:	af00      	add	r7, sp, #0
 800d144:	6078      	str	r0, [r7, #4]
 800d146:	460b      	mov	r3, r1
 800d148:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800d14e:	78fb      	ldrb	r3, [r7, #3]
 800d150:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800d152:	2300      	movs	r3, #0
 800d154:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	015a      	lsls	r2, r3, #5
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	4413      	add	r3, r2
 800d15e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	0c9b      	lsrs	r3, r3, #18
 800d166:	f003 0303 	and.w	r3, r3, #3
 800d16a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d002      	beq.n	800d178 <USB_HC_Halt+0x3a>
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	2b02      	cmp	r3, #2
 800d176:	d16c      	bne.n	800d252 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	015a      	lsls	r2, r3, #5
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	4413      	add	r3, r2
 800d180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	68fa      	ldr	r2, [r7, #12]
 800d188:	0151      	lsls	r1, r2, #5
 800d18a:	693a      	ldr	r2, [r7, #16]
 800d18c:	440a      	add	r2, r1
 800d18e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d192:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d196:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d19c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d143      	bne.n	800d22c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	015a      	lsls	r2, r3, #5
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	4413      	add	r3, r2
 800d1ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	68fa      	ldr	r2, [r7, #12]
 800d1b4:	0151      	lsls	r1, r2, #5
 800d1b6:	693a      	ldr	r2, [r7, #16]
 800d1b8:	440a      	add	r2, r1
 800d1ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d1be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d1c2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	015a      	lsls	r2, r3, #5
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	4413      	add	r3, r2
 800d1cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	68fa      	ldr	r2, [r7, #12]
 800d1d4:	0151      	lsls	r1, r2, #5
 800d1d6:	693a      	ldr	r2, [r7, #16]
 800d1d8:	440a      	add	r2, r1
 800d1da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d1de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d1e2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	015a      	lsls	r2, r3, #5
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	4413      	add	r3, r2
 800d1ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	68fa      	ldr	r2, [r7, #12]
 800d1f4:	0151      	lsls	r1, r2, #5
 800d1f6:	693a      	ldr	r2, [r7, #16]
 800d1f8:	440a      	add	r2, r1
 800d1fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d1fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d202:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	3301      	adds	r3, #1
 800d208:	617b      	str	r3, [r7, #20]
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d210:	d81d      	bhi.n	800d24e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	015a      	lsls	r2, r3, #5
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	4413      	add	r3, r2
 800d21a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d228:	d0ec      	beq.n	800d204 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d22a:	e080      	b.n	800d32e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	015a      	lsls	r2, r3, #5
 800d230:	693b      	ldr	r3, [r7, #16]
 800d232:	4413      	add	r3, r2
 800d234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	68fa      	ldr	r2, [r7, #12]
 800d23c:	0151      	lsls	r1, r2, #5
 800d23e:	693a      	ldr	r2, [r7, #16]
 800d240:	440a      	add	r2, r1
 800d242:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d246:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d24a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d24c:	e06f      	b.n	800d32e <USB_HC_Halt+0x1f0>
          break;
 800d24e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d250:	e06d      	b.n	800d32e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	015a      	lsls	r2, r3, #5
 800d256:	693b      	ldr	r3, [r7, #16]
 800d258:	4413      	add	r3, r2
 800d25a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	68fa      	ldr	r2, [r7, #12]
 800d262:	0151      	lsls	r1, r2, #5
 800d264:	693a      	ldr	r2, [r7, #16]
 800d266:	440a      	add	r2, r1
 800d268:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d26c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d270:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d278:	691b      	ldr	r3, [r3, #16]
 800d27a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d143      	bne.n	800d30a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	015a      	lsls	r2, r3, #5
 800d286:	693b      	ldr	r3, [r7, #16]
 800d288:	4413      	add	r3, r2
 800d28a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	68fa      	ldr	r2, [r7, #12]
 800d292:	0151      	lsls	r1, r2, #5
 800d294:	693a      	ldr	r2, [r7, #16]
 800d296:	440a      	add	r2, r1
 800d298:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d29c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d2a0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	015a      	lsls	r2, r3, #5
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	4413      	add	r3, r2
 800d2aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	68fa      	ldr	r2, [r7, #12]
 800d2b2:	0151      	lsls	r1, r2, #5
 800d2b4:	693a      	ldr	r2, [r7, #16]
 800d2b6:	440a      	add	r2, r1
 800d2b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d2bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d2c0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	015a      	lsls	r2, r3, #5
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	4413      	add	r3, r2
 800d2ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	68fa      	ldr	r2, [r7, #12]
 800d2d2:	0151      	lsls	r1, r2, #5
 800d2d4:	693a      	ldr	r2, [r7, #16]
 800d2d6:	440a      	add	r2, r1
 800d2d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d2dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d2e0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	3301      	adds	r3, #1
 800d2e6:	617b      	str	r3, [r7, #20]
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d2ee:	d81d      	bhi.n	800d32c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	015a      	lsls	r2, r3, #5
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	4413      	add	r3, r2
 800d2f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d302:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d306:	d0ec      	beq.n	800d2e2 <USB_HC_Halt+0x1a4>
 800d308:	e011      	b.n	800d32e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	015a      	lsls	r2, r3, #5
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	4413      	add	r3, r2
 800d312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	68fa      	ldr	r2, [r7, #12]
 800d31a:	0151      	lsls	r1, r2, #5
 800d31c:	693a      	ldr	r2, [r7, #16]
 800d31e:	440a      	add	r2, r1
 800d320:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d324:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d328:	6013      	str	r3, [r2, #0]
 800d32a:	e000      	b.n	800d32e <USB_HC_Halt+0x1f0>
          break;
 800d32c:	bf00      	nop
    }
  }

  return HAL_OK;
 800d32e:	2300      	movs	r3, #0
}
 800d330:	4618      	mov	r0, r3
 800d332:	371c      	adds	r7, #28
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr

0800d33c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b087      	sub	sp, #28
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	460b      	mov	r3, r1
 800d346:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800d34c:	78fb      	ldrb	r3, [r7, #3]
 800d34e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800d350:	2301      	movs	r3, #1
 800d352:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	04da      	lsls	r2, r3, #19
 800d358:	4b15      	ldr	r3, [pc, #84]	; (800d3b0 <USB_DoPing+0x74>)
 800d35a:	4013      	ands	r3, r2
 800d35c:	693a      	ldr	r2, [r7, #16]
 800d35e:	0151      	lsls	r1, r2, #5
 800d360:	697a      	ldr	r2, [r7, #20]
 800d362:	440a      	add	r2, r1
 800d364:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d368:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d36c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	015a      	lsls	r2, r3, #5
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	4413      	add	r3, r2
 800d376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d384:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d38c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800d38e:	693b      	ldr	r3, [r7, #16]
 800d390:	015a      	lsls	r2, r3, #5
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	4413      	add	r3, r2
 800d396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d39a:	461a      	mov	r2, r3
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800d3a0:	2300      	movs	r3, #0
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	371c      	adds	r7, #28
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr
 800d3ae:	bf00      	nop
 800d3b0:	1ff80000 	.word	0x1ff80000

0800d3b4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b086      	sub	sp, #24
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f7ff f9a5 	bl	800c714 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800d3ca:	2110      	movs	r1, #16
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f7ff f9dd 	bl	800c78c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f7ff fa00 	bl	800c7d8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800d3d8:	2300      	movs	r3, #0
 800d3da:	613b      	str	r3, [r7, #16]
 800d3dc:	e01f      	b.n	800d41e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800d3de:	693b      	ldr	r3, [r7, #16]
 800d3e0:	015a      	lsls	r2, r3, #5
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	4413      	add	r3, r2
 800d3e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d3f4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d3fc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d404:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	015a      	lsls	r2, r3, #5
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	4413      	add	r3, r2
 800d40e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d412:	461a      	mov	r2, r3
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	3301      	adds	r3, #1
 800d41c:	613b      	str	r3, [r7, #16]
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	2b0f      	cmp	r3, #15
 800d422:	d9dc      	bls.n	800d3de <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800d424:	2300      	movs	r3, #0
 800d426:	613b      	str	r3, [r7, #16]
 800d428:	e034      	b.n	800d494 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	015a      	lsls	r2, r3, #5
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	4413      	add	r3, r2
 800d432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d440:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d448:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d450:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	015a      	lsls	r2, r3, #5
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	4413      	add	r3, r2
 800d45a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d45e:	461a      	mov	r2, r3
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	3301      	adds	r3, #1
 800d468:	617b      	str	r3, [r7, #20]
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d470:	d80c      	bhi.n	800d48c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	015a      	lsls	r2, r3, #5
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	4413      	add	r3, r2
 800d47a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d484:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d488:	d0ec      	beq.n	800d464 <USB_StopHost+0xb0>
 800d48a:	e000      	b.n	800d48e <USB_StopHost+0xda>
        break;
 800d48c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	3301      	adds	r3, #1
 800d492:	613b      	str	r3, [r7, #16]
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	2b0f      	cmp	r3, #15
 800d498:	d9c7      	bls.n	800d42a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d4a0:	461a      	mov	r2, r3
 800d4a2:	f04f 33ff 	mov.w	r3, #4294967295
 800d4a6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f04f 32ff 	mov.w	r2, #4294967295
 800d4ae:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f7ff f91e 	bl	800c6f2 <USB_EnableGlobalInt>

  return HAL_OK;
 800d4b6:	2300      	movs	r3, #0
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3718      	adds	r7, #24
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800d4c0:	b590      	push	{r4, r7, lr}
 800d4c2:	b089      	sub	sp, #36	; 0x24
 800d4c4:	af04      	add	r7, sp, #16
 800d4c6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	2202      	movs	r2, #2
 800d4cc:	2102      	movs	r1, #2
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f000 fcb4 	bl	800de3c <USBH_FindInterface>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d4d8:	7bfb      	ldrb	r3, [r7, #15]
 800d4da:	2bff      	cmp	r3, #255	; 0xff
 800d4dc:	d002      	beq.n	800d4e4 <USBH_CDC_InterfaceInit+0x24>
 800d4de:	7bfb      	ldrb	r3, [r7, #15]
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	d901      	bls.n	800d4e8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d4e4:	2302      	movs	r3, #2
 800d4e6:	e13d      	b.n	800d764 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800d4e8:	7bfb      	ldrb	r3, [r7, #15]
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f000 fc89 	bl	800de04 <USBH_SelectInterface>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800d4f6:	7bbb      	ldrb	r3, [r7, #14]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d001      	beq.n	800d500 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800d4fc:	2302      	movs	r3, #2
 800d4fe:	e131      	b.n	800d764 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800d506:	2050      	movs	r0, #80	; 0x50
 800d508:	f008 f8a8 	bl	801565c <malloc>
 800d50c:	4603      	mov	r3, r0
 800d50e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d516:	69db      	ldr	r3, [r3, #28]
 800d518:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d101      	bne.n	800d524 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800d520:	2302      	movs	r3, #2
 800d522:	e11f      	b.n	800d764 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800d524:	2250      	movs	r2, #80	; 0x50
 800d526:	2100      	movs	r1, #0
 800d528:	68b8      	ldr	r0, [r7, #8]
 800d52a:	f008 f8b2 	bl	8015692 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800d52e:	7bfb      	ldrb	r3, [r7, #15]
 800d530:	687a      	ldr	r2, [r7, #4]
 800d532:	211a      	movs	r1, #26
 800d534:	fb01 f303 	mul.w	r3, r1, r3
 800d538:	4413      	add	r3, r2
 800d53a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d53e:	781b      	ldrb	r3, [r3, #0]
 800d540:	b25b      	sxtb	r3, r3
 800d542:	2b00      	cmp	r3, #0
 800d544:	da15      	bge.n	800d572 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d546:	7bfb      	ldrb	r3, [r7, #15]
 800d548:	687a      	ldr	r2, [r7, #4]
 800d54a:	211a      	movs	r1, #26
 800d54c:	fb01 f303 	mul.w	r3, r1, r3
 800d550:	4413      	add	r3, r2
 800d552:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d556:	781a      	ldrb	r2, [r3, #0]
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d55c:	7bfb      	ldrb	r3, [r7, #15]
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	211a      	movs	r1, #26
 800d562:	fb01 f303 	mul.w	r3, r1, r3
 800d566:	4413      	add	r3, r2
 800d568:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d56c:	881a      	ldrh	r2, [r3, #0]
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	785b      	ldrb	r3, [r3, #1]
 800d576:	4619      	mov	r1, r3
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f002 f890 	bl	800f69e <USBH_AllocPipe>
 800d57e:	4603      	mov	r3, r0
 800d580:	461a      	mov	r2, r3
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	7819      	ldrb	r1, [r3, #0]
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	7858      	ldrb	r0, [r3, #1]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d59a:	68ba      	ldr	r2, [r7, #8]
 800d59c:	8952      	ldrh	r2, [r2, #10]
 800d59e:	9202      	str	r2, [sp, #8]
 800d5a0:	2203      	movs	r2, #3
 800d5a2:	9201      	str	r2, [sp, #4]
 800d5a4:	9300      	str	r3, [sp, #0]
 800d5a6:	4623      	mov	r3, r4
 800d5a8:	4602      	mov	r2, r0
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f002 f848 	bl	800f640 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	781b      	ldrb	r3, [r3, #0]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f007 fe93 	bl	80152e4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800d5be:	2300      	movs	r3, #0
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	210a      	movs	r1, #10
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f000 fc39 	bl	800de3c <USBH_FindInterface>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d5ce:	7bfb      	ldrb	r3, [r7, #15]
 800d5d0:	2bff      	cmp	r3, #255	; 0xff
 800d5d2:	d002      	beq.n	800d5da <USBH_CDC_InterfaceInit+0x11a>
 800d5d4:	7bfb      	ldrb	r3, [r7, #15]
 800d5d6:	2b01      	cmp	r3, #1
 800d5d8:	d901      	bls.n	800d5de <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d5da:	2302      	movs	r3, #2
 800d5dc:	e0c2      	b.n	800d764 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800d5de:	7bfb      	ldrb	r3, [r7, #15]
 800d5e0:	687a      	ldr	r2, [r7, #4]
 800d5e2:	211a      	movs	r1, #26
 800d5e4:	fb01 f303 	mul.w	r3, r1, r3
 800d5e8:	4413      	add	r3, r2
 800d5ea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d5ee:	781b      	ldrb	r3, [r3, #0]
 800d5f0:	b25b      	sxtb	r3, r3
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	da16      	bge.n	800d624 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d5f6:	7bfb      	ldrb	r3, [r7, #15]
 800d5f8:	687a      	ldr	r2, [r7, #4]
 800d5fa:	211a      	movs	r1, #26
 800d5fc:	fb01 f303 	mul.w	r3, r1, r3
 800d600:	4413      	add	r3, r2
 800d602:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d606:	781a      	ldrb	r2, [r3, #0]
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d60c:	7bfb      	ldrb	r3, [r7, #15]
 800d60e:	687a      	ldr	r2, [r7, #4]
 800d610:	211a      	movs	r1, #26
 800d612:	fb01 f303 	mul.w	r3, r1, r3
 800d616:	4413      	add	r3, r2
 800d618:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d61c:	881a      	ldrh	r2, [r3, #0]
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	835a      	strh	r2, [r3, #26]
 800d622:	e015      	b.n	800d650 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d624:	7bfb      	ldrb	r3, [r7, #15]
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	211a      	movs	r1, #26
 800d62a:	fb01 f303 	mul.w	r3, r1, r3
 800d62e:	4413      	add	r3, r2
 800d630:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d634:	781a      	ldrb	r2, [r3, #0]
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d63a:	7bfb      	ldrb	r3, [r7, #15]
 800d63c:	687a      	ldr	r2, [r7, #4]
 800d63e:	211a      	movs	r1, #26
 800d640:	fb01 f303 	mul.w	r3, r1, r3
 800d644:	4413      	add	r3, r2
 800d646:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d64a:	881a      	ldrh	r2, [r3, #0]
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800d650:	7bfb      	ldrb	r3, [r7, #15]
 800d652:	687a      	ldr	r2, [r7, #4]
 800d654:	211a      	movs	r1, #26
 800d656:	fb01 f303 	mul.w	r3, r1, r3
 800d65a:	4413      	add	r3, r2
 800d65c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	b25b      	sxtb	r3, r3
 800d664:	2b00      	cmp	r3, #0
 800d666:	da16      	bge.n	800d696 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d668:	7bfb      	ldrb	r3, [r7, #15]
 800d66a:	687a      	ldr	r2, [r7, #4]
 800d66c:	211a      	movs	r1, #26
 800d66e:	fb01 f303 	mul.w	r3, r1, r3
 800d672:	4413      	add	r3, r2
 800d674:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d678:	781a      	ldrb	r2, [r3, #0]
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d67e:	7bfb      	ldrb	r3, [r7, #15]
 800d680:	687a      	ldr	r2, [r7, #4]
 800d682:	211a      	movs	r1, #26
 800d684:	fb01 f303 	mul.w	r3, r1, r3
 800d688:	4413      	add	r3, r2
 800d68a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800d68e:	881a      	ldrh	r2, [r3, #0]
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	835a      	strh	r2, [r3, #26]
 800d694:	e015      	b.n	800d6c2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d696:	7bfb      	ldrb	r3, [r7, #15]
 800d698:	687a      	ldr	r2, [r7, #4]
 800d69a:	211a      	movs	r1, #26
 800d69c:	fb01 f303 	mul.w	r3, r1, r3
 800d6a0:	4413      	add	r3, r2
 800d6a2:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d6a6:	781a      	ldrb	r2, [r3, #0]
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d6ac:	7bfb      	ldrb	r3, [r7, #15]
 800d6ae:	687a      	ldr	r2, [r7, #4]
 800d6b0:	211a      	movs	r1, #26
 800d6b2:	fb01 f303 	mul.w	r3, r1, r3
 800d6b6:	4413      	add	r3, r2
 800d6b8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800d6bc:	881a      	ldrh	r2, [r3, #0]
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	7b9b      	ldrb	r3, [r3, #14]
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f001 ffe8 	bl	800f69e <USBH_AllocPipe>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	7bdb      	ldrb	r3, [r3, #15]
 800d6da:	4619      	mov	r1, r3
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f001 ffde 	bl	800f69e <USBH_AllocPipe>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	7b59      	ldrb	r1, [r3, #13]
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	7b98      	ldrb	r0, [r3, #14]
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d6fe:	68ba      	ldr	r2, [r7, #8]
 800d700:	8b12      	ldrh	r2, [r2, #24]
 800d702:	9202      	str	r2, [sp, #8]
 800d704:	2202      	movs	r2, #2
 800d706:	9201      	str	r2, [sp, #4]
 800d708:	9300      	str	r3, [sp, #0]
 800d70a:	4623      	mov	r3, r4
 800d70c:	4602      	mov	r2, r0
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f001 ff96 	bl	800f640 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	7b19      	ldrb	r1, [r3, #12]
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	7bd8      	ldrb	r0, [r3, #15]
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d728:	68ba      	ldr	r2, [r7, #8]
 800d72a:	8b52      	ldrh	r2, [r2, #26]
 800d72c:	9202      	str	r2, [sp, #8]
 800d72e:	2202      	movs	r2, #2
 800d730:	9201      	str	r2, [sp, #4]
 800d732:	9300      	str	r3, [sp, #0]
 800d734:	4623      	mov	r3, r4
 800d736:	4602      	mov	r2, r0
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f001 ff81 	bl	800f640 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	2200      	movs	r2, #0
 800d742:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	7b5b      	ldrb	r3, [r3, #13]
 800d74a:	2200      	movs	r2, #0
 800d74c:	4619      	mov	r1, r3
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f007 fdc8 	bl	80152e4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	7b1b      	ldrb	r3, [r3, #12]
 800d758:	2200      	movs	r2, #0
 800d75a:	4619      	mov	r1, r3
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f007 fdc1 	bl	80152e4 <USBH_LL_SetToggle>

  return USBH_OK;
 800d762:	2300      	movs	r3, #0
}
 800d764:	4618      	mov	r0, r3
 800d766:	3714      	adds	r7, #20
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd90      	pop	{r4, r7, pc}

0800d76c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b084      	sub	sp, #16
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d77a:	69db      	ldr	r3, [r3, #28]
 800d77c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	781b      	ldrb	r3, [r3, #0]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d00e      	beq.n	800d7a4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	781b      	ldrb	r3, [r3, #0]
 800d78a:	4619      	mov	r1, r3
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f001 ff76 	bl	800f67e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	781b      	ldrb	r3, [r3, #0]
 800d796:	4619      	mov	r1, r3
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f001 ffa1 	bl	800f6e0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	7b1b      	ldrb	r3, [r3, #12]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d00e      	beq.n	800d7ca <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	7b1b      	ldrb	r3, [r3, #12]
 800d7b0:	4619      	mov	r1, r3
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f001 ff63 	bl	800f67e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	7b1b      	ldrb	r3, [r3, #12]
 800d7bc:	4619      	mov	r1, r3
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f001 ff8e 	bl	800f6e0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	7b5b      	ldrb	r3, [r3, #13]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d00e      	beq.n	800d7f0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	7b5b      	ldrb	r3, [r3, #13]
 800d7d6:	4619      	mov	r1, r3
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f001 ff50 	bl	800f67e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	7b5b      	ldrb	r3, [r3, #13]
 800d7e2:	4619      	mov	r1, r3
 800d7e4:	6878      	ldr	r0, [r7, #4]
 800d7e6:	f001 ff7b 	bl	800f6e0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d7f6:	69db      	ldr	r3, [r3, #28]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d00b      	beq.n	800d814 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d802:	69db      	ldr	r3, [r3, #28]
 800d804:	4618      	mov	r0, r3
 800d806:	f007 ff31 	bl	801566c <free>
    phost->pActiveClass->pData = 0U;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d810:	2200      	movs	r2, #0
 800d812:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800d814:	2300      	movs	r3, #0
}
 800d816:	4618      	mov	r0, r3
 800d818:	3710      	adds	r7, #16
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}

0800d81e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800d81e:	b580      	push	{r7, lr}
 800d820:	b084      	sub	sp, #16
 800d822:	af00      	add	r7, sp, #0
 800d824:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d82c:	69db      	ldr	r3, [r3, #28]
 800d82e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	3340      	adds	r3, #64	; 0x40
 800d834:	4619      	mov	r1, r3
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f000 f8b1 	bl	800d99e <GetLineCoding>
 800d83c:	4603      	mov	r3, r0
 800d83e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800d840:	7afb      	ldrb	r3, [r7, #11]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d105      	bne.n	800d852 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d84c:	2102      	movs	r1, #2
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800d852:	7afb      	ldrb	r3, [r7, #11]
}
 800d854:	4618      	mov	r0, r3
 800d856:	3710      	adds	r7, #16
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}

0800d85c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b084      	sub	sp, #16
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800d864:	2301      	movs	r3, #1
 800d866:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800d868:	2300      	movs	r3, #0
 800d86a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d872:	69db      	ldr	r3, [r3, #28]
 800d874:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800d87c:	2b04      	cmp	r3, #4
 800d87e:	d877      	bhi.n	800d970 <USBH_CDC_Process+0x114>
 800d880:	a201      	add	r2, pc, #4	; (adr r2, 800d888 <USBH_CDC_Process+0x2c>)
 800d882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d886:	bf00      	nop
 800d888:	0800d89d 	.word	0x0800d89d
 800d88c:	0800d8a3 	.word	0x0800d8a3
 800d890:	0800d8d3 	.word	0x0800d8d3
 800d894:	0800d947 	.word	0x0800d947
 800d898:	0800d955 	.word	0x0800d955
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800d89c:	2300      	movs	r3, #0
 800d89e:	73fb      	strb	r3, [r7, #15]
      break;
 800d8a0:	e06d      	b.n	800d97e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f000 f897 	bl	800d9dc <SetLineCoding>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d8b2:	7bbb      	ldrb	r3, [r7, #14]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d104      	bne.n	800d8c2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	2202      	movs	r2, #2
 800d8bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800d8c0:	e058      	b.n	800d974 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800d8c2:	7bbb      	ldrb	r3, [r7, #14]
 800d8c4:	2b01      	cmp	r3, #1
 800d8c6:	d055      	beq.n	800d974 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	2204      	movs	r2, #4
 800d8cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800d8d0:	e050      	b.n	800d974 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	3340      	adds	r3, #64	; 0x40
 800d8d6:	4619      	mov	r1, r3
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f000 f860 	bl	800d99e <GetLineCoding>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d8e2:	7bbb      	ldrb	r3, [r7, #14]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d126      	bne.n	800d936 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d8fa:	791b      	ldrb	r3, [r3, #4]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d13b      	bne.n	800d978 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d90a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d133      	bne.n	800d978 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d91a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d12b      	bne.n	800d978 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d928:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d92a:	429a      	cmp	r2, r3
 800d92c:	d124      	bne.n	800d978 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f000 f984 	bl	800dc3c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800d934:	e020      	b.n	800d978 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800d936:	7bbb      	ldrb	r3, [r7, #14]
 800d938:	2b01      	cmp	r3, #1
 800d93a:	d01d      	beq.n	800d978 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	2204      	movs	r2, #4
 800d940:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800d944:	e018      	b.n	800d978 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f000 f867 	bl	800da1a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f000 f8f8 	bl	800db42 <CDC_ProcessReception>
      break;
 800d952:	e014      	b.n	800d97e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800d954:	2100      	movs	r1, #0
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f001 f94f 	bl	800ebfa <USBH_ClrFeature>
 800d95c:	4603      	mov	r3, r0
 800d95e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d960:	7bbb      	ldrb	r3, [r7, #14]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d10a      	bne.n	800d97c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	2200      	movs	r2, #0
 800d96a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800d96e:	e005      	b.n	800d97c <USBH_CDC_Process+0x120>

    default:
      break;
 800d970:	bf00      	nop
 800d972:	e004      	b.n	800d97e <USBH_CDC_Process+0x122>
      break;
 800d974:	bf00      	nop
 800d976:	e002      	b.n	800d97e <USBH_CDC_Process+0x122>
      break;
 800d978:	bf00      	nop
 800d97a:	e000      	b.n	800d97e <USBH_CDC_Process+0x122>
      break;
 800d97c:	bf00      	nop

  }

  return status;
 800d97e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d980:	4618      	mov	r0, r3
 800d982:	3710      	adds	r7, #16
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}

0800d988 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800d988:	b480      	push	{r7}
 800d98a:	b083      	sub	sp, #12
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800d990:	2300      	movs	r3, #0
}
 800d992:	4618      	mov	r0, r3
 800d994:	370c      	adds	r7, #12
 800d996:	46bd      	mov	sp, r7
 800d998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99c:	4770      	bx	lr

0800d99e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800d99e:	b580      	push	{r7, lr}
 800d9a0:	b082      	sub	sp, #8
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	6078      	str	r0, [r7, #4]
 800d9a6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	22a1      	movs	r2, #161	; 0xa1
 800d9ac:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2221      	movs	r2, #33	; 0x21
 800d9b2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2200      	movs	r2, #0
 800d9be:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2207      	movs	r2, #7
 800d9c4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	2207      	movs	r2, #7
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f001 faf4 	bl	800efba <USBH_CtlReq>
 800d9d2:	4603      	mov	r3, r0
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3708      	adds	r7, #8
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}

0800d9dc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b082      	sub	sp, #8
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2221      	movs	r2, #33	; 0x21
 800d9ea:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2220      	movs	r2, #32
 800d9f0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2207      	movs	r2, #7
 800da02:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	2207      	movs	r2, #7
 800da08:	4619      	mov	r1, r3
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f001 fad5 	bl	800efba <USBH_CtlReq>
 800da10:	4603      	mov	r3, r0
}
 800da12:	4618      	mov	r0, r3
 800da14:	3708      	adds	r7, #8
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}

0800da1a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800da1a:	b580      	push	{r7, lr}
 800da1c:	b086      	sub	sp, #24
 800da1e:	af02      	add	r7, sp, #8
 800da20:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800da28:	69db      	ldr	r3, [r3, #28]
 800da2a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800da2c:	2300      	movs	r3, #0
 800da2e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800da36:	2b01      	cmp	r3, #1
 800da38:	d002      	beq.n	800da40 <CDC_ProcessTransmission+0x26>
 800da3a:	2b02      	cmp	r3, #2
 800da3c:	d025      	beq.n	800da8a <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800da3e:	e07c      	b.n	800db3a <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da44:	68fa      	ldr	r2, [r7, #12]
 800da46:	8b12      	ldrh	r2, [r2, #24]
 800da48:	4293      	cmp	r3, r2
 800da4a:	d90c      	bls.n	800da66 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	69d9      	ldr	r1, [r3, #28]
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	8b1a      	ldrh	r2, [r3, #24]
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	7b58      	ldrb	r0, [r3, #13]
 800da58:	2301      	movs	r3, #1
 800da5a:	9300      	str	r3, [sp, #0]
 800da5c:	4603      	mov	r3, r0
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f001 fdab 	bl	800f5ba <USBH_BulkSendData>
 800da64:	e00c      	b.n	800da80 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800da6e:	b29a      	uxth	r2, r3
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	7b58      	ldrb	r0, [r3, #13]
 800da74:	2301      	movs	r3, #1
 800da76:	9300      	str	r3, [sp, #0]
 800da78:	4603      	mov	r3, r0
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f001 fd9d 	bl	800f5ba <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	2202      	movs	r2, #2
 800da84:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800da88:	e057      	b.n	800db3a <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	7b5b      	ldrb	r3, [r3, #13]
 800da8e:	4619      	mov	r1, r3
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f007 fbfd 	bl	8015290 <USBH_LL_GetURBState>
 800da96:	4603      	mov	r3, r0
 800da98:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800da9a:	7afb      	ldrb	r3, [r7, #11]
 800da9c:	2b01      	cmp	r3, #1
 800da9e:	d136      	bne.n	800db0e <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa4:	68fa      	ldr	r2, [r7, #12]
 800daa6:	8b12      	ldrh	r2, [r2, #24]
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d90e      	bls.n	800daca <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dab0:	68fa      	ldr	r2, [r7, #12]
 800dab2:	8b12      	ldrh	r2, [r2, #24]
 800dab4:	1a9a      	subs	r2, r3, r2
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	69db      	ldr	r3, [r3, #28]
 800dabe:	68fa      	ldr	r2, [r7, #12]
 800dac0:	8b12      	ldrh	r2, [r2, #24]
 800dac2:	441a      	add	r2, r3
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	61da      	str	r2, [r3, #28]
 800dac8:	e002      	b.n	800dad0 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	2200      	movs	r2, #0
 800dace:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d004      	beq.n	800dae2 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	2201      	movs	r2, #1
 800dadc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800dae0:	e006      	b.n	800daf0 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	2200      	movs	r2, #0
 800dae6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f000 f892 	bl	800dc14 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2204      	movs	r2, #4
 800daf4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800db04:	2300      	movs	r3, #0
 800db06:	2200      	movs	r2, #0
 800db08:	f004 fbce 	bl	80122a8 <osMessageQueuePut>
      break;
 800db0c:	e014      	b.n	800db38 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 800db0e:	7afb      	ldrb	r3, [r7, #11]
 800db10:	2b02      	cmp	r3, #2
 800db12:	d111      	bne.n	800db38 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	2201      	movs	r2, #1
 800db18:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2204      	movs	r2, #4
 800db20:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800db30:	2300      	movs	r3, #0
 800db32:	2200      	movs	r2, #0
 800db34:	f004 fbb8 	bl	80122a8 <osMessageQueuePut>
      break;
 800db38:	bf00      	nop
  }
}
 800db3a:	bf00      	nop
 800db3c:	3710      	adds	r7, #16
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}

0800db42 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800db42:	b580      	push	{r7, lr}
 800db44:	b086      	sub	sp, #24
 800db46:	af00      	add	r7, sp, #0
 800db48:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800db50:	69db      	ldr	r3, [r3, #28]
 800db52:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800db54:	2300      	movs	r3, #0
 800db56:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800db58:	697b      	ldr	r3, [r7, #20]
 800db5a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800db5e:	2b03      	cmp	r3, #3
 800db60:	d002      	beq.n	800db68 <CDC_ProcessReception+0x26>
 800db62:	2b04      	cmp	r3, #4
 800db64:	d00e      	beq.n	800db84 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800db66:	e051      	b.n	800dc0c <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	6a19      	ldr	r1, [r3, #32]
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	8b5a      	ldrh	r2, [r3, #26]
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	7b1b      	ldrb	r3, [r3, #12]
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f001 fd45 	bl	800f604 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	2204      	movs	r2, #4
 800db7e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800db82:	e043      	b.n	800dc0c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800db84:	697b      	ldr	r3, [r7, #20]
 800db86:	7b1b      	ldrb	r3, [r3, #12]
 800db88:	4619      	mov	r1, r3
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f007 fb80 	bl	8015290 <USBH_LL_GetURBState>
 800db90:	4603      	mov	r3, r0
 800db92:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800db94:	7cfb      	ldrb	r3, [r7, #19]
 800db96:	2b01      	cmp	r3, #1
 800db98:	d137      	bne.n	800dc0a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	7b1b      	ldrb	r3, [r3, #12]
 800db9e:	4619      	mov	r1, r3
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f007 fae3 	bl	801516c <USBH_LL_GetLastXferSize>
 800dba6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbac:	68fa      	ldr	r2, [r7, #12]
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d016      	beq.n	800dbe0 <CDC_ProcessReception+0x9e>
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	8b5b      	ldrh	r3, [r3, #26]
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	d910      	bls.n	800dbe0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	1ad2      	subs	r2, r2, r3
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	6a1a      	ldr	r2, [r3, #32]
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	441a      	add	r2, r3
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	2203      	movs	r2, #3
 800dbda:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800dbde:	e006      	b.n	800dbee <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f000 f81d 	bl	800dc28 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2204      	movs	r2, #4
 800dbf2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dc02:	2300      	movs	r3, #0
 800dc04:	2200      	movs	r2, #0
 800dc06:	f004 fb4f 	bl	80122a8 <osMessageQueuePut>
      break;
 800dc0a:	bf00      	nop
  }
}
 800dc0c:	bf00      	nop
 800dc0e:	3718      	adds	r7, #24
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}

0800dc14 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800dc14:	b480      	push	{r7}
 800dc16:	b083      	sub	sp, #12
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800dc1c:	bf00      	nop
 800dc1e:	370c      	adds	r7, #12
 800dc20:	46bd      	mov	sp, r7
 800dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc26:	4770      	bx	lr

0800dc28 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b083      	sub	sp, #12
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800dc30:	bf00      	nop
 800dc32:	370c      	adds	r7, #12
 800dc34:	46bd      	mov	sp, r7
 800dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3a:	4770      	bx	lr

0800dc3c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b083      	sub	sp, #12
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800dc44:	bf00      	nop
 800dc46:	370c      	adds	r7, #12
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4e:	4770      	bx	lr

0800dc50 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b084      	sub	sp, #16
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	60f8      	str	r0, [r7, #12]
 800dc58:	60b9      	str	r1, [r7, #8]
 800dc5a:	4613      	mov	r3, r2
 800dc5c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d101      	bne.n	800dc68 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800dc64:	2302      	movs	r3, #2
 800dc66:	e044      	b.n	800dcf2 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	79fa      	ldrb	r2, [r7, #7]
 800dc6c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	2200      	movs	r2, #0
 800dc74:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800dc80:	68f8      	ldr	r0, [r7, #12]
 800dc82:	f000 f841 	bl	800dd08 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	2200      	movs	r2, #0
 800dc92:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	2200      	movs	r2, #0
 800dca2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d003      	beq.n	800dcb4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	68ba      	ldr	r2, [r7, #8]
 800dcb0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	2104      	movs	r1, #4
 800dcb8:	2010      	movs	r0, #16
 800dcba:	f004 fa6f 	bl	801219c <osMessageQueueNew>
 800dcbe:	4602      	mov	r2, r0
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800dcc6:	4b0d      	ldr	r3, [pc, #52]	; (800dcfc <USBH_Init+0xac>)
 800dcc8:	4a0d      	ldr	r2, [pc, #52]	; (800dd00 <USBH_Init+0xb0>)
 800dcca:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800dccc:	4b0b      	ldr	r3, [pc, #44]	; (800dcfc <USBH_Init+0xac>)
 800dcce:	2280      	movs	r2, #128	; 0x80
 800dcd0:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800dcd2:	4b0a      	ldr	r3, [pc, #40]	; (800dcfc <USBH_Init+0xac>)
 800dcd4:	2218      	movs	r2, #24
 800dcd6:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800dcd8:	4a08      	ldr	r2, [pc, #32]	; (800dcfc <USBH_Init+0xac>)
 800dcda:	68f9      	ldr	r1, [r7, #12]
 800dcdc:	4809      	ldr	r0, [pc, #36]	; (800dd04 <USBH_Init+0xb4>)
 800dcde:	f004 f989 	bl	8011ff4 <osThreadNew>
 800dce2:	4602      	mov	r2, r0
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800dcea:	68f8      	ldr	r0, [r7, #12]
 800dcec:	f007 f98c 	bl	8015008 <USBH_LL_Init>

  return USBH_OK;
 800dcf0:	2300      	movs	r3, #0
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3710      	adds	r7, #16
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	2003dd94 	.word	0x2003dd94
 800dd00:	08015f9c 	.word	0x08015f9c
 800dd04:	0800e971 	.word	0x0800e971

0800dd08 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b085      	sub	sp, #20
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800dd10:	2300      	movs	r3, #0
 800dd12:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800dd14:	2300      	movs	r3, #0
 800dd16:	60fb      	str	r3, [r7, #12]
 800dd18:	e009      	b.n	800dd2e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800dd1a:	687a      	ldr	r2, [r7, #4]
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	33e0      	adds	r3, #224	; 0xe0
 800dd20:	009b      	lsls	r3, r3, #2
 800dd22:	4413      	add	r3, r2
 800dd24:	2200      	movs	r2, #0
 800dd26:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	3301      	adds	r3, #1
 800dd2c:	60fb      	str	r3, [r7, #12]
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2b0e      	cmp	r3, #14
 800dd32:	d9f2      	bls.n	800dd1a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800dd34:	2300      	movs	r3, #0
 800dd36:	60fb      	str	r3, [r7, #12]
 800dd38:	e009      	b.n	800dd4e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800dd3a:	687a      	ldr	r2, [r7, #4]
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	4413      	add	r3, r2
 800dd40:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800dd44:	2200      	movs	r2, #0
 800dd46:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	3301      	adds	r3, #1
 800dd4c:	60fb      	str	r3, [r7, #12]
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd54:	d3f1      	bcc.n	800dd3a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2200      	movs	r2, #0
 800dd5a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2200      	movs	r2, #0
 800dd60:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2201      	movs	r2, #1
 800dd66:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2201      	movs	r2, #1
 800dd74:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2240      	movs	r2, #64	; 0x40
 800dd7a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2200      	movs	r2, #0
 800dd86:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2201      	movs	r2, #1
 800dd8e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2200      	movs	r2, #0
 800dd96:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800dda2:	2300      	movs	r3, #0
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3714      	adds	r7, #20
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr

0800ddb0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b085      	sub	sp, #20
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d016      	beq.n	800ddf2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d10e      	bne.n	800ddec <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ddd4:	1c59      	adds	r1, r3, #1
 800ddd6:	687a      	ldr	r2, [r7, #4]
 800ddd8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800dddc:	687a      	ldr	r2, [r7, #4]
 800ddde:	33de      	adds	r3, #222	; 0xde
 800dde0:	6839      	ldr	r1, [r7, #0]
 800dde2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800dde6:	2300      	movs	r3, #0
 800dde8:	73fb      	strb	r3, [r7, #15]
 800ddea:	e004      	b.n	800ddf6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ddec:	2302      	movs	r3, #2
 800ddee:	73fb      	strb	r3, [r7, #15]
 800ddf0:	e001      	b.n	800ddf6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ddf2:	2302      	movs	r3, #2
 800ddf4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ddf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3714      	adds	r7, #20
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de02:	4770      	bx	lr

0800de04 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800de04:	b480      	push	{r7}
 800de06:	b085      	sub	sp, #20
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	460b      	mov	r3, r1
 800de0e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800de10:	2300      	movs	r3, #0
 800de12:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800de1a:	78fa      	ldrb	r2, [r7, #3]
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d204      	bcs.n	800de2a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	78fa      	ldrb	r2, [r7, #3]
 800de24:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800de28:	e001      	b.n	800de2e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800de2a:	2302      	movs	r3, #2
 800de2c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800de2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800de30:	4618      	mov	r0, r3
 800de32:	3714      	adds	r7, #20
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr

0800de3c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800de3c:	b480      	push	{r7}
 800de3e:	b087      	sub	sp, #28
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	4608      	mov	r0, r1
 800de46:	4611      	mov	r1, r2
 800de48:	461a      	mov	r2, r3
 800de4a:	4603      	mov	r3, r0
 800de4c:	70fb      	strb	r3, [r7, #3]
 800de4e:	460b      	mov	r3, r1
 800de50:	70bb      	strb	r3, [r7, #2]
 800de52:	4613      	mov	r3, r2
 800de54:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800de56:	2300      	movs	r3, #0
 800de58:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800de5a:	2300      	movs	r3, #0
 800de5c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800de64:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800de66:	e025      	b.n	800deb4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800de68:	7dfb      	ldrb	r3, [r7, #23]
 800de6a:	221a      	movs	r2, #26
 800de6c:	fb02 f303 	mul.w	r3, r2, r3
 800de70:	3308      	adds	r3, #8
 800de72:	68fa      	ldr	r2, [r7, #12]
 800de74:	4413      	add	r3, r2
 800de76:	3302      	adds	r3, #2
 800de78:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	795b      	ldrb	r3, [r3, #5]
 800de7e:	78fa      	ldrb	r2, [r7, #3]
 800de80:	429a      	cmp	r2, r3
 800de82:	d002      	beq.n	800de8a <USBH_FindInterface+0x4e>
 800de84:	78fb      	ldrb	r3, [r7, #3]
 800de86:	2bff      	cmp	r3, #255	; 0xff
 800de88:	d111      	bne.n	800deae <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800de8e:	78ba      	ldrb	r2, [r7, #2]
 800de90:	429a      	cmp	r2, r3
 800de92:	d002      	beq.n	800de9a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800de94:	78bb      	ldrb	r3, [r7, #2]
 800de96:	2bff      	cmp	r3, #255	; 0xff
 800de98:	d109      	bne.n	800deae <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800de9a:	693b      	ldr	r3, [r7, #16]
 800de9c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800de9e:	787a      	ldrb	r2, [r7, #1]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d002      	beq.n	800deaa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800dea4:	787b      	ldrb	r3, [r7, #1]
 800dea6:	2bff      	cmp	r3, #255	; 0xff
 800dea8:	d101      	bne.n	800deae <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800deaa:	7dfb      	ldrb	r3, [r7, #23]
 800deac:	e006      	b.n	800debc <USBH_FindInterface+0x80>
    }
    if_ix++;
 800deae:	7dfb      	ldrb	r3, [r7, #23]
 800deb0:	3301      	adds	r3, #1
 800deb2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800deb4:	7dfb      	ldrb	r3, [r7, #23]
 800deb6:	2b01      	cmp	r3, #1
 800deb8:	d9d6      	bls.n	800de68 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800deba:	23ff      	movs	r3, #255	; 0xff
}
 800debc:	4618      	mov	r0, r3
 800debe:	371c      	adds	r7, #28
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr

0800dec8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f007 f8d5 	bl	8015080 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800ded6:	2101      	movs	r1, #1
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f007 f9ec 	bl	80152b6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800dede:	2300      	movs	r3, #0
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3708      	adds	r7, #8
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}

0800dee8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b088      	sub	sp, #32
 800deec:	af04      	add	r7, sp, #16
 800deee:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800def0:	2302      	movs	r3, #2
 800def2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800def4:	2300      	movs	r3, #0
 800def6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800defe:	b2db      	uxtb	r3, r3
 800df00:	2b01      	cmp	r3, #1
 800df02:	d102      	bne.n	800df0a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2203      	movs	r2, #3
 800df08:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	2b0b      	cmp	r3, #11
 800df12:	f200 823c 	bhi.w	800e38e <USBH_Process+0x4a6>
 800df16:	a201      	add	r2, pc, #4	; (adr r2, 800df1c <USBH_Process+0x34>)
 800df18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df1c:	0800df4d 	.word	0x0800df4d
 800df20:	0800df9b 	.word	0x0800df9b
 800df24:	0800e01f 	.word	0x0800e01f
 800df28:	0800e30d 	.word	0x0800e30d
 800df2c:	0800e38f 	.word	0x0800e38f
 800df30:	0800e0df 	.word	0x0800e0df
 800df34:	0800e297 	.word	0x0800e297
 800df38:	0800e131 	.word	0x0800e131
 800df3c:	0800e16d 	.word	0x0800e16d
 800df40:	0800e1a7 	.word	0x0800e1a7
 800df44:	0800e1ef 	.word	0x0800e1ef
 800df48:	0800e2f5 	.word	0x0800e2f5
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800df52:	b2db      	uxtb	r3, r3
 800df54:	2b00      	cmp	r3, #0
 800df56:	f000 821c 	beq.w	800e392 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2201      	movs	r2, #1
 800df5e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800df60:	20c8      	movs	r0, #200	; 0xc8
 800df62:	f007 f9f2 	bl	801534a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f007 f8e5 	bl	8015136 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2200      	movs	r2, #0
 800df70:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2200      	movs	r2, #0
 800df78:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2201      	movs	r2, #1
 800df80:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800df90:	2300      	movs	r3, #0
 800df92:	2200      	movs	r2, #0
 800df94:	f004 f988 	bl	80122a8 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800df98:	e1fb      	b.n	800e392 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800dfa0:	2b01      	cmp	r3, #1
 800dfa2:	d107      	bne.n	800dfb4 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2202      	movs	r2, #2
 800dfb0:	701a      	strb	r2, [r3, #0]
 800dfb2:	e025      	b.n	800e000 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800dfba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dfbe:	d914      	bls.n	800dfea <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	b2da      	uxtb	r2, r3
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800dfd6:	2b03      	cmp	r3, #3
 800dfd8:	d903      	bls.n	800dfe2 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	220d      	movs	r2, #13
 800dfde:	701a      	strb	r2, [r3, #0]
 800dfe0:	e00e      	b.n	800e000 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	701a      	strb	r2, [r3, #0]
 800dfe8:	e00a      	b.n	800e000 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800dff0:	f103 020a 	add.w	r2, r3, #10
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800dffa:	200a      	movs	r0, #10
 800dffc:	f007 f9a5 	bl	801534a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2201      	movs	r2, #1
 800e004:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e014:	2300      	movs	r3, #0
 800e016:	2200      	movs	r2, #0
 800e018:	f004 f946 	bl	80122a8 <osMessageQueuePut>
#endif
#endif
      break;
 800e01c:	e1c0      	b.n	800e3a0 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e024:	2b00      	cmp	r3, #0
 800e026:	d005      	beq.n	800e034 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e02e:	2104      	movs	r1, #4
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800e034:	2064      	movs	r0, #100	; 0x64
 800e036:	f007 f988 	bl	801534a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f007 f856 	bl	80150ec <USBH_LL_GetSpeed>
 800e040:	4603      	mov	r3, r0
 800e042:	461a      	mov	r2, r3
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2205      	movs	r2, #5
 800e04e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800e050:	2100      	movs	r1, #0
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f001 fb23 	bl	800f69e <USBH_AllocPipe>
 800e058:	4603      	mov	r3, r0
 800e05a:	461a      	mov	r2, r3
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800e060:	2180      	movs	r1, #128	; 0x80
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f001 fb1b 	bl	800f69e <USBH_AllocPipe>
 800e068:	4603      	mov	r3, r0
 800e06a:	461a      	mov	r2, r3
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	7919      	ldrb	r1, [r3, #4]
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e080:	687a      	ldr	r2, [r7, #4]
 800e082:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e084:	b292      	uxth	r2, r2
 800e086:	9202      	str	r2, [sp, #8]
 800e088:	2200      	movs	r2, #0
 800e08a:	9201      	str	r2, [sp, #4]
 800e08c:	9300      	str	r3, [sp, #0]
 800e08e:	4603      	mov	r3, r0
 800e090:	2280      	movs	r2, #128	; 0x80
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f001 fad4 	bl	800f640 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	7959      	ldrb	r1, [r3, #5]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e0a8:	687a      	ldr	r2, [r7, #4]
 800e0aa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e0ac:	b292      	uxth	r2, r2
 800e0ae:	9202      	str	r2, [sp, #8]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	9201      	str	r2, [sp, #4]
 800e0b4:	9300      	str	r3, [sp, #0]
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f001 fac0 	bl	800f640 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2201      	movs	r2, #1
 800e0c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	f004 f8e6 	bl	80122a8 <osMessageQueuePut>
#endif
#endif
      break;
 800e0dc:	e160      	b.n	800e3a0 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f000 f964 	bl	800e3ac <USBH_HandleEnum>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800e0e8:	7bbb      	ldrb	r3, [r7, #14]
 800e0ea:	b2db      	uxtb	r3, r3
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	f040 8152 	bne.w	800e396 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800e100:	2b01      	cmp	r3, #1
 800e102:	d103      	bne.n	800e10c <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2208      	movs	r2, #8
 800e108:	701a      	strb	r2, [r3, #0]
 800e10a:	e002      	b.n	800e112 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2207      	movs	r2, #7
 800e110:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2205      	movs	r2, #5
 800e116:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e126:	2300      	movs	r3, #0
 800e128:	2200      	movs	r2, #0
 800e12a:	f004 f8bd 	bl	80122a8 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800e12e:	e132      	b.n	800e396 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e136:	2b00      	cmp	r3, #0
 800e138:	f000 812f 	beq.w	800e39a <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e142:	2101      	movs	r1, #1
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2208      	movs	r2, #8
 800e14c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2205      	movs	r2, #5
 800e152:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e162:	2300      	movs	r3, #0
 800e164:	2200      	movs	r2, #0
 800e166:	f004 f89f 	bl	80122a8 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800e16a:	e116      	b.n	800e39a <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800e172:	b29b      	uxth	r3, r3
 800e174:	4619      	mov	r1, r3
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f000 fcf8 	bl	800eb6c <USBH_SetCfg>
 800e17c:	4603      	mov	r3, r0
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d102      	bne.n	800e188 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2209      	movs	r2, #9
 800e186:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2201      	movs	r2, #1
 800e18c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e19c:	2300      	movs	r3, #0
 800e19e:	2200      	movs	r2, #0
 800e1a0:	f004 f882 	bl	80122a8 <osMessageQueuePut>
#endif
#endif
      break;
 800e1a4:	e0fc      	b.n	800e3a0 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800e1ac:	f003 0320 	and.w	r3, r3, #32
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d00a      	beq.n	800e1ca <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800e1b4:	2101      	movs	r1, #1
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f000 fcfb 	bl	800ebb2 <USBH_SetFeature>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d106      	bne.n	800e1d0 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	220a      	movs	r2, #10
 800e1c6:	701a      	strb	r2, [r3, #0]
 800e1c8:	e002      	b.n	800e1d0 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	220a      	movs	r2, #10
 800e1ce:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2201      	movs	r2, #1
 800e1d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	f004 f85e 	bl	80122a8 <osMessageQueuePut>
#endif
#endif
      break;
 800e1ec:	e0d8      	b.n	800e3a0 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d03f      	beq.n	800e278 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e200:	2300      	movs	r3, #0
 800e202:	73fb      	strb	r3, [r7, #15]
 800e204:	e016      	b.n	800e234 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800e206:	7bfa      	ldrb	r2, [r7, #15]
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	32de      	adds	r2, #222	; 0xde
 800e20c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e210:	791a      	ldrb	r2, [r3, #4]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800e218:	429a      	cmp	r2, r3
 800e21a:	d108      	bne.n	800e22e <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800e21c:	7bfa      	ldrb	r2, [r7, #15]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	32de      	adds	r2, #222	; 0xde
 800e222:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800e22c:	e005      	b.n	800e23a <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e22e:	7bfb      	ldrb	r3, [r7, #15]
 800e230:	3301      	adds	r3, #1
 800e232:	73fb      	strb	r3, [r7, #15]
 800e234:	7bfb      	ldrb	r3, [r7, #15]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d0e5      	beq.n	800e206 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e240:	2b00      	cmp	r3, #0
 800e242:	d016      	beq.n	800e272 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e24a:	689b      	ldr	r3, [r3, #8]
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	4798      	blx	r3
 800e250:	4603      	mov	r3, r0
 800e252:	2b00      	cmp	r3, #0
 800e254:	d109      	bne.n	800e26a <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2206      	movs	r2, #6
 800e25a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e262:	2103      	movs	r1, #3
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	4798      	blx	r3
 800e268:	e006      	b.n	800e278 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	220d      	movs	r2, #13
 800e26e:	701a      	strb	r2, [r3, #0]
 800e270:	e002      	b.n	800e278 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	220d      	movs	r2, #13
 800e276:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	2205      	movs	r2, #5
 800e27c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e28c:	2300      	movs	r3, #0
 800e28e:	2200      	movs	r2, #0
 800e290:	f004 f80a 	bl	80122a8 <osMessageQueuePut>
#endif
#endif
      break;
 800e294:	e084      	b.n	800e3a0 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d017      	beq.n	800e2d0 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e2a6:	691b      	ldr	r3, [r3, #16]
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	4798      	blx	r3
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e2b0:	7bbb      	ldrb	r3, [r7, #14]
 800e2b2:	b2db      	uxtb	r3, r3
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d103      	bne.n	800e2c0 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	220b      	movs	r2, #11
 800e2bc:	701a      	strb	r2, [r3, #0]
 800e2be:	e00a      	b.n	800e2d6 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800e2c0:	7bbb      	ldrb	r3, [r7, #14]
 800e2c2:	b2db      	uxtb	r3, r3
 800e2c4:	2b02      	cmp	r3, #2
 800e2c6:	d106      	bne.n	800e2d6 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	220d      	movs	r2, #13
 800e2cc:	701a      	strb	r2, [r3, #0]
 800e2ce:	e002      	b.n	800e2d6 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	220d      	movs	r2, #13
 800e2d4:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2205      	movs	r2, #5
 800e2da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	f003 ffdb 	bl	80122a8 <osMessageQueuePut>
#endif
#endif
      break;
 800e2f2:	e055      	b.n	800e3a0 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d04f      	beq.n	800e39e <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e304:	695b      	ldr	r3, [r3, #20]
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	4798      	blx	r3
      }
      break;
 800e30a:	e048      	b.n	800e39e <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2200      	movs	r2, #0
 800e310:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f7ff fcf7 	bl	800dd08 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e320:	2b00      	cmp	r3, #0
 800e322:	d009      	beq.n	800e338 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e32a:	68db      	ldr	r3, [r3, #12]
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2200      	movs	r2, #0
 800e334:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d005      	beq.n	800e34e <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e348:	2105      	movs	r1, #5
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800e354:	b2db      	uxtb	r3, r3
 800e356:	2b01      	cmp	r3, #1
 800e358:	d107      	bne.n	800e36a <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2200      	movs	r2, #0
 800e35e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f7ff fdb0 	bl	800dec8 <USBH_Start>
 800e368:	e002      	b.n	800e370 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f006 fe88 	bl	8015080 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2201      	movs	r2, #1
 800e374:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e384:	2300      	movs	r3, #0
 800e386:	2200      	movs	r2, #0
 800e388:	f003 ff8e 	bl	80122a8 <osMessageQueuePut>
#endif
#endif
      break;
 800e38c:	e008      	b.n	800e3a0 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800e38e:	bf00      	nop
 800e390:	e006      	b.n	800e3a0 <USBH_Process+0x4b8>
      break;
 800e392:	bf00      	nop
 800e394:	e004      	b.n	800e3a0 <USBH_Process+0x4b8>
      break;
 800e396:	bf00      	nop
 800e398:	e002      	b.n	800e3a0 <USBH_Process+0x4b8>
    break;
 800e39a:	bf00      	nop
 800e39c:	e000      	b.n	800e3a0 <USBH_Process+0x4b8>
      break;
 800e39e:	bf00      	nop
  }
  return USBH_OK;
 800e3a0:	2300      	movs	r3, #0
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3710      	adds	r7, #16
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
 800e3aa:	bf00      	nop

0800e3ac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b088      	sub	sp, #32
 800e3b0:	af04      	add	r7, sp, #16
 800e3b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	785b      	ldrb	r3, [r3, #1]
 800e3c0:	2b07      	cmp	r3, #7
 800e3c2:	f200 8208 	bhi.w	800e7d6 <USBH_HandleEnum+0x42a>
 800e3c6:	a201      	add	r2, pc, #4	; (adr r2, 800e3cc <USBH_HandleEnum+0x20>)
 800e3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3cc:	0800e3ed 	.word	0x0800e3ed
 800e3d0:	0800e4ab 	.word	0x0800e4ab
 800e3d4:	0800e515 	.word	0x0800e515
 800e3d8:	0800e5a3 	.word	0x0800e5a3
 800e3dc:	0800e60d 	.word	0x0800e60d
 800e3e0:	0800e67d 	.word	0x0800e67d
 800e3e4:	0800e719 	.word	0x0800e719
 800e3e8:	0800e797 	.word	0x0800e797
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800e3ec:	2108      	movs	r1, #8
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f000 faec 	bl	800e9cc <USBH_Get_DevDesc>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e3f8:	7bbb      	ldrb	r3, [r7, #14]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d130      	bne.n	800e460 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2201      	movs	r2, #1
 800e40c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	7919      	ldrb	r1, [r3, #4]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e41e:	687a      	ldr	r2, [r7, #4]
 800e420:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e422:	b292      	uxth	r2, r2
 800e424:	9202      	str	r2, [sp, #8]
 800e426:	2200      	movs	r2, #0
 800e428:	9201      	str	r2, [sp, #4]
 800e42a:	9300      	str	r3, [sp, #0]
 800e42c:	4603      	mov	r3, r0
 800e42e:	2280      	movs	r2, #128	; 0x80
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f001 f905 	bl	800f640 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	7959      	ldrb	r1, [r3, #5]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e446:	687a      	ldr	r2, [r7, #4]
 800e448:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e44a:	b292      	uxth	r2, r2
 800e44c:	9202      	str	r2, [sp, #8]
 800e44e:	2200      	movs	r2, #0
 800e450:	9201      	str	r2, [sp, #4]
 800e452:	9300      	str	r3, [sp, #0]
 800e454:	4603      	mov	r3, r0
 800e456:	2200      	movs	r2, #0
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f001 f8f1 	bl	800f640 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e45e:	e1bc      	b.n	800e7da <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e460:	7bbb      	ldrb	r3, [r7, #14]
 800e462:	2b03      	cmp	r3, #3
 800e464:	f040 81b9 	bne.w	800e7da <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e46e:	3301      	adds	r3, #1
 800e470:	b2da      	uxtb	r2, r3
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e47e:	2b03      	cmp	r3, #3
 800e480:	d903      	bls.n	800e48a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	220d      	movs	r2, #13
 800e486:	701a      	strb	r2, [r3, #0]
      break;
 800e488:	e1a7      	b.n	800e7da <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	795b      	ldrb	r3, [r3, #5]
 800e48e:	4619      	mov	r1, r3
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f001 f925 	bl	800f6e0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	791b      	ldrb	r3, [r3, #4]
 800e49a:	4619      	mov	r1, r3
 800e49c:	6878      	ldr	r0, [r7, #4]
 800e49e:	f001 f91f 	bl	800f6e0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	701a      	strb	r2, [r3, #0]
      break;
 800e4a8:	e197      	b.n	800e7da <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800e4aa:	2112      	movs	r1, #18
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f000 fa8d 	bl	800e9cc <USBH_Get_DevDesc>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e4b6:	7bbb      	ldrb	r3, [r7, #14]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d103      	bne.n	800e4c4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2202      	movs	r2, #2
 800e4c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e4c2:	e18c      	b.n	800e7de <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e4c4:	7bbb      	ldrb	r3, [r7, #14]
 800e4c6:	2b03      	cmp	r3, #3
 800e4c8:	f040 8189 	bne.w	800e7de <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e4d2:	3301      	adds	r3, #1
 800e4d4:	b2da      	uxtb	r2, r3
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e4e2:	2b03      	cmp	r3, #3
 800e4e4:	d903      	bls.n	800e4ee <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	220d      	movs	r2, #13
 800e4ea:	701a      	strb	r2, [r3, #0]
      break;
 800e4ec:	e177      	b.n	800e7de <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	795b      	ldrb	r3, [r3, #5]
 800e4f2:	4619      	mov	r1, r3
 800e4f4:	6878      	ldr	r0, [r7, #4]
 800e4f6:	f001 f8f3 	bl	800f6e0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	791b      	ldrb	r3, [r3, #4]
 800e4fe:	4619      	mov	r1, r3
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f001 f8ed 	bl	800f6e0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2200      	movs	r2, #0
 800e50a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2200      	movs	r2, #0
 800e510:	701a      	strb	r2, [r3, #0]
      break;
 800e512:	e164      	b.n	800e7de <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800e514:	2101      	movs	r1, #1
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	f000 fb04 	bl	800eb24 <USBH_SetAddress>
 800e51c:	4603      	mov	r3, r0
 800e51e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e520:	7bbb      	ldrb	r3, [r7, #14]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d132      	bne.n	800e58c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800e526:	2002      	movs	r0, #2
 800e528:	f006 ff0f 	bl	801534a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2201      	movs	r2, #1
 800e530:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2203      	movs	r2, #3
 800e538:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	7919      	ldrb	r1, [r3, #4]
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e54a:	687a      	ldr	r2, [r7, #4]
 800e54c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e54e:	b292      	uxth	r2, r2
 800e550:	9202      	str	r2, [sp, #8]
 800e552:	2200      	movs	r2, #0
 800e554:	9201      	str	r2, [sp, #4]
 800e556:	9300      	str	r3, [sp, #0]
 800e558:	4603      	mov	r3, r0
 800e55a:	2280      	movs	r2, #128	; 0x80
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f001 f86f 	bl	800f640 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	7959      	ldrb	r1, [r3, #5]
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e572:	687a      	ldr	r2, [r7, #4]
 800e574:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e576:	b292      	uxth	r2, r2
 800e578:	9202      	str	r2, [sp, #8]
 800e57a:	2200      	movs	r2, #0
 800e57c:	9201      	str	r2, [sp, #4]
 800e57e:	9300      	str	r3, [sp, #0]
 800e580:	4603      	mov	r3, r0
 800e582:	2200      	movs	r2, #0
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f001 f85b 	bl	800f640 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e58a:	e12a      	b.n	800e7e2 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e58c:	7bbb      	ldrb	r3, [r7, #14]
 800e58e:	2b03      	cmp	r3, #3
 800e590:	f040 8127 	bne.w	800e7e2 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	220d      	movs	r2, #13
 800e598:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2200      	movs	r2, #0
 800e59e:	705a      	strb	r2, [r3, #1]
      break;
 800e5a0:	e11f      	b.n	800e7e2 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800e5a2:	2109      	movs	r1, #9
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f000 fa39 	bl	800ea1c <USBH_Get_CfgDesc>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e5ae:	7bbb      	ldrb	r3, [r7, #14]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d103      	bne.n	800e5bc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2204      	movs	r2, #4
 800e5b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e5ba:	e114      	b.n	800e7e6 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e5bc:	7bbb      	ldrb	r3, [r7, #14]
 800e5be:	2b03      	cmp	r3, #3
 800e5c0:	f040 8111 	bne.w	800e7e6 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e5ca:	3301      	adds	r3, #1
 800e5cc:	b2da      	uxtb	r2, r3
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e5da:	2b03      	cmp	r3, #3
 800e5dc:	d903      	bls.n	800e5e6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	220d      	movs	r2, #13
 800e5e2:	701a      	strb	r2, [r3, #0]
      break;
 800e5e4:	e0ff      	b.n	800e7e6 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	795b      	ldrb	r3, [r3, #5]
 800e5ea:	4619      	mov	r1, r3
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f001 f877 	bl	800f6e0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	791b      	ldrb	r3, [r3, #4]
 800e5f6:	4619      	mov	r1, r3
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f001 f871 	bl	800f6e0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2200      	movs	r2, #0
 800e602:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2200      	movs	r2, #0
 800e608:	701a      	strb	r2, [r3, #0]
      break;
 800e60a:	e0ec      	b.n	800e7e6 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800e612:	4619      	mov	r1, r3
 800e614:	6878      	ldr	r0, [r7, #4]
 800e616:	f000 fa01 	bl	800ea1c <USBH_Get_CfgDesc>
 800e61a:	4603      	mov	r3, r0
 800e61c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e61e:	7bbb      	ldrb	r3, [r7, #14]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d103      	bne.n	800e62c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2205      	movs	r2, #5
 800e628:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e62a:	e0de      	b.n	800e7ea <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e62c:	7bbb      	ldrb	r3, [r7, #14]
 800e62e:	2b03      	cmp	r3, #3
 800e630:	f040 80db 	bne.w	800e7ea <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e63a:	3301      	adds	r3, #1
 800e63c:	b2da      	uxtb	r2, r3
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e64a:	2b03      	cmp	r3, #3
 800e64c:	d903      	bls.n	800e656 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	220d      	movs	r2, #13
 800e652:	701a      	strb	r2, [r3, #0]
      break;
 800e654:	e0c9      	b.n	800e7ea <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	795b      	ldrb	r3, [r3, #5]
 800e65a:	4619      	mov	r1, r3
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f001 f83f 	bl	800f6e0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	791b      	ldrb	r3, [r3, #4]
 800e666:	4619      	mov	r1, r3
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f001 f839 	bl	800f6e0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2200      	movs	r2, #0
 800e672:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2200      	movs	r2, #0
 800e678:	701a      	strb	r2, [r3, #0]
      break;
 800e67a:	e0b6      	b.n	800e7ea <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800e682:	2b00      	cmp	r3, #0
 800e684:	d036      	beq.n	800e6f4 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e692:	23ff      	movs	r3, #255	; 0xff
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f000 f9e5 	bl	800ea64 <USBH_Get_StringDesc>
 800e69a:	4603      	mov	r3, r0
 800e69c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e69e:	7bbb      	ldrb	r3, [r7, #14]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d111      	bne.n	800e6c8 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2206      	movs	r2, #6
 800e6a8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2205      	movs	r2, #5
 800e6ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e6be:	2300      	movs	r3, #0
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	f003 fdf1 	bl	80122a8 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e6c6:	e092      	b.n	800e7ee <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e6c8:	7bbb      	ldrb	r3, [r7, #14]
 800e6ca:	2b03      	cmp	r3, #3
 800e6cc:	f040 808f 	bne.w	800e7ee <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2206      	movs	r2, #6
 800e6d4:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2205      	movs	r2, #5
 800e6da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	f003 fddb 	bl	80122a8 <osMessageQueuePut>
      break;
 800e6f2:	e07c      	b.n	800e7ee <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2206      	movs	r2, #6
 800e6f8:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2205      	movs	r2, #5
 800e6fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e70e:	2300      	movs	r3, #0
 800e710:	2200      	movs	r2, #0
 800e712:	f003 fdc9 	bl	80122a8 <osMessageQueuePut>
      break;
 800e716:	e06a      	b.n	800e7ee <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d027      	beq.n	800e772 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e72e:	23ff      	movs	r3, #255	; 0xff
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	f000 f997 	bl	800ea64 <USBH_Get_StringDesc>
 800e736:	4603      	mov	r3, r0
 800e738:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e73a:	7bbb      	ldrb	r3, [r7, #14]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d103      	bne.n	800e748 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2207      	movs	r2, #7
 800e744:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e746:	e054      	b.n	800e7f2 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e748:	7bbb      	ldrb	r3, [r7, #14]
 800e74a:	2b03      	cmp	r3, #3
 800e74c:	d151      	bne.n	800e7f2 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2207      	movs	r2, #7
 800e752:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2205      	movs	r2, #5
 800e758:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e768:	2300      	movs	r3, #0
 800e76a:	2200      	movs	r2, #0
 800e76c:	f003 fd9c 	bl	80122a8 <osMessageQueuePut>
      break;
 800e770:	e03f      	b.n	800e7f2 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2207      	movs	r2, #7
 800e776:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2205      	movs	r2, #5
 800e77c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e78c:	2300      	movs	r3, #0
 800e78e:	2200      	movs	r2, #0
 800e790:	f003 fd8a 	bl	80122a8 <osMessageQueuePut>
      break;
 800e794:	e02d      	b.n	800e7f2 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d017      	beq.n	800e7d0 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e7ac:	23ff      	movs	r3, #255	; 0xff
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f000 f958 	bl	800ea64 <USBH_Get_StringDesc>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e7b8:	7bbb      	ldrb	r3, [r7, #14]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d102      	bne.n	800e7c4 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800e7c2:	e018      	b.n	800e7f6 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e7c4:	7bbb      	ldrb	r3, [r7, #14]
 800e7c6:	2b03      	cmp	r3, #3
 800e7c8:	d115      	bne.n	800e7f6 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	73fb      	strb	r3, [r7, #15]
      break;
 800e7ce:	e012      	b.n	800e7f6 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	73fb      	strb	r3, [r7, #15]
      break;
 800e7d4:	e00f      	b.n	800e7f6 <USBH_HandleEnum+0x44a>

    default:
      break;
 800e7d6:	bf00      	nop
 800e7d8:	e00e      	b.n	800e7f8 <USBH_HandleEnum+0x44c>
      break;
 800e7da:	bf00      	nop
 800e7dc:	e00c      	b.n	800e7f8 <USBH_HandleEnum+0x44c>
      break;
 800e7de:	bf00      	nop
 800e7e0:	e00a      	b.n	800e7f8 <USBH_HandleEnum+0x44c>
      break;
 800e7e2:	bf00      	nop
 800e7e4:	e008      	b.n	800e7f8 <USBH_HandleEnum+0x44c>
      break;
 800e7e6:	bf00      	nop
 800e7e8:	e006      	b.n	800e7f8 <USBH_HandleEnum+0x44c>
      break;
 800e7ea:	bf00      	nop
 800e7ec:	e004      	b.n	800e7f8 <USBH_HandleEnum+0x44c>
      break;
 800e7ee:	bf00      	nop
 800e7f0:	e002      	b.n	800e7f8 <USBH_HandleEnum+0x44c>
      break;
 800e7f2:	bf00      	nop
 800e7f4:	e000      	b.n	800e7f8 <USBH_HandleEnum+0x44c>
      break;
 800e7f6:	bf00      	nop
  }
  return Status;
 800e7f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	3710      	adds	r7, #16
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}
 800e802:	bf00      	nop

0800e804 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800e804:	b480      	push	{r7}
 800e806:	b083      	sub	sp, #12
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
 800e80c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	683a      	ldr	r2, [r7, #0]
 800e812:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800e816:	bf00      	nop
 800e818:	370c      	adds	r7, #12
 800e81a:	46bd      	mov	sp, r7
 800e81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e820:	4770      	bx	lr

0800e822 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800e822:	b580      	push	{r7, lr}
 800e824:	b082      	sub	sp, #8
 800e826:	af00      	add	r7, sp, #0
 800e828:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e830:	1c5a      	adds	r2, r3, #1
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f000 f804 	bl	800e846 <USBH_HandleSof>
}
 800e83e:	bf00      	nop
 800e840:	3708      	adds	r7, #8
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}

0800e846 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800e846:	b580      	push	{r7, lr}
 800e848:	b082      	sub	sp, #8
 800e84a:	af00      	add	r7, sp, #0
 800e84c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	b2db      	uxtb	r3, r3
 800e854:	2b0b      	cmp	r3, #11
 800e856:	d10a      	bne.n	800e86e <USBH_HandleSof+0x28>
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d005      	beq.n	800e86e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e868:	699b      	ldr	r3, [r3, #24]
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	4798      	blx	r3
  }
}
 800e86e:	bf00      	nop
 800e870:	3708      	adds	r7, #8
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}

0800e876 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800e876:	b580      	push	{r7, lr}
 800e878:	b082      	sub	sp, #8
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2201      	movs	r2, #1
 800e882:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2201      	movs	r2, #1
 800e88a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e89a:	2300      	movs	r3, #0
 800e89c:	2200      	movs	r2, #0
 800e89e:	f003 fd03 	bl	80122a8 <osMessageQueuePut>
#endif
#endif

  return;
 800e8a2:	bf00      	nop
}
 800e8a4:	3708      	adds	r7, #8
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}

0800e8aa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800e8aa:	b480      	push	{r7}
 800e8ac:	b083      	sub	sp, #12
 800e8ae:	af00      	add	r7, sp, #0
 800e8b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800e8ba:	bf00      	nop
}
 800e8bc:	370c      	adds	r7, #12
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c4:	4770      	bx	lr

0800e8c6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800e8c6:	b580      	push	{r7, lr}
 800e8c8:	b082      	sub	sp, #8
 800e8ca:	af00      	add	r7, sp, #0
 800e8cc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2201      	movs	r2, #1
 800e8d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2200      	movs	r2, #0
 800e8da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2201      	movs	r2, #1
 800e8ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	f003 fcd3 	bl	80122a8 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800e902:	2300      	movs	r3, #0
}
 800e904:	4618      	mov	r0, r3
 800e906:	3708      	adds	r7, #8
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd80      	pop	{r7, pc}

0800e90c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b082      	sub	sp, #8
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2201      	movs	r2, #1
 800e918:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2200      	movs	r2, #0
 800e920:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2200      	movs	r2, #0
 800e928:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800e92c:	6878      	ldr	r0, [r7, #4]
 800e92e:	f006 fbc2 	bl	80150b6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	791b      	ldrb	r3, [r3, #4]
 800e936:	4619      	mov	r1, r3
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f000 fed1 	bl	800f6e0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	795b      	ldrb	r3, [r3, #5]
 800e942:	4619      	mov	r1, r3
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f000 fecb 	bl	800f6e0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	2201      	movs	r2, #1
 800e94e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e95e:	2300      	movs	r3, #0
 800e960:	2200      	movs	r2, #0
 800e962:	f003 fca1 	bl	80122a8 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800e966:	2300      	movs	r3, #0
}
 800e968:	4618      	mov	r0, r3
 800e96a:	3708      	adds	r7, #8
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}

0800e970 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b084      	sub	sp, #16
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800e984:	f04f 33ff 	mov.w	r3, #4294967295
 800e988:	2200      	movs	r2, #0
 800e98a:	f003 fd01 	bl	8012390 <osMessageQueueGet>
 800e98e:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d1f0      	bne.n	800e978 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	f7ff faa6 	bl	800dee8 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800e99c:	e7ec      	b.n	800e978 <USBH_Process_OS+0x8>

0800e99e <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800e99e:	b580      	push	{r7, lr}
 800e9a0:	b082      	sub	sp, #8
 800e9a2:	af00      	add	r7, sp, #0
 800e9a4:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	2201      	movs	r2, #1
 800e9aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	2200      	movs	r2, #0
 800e9be:	f003 fc73 	bl	80122a8 <osMessageQueuePut>
#endif

  return USBH_OK;
 800e9c2:	2300      	movs	r3, #0
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3708      	adds	r7, #8
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}

0800e9cc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b086      	sub	sp, #24
 800e9d0:	af02      	add	r7, sp, #8
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	460b      	mov	r3, r1
 800e9d6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800e9de:	78fb      	ldrb	r3, [r7, #3]
 800e9e0:	b29b      	uxth	r3, r3
 800e9e2:	9300      	str	r3, [sp, #0]
 800e9e4:	4613      	mov	r3, r2
 800e9e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e9ea:	2100      	movs	r1, #0
 800e9ec:	6878      	ldr	r0, [r7, #4]
 800e9ee:	f000 f864 	bl	800eaba <USBH_GetDescriptor>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	73fb      	strb	r3, [r7, #15]
 800e9f6:	7bfb      	ldrb	r3, [r7, #15]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d10a      	bne.n	800ea12 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ea08:	78fa      	ldrb	r2, [r7, #3]
 800ea0a:	b292      	uxth	r2, r2
 800ea0c:	4619      	mov	r1, r3
 800ea0e:	f000 f918 	bl	800ec42 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ea12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea14:	4618      	mov	r0, r3
 800ea16:	3710      	adds	r7, #16
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}

0800ea1c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b086      	sub	sp, #24
 800ea20:	af02      	add	r7, sp, #8
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	460b      	mov	r3, r1
 800ea26:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	331c      	adds	r3, #28
 800ea2c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ea2e:	887b      	ldrh	r3, [r7, #2]
 800ea30:	9300      	str	r3, [sp, #0]
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea38:	2100      	movs	r1, #0
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f000 f83d 	bl	800eaba <USBH_GetDescriptor>
 800ea40:	4603      	mov	r3, r0
 800ea42:	72fb      	strb	r3, [r7, #11]
 800ea44:	7afb      	ldrb	r3, [r7, #11]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d107      	bne.n	800ea5a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ea50:	887a      	ldrh	r2, [r7, #2]
 800ea52:	68f9      	ldr	r1, [r7, #12]
 800ea54:	4618      	mov	r0, r3
 800ea56:	f000 f964 	bl	800ed22 <USBH_ParseCfgDesc>
  }

  return status;
 800ea5a:	7afb      	ldrb	r3, [r7, #11]
}
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	3710      	adds	r7, #16
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bd80      	pop	{r7, pc}

0800ea64 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b088      	sub	sp, #32
 800ea68:	af02      	add	r7, sp, #8
 800ea6a:	60f8      	str	r0, [r7, #12]
 800ea6c:	607a      	str	r2, [r7, #4]
 800ea6e:	461a      	mov	r2, r3
 800ea70:	460b      	mov	r3, r1
 800ea72:	72fb      	strb	r3, [r7, #11]
 800ea74:	4613      	mov	r3, r2
 800ea76:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800ea78:	7afb      	ldrb	r3, [r7, #11]
 800ea7a:	b29b      	uxth	r3, r3
 800ea7c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ea80:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ea88:	893b      	ldrh	r3, [r7, #8]
 800ea8a:	9300      	str	r3, [sp, #0]
 800ea8c:	460b      	mov	r3, r1
 800ea8e:	2100      	movs	r1, #0
 800ea90:	68f8      	ldr	r0, [r7, #12]
 800ea92:	f000 f812 	bl	800eaba <USBH_GetDescriptor>
 800ea96:	4603      	mov	r3, r0
 800ea98:	75fb      	strb	r3, [r7, #23]
 800ea9a:	7dfb      	ldrb	r3, [r7, #23]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d107      	bne.n	800eab0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800eaa6:	893a      	ldrh	r2, [r7, #8]
 800eaa8:	6879      	ldr	r1, [r7, #4]
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f000 fa37 	bl	800ef1e <USBH_ParseStringDesc>
  }

  return status;
 800eab0:	7dfb      	ldrb	r3, [r7, #23]
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	3718      	adds	r7, #24
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}

0800eaba <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800eaba:	b580      	push	{r7, lr}
 800eabc:	b084      	sub	sp, #16
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	60f8      	str	r0, [r7, #12]
 800eac2:	607b      	str	r3, [r7, #4]
 800eac4:	460b      	mov	r3, r1
 800eac6:	72fb      	strb	r3, [r7, #11]
 800eac8:	4613      	mov	r3, r2
 800eaca:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	789b      	ldrb	r3, [r3, #2]
 800ead0:	2b01      	cmp	r3, #1
 800ead2:	d11c      	bne.n	800eb0e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ead4:	7afb      	ldrb	r3, [r7, #11]
 800ead6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800eada:	b2da      	uxtb	r2, r3
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	2206      	movs	r2, #6
 800eae4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	893a      	ldrh	r2, [r7, #8]
 800eaea:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800eaec:	893b      	ldrh	r3, [r7, #8]
 800eaee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800eaf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eaf6:	d104      	bne.n	800eb02 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	f240 4209 	movw	r2, #1033	; 0x409
 800eafe:	829a      	strh	r2, [r3, #20]
 800eb00:	e002      	b.n	800eb08 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	2200      	movs	r2, #0
 800eb06:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	8b3a      	ldrh	r2, [r7, #24]
 800eb0c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800eb0e:	8b3b      	ldrh	r3, [r7, #24]
 800eb10:	461a      	mov	r2, r3
 800eb12:	6879      	ldr	r1, [r7, #4]
 800eb14:	68f8      	ldr	r0, [r7, #12]
 800eb16:	f000 fa50 	bl	800efba <USBH_CtlReq>
 800eb1a:	4603      	mov	r3, r0
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3710      	adds	r7, #16
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b082      	sub	sp, #8
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
 800eb2c:	460b      	mov	r3, r1
 800eb2e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	789b      	ldrb	r3, [r3, #2]
 800eb34:	2b01      	cmp	r3, #1
 800eb36:	d10f      	bne.n	800eb58 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2205      	movs	r2, #5
 800eb42:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800eb44:	78fb      	ldrb	r3, [r7, #3]
 800eb46:	b29a      	uxth	r2, r3
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2200      	movs	r2, #0
 800eb56:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800eb58:	2200      	movs	r2, #0
 800eb5a:	2100      	movs	r1, #0
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f000 fa2c 	bl	800efba <USBH_CtlReq>
 800eb62:	4603      	mov	r3, r0
}
 800eb64:	4618      	mov	r0, r3
 800eb66:	3708      	adds	r7, #8
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd80      	pop	{r7, pc}

0800eb6c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b082      	sub	sp, #8
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
 800eb74:	460b      	mov	r3, r1
 800eb76:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	789b      	ldrb	r3, [r3, #2]
 800eb7c:	2b01      	cmp	r3, #1
 800eb7e:	d10e      	bne.n	800eb9e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2200      	movs	r2, #0
 800eb84:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2209      	movs	r2, #9
 800eb8a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	887a      	ldrh	r2, [r7, #2]
 800eb90:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2200      	movs	r2, #0
 800eb96:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800eb9e:	2200      	movs	r2, #0
 800eba0:	2100      	movs	r1, #0
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	f000 fa09 	bl	800efba <USBH_CtlReq>
 800eba8:	4603      	mov	r3, r0
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	3708      	adds	r7, #8
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}

0800ebb2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ebb2:	b580      	push	{r7, lr}
 800ebb4:	b082      	sub	sp, #8
 800ebb6:	af00      	add	r7, sp, #0
 800ebb8:	6078      	str	r0, [r7, #4]
 800ebba:	460b      	mov	r3, r1
 800ebbc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	789b      	ldrb	r3, [r3, #2]
 800ebc2:	2b01      	cmp	r3, #1
 800ebc4:	d10f      	bne.n	800ebe6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2200      	movs	r2, #0
 800ebca:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2203      	movs	r2, #3
 800ebd0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ebd2:	78fb      	ldrb	r3, [r7, #3]
 800ebd4:	b29a      	uxth	r2, r3
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2200      	movs	r2, #0
 800ebde:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	2100      	movs	r1, #0
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f000 f9e5 	bl	800efba <USBH_CtlReq>
 800ebf0:	4603      	mov	r3, r0
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3708      	adds	r7, #8
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}

0800ebfa <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ebfa:	b580      	push	{r7, lr}
 800ebfc:	b082      	sub	sp, #8
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	6078      	str	r0, [r7, #4]
 800ec02:	460b      	mov	r3, r1
 800ec04:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	789b      	ldrb	r3, [r3, #2]
 800ec0a:	2b01      	cmp	r3, #1
 800ec0c:	d10f      	bne.n	800ec2e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2202      	movs	r2, #2
 800ec12:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2201      	movs	r2, #1
 800ec18:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ec20:	78fb      	ldrb	r3, [r7, #3]
 800ec22:	b29a      	uxth	r2, r3
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ec2e:	2200      	movs	r2, #0
 800ec30:	2100      	movs	r1, #0
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f000 f9c1 	bl	800efba <USBH_CtlReq>
 800ec38:	4603      	mov	r3, r0
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3708      	adds	r7, #8
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}

0800ec42 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ec42:	b480      	push	{r7}
 800ec44:	b085      	sub	sp, #20
 800ec46:	af00      	add	r7, sp, #0
 800ec48:	60f8      	str	r0, [r7, #12]
 800ec4a:	60b9      	str	r1, [r7, #8]
 800ec4c:	4613      	mov	r3, r2
 800ec4e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	781a      	ldrb	r2, [r3, #0]
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	785a      	ldrb	r2, [r3, #1]
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	3302      	adds	r3, #2
 800ec64:	781b      	ldrb	r3, [r3, #0]
 800ec66:	b29a      	uxth	r2, r3
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	3303      	adds	r3, #3
 800ec6c:	781b      	ldrb	r3, [r3, #0]
 800ec6e:	b29b      	uxth	r3, r3
 800ec70:	021b      	lsls	r3, r3, #8
 800ec72:	b29b      	uxth	r3, r3
 800ec74:	4313      	orrs	r3, r2
 800ec76:	b29a      	uxth	r2, r3
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	791a      	ldrb	r2, [r3, #4]
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	795a      	ldrb	r2, [r3, #5]
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	799a      	ldrb	r2, [r3, #6]
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	79da      	ldrb	r2, [r3, #7]
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800ec9c:	88fb      	ldrh	r3, [r7, #6]
 800ec9e:	2b08      	cmp	r3, #8
 800eca0:	d939      	bls.n	800ed16 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	3308      	adds	r3, #8
 800eca6:	781b      	ldrb	r3, [r3, #0]
 800eca8:	b29a      	uxth	r2, r3
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	3309      	adds	r3, #9
 800ecae:	781b      	ldrb	r3, [r3, #0]
 800ecb0:	b29b      	uxth	r3, r3
 800ecb2:	021b      	lsls	r3, r3, #8
 800ecb4:	b29b      	uxth	r3, r3
 800ecb6:	4313      	orrs	r3, r2
 800ecb8:	b29a      	uxth	r2, r3
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ecbe:	68bb      	ldr	r3, [r7, #8]
 800ecc0:	330a      	adds	r3, #10
 800ecc2:	781b      	ldrb	r3, [r3, #0]
 800ecc4:	b29a      	uxth	r2, r3
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	330b      	adds	r3, #11
 800ecca:	781b      	ldrb	r3, [r3, #0]
 800eccc:	b29b      	uxth	r3, r3
 800ecce:	021b      	lsls	r3, r3, #8
 800ecd0:	b29b      	uxth	r3, r3
 800ecd2:	4313      	orrs	r3, r2
 800ecd4:	b29a      	uxth	r2, r3
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	330c      	adds	r3, #12
 800ecde:	781b      	ldrb	r3, [r3, #0]
 800ece0:	b29a      	uxth	r2, r3
 800ece2:	68bb      	ldr	r3, [r7, #8]
 800ece4:	330d      	adds	r3, #13
 800ece6:	781b      	ldrb	r3, [r3, #0]
 800ece8:	b29b      	uxth	r3, r3
 800ecea:	021b      	lsls	r3, r3, #8
 800ecec:	b29b      	uxth	r3, r3
 800ecee:	4313      	orrs	r3, r2
 800ecf0:	b29a      	uxth	r2, r3
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	7b9a      	ldrb	r2, [r3, #14]
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	7bda      	ldrb	r2, [r3, #15]
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	7c1a      	ldrb	r2, [r3, #16]
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	7c5a      	ldrb	r2, [r3, #17]
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	745a      	strb	r2, [r3, #17]
  }
}
 800ed16:	bf00      	nop
 800ed18:	3714      	adds	r7, #20
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed20:	4770      	bx	lr

0800ed22 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800ed22:	b580      	push	{r7, lr}
 800ed24:	b08a      	sub	sp, #40	; 0x28
 800ed26:	af00      	add	r7, sp, #0
 800ed28:	60f8      	str	r0, [r7, #12]
 800ed2a:	60b9      	str	r1, [r7, #8]
 800ed2c:	4613      	mov	r3, r2
 800ed2e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ed30:	68bb      	ldr	r3, [r7, #8]
 800ed32:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ed34:	2300      	movs	r3, #0
 800ed36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ed40:	68bb      	ldr	r3, [r7, #8]
 800ed42:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	781a      	ldrb	r2, [r3, #0]
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	785a      	ldrb	r2, [r3, #1]
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	3302      	adds	r3, #2
 800ed58:	781b      	ldrb	r3, [r3, #0]
 800ed5a:	b29a      	uxth	r2, r3
 800ed5c:	68bb      	ldr	r3, [r7, #8]
 800ed5e:	3303      	adds	r3, #3
 800ed60:	781b      	ldrb	r3, [r3, #0]
 800ed62:	b29b      	uxth	r3, r3
 800ed64:	021b      	lsls	r3, r3, #8
 800ed66:	b29b      	uxth	r3, r3
 800ed68:	4313      	orrs	r3, r2
 800ed6a:	b29a      	uxth	r2, r3
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	791a      	ldrb	r2, [r3, #4]
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ed78:	68bb      	ldr	r3, [r7, #8]
 800ed7a:	795a      	ldrb	r2, [r3, #5]
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	799a      	ldrb	r2, [r3, #6]
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	79da      	ldrb	r2, [r3, #7]
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	7a1a      	ldrb	r2, [r3, #8]
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ed98:	88fb      	ldrh	r3, [r7, #6]
 800ed9a:	2b09      	cmp	r3, #9
 800ed9c:	d95f      	bls.n	800ee5e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800ed9e:	2309      	movs	r3, #9
 800eda0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800eda2:	2300      	movs	r3, #0
 800eda4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800eda6:	e051      	b.n	800ee4c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800eda8:	f107 0316 	add.w	r3, r7, #22
 800edac:	4619      	mov	r1, r3
 800edae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800edb0:	f000 f8e8 	bl	800ef84 <USBH_GetNextDesc>
 800edb4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800edb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edb8:	785b      	ldrb	r3, [r3, #1]
 800edba:	2b04      	cmp	r3, #4
 800edbc:	d146      	bne.n	800ee4c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800edbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800edc2:	221a      	movs	r2, #26
 800edc4:	fb02 f303 	mul.w	r3, r2, r3
 800edc8:	3308      	adds	r3, #8
 800edca:	68fa      	ldr	r2, [r7, #12]
 800edcc:	4413      	add	r3, r2
 800edce:	3302      	adds	r3, #2
 800edd0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800edd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800edd4:	69f8      	ldr	r0, [r7, #28]
 800edd6:	f000 f846 	bl	800ee66 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800edda:	2300      	movs	r3, #0
 800eddc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800ede0:	2300      	movs	r3, #0
 800ede2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ede4:	e022      	b.n	800ee2c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ede6:	f107 0316 	add.w	r3, r7, #22
 800edea:	4619      	mov	r1, r3
 800edec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800edee:	f000 f8c9 	bl	800ef84 <USBH_GetNextDesc>
 800edf2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800edf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf6:	785b      	ldrb	r3, [r3, #1]
 800edf8:	2b05      	cmp	r3, #5
 800edfa:	d117      	bne.n	800ee2c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800edfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee00:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ee04:	3201      	adds	r2, #1
 800ee06:	00d2      	lsls	r2, r2, #3
 800ee08:	211a      	movs	r1, #26
 800ee0a:	fb01 f303 	mul.w	r3, r1, r3
 800ee0e:	4413      	add	r3, r2
 800ee10:	3308      	adds	r3, #8
 800ee12:	68fa      	ldr	r2, [r7, #12]
 800ee14:	4413      	add	r3, r2
 800ee16:	3304      	adds	r3, #4
 800ee18:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800ee1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ee1c:	69b8      	ldr	r0, [r7, #24]
 800ee1e:	f000 f851 	bl	800eec4 <USBH_ParseEPDesc>
            ep_ix++;
 800ee22:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ee26:	3301      	adds	r3, #1
 800ee28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ee2c:	69fb      	ldr	r3, [r7, #28]
 800ee2e:	791b      	ldrb	r3, [r3, #4]
 800ee30:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ee34:	429a      	cmp	r2, r3
 800ee36:	d204      	bcs.n	800ee42 <USBH_ParseCfgDesc+0x120>
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	885a      	ldrh	r2, [r3, #2]
 800ee3c:	8afb      	ldrh	r3, [r7, #22]
 800ee3e:	429a      	cmp	r2, r3
 800ee40:	d8d1      	bhi.n	800ede6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800ee42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee46:	3301      	adds	r3, #1
 800ee48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ee4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee50:	2b01      	cmp	r3, #1
 800ee52:	d804      	bhi.n	800ee5e <USBH_ParseCfgDesc+0x13c>
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	885a      	ldrh	r2, [r3, #2]
 800ee58:	8afb      	ldrh	r3, [r7, #22]
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	d8a4      	bhi.n	800eda8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800ee5e:	bf00      	nop
 800ee60:	3728      	adds	r7, #40	; 0x28
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}

0800ee66 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800ee66:	b480      	push	{r7}
 800ee68:	b083      	sub	sp, #12
 800ee6a:	af00      	add	r7, sp, #0
 800ee6c:	6078      	str	r0, [r7, #4]
 800ee6e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	781a      	ldrb	r2, [r3, #0]
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	785a      	ldrb	r2, [r3, #1]
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	789a      	ldrb	r2, [r3, #2]
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	78da      	ldrb	r2, [r3, #3]
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	791a      	ldrb	r2, [r3, #4]
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	795a      	ldrb	r2, [r3, #5]
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	799a      	ldrb	r2, [r3, #6]
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	79da      	ldrb	r2, [r3, #7]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	7a1a      	ldrb	r2, [r3, #8]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	721a      	strb	r2, [r3, #8]
}
 800eeb8:	bf00      	nop
 800eeba:	370c      	adds	r7, #12
 800eebc:	46bd      	mov	sp, r7
 800eebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec2:	4770      	bx	lr

0800eec4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800eec4:	b480      	push	{r7}
 800eec6:	b083      	sub	sp, #12
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
 800eecc:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	781a      	ldrb	r2, [r3, #0]
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	785a      	ldrb	r2, [r3, #1]
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	789a      	ldrb	r2, [r3, #2]
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	78da      	ldrb	r2, [r3, #3]
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	3304      	adds	r3, #4
 800eef2:	781b      	ldrb	r3, [r3, #0]
 800eef4:	b29a      	uxth	r2, r3
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	3305      	adds	r3, #5
 800eefa:	781b      	ldrb	r3, [r3, #0]
 800eefc:	b29b      	uxth	r3, r3
 800eefe:	021b      	lsls	r3, r3, #8
 800ef00:	b29b      	uxth	r3, r3
 800ef02:	4313      	orrs	r3, r2
 800ef04:	b29a      	uxth	r2, r3
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	799a      	ldrb	r2, [r3, #6]
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	719a      	strb	r2, [r3, #6]
}
 800ef12:	bf00      	nop
 800ef14:	370c      	adds	r7, #12
 800ef16:	46bd      	mov	sp, r7
 800ef18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1c:	4770      	bx	lr

0800ef1e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ef1e:	b480      	push	{r7}
 800ef20:	b087      	sub	sp, #28
 800ef22:	af00      	add	r7, sp, #0
 800ef24:	60f8      	str	r0, [r7, #12]
 800ef26:	60b9      	str	r1, [r7, #8]
 800ef28:	4613      	mov	r3, r2
 800ef2a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	3301      	adds	r3, #1
 800ef30:	781b      	ldrb	r3, [r3, #0]
 800ef32:	2b03      	cmp	r3, #3
 800ef34:	d120      	bne.n	800ef78 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	781b      	ldrb	r3, [r3, #0]
 800ef3a:	1e9a      	subs	r2, r3, #2
 800ef3c:	88fb      	ldrh	r3, [r7, #6]
 800ef3e:	4293      	cmp	r3, r2
 800ef40:	bf28      	it	cs
 800ef42:	4613      	movcs	r3, r2
 800ef44:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	3302      	adds	r3, #2
 800ef4a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	82fb      	strh	r3, [r7, #22]
 800ef50:	e00b      	b.n	800ef6a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ef52:	8afb      	ldrh	r3, [r7, #22]
 800ef54:	68fa      	ldr	r2, [r7, #12]
 800ef56:	4413      	add	r3, r2
 800ef58:	781a      	ldrb	r2, [r3, #0]
 800ef5a:	68bb      	ldr	r3, [r7, #8]
 800ef5c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	3301      	adds	r3, #1
 800ef62:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ef64:	8afb      	ldrh	r3, [r7, #22]
 800ef66:	3302      	adds	r3, #2
 800ef68:	82fb      	strh	r3, [r7, #22]
 800ef6a:	8afa      	ldrh	r2, [r7, #22]
 800ef6c:	8abb      	ldrh	r3, [r7, #20]
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d3ef      	bcc.n	800ef52 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ef72:	68bb      	ldr	r3, [r7, #8]
 800ef74:	2200      	movs	r2, #0
 800ef76:	701a      	strb	r2, [r3, #0]
  }
}
 800ef78:	bf00      	nop
 800ef7a:	371c      	adds	r7, #28
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef82:	4770      	bx	lr

0800ef84 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800ef84:	b480      	push	{r7}
 800ef86:	b085      	sub	sp, #20
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
 800ef8c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	881a      	ldrh	r2, [r3, #0]
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	781b      	ldrb	r3, [r3, #0]
 800ef96:	b29b      	uxth	r3, r3
 800ef98:	4413      	add	r3, r2
 800ef9a:	b29a      	uxth	r2, r3
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	781b      	ldrb	r3, [r3, #0]
 800efa4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	4413      	add	r3, r2
 800efaa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800efac:	68fb      	ldr	r3, [r7, #12]
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3714      	adds	r7, #20
 800efb2:	46bd      	mov	sp, r7
 800efb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb8:	4770      	bx	lr

0800efba <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800efba:	b580      	push	{r7, lr}
 800efbc:	b086      	sub	sp, #24
 800efbe:	af00      	add	r7, sp, #0
 800efc0:	60f8      	str	r0, [r7, #12]
 800efc2:	60b9      	str	r1, [r7, #8]
 800efc4:	4613      	mov	r3, r2
 800efc6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800efc8:	2301      	movs	r3, #1
 800efca:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	789b      	ldrb	r3, [r3, #2]
 800efd0:	2b01      	cmp	r3, #1
 800efd2:	d002      	beq.n	800efda <USBH_CtlReq+0x20>
 800efd4:	2b02      	cmp	r3, #2
 800efd6:	d01d      	beq.n	800f014 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800efd8:	e043      	b.n	800f062 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	68ba      	ldr	r2, [r7, #8]
 800efde:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	88fa      	ldrh	r2, [r7, #6]
 800efe4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	2201      	movs	r2, #1
 800efea:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	2202      	movs	r2, #2
 800eff0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800eff2:	2301      	movs	r3, #1
 800eff4:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	2203      	movs	r2, #3
 800effa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f00a:	2300      	movs	r3, #0
 800f00c:	2200      	movs	r2, #0
 800f00e:	f003 f94b 	bl	80122a8 <osMessageQueuePut>
      break;
 800f012:	e026      	b.n	800f062 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800f014:	68f8      	ldr	r0, [r7, #12]
 800f016:	f000 f829 	bl	800f06c <USBH_HandleControl>
 800f01a:	4603      	mov	r3, r0
 800f01c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f01e:	7dfb      	ldrb	r3, [r7, #23]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d002      	beq.n	800f02a <USBH_CtlReq+0x70>
 800f024:	7dfb      	ldrb	r3, [r7, #23]
 800f026:	2b03      	cmp	r3, #3
 800f028:	d106      	bne.n	800f038 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	2201      	movs	r2, #1
 800f02e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	2200      	movs	r2, #0
 800f034:	761a      	strb	r2, [r3, #24]
 800f036:	e005      	b.n	800f044 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800f038:	7dfb      	ldrb	r3, [r7, #23]
 800f03a:	2b02      	cmp	r3, #2
 800f03c:	d102      	bne.n	800f044 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	2201      	movs	r2, #1
 800f042:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2203      	movs	r2, #3
 800f048:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f058:	2300      	movs	r3, #0
 800f05a:	2200      	movs	r2, #0
 800f05c:	f003 f924 	bl	80122a8 <osMessageQueuePut>
      break;
 800f060:	bf00      	nop
  }
  return status;
 800f062:	7dfb      	ldrb	r3, [r7, #23]
}
 800f064:	4618      	mov	r0, r3
 800f066:	3718      	adds	r7, #24
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}

0800f06c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b086      	sub	sp, #24
 800f070:	af02      	add	r7, sp, #8
 800f072:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800f074:	2301      	movs	r3, #1
 800f076:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f078:	2300      	movs	r3, #0
 800f07a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	7e1b      	ldrb	r3, [r3, #24]
 800f080:	3b01      	subs	r3, #1
 800f082:	2b0a      	cmp	r3, #10
 800f084:	f200 822b 	bhi.w	800f4de <USBH_HandleControl+0x472>
 800f088:	a201      	add	r2, pc, #4	; (adr r2, 800f090 <USBH_HandleControl+0x24>)
 800f08a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f08e:	bf00      	nop
 800f090:	0800f0bd 	.word	0x0800f0bd
 800f094:	0800f0d7 	.word	0x0800f0d7
 800f098:	0800f179 	.word	0x0800f179
 800f09c:	0800f19f 	.word	0x0800f19f
 800f0a0:	0800f22b 	.word	0x0800f22b
 800f0a4:	0800f257 	.word	0x0800f257
 800f0a8:	0800f319 	.word	0x0800f319
 800f0ac:	0800f33b 	.word	0x0800f33b
 800f0b0:	0800f3cd 	.word	0x0800f3cd
 800f0b4:	0800f3f5 	.word	0x0800f3f5
 800f0b8:	0800f487 	.word	0x0800f487
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f103 0110 	add.w	r1, r3, #16
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	795b      	ldrb	r3, [r3, #5]
 800f0c6:	461a      	mov	r2, r3
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f000 fa19 	bl	800f500 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2202      	movs	r2, #2
 800f0d2:	761a      	strb	r2, [r3, #24]
      break;
 800f0d4:	e20e      	b.n	800f4f4 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	795b      	ldrb	r3, [r3, #5]
 800f0da:	4619      	mov	r1, r3
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f006 f8d7 	bl	8015290 <USBH_LL_GetURBState>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800f0e6:	7bbb      	ldrb	r3, [r7, #14]
 800f0e8:	2b01      	cmp	r3, #1
 800f0ea:	d12c      	bne.n	800f146 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	7c1b      	ldrb	r3, [r3, #16]
 800f0f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f0f4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	8adb      	ldrh	r3, [r3, #22]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d00a      	beq.n	800f114 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800f0fe:	7b7b      	ldrb	r3, [r7, #13]
 800f100:	2b80      	cmp	r3, #128	; 0x80
 800f102:	d103      	bne.n	800f10c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2203      	movs	r2, #3
 800f108:	761a      	strb	r2, [r3, #24]
 800f10a:	e00d      	b.n	800f128 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2205      	movs	r2, #5
 800f110:	761a      	strb	r2, [r3, #24]
 800f112:	e009      	b.n	800f128 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800f114:	7b7b      	ldrb	r3, [r7, #13]
 800f116:	2b80      	cmp	r3, #128	; 0x80
 800f118:	d103      	bne.n	800f122 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2209      	movs	r2, #9
 800f11e:	761a      	strb	r2, [r3, #24]
 800f120:	e002      	b.n	800f128 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2207      	movs	r2, #7
 800f126:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2203      	movs	r2, #3
 800f12c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f13c:	2300      	movs	r3, #0
 800f13e:	2200      	movs	r2, #0
 800f140:	f003 f8b2 	bl	80122a8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f144:	e1cd      	b.n	800f4e2 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f146:	7bbb      	ldrb	r3, [r7, #14]
 800f148:	2b04      	cmp	r3, #4
 800f14a:	d003      	beq.n	800f154 <USBH_HandleControl+0xe8>
 800f14c:	7bbb      	ldrb	r3, [r7, #14]
 800f14e:	2b02      	cmp	r3, #2
 800f150:	f040 81c7 	bne.w	800f4e2 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	220b      	movs	r2, #11
 800f158:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	2203      	movs	r2, #3
 800f15e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f16e:	2300      	movs	r3, #0
 800f170:	2200      	movs	r2, #0
 800f172:	f003 f899 	bl	80122a8 <osMessageQueuePut>
      break;
 800f176:	e1b4      	b.n	800f4e2 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f17e:	b29a      	uxth	r2, r3
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	6899      	ldr	r1, [r3, #8]
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	899a      	ldrh	r2, [r3, #12]
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	791b      	ldrb	r3, [r3, #4]
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f000 f9f4 	bl	800f57e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2204      	movs	r2, #4
 800f19a:	761a      	strb	r2, [r3, #24]
      break;
 800f19c:	e1aa      	b.n	800f4f4 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	791b      	ldrb	r3, [r3, #4]
 800f1a2:	4619      	mov	r1, r3
 800f1a4:	6878      	ldr	r0, [r7, #4]
 800f1a6:	f006 f873 	bl	8015290 <USBH_LL_GetURBState>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800f1ae:	7bbb      	ldrb	r3, [r7, #14]
 800f1b0:	2b01      	cmp	r3, #1
 800f1b2:	d110      	bne.n	800f1d6 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2209      	movs	r2, #9
 800f1b8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2203      	movs	r2, #3
 800f1be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	f003 f869 	bl	80122a8 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800f1d6:	7bbb      	ldrb	r3, [r7, #14]
 800f1d8:	2b05      	cmp	r3, #5
 800f1da:	d110      	bne.n	800f1fe <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800f1dc:	2303      	movs	r3, #3
 800f1de:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2203      	movs	r2, #3
 800f1e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	f003 f856 	bl	80122a8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f1fc:	e173      	b.n	800f4e6 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800f1fe:	7bbb      	ldrb	r3, [r7, #14]
 800f200:	2b04      	cmp	r3, #4
 800f202:	f040 8170 	bne.w	800f4e6 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	220b      	movs	r2, #11
 800f20a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2203      	movs	r2, #3
 800f210:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f220:	2300      	movs	r3, #0
 800f222:	2200      	movs	r2, #0
 800f224:	f003 f840 	bl	80122a8 <osMessageQueuePut>
      break;
 800f228:	e15d      	b.n	800f4e6 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6899      	ldr	r1, [r3, #8]
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	899a      	ldrh	r2, [r3, #12]
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	7958      	ldrb	r0, [r3, #5]
 800f236:	2301      	movs	r3, #1
 800f238:	9300      	str	r3, [sp, #0]
 800f23a:	4603      	mov	r3, r0
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f000 f979 	bl	800f534 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f248:	b29a      	uxth	r2, r3
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2206      	movs	r2, #6
 800f252:	761a      	strb	r2, [r3, #24]
      break;
 800f254:	e14e      	b.n	800f4f4 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	795b      	ldrb	r3, [r3, #5]
 800f25a:	4619      	mov	r1, r3
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f006 f817 	bl	8015290 <USBH_LL_GetURBState>
 800f262:	4603      	mov	r3, r0
 800f264:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f266:	7bbb      	ldrb	r3, [r7, #14]
 800f268:	2b01      	cmp	r3, #1
 800f26a:	d111      	bne.n	800f290 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2207      	movs	r2, #7
 800f270:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2203      	movs	r2, #3
 800f276:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f286:	2300      	movs	r3, #0
 800f288:	2200      	movs	r2, #0
 800f28a:	f003 f80d 	bl	80122a8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f28e:	e12c      	b.n	800f4ea <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800f290:	7bbb      	ldrb	r3, [r7, #14]
 800f292:	2b05      	cmp	r3, #5
 800f294:	d113      	bne.n	800f2be <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	220c      	movs	r2, #12
 800f29a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800f29c:	2303      	movs	r3, #3
 800f29e:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2203      	movs	r2, #3
 800f2a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	f002 fff6 	bl	80122a8 <osMessageQueuePut>
      break;
 800f2bc:	e115      	b.n	800f4ea <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f2be:	7bbb      	ldrb	r3, [r7, #14]
 800f2c0:	2b02      	cmp	r3, #2
 800f2c2:	d111      	bne.n	800f2e8 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2205      	movs	r2, #5
 800f2c8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	2203      	movs	r2, #3
 800f2ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f2de:	2300      	movs	r3, #0
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	f002 ffe1 	bl	80122a8 <osMessageQueuePut>
      break;
 800f2e6:	e100      	b.n	800f4ea <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800f2e8:	7bbb      	ldrb	r3, [r7, #14]
 800f2ea:	2b04      	cmp	r3, #4
 800f2ec:	f040 80fd 	bne.w	800f4ea <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	220b      	movs	r2, #11
 800f2f4:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800f2f6:	2302      	movs	r3, #2
 800f2f8:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2203      	movs	r2, #3
 800f2fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f30e:	2300      	movs	r3, #0
 800f310:	2200      	movs	r2, #0
 800f312:	f002 ffc9 	bl	80122a8 <osMessageQueuePut>
      break;
 800f316:	e0e8      	b.n	800f4ea <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	791b      	ldrb	r3, [r3, #4]
 800f31c:	2200      	movs	r2, #0
 800f31e:	2100      	movs	r1, #0
 800f320:	6878      	ldr	r0, [r7, #4]
 800f322:	f000 f92c 	bl	800f57e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f32c:	b29a      	uxth	r2, r3
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	2208      	movs	r2, #8
 800f336:	761a      	strb	r2, [r3, #24]

      break;
 800f338:	e0dc      	b.n	800f4f4 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	791b      	ldrb	r3, [r3, #4]
 800f33e:	4619      	mov	r1, r3
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	f005 ffa5 	bl	8015290 <USBH_LL_GetURBState>
 800f346:	4603      	mov	r3, r0
 800f348:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f34a:	7bbb      	ldrb	r3, [r7, #14]
 800f34c:	2b01      	cmp	r3, #1
 800f34e:	d113      	bne.n	800f378 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	220d      	movs	r2, #13
 800f354:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f356:	2300      	movs	r3, #0
 800f358:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	2203      	movs	r2, #3
 800f35e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f36e:	2300      	movs	r3, #0
 800f370:	2200      	movs	r2, #0
 800f372:	f002 ff99 	bl	80122a8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f376:	e0ba      	b.n	800f4ee <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800f378:	7bbb      	ldrb	r3, [r7, #14]
 800f37a:	2b04      	cmp	r3, #4
 800f37c:	d111      	bne.n	800f3a2 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	220b      	movs	r2, #11
 800f382:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2203      	movs	r2, #3
 800f388:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f398:	2300      	movs	r3, #0
 800f39a:	2200      	movs	r2, #0
 800f39c:	f002 ff84 	bl	80122a8 <osMessageQueuePut>
      break;
 800f3a0:	e0a5      	b.n	800f4ee <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800f3a2:	7bbb      	ldrb	r3, [r7, #14]
 800f3a4:	2b05      	cmp	r3, #5
 800f3a6:	f040 80a2 	bne.w	800f4ee <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800f3aa:	2303      	movs	r3, #3
 800f3ac:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2203      	movs	r2, #3
 800f3b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	f002 ff6f 	bl	80122a8 <osMessageQueuePut>
      break;
 800f3ca:	e090      	b.n	800f4ee <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	795a      	ldrb	r2, [r3, #5]
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	9300      	str	r3, [sp, #0]
 800f3d4:	4613      	mov	r3, r2
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	2100      	movs	r1, #0
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f000 f8aa 	bl	800f534 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f3e6:	b29a      	uxth	r2, r3
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	220a      	movs	r2, #10
 800f3f0:	761a      	strb	r2, [r3, #24]
      break;
 800f3f2:	e07f      	b.n	800f4f4 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	795b      	ldrb	r3, [r3, #5]
 800f3f8:	4619      	mov	r1, r3
 800f3fa:	6878      	ldr	r0, [r7, #4]
 800f3fc:	f005 ff48 	bl	8015290 <USBH_LL_GetURBState>
 800f400:	4603      	mov	r3, r0
 800f402:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800f404:	7bbb      	ldrb	r3, [r7, #14]
 800f406:	2b01      	cmp	r3, #1
 800f408:	d113      	bne.n	800f432 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800f40a:	2300      	movs	r3, #0
 800f40c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	220d      	movs	r2, #13
 800f412:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2203      	movs	r2, #3
 800f418:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f428:	2300      	movs	r3, #0
 800f42a:	2200      	movs	r2, #0
 800f42c:	f002 ff3c 	bl	80122a8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f430:	e05f      	b.n	800f4f2 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f432:	7bbb      	ldrb	r3, [r7, #14]
 800f434:	2b02      	cmp	r3, #2
 800f436:	d111      	bne.n	800f45c <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2209      	movs	r2, #9
 800f43c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2203      	movs	r2, #3
 800f442:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f452:	2300      	movs	r3, #0
 800f454:	2200      	movs	r2, #0
 800f456:	f002 ff27 	bl	80122a8 <osMessageQueuePut>
      break;
 800f45a:	e04a      	b.n	800f4f2 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800f45c:	7bbb      	ldrb	r3, [r7, #14]
 800f45e:	2b04      	cmp	r3, #4
 800f460:	d147      	bne.n	800f4f2 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	220b      	movs	r2, #11
 800f466:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2203      	movs	r2, #3
 800f46c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f47c:	2300      	movs	r3, #0
 800f47e:	2200      	movs	r2, #0
 800f480:	f002 ff12 	bl	80122a8 <osMessageQueuePut>
      break;
 800f484:	e035      	b.n	800f4f2 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	7e5b      	ldrb	r3, [r3, #25]
 800f48a:	3301      	adds	r3, #1
 800f48c:	b2da      	uxtb	r2, r3
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	765a      	strb	r2, [r3, #25]
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	7e5b      	ldrb	r3, [r3, #25]
 800f496:	2b02      	cmp	r3, #2
 800f498:	d806      	bhi.n	800f4a8 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2201      	movs	r2, #1
 800f49e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2201      	movs	r2, #1
 800f4a4:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800f4a6:	e025      	b.n	800f4f4 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f4ae:	2106      	movs	r1, #6
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	795b      	ldrb	r3, [r3, #5]
 800f4be:	4619      	mov	r1, r3
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f000 f90d 	bl	800f6e0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	791b      	ldrb	r3, [r3, #4]
 800f4ca:	4619      	mov	r1, r3
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	f000 f907 	bl	800f6e0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800f4d8:	2302      	movs	r3, #2
 800f4da:	73fb      	strb	r3, [r7, #15]
      break;
 800f4dc:	e00a      	b.n	800f4f4 <USBH_HandleControl+0x488>

    default:
      break;
 800f4de:	bf00      	nop
 800f4e0:	e008      	b.n	800f4f4 <USBH_HandleControl+0x488>
      break;
 800f4e2:	bf00      	nop
 800f4e4:	e006      	b.n	800f4f4 <USBH_HandleControl+0x488>
      break;
 800f4e6:	bf00      	nop
 800f4e8:	e004      	b.n	800f4f4 <USBH_HandleControl+0x488>
      break;
 800f4ea:	bf00      	nop
 800f4ec:	e002      	b.n	800f4f4 <USBH_HandleControl+0x488>
      break;
 800f4ee:	bf00      	nop
 800f4f0:	e000      	b.n	800f4f4 <USBH_HandleControl+0x488>
      break;
 800f4f2:	bf00      	nop
  }

  return status;
 800f4f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	3710      	adds	r7, #16
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}
 800f4fe:	bf00      	nop

0800f500 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b088      	sub	sp, #32
 800f504:	af04      	add	r7, sp, #16
 800f506:	60f8      	str	r0, [r7, #12]
 800f508:	60b9      	str	r1, [r7, #8]
 800f50a:	4613      	mov	r3, r2
 800f50c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f50e:	79f9      	ldrb	r1, [r7, #7]
 800f510:	2300      	movs	r3, #0
 800f512:	9303      	str	r3, [sp, #12]
 800f514:	2308      	movs	r3, #8
 800f516:	9302      	str	r3, [sp, #8]
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	9301      	str	r3, [sp, #4]
 800f51c:	2300      	movs	r3, #0
 800f51e:	9300      	str	r3, [sp, #0]
 800f520:	2300      	movs	r3, #0
 800f522:	2200      	movs	r2, #0
 800f524:	68f8      	ldr	r0, [r7, #12]
 800f526:	f005 fe82 	bl	801522e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800f52a:	2300      	movs	r3, #0
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	3710      	adds	r7, #16
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}

0800f534 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b088      	sub	sp, #32
 800f538:	af04      	add	r7, sp, #16
 800f53a:	60f8      	str	r0, [r7, #12]
 800f53c:	60b9      	str	r1, [r7, #8]
 800f53e:	4611      	mov	r1, r2
 800f540:	461a      	mov	r2, r3
 800f542:	460b      	mov	r3, r1
 800f544:	80fb      	strh	r3, [r7, #6]
 800f546:	4613      	mov	r3, r2
 800f548:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f550:	2b00      	cmp	r3, #0
 800f552:	d001      	beq.n	800f558 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800f554:	2300      	movs	r3, #0
 800f556:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f558:	7979      	ldrb	r1, [r7, #5]
 800f55a:	7e3b      	ldrb	r3, [r7, #24]
 800f55c:	9303      	str	r3, [sp, #12]
 800f55e:	88fb      	ldrh	r3, [r7, #6]
 800f560:	9302      	str	r3, [sp, #8]
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	9301      	str	r3, [sp, #4]
 800f566:	2301      	movs	r3, #1
 800f568:	9300      	str	r3, [sp, #0]
 800f56a:	2300      	movs	r3, #0
 800f56c:	2200      	movs	r2, #0
 800f56e:	68f8      	ldr	r0, [r7, #12]
 800f570:	f005 fe5d 	bl	801522e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800f574:	2300      	movs	r3, #0
}
 800f576:	4618      	mov	r0, r3
 800f578:	3710      	adds	r7, #16
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}

0800f57e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800f57e:	b580      	push	{r7, lr}
 800f580:	b088      	sub	sp, #32
 800f582:	af04      	add	r7, sp, #16
 800f584:	60f8      	str	r0, [r7, #12]
 800f586:	60b9      	str	r1, [r7, #8]
 800f588:	4611      	mov	r1, r2
 800f58a:	461a      	mov	r2, r3
 800f58c:	460b      	mov	r3, r1
 800f58e:	80fb      	strh	r3, [r7, #6]
 800f590:	4613      	mov	r3, r2
 800f592:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f594:	7979      	ldrb	r1, [r7, #5]
 800f596:	2300      	movs	r3, #0
 800f598:	9303      	str	r3, [sp, #12]
 800f59a:	88fb      	ldrh	r3, [r7, #6]
 800f59c:	9302      	str	r3, [sp, #8]
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	9301      	str	r3, [sp, #4]
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	9300      	str	r3, [sp, #0]
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	2201      	movs	r2, #1
 800f5aa:	68f8      	ldr	r0, [r7, #12]
 800f5ac:	f005 fe3f 	bl	801522e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800f5b0:	2300      	movs	r3, #0

}
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	3710      	adds	r7, #16
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}

0800f5ba <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800f5ba:	b580      	push	{r7, lr}
 800f5bc:	b088      	sub	sp, #32
 800f5be:	af04      	add	r7, sp, #16
 800f5c0:	60f8      	str	r0, [r7, #12]
 800f5c2:	60b9      	str	r1, [r7, #8]
 800f5c4:	4611      	mov	r1, r2
 800f5c6:	461a      	mov	r2, r3
 800f5c8:	460b      	mov	r3, r1
 800f5ca:	80fb      	strh	r3, [r7, #6]
 800f5cc:	4613      	mov	r3, r2
 800f5ce:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d001      	beq.n	800f5de <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800f5da:	2300      	movs	r3, #0
 800f5dc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f5de:	7979      	ldrb	r1, [r7, #5]
 800f5e0:	7e3b      	ldrb	r3, [r7, #24]
 800f5e2:	9303      	str	r3, [sp, #12]
 800f5e4:	88fb      	ldrh	r3, [r7, #6]
 800f5e6:	9302      	str	r3, [sp, #8]
 800f5e8:	68bb      	ldr	r3, [r7, #8]
 800f5ea:	9301      	str	r3, [sp, #4]
 800f5ec:	2301      	movs	r3, #1
 800f5ee:	9300      	str	r3, [sp, #0]
 800f5f0:	2302      	movs	r3, #2
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	68f8      	ldr	r0, [r7, #12]
 800f5f6:	f005 fe1a 	bl	801522e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800f5fa:	2300      	movs	r3, #0
}
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	3710      	adds	r7, #16
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}

0800f604 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b088      	sub	sp, #32
 800f608:	af04      	add	r7, sp, #16
 800f60a:	60f8      	str	r0, [r7, #12]
 800f60c:	60b9      	str	r1, [r7, #8]
 800f60e:	4611      	mov	r1, r2
 800f610:	461a      	mov	r2, r3
 800f612:	460b      	mov	r3, r1
 800f614:	80fb      	strh	r3, [r7, #6]
 800f616:	4613      	mov	r3, r2
 800f618:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f61a:	7979      	ldrb	r1, [r7, #5]
 800f61c:	2300      	movs	r3, #0
 800f61e:	9303      	str	r3, [sp, #12]
 800f620:	88fb      	ldrh	r3, [r7, #6]
 800f622:	9302      	str	r3, [sp, #8]
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	9301      	str	r3, [sp, #4]
 800f628:	2301      	movs	r3, #1
 800f62a:	9300      	str	r3, [sp, #0]
 800f62c:	2302      	movs	r3, #2
 800f62e:	2201      	movs	r2, #1
 800f630:	68f8      	ldr	r0, [r7, #12]
 800f632:	f005 fdfc 	bl	801522e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800f636:	2300      	movs	r3, #0
}
 800f638:	4618      	mov	r0, r3
 800f63a:	3710      	adds	r7, #16
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}

0800f640 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b086      	sub	sp, #24
 800f644:	af04      	add	r7, sp, #16
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	4608      	mov	r0, r1
 800f64a:	4611      	mov	r1, r2
 800f64c:	461a      	mov	r2, r3
 800f64e:	4603      	mov	r3, r0
 800f650:	70fb      	strb	r3, [r7, #3]
 800f652:	460b      	mov	r3, r1
 800f654:	70bb      	strb	r3, [r7, #2]
 800f656:	4613      	mov	r3, r2
 800f658:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800f65a:	7878      	ldrb	r0, [r7, #1]
 800f65c:	78ba      	ldrb	r2, [r7, #2]
 800f65e:	78f9      	ldrb	r1, [r7, #3]
 800f660:	8b3b      	ldrh	r3, [r7, #24]
 800f662:	9302      	str	r3, [sp, #8]
 800f664:	7d3b      	ldrb	r3, [r7, #20]
 800f666:	9301      	str	r3, [sp, #4]
 800f668:	7c3b      	ldrb	r3, [r7, #16]
 800f66a:	9300      	str	r3, [sp, #0]
 800f66c:	4603      	mov	r3, r0
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	f005 fd8f 	bl	8015192 <USBH_LL_OpenPipe>

  return USBH_OK;
 800f674:	2300      	movs	r3, #0
}
 800f676:	4618      	mov	r0, r3
 800f678:	3708      	adds	r7, #8
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}

0800f67e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800f67e:	b580      	push	{r7, lr}
 800f680:	b082      	sub	sp, #8
 800f682:	af00      	add	r7, sp, #0
 800f684:	6078      	str	r0, [r7, #4]
 800f686:	460b      	mov	r3, r1
 800f688:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800f68a:	78fb      	ldrb	r3, [r7, #3]
 800f68c:	4619      	mov	r1, r3
 800f68e:	6878      	ldr	r0, [r7, #4]
 800f690:	f005 fdae 	bl	80151f0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800f694:	2300      	movs	r3, #0
}
 800f696:	4618      	mov	r0, r3
 800f698:	3708      	adds	r7, #8
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}

0800f69e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800f69e:	b580      	push	{r7, lr}
 800f6a0:	b084      	sub	sp, #16
 800f6a2:	af00      	add	r7, sp, #0
 800f6a4:	6078      	str	r0, [r7, #4]
 800f6a6:	460b      	mov	r3, r1
 800f6a8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f000 f836 	bl	800f71c <USBH_GetFreePipe>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800f6b4:	89fb      	ldrh	r3, [r7, #14]
 800f6b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6ba:	4293      	cmp	r3, r2
 800f6bc:	d00a      	beq.n	800f6d4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800f6be:	78fa      	ldrb	r2, [r7, #3]
 800f6c0:	89fb      	ldrh	r3, [r7, #14]
 800f6c2:	f003 030f 	and.w	r3, r3, #15
 800f6c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f6ca:	6879      	ldr	r1, [r7, #4]
 800f6cc:	33e0      	adds	r3, #224	; 0xe0
 800f6ce:	009b      	lsls	r3, r3, #2
 800f6d0:	440b      	add	r3, r1
 800f6d2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800f6d4:	89fb      	ldrh	r3, [r7, #14]
 800f6d6:	b2db      	uxtb	r3, r3
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3710      	adds	r7, #16
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd80      	pop	{r7, pc}

0800f6e0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800f6e0:	b480      	push	{r7}
 800f6e2:	b083      	sub	sp, #12
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
 800f6e8:	460b      	mov	r3, r1
 800f6ea:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800f6ec:	78fb      	ldrb	r3, [r7, #3]
 800f6ee:	2b0a      	cmp	r3, #10
 800f6f0:	d80d      	bhi.n	800f70e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800f6f2:	78fb      	ldrb	r3, [r7, #3]
 800f6f4:	687a      	ldr	r2, [r7, #4]
 800f6f6:	33e0      	adds	r3, #224	; 0xe0
 800f6f8:	009b      	lsls	r3, r3, #2
 800f6fa:	4413      	add	r3, r2
 800f6fc:	685a      	ldr	r2, [r3, #4]
 800f6fe:	78fb      	ldrb	r3, [r7, #3]
 800f700:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800f704:	6879      	ldr	r1, [r7, #4]
 800f706:	33e0      	adds	r3, #224	; 0xe0
 800f708:	009b      	lsls	r3, r3, #2
 800f70a:	440b      	add	r3, r1
 800f70c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800f70e:	2300      	movs	r3, #0
}
 800f710:	4618      	mov	r0, r3
 800f712:	370c      	adds	r7, #12
 800f714:	46bd      	mov	sp, r7
 800f716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71a:	4770      	bx	lr

0800f71c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800f71c:	b480      	push	{r7}
 800f71e:	b085      	sub	sp, #20
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800f724:	2300      	movs	r3, #0
 800f726:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800f728:	2300      	movs	r3, #0
 800f72a:	73fb      	strb	r3, [r7, #15]
 800f72c:	e00f      	b.n	800f74e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800f72e:	7bfb      	ldrb	r3, [r7, #15]
 800f730:	687a      	ldr	r2, [r7, #4]
 800f732:	33e0      	adds	r3, #224	; 0xe0
 800f734:	009b      	lsls	r3, r3, #2
 800f736:	4413      	add	r3, r2
 800f738:	685b      	ldr	r3, [r3, #4]
 800f73a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d102      	bne.n	800f748 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800f742:	7bfb      	ldrb	r3, [r7, #15]
 800f744:	b29b      	uxth	r3, r3
 800f746:	e007      	b.n	800f758 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800f748:	7bfb      	ldrb	r3, [r7, #15]
 800f74a:	3301      	adds	r3, #1
 800f74c:	73fb      	strb	r3, [r7, #15]
 800f74e:	7bfb      	ldrb	r3, [r7, #15]
 800f750:	2b0a      	cmp	r3, #10
 800f752:	d9ec      	bls.n	800f72e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800f754:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800f758:	4618      	mov	r0, r3
 800f75a:	3714      	adds	r7, #20
 800f75c:	46bd      	mov	sp, r7
 800f75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f762:	4770      	bx	lr

0800f764 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b084      	sub	sp, #16
 800f768:	af00      	add	r7, sp, #0
 800f76a:	4603      	mov	r3, r0
 800f76c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f76e:	79fb      	ldrb	r3, [r7, #7]
 800f770:	4a08      	ldr	r2, [pc, #32]	; (800f794 <disk_status+0x30>)
 800f772:	009b      	lsls	r3, r3, #2
 800f774:	4413      	add	r3, r2
 800f776:	685b      	ldr	r3, [r3, #4]
 800f778:	685b      	ldr	r3, [r3, #4]
 800f77a:	79fa      	ldrb	r2, [r7, #7]
 800f77c:	4905      	ldr	r1, [pc, #20]	; (800f794 <disk_status+0x30>)
 800f77e:	440a      	add	r2, r1
 800f780:	7b12      	ldrb	r2, [r2, #12]
 800f782:	4610      	mov	r0, r2
 800f784:	4798      	blx	r3
 800f786:	4603      	mov	r3, r0
 800f788:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f78a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	3710      	adds	r7, #16
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}
 800f794:	200002a8 	.word	0x200002a8

0800f798 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b084      	sub	sp, #16
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	4603      	mov	r3, r0
 800f7a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f7a6:	79fb      	ldrb	r3, [r7, #7]
 800f7a8:	4a0d      	ldr	r2, [pc, #52]	; (800f7e0 <disk_initialize+0x48>)
 800f7aa:	5cd3      	ldrb	r3, [r2, r3]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d111      	bne.n	800f7d4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f7b0:	79fb      	ldrb	r3, [r7, #7]
 800f7b2:	4a0b      	ldr	r2, [pc, #44]	; (800f7e0 <disk_initialize+0x48>)
 800f7b4:	2101      	movs	r1, #1
 800f7b6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f7b8:	79fb      	ldrb	r3, [r7, #7]
 800f7ba:	4a09      	ldr	r2, [pc, #36]	; (800f7e0 <disk_initialize+0x48>)
 800f7bc:	009b      	lsls	r3, r3, #2
 800f7be:	4413      	add	r3, r2
 800f7c0:	685b      	ldr	r3, [r3, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	79fa      	ldrb	r2, [r7, #7]
 800f7c6:	4906      	ldr	r1, [pc, #24]	; (800f7e0 <disk_initialize+0x48>)
 800f7c8:	440a      	add	r2, r1
 800f7ca:	7b12      	ldrb	r2, [r2, #12]
 800f7cc:	4610      	mov	r0, r2
 800f7ce:	4798      	blx	r3
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f7d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3710      	adds	r7, #16
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}
 800f7de:	bf00      	nop
 800f7e0:	200002a8 	.word	0x200002a8

0800f7e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f7e4:	b590      	push	{r4, r7, lr}
 800f7e6:	b087      	sub	sp, #28
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	60b9      	str	r1, [r7, #8]
 800f7ec:	607a      	str	r2, [r7, #4]
 800f7ee:	603b      	str	r3, [r7, #0]
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f7f4:	7bfb      	ldrb	r3, [r7, #15]
 800f7f6:	4a0a      	ldr	r2, [pc, #40]	; (800f820 <disk_read+0x3c>)
 800f7f8:	009b      	lsls	r3, r3, #2
 800f7fa:	4413      	add	r3, r2
 800f7fc:	685b      	ldr	r3, [r3, #4]
 800f7fe:	689c      	ldr	r4, [r3, #8]
 800f800:	7bfb      	ldrb	r3, [r7, #15]
 800f802:	4a07      	ldr	r2, [pc, #28]	; (800f820 <disk_read+0x3c>)
 800f804:	4413      	add	r3, r2
 800f806:	7b18      	ldrb	r0, [r3, #12]
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	687a      	ldr	r2, [r7, #4]
 800f80c:	68b9      	ldr	r1, [r7, #8]
 800f80e:	47a0      	blx	r4
 800f810:	4603      	mov	r3, r0
 800f812:	75fb      	strb	r3, [r7, #23]
  return res;
 800f814:	7dfb      	ldrb	r3, [r7, #23]
}
 800f816:	4618      	mov	r0, r3
 800f818:	371c      	adds	r7, #28
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bd90      	pop	{r4, r7, pc}
 800f81e:	bf00      	nop
 800f820:	200002a8 	.word	0x200002a8

0800f824 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f824:	b590      	push	{r4, r7, lr}
 800f826:	b087      	sub	sp, #28
 800f828:	af00      	add	r7, sp, #0
 800f82a:	60b9      	str	r1, [r7, #8]
 800f82c:	607a      	str	r2, [r7, #4]
 800f82e:	603b      	str	r3, [r7, #0]
 800f830:	4603      	mov	r3, r0
 800f832:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f834:	7bfb      	ldrb	r3, [r7, #15]
 800f836:	4a0a      	ldr	r2, [pc, #40]	; (800f860 <disk_write+0x3c>)
 800f838:	009b      	lsls	r3, r3, #2
 800f83a:	4413      	add	r3, r2
 800f83c:	685b      	ldr	r3, [r3, #4]
 800f83e:	68dc      	ldr	r4, [r3, #12]
 800f840:	7bfb      	ldrb	r3, [r7, #15]
 800f842:	4a07      	ldr	r2, [pc, #28]	; (800f860 <disk_write+0x3c>)
 800f844:	4413      	add	r3, r2
 800f846:	7b18      	ldrb	r0, [r3, #12]
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	687a      	ldr	r2, [r7, #4]
 800f84c:	68b9      	ldr	r1, [r7, #8]
 800f84e:	47a0      	blx	r4
 800f850:	4603      	mov	r3, r0
 800f852:	75fb      	strb	r3, [r7, #23]
  return res;
 800f854:	7dfb      	ldrb	r3, [r7, #23]
}
 800f856:	4618      	mov	r0, r3
 800f858:	371c      	adds	r7, #28
 800f85a:	46bd      	mov	sp, r7
 800f85c:	bd90      	pop	{r4, r7, pc}
 800f85e:	bf00      	nop
 800f860:	200002a8 	.word	0x200002a8

0800f864 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b084      	sub	sp, #16
 800f868:	af00      	add	r7, sp, #0
 800f86a:	4603      	mov	r3, r0
 800f86c:	603a      	str	r2, [r7, #0]
 800f86e:	71fb      	strb	r3, [r7, #7]
 800f870:	460b      	mov	r3, r1
 800f872:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f874:	79fb      	ldrb	r3, [r7, #7]
 800f876:	4a09      	ldr	r2, [pc, #36]	; (800f89c <disk_ioctl+0x38>)
 800f878:	009b      	lsls	r3, r3, #2
 800f87a:	4413      	add	r3, r2
 800f87c:	685b      	ldr	r3, [r3, #4]
 800f87e:	691b      	ldr	r3, [r3, #16]
 800f880:	79fa      	ldrb	r2, [r7, #7]
 800f882:	4906      	ldr	r1, [pc, #24]	; (800f89c <disk_ioctl+0x38>)
 800f884:	440a      	add	r2, r1
 800f886:	7b10      	ldrb	r0, [r2, #12]
 800f888:	79b9      	ldrb	r1, [r7, #6]
 800f88a:	683a      	ldr	r2, [r7, #0]
 800f88c:	4798      	blx	r3
 800f88e:	4603      	mov	r3, r0
 800f890:	73fb      	strb	r3, [r7, #15]
  return res;
 800f892:	7bfb      	ldrb	r3, [r7, #15]
}
 800f894:	4618      	mov	r0, r3
 800f896:	3710      	adds	r7, #16
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}
 800f89c:	200002a8 	.word	0x200002a8

0800f8a0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 800f8a0:	b480      	push	{r7}
 800f8a2:	af00      	add	r7, sp, #0
  return 0;
 800f8a4:	2300      	movs	r3, #0
}
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ae:	4770      	bx	lr

0800f8b0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f8b0:	b480      	push	{r7}
 800f8b2:	b085      	sub	sp, #20
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	3301      	adds	r3, #1
 800f8bc:	781b      	ldrb	r3, [r3, #0]
 800f8be:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f8c0:	89fb      	ldrh	r3, [r7, #14]
 800f8c2:	021b      	lsls	r3, r3, #8
 800f8c4:	b21a      	sxth	r2, r3
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	781b      	ldrb	r3, [r3, #0]
 800f8ca:	b21b      	sxth	r3, r3
 800f8cc:	4313      	orrs	r3, r2
 800f8ce:	b21b      	sxth	r3, r3
 800f8d0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f8d2:	89fb      	ldrh	r3, [r7, #14]
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3714      	adds	r7, #20
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8de:	4770      	bx	lr

0800f8e0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f8e0:	b480      	push	{r7}
 800f8e2:	b085      	sub	sp, #20
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	3303      	adds	r3, #3
 800f8ec:	781b      	ldrb	r3, [r3, #0]
 800f8ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	021b      	lsls	r3, r3, #8
 800f8f4:	687a      	ldr	r2, [r7, #4]
 800f8f6:	3202      	adds	r2, #2
 800f8f8:	7812      	ldrb	r2, [r2, #0]
 800f8fa:	4313      	orrs	r3, r2
 800f8fc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	021b      	lsls	r3, r3, #8
 800f902:	687a      	ldr	r2, [r7, #4]
 800f904:	3201      	adds	r2, #1
 800f906:	7812      	ldrb	r2, [r2, #0]
 800f908:	4313      	orrs	r3, r2
 800f90a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	021b      	lsls	r3, r3, #8
 800f910:	687a      	ldr	r2, [r7, #4]
 800f912:	7812      	ldrb	r2, [r2, #0]
 800f914:	4313      	orrs	r3, r2
 800f916:	60fb      	str	r3, [r7, #12]
	return rv;
 800f918:	68fb      	ldr	r3, [r7, #12]
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3714      	adds	r7, #20
 800f91e:	46bd      	mov	sp, r7
 800f920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f924:	4770      	bx	lr

0800f926 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f926:	b480      	push	{r7}
 800f928:	b083      	sub	sp, #12
 800f92a:	af00      	add	r7, sp, #0
 800f92c:	6078      	str	r0, [r7, #4]
 800f92e:	460b      	mov	r3, r1
 800f930:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	1c5a      	adds	r2, r3, #1
 800f936:	607a      	str	r2, [r7, #4]
 800f938:	887a      	ldrh	r2, [r7, #2]
 800f93a:	b2d2      	uxtb	r2, r2
 800f93c:	701a      	strb	r2, [r3, #0]
 800f93e:	887b      	ldrh	r3, [r7, #2]
 800f940:	0a1b      	lsrs	r3, r3, #8
 800f942:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	1c5a      	adds	r2, r3, #1
 800f948:	607a      	str	r2, [r7, #4]
 800f94a:	887a      	ldrh	r2, [r7, #2]
 800f94c:	b2d2      	uxtb	r2, r2
 800f94e:	701a      	strb	r2, [r3, #0]
}
 800f950:	bf00      	nop
 800f952:	370c      	adds	r7, #12
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr

0800f95c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f95c:	b480      	push	{r7}
 800f95e:	b083      	sub	sp, #12
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
 800f964:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	1c5a      	adds	r2, r3, #1
 800f96a:	607a      	str	r2, [r7, #4]
 800f96c:	683a      	ldr	r2, [r7, #0]
 800f96e:	b2d2      	uxtb	r2, r2
 800f970:	701a      	strb	r2, [r3, #0]
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	0a1b      	lsrs	r3, r3, #8
 800f976:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	1c5a      	adds	r2, r3, #1
 800f97c:	607a      	str	r2, [r7, #4]
 800f97e:	683a      	ldr	r2, [r7, #0]
 800f980:	b2d2      	uxtb	r2, r2
 800f982:	701a      	strb	r2, [r3, #0]
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	0a1b      	lsrs	r3, r3, #8
 800f988:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	1c5a      	adds	r2, r3, #1
 800f98e:	607a      	str	r2, [r7, #4]
 800f990:	683a      	ldr	r2, [r7, #0]
 800f992:	b2d2      	uxtb	r2, r2
 800f994:	701a      	strb	r2, [r3, #0]
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	0a1b      	lsrs	r3, r3, #8
 800f99a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	1c5a      	adds	r2, r3, #1
 800f9a0:	607a      	str	r2, [r7, #4]
 800f9a2:	683a      	ldr	r2, [r7, #0]
 800f9a4:	b2d2      	uxtb	r2, r2
 800f9a6:	701a      	strb	r2, [r3, #0]
}
 800f9a8:	bf00      	nop
 800f9aa:	370c      	adds	r7, #12
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b2:	4770      	bx	lr

0800f9b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f9b4:	b480      	push	{r7}
 800f9b6:	b087      	sub	sp, #28
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	60f8      	str	r0, [r7, #12]
 800f9bc:	60b9      	str	r1, [r7, #8]
 800f9be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f9c4:	68bb      	ldr	r3, [r7, #8]
 800f9c6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d00d      	beq.n	800f9ea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f9ce:	693a      	ldr	r2, [r7, #16]
 800f9d0:	1c53      	adds	r3, r2, #1
 800f9d2:	613b      	str	r3, [r7, #16]
 800f9d4:	697b      	ldr	r3, [r7, #20]
 800f9d6:	1c59      	adds	r1, r3, #1
 800f9d8:	6179      	str	r1, [r7, #20]
 800f9da:	7812      	ldrb	r2, [r2, #0]
 800f9dc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	3b01      	subs	r3, #1
 800f9e2:	607b      	str	r3, [r7, #4]
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d1f1      	bne.n	800f9ce <mem_cpy+0x1a>
	}
}
 800f9ea:	bf00      	nop
 800f9ec:	371c      	adds	r7, #28
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f4:	4770      	bx	lr

0800f9f6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f9f6:	b480      	push	{r7}
 800f9f8:	b087      	sub	sp, #28
 800f9fa:	af00      	add	r7, sp, #0
 800f9fc:	60f8      	str	r0, [r7, #12]
 800f9fe:	60b9      	str	r1, [r7, #8]
 800fa00:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800fa06:	697b      	ldr	r3, [r7, #20]
 800fa08:	1c5a      	adds	r2, r3, #1
 800fa0a:	617a      	str	r2, [r7, #20]
 800fa0c:	68ba      	ldr	r2, [r7, #8]
 800fa0e:	b2d2      	uxtb	r2, r2
 800fa10:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	3b01      	subs	r3, #1
 800fa16:	607b      	str	r3, [r7, #4]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d1f3      	bne.n	800fa06 <mem_set+0x10>
}
 800fa1e:	bf00      	nop
 800fa20:	371c      	adds	r7, #28
 800fa22:	46bd      	mov	sp, r7
 800fa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa28:	4770      	bx	lr

0800fa2a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800fa2a:	b480      	push	{r7}
 800fa2c:	b089      	sub	sp, #36	; 0x24
 800fa2e:	af00      	add	r7, sp, #0
 800fa30:	60f8      	str	r0, [r7, #12]
 800fa32:	60b9      	str	r1, [r7, #8]
 800fa34:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	61fb      	str	r3, [r7, #28]
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800fa42:	69fb      	ldr	r3, [r7, #28]
 800fa44:	1c5a      	adds	r2, r3, #1
 800fa46:	61fa      	str	r2, [r7, #28]
 800fa48:	781b      	ldrb	r3, [r3, #0]
 800fa4a:	4619      	mov	r1, r3
 800fa4c:	69bb      	ldr	r3, [r7, #24]
 800fa4e:	1c5a      	adds	r2, r3, #1
 800fa50:	61ba      	str	r2, [r7, #24]
 800fa52:	781b      	ldrb	r3, [r3, #0]
 800fa54:	1acb      	subs	r3, r1, r3
 800fa56:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	3b01      	subs	r3, #1
 800fa5c:	607b      	str	r3, [r7, #4]
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d002      	beq.n	800fa6a <mem_cmp+0x40>
 800fa64:	697b      	ldr	r3, [r7, #20]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d0eb      	beq.n	800fa42 <mem_cmp+0x18>

	return r;
 800fa6a:	697b      	ldr	r3, [r7, #20]
}
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	3724      	adds	r7, #36	; 0x24
 800fa70:	46bd      	mov	sp, r7
 800fa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa76:	4770      	bx	lr

0800fa78 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800fa78:	b480      	push	{r7}
 800fa7a:	b083      	sub	sp, #12
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
 800fa80:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800fa82:	e002      	b.n	800fa8a <chk_chr+0x12>
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	3301      	adds	r3, #1
 800fa88:	607b      	str	r3, [r7, #4]
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	781b      	ldrb	r3, [r3, #0]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d005      	beq.n	800fa9e <chk_chr+0x26>
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	781b      	ldrb	r3, [r3, #0]
 800fa96:	461a      	mov	r2, r3
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	d1f2      	bne.n	800fa84 <chk_chr+0xc>
	return *str;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	781b      	ldrb	r3, [r3, #0]
}
 800faa2:	4618      	mov	r0, r3
 800faa4:	370c      	adds	r7, #12
 800faa6:	46bd      	mov	sp, r7
 800faa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faac:	4770      	bx	lr
	...

0800fab0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fab0:	b480      	push	{r7}
 800fab2:	b085      	sub	sp, #20
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
 800fab8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800faba:	2300      	movs	r3, #0
 800fabc:	60bb      	str	r3, [r7, #8]
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	60fb      	str	r3, [r7, #12]
 800fac2:	e029      	b.n	800fb18 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800fac4:	4a27      	ldr	r2, [pc, #156]	; (800fb64 <chk_lock+0xb4>)
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	011b      	lsls	r3, r3, #4
 800faca:	4413      	add	r3, r2
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d01d      	beq.n	800fb0e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fad2:	4a24      	ldr	r2, [pc, #144]	; (800fb64 <chk_lock+0xb4>)
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	011b      	lsls	r3, r3, #4
 800fad8:	4413      	add	r3, r2
 800fada:	681a      	ldr	r2, [r3, #0]
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	429a      	cmp	r2, r3
 800fae2:	d116      	bne.n	800fb12 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800fae4:	4a1f      	ldr	r2, [pc, #124]	; (800fb64 <chk_lock+0xb4>)
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	011b      	lsls	r3, r3, #4
 800faea:	4413      	add	r3, r2
 800faec:	3304      	adds	r3, #4
 800faee:	681a      	ldr	r2, [r3, #0]
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800faf4:	429a      	cmp	r2, r3
 800faf6:	d10c      	bne.n	800fb12 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800faf8:	4a1a      	ldr	r2, [pc, #104]	; (800fb64 <chk_lock+0xb4>)
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	011b      	lsls	r3, r3, #4
 800fafe:	4413      	add	r3, r2
 800fb00:	3308      	adds	r3, #8
 800fb02:	681a      	ldr	r2, [r3, #0]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	d102      	bne.n	800fb12 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fb0c:	e007      	b.n	800fb1e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800fb0e:	2301      	movs	r3, #1
 800fb10:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	3301      	adds	r3, #1
 800fb16:	60fb      	str	r3, [r7, #12]
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	2b01      	cmp	r3, #1
 800fb1c:	d9d2      	bls.n	800fac4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	2b02      	cmp	r3, #2
 800fb22:	d109      	bne.n	800fb38 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d102      	bne.n	800fb30 <chk_lock+0x80>
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	2b02      	cmp	r3, #2
 800fb2e:	d101      	bne.n	800fb34 <chk_lock+0x84>
 800fb30:	2300      	movs	r3, #0
 800fb32:	e010      	b.n	800fb56 <chk_lock+0xa6>
 800fb34:	2312      	movs	r3, #18
 800fb36:	e00e      	b.n	800fb56 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d108      	bne.n	800fb50 <chk_lock+0xa0>
 800fb3e:	4a09      	ldr	r2, [pc, #36]	; (800fb64 <chk_lock+0xb4>)
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	011b      	lsls	r3, r3, #4
 800fb44:	4413      	add	r3, r2
 800fb46:	330c      	adds	r3, #12
 800fb48:	881b      	ldrh	r3, [r3, #0]
 800fb4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb4e:	d101      	bne.n	800fb54 <chk_lock+0xa4>
 800fb50:	2310      	movs	r3, #16
 800fb52:	e000      	b.n	800fb56 <chk_lock+0xa6>
 800fb54:	2300      	movs	r3, #0
}
 800fb56:	4618      	mov	r0, r3
 800fb58:	3714      	adds	r7, #20
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb60:	4770      	bx	lr
 800fb62:	bf00      	nop
 800fb64:	20000288 	.word	0x20000288

0800fb68 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800fb68:	b480      	push	{r7}
 800fb6a:	b083      	sub	sp, #12
 800fb6c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fb6e:	2300      	movs	r3, #0
 800fb70:	607b      	str	r3, [r7, #4]
 800fb72:	e002      	b.n	800fb7a <enq_lock+0x12>
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	3301      	adds	r3, #1
 800fb78:	607b      	str	r3, [r7, #4]
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	2b01      	cmp	r3, #1
 800fb7e:	d806      	bhi.n	800fb8e <enq_lock+0x26>
 800fb80:	4a09      	ldr	r2, [pc, #36]	; (800fba8 <enq_lock+0x40>)
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	011b      	lsls	r3, r3, #4
 800fb86:	4413      	add	r3, r2
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d1f2      	bne.n	800fb74 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	2b02      	cmp	r3, #2
 800fb92:	bf14      	ite	ne
 800fb94:	2301      	movne	r3, #1
 800fb96:	2300      	moveq	r3, #0
 800fb98:	b2db      	uxtb	r3, r3
}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	370c      	adds	r7, #12
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba4:	4770      	bx	lr
 800fba6:	bf00      	nop
 800fba8:	20000288 	.word	0x20000288

0800fbac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fbac:	b480      	push	{r7}
 800fbae:	b085      	sub	sp, #20
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
 800fbb4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	60fb      	str	r3, [r7, #12]
 800fbba:	e01f      	b.n	800fbfc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800fbbc:	4a41      	ldr	r2, [pc, #260]	; (800fcc4 <inc_lock+0x118>)
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	011b      	lsls	r3, r3, #4
 800fbc2:	4413      	add	r3, r2
 800fbc4:	681a      	ldr	r2, [r3, #0]
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	d113      	bne.n	800fbf6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800fbce:	4a3d      	ldr	r2, [pc, #244]	; (800fcc4 <inc_lock+0x118>)
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	011b      	lsls	r3, r3, #4
 800fbd4:	4413      	add	r3, r2
 800fbd6:	3304      	adds	r3, #4
 800fbd8:	681a      	ldr	r2, [r3, #0]
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800fbde:	429a      	cmp	r2, r3
 800fbe0:	d109      	bne.n	800fbf6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800fbe2:	4a38      	ldr	r2, [pc, #224]	; (800fcc4 <inc_lock+0x118>)
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	011b      	lsls	r3, r3, #4
 800fbe8:	4413      	add	r3, r2
 800fbea:	3308      	adds	r3, #8
 800fbec:	681a      	ldr	r2, [r3, #0]
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800fbf2:	429a      	cmp	r2, r3
 800fbf4:	d006      	beq.n	800fc04 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	3301      	adds	r3, #1
 800fbfa:	60fb      	str	r3, [r7, #12]
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	2b01      	cmp	r3, #1
 800fc00:	d9dc      	bls.n	800fbbc <inc_lock+0x10>
 800fc02:	e000      	b.n	800fc06 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800fc04:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	2b02      	cmp	r3, #2
 800fc0a:	d132      	bne.n	800fc72 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	60fb      	str	r3, [r7, #12]
 800fc10:	e002      	b.n	800fc18 <inc_lock+0x6c>
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	3301      	adds	r3, #1
 800fc16:	60fb      	str	r3, [r7, #12]
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	2b01      	cmp	r3, #1
 800fc1c:	d806      	bhi.n	800fc2c <inc_lock+0x80>
 800fc1e:	4a29      	ldr	r2, [pc, #164]	; (800fcc4 <inc_lock+0x118>)
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	011b      	lsls	r3, r3, #4
 800fc24:	4413      	add	r3, r2
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d1f2      	bne.n	800fc12 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	2b02      	cmp	r3, #2
 800fc30:	d101      	bne.n	800fc36 <inc_lock+0x8a>
 800fc32:	2300      	movs	r3, #0
 800fc34:	e040      	b.n	800fcb8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681a      	ldr	r2, [r3, #0]
 800fc3a:	4922      	ldr	r1, [pc, #136]	; (800fcc4 <inc_lock+0x118>)
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	011b      	lsls	r3, r3, #4
 800fc40:	440b      	add	r3, r1
 800fc42:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	689a      	ldr	r2, [r3, #8]
 800fc48:	491e      	ldr	r1, [pc, #120]	; (800fcc4 <inc_lock+0x118>)
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	011b      	lsls	r3, r3, #4
 800fc4e:	440b      	add	r3, r1
 800fc50:	3304      	adds	r3, #4
 800fc52:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	695a      	ldr	r2, [r3, #20]
 800fc58:	491a      	ldr	r1, [pc, #104]	; (800fcc4 <inc_lock+0x118>)
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	011b      	lsls	r3, r3, #4
 800fc5e:	440b      	add	r3, r1
 800fc60:	3308      	adds	r3, #8
 800fc62:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800fc64:	4a17      	ldr	r2, [pc, #92]	; (800fcc4 <inc_lock+0x118>)
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	011b      	lsls	r3, r3, #4
 800fc6a:	4413      	add	r3, r2
 800fc6c:	330c      	adds	r3, #12
 800fc6e:	2200      	movs	r2, #0
 800fc70:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fc72:	683b      	ldr	r3, [r7, #0]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d009      	beq.n	800fc8c <inc_lock+0xe0>
 800fc78:	4a12      	ldr	r2, [pc, #72]	; (800fcc4 <inc_lock+0x118>)
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	011b      	lsls	r3, r3, #4
 800fc7e:	4413      	add	r3, r2
 800fc80:	330c      	adds	r3, #12
 800fc82:	881b      	ldrh	r3, [r3, #0]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d001      	beq.n	800fc8c <inc_lock+0xe0>
 800fc88:	2300      	movs	r3, #0
 800fc8a:	e015      	b.n	800fcb8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d108      	bne.n	800fca4 <inc_lock+0xf8>
 800fc92:	4a0c      	ldr	r2, [pc, #48]	; (800fcc4 <inc_lock+0x118>)
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	011b      	lsls	r3, r3, #4
 800fc98:	4413      	add	r3, r2
 800fc9a:	330c      	adds	r3, #12
 800fc9c:	881b      	ldrh	r3, [r3, #0]
 800fc9e:	3301      	adds	r3, #1
 800fca0:	b29a      	uxth	r2, r3
 800fca2:	e001      	b.n	800fca8 <inc_lock+0xfc>
 800fca4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fca8:	4906      	ldr	r1, [pc, #24]	; (800fcc4 <inc_lock+0x118>)
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	011b      	lsls	r3, r3, #4
 800fcae:	440b      	add	r3, r1
 800fcb0:	330c      	adds	r3, #12
 800fcb2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	3301      	adds	r3, #1
}
 800fcb8:	4618      	mov	r0, r3
 800fcba:	3714      	adds	r7, #20
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc2:	4770      	bx	lr
 800fcc4:	20000288 	.word	0x20000288

0800fcc8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800fcc8:	b480      	push	{r7}
 800fcca:	b085      	sub	sp, #20
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	3b01      	subs	r3, #1
 800fcd4:	607b      	str	r3, [r7, #4]
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	2b01      	cmp	r3, #1
 800fcda:	d825      	bhi.n	800fd28 <dec_lock+0x60>
		n = Files[i].ctr;
 800fcdc:	4a17      	ldr	r2, [pc, #92]	; (800fd3c <dec_lock+0x74>)
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	011b      	lsls	r3, r3, #4
 800fce2:	4413      	add	r3, r2
 800fce4:	330c      	adds	r3, #12
 800fce6:	881b      	ldrh	r3, [r3, #0]
 800fce8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800fcea:	89fb      	ldrh	r3, [r7, #14]
 800fcec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fcf0:	d101      	bne.n	800fcf6 <dec_lock+0x2e>
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800fcf6:	89fb      	ldrh	r3, [r7, #14]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d002      	beq.n	800fd02 <dec_lock+0x3a>
 800fcfc:	89fb      	ldrh	r3, [r7, #14]
 800fcfe:	3b01      	subs	r3, #1
 800fd00:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800fd02:	4a0e      	ldr	r2, [pc, #56]	; (800fd3c <dec_lock+0x74>)
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	011b      	lsls	r3, r3, #4
 800fd08:	4413      	add	r3, r2
 800fd0a:	330c      	adds	r3, #12
 800fd0c:	89fa      	ldrh	r2, [r7, #14]
 800fd0e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fd10:	89fb      	ldrh	r3, [r7, #14]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d105      	bne.n	800fd22 <dec_lock+0x5a>
 800fd16:	4a09      	ldr	r2, [pc, #36]	; (800fd3c <dec_lock+0x74>)
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	011b      	lsls	r3, r3, #4
 800fd1c:	4413      	add	r3, r2
 800fd1e:	2200      	movs	r2, #0
 800fd20:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fd22:	2300      	movs	r3, #0
 800fd24:	737b      	strb	r3, [r7, #13]
 800fd26:	e001      	b.n	800fd2c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fd28:	2302      	movs	r3, #2
 800fd2a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800fd2c:	7b7b      	ldrb	r3, [r7, #13]
}
 800fd2e:	4618      	mov	r0, r3
 800fd30:	3714      	adds	r7, #20
 800fd32:	46bd      	mov	sp, r7
 800fd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd38:	4770      	bx	lr
 800fd3a:	bf00      	nop
 800fd3c:	20000288 	.word	0x20000288

0800fd40 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fd40:	b480      	push	{r7}
 800fd42:	b085      	sub	sp, #20
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800fd48:	2300      	movs	r3, #0
 800fd4a:	60fb      	str	r3, [r7, #12]
 800fd4c:	e010      	b.n	800fd70 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fd4e:	4a0d      	ldr	r2, [pc, #52]	; (800fd84 <clear_lock+0x44>)
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	011b      	lsls	r3, r3, #4
 800fd54:	4413      	add	r3, r2
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	687a      	ldr	r2, [r7, #4]
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d105      	bne.n	800fd6a <clear_lock+0x2a>
 800fd5e:	4a09      	ldr	r2, [pc, #36]	; (800fd84 <clear_lock+0x44>)
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	011b      	lsls	r3, r3, #4
 800fd64:	4413      	add	r3, r2
 800fd66:	2200      	movs	r2, #0
 800fd68:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	3301      	adds	r3, #1
 800fd6e:	60fb      	str	r3, [r7, #12]
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	2b01      	cmp	r3, #1
 800fd74:	d9eb      	bls.n	800fd4e <clear_lock+0xe>
	}
}
 800fd76:	bf00      	nop
 800fd78:	3714      	adds	r7, #20
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd80:	4770      	bx	lr
 800fd82:	bf00      	nop
 800fd84:	20000288 	.word	0x20000288

0800fd88 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b086      	sub	sp, #24
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800fd90:	2300      	movs	r3, #0
 800fd92:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	78db      	ldrb	r3, [r3, #3]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d034      	beq.n	800fe06 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fda0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	7858      	ldrb	r0, [r3, #1]
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fdac:	2301      	movs	r3, #1
 800fdae:	697a      	ldr	r2, [r7, #20]
 800fdb0:	f7ff fd38 	bl	800f824 <disk_write>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d002      	beq.n	800fdc0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800fdba:	2301      	movs	r3, #1
 800fdbc:	73fb      	strb	r3, [r7, #15]
 800fdbe:	e022      	b.n	800fe06 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	6a1b      	ldr	r3, [r3, #32]
 800fdca:	697a      	ldr	r2, [r7, #20]
 800fdcc:	1ad2      	subs	r2, r2, r3
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	699b      	ldr	r3, [r3, #24]
 800fdd2:	429a      	cmp	r2, r3
 800fdd4:	d217      	bcs.n	800fe06 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	789b      	ldrb	r3, [r3, #2]
 800fdda:	613b      	str	r3, [r7, #16]
 800fddc:	e010      	b.n	800fe00 <sync_window+0x78>
					wsect += fs->fsize;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	699b      	ldr	r3, [r3, #24]
 800fde2:	697a      	ldr	r2, [r7, #20]
 800fde4:	4413      	add	r3, r2
 800fde6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	7858      	ldrb	r0, [r3, #1]
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	697a      	ldr	r2, [r7, #20]
 800fdf6:	f7ff fd15 	bl	800f824 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fdfa:	693b      	ldr	r3, [r7, #16]
 800fdfc:	3b01      	subs	r3, #1
 800fdfe:	613b      	str	r3, [r7, #16]
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	2b01      	cmp	r3, #1
 800fe04:	d8eb      	bhi.n	800fdde <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800fe06:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe08:	4618      	mov	r0, r3
 800fe0a:	3718      	adds	r7, #24
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}

0800fe10 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b084      	sub	sp, #16
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
 800fe18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe22:	683a      	ldr	r2, [r7, #0]
 800fe24:	429a      	cmp	r2, r3
 800fe26:	d01b      	beq.n	800fe60 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f7ff ffad 	bl	800fd88 <sync_window>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800fe32:	7bfb      	ldrb	r3, [r7, #15]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d113      	bne.n	800fe60 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	7858      	ldrb	r0, [r3, #1]
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fe42:	2301      	movs	r3, #1
 800fe44:	683a      	ldr	r2, [r7, #0]
 800fe46:	f7ff fccd 	bl	800f7e4 <disk_read>
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d004      	beq.n	800fe5a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fe50:	f04f 33ff 	mov.w	r3, #4294967295
 800fe54:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800fe56:	2301      	movs	r3, #1
 800fe58:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	683a      	ldr	r2, [r7, #0]
 800fe5e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800fe60:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe62:	4618      	mov	r0, r3
 800fe64:	3710      	adds	r7, #16
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}
	...

0800fe6c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b084      	sub	sp, #16
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f7ff ff87 	bl	800fd88 <sync_window>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fe7e:	7bfb      	ldrb	r3, [r7, #15]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d158      	bne.n	800ff36 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	781b      	ldrb	r3, [r3, #0]
 800fe88:	2b03      	cmp	r3, #3
 800fe8a:	d148      	bne.n	800ff1e <sync_fs+0xb2>
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	791b      	ldrb	r3, [r3, #4]
 800fe90:	2b01      	cmp	r3, #1
 800fe92:	d144      	bne.n	800ff1e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	3330      	adds	r3, #48	; 0x30
 800fe98:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fe9c:	2100      	movs	r1, #0
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f7ff fda9 	bl	800f9f6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	3330      	adds	r3, #48	; 0x30
 800fea8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800feac:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800feb0:	4618      	mov	r0, r3
 800feb2:	f7ff fd38 	bl	800f926 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	3330      	adds	r3, #48	; 0x30
 800feba:	4921      	ldr	r1, [pc, #132]	; (800ff40 <sync_fs+0xd4>)
 800febc:	4618      	mov	r0, r3
 800febe:	f7ff fd4d 	bl	800f95c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	3330      	adds	r3, #48	; 0x30
 800fec6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800feca:	491e      	ldr	r1, [pc, #120]	; (800ff44 <sync_fs+0xd8>)
 800fecc:	4618      	mov	r0, r3
 800fece:	f7ff fd45 	bl	800f95c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	3330      	adds	r3, #48	; 0x30
 800fed6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	691b      	ldr	r3, [r3, #16]
 800fede:	4619      	mov	r1, r3
 800fee0:	4610      	mov	r0, r2
 800fee2:	f7ff fd3b 	bl	800f95c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	3330      	adds	r3, #48	; 0x30
 800feea:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	68db      	ldr	r3, [r3, #12]
 800fef2:	4619      	mov	r1, r3
 800fef4:	4610      	mov	r0, r2
 800fef6:	f7ff fd31 	bl	800f95c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	69db      	ldr	r3, [r3, #28]
 800fefe:	1c5a      	adds	r2, r3, #1
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	7858      	ldrb	r0, [r3, #1]
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff12:	2301      	movs	r3, #1
 800ff14:	f7ff fc86 	bl	800f824 <disk_write>
			fs->fsi_flag = 0;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	785b      	ldrb	r3, [r3, #1]
 800ff22:	2200      	movs	r2, #0
 800ff24:	2100      	movs	r1, #0
 800ff26:	4618      	mov	r0, r3
 800ff28:	f7ff fc9c 	bl	800f864 <disk_ioctl>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d001      	beq.n	800ff36 <sync_fs+0xca>
 800ff32:	2301      	movs	r3, #1
 800ff34:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ff36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3710      	adds	r7, #16
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}
 800ff40:	41615252 	.word	0x41615252
 800ff44:	61417272 	.word	0x61417272

0800ff48 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ff48:	b480      	push	{r7}
 800ff4a:	b083      	sub	sp, #12
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
 800ff50:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	3b02      	subs	r3, #2
 800ff56:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	695b      	ldr	r3, [r3, #20]
 800ff5c:	3b02      	subs	r3, #2
 800ff5e:	683a      	ldr	r2, [r7, #0]
 800ff60:	429a      	cmp	r2, r3
 800ff62:	d301      	bcc.n	800ff68 <clust2sect+0x20>
 800ff64:	2300      	movs	r3, #0
 800ff66:	e008      	b.n	800ff7a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	895b      	ldrh	r3, [r3, #10]
 800ff6c:	461a      	mov	r2, r3
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	fb03 f202 	mul.w	r2, r3, r2
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff78:	4413      	add	r3, r2
}
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	370c      	adds	r7, #12
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff84:	4770      	bx	lr

0800ff86 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ff86:	b580      	push	{r7, lr}
 800ff88:	b086      	sub	sp, #24
 800ff8a:	af00      	add	r7, sp, #0
 800ff8c:	6078      	str	r0, [r7, #4]
 800ff8e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	2b01      	cmp	r3, #1
 800ff9a:	d904      	bls.n	800ffa6 <get_fat+0x20>
 800ff9c:	693b      	ldr	r3, [r7, #16]
 800ff9e:	695b      	ldr	r3, [r3, #20]
 800ffa0:	683a      	ldr	r2, [r7, #0]
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d302      	bcc.n	800ffac <get_fat+0x26>
		val = 1;	/* Internal error */
 800ffa6:	2301      	movs	r3, #1
 800ffa8:	617b      	str	r3, [r7, #20]
 800ffaa:	e08c      	b.n	80100c6 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ffac:	f04f 33ff 	mov.w	r3, #4294967295
 800ffb0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ffb2:	693b      	ldr	r3, [r7, #16]
 800ffb4:	781b      	ldrb	r3, [r3, #0]
 800ffb6:	2b02      	cmp	r3, #2
 800ffb8:	d045      	beq.n	8010046 <get_fat+0xc0>
 800ffba:	2b03      	cmp	r3, #3
 800ffbc:	d05d      	beq.n	801007a <get_fat+0xf4>
 800ffbe:	2b01      	cmp	r3, #1
 800ffc0:	d177      	bne.n	80100b2 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	60fb      	str	r3, [r7, #12]
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	085b      	lsrs	r3, r3, #1
 800ffca:	68fa      	ldr	r2, [r7, #12]
 800ffcc:	4413      	add	r3, r2
 800ffce:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ffd0:	693b      	ldr	r3, [r7, #16]
 800ffd2:	6a1a      	ldr	r2, [r3, #32]
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	0a5b      	lsrs	r3, r3, #9
 800ffd8:	4413      	add	r3, r2
 800ffda:	4619      	mov	r1, r3
 800ffdc:	6938      	ldr	r0, [r7, #16]
 800ffde:	f7ff ff17 	bl	800fe10 <move_window>
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d167      	bne.n	80100b8 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	1c5a      	adds	r2, r3, #1
 800ffec:	60fa      	str	r2, [r7, #12]
 800ffee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fff2:	693a      	ldr	r2, [r7, #16]
 800fff4:	4413      	add	r3, r2
 800fff6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fffa:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fffc:	693b      	ldr	r3, [r7, #16]
 800fffe:	6a1a      	ldr	r2, [r3, #32]
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	0a5b      	lsrs	r3, r3, #9
 8010004:	4413      	add	r3, r2
 8010006:	4619      	mov	r1, r3
 8010008:	6938      	ldr	r0, [r7, #16]
 801000a:	f7ff ff01 	bl	800fe10 <move_window>
 801000e:	4603      	mov	r3, r0
 8010010:	2b00      	cmp	r3, #0
 8010012:	d153      	bne.n	80100bc <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801001a:	693a      	ldr	r2, [r7, #16]
 801001c:	4413      	add	r3, r2
 801001e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010022:	021b      	lsls	r3, r3, #8
 8010024:	461a      	mov	r2, r3
 8010026:	68bb      	ldr	r3, [r7, #8]
 8010028:	4313      	orrs	r3, r2
 801002a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	f003 0301 	and.w	r3, r3, #1
 8010032:	2b00      	cmp	r3, #0
 8010034:	d002      	beq.n	801003c <get_fat+0xb6>
 8010036:	68bb      	ldr	r3, [r7, #8]
 8010038:	091b      	lsrs	r3, r3, #4
 801003a:	e002      	b.n	8010042 <get_fat+0xbc>
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010042:	617b      	str	r3, [r7, #20]
			break;
 8010044:	e03f      	b.n	80100c6 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010046:	693b      	ldr	r3, [r7, #16]
 8010048:	6a1a      	ldr	r2, [r3, #32]
 801004a:	683b      	ldr	r3, [r7, #0]
 801004c:	0a1b      	lsrs	r3, r3, #8
 801004e:	4413      	add	r3, r2
 8010050:	4619      	mov	r1, r3
 8010052:	6938      	ldr	r0, [r7, #16]
 8010054:	f7ff fedc 	bl	800fe10 <move_window>
 8010058:	4603      	mov	r3, r0
 801005a:	2b00      	cmp	r3, #0
 801005c:	d130      	bne.n	80100c0 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801005e:	693b      	ldr	r3, [r7, #16]
 8010060:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010064:	683b      	ldr	r3, [r7, #0]
 8010066:	005b      	lsls	r3, r3, #1
 8010068:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801006c:	4413      	add	r3, r2
 801006e:	4618      	mov	r0, r3
 8010070:	f7ff fc1e 	bl	800f8b0 <ld_word>
 8010074:	4603      	mov	r3, r0
 8010076:	617b      	str	r3, [r7, #20]
			break;
 8010078:	e025      	b.n	80100c6 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801007a:	693b      	ldr	r3, [r7, #16]
 801007c:	6a1a      	ldr	r2, [r3, #32]
 801007e:	683b      	ldr	r3, [r7, #0]
 8010080:	09db      	lsrs	r3, r3, #7
 8010082:	4413      	add	r3, r2
 8010084:	4619      	mov	r1, r3
 8010086:	6938      	ldr	r0, [r7, #16]
 8010088:	f7ff fec2 	bl	800fe10 <move_window>
 801008c:	4603      	mov	r3, r0
 801008e:	2b00      	cmp	r3, #0
 8010090:	d118      	bne.n	80100c4 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010092:	693b      	ldr	r3, [r7, #16]
 8010094:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	009b      	lsls	r3, r3, #2
 801009c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80100a0:	4413      	add	r3, r2
 80100a2:	4618      	mov	r0, r3
 80100a4:	f7ff fc1c 	bl	800f8e0 <ld_dword>
 80100a8:	4603      	mov	r3, r0
 80100aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80100ae:	617b      	str	r3, [r7, #20]
			break;
 80100b0:	e009      	b.n	80100c6 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80100b2:	2301      	movs	r3, #1
 80100b4:	617b      	str	r3, [r7, #20]
 80100b6:	e006      	b.n	80100c6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80100b8:	bf00      	nop
 80100ba:	e004      	b.n	80100c6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80100bc:	bf00      	nop
 80100be:	e002      	b.n	80100c6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80100c0:	bf00      	nop
 80100c2:	e000      	b.n	80100c6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80100c4:	bf00      	nop
		}
	}

	return val;
 80100c6:	697b      	ldr	r3, [r7, #20]
}
 80100c8:	4618      	mov	r0, r3
 80100ca:	3718      	adds	r7, #24
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}

080100d0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80100d0:	b590      	push	{r4, r7, lr}
 80100d2:	b089      	sub	sp, #36	; 0x24
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	60f8      	str	r0, [r7, #12]
 80100d8:	60b9      	str	r1, [r7, #8]
 80100da:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80100dc:	2302      	movs	r3, #2
 80100de:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80100e0:	68bb      	ldr	r3, [r7, #8]
 80100e2:	2b01      	cmp	r3, #1
 80100e4:	f240 80d6 	bls.w	8010294 <put_fat+0x1c4>
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	695b      	ldr	r3, [r3, #20]
 80100ec:	68ba      	ldr	r2, [r7, #8]
 80100ee:	429a      	cmp	r2, r3
 80100f0:	f080 80d0 	bcs.w	8010294 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	781b      	ldrb	r3, [r3, #0]
 80100f8:	2b02      	cmp	r3, #2
 80100fa:	d073      	beq.n	80101e4 <put_fat+0x114>
 80100fc:	2b03      	cmp	r3, #3
 80100fe:	f000 8091 	beq.w	8010224 <put_fat+0x154>
 8010102:	2b01      	cmp	r3, #1
 8010104:	f040 80c6 	bne.w	8010294 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	61bb      	str	r3, [r7, #24]
 801010c:	69bb      	ldr	r3, [r7, #24]
 801010e:	085b      	lsrs	r3, r3, #1
 8010110:	69ba      	ldr	r2, [r7, #24]
 8010112:	4413      	add	r3, r2
 8010114:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	6a1a      	ldr	r2, [r3, #32]
 801011a:	69bb      	ldr	r3, [r7, #24]
 801011c:	0a5b      	lsrs	r3, r3, #9
 801011e:	4413      	add	r3, r2
 8010120:	4619      	mov	r1, r3
 8010122:	68f8      	ldr	r0, [r7, #12]
 8010124:	f7ff fe74 	bl	800fe10 <move_window>
 8010128:	4603      	mov	r3, r0
 801012a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801012c:	7ffb      	ldrb	r3, [r7, #31]
 801012e:	2b00      	cmp	r3, #0
 8010130:	f040 80a9 	bne.w	8010286 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801013a:	69bb      	ldr	r3, [r7, #24]
 801013c:	1c59      	adds	r1, r3, #1
 801013e:	61b9      	str	r1, [r7, #24]
 8010140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010144:	4413      	add	r3, r2
 8010146:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010148:	68bb      	ldr	r3, [r7, #8]
 801014a:	f003 0301 	and.w	r3, r3, #1
 801014e:	2b00      	cmp	r3, #0
 8010150:	d00d      	beq.n	801016e <put_fat+0x9e>
 8010152:	697b      	ldr	r3, [r7, #20]
 8010154:	781b      	ldrb	r3, [r3, #0]
 8010156:	b25b      	sxtb	r3, r3
 8010158:	f003 030f 	and.w	r3, r3, #15
 801015c:	b25a      	sxtb	r2, r3
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	b2db      	uxtb	r3, r3
 8010162:	011b      	lsls	r3, r3, #4
 8010164:	b25b      	sxtb	r3, r3
 8010166:	4313      	orrs	r3, r2
 8010168:	b25b      	sxtb	r3, r3
 801016a:	b2db      	uxtb	r3, r3
 801016c:	e001      	b.n	8010172 <put_fat+0xa2>
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	b2db      	uxtb	r3, r3
 8010172:	697a      	ldr	r2, [r7, #20]
 8010174:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	2201      	movs	r2, #1
 801017a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	6a1a      	ldr	r2, [r3, #32]
 8010180:	69bb      	ldr	r3, [r7, #24]
 8010182:	0a5b      	lsrs	r3, r3, #9
 8010184:	4413      	add	r3, r2
 8010186:	4619      	mov	r1, r3
 8010188:	68f8      	ldr	r0, [r7, #12]
 801018a:	f7ff fe41 	bl	800fe10 <move_window>
 801018e:	4603      	mov	r3, r0
 8010190:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010192:	7ffb      	ldrb	r3, [r7, #31]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d178      	bne.n	801028a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801019e:	69bb      	ldr	r3, [r7, #24]
 80101a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101a4:	4413      	add	r3, r2
 80101a6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	f003 0301 	and.w	r3, r3, #1
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d003      	beq.n	80101ba <put_fat+0xea>
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	091b      	lsrs	r3, r3, #4
 80101b6:	b2db      	uxtb	r3, r3
 80101b8:	e00e      	b.n	80101d8 <put_fat+0x108>
 80101ba:	697b      	ldr	r3, [r7, #20]
 80101bc:	781b      	ldrb	r3, [r3, #0]
 80101be:	b25b      	sxtb	r3, r3
 80101c0:	f023 030f 	bic.w	r3, r3, #15
 80101c4:	b25a      	sxtb	r2, r3
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	0a1b      	lsrs	r3, r3, #8
 80101ca:	b25b      	sxtb	r3, r3
 80101cc:	f003 030f 	and.w	r3, r3, #15
 80101d0:	b25b      	sxtb	r3, r3
 80101d2:	4313      	orrs	r3, r2
 80101d4:	b25b      	sxtb	r3, r3
 80101d6:	b2db      	uxtb	r3, r3
 80101d8:	697a      	ldr	r2, [r7, #20]
 80101da:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	2201      	movs	r2, #1
 80101e0:	70da      	strb	r2, [r3, #3]
			break;
 80101e2:	e057      	b.n	8010294 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	6a1a      	ldr	r2, [r3, #32]
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	0a1b      	lsrs	r3, r3, #8
 80101ec:	4413      	add	r3, r2
 80101ee:	4619      	mov	r1, r3
 80101f0:	68f8      	ldr	r0, [r7, #12]
 80101f2:	f7ff fe0d 	bl	800fe10 <move_window>
 80101f6:	4603      	mov	r3, r0
 80101f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80101fa:	7ffb      	ldrb	r3, [r7, #31]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d146      	bne.n	801028e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010206:	68bb      	ldr	r3, [r7, #8]
 8010208:	005b      	lsls	r3, r3, #1
 801020a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801020e:	4413      	add	r3, r2
 8010210:	687a      	ldr	r2, [r7, #4]
 8010212:	b292      	uxth	r2, r2
 8010214:	4611      	mov	r1, r2
 8010216:	4618      	mov	r0, r3
 8010218:	f7ff fb85 	bl	800f926 <st_word>
			fs->wflag = 1;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	2201      	movs	r2, #1
 8010220:	70da      	strb	r2, [r3, #3]
			break;
 8010222:	e037      	b.n	8010294 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	6a1a      	ldr	r2, [r3, #32]
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	09db      	lsrs	r3, r3, #7
 801022c:	4413      	add	r3, r2
 801022e:	4619      	mov	r1, r3
 8010230:	68f8      	ldr	r0, [r7, #12]
 8010232:	f7ff fded 	bl	800fe10 <move_window>
 8010236:	4603      	mov	r3, r0
 8010238:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801023a:	7ffb      	ldrb	r3, [r7, #31]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d128      	bne.n	8010292 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801024c:	68bb      	ldr	r3, [r7, #8]
 801024e:	009b      	lsls	r3, r3, #2
 8010250:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010254:	4413      	add	r3, r2
 8010256:	4618      	mov	r0, r3
 8010258:	f7ff fb42 	bl	800f8e0 <ld_dword>
 801025c:	4603      	mov	r3, r0
 801025e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010262:	4323      	orrs	r3, r4
 8010264:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801026c:	68bb      	ldr	r3, [r7, #8]
 801026e:	009b      	lsls	r3, r3, #2
 8010270:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010274:	4413      	add	r3, r2
 8010276:	6879      	ldr	r1, [r7, #4]
 8010278:	4618      	mov	r0, r3
 801027a:	f7ff fb6f 	bl	800f95c <st_dword>
			fs->wflag = 1;
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	2201      	movs	r2, #1
 8010282:	70da      	strb	r2, [r3, #3]
			break;
 8010284:	e006      	b.n	8010294 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8010286:	bf00      	nop
 8010288:	e004      	b.n	8010294 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801028a:	bf00      	nop
 801028c:	e002      	b.n	8010294 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801028e:	bf00      	nop
 8010290:	e000      	b.n	8010294 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8010292:	bf00      	nop
		}
	}
	return res;
 8010294:	7ffb      	ldrb	r3, [r7, #31]
}
 8010296:	4618      	mov	r0, r3
 8010298:	3724      	adds	r7, #36	; 0x24
 801029a:	46bd      	mov	sp, r7
 801029c:	bd90      	pop	{r4, r7, pc}

0801029e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801029e:	b580      	push	{r7, lr}
 80102a0:	b088      	sub	sp, #32
 80102a2:	af00      	add	r7, sp, #0
 80102a4:	60f8      	str	r0, [r7, #12]
 80102a6:	60b9      	str	r1, [r7, #8]
 80102a8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80102aa:	2300      	movs	r3, #0
 80102ac:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	2b01      	cmp	r3, #1
 80102b8:	d904      	bls.n	80102c4 <remove_chain+0x26>
 80102ba:	69bb      	ldr	r3, [r7, #24]
 80102bc:	695b      	ldr	r3, [r3, #20]
 80102be:	68ba      	ldr	r2, [r7, #8]
 80102c0:	429a      	cmp	r2, r3
 80102c2:	d301      	bcc.n	80102c8 <remove_chain+0x2a>
 80102c4:	2302      	movs	r3, #2
 80102c6:	e04b      	b.n	8010360 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d00c      	beq.n	80102e8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80102ce:	f04f 32ff 	mov.w	r2, #4294967295
 80102d2:	6879      	ldr	r1, [r7, #4]
 80102d4:	69b8      	ldr	r0, [r7, #24]
 80102d6:	f7ff fefb 	bl	80100d0 <put_fat>
 80102da:	4603      	mov	r3, r0
 80102dc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80102de:	7ffb      	ldrb	r3, [r7, #31]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d001      	beq.n	80102e8 <remove_chain+0x4a>
 80102e4:	7ffb      	ldrb	r3, [r7, #31]
 80102e6:	e03b      	b.n	8010360 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80102e8:	68b9      	ldr	r1, [r7, #8]
 80102ea:	68f8      	ldr	r0, [r7, #12]
 80102ec:	f7ff fe4b 	bl	800ff86 <get_fat>
 80102f0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80102f2:	697b      	ldr	r3, [r7, #20]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d031      	beq.n	801035c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80102f8:	697b      	ldr	r3, [r7, #20]
 80102fa:	2b01      	cmp	r3, #1
 80102fc:	d101      	bne.n	8010302 <remove_chain+0x64>
 80102fe:	2302      	movs	r3, #2
 8010300:	e02e      	b.n	8010360 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010308:	d101      	bne.n	801030e <remove_chain+0x70>
 801030a:	2301      	movs	r3, #1
 801030c:	e028      	b.n	8010360 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801030e:	2200      	movs	r2, #0
 8010310:	68b9      	ldr	r1, [r7, #8]
 8010312:	69b8      	ldr	r0, [r7, #24]
 8010314:	f7ff fedc 	bl	80100d0 <put_fat>
 8010318:	4603      	mov	r3, r0
 801031a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801031c:	7ffb      	ldrb	r3, [r7, #31]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d001      	beq.n	8010326 <remove_chain+0x88>
 8010322:	7ffb      	ldrb	r3, [r7, #31]
 8010324:	e01c      	b.n	8010360 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010326:	69bb      	ldr	r3, [r7, #24]
 8010328:	691a      	ldr	r2, [r3, #16]
 801032a:	69bb      	ldr	r3, [r7, #24]
 801032c:	695b      	ldr	r3, [r3, #20]
 801032e:	3b02      	subs	r3, #2
 8010330:	429a      	cmp	r2, r3
 8010332:	d20b      	bcs.n	801034c <remove_chain+0xae>
			fs->free_clst++;
 8010334:	69bb      	ldr	r3, [r7, #24]
 8010336:	691b      	ldr	r3, [r3, #16]
 8010338:	1c5a      	adds	r2, r3, #1
 801033a:	69bb      	ldr	r3, [r7, #24]
 801033c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801033e:	69bb      	ldr	r3, [r7, #24]
 8010340:	791b      	ldrb	r3, [r3, #4]
 8010342:	f043 0301 	orr.w	r3, r3, #1
 8010346:	b2da      	uxtb	r2, r3
 8010348:	69bb      	ldr	r3, [r7, #24]
 801034a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801034c:	697b      	ldr	r3, [r7, #20]
 801034e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010350:	69bb      	ldr	r3, [r7, #24]
 8010352:	695b      	ldr	r3, [r3, #20]
 8010354:	68ba      	ldr	r2, [r7, #8]
 8010356:	429a      	cmp	r2, r3
 8010358:	d3c6      	bcc.n	80102e8 <remove_chain+0x4a>
 801035a:	e000      	b.n	801035e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801035c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801035e:	2300      	movs	r3, #0
}
 8010360:	4618      	mov	r0, r3
 8010362:	3720      	adds	r7, #32
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}

08010368 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b088      	sub	sp, #32
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
 8010370:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d10d      	bne.n	801039a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801037e:	693b      	ldr	r3, [r7, #16]
 8010380:	68db      	ldr	r3, [r3, #12]
 8010382:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010384:	69bb      	ldr	r3, [r7, #24]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d004      	beq.n	8010394 <create_chain+0x2c>
 801038a:	693b      	ldr	r3, [r7, #16]
 801038c:	695b      	ldr	r3, [r3, #20]
 801038e:	69ba      	ldr	r2, [r7, #24]
 8010390:	429a      	cmp	r2, r3
 8010392:	d31b      	bcc.n	80103cc <create_chain+0x64>
 8010394:	2301      	movs	r3, #1
 8010396:	61bb      	str	r3, [r7, #24]
 8010398:	e018      	b.n	80103cc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801039a:	6839      	ldr	r1, [r7, #0]
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f7ff fdf2 	bl	800ff86 <get_fat>
 80103a2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	2b01      	cmp	r3, #1
 80103a8:	d801      	bhi.n	80103ae <create_chain+0x46>
 80103aa:	2301      	movs	r3, #1
 80103ac:	e070      	b.n	8010490 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103b4:	d101      	bne.n	80103ba <create_chain+0x52>
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	e06a      	b.n	8010490 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80103ba:	693b      	ldr	r3, [r7, #16]
 80103bc:	695b      	ldr	r3, [r3, #20]
 80103be:	68fa      	ldr	r2, [r7, #12]
 80103c0:	429a      	cmp	r2, r3
 80103c2:	d201      	bcs.n	80103c8 <create_chain+0x60>
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	e063      	b.n	8010490 <create_chain+0x128>
		scl = clst;
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80103cc:	69bb      	ldr	r3, [r7, #24]
 80103ce:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80103d0:	69fb      	ldr	r3, [r7, #28]
 80103d2:	3301      	adds	r3, #1
 80103d4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80103d6:	693b      	ldr	r3, [r7, #16]
 80103d8:	695b      	ldr	r3, [r3, #20]
 80103da:	69fa      	ldr	r2, [r7, #28]
 80103dc:	429a      	cmp	r2, r3
 80103de:	d307      	bcc.n	80103f0 <create_chain+0x88>
				ncl = 2;
 80103e0:	2302      	movs	r3, #2
 80103e2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80103e4:	69fa      	ldr	r2, [r7, #28]
 80103e6:	69bb      	ldr	r3, [r7, #24]
 80103e8:	429a      	cmp	r2, r3
 80103ea:	d901      	bls.n	80103f0 <create_chain+0x88>
 80103ec:	2300      	movs	r3, #0
 80103ee:	e04f      	b.n	8010490 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80103f0:	69f9      	ldr	r1, [r7, #28]
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	f7ff fdc7 	bl	800ff86 <get_fat>
 80103f8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d00e      	beq.n	801041e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	2b01      	cmp	r3, #1
 8010404:	d003      	beq.n	801040e <create_chain+0xa6>
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	f1b3 3fff 	cmp.w	r3, #4294967295
 801040c:	d101      	bne.n	8010412 <create_chain+0xaa>
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	e03e      	b.n	8010490 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010412:	69fa      	ldr	r2, [r7, #28]
 8010414:	69bb      	ldr	r3, [r7, #24]
 8010416:	429a      	cmp	r2, r3
 8010418:	d1da      	bne.n	80103d0 <create_chain+0x68>
 801041a:	2300      	movs	r3, #0
 801041c:	e038      	b.n	8010490 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801041e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010420:	f04f 32ff 	mov.w	r2, #4294967295
 8010424:	69f9      	ldr	r1, [r7, #28]
 8010426:	6938      	ldr	r0, [r7, #16]
 8010428:	f7ff fe52 	bl	80100d0 <put_fat>
 801042c:	4603      	mov	r3, r0
 801042e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010430:	7dfb      	ldrb	r3, [r7, #23]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d109      	bne.n	801044a <create_chain+0xe2>
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d006      	beq.n	801044a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801043c:	69fa      	ldr	r2, [r7, #28]
 801043e:	6839      	ldr	r1, [r7, #0]
 8010440:	6938      	ldr	r0, [r7, #16]
 8010442:	f7ff fe45 	bl	80100d0 <put_fat>
 8010446:	4603      	mov	r3, r0
 8010448:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801044a:	7dfb      	ldrb	r3, [r7, #23]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d116      	bne.n	801047e <create_chain+0x116>
		fs->last_clst = ncl;
 8010450:	693b      	ldr	r3, [r7, #16]
 8010452:	69fa      	ldr	r2, [r7, #28]
 8010454:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010456:	693b      	ldr	r3, [r7, #16]
 8010458:	691a      	ldr	r2, [r3, #16]
 801045a:	693b      	ldr	r3, [r7, #16]
 801045c:	695b      	ldr	r3, [r3, #20]
 801045e:	3b02      	subs	r3, #2
 8010460:	429a      	cmp	r2, r3
 8010462:	d804      	bhi.n	801046e <create_chain+0x106>
 8010464:	693b      	ldr	r3, [r7, #16]
 8010466:	691b      	ldr	r3, [r3, #16]
 8010468:	1e5a      	subs	r2, r3, #1
 801046a:	693b      	ldr	r3, [r7, #16]
 801046c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801046e:	693b      	ldr	r3, [r7, #16]
 8010470:	791b      	ldrb	r3, [r3, #4]
 8010472:	f043 0301 	orr.w	r3, r3, #1
 8010476:	b2da      	uxtb	r2, r3
 8010478:	693b      	ldr	r3, [r7, #16]
 801047a:	711a      	strb	r2, [r3, #4]
 801047c:	e007      	b.n	801048e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801047e:	7dfb      	ldrb	r3, [r7, #23]
 8010480:	2b01      	cmp	r3, #1
 8010482:	d102      	bne.n	801048a <create_chain+0x122>
 8010484:	f04f 33ff 	mov.w	r3, #4294967295
 8010488:	e000      	b.n	801048c <create_chain+0x124>
 801048a:	2301      	movs	r3, #1
 801048c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801048e:	69fb      	ldr	r3, [r7, #28]
}
 8010490:	4618      	mov	r0, r3
 8010492:	3720      	adds	r7, #32
 8010494:	46bd      	mov	sp, r7
 8010496:	bd80      	pop	{r7, pc}

08010498 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010498:	b480      	push	{r7}
 801049a:	b087      	sub	sp, #28
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
 80104a0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104ac:	3304      	adds	r3, #4
 80104ae:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80104b0:	683b      	ldr	r3, [r7, #0]
 80104b2:	0a5b      	lsrs	r3, r3, #9
 80104b4:	68fa      	ldr	r2, [r7, #12]
 80104b6:	8952      	ldrh	r2, [r2, #10]
 80104b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80104bc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80104be:	693b      	ldr	r3, [r7, #16]
 80104c0:	1d1a      	adds	r2, r3, #4
 80104c2:	613a      	str	r2, [r7, #16]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d101      	bne.n	80104d2 <clmt_clust+0x3a>
 80104ce:	2300      	movs	r3, #0
 80104d0:	e010      	b.n	80104f4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80104d2:	697a      	ldr	r2, [r7, #20]
 80104d4:	68bb      	ldr	r3, [r7, #8]
 80104d6:	429a      	cmp	r2, r3
 80104d8:	d307      	bcc.n	80104ea <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80104da:	697a      	ldr	r2, [r7, #20]
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	1ad3      	subs	r3, r2, r3
 80104e0:	617b      	str	r3, [r7, #20]
 80104e2:	693b      	ldr	r3, [r7, #16]
 80104e4:	3304      	adds	r3, #4
 80104e6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80104e8:	e7e9      	b.n	80104be <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80104ea:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80104ec:	693b      	ldr	r3, [r7, #16]
 80104ee:	681a      	ldr	r2, [r3, #0]
 80104f0:	697b      	ldr	r3, [r7, #20]
 80104f2:	4413      	add	r3, r2
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	371c      	adds	r7, #28
 80104f8:	46bd      	mov	sp, r7
 80104fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fe:	4770      	bx	lr

08010500 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b086      	sub	sp, #24
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
 8010508:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010510:	683b      	ldr	r3, [r7, #0]
 8010512:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010516:	d204      	bcs.n	8010522 <dir_sdi+0x22>
 8010518:	683b      	ldr	r3, [r7, #0]
 801051a:	f003 031f 	and.w	r3, r3, #31
 801051e:	2b00      	cmp	r3, #0
 8010520:	d001      	beq.n	8010526 <dir_sdi+0x26>
		return FR_INT_ERR;
 8010522:	2302      	movs	r3, #2
 8010524:	e063      	b.n	80105ee <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	683a      	ldr	r2, [r7, #0]
 801052a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	689b      	ldr	r3, [r3, #8]
 8010530:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010532:	697b      	ldr	r3, [r7, #20]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d106      	bne.n	8010546 <dir_sdi+0x46>
 8010538:	693b      	ldr	r3, [r7, #16]
 801053a:	781b      	ldrb	r3, [r3, #0]
 801053c:	2b02      	cmp	r3, #2
 801053e:	d902      	bls.n	8010546 <dir_sdi+0x46>
		clst = fs->dirbase;
 8010540:	693b      	ldr	r3, [r7, #16]
 8010542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010544:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010546:	697b      	ldr	r3, [r7, #20]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d10c      	bne.n	8010566 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	095b      	lsrs	r3, r3, #5
 8010550:	693a      	ldr	r2, [r7, #16]
 8010552:	8912      	ldrh	r2, [r2, #8]
 8010554:	4293      	cmp	r3, r2
 8010556:	d301      	bcc.n	801055c <dir_sdi+0x5c>
 8010558:	2302      	movs	r3, #2
 801055a:	e048      	b.n	80105ee <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801055c:	693b      	ldr	r3, [r7, #16]
 801055e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	61da      	str	r2, [r3, #28]
 8010564:	e029      	b.n	80105ba <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010566:	693b      	ldr	r3, [r7, #16]
 8010568:	895b      	ldrh	r3, [r3, #10]
 801056a:	025b      	lsls	r3, r3, #9
 801056c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801056e:	e019      	b.n	80105a4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	6979      	ldr	r1, [r7, #20]
 8010574:	4618      	mov	r0, r3
 8010576:	f7ff fd06 	bl	800ff86 <get_fat>
 801057a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801057c:	697b      	ldr	r3, [r7, #20]
 801057e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010582:	d101      	bne.n	8010588 <dir_sdi+0x88>
 8010584:	2301      	movs	r3, #1
 8010586:	e032      	b.n	80105ee <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010588:	697b      	ldr	r3, [r7, #20]
 801058a:	2b01      	cmp	r3, #1
 801058c:	d904      	bls.n	8010598 <dir_sdi+0x98>
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	695b      	ldr	r3, [r3, #20]
 8010592:	697a      	ldr	r2, [r7, #20]
 8010594:	429a      	cmp	r2, r3
 8010596:	d301      	bcc.n	801059c <dir_sdi+0x9c>
 8010598:	2302      	movs	r3, #2
 801059a:	e028      	b.n	80105ee <dir_sdi+0xee>
			ofs -= csz;
 801059c:	683a      	ldr	r2, [r7, #0]
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	1ad3      	subs	r3, r2, r3
 80105a2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80105a4:	683a      	ldr	r2, [r7, #0]
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	429a      	cmp	r2, r3
 80105aa:	d2e1      	bcs.n	8010570 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80105ac:	6979      	ldr	r1, [r7, #20]
 80105ae:	6938      	ldr	r0, [r7, #16]
 80105b0:	f7ff fcca 	bl	800ff48 <clust2sect>
 80105b4:	4602      	mov	r2, r0
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	697a      	ldr	r2, [r7, #20]
 80105be:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	69db      	ldr	r3, [r3, #28]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d101      	bne.n	80105cc <dir_sdi+0xcc>
 80105c8:	2302      	movs	r3, #2
 80105ca:	e010      	b.n	80105ee <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	69da      	ldr	r2, [r3, #28]
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	0a5b      	lsrs	r3, r3, #9
 80105d4:	441a      	add	r2, r3
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80105da:	693b      	ldr	r3, [r7, #16]
 80105dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80105e6:	441a      	add	r2, r3
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80105ec:	2300      	movs	r3, #0
}
 80105ee:	4618      	mov	r0, r3
 80105f0:	3718      	adds	r7, #24
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bd80      	pop	{r7, pc}

080105f6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80105f6:	b580      	push	{r7, lr}
 80105f8:	b086      	sub	sp, #24
 80105fa:	af00      	add	r7, sp, #0
 80105fc:	6078      	str	r0, [r7, #4]
 80105fe:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	695b      	ldr	r3, [r3, #20]
 801060a:	3320      	adds	r3, #32
 801060c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	69db      	ldr	r3, [r3, #28]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d003      	beq.n	801061e <dir_next+0x28>
 8010616:	68bb      	ldr	r3, [r7, #8]
 8010618:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801061c:	d301      	bcc.n	8010622 <dir_next+0x2c>
 801061e:	2304      	movs	r3, #4
 8010620:	e0aa      	b.n	8010778 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010628:	2b00      	cmp	r3, #0
 801062a:	f040 8098 	bne.w	801075e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	69db      	ldr	r3, [r3, #28]
 8010632:	1c5a      	adds	r2, r3, #1
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	699b      	ldr	r3, [r3, #24]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d10b      	bne.n	8010658 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	095b      	lsrs	r3, r3, #5
 8010644:	68fa      	ldr	r2, [r7, #12]
 8010646:	8912      	ldrh	r2, [r2, #8]
 8010648:	4293      	cmp	r3, r2
 801064a:	f0c0 8088 	bcc.w	801075e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2200      	movs	r2, #0
 8010652:	61da      	str	r2, [r3, #28]
 8010654:	2304      	movs	r3, #4
 8010656:	e08f      	b.n	8010778 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010658:	68bb      	ldr	r3, [r7, #8]
 801065a:	0a5b      	lsrs	r3, r3, #9
 801065c:	68fa      	ldr	r2, [r7, #12]
 801065e:	8952      	ldrh	r2, [r2, #10]
 8010660:	3a01      	subs	r2, #1
 8010662:	4013      	ands	r3, r2
 8010664:	2b00      	cmp	r3, #0
 8010666:	d17a      	bne.n	801075e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010668:	687a      	ldr	r2, [r7, #4]
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	699b      	ldr	r3, [r3, #24]
 801066e:	4619      	mov	r1, r3
 8010670:	4610      	mov	r0, r2
 8010672:	f7ff fc88 	bl	800ff86 <get_fat>
 8010676:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010678:	697b      	ldr	r3, [r7, #20]
 801067a:	2b01      	cmp	r3, #1
 801067c:	d801      	bhi.n	8010682 <dir_next+0x8c>
 801067e:	2302      	movs	r3, #2
 8010680:	e07a      	b.n	8010778 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010682:	697b      	ldr	r3, [r7, #20]
 8010684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010688:	d101      	bne.n	801068e <dir_next+0x98>
 801068a:	2301      	movs	r3, #1
 801068c:	e074      	b.n	8010778 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	695b      	ldr	r3, [r3, #20]
 8010692:	697a      	ldr	r2, [r7, #20]
 8010694:	429a      	cmp	r2, r3
 8010696:	d358      	bcc.n	801074a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d104      	bne.n	80106a8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2200      	movs	r2, #0
 80106a2:	61da      	str	r2, [r3, #28]
 80106a4:	2304      	movs	r3, #4
 80106a6:	e067      	b.n	8010778 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80106a8:	687a      	ldr	r2, [r7, #4]
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	699b      	ldr	r3, [r3, #24]
 80106ae:	4619      	mov	r1, r3
 80106b0:	4610      	mov	r0, r2
 80106b2:	f7ff fe59 	bl	8010368 <create_chain>
 80106b6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80106b8:	697b      	ldr	r3, [r7, #20]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d101      	bne.n	80106c2 <dir_next+0xcc>
 80106be:	2307      	movs	r3, #7
 80106c0:	e05a      	b.n	8010778 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80106c2:	697b      	ldr	r3, [r7, #20]
 80106c4:	2b01      	cmp	r3, #1
 80106c6:	d101      	bne.n	80106cc <dir_next+0xd6>
 80106c8:	2302      	movs	r3, #2
 80106ca:	e055      	b.n	8010778 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80106cc:	697b      	ldr	r3, [r7, #20]
 80106ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106d2:	d101      	bne.n	80106d8 <dir_next+0xe2>
 80106d4:	2301      	movs	r3, #1
 80106d6:	e04f      	b.n	8010778 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80106d8:	68f8      	ldr	r0, [r7, #12]
 80106da:	f7ff fb55 	bl	800fd88 <sync_window>
 80106de:	4603      	mov	r3, r0
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d001      	beq.n	80106e8 <dir_next+0xf2>
 80106e4:	2301      	movs	r3, #1
 80106e6:	e047      	b.n	8010778 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	3330      	adds	r3, #48	; 0x30
 80106ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80106f0:	2100      	movs	r1, #0
 80106f2:	4618      	mov	r0, r3
 80106f4:	f7ff f97f 	bl	800f9f6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80106f8:	2300      	movs	r3, #0
 80106fa:	613b      	str	r3, [r7, #16]
 80106fc:	6979      	ldr	r1, [r7, #20]
 80106fe:	68f8      	ldr	r0, [r7, #12]
 8010700:	f7ff fc22 	bl	800ff48 <clust2sect>
 8010704:	4602      	mov	r2, r0
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	62da      	str	r2, [r3, #44]	; 0x2c
 801070a:	e012      	b.n	8010732 <dir_next+0x13c>
						fs->wflag = 1;
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	2201      	movs	r2, #1
 8010710:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010712:	68f8      	ldr	r0, [r7, #12]
 8010714:	f7ff fb38 	bl	800fd88 <sync_window>
 8010718:	4603      	mov	r3, r0
 801071a:	2b00      	cmp	r3, #0
 801071c:	d001      	beq.n	8010722 <dir_next+0x12c>
 801071e:	2301      	movs	r3, #1
 8010720:	e02a      	b.n	8010778 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010722:	693b      	ldr	r3, [r7, #16]
 8010724:	3301      	adds	r3, #1
 8010726:	613b      	str	r3, [r7, #16]
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801072c:	1c5a      	adds	r2, r3, #1
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	62da      	str	r2, [r3, #44]	; 0x2c
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	895b      	ldrh	r3, [r3, #10]
 8010736:	461a      	mov	r2, r3
 8010738:	693b      	ldr	r3, [r7, #16]
 801073a:	4293      	cmp	r3, r2
 801073c:	d3e6      	bcc.n	801070c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010742:	693b      	ldr	r3, [r7, #16]
 8010744:	1ad2      	subs	r2, r2, r3
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	697a      	ldr	r2, [r7, #20]
 801074e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010750:	6979      	ldr	r1, [r7, #20]
 8010752:	68f8      	ldr	r0, [r7, #12]
 8010754:	f7ff fbf8 	bl	800ff48 <clust2sect>
 8010758:	4602      	mov	r2, r0
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	68ba      	ldr	r2, [r7, #8]
 8010762:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010770:	441a      	add	r2, r3
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010776:	2300      	movs	r3, #0
}
 8010778:	4618      	mov	r0, r3
 801077a:	3718      	adds	r7, #24
 801077c:	46bd      	mov	sp, r7
 801077e:	bd80      	pop	{r7, pc}

08010780 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b086      	sub	sp, #24
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
 8010788:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010790:	2100      	movs	r1, #0
 8010792:	6878      	ldr	r0, [r7, #4]
 8010794:	f7ff feb4 	bl	8010500 <dir_sdi>
 8010798:	4603      	mov	r3, r0
 801079a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801079c:	7dfb      	ldrb	r3, [r7, #23]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d12b      	bne.n	80107fa <dir_alloc+0x7a>
		n = 0;
 80107a2:	2300      	movs	r3, #0
 80107a4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	69db      	ldr	r3, [r3, #28]
 80107aa:	4619      	mov	r1, r3
 80107ac:	68f8      	ldr	r0, [r7, #12]
 80107ae:	f7ff fb2f 	bl	800fe10 <move_window>
 80107b2:	4603      	mov	r3, r0
 80107b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80107b6:	7dfb      	ldrb	r3, [r7, #23]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d11d      	bne.n	80107f8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	6a1b      	ldr	r3, [r3, #32]
 80107c0:	781b      	ldrb	r3, [r3, #0]
 80107c2:	2be5      	cmp	r3, #229	; 0xe5
 80107c4:	d004      	beq.n	80107d0 <dir_alloc+0x50>
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	6a1b      	ldr	r3, [r3, #32]
 80107ca:	781b      	ldrb	r3, [r3, #0]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d107      	bne.n	80107e0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80107d0:	693b      	ldr	r3, [r7, #16]
 80107d2:	3301      	adds	r3, #1
 80107d4:	613b      	str	r3, [r7, #16]
 80107d6:	693a      	ldr	r2, [r7, #16]
 80107d8:	683b      	ldr	r3, [r7, #0]
 80107da:	429a      	cmp	r2, r3
 80107dc:	d102      	bne.n	80107e4 <dir_alloc+0x64>
 80107de:	e00c      	b.n	80107fa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80107e0:	2300      	movs	r3, #0
 80107e2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80107e4:	2101      	movs	r1, #1
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f7ff ff05 	bl	80105f6 <dir_next>
 80107ec:	4603      	mov	r3, r0
 80107ee:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80107f0:	7dfb      	ldrb	r3, [r7, #23]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d0d7      	beq.n	80107a6 <dir_alloc+0x26>
 80107f6:	e000      	b.n	80107fa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80107f8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80107fa:	7dfb      	ldrb	r3, [r7, #23]
 80107fc:	2b04      	cmp	r3, #4
 80107fe:	d101      	bne.n	8010804 <dir_alloc+0x84>
 8010800:	2307      	movs	r3, #7
 8010802:	75fb      	strb	r3, [r7, #23]
	return res;
 8010804:	7dfb      	ldrb	r3, [r7, #23]
}
 8010806:	4618      	mov	r0, r3
 8010808:	3718      	adds	r7, #24
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}

0801080e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801080e:	b580      	push	{r7, lr}
 8010810:	b084      	sub	sp, #16
 8010812:	af00      	add	r7, sp, #0
 8010814:	6078      	str	r0, [r7, #4]
 8010816:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010818:	683b      	ldr	r3, [r7, #0]
 801081a:	331a      	adds	r3, #26
 801081c:	4618      	mov	r0, r3
 801081e:	f7ff f847 	bl	800f8b0 <ld_word>
 8010822:	4603      	mov	r3, r0
 8010824:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	781b      	ldrb	r3, [r3, #0]
 801082a:	2b03      	cmp	r3, #3
 801082c:	d109      	bne.n	8010842 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	3314      	adds	r3, #20
 8010832:	4618      	mov	r0, r3
 8010834:	f7ff f83c 	bl	800f8b0 <ld_word>
 8010838:	4603      	mov	r3, r0
 801083a:	041b      	lsls	r3, r3, #16
 801083c:	68fa      	ldr	r2, [r7, #12]
 801083e:	4313      	orrs	r3, r2
 8010840:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010842:	68fb      	ldr	r3, [r7, #12]
}
 8010844:	4618      	mov	r0, r3
 8010846:	3710      	adds	r7, #16
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}

0801084c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b084      	sub	sp, #16
 8010850:	af00      	add	r7, sp, #0
 8010852:	60f8      	str	r0, [r7, #12]
 8010854:	60b9      	str	r1, [r7, #8]
 8010856:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010858:	68bb      	ldr	r3, [r7, #8]
 801085a:	331a      	adds	r3, #26
 801085c:	687a      	ldr	r2, [r7, #4]
 801085e:	b292      	uxth	r2, r2
 8010860:	4611      	mov	r1, r2
 8010862:	4618      	mov	r0, r3
 8010864:	f7ff f85f 	bl	800f926 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	781b      	ldrb	r3, [r3, #0]
 801086c:	2b03      	cmp	r3, #3
 801086e:	d109      	bne.n	8010884 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	f103 0214 	add.w	r2, r3, #20
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	0c1b      	lsrs	r3, r3, #16
 801087a:	b29b      	uxth	r3, r3
 801087c:	4619      	mov	r1, r3
 801087e:	4610      	mov	r0, r2
 8010880:	f7ff f851 	bl	800f926 <st_word>
	}
}
 8010884:	bf00      	nop
 8010886:	3710      	adds	r7, #16
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}

0801088c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b086      	sub	sp, #24
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
 8010894:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8010896:	2304      	movs	r3, #4
 8010898:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80108a0:	e03c      	b.n	801091c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	69db      	ldr	r3, [r3, #28]
 80108a6:	4619      	mov	r1, r3
 80108a8:	6938      	ldr	r0, [r7, #16]
 80108aa:	f7ff fab1 	bl	800fe10 <move_window>
 80108ae:	4603      	mov	r3, r0
 80108b0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80108b2:	7dfb      	ldrb	r3, [r7, #23]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d136      	bne.n	8010926 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	6a1b      	ldr	r3, [r3, #32]
 80108bc:	781b      	ldrb	r3, [r3, #0]
 80108be:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80108c0:	7bfb      	ldrb	r3, [r7, #15]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d102      	bne.n	80108cc <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80108c6:	2304      	movs	r3, #4
 80108c8:	75fb      	strb	r3, [r7, #23]
 80108ca:	e031      	b.n	8010930 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	6a1b      	ldr	r3, [r3, #32]
 80108d0:	330b      	adds	r3, #11
 80108d2:	781b      	ldrb	r3, [r3, #0]
 80108d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80108d8:	73bb      	strb	r3, [r7, #14]
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	7bba      	ldrb	r2, [r7, #14]
 80108de:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80108e0:	7bfb      	ldrb	r3, [r7, #15]
 80108e2:	2be5      	cmp	r3, #229	; 0xe5
 80108e4:	d011      	beq.n	801090a <dir_read+0x7e>
 80108e6:	7bfb      	ldrb	r3, [r7, #15]
 80108e8:	2b2e      	cmp	r3, #46	; 0x2e
 80108ea:	d00e      	beq.n	801090a <dir_read+0x7e>
 80108ec:	7bbb      	ldrb	r3, [r7, #14]
 80108ee:	2b0f      	cmp	r3, #15
 80108f0:	d00b      	beq.n	801090a <dir_read+0x7e>
 80108f2:	7bbb      	ldrb	r3, [r7, #14]
 80108f4:	f023 0320 	bic.w	r3, r3, #32
 80108f8:	2b08      	cmp	r3, #8
 80108fa:	bf0c      	ite	eq
 80108fc:	2301      	moveq	r3, #1
 80108fe:	2300      	movne	r3, #0
 8010900:	b2db      	uxtb	r3, r3
 8010902:	461a      	mov	r2, r3
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	4293      	cmp	r3, r2
 8010908:	d00f      	beq.n	801092a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801090a:	2100      	movs	r1, #0
 801090c:	6878      	ldr	r0, [r7, #4]
 801090e:	f7ff fe72 	bl	80105f6 <dir_next>
 8010912:	4603      	mov	r3, r0
 8010914:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010916:	7dfb      	ldrb	r3, [r7, #23]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d108      	bne.n	801092e <dir_read+0xa2>
	while (dp->sect) {
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	69db      	ldr	r3, [r3, #28]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d1be      	bne.n	80108a2 <dir_read+0x16>
 8010924:	e004      	b.n	8010930 <dir_read+0xa4>
		if (res != FR_OK) break;
 8010926:	bf00      	nop
 8010928:	e002      	b.n	8010930 <dir_read+0xa4>
				break;
 801092a:	bf00      	nop
 801092c:	e000      	b.n	8010930 <dir_read+0xa4>
		if (res != FR_OK) break;
 801092e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8010930:	7dfb      	ldrb	r3, [r7, #23]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d002      	beq.n	801093c <dir_read+0xb0>
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	2200      	movs	r2, #0
 801093a:	61da      	str	r2, [r3, #28]
	return res;
 801093c:	7dfb      	ldrb	r3, [r7, #23]
}
 801093e:	4618      	mov	r0, r3
 8010940:	3718      	adds	r7, #24
 8010942:	46bd      	mov	sp, r7
 8010944:	bd80      	pop	{r7, pc}

08010946 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010946:	b580      	push	{r7, lr}
 8010948:	b086      	sub	sp, #24
 801094a:	af00      	add	r7, sp, #0
 801094c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010954:	2100      	movs	r1, #0
 8010956:	6878      	ldr	r0, [r7, #4]
 8010958:	f7ff fdd2 	bl	8010500 <dir_sdi>
 801095c:	4603      	mov	r3, r0
 801095e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010960:	7dfb      	ldrb	r3, [r7, #23]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d001      	beq.n	801096a <dir_find+0x24>
 8010966:	7dfb      	ldrb	r3, [r7, #23]
 8010968:	e03e      	b.n	80109e8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	69db      	ldr	r3, [r3, #28]
 801096e:	4619      	mov	r1, r3
 8010970:	6938      	ldr	r0, [r7, #16]
 8010972:	f7ff fa4d 	bl	800fe10 <move_window>
 8010976:	4603      	mov	r3, r0
 8010978:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801097a:	7dfb      	ldrb	r3, [r7, #23]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d12f      	bne.n	80109e0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	6a1b      	ldr	r3, [r3, #32]
 8010984:	781b      	ldrb	r3, [r3, #0]
 8010986:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010988:	7bfb      	ldrb	r3, [r7, #15]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d102      	bne.n	8010994 <dir_find+0x4e>
 801098e:	2304      	movs	r3, #4
 8010990:	75fb      	strb	r3, [r7, #23]
 8010992:	e028      	b.n	80109e6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	6a1b      	ldr	r3, [r3, #32]
 8010998:	330b      	adds	r3, #11
 801099a:	781b      	ldrb	r3, [r3, #0]
 801099c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80109a0:	b2da      	uxtb	r2, r3
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	6a1b      	ldr	r3, [r3, #32]
 80109aa:	330b      	adds	r3, #11
 80109ac:	781b      	ldrb	r3, [r3, #0]
 80109ae:	f003 0308 	and.w	r3, r3, #8
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d10a      	bne.n	80109cc <dir_find+0x86>
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	6a18      	ldr	r0, [r3, #32]
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	3324      	adds	r3, #36	; 0x24
 80109be:	220b      	movs	r2, #11
 80109c0:	4619      	mov	r1, r3
 80109c2:	f7ff f832 	bl	800fa2a <mem_cmp>
 80109c6:	4603      	mov	r3, r0
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d00b      	beq.n	80109e4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80109cc:	2100      	movs	r1, #0
 80109ce:	6878      	ldr	r0, [r7, #4]
 80109d0:	f7ff fe11 	bl	80105f6 <dir_next>
 80109d4:	4603      	mov	r3, r0
 80109d6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80109d8:	7dfb      	ldrb	r3, [r7, #23]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d0c5      	beq.n	801096a <dir_find+0x24>
 80109de:	e002      	b.n	80109e6 <dir_find+0xa0>
		if (res != FR_OK) break;
 80109e0:	bf00      	nop
 80109e2:	e000      	b.n	80109e6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80109e4:	bf00      	nop

	return res;
 80109e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80109e8:	4618      	mov	r0, r3
 80109ea:	3718      	adds	r7, #24
 80109ec:	46bd      	mov	sp, r7
 80109ee:	bd80      	pop	{r7, pc}

080109f0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b084      	sub	sp, #16
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80109fe:	2101      	movs	r1, #1
 8010a00:	6878      	ldr	r0, [r7, #4]
 8010a02:	f7ff febd 	bl	8010780 <dir_alloc>
 8010a06:	4603      	mov	r3, r0
 8010a08:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010a0a:	7bfb      	ldrb	r3, [r7, #15]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d11c      	bne.n	8010a4a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	69db      	ldr	r3, [r3, #28]
 8010a14:	4619      	mov	r1, r3
 8010a16:	68b8      	ldr	r0, [r7, #8]
 8010a18:	f7ff f9fa 	bl	800fe10 <move_window>
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010a20:	7bfb      	ldrb	r3, [r7, #15]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d111      	bne.n	8010a4a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	6a1b      	ldr	r3, [r3, #32]
 8010a2a:	2220      	movs	r2, #32
 8010a2c:	2100      	movs	r1, #0
 8010a2e:	4618      	mov	r0, r3
 8010a30:	f7fe ffe1 	bl	800f9f6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	6a18      	ldr	r0, [r3, #32]
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	3324      	adds	r3, #36	; 0x24
 8010a3c:	220b      	movs	r2, #11
 8010a3e:	4619      	mov	r1, r3
 8010a40:	f7fe ffb8 	bl	800f9b4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	2201      	movs	r2, #1
 8010a48:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	3710      	adds	r7, #16
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}

08010a54 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b086      	sub	sp, #24
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
 8010a5c:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	2200      	movs	r2, #0
 8010a62:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	69db      	ldr	r3, [r3, #28]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d04e      	beq.n	8010b0a <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	613b      	str	r3, [r7, #16]
 8010a70:	693b      	ldr	r3, [r7, #16]
 8010a72:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8010a74:	e021      	b.n	8010aba <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	6a1a      	ldr	r2, [r3, #32]
 8010a7a:	697b      	ldr	r3, [r7, #20]
 8010a7c:	1c59      	adds	r1, r3, #1
 8010a7e:	6179      	str	r1, [r7, #20]
 8010a80:	4413      	add	r3, r2
 8010a82:	781b      	ldrb	r3, [r3, #0]
 8010a84:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8010a86:	7bfb      	ldrb	r3, [r7, #15]
 8010a88:	2b20      	cmp	r3, #32
 8010a8a:	d100      	bne.n	8010a8e <get_fileinfo+0x3a>
 8010a8c:	e015      	b.n	8010aba <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8010a8e:	7bfb      	ldrb	r3, [r7, #15]
 8010a90:	2b05      	cmp	r3, #5
 8010a92:	d101      	bne.n	8010a98 <get_fileinfo+0x44>
 8010a94:	23e5      	movs	r3, #229	; 0xe5
 8010a96:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8010a98:	697b      	ldr	r3, [r7, #20]
 8010a9a:	2b09      	cmp	r3, #9
 8010a9c:	d106      	bne.n	8010aac <get_fileinfo+0x58>
 8010a9e:	693b      	ldr	r3, [r7, #16]
 8010aa0:	1c5a      	adds	r2, r3, #1
 8010aa2:	613a      	str	r2, [r7, #16]
 8010aa4:	683a      	ldr	r2, [r7, #0]
 8010aa6:	4413      	add	r3, r2
 8010aa8:	222e      	movs	r2, #46	; 0x2e
 8010aaa:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8010aac:	693b      	ldr	r3, [r7, #16]
 8010aae:	1c5a      	adds	r2, r3, #1
 8010ab0:	613a      	str	r2, [r7, #16]
 8010ab2:	683a      	ldr	r2, [r7, #0]
 8010ab4:	4413      	add	r3, r2
 8010ab6:	7bfa      	ldrb	r2, [r7, #15]
 8010ab8:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8010aba:	697b      	ldr	r3, [r7, #20]
 8010abc:	2b0a      	cmp	r3, #10
 8010abe:	d9da      	bls.n	8010a76 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8010ac0:	683a      	ldr	r2, [r7, #0]
 8010ac2:	693b      	ldr	r3, [r7, #16]
 8010ac4:	4413      	add	r3, r2
 8010ac6:	3309      	adds	r3, #9
 8010ac8:	2200      	movs	r2, #0
 8010aca:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	6a1b      	ldr	r3, [r3, #32]
 8010ad0:	7ada      	ldrb	r2, [r3, #11]
 8010ad2:	683b      	ldr	r3, [r7, #0]
 8010ad4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	6a1b      	ldr	r3, [r3, #32]
 8010ada:	331c      	adds	r3, #28
 8010adc:	4618      	mov	r0, r3
 8010ade:	f7fe feff 	bl	800f8e0 <ld_dword>
 8010ae2:	4602      	mov	r2, r0
 8010ae4:	683b      	ldr	r3, [r7, #0]
 8010ae6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	6a1b      	ldr	r3, [r3, #32]
 8010aec:	3316      	adds	r3, #22
 8010aee:	4618      	mov	r0, r3
 8010af0:	f7fe fef6 	bl	800f8e0 <ld_dword>
 8010af4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8010af6:	68bb      	ldr	r3, [r7, #8]
 8010af8:	b29a      	uxth	r2, r3
 8010afa:	683b      	ldr	r3, [r7, #0]
 8010afc:	80da      	strh	r2, [r3, #6]
 8010afe:	68bb      	ldr	r3, [r7, #8]
 8010b00:	0c1b      	lsrs	r3, r3, #16
 8010b02:	b29a      	uxth	r2, r3
 8010b04:	683b      	ldr	r3, [r7, #0]
 8010b06:	809a      	strh	r2, [r3, #4]
 8010b08:	e000      	b.n	8010b0c <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010b0a:	bf00      	nop
}
 8010b0c:	3718      	adds	r7, #24
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	bd80      	pop	{r7, pc}
	...

08010b14 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b088      	sub	sp, #32
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
 8010b1c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	60fb      	str	r3, [r7, #12]
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	3324      	adds	r3, #36	; 0x24
 8010b28:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010b2a:	220b      	movs	r2, #11
 8010b2c:	2120      	movs	r1, #32
 8010b2e:	68b8      	ldr	r0, [r7, #8]
 8010b30:	f7fe ff61 	bl	800f9f6 <mem_set>
	si = i = 0; ni = 8;
 8010b34:	2300      	movs	r3, #0
 8010b36:	613b      	str	r3, [r7, #16]
 8010b38:	693b      	ldr	r3, [r7, #16]
 8010b3a:	617b      	str	r3, [r7, #20]
 8010b3c:	2308      	movs	r3, #8
 8010b3e:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010b40:	697b      	ldr	r3, [r7, #20]
 8010b42:	1c5a      	adds	r2, r3, #1
 8010b44:	617a      	str	r2, [r7, #20]
 8010b46:	68fa      	ldr	r2, [r7, #12]
 8010b48:	4413      	add	r3, r2
 8010b4a:	781b      	ldrb	r3, [r3, #0]
 8010b4c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010b4e:	7ffb      	ldrb	r3, [r7, #31]
 8010b50:	2b20      	cmp	r3, #32
 8010b52:	d94e      	bls.n	8010bf2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010b54:	7ffb      	ldrb	r3, [r7, #31]
 8010b56:	2b2f      	cmp	r3, #47	; 0x2f
 8010b58:	d006      	beq.n	8010b68 <create_name+0x54>
 8010b5a:	7ffb      	ldrb	r3, [r7, #31]
 8010b5c:	2b5c      	cmp	r3, #92	; 0x5c
 8010b5e:	d110      	bne.n	8010b82 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010b60:	e002      	b.n	8010b68 <create_name+0x54>
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	3301      	adds	r3, #1
 8010b66:	617b      	str	r3, [r7, #20]
 8010b68:	68fa      	ldr	r2, [r7, #12]
 8010b6a:	697b      	ldr	r3, [r7, #20]
 8010b6c:	4413      	add	r3, r2
 8010b6e:	781b      	ldrb	r3, [r3, #0]
 8010b70:	2b2f      	cmp	r3, #47	; 0x2f
 8010b72:	d0f6      	beq.n	8010b62 <create_name+0x4e>
 8010b74:	68fa      	ldr	r2, [r7, #12]
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	4413      	add	r3, r2
 8010b7a:	781b      	ldrb	r3, [r3, #0]
 8010b7c:	2b5c      	cmp	r3, #92	; 0x5c
 8010b7e:	d0f0      	beq.n	8010b62 <create_name+0x4e>
			break;
 8010b80:	e038      	b.n	8010bf4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010b82:	7ffb      	ldrb	r3, [r7, #31]
 8010b84:	2b2e      	cmp	r3, #46	; 0x2e
 8010b86:	d003      	beq.n	8010b90 <create_name+0x7c>
 8010b88:	693a      	ldr	r2, [r7, #16]
 8010b8a:	69bb      	ldr	r3, [r7, #24]
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d30c      	bcc.n	8010baa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010b90:	69bb      	ldr	r3, [r7, #24]
 8010b92:	2b0b      	cmp	r3, #11
 8010b94:	d002      	beq.n	8010b9c <create_name+0x88>
 8010b96:	7ffb      	ldrb	r3, [r7, #31]
 8010b98:	2b2e      	cmp	r3, #46	; 0x2e
 8010b9a:	d001      	beq.n	8010ba0 <create_name+0x8c>
 8010b9c:	2306      	movs	r3, #6
 8010b9e:	e044      	b.n	8010c2a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8010ba0:	2308      	movs	r3, #8
 8010ba2:	613b      	str	r3, [r7, #16]
 8010ba4:	230b      	movs	r3, #11
 8010ba6:	61bb      	str	r3, [r7, #24]
			continue;
 8010ba8:	e022      	b.n	8010bf0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010baa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	da04      	bge.n	8010bbc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010bb2:	7ffb      	ldrb	r3, [r7, #31]
 8010bb4:	3b80      	subs	r3, #128	; 0x80
 8010bb6:	4a1f      	ldr	r2, [pc, #124]	; (8010c34 <create_name+0x120>)
 8010bb8:	5cd3      	ldrb	r3, [r2, r3]
 8010bba:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010bbc:	7ffb      	ldrb	r3, [r7, #31]
 8010bbe:	4619      	mov	r1, r3
 8010bc0:	481d      	ldr	r0, [pc, #116]	; (8010c38 <create_name+0x124>)
 8010bc2:	f7fe ff59 	bl	800fa78 <chk_chr>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d001      	beq.n	8010bd0 <create_name+0xbc>
 8010bcc:	2306      	movs	r3, #6
 8010bce:	e02c      	b.n	8010c2a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010bd0:	7ffb      	ldrb	r3, [r7, #31]
 8010bd2:	2b60      	cmp	r3, #96	; 0x60
 8010bd4:	d905      	bls.n	8010be2 <create_name+0xce>
 8010bd6:	7ffb      	ldrb	r3, [r7, #31]
 8010bd8:	2b7a      	cmp	r3, #122	; 0x7a
 8010bda:	d802      	bhi.n	8010be2 <create_name+0xce>
 8010bdc:	7ffb      	ldrb	r3, [r7, #31]
 8010bde:	3b20      	subs	r3, #32
 8010be0:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8010be2:	693b      	ldr	r3, [r7, #16]
 8010be4:	1c5a      	adds	r2, r3, #1
 8010be6:	613a      	str	r2, [r7, #16]
 8010be8:	68ba      	ldr	r2, [r7, #8]
 8010bea:	4413      	add	r3, r2
 8010bec:	7ffa      	ldrb	r2, [r7, #31]
 8010bee:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010bf0:	e7a6      	b.n	8010b40 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010bf2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010bf4:	68fa      	ldr	r2, [r7, #12]
 8010bf6:	697b      	ldr	r3, [r7, #20]
 8010bf8:	441a      	add	r2, r3
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8010bfe:	693b      	ldr	r3, [r7, #16]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d101      	bne.n	8010c08 <create_name+0xf4>
 8010c04:	2306      	movs	r3, #6
 8010c06:	e010      	b.n	8010c2a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010c08:	68bb      	ldr	r3, [r7, #8]
 8010c0a:	781b      	ldrb	r3, [r3, #0]
 8010c0c:	2be5      	cmp	r3, #229	; 0xe5
 8010c0e:	d102      	bne.n	8010c16 <create_name+0x102>
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	2205      	movs	r2, #5
 8010c14:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010c16:	7ffb      	ldrb	r3, [r7, #31]
 8010c18:	2b20      	cmp	r3, #32
 8010c1a:	d801      	bhi.n	8010c20 <create_name+0x10c>
 8010c1c:	2204      	movs	r2, #4
 8010c1e:	e000      	b.n	8010c22 <create_name+0x10e>
 8010c20:	2200      	movs	r2, #0
 8010c22:	68bb      	ldr	r3, [r7, #8]
 8010c24:	330b      	adds	r3, #11
 8010c26:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010c28:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	3720      	adds	r7, #32
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd80      	pop	{r7, pc}
 8010c32:	bf00      	nop
 8010c34:	08018ee0 	.word	0x08018ee0
 8010c38:	08015fa8 	.word	0x08015fa8

08010c3c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b086      	sub	sp, #24
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
 8010c44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010c4a:	693b      	ldr	r3, [r7, #16]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010c50:	e002      	b.n	8010c58 <follow_path+0x1c>
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	3301      	adds	r3, #1
 8010c56:	603b      	str	r3, [r7, #0]
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	781b      	ldrb	r3, [r3, #0]
 8010c5c:	2b2f      	cmp	r3, #47	; 0x2f
 8010c5e:	d0f8      	beq.n	8010c52 <follow_path+0x16>
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	781b      	ldrb	r3, [r3, #0]
 8010c64:	2b5c      	cmp	r3, #92	; 0x5c
 8010c66:	d0f4      	beq.n	8010c52 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010c68:	693b      	ldr	r3, [r7, #16]
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010c6e:	683b      	ldr	r3, [r7, #0]
 8010c70:	781b      	ldrb	r3, [r3, #0]
 8010c72:	2b1f      	cmp	r3, #31
 8010c74:	d80a      	bhi.n	8010c8c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	2280      	movs	r2, #128	; 0x80
 8010c7a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8010c7e:	2100      	movs	r1, #0
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f7ff fc3d 	bl	8010500 <dir_sdi>
 8010c86:	4603      	mov	r3, r0
 8010c88:	75fb      	strb	r3, [r7, #23]
 8010c8a:	e043      	b.n	8010d14 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010c8c:	463b      	mov	r3, r7
 8010c8e:	4619      	mov	r1, r3
 8010c90:	6878      	ldr	r0, [r7, #4]
 8010c92:	f7ff ff3f 	bl	8010b14 <create_name>
 8010c96:	4603      	mov	r3, r0
 8010c98:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010c9a:	7dfb      	ldrb	r3, [r7, #23]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d134      	bne.n	8010d0a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010ca0:	6878      	ldr	r0, [r7, #4]
 8010ca2:	f7ff fe50 	bl	8010946 <dir_find>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010cb0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010cb2:	7dfb      	ldrb	r3, [r7, #23]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d00a      	beq.n	8010cce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010cb8:	7dfb      	ldrb	r3, [r7, #23]
 8010cba:	2b04      	cmp	r3, #4
 8010cbc:	d127      	bne.n	8010d0e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010cbe:	7afb      	ldrb	r3, [r7, #11]
 8010cc0:	f003 0304 	and.w	r3, r3, #4
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d122      	bne.n	8010d0e <follow_path+0xd2>
 8010cc8:	2305      	movs	r3, #5
 8010cca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010ccc:	e01f      	b.n	8010d0e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010cce:	7afb      	ldrb	r3, [r7, #11]
 8010cd0:	f003 0304 	and.w	r3, r3, #4
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d11c      	bne.n	8010d12 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010cd8:	693b      	ldr	r3, [r7, #16]
 8010cda:	799b      	ldrb	r3, [r3, #6]
 8010cdc:	f003 0310 	and.w	r3, r3, #16
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d102      	bne.n	8010cea <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010ce4:	2305      	movs	r3, #5
 8010ce6:	75fb      	strb	r3, [r7, #23]
 8010ce8:	e014      	b.n	8010d14 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	695b      	ldr	r3, [r3, #20]
 8010cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010cf8:	4413      	add	r3, r2
 8010cfa:	4619      	mov	r1, r3
 8010cfc:	68f8      	ldr	r0, [r7, #12]
 8010cfe:	f7ff fd86 	bl	801080e <ld_clust>
 8010d02:	4602      	mov	r2, r0
 8010d04:	693b      	ldr	r3, [r7, #16]
 8010d06:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010d08:	e7c0      	b.n	8010c8c <follow_path+0x50>
			if (res != FR_OK) break;
 8010d0a:	bf00      	nop
 8010d0c:	e002      	b.n	8010d14 <follow_path+0xd8>
				break;
 8010d0e:	bf00      	nop
 8010d10:	e000      	b.n	8010d14 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010d12:	bf00      	nop
			}
		}
	}

	return res;
 8010d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d16:	4618      	mov	r0, r3
 8010d18:	3718      	adds	r7, #24
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd80      	pop	{r7, pc}

08010d1e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010d1e:	b480      	push	{r7}
 8010d20:	b087      	sub	sp, #28
 8010d22:	af00      	add	r7, sp, #0
 8010d24:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010d26:	f04f 33ff 	mov.w	r3, #4294967295
 8010d2a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d031      	beq.n	8010d98 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	617b      	str	r3, [r7, #20]
 8010d3a:	e002      	b.n	8010d42 <get_ldnumber+0x24>
 8010d3c:	697b      	ldr	r3, [r7, #20]
 8010d3e:	3301      	adds	r3, #1
 8010d40:	617b      	str	r3, [r7, #20]
 8010d42:	697b      	ldr	r3, [r7, #20]
 8010d44:	781b      	ldrb	r3, [r3, #0]
 8010d46:	2b20      	cmp	r3, #32
 8010d48:	d903      	bls.n	8010d52 <get_ldnumber+0x34>
 8010d4a:	697b      	ldr	r3, [r7, #20]
 8010d4c:	781b      	ldrb	r3, [r3, #0]
 8010d4e:	2b3a      	cmp	r3, #58	; 0x3a
 8010d50:	d1f4      	bne.n	8010d3c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010d52:	697b      	ldr	r3, [r7, #20]
 8010d54:	781b      	ldrb	r3, [r3, #0]
 8010d56:	2b3a      	cmp	r3, #58	; 0x3a
 8010d58:	d11c      	bne.n	8010d94 <get_ldnumber+0x76>
			tp = *path;
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	1c5a      	adds	r2, r3, #1
 8010d64:	60fa      	str	r2, [r7, #12]
 8010d66:	781b      	ldrb	r3, [r3, #0]
 8010d68:	3b30      	subs	r3, #48	; 0x30
 8010d6a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010d6c:	68bb      	ldr	r3, [r7, #8]
 8010d6e:	2b09      	cmp	r3, #9
 8010d70:	d80e      	bhi.n	8010d90 <get_ldnumber+0x72>
 8010d72:	68fa      	ldr	r2, [r7, #12]
 8010d74:	697b      	ldr	r3, [r7, #20]
 8010d76:	429a      	cmp	r2, r3
 8010d78:	d10a      	bne.n	8010d90 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010d7a:	68bb      	ldr	r3, [r7, #8]
 8010d7c:	2b01      	cmp	r3, #1
 8010d7e:	d807      	bhi.n	8010d90 <get_ldnumber+0x72>
					vol = (int)i;
 8010d80:	68bb      	ldr	r3, [r7, #8]
 8010d82:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	3301      	adds	r3, #1
 8010d88:	617b      	str	r3, [r7, #20]
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	697a      	ldr	r2, [r7, #20]
 8010d8e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010d90:	693b      	ldr	r3, [r7, #16]
 8010d92:	e002      	b.n	8010d9a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010d94:	2300      	movs	r3, #0
 8010d96:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010d98:	693b      	ldr	r3, [r7, #16]
}
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	371c      	adds	r7, #28
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da4:	4770      	bx	lr
	...

08010da8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b082      	sub	sp, #8
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
 8010db0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	2200      	movs	r2, #0
 8010db6:	70da      	strb	r2, [r3, #3]
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	f04f 32ff 	mov.w	r2, #4294967295
 8010dbe:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010dc0:	6839      	ldr	r1, [r7, #0]
 8010dc2:	6878      	ldr	r0, [r7, #4]
 8010dc4:	f7ff f824 	bl	800fe10 <move_window>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d001      	beq.n	8010dd2 <check_fs+0x2a>
 8010dce:	2304      	movs	r3, #4
 8010dd0:	e038      	b.n	8010e44 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	3330      	adds	r3, #48	; 0x30
 8010dd6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f7fe fd68 	bl	800f8b0 <ld_word>
 8010de0:	4603      	mov	r3, r0
 8010de2:	461a      	mov	r2, r3
 8010de4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010de8:	429a      	cmp	r2, r3
 8010dea:	d001      	beq.n	8010df0 <check_fs+0x48>
 8010dec:	2303      	movs	r3, #3
 8010dee:	e029      	b.n	8010e44 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010df6:	2be9      	cmp	r3, #233	; 0xe9
 8010df8:	d009      	beq.n	8010e0e <check_fs+0x66>
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e00:	2beb      	cmp	r3, #235	; 0xeb
 8010e02:	d11e      	bne.n	8010e42 <check_fs+0x9a>
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010e0a:	2b90      	cmp	r3, #144	; 0x90
 8010e0c:	d119      	bne.n	8010e42 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	3330      	adds	r3, #48	; 0x30
 8010e12:	3336      	adds	r3, #54	; 0x36
 8010e14:	4618      	mov	r0, r3
 8010e16:	f7fe fd63 	bl	800f8e0 <ld_dword>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010e20:	4a0a      	ldr	r2, [pc, #40]	; (8010e4c <check_fs+0xa4>)
 8010e22:	4293      	cmp	r3, r2
 8010e24:	d101      	bne.n	8010e2a <check_fs+0x82>
 8010e26:	2300      	movs	r3, #0
 8010e28:	e00c      	b.n	8010e44 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	3330      	adds	r3, #48	; 0x30
 8010e2e:	3352      	adds	r3, #82	; 0x52
 8010e30:	4618      	mov	r0, r3
 8010e32:	f7fe fd55 	bl	800f8e0 <ld_dword>
 8010e36:	4602      	mov	r2, r0
 8010e38:	4b05      	ldr	r3, [pc, #20]	; (8010e50 <check_fs+0xa8>)
 8010e3a:	429a      	cmp	r2, r3
 8010e3c:	d101      	bne.n	8010e42 <check_fs+0x9a>
 8010e3e:	2300      	movs	r3, #0
 8010e40:	e000      	b.n	8010e44 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010e42:	2302      	movs	r3, #2
}
 8010e44:	4618      	mov	r0, r3
 8010e46:	3708      	adds	r7, #8
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}
 8010e4c:	00544146 	.word	0x00544146
 8010e50:	33544146 	.word	0x33544146

08010e54 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b096      	sub	sp, #88	; 0x58
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	60f8      	str	r0, [r7, #12]
 8010e5c:	60b9      	str	r1, [r7, #8]
 8010e5e:	4613      	mov	r3, r2
 8010e60:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010e62:	68bb      	ldr	r3, [r7, #8]
 8010e64:	2200      	movs	r2, #0
 8010e66:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010e68:	68f8      	ldr	r0, [r7, #12]
 8010e6a:	f7ff ff58 	bl	8010d1e <get_ldnumber>
 8010e6e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	da01      	bge.n	8010e7a <find_volume+0x26>
 8010e76:	230b      	movs	r3, #11
 8010e78:	e22e      	b.n	80112d8 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010e7a:	4aa8      	ldr	r2, [pc, #672]	; (801111c <find_volume+0x2c8>)
 8010e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e82:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d101      	bne.n	8010e8e <find_volume+0x3a>
 8010e8a:	230c      	movs	r3, #12
 8010e8c:	e224      	b.n	80112d8 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010e92:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010e94:	79fb      	ldrb	r3, [r7, #7]
 8010e96:	f023 0301 	bic.w	r3, r3, #1
 8010e9a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e9e:	781b      	ldrb	r3, [r3, #0]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d01a      	beq.n	8010eda <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea6:	785b      	ldrb	r3, [r3, #1]
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f7fe fc5b 	bl	800f764 <disk_status>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010eb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010eb8:	f003 0301 	and.w	r3, r3, #1
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d10c      	bne.n	8010eda <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010ec0:	79fb      	ldrb	r3, [r7, #7]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d007      	beq.n	8010ed6 <find_volume+0x82>
 8010ec6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010eca:	f003 0304 	and.w	r3, r3, #4
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d001      	beq.n	8010ed6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8010ed2:	230a      	movs	r3, #10
 8010ed4:	e200      	b.n	80112d8 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	e1fe      	b.n	80112d8 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010edc:	2200      	movs	r2, #0
 8010ede:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ee2:	b2da      	uxtb	r2, r3
 8010ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ee6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eea:	785b      	ldrb	r3, [r3, #1]
 8010eec:	4618      	mov	r0, r3
 8010eee:	f7fe fc53 	bl	800f798 <disk_initialize>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010ef8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010efc:	f003 0301 	and.w	r3, r3, #1
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d001      	beq.n	8010f08 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010f04:	2303      	movs	r3, #3
 8010f06:	e1e7      	b.n	80112d8 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010f08:	79fb      	ldrb	r3, [r7, #7]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d007      	beq.n	8010f1e <find_volume+0xca>
 8010f0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f12:	f003 0304 	and.w	r3, r3, #4
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d001      	beq.n	8010f1e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010f1a:	230a      	movs	r3, #10
 8010f1c:	e1dc      	b.n	80112d8 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010f1e:	2300      	movs	r3, #0
 8010f20:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010f22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010f24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010f26:	f7ff ff3f 	bl	8010da8 <check_fs>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010f30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010f34:	2b02      	cmp	r3, #2
 8010f36:	d14b      	bne.n	8010fd0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010f38:	2300      	movs	r3, #0
 8010f3a:	643b      	str	r3, [r7, #64]	; 0x40
 8010f3c:	e01f      	b.n	8010f7e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f40:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010f44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f46:	011b      	lsls	r3, r3, #4
 8010f48:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010f4c:	4413      	add	r3, r2
 8010f4e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f52:	3304      	adds	r3, #4
 8010f54:	781b      	ldrb	r3, [r3, #0]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d006      	beq.n	8010f68 <find_volume+0x114>
 8010f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f5c:	3308      	adds	r3, #8
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f7fe fcbe 	bl	800f8e0 <ld_dword>
 8010f64:	4602      	mov	r2, r0
 8010f66:	e000      	b.n	8010f6a <find_volume+0x116>
 8010f68:	2200      	movs	r2, #0
 8010f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f6c:	009b      	lsls	r3, r3, #2
 8010f6e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010f72:	440b      	add	r3, r1
 8010f74:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f7a:	3301      	adds	r3, #1
 8010f7c:	643b      	str	r3, [r7, #64]	; 0x40
 8010f7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f80:	2b03      	cmp	r3, #3
 8010f82:	d9dc      	bls.n	8010f3e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010f84:	2300      	movs	r3, #0
 8010f86:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d002      	beq.n	8010f94 <find_volume+0x140>
 8010f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f90:	3b01      	subs	r3, #1
 8010f92:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f96:	009b      	lsls	r3, r3, #2
 8010f98:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010f9c:	4413      	add	r3, r2
 8010f9e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010fa2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d005      	beq.n	8010fb6 <find_volume+0x162>
 8010faa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010fac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010fae:	f7ff fefb 	bl	8010da8 <check_fs>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	e000      	b.n	8010fb8 <find_volume+0x164>
 8010fb6:	2303      	movs	r3, #3
 8010fb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010fbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010fc0:	2b01      	cmp	r3, #1
 8010fc2:	d905      	bls.n	8010fd0 <find_volume+0x17c>
 8010fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fc6:	3301      	adds	r3, #1
 8010fc8:	643b      	str	r3, [r7, #64]	; 0x40
 8010fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fcc:	2b03      	cmp	r3, #3
 8010fce:	d9e1      	bls.n	8010f94 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010fd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010fd4:	2b04      	cmp	r3, #4
 8010fd6:	d101      	bne.n	8010fdc <find_volume+0x188>
 8010fd8:	2301      	movs	r3, #1
 8010fda:	e17d      	b.n	80112d8 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010fdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010fe0:	2b01      	cmp	r3, #1
 8010fe2:	d901      	bls.n	8010fe8 <find_volume+0x194>
 8010fe4:	230d      	movs	r3, #13
 8010fe6:	e177      	b.n	80112d8 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fea:	3330      	adds	r3, #48	; 0x30
 8010fec:	330b      	adds	r3, #11
 8010fee:	4618      	mov	r0, r3
 8010ff0:	f7fe fc5e 	bl	800f8b0 <ld_word>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ffa:	d001      	beq.n	8011000 <find_volume+0x1ac>
 8010ffc:	230d      	movs	r3, #13
 8010ffe:	e16b      	b.n	80112d8 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011002:	3330      	adds	r3, #48	; 0x30
 8011004:	3316      	adds	r3, #22
 8011006:	4618      	mov	r0, r3
 8011008:	f7fe fc52 	bl	800f8b0 <ld_word>
 801100c:	4603      	mov	r3, r0
 801100e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011012:	2b00      	cmp	r3, #0
 8011014:	d106      	bne.n	8011024 <find_volume+0x1d0>
 8011016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011018:	3330      	adds	r3, #48	; 0x30
 801101a:	3324      	adds	r3, #36	; 0x24
 801101c:	4618      	mov	r0, r3
 801101e:	f7fe fc5f 	bl	800f8e0 <ld_dword>
 8011022:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011026:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011028:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801102a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801102c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8011030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011032:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011036:	789b      	ldrb	r3, [r3, #2]
 8011038:	2b01      	cmp	r3, #1
 801103a:	d005      	beq.n	8011048 <find_volume+0x1f4>
 801103c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801103e:	789b      	ldrb	r3, [r3, #2]
 8011040:	2b02      	cmp	r3, #2
 8011042:	d001      	beq.n	8011048 <find_volume+0x1f4>
 8011044:	230d      	movs	r3, #13
 8011046:	e147      	b.n	80112d8 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801104a:	789b      	ldrb	r3, [r3, #2]
 801104c:	461a      	mov	r2, r3
 801104e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011050:	fb02 f303 	mul.w	r3, r2, r3
 8011054:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801105c:	b29a      	uxth	r2, r3
 801105e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011060:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011064:	895b      	ldrh	r3, [r3, #10]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d008      	beq.n	801107c <find_volume+0x228>
 801106a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801106c:	895b      	ldrh	r3, [r3, #10]
 801106e:	461a      	mov	r2, r3
 8011070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011072:	895b      	ldrh	r3, [r3, #10]
 8011074:	3b01      	subs	r3, #1
 8011076:	4013      	ands	r3, r2
 8011078:	2b00      	cmp	r3, #0
 801107a:	d001      	beq.n	8011080 <find_volume+0x22c>
 801107c:	230d      	movs	r3, #13
 801107e:	e12b      	b.n	80112d8 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011082:	3330      	adds	r3, #48	; 0x30
 8011084:	3311      	adds	r3, #17
 8011086:	4618      	mov	r0, r3
 8011088:	f7fe fc12 	bl	800f8b0 <ld_word>
 801108c:	4603      	mov	r3, r0
 801108e:	461a      	mov	r2, r3
 8011090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011092:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011096:	891b      	ldrh	r3, [r3, #8]
 8011098:	f003 030f 	and.w	r3, r3, #15
 801109c:	b29b      	uxth	r3, r3
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d001      	beq.n	80110a6 <find_volume+0x252>
 80110a2:	230d      	movs	r3, #13
 80110a4:	e118      	b.n	80112d8 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80110a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110a8:	3330      	adds	r3, #48	; 0x30
 80110aa:	3313      	adds	r3, #19
 80110ac:	4618      	mov	r0, r3
 80110ae:	f7fe fbff 	bl	800f8b0 <ld_word>
 80110b2:	4603      	mov	r3, r0
 80110b4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80110b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d106      	bne.n	80110ca <find_volume+0x276>
 80110bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110be:	3330      	adds	r3, #48	; 0x30
 80110c0:	3320      	adds	r3, #32
 80110c2:	4618      	mov	r0, r3
 80110c4:	f7fe fc0c 	bl	800f8e0 <ld_dword>
 80110c8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80110ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110cc:	3330      	adds	r3, #48	; 0x30
 80110ce:	330e      	adds	r3, #14
 80110d0:	4618      	mov	r0, r3
 80110d2:	f7fe fbed 	bl	800f8b0 <ld_word>
 80110d6:	4603      	mov	r3, r0
 80110d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80110da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d101      	bne.n	80110e4 <find_volume+0x290>
 80110e0:	230d      	movs	r3, #13
 80110e2:	e0f9      	b.n	80112d8 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80110e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80110e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110e8:	4413      	add	r3, r2
 80110ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80110ec:	8912      	ldrh	r2, [r2, #8]
 80110ee:	0912      	lsrs	r2, r2, #4
 80110f0:	b292      	uxth	r2, r2
 80110f2:	4413      	add	r3, r2
 80110f4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80110f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80110f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110fa:	429a      	cmp	r2, r3
 80110fc:	d201      	bcs.n	8011102 <find_volume+0x2ae>
 80110fe:	230d      	movs	r3, #13
 8011100:	e0ea      	b.n	80112d8 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011102:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011106:	1ad3      	subs	r3, r2, r3
 8011108:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801110a:	8952      	ldrh	r2, [r2, #10]
 801110c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011110:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011114:	2b00      	cmp	r3, #0
 8011116:	d103      	bne.n	8011120 <find_volume+0x2cc>
 8011118:	230d      	movs	r3, #13
 801111a:	e0dd      	b.n	80112d8 <find_volume+0x484>
 801111c:	2000027c 	.word	0x2000027c
		fmt = FS_FAT32;
 8011120:	2303      	movs	r3, #3
 8011122:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011128:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801112c:	4293      	cmp	r3, r2
 801112e:	d802      	bhi.n	8011136 <find_volume+0x2e2>
 8011130:	2302      	movs	r3, #2
 8011132:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011138:	f640 72f5 	movw	r2, #4085	; 0xff5
 801113c:	4293      	cmp	r3, r2
 801113e:	d802      	bhi.n	8011146 <find_volume+0x2f2>
 8011140:	2301      	movs	r3, #1
 8011142:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011148:	1c9a      	adds	r2, r3, #2
 801114a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801114c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 801114e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011150:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011152:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011154:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011158:	441a      	add	r2, r3
 801115a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801115c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 801115e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011162:	441a      	add	r2, r3
 8011164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011166:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8011168:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801116c:	2b03      	cmp	r3, #3
 801116e:	d11e      	bne.n	80111ae <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011172:	3330      	adds	r3, #48	; 0x30
 8011174:	332a      	adds	r3, #42	; 0x2a
 8011176:	4618      	mov	r0, r3
 8011178:	f7fe fb9a 	bl	800f8b0 <ld_word>
 801117c:	4603      	mov	r3, r0
 801117e:	2b00      	cmp	r3, #0
 8011180:	d001      	beq.n	8011186 <find_volume+0x332>
 8011182:	230d      	movs	r3, #13
 8011184:	e0a8      	b.n	80112d8 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011188:	891b      	ldrh	r3, [r3, #8]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d001      	beq.n	8011192 <find_volume+0x33e>
 801118e:	230d      	movs	r3, #13
 8011190:	e0a2      	b.n	80112d8 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011194:	3330      	adds	r3, #48	; 0x30
 8011196:	332c      	adds	r3, #44	; 0x2c
 8011198:	4618      	mov	r0, r3
 801119a:	f7fe fba1 	bl	800f8e0 <ld_dword>
 801119e:	4602      	mov	r2, r0
 80111a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111a2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80111a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111a6:	695b      	ldr	r3, [r3, #20]
 80111a8:	009b      	lsls	r3, r3, #2
 80111aa:	647b      	str	r3, [r7, #68]	; 0x44
 80111ac:	e01f      	b.n	80111ee <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80111ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111b0:	891b      	ldrh	r3, [r3, #8]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d101      	bne.n	80111ba <find_volume+0x366>
 80111b6:	230d      	movs	r3, #13
 80111b8:	e08e      	b.n	80112d8 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80111ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111bc:	6a1a      	ldr	r2, [r3, #32]
 80111be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111c0:	441a      	add	r2, r3
 80111c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111c4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80111c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80111ca:	2b02      	cmp	r3, #2
 80111cc:	d103      	bne.n	80111d6 <find_volume+0x382>
 80111ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111d0:	695b      	ldr	r3, [r3, #20]
 80111d2:	005b      	lsls	r3, r3, #1
 80111d4:	e00a      	b.n	80111ec <find_volume+0x398>
 80111d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111d8:	695a      	ldr	r2, [r3, #20]
 80111da:	4613      	mov	r3, r2
 80111dc:	005b      	lsls	r3, r3, #1
 80111de:	4413      	add	r3, r2
 80111e0:	085a      	lsrs	r2, r3, #1
 80111e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111e4:	695b      	ldr	r3, [r3, #20]
 80111e6:	f003 0301 	and.w	r3, r3, #1
 80111ea:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80111ec:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80111ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111f0:	699a      	ldr	r2, [r3, #24]
 80111f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111f4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80111f8:	0a5b      	lsrs	r3, r3, #9
 80111fa:	429a      	cmp	r2, r3
 80111fc:	d201      	bcs.n	8011202 <find_volume+0x3ae>
 80111fe:	230d      	movs	r3, #13
 8011200:	e06a      	b.n	80112d8 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011204:	f04f 32ff 	mov.w	r2, #4294967295
 8011208:	611a      	str	r2, [r3, #16]
 801120a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801120c:	691a      	ldr	r2, [r3, #16]
 801120e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011210:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8011212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011214:	2280      	movs	r2, #128	; 0x80
 8011216:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011218:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801121c:	2b03      	cmp	r3, #3
 801121e:	d149      	bne.n	80112b4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011222:	3330      	adds	r3, #48	; 0x30
 8011224:	3330      	adds	r3, #48	; 0x30
 8011226:	4618      	mov	r0, r3
 8011228:	f7fe fb42 	bl	800f8b0 <ld_word>
 801122c:	4603      	mov	r3, r0
 801122e:	2b01      	cmp	r3, #1
 8011230:	d140      	bne.n	80112b4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011234:	3301      	adds	r3, #1
 8011236:	4619      	mov	r1, r3
 8011238:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801123a:	f7fe fde9 	bl	800fe10 <move_window>
 801123e:	4603      	mov	r3, r0
 8011240:	2b00      	cmp	r3, #0
 8011242:	d137      	bne.n	80112b4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8011244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011246:	2200      	movs	r2, #0
 8011248:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801124a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801124c:	3330      	adds	r3, #48	; 0x30
 801124e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011252:	4618      	mov	r0, r3
 8011254:	f7fe fb2c 	bl	800f8b0 <ld_word>
 8011258:	4603      	mov	r3, r0
 801125a:	461a      	mov	r2, r3
 801125c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011260:	429a      	cmp	r2, r3
 8011262:	d127      	bne.n	80112b4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011266:	3330      	adds	r3, #48	; 0x30
 8011268:	4618      	mov	r0, r3
 801126a:	f7fe fb39 	bl	800f8e0 <ld_dword>
 801126e:	4602      	mov	r2, r0
 8011270:	4b1b      	ldr	r3, [pc, #108]	; (80112e0 <find_volume+0x48c>)
 8011272:	429a      	cmp	r2, r3
 8011274:	d11e      	bne.n	80112b4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011278:	3330      	adds	r3, #48	; 0x30
 801127a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801127e:	4618      	mov	r0, r3
 8011280:	f7fe fb2e 	bl	800f8e0 <ld_dword>
 8011284:	4602      	mov	r2, r0
 8011286:	4b17      	ldr	r3, [pc, #92]	; (80112e4 <find_volume+0x490>)
 8011288:	429a      	cmp	r2, r3
 801128a:	d113      	bne.n	80112b4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801128c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801128e:	3330      	adds	r3, #48	; 0x30
 8011290:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011294:	4618      	mov	r0, r3
 8011296:	f7fe fb23 	bl	800f8e0 <ld_dword>
 801129a:	4602      	mov	r2, r0
 801129c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801129e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80112a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112a2:	3330      	adds	r3, #48	; 0x30
 80112a4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80112a8:	4618      	mov	r0, r3
 80112aa:	f7fe fb19 	bl	800f8e0 <ld_dword>
 80112ae:	4602      	mov	r2, r0
 80112b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112b2:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80112b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112b6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80112ba:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80112bc:	4b0a      	ldr	r3, [pc, #40]	; (80112e8 <find_volume+0x494>)
 80112be:	881b      	ldrh	r3, [r3, #0]
 80112c0:	3301      	adds	r3, #1
 80112c2:	b29a      	uxth	r2, r3
 80112c4:	4b08      	ldr	r3, [pc, #32]	; (80112e8 <find_volume+0x494>)
 80112c6:	801a      	strh	r2, [r3, #0]
 80112c8:	4b07      	ldr	r3, [pc, #28]	; (80112e8 <find_volume+0x494>)
 80112ca:	881a      	ldrh	r2, [r3, #0]
 80112cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ce:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80112d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80112d2:	f7fe fd35 	bl	800fd40 <clear_lock>
#endif
	return FR_OK;
 80112d6:	2300      	movs	r3, #0
}
 80112d8:	4618      	mov	r0, r3
 80112da:	3758      	adds	r7, #88	; 0x58
 80112dc:	46bd      	mov	sp, r7
 80112de:	bd80      	pop	{r7, pc}
 80112e0:	41615252 	.word	0x41615252
 80112e4:	61417272 	.word	0x61417272
 80112e8:	20000284 	.word	0x20000284

080112ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b084      	sub	sp, #16
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
 80112f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80112f6:	2309      	movs	r3, #9
 80112f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d01c      	beq.n	801133a <validate+0x4e>
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d018      	beq.n	801133a <validate+0x4e>
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	781b      	ldrb	r3, [r3, #0]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d013      	beq.n	801133a <validate+0x4e>
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	889a      	ldrh	r2, [r3, #4]
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	88db      	ldrh	r3, [r3, #6]
 801131c:	429a      	cmp	r2, r3
 801131e:	d10c      	bne.n	801133a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	785b      	ldrb	r3, [r3, #1]
 8011326:	4618      	mov	r0, r3
 8011328:	f7fe fa1c 	bl	800f764 <disk_status>
 801132c:	4603      	mov	r3, r0
 801132e:	f003 0301 	and.w	r3, r3, #1
 8011332:	2b00      	cmp	r3, #0
 8011334:	d101      	bne.n	801133a <validate+0x4e>
			res = FR_OK;
 8011336:	2300      	movs	r3, #0
 8011338:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801133a:	7bfb      	ldrb	r3, [r7, #15]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d102      	bne.n	8011346 <validate+0x5a>
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	e000      	b.n	8011348 <validate+0x5c>
 8011346:	2300      	movs	r3, #0
 8011348:	683a      	ldr	r2, [r7, #0]
 801134a:	6013      	str	r3, [r2, #0]
	return res;
 801134c:	7bfb      	ldrb	r3, [r7, #15]
}
 801134e:	4618      	mov	r0, r3
 8011350:	3710      	adds	r7, #16
 8011352:	46bd      	mov	sp, r7
 8011354:	bd80      	pop	{r7, pc}
	...

08011358 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011358:	b580      	push	{r7, lr}
 801135a:	b088      	sub	sp, #32
 801135c:	af00      	add	r7, sp, #0
 801135e:	60f8      	str	r0, [r7, #12]
 8011360:	60b9      	str	r1, [r7, #8]
 8011362:	4613      	mov	r3, r2
 8011364:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011366:	68bb      	ldr	r3, [r7, #8]
 8011368:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801136a:	f107 0310 	add.w	r3, r7, #16
 801136e:	4618      	mov	r0, r3
 8011370:	f7ff fcd5 	bl	8010d1e <get_ldnumber>
 8011374:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011376:	69fb      	ldr	r3, [r7, #28]
 8011378:	2b00      	cmp	r3, #0
 801137a:	da01      	bge.n	8011380 <f_mount+0x28>
 801137c:	230b      	movs	r3, #11
 801137e:	e02b      	b.n	80113d8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011380:	4a17      	ldr	r2, [pc, #92]	; (80113e0 <f_mount+0x88>)
 8011382:	69fb      	ldr	r3, [r7, #28]
 8011384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011388:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801138a:	69bb      	ldr	r3, [r7, #24]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d005      	beq.n	801139c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011390:	69b8      	ldr	r0, [r7, #24]
 8011392:	f7fe fcd5 	bl	800fd40 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011396:	69bb      	ldr	r3, [r7, #24]
 8011398:	2200      	movs	r2, #0
 801139a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d002      	beq.n	80113a8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	2200      	movs	r2, #0
 80113a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80113a8:	68fa      	ldr	r2, [r7, #12]
 80113aa:	490d      	ldr	r1, [pc, #52]	; (80113e0 <f_mount+0x88>)
 80113ac:	69fb      	ldr	r3, [r7, #28]
 80113ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d002      	beq.n	80113be <f_mount+0x66>
 80113b8:	79fb      	ldrb	r3, [r7, #7]
 80113ba:	2b01      	cmp	r3, #1
 80113bc:	d001      	beq.n	80113c2 <f_mount+0x6a>
 80113be:	2300      	movs	r3, #0
 80113c0:	e00a      	b.n	80113d8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80113c2:	f107 010c 	add.w	r1, r7, #12
 80113c6:	f107 0308 	add.w	r3, r7, #8
 80113ca:	2200      	movs	r2, #0
 80113cc:	4618      	mov	r0, r3
 80113ce:	f7ff fd41 	bl	8010e54 <find_volume>
 80113d2:	4603      	mov	r3, r0
 80113d4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80113d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80113d8:	4618      	mov	r0, r3
 80113da:	3720      	adds	r7, #32
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd80      	pop	{r7, pc}
 80113e0:	2000027c 	.word	0x2000027c

080113e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b098      	sub	sp, #96	; 0x60
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	60f8      	str	r0, [r7, #12]
 80113ec:	60b9      	str	r1, [r7, #8]
 80113ee:	4613      	mov	r3, r2
 80113f0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d101      	bne.n	80113fc <f_open+0x18>
 80113f8:	2309      	movs	r3, #9
 80113fa:	e1ad      	b.n	8011758 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80113fc:	79fb      	ldrb	r3, [r7, #7]
 80113fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011402:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011404:	79fa      	ldrb	r2, [r7, #7]
 8011406:	f107 0110 	add.w	r1, r7, #16
 801140a:	f107 0308 	add.w	r3, r7, #8
 801140e:	4618      	mov	r0, r3
 8011410:	f7ff fd20 	bl	8010e54 <find_volume>
 8011414:	4603      	mov	r3, r0
 8011416:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801141a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801141e:	2b00      	cmp	r3, #0
 8011420:	f040 8191 	bne.w	8011746 <f_open+0x362>
		dj.obj.fs = fs;
 8011424:	693b      	ldr	r3, [r7, #16]
 8011426:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011428:	68ba      	ldr	r2, [r7, #8]
 801142a:	f107 0314 	add.w	r3, r7, #20
 801142e:	4611      	mov	r1, r2
 8011430:	4618      	mov	r0, r3
 8011432:	f7ff fc03 	bl	8010c3c <follow_path>
 8011436:	4603      	mov	r3, r0
 8011438:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801143c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011440:	2b00      	cmp	r3, #0
 8011442:	d11a      	bne.n	801147a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011444:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011448:	b25b      	sxtb	r3, r3
 801144a:	2b00      	cmp	r3, #0
 801144c:	da03      	bge.n	8011456 <f_open+0x72>
				res = FR_INVALID_NAME;
 801144e:	2306      	movs	r3, #6
 8011450:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011454:	e011      	b.n	801147a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011456:	79fb      	ldrb	r3, [r7, #7]
 8011458:	f023 0301 	bic.w	r3, r3, #1
 801145c:	2b00      	cmp	r3, #0
 801145e:	bf14      	ite	ne
 8011460:	2301      	movne	r3, #1
 8011462:	2300      	moveq	r3, #0
 8011464:	b2db      	uxtb	r3, r3
 8011466:	461a      	mov	r2, r3
 8011468:	f107 0314 	add.w	r3, r7, #20
 801146c:	4611      	mov	r1, r2
 801146e:	4618      	mov	r0, r3
 8011470:	f7fe fb1e 	bl	800fab0 <chk_lock>
 8011474:	4603      	mov	r3, r0
 8011476:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801147a:	79fb      	ldrb	r3, [r7, #7]
 801147c:	f003 031c 	and.w	r3, r3, #28
 8011480:	2b00      	cmp	r3, #0
 8011482:	d07f      	beq.n	8011584 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8011484:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011488:	2b00      	cmp	r3, #0
 801148a:	d017      	beq.n	80114bc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801148c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011490:	2b04      	cmp	r3, #4
 8011492:	d10e      	bne.n	80114b2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011494:	f7fe fb68 	bl	800fb68 <enq_lock>
 8011498:	4603      	mov	r3, r0
 801149a:	2b00      	cmp	r3, #0
 801149c:	d006      	beq.n	80114ac <f_open+0xc8>
 801149e:	f107 0314 	add.w	r3, r7, #20
 80114a2:	4618      	mov	r0, r3
 80114a4:	f7ff faa4 	bl	80109f0 <dir_register>
 80114a8:	4603      	mov	r3, r0
 80114aa:	e000      	b.n	80114ae <f_open+0xca>
 80114ac:	2312      	movs	r3, #18
 80114ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80114b2:	79fb      	ldrb	r3, [r7, #7]
 80114b4:	f043 0308 	orr.w	r3, r3, #8
 80114b8:	71fb      	strb	r3, [r7, #7]
 80114ba:	e010      	b.n	80114de <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80114bc:	7ebb      	ldrb	r3, [r7, #26]
 80114be:	f003 0311 	and.w	r3, r3, #17
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d003      	beq.n	80114ce <f_open+0xea>
					res = FR_DENIED;
 80114c6:	2307      	movs	r3, #7
 80114c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80114cc:	e007      	b.n	80114de <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80114ce:	79fb      	ldrb	r3, [r7, #7]
 80114d0:	f003 0304 	and.w	r3, r3, #4
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d002      	beq.n	80114de <f_open+0xfa>
 80114d8:	2308      	movs	r3, #8
 80114da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80114de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d168      	bne.n	80115b8 <f_open+0x1d4>
 80114e6:	79fb      	ldrb	r3, [r7, #7]
 80114e8:	f003 0308 	and.w	r3, r3, #8
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d063      	beq.n	80115b8 <f_open+0x1d4>
				dw = GET_FATTIME();
 80114f0:	f7fe f9d6 	bl	800f8a0 <get_fattime>
 80114f4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80114f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114f8:	330e      	adds	r3, #14
 80114fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80114fc:	4618      	mov	r0, r3
 80114fe:	f7fe fa2d 	bl	800f95c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011504:	3316      	adds	r3, #22
 8011506:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011508:	4618      	mov	r0, r3
 801150a:	f7fe fa27 	bl	800f95c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801150e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011510:	330b      	adds	r3, #11
 8011512:	2220      	movs	r2, #32
 8011514:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011516:	693b      	ldr	r3, [r7, #16]
 8011518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801151a:	4611      	mov	r1, r2
 801151c:	4618      	mov	r0, r3
 801151e:	f7ff f976 	bl	801080e <ld_clust>
 8011522:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011524:	693b      	ldr	r3, [r7, #16]
 8011526:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011528:	2200      	movs	r2, #0
 801152a:	4618      	mov	r0, r3
 801152c:	f7ff f98e 	bl	801084c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011532:	331c      	adds	r3, #28
 8011534:	2100      	movs	r1, #0
 8011536:	4618      	mov	r0, r3
 8011538:	f7fe fa10 	bl	800f95c <st_dword>
					fs->wflag = 1;
 801153c:	693b      	ldr	r3, [r7, #16]
 801153e:	2201      	movs	r2, #1
 8011540:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011544:	2b00      	cmp	r3, #0
 8011546:	d037      	beq.n	80115b8 <f_open+0x1d4>
						dw = fs->winsect;
 8011548:	693b      	ldr	r3, [r7, #16]
 801154a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801154c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801154e:	f107 0314 	add.w	r3, r7, #20
 8011552:	2200      	movs	r2, #0
 8011554:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011556:	4618      	mov	r0, r3
 8011558:	f7fe fea1 	bl	801029e <remove_chain>
 801155c:	4603      	mov	r3, r0
 801155e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8011562:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011566:	2b00      	cmp	r3, #0
 8011568:	d126      	bne.n	80115b8 <f_open+0x1d4>
							res = move_window(fs, dw);
 801156a:	693b      	ldr	r3, [r7, #16]
 801156c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801156e:	4618      	mov	r0, r3
 8011570:	f7fe fc4e 	bl	800fe10 <move_window>
 8011574:	4603      	mov	r3, r0
 8011576:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801157a:	693b      	ldr	r3, [r7, #16]
 801157c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801157e:	3a01      	subs	r2, #1
 8011580:	60da      	str	r2, [r3, #12]
 8011582:	e019      	b.n	80115b8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011584:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011588:	2b00      	cmp	r3, #0
 801158a:	d115      	bne.n	80115b8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801158c:	7ebb      	ldrb	r3, [r7, #26]
 801158e:	f003 0310 	and.w	r3, r3, #16
 8011592:	2b00      	cmp	r3, #0
 8011594:	d003      	beq.n	801159e <f_open+0x1ba>
					res = FR_NO_FILE;
 8011596:	2304      	movs	r3, #4
 8011598:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801159c:	e00c      	b.n	80115b8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801159e:	79fb      	ldrb	r3, [r7, #7]
 80115a0:	f003 0302 	and.w	r3, r3, #2
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d007      	beq.n	80115b8 <f_open+0x1d4>
 80115a8:	7ebb      	ldrb	r3, [r7, #26]
 80115aa:	f003 0301 	and.w	r3, r3, #1
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d002      	beq.n	80115b8 <f_open+0x1d4>
						res = FR_DENIED;
 80115b2:	2307      	movs	r3, #7
 80115b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80115b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d128      	bne.n	8011612 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80115c0:	79fb      	ldrb	r3, [r7, #7]
 80115c2:	f003 0308 	and.w	r3, r3, #8
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d003      	beq.n	80115d2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80115ca:	79fb      	ldrb	r3, [r7, #7]
 80115cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115d0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80115d2:	693b      	ldr	r3, [r7, #16]
 80115d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80115da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80115e0:	79fb      	ldrb	r3, [r7, #7]
 80115e2:	f023 0301 	bic.w	r3, r3, #1
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	bf14      	ite	ne
 80115ea:	2301      	movne	r3, #1
 80115ec:	2300      	moveq	r3, #0
 80115ee:	b2db      	uxtb	r3, r3
 80115f0:	461a      	mov	r2, r3
 80115f2:	f107 0314 	add.w	r3, r7, #20
 80115f6:	4611      	mov	r1, r2
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7fe fad7 	bl	800fbac <inc_lock>
 80115fe:	4602      	mov	r2, r0
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	691b      	ldr	r3, [r3, #16]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d102      	bne.n	8011612 <f_open+0x22e>
 801160c:	2302      	movs	r3, #2
 801160e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011612:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011616:	2b00      	cmp	r3, #0
 8011618:	f040 8095 	bne.w	8011746 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801161c:	693b      	ldr	r3, [r7, #16]
 801161e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011620:	4611      	mov	r1, r2
 8011622:	4618      	mov	r0, r3
 8011624:	f7ff f8f3 	bl	801080e <ld_clust>
 8011628:	4602      	mov	r2, r0
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801162e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011630:	331c      	adds	r3, #28
 8011632:	4618      	mov	r0, r3
 8011634:	f7fe f954 	bl	800f8e0 <ld_dword>
 8011638:	4602      	mov	r2, r0
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	2200      	movs	r2, #0
 8011642:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011644:	693a      	ldr	r2, [r7, #16]
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801164a:	693b      	ldr	r3, [r7, #16]
 801164c:	88da      	ldrh	r2, [r3, #6]
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	79fa      	ldrb	r2, [r7, #7]
 8011656:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	2200      	movs	r2, #0
 801165c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	2200      	movs	r2, #0
 8011662:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	2200      	movs	r2, #0
 8011668:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	3330      	adds	r3, #48	; 0x30
 801166e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011672:	2100      	movs	r1, #0
 8011674:	4618      	mov	r0, r3
 8011676:	f7fe f9be 	bl	800f9f6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801167a:	79fb      	ldrb	r3, [r7, #7]
 801167c:	f003 0320 	and.w	r3, r3, #32
 8011680:	2b00      	cmp	r3, #0
 8011682:	d060      	beq.n	8011746 <f_open+0x362>
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	68db      	ldr	r3, [r3, #12]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d05c      	beq.n	8011746 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	68da      	ldr	r2, [r3, #12]
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011694:	693b      	ldr	r3, [r7, #16]
 8011696:	895b      	ldrh	r3, [r3, #10]
 8011698:	025b      	lsls	r3, r3, #9
 801169a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	689b      	ldr	r3, [r3, #8]
 80116a0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	68db      	ldr	r3, [r3, #12]
 80116a6:	657b      	str	r3, [r7, #84]	; 0x54
 80116a8:	e016      	b.n	80116d8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80116ae:	4618      	mov	r0, r3
 80116b0:	f7fe fc69 	bl	800ff86 <get_fat>
 80116b4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80116b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80116b8:	2b01      	cmp	r3, #1
 80116ba:	d802      	bhi.n	80116c2 <f_open+0x2de>
 80116bc:	2302      	movs	r3, #2
 80116be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80116c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80116c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116c8:	d102      	bne.n	80116d0 <f_open+0x2ec>
 80116ca:	2301      	movs	r3, #1
 80116cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80116d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80116d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80116d4:	1ad3      	subs	r3, r2, r3
 80116d6:	657b      	str	r3, [r7, #84]	; 0x54
 80116d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d103      	bne.n	80116e8 <f_open+0x304>
 80116e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80116e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80116e4:	429a      	cmp	r2, r3
 80116e6:	d8e0      	bhi.n	80116aa <f_open+0x2c6>
				}
				fp->clust = clst;
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80116ec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80116ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d127      	bne.n	8011746 <f_open+0x362>
 80116f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d022      	beq.n	8011746 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011700:	693b      	ldr	r3, [r7, #16]
 8011702:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011704:	4618      	mov	r0, r3
 8011706:	f7fe fc1f 	bl	800ff48 <clust2sect>
 801170a:	6478      	str	r0, [r7, #68]	; 0x44
 801170c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801170e:	2b00      	cmp	r3, #0
 8011710:	d103      	bne.n	801171a <f_open+0x336>
						res = FR_INT_ERR;
 8011712:	2302      	movs	r3, #2
 8011714:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011718:	e015      	b.n	8011746 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801171a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801171c:	0a5a      	lsrs	r2, r3, #9
 801171e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011720:	441a      	add	r2, r3
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011726:	693b      	ldr	r3, [r7, #16]
 8011728:	7858      	ldrb	r0, [r3, #1]
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	6a1a      	ldr	r2, [r3, #32]
 8011734:	2301      	movs	r3, #1
 8011736:	f7fe f855 	bl	800f7e4 <disk_read>
 801173a:	4603      	mov	r3, r0
 801173c:	2b00      	cmp	r3, #0
 801173e:	d002      	beq.n	8011746 <f_open+0x362>
 8011740:	2301      	movs	r3, #1
 8011742:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011746:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801174a:	2b00      	cmp	r3, #0
 801174c:	d002      	beq.n	8011754 <f_open+0x370>
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	2200      	movs	r2, #0
 8011752:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011754:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8011758:	4618      	mov	r0, r3
 801175a:	3760      	adds	r7, #96	; 0x60
 801175c:	46bd      	mov	sp, r7
 801175e:	bd80      	pop	{r7, pc}

08011760 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b08e      	sub	sp, #56	; 0x38
 8011764:	af00      	add	r7, sp, #0
 8011766:	60f8      	str	r0, [r7, #12]
 8011768:	60b9      	str	r1, [r7, #8]
 801176a:	607a      	str	r2, [r7, #4]
 801176c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801176e:	68bb      	ldr	r3, [r7, #8]
 8011770:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	2200      	movs	r2, #0
 8011776:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	f107 0214 	add.w	r2, r7, #20
 801177e:	4611      	mov	r1, r2
 8011780:	4618      	mov	r0, r3
 8011782:	f7ff fdb3 	bl	80112ec <validate>
 8011786:	4603      	mov	r3, r0
 8011788:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801178c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011790:	2b00      	cmp	r3, #0
 8011792:	d107      	bne.n	80117a4 <f_read+0x44>
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	7d5b      	ldrb	r3, [r3, #21]
 8011798:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801179c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d002      	beq.n	80117aa <f_read+0x4a>
 80117a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80117a8:	e115      	b.n	80119d6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	7d1b      	ldrb	r3, [r3, #20]
 80117ae:	f003 0301 	and.w	r3, r3, #1
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d101      	bne.n	80117ba <f_read+0x5a>
 80117b6:	2307      	movs	r3, #7
 80117b8:	e10d      	b.n	80119d6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	68da      	ldr	r2, [r3, #12]
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	699b      	ldr	r3, [r3, #24]
 80117c2:	1ad3      	subs	r3, r2, r3
 80117c4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80117c6:	687a      	ldr	r2, [r7, #4]
 80117c8:	6a3b      	ldr	r3, [r7, #32]
 80117ca:	429a      	cmp	r2, r3
 80117cc:	f240 80fe 	bls.w	80119cc <f_read+0x26c>
 80117d0:	6a3b      	ldr	r3, [r7, #32]
 80117d2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80117d4:	e0fa      	b.n	80119cc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	699b      	ldr	r3, [r3, #24]
 80117da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117de:	2b00      	cmp	r3, #0
 80117e0:	f040 80c6 	bne.w	8011970 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	699b      	ldr	r3, [r3, #24]
 80117e8:	0a5b      	lsrs	r3, r3, #9
 80117ea:	697a      	ldr	r2, [r7, #20]
 80117ec:	8952      	ldrh	r2, [r2, #10]
 80117ee:	3a01      	subs	r2, #1
 80117f0:	4013      	ands	r3, r2
 80117f2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80117f4:	69fb      	ldr	r3, [r7, #28]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d12f      	bne.n	801185a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	699b      	ldr	r3, [r3, #24]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d103      	bne.n	801180a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	689b      	ldr	r3, [r3, #8]
 8011806:	633b      	str	r3, [r7, #48]	; 0x30
 8011808:	e013      	b.n	8011832 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801180e:	2b00      	cmp	r3, #0
 8011810:	d007      	beq.n	8011822 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	699b      	ldr	r3, [r3, #24]
 8011816:	4619      	mov	r1, r3
 8011818:	68f8      	ldr	r0, [r7, #12]
 801181a:	f7fe fe3d 	bl	8010498 <clmt_clust>
 801181e:	6338      	str	r0, [r7, #48]	; 0x30
 8011820:	e007      	b.n	8011832 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8011822:	68fa      	ldr	r2, [r7, #12]
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	69db      	ldr	r3, [r3, #28]
 8011828:	4619      	mov	r1, r3
 801182a:	4610      	mov	r0, r2
 801182c:	f7fe fbab 	bl	800ff86 <get_fat>
 8011830:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8011832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011834:	2b01      	cmp	r3, #1
 8011836:	d804      	bhi.n	8011842 <f_read+0xe2>
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	2202      	movs	r2, #2
 801183c:	755a      	strb	r2, [r3, #21]
 801183e:	2302      	movs	r3, #2
 8011840:	e0c9      	b.n	80119d6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011848:	d104      	bne.n	8011854 <f_read+0xf4>
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	2201      	movs	r2, #1
 801184e:	755a      	strb	r2, [r3, #21]
 8011850:	2301      	movs	r3, #1
 8011852:	e0c0      	b.n	80119d6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011858:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801185a:	697a      	ldr	r2, [r7, #20]
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	69db      	ldr	r3, [r3, #28]
 8011860:	4619      	mov	r1, r3
 8011862:	4610      	mov	r0, r2
 8011864:	f7fe fb70 	bl	800ff48 <clust2sect>
 8011868:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801186a:	69bb      	ldr	r3, [r7, #24]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d104      	bne.n	801187a <f_read+0x11a>
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	2202      	movs	r2, #2
 8011874:	755a      	strb	r2, [r3, #21]
 8011876:	2302      	movs	r3, #2
 8011878:	e0ad      	b.n	80119d6 <f_read+0x276>
			sect += csect;
 801187a:	69ba      	ldr	r2, [r7, #24]
 801187c:	69fb      	ldr	r3, [r7, #28]
 801187e:	4413      	add	r3, r2
 8011880:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	0a5b      	lsrs	r3, r3, #9
 8011886:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8011888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801188a:	2b00      	cmp	r3, #0
 801188c:	d039      	beq.n	8011902 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801188e:	69fa      	ldr	r2, [r7, #28]
 8011890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011892:	4413      	add	r3, r2
 8011894:	697a      	ldr	r2, [r7, #20]
 8011896:	8952      	ldrh	r2, [r2, #10]
 8011898:	4293      	cmp	r3, r2
 801189a:	d905      	bls.n	80118a8 <f_read+0x148>
					cc = fs->csize - csect;
 801189c:	697b      	ldr	r3, [r7, #20]
 801189e:	895b      	ldrh	r3, [r3, #10]
 80118a0:	461a      	mov	r2, r3
 80118a2:	69fb      	ldr	r3, [r7, #28]
 80118a4:	1ad3      	subs	r3, r2, r3
 80118a6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80118a8:	697b      	ldr	r3, [r7, #20]
 80118aa:	7858      	ldrb	r0, [r3, #1]
 80118ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118ae:	69ba      	ldr	r2, [r7, #24]
 80118b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80118b2:	f7fd ff97 	bl	800f7e4 <disk_read>
 80118b6:	4603      	mov	r3, r0
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d004      	beq.n	80118c6 <f_read+0x166>
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	2201      	movs	r2, #1
 80118c0:	755a      	strb	r2, [r3, #21]
 80118c2:	2301      	movs	r3, #1
 80118c4:	e087      	b.n	80119d6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	7d1b      	ldrb	r3, [r3, #20]
 80118ca:	b25b      	sxtb	r3, r3
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	da14      	bge.n	80118fa <f_read+0x19a>
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	6a1a      	ldr	r2, [r3, #32]
 80118d4:	69bb      	ldr	r3, [r7, #24]
 80118d6:	1ad3      	subs	r3, r2, r3
 80118d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80118da:	429a      	cmp	r2, r3
 80118dc:	d90d      	bls.n	80118fa <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	6a1a      	ldr	r2, [r3, #32]
 80118e2:	69bb      	ldr	r3, [r7, #24]
 80118e4:	1ad3      	subs	r3, r2, r3
 80118e6:	025b      	lsls	r3, r3, #9
 80118e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80118ea:	18d0      	adds	r0, r2, r3
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	3330      	adds	r3, #48	; 0x30
 80118f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80118f4:	4619      	mov	r1, r3
 80118f6:	f7fe f85d 	bl	800f9b4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80118fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118fc:	025b      	lsls	r3, r3, #9
 80118fe:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8011900:	e050      	b.n	80119a4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	6a1b      	ldr	r3, [r3, #32]
 8011906:	69ba      	ldr	r2, [r7, #24]
 8011908:	429a      	cmp	r2, r3
 801190a:	d02e      	beq.n	801196a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	7d1b      	ldrb	r3, [r3, #20]
 8011910:	b25b      	sxtb	r3, r3
 8011912:	2b00      	cmp	r3, #0
 8011914:	da18      	bge.n	8011948 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011916:	697b      	ldr	r3, [r7, #20]
 8011918:	7858      	ldrb	r0, [r3, #1]
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	6a1a      	ldr	r2, [r3, #32]
 8011924:	2301      	movs	r3, #1
 8011926:	f7fd ff7d 	bl	800f824 <disk_write>
 801192a:	4603      	mov	r3, r0
 801192c:	2b00      	cmp	r3, #0
 801192e:	d004      	beq.n	801193a <f_read+0x1da>
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	2201      	movs	r2, #1
 8011934:	755a      	strb	r2, [r3, #21]
 8011936:	2301      	movs	r3, #1
 8011938:	e04d      	b.n	80119d6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	7d1b      	ldrb	r3, [r3, #20]
 801193e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011942:	b2da      	uxtb	r2, r3
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011948:	697b      	ldr	r3, [r7, #20]
 801194a:	7858      	ldrb	r0, [r3, #1]
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011952:	2301      	movs	r3, #1
 8011954:	69ba      	ldr	r2, [r7, #24]
 8011956:	f7fd ff45 	bl	800f7e4 <disk_read>
 801195a:	4603      	mov	r3, r0
 801195c:	2b00      	cmp	r3, #0
 801195e:	d004      	beq.n	801196a <f_read+0x20a>
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	2201      	movs	r2, #1
 8011964:	755a      	strb	r2, [r3, #21]
 8011966:	2301      	movs	r3, #1
 8011968:	e035      	b.n	80119d6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	69ba      	ldr	r2, [r7, #24]
 801196e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	699b      	ldr	r3, [r3, #24]
 8011974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011978:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801197c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801197e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	429a      	cmp	r2, r3
 8011984:	d901      	bls.n	801198a <f_read+0x22a>
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	699b      	ldr	r3, [r3, #24]
 8011994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011998:	4413      	add	r3, r2
 801199a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801199c:	4619      	mov	r1, r3
 801199e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80119a0:	f7fe f808 	bl	800f9b4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80119a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80119a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a8:	4413      	add	r3, r2
 80119aa:	627b      	str	r3, [r7, #36]	; 0x24
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	699a      	ldr	r2, [r3, #24]
 80119b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119b2:	441a      	add	r2, r3
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	619a      	str	r2, [r3, #24]
 80119b8:	683b      	ldr	r3, [r7, #0]
 80119ba:	681a      	ldr	r2, [r3, #0]
 80119bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119be:	441a      	add	r2, r3
 80119c0:	683b      	ldr	r3, [r7, #0]
 80119c2:	601a      	str	r2, [r3, #0]
 80119c4:	687a      	ldr	r2, [r7, #4]
 80119c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119c8:	1ad3      	subs	r3, r2, r3
 80119ca:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	f47f af01 	bne.w	80117d6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80119d4:	2300      	movs	r3, #0
}
 80119d6:	4618      	mov	r0, r3
 80119d8:	3738      	adds	r7, #56	; 0x38
 80119da:	46bd      	mov	sp, r7
 80119dc:	bd80      	pop	{r7, pc}

080119de <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80119de:	b580      	push	{r7, lr}
 80119e0:	b086      	sub	sp, #24
 80119e2:	af00      	add	r7, sp, #0
 80119e4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	f107 0208 	add.w	r2, r7, #8
 80119ec:	4611      	mov	r1, r2
 80119ee:	4618      	mov	r0, r3
 80119f0:	f7ff fc7c 	bl	80112ec <validate>
 80119f4:	4603      	mov	r3, r0
 80119f6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80119f8:	7dfb      	ldrb	r3, [r7, #23]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d168      	bne.n	8011ad0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	7d1b      	ldrb	r3, [r3, #20]
 8011a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d062      	beq.n	8011ad0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	7d1b      	ldrb	r3, [r3, #20]
 8011a0e:	b25b      	sxtb	r3, r3
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	da15      	bge.n	8011a40 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011a14:	68bb      	ldr	r3, [r7, #8]
 8011a16:	7858      	ldrb	r0, [r3, #1]
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	6a1a      	ldr	r2, [r3, #32]
 8011a22:	2301      	movs	r3, #1
 8011a24:	f7fd fefe 	bl	800f824 <disk_write>
 8011a28:	4603      	mov	r3, r0
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d001      	beq.n	8011a32 <f_sync+0x54>
 8011a2e:	2301      	movs	r3, #1
 8011a30:	e04f      	b.n	8011ad2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	7d1b      	ldrb	r3, [r3, #20]
 8011a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011a3a:	b2da      	uxtb	r2, r3
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011a40:	f7fd ff2e 	bl	800f8a0 <get_fattime>
 8011a44:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011a46:	68ba      	ldr	r2, [r7, #8]
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a4c:	4619      	mov	r1, r3
 8011a4e:	4610      	mov	r0, r2
 8011a50:	f7fe f9de 	bl	800fe10 <move_window>
 8011a54:	4603      	mov	r3, r0
 8011a56:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011a58:	7dfb      	ldrb	r3, [r7, #23]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d138      	bne.n	8011ad0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a62:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	330b      	adds	r3, #11
 8011a68:	781a      	ldrb	r2, [r3, #0]
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	330b      	adds	r3, #11
 8011a6e:	f042 0220 	orr.w	r2, r2, #32
 8011a72:	b2d2      	uxtb	r2, r2
 8011a74:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	6818      	ldr	r0, [r3, #0]
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	689b      	ldr	r3, [r3, #8]
 8011a7e:	461a      	mov	r2, r3
 8011a80:	68f9      	ldr	r1, [r7, #12]
 8011a82:	f7fe fee3 	bl	801084c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	f103 021c 	add.w	r2, r3, #28
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	68db      	ldr	r3, [r3, #12]
 8011a90:	4619      	mov	r1, r3
 8011a92:	4610      	mov	r0, r2
 8011a94:	f7fd ff62 	bl	800f95c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	3316      	adds	r3, #22
 8011a9c:	6939      	ldr	r1, [r7, #16]
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	f7fd ff5c 	bl	800f95c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	3312      	adds	r3, #18
 8011aa8:	2100      	movs	r1, #0
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f7fd ff3b 	bl	800f926 <st_word>
					fs->wflag = 1;
 8011ab0:	68bb      	ldr	r3, [r7, #8]
 8011ab2:	2201      	movs	r2, #1
 8011ab4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011ab6:	68bb      	ldr	r3, [r7, #8]
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f7fe f9d7 	bl	800fe6c <sync_fs>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	7d1b      	ldrb	r3, [r3, #20]
 8011ac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011aca:	b2da      	uxtb	r2, r3
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	3718      	adds	r7, #24
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bd80      	pop	{r7, pc}

08011ada <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011ada:	b580      	push	{r7, lr}
 8011adc:	b084      	sub	sp, #16
 8011ade:	af00      	add	r7, sp, #0
 8011ae0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011ae2:	6878      	ldr	r0, [r7, #4]
 8011ae4:	f7ff ff7b 	bl	80119de <f_sync>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011aec:	7bfb      	ldrb	r3, [r7, #15]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d118      	bne.n	8011b24 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	f107 0208 	add.w	r2, r7, #8
 8011af8:	4611      	mov	r1, r2
 8011afa:	4618      	mov	r0, r3
 8011afc:	f7ff fbf6 	bl	80112ec <validate>
 8011b00:	4603      	mov	r3, r0
 8011b02:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011b04:	7bfb      	ldrb	r3, [r7, #15]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d10c      	bne.n	8011b24 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	691b      	ldr	r3, [r3, #16]
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f7fe f8da 	bl	800fcc8 <dec_lock>
 8011b14:	4603      	mov	r3, r0
 8011b16:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011b18:	7bfb      	ldrb	r3, [r7, #15]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d102      	bne.n	8011b24 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	2200      	movs	r2, #0
 8011b22:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b26:	4618      	mov	r0, r3
 8011b28:	3710      	adds	r7, #16
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	bd80      	pop	{r7, pc}

08011b2e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8011b2e:	b580      	push	{r7, lr}
 8011b30:	b086      	sub	sp, #24
 8011b32:	af00      	add	r7, sp, #0
 8011b34:	6078      	str	r0, [r7, #4]
 8011b36:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d101      	bne.n	8011b42 <f_opendir+0x14>
 8011b3e:	2309      	movs	r3, #9
 8011b40:	e064      	b.n	8011c0c <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8011b46:	f107 010c 	add.w	r1, r7, #12
 8011b4a:	463b      	mov	r3, r7
 8011b4c:	2200      	movs	r2, #0
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f7ff f980 	bl	8010e54 <find_volume>
 8011b54:	4603      	mov	r3, r0
 8011b56:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011b58:	7dfb      	ldrb	r3, [r7, #23]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d14f      	bne.n	8011bfe <f_opendir+0xd0>
		obj->fs = fs;
 8011b5e:	68fa      	ldr	r2, [r7, #12]
 8011b60:	693b      	ldr	r3, [r7, #16]
 8011b62:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8011b64:	683b      	ldr	r3, [r7, #0]
 8011b66:	4619      	mov	r1, r3
 8011b68:	6878      	ldr	r0, [r7, #4]
 8011b6a:	f7ff f867 	bl	8010c3c <follow_path>
 8011b6e:	4603      	mov	r3, r0
 8011b70:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8011b72:	7dfb      	ldrb	r3, [r7, #23]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d13d      	bne.n	8011bf4 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011b7e:	b25b      	sxtb	r3, r3
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	db12      	blt.n	8011baa <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8011b84:	693b      	ldr	r3, [r7, #16]
 8011b86:	799b      	ldrb	r3, [r3, #6]
 8011b88:	f003 0310 	and.w	r3, r3, #16
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d00a      	beq.n	8011ba6 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8011b90:	68fa      	ldr	r2, [r7, #12]
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	6a1b      	ldr	r3, [r3, #32]
 8011b96:	4619      	mov	r1, r3
 8011b98:	4610      	mov	r0, r2
 8011b9a:	f7fe fe38 	bl	801080e <ld_clust>
 8011b9e:	4602      	mov	r2, r0
 8011ba0:	693b      	ldr	r3, [r7, #16]
 8011ba2:	609a      	str	r2, [r3, #8]
 8011ba4:	e001      	b.n	8011baa <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8011ba6:	2305      	movs	r3, #5
 8011ba8:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8011baa:	7dfb      	ldrb	r3, [r7, #23]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d121      	bne.n	8011bf4 <f_opendir+0xc6>
				obj->id = fs->id;
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	88da      	ldrh	r2, [r3, #6]
 8011bb4:	693b      	ldr	r3, [r7, #16]
 8011bb6:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8011bb8:	2100      	movs	r1, #0
 8011bba:	6878      	ldr	r0, [r7, #4]
 8011bbc:	f7fe fca0 	bl	8010500 <dir_sdi>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8011bc4:	7dfb      	ldrb	r3, [r7, #23]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d114      	bne.n	8011bf4 <f_opendir+0xc6>
					if (obj->sclust) {
 8011bca:	693b      	ldr	r3, [r7, #16]
 8011bcc:	689b      	ldr	r3, [r3, #8]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d00d      	beq.n	8011bee <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8011bd2:	2100      	movs	r1, #0
 8011bd4:	6878      	ldr	r0, [r7, #4]
 8011bd6:	f7fd ffe9 	bl	800fbac <inc_lock>
 8011bda:	4602      	mov	r2, r0
 8011bdc:	693b      	ldr	r3, [r7, #16]
 8011bde:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8011be0:	693b      	ldr	r3, [r7, #16]
 8011be2:	691b      	ldr	r3, [r3, #16]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d105      	bne.n	8011bf4 <f_opendir+0xc6>
 8011be8:	2312      	movs	r3, #18
 8011bea:	75fb      	strb	r3, [r7, #23]
 8011bec:	e002      	b.n	8011bf4 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8011bee:	693b      	ldr	r3, [r7, #16]
 8011bf0:	2200      	movs	r2, #0
 8011bf2:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8011bf4:	7dfb      	ldrb	r3, [r7, #23]
 8011bf6:	2b04      	cmp	r3, #4
 8011bf8:	d101      	bne.n	8011bfe <f_opendir+0xd0>
 8011bfa:	2305      	movs	r3, #5
 8011bfc:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8011bfe:	7dfb      	ldrb	r3, [r7, #23]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d002      	beq.n	8011c0a <f_opendir+0xdc>
 8011c04:	693b      	ldr	r3, [r7, #16]
 8011c06:	2200      	movs	r2, #0
 8011c08:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	3718      	adds	r7, #24
 8011c10:	46bd      	mov	sp, r7
 8011c12:	bd80      	pop	{r7, pc}

08011c14 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b084      	sub	sp, #16
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
 8011c1c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	f107 0208 	add.w	r2, r7, #8
 8011c24:	4611      	mov	r1, r2
 8011c26:	4618      	mov	r0, r3
 8011c28:	f7ff fb60 	bl	80112ec <validate>
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011c30:	7bfb      	ldrb	r3, [r7, #15]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d126      	bne.n	8011c84 <f_readdir+0x70>
		if (!fno) {
 8011c36:	683b      	ldr	r3, [r7, #0]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d106      	bne.n	8011c4a <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8011c3c:	2100      	movs	r1, #0
 8011c3e:	6878      	ldr	r0, [r7, #4]
 8011c40:	f7fe fc5e 	bl	8010500 <dir_sdi>
 8011c44:	4603      	mov	r3, r0
 8011c46:	73fb      	strb	r3, [r7, #15]
 8011c48:	e01c      	b.n	8011c84 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8011c4a:	2100      	movs	r1, #0
 8011c4c:	6878      	ldr	r0, [r7, #4]
 8011c4e:	f7fe fe1d 	bl	801088c <dir_read>
 8011c52:	4603      	mov	r3, r0
 8011c54:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8011c56:	7bfb      	ldrb	r3, [r7, #15]
 8011c58:	2b04      	cmp	r3, #4
 8011c5a:	d101      	bne.n	8011c60 <f_readdir+0x4c>
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8011c60:	7bfb      	ldrb	r3, [r7, #15]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d10e      	bne.n	8011c84 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8011c66:	6839      	ldr	r1, [r7, #0]
 8011c68:	6878      	ldr	r0, [r7, #4]
 8011c6a:	f7fe fef3 	bl	8010a54 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8011c6e:	2100      	movs	r1, #0
 8011c70:	6878      	ldr	r0, [r7, #4]
 8011c72:	f7fe fcc0 	bl	80105f6 <dir_next>
 8011c76:	4603      	mov	r3, r0
 8011c78:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8011c7a:	7bfb      	ldrb	r3, [r7, #15]
 8011c7c:	2b04      	cmp	r3, #4
 8011c7e:	d101      	bne.n	8011c84 <f_readdir+0x70>
 8011c80:	2300      	movs	r3, #0
 8011c82:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8011c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c86:	4618      	mov	r0, r3
 8011c88:	3710      	adds	r7, #16
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	bd80      	pop	{r7, pc}
	...

08011c90 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011c90:	b480      	push	{r7}
 8011c92:	b087      	sub	sp, #28
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	60f8      	str	r0, [r7, #12]
 8011c98:	60b9      	str	r1, [r7, #8]
 8011c9a:	4613      	mov	r3, r2
 8011c9c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011c9e:	2301      	movs	r3, #1
 8011ca0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011ca6:	4b1f      	ldr	r3, [pc, #124]	; (8011d24 <FATFS_LinkDriverEx+0x94>)
 8011ca8:	7b9b      	ldrb	r3, [r3, #14]
 8011caa:	b2db      	uxtb	r3, r3
 8011cac:	2b01      	cmp	r3, #1
 8011cae:	d831      	bhi.n	8011d14 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011cb0:	4b1c      	ldr	r3, [pc, #112]	; (8011d24 <FATFS_LinkDriverEx+0x94>)
 8011cb2:	7b9b      	ldrb	r3, [r3, #14]
 8011cb4:	b2db      	uxtb	r3, r3
 8011cb6:	461a      	mov	r2, r3
 8011cb8:	4b1a      	ldr	r3, [pc, #104]	; (8011d24 <FATFS_LinkDriverEx+0x94>)
 8011cba:	2100      	movs	r1, #0
 8011cbc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011cbe:	4b19      	ldr	r3, [pc, #100]	; (8011d24 <FATFS_LinkDriverEx+0x94>)
 8011cc0:	7b9b      	ldrb	r3, [r3, #14]
 8011cc2:	b2db      	uxtb	r3, r3
 8011cc4:	4a17      	ldr	r2, [pc, #92]	; (8011d24 <FATFS_LinkDriverEx+0x94>)
 8011cc6:	009b      	lsls	r3, r3, #2
 8011cc8:	4413      	add	r3, r2
 8011cca:	68fa      	ldr	r2, [r7, #12]
 8011ccc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011cce:	4b15      	ldr	r3, [pc, #84]	; (8011d24 <FATFS_LinkDriverEx+0x94>)
 8011cd0:	7b9b      	ldrb	r3, [r3, #14]
 8011cd2:	b2db      	uxtb	r3, r3
 8011cd4:	461a      	mov	r2, r3
 8011cd6:	4b13      	ldr	r3, [pc, #76]	; (8011d24 <FATFS_LinkDriverEx+0x94>)
 8011cd8:	4413      	add	r3, r2
 8011cda:	79fa      	ldrb	r2, [r7, #7]
 8011cdc:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 8011cde:	4b11      	ldr	r3, [pc, #68]	; (8011d24 <FATFS_LinkDriverEx+0x94>)
 8011ce0:	7b9b      	ldrb	r3, [r3, #14]
 8011ce2:	b2db      	uxtb	r3, r3
 8011ce4:	1c5a      	adds	r2, r3, #1
 8011ce6:	b2d1      	uxtb	r1, r2
 8011ce8:	4a0e      	ldr	r2, [pc, #56]	; (8011d24 <FATFS_LinkDriverEx+0x94>)
 8011cea:	7391      	strb	r1, [r2, #14]
 8011cec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011cee:	7dbb      	ldrb	r3, [r7, #22]
 8011cf0:	3330      	adds	r3, #48	; 0x30
 8011cf2:	b2da      	uxtb	r2, r3
 8011cf4:	68bb      	ldr	r3, [r7, #8]
 8011cf6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011cf8:	68bb      	ldr	r3, [r7, #8]
 8011cfa:	3301      	adds	r3, #1
 8011cfc:	223a      	movs	r2, #58	; 0x3a
 8011cfe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011d00:	68bb      	ldr	r3, [r7, #8]
 8011d02:	3302      	adds	r3, #2
 8011d04:	222f      	movs	r2, #47	; 0x2f
 8011d06:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011d08:	68bb      	ldr	r3, [r7, #8]
 8011d0a:	3303      	adds	r3, #3
 8011d0c:	2200      	movs	r2, #0
 8011d0e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011d10:	2300      	movs	r3, #0
 8011d12:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d16:	4618      	mov	r0, r3
 8011d18:	371c      	adds	r7, #28
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d20:	4770      	bx	lr
 8011d22:	bf00      	nop
 8011d24:	200002a8 	.word	0x200002a8

08011d28 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b082      	sub	sp, #8
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
 8011d30:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011d32:	2200      	movs	r2, #0
 8011d34:	6839      	ldr	r1, [r7, #0]
 8011d36:	6878      	ldr	r0, [r7, #4]
 8011d38:	f7ff ffaa 	bl	8011c90 <FATFS_LinkDriverEx>
 8011d3c:	4603      	mov	r3, r0
}
 8011d3e:	4618      	mov	r0, r3
 8011d40:	3708      	adds	r7, #8
 8011d42:	46bd      	mov	sp, r7
 8011d44:	bd80      	pop	{r7, pc}
	...

08011d48 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b082      	sub	sp, #8
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	4603      	mov	r3, r0
 8011d50:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011d52:	4b0b      	ldr	r3, [pc, #44]	; (8011d80 <SD_CheckStatus+0x38>)
 8011d54:	2201      	movs	r2, #1
 8011d56:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011d58:	f7f2 ffe8 	bl	8004d2c <BSP_SD_GetCardState>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d107      	bne.n	8011d72 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011d62:	4b07      	ldr	r3, [pc, #28]	; (8011d80 <SD_CheckStatus+0x38>)
 8011d64:	781b      	ldrb	r3, [r3, #0]
 8011d66:	b2db      	uxtb	r3, r3
 8011d68:	f023 0301 	bic.w	r3, r3, #1
 8011d6c:	b2da      	uxtb	r2, r3
 8011d6e:	4b04      	ldr	r3, [pc, #16]	; (8011d80 <SD_CheckStatus+0x38>)
 8011d70:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011d72:	4b03      	ldr	r3, [pc, #12]	; (8011d80 <SD_CheckStatus+0x38>)
 8011d74:	781b      	ldrb	r3, [r3, #0]
 8011d76:	b2db      	uxtb	r3, r3
}
 8011d78:	4618      	mov	r0, r3
 8011d7a:	3708      	adds	r7, #8
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bd80      	pop	{r7, pc}
 8011d80:	200000c0 	.word	0x200000c0

08011d84 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b082      	sub	sp, #8
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011d8e:	4b0b      	ldr	r3, [pc, #44]	; (8011dbc <SD_initialize+0x38>)
 8011d90:	2201      	movs	r2, #1
 8011d92:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8011d94:	f7f2 fe10 	bl	80049b8 <BSP_SD_Init>
 8011d98:	4603      	mov	r3, r0
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d107      	bne.n	8011dae <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8011d9e:	79fb      	ldrb	r3, [r7, #7]
 8011da0:	4618      	mov	r0, r3
 8011da2:	f7ff ffd1 	bl	8011d48 <SD_CheckStatus>
 8011da6:	4603      	mov	r3, r0
 8011da8:	461a      	mov	r2, r3
 8011daa:	4b04      	ldr	r3, [pc, #16]	; (8011dbc <SD_initialize+0x38>)
 8011dac:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8011dae:	4b03      	ldr	r3, [pc, #12]	; (8011dbc <SD_initialize+0x38>)
 8011db0:	781b      	ldrb	r3, [r3, #0]
 8011db2:	b2db      	uxtb	r3, r3
}
 8011db4:	4618      	mov	r0, r3
 8011db6:	3708      	adds	r7, #8
 8011db8:	46bd      	mov	sp, r7
 8011dba:	bd80      	pop	{r7, pc}
 8011dbc:	200000c0 	.word	0x200000c0

08011dc0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b082      	sub	sp, #8
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011dca:	79fb      	ldrb	r3, [r7, #7]
 8011dcc:	4618      	mov	r0, r3
 8011dce:	f7ff ffbb 	bl	8011d48 <SD_CheckStatus>
 8011dd2:	4603      	mov	r3, r0
}
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	3708      	adds	r7, #8
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	bd80      	pop	{r7, pc}

08011ddc <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b086      	sub	sp, #24
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	60b9      	str	r1, [r7, #8]
 8011de4:	607a      	str	r2, [r7, #4]
 8011de6:	603b      	str	r3, [r7, #0]
 8011de8:	4603      	mov	r3, r0
 8011dea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011dec:	2301      	movs	r3, #1
 8011dee:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8011df0:	f04f 33ff 	mov.w	r3, #4294967295
 8011df4:	683a      	ldr	r2, [r7, #0]
 8011df6:	6879      	ldr	r1, [r7, #4]
 8011df8:	68b8      	ldr	r0, [r7, #8]
 8011dfa:	f7f2 fe41 	bl	8004a80 <BSP_SD_ReadBlocks>
 8011dfe:	4603      	mov	r3, r0
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d107      	bne.n	8011e14 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8011e04:	bf00      	nop
 8011e06:	f7f2 ff91 	bl	8004d2c <BSP_SD_GetCardState>
 8011e0a:	4603      	mov	r3, r0
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d1fa      	bne.n	8011e06 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8011e10:	2300      	movs	r3, #0
 8011e12:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8011e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e16:	4618      	mov	r0, r3
 8011e18:	3718      	adds	r7, #24
 8011e1a:	46bd      	mov	sp, r7
 8011e1c:	bd80      	pop	{r7, pc}

08011e1e <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011e1e:	b580      	push	{r7, lr}
 8011e20:	b086      	sub	sp, #24
 8011e22:	af00      	add	r7, sp, #0
 8011e24:	60b9      	str	r1, [r7, #8]
 8011e26:	607a      	str	r2, [r7, #4]
 8011e28:	603b      	str	r3, [r7, #0]
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011e2e:	2301      	movs	r3, #1
 8011e30:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8011e32:	f04f 33ff 	mov.w	r3, #4294967295
 8011e36:	683a      	ldr	r2, [r7, #0]
 8011e38:	6879      	ldr	r1, [r7, #4]
 8011e3a:	68b8      	ldr	r0, [r7, #8]
 8011e3c:	f7f2 fe3c 	bl	8004ab8 <BSP_SD_WriteBlocks>
 8011e40:	4603      	mov	r3, r0
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d107      	bne.n	8011e56 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8011e46:	bf00      	nop
 8011e48:	f7f2 ff70 	bl	8004d2c <BSP_SD_GetCardState>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d1fa      	bne.n	8011e48 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8011e52:	2300      	movs	r3, #0
 8011e54:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8011e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e58:	4618      	mov	r0, r3
 8011e5a:	3718      	adds	r7, #24
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bd80      	pop	{r7, pc}

08011e60 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b08c      	sub	sp, #48	; 0x30
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	4603      	mov	r3, r0
 8011e68:	603a      	str	r2, [r7, #0]
 8011e6a:	71fb      	strb	r3, [r7, #7]
 8011e6c:	460b      	mov	r3, r1
 8011e6e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011e70:	2301      	movs	r3, #1
 8011e72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011e76:	4b25      	ldr	r3, [pc, #148]	; (8011f0c <SD_ioctl+0xac>)
 8011e78:	781b      	ldrb	r3, [r3, #0]
 8011e7a:	b2db      	uxtb	r3, r3
 8011e7c:	f003 0301 	and.w	r3, r3, #1
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d001      	beq.n	8011e88 <SD_ioctl+0x28>
 8011e84:	2303      	movs	r3, #3
 8011e86:	e03c      	b.n	8011f02 <SD_ioctl+0xa2>

  switch (cmd)
 8011e88:	79bb      	ldrb	r3, [r7, #6]
 8011e8a:	2b03      	cmp	r3, #3
 8011e8c:	d834      	bhi.n	8011ef8 <SD_ioctl+0x98>
 8011e8e:	a201      	add	r2, pc, #4	; (adr r2, 8011e94 <SD_ioctl+0x34>)
 8011e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e94:	08011ea5 	.word	0x08011ea5
 8011e98:	08011ead 	.word	0x08011ead
 8011e9c:	08011ec5 	.word	0x08011ec5
 8011ea0:	08011edf 	.word	0x08011edf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011eaa:	e028      	b.n	8011efe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011eac:	f107 030c 	add.w	r3, r7, #12
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	f7f2 ff4b 	bl	8004d4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011eb8:	683b      	ldr	r3, [r7, #0]
 8011eba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011ec2:	e01c      	b.n	8011efe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011ec4:	f107 030c 	add.w	r3, r7, #12
 8011ec8:	4618      	mov	r0, r3
 8011eca:	f7f2 ff3f 	bl	8004d4c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed0:	b29a      	uxth	r2, r3
 8011ed2:	683b      	ldr	r3, [r7, #0]
 8011ed4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011edc:	e00f      	b.n	8011efe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011ede:	f107 030c 	add.w	r3, r7, #12
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f7f2 ff32 	bl	8004d4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eea:	0a5a      	lsrs	r2, r3, #9
 8011eec:	683b      	ldr	r3, [r7, #0]
 8011eee:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011ef6:	e002      	b.n	8011efe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011ef8:	2304      	movs	r3, #4
 8011efa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8011efe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011f02:	4618      	mov	r0, r3
 8011f04:	3730      	adds	r7, #48	; 0x30
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd80      	pop	{r7, pc}
 8011f0a:	bf00      	nop
 8011f0c:	200000c0 	.word	0x200000c0

08011f10 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011f10:	b480      	push	{r7}
 8011f12:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8011f14:	bf00      	nop
 8011f16:	46bd      	mov	sp, r7
 8011f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1c:	4770      	bx	lr
	...

08011f20 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011f20:	b480      	push	{r7}
 8011f22:	b085      	sub	sp, #20
 8011f24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011f26:	f3ef 8305 	mrs	r3, IPSR
 8011f2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8011f2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d10f      	bne.n	8011f52 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f32:	f3ef 8310 	mrs	r3, PRIMASK
 8011f36:	607b      	str	r3, [r7, #4]
  return(result);
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d105      	bne.n	8011f4a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011f3e:	f3ef 8311 	mrs	r3, BASEPRI
 8011f42:	603b      	str	r3, [r7, #0]
  return(result);
 8011f44:	683b      	ldr	r3, [r7, #0]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d007      	beq.n	8011f5a <osKernelInitialize+0x3a>
 8011f4a:	4b0e      	ldr	r3, [pc, #56]	; (8011f84 <osKernelInitialize+0x64>)
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	2b02      	cmp	r3, #2
 8011f50:	d103      	bne.n	8011f5a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8011f52:	f06f 0305 	mvn.w	r3, #5
 8011f56:	60fb      	str	r3, [r7, #12]
 8011f58:	e00c      	b.n	8011f74 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011f5a:	4b0a      	ldr	r3, [pc, #40]	; (8011f84 <osKernelInitialize+0x64>)
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d105      	bne.n	8011f6e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011f62:	4b08      	ldr	r3, [pc, #32]	; (8011f84 <osKernelInitialize+0x64>)
 8011f64:	2201      	movs	r2, #1
 8011f66:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011f68:	2300      	movs	r3, #0
 8011f6a:	60fb      	str	r3, [r7, #12]
 8011f6c:	e002      	b.n	8011f74 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8011f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8011f72:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8011f74:	68fb      	ldr	r3, [r7, #12]
}
 8011f76:	4618      	mov	r0, r3
 8011f78:	3714      	adds	r7, #20
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f80:	4770      	bx	lr
 8011f82:	bf00      	nop
 8011f84:	200002b8 	.word	0x200002b8

08011f88 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b084      	sub	sp, #16
 8011f8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011f8e:	f3ef 8305 	mrs	r3, IPSR
 8011f92:	60bb      	str	r3, [r7, #8]
  return(result);
 8011f94:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d10f      	bne.n	8011fba <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8011f9e:	607b      	str	r3, [r7, #4]
  return(result);
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d105      	bne.n	8011fb2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011fa6:	f3ef 8311 	mrs	r3, BASEPRI
 8011faa:	603b      	str	r3, [r7, #0]
  return(result);
 8011fac:	683b      	ldr	r3, [r7, #0]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d007      	beq.n	8011fc2 <osKernelStart+0x3a>
 8011fb2:	4b0f      	ldr	r3, [pc, #60]	; (8011ff0 <osKernelStart+0x68>)
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	2b02      	cmp	r3, #2
 8011fb8:	d103      	bne.n	8011fc2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8011fba:	f06f 0305 	mvn.w	r3, #5
 8011fbe:	60fb      	str	r3, [r7, #12]
 8011fc0:	e010      	b.n	8011fe4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8011fc2:	4b0b      	ldr	r3, [pc, #44]	; (8011ff0 <osKernelStart+0x68>)
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	2b01      	cmp	r3, #1
 8011fc8:	d109      	bne.n	8011fde <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8011fca:	f7ff ffa1 	bl	8011f10 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011fce:	4b08      	ldr	r3, [pc, #32]	; (8011ff0 <osKernelStart+0x68>)
 8011fd0:	2202      	movs	r2, #2
 8011fd2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8011fd4:	f001 fa9a 	bl	801350c <vTaskStartScheduler>
      stat = osOK;
 8011fd8:	2300      	movs	r3, #0
 8011fda:	60fb      	str	r3, [r7, #12]
 8011fdc:	e002      	b.n	8011fe4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8011fde:	f04f 33ff 	mov.w	r3, #4294967295
 8011fe2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8011fe4:	68fb      	ldr	r3, [r7, #12]
}
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	3710      	adds	r7, #16
 8011fea:	46bd      	mov	sp, r7
 8011fec:	bd80      	pop	{r7, pc}
 8011fee:	bf00      	nop
 8011ff0:	200002b8 	.word	0x200002b8

08011ff4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b090      	sub	sp, #64	; 0x40
 8011ff8:	af04      	add	r7, sp, #16
 8011ffa:	60f8      	str	r0, [r7, #12]
 8011ffc:	60b9      	str	r1, [r7, #8]
 8011ffe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012000:	2300      	movs	r3, #0
 8012002:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012004:	f3ef 8305 	mrs	r3, IPSR
 8012008:	61fb      	str	r3, [r7, #28]
  return(result);
 801200a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 801200c:	2b00      	cmp	r3, #0
 801200e:	f040 808f 	bne.w	8012130 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012012:	f3ef 8310 	mrs	r3, PRIMASK
 8012016:	61bb      	str	r3, [r7, #24]
  return(result);
 8012018:	69bb      	ldr	r3, [r7, #24]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d105      	bne.n	801202a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801201e:	f3ef 8311 	mrs	r3, BASEPRI
 8012022:	617b      	str	r3, [r7, #20]
  return(result);
 8012024:	697b      	ldr	r3, [r7, #20]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d003      	beq.n	8012032 <osThreadNew+0x3e>
 801202a:	4b44      	ldr	r3, [pc, #272]	; (801213c <osThreadNew+0x148>)
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	2b02      	cmp	r3, #2
 8012030:	d07e      	beq.n	8012130 <osThreadNew+0x13c>
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d07b      	beq.n	8012130 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8012038:	2380      	movs	r3, #128	; 0x80
 801203a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 801203c:	2318      	movs	r3, #24
 801203e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8012040:	2300      	movs	r3, #0
 8012042:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8012044:	f04f 33ff 	mov.w	r3, #4294967295
 8012048:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d045      	beq.n	80120dc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d002      	beq.n	801205e <osThreadNew+0x6a>
        name = attr->name;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	699b      	ldr	r3, [r3, #24]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d002      	beq.n	801206c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	699b      	ldr	r3, [r3, #24]
 801206a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801206e:	2b00      	cmp	r3, #0
 8012070:	d008      	beq.n	8012084 <osThreadNew+0x90>
 8012072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012074:	2b38      	cmp	r3, #56	; 0x38
 8012076:	d805      	bhi.n	8012084 <osThreadNew+0x90>
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	685b      	ldr	r3, [r3, #4]
 801207c:	f003 0301 	and.w	r3, r3, #1
 8012080:	2b00      	cmp	r3, #0
 8012082:	d001      	beq.n	8012088 <osThreadNew+0x94>
        return (NULL);
 8012084:	2300      	movs	r3, #0
 8012086:	e054      	b.n	8012132 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	695b      	ldr	r3, [r3, #20]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d003      	beq.n	8012098 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	695b      	ldr	r3, [r3, #20]
 8012094:	089b      	lsrs	r3, r3, #2
 8012096:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	689b      	ldr	r3, [r3, #8]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d00e      	beq.n	80120be <osThreadNew+0xca>
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	68db      	ldr	r3, [r3, #12]
 80120a4:	2b5b      	cmp	r3, #91	; 0x5b
 80120a6:	d90a      	bls.n	80120be <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d006      	beq.n	80120be <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	695b      	ldr	r3, [r3, #20]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d002      	beq.n	80120be <osThreadNew+0xca>
        mem = 1;
 80120b8:	2301      	movs	r3, #1
 80120ba:	623b      	str	r3, [r7, #32]
 80120bc:	e010      	b.n	80120e0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	689b      	ldr	r3, [r3, #8]
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d10c      	bne.n	80120e0 <osThreadNew+0xec>
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	68db      	ldr	r3, [r3, #12]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d108      	bne.n	80120e0 <osThreadNew+0xec>
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	691b      	ldr	r3, [r3, #16]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d104      	bne.n	80120e0 <osThreadNew+0xec>
          mem = 0;
 80120d6:	2300      	movs	r3, #0
 80120d8:	623b      	str	r3, [r7, #32]
 80120da:	e001      	b.n	80120e0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80120dc:	2300      	movs	r3, #0
 80120de:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80120e0:	6a3b      	ldr	r3, [r7, #32]
 80120e2:	2b01      	cmp	r3, #1
 80120e4:	d110      	bne.n	8012108 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80120ea:	687a      	ldr	r2, [r7, #4]
 80120ec:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80120ee:	9202      	str	r2, [sp, #8]
 80120f0:	9301      	str	r3, [sp, #4]
 80120f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120f4:	9300      	str	r3, [sp, #0]
 80120f6:	68bb      	ldr	r3, [r7, #8]
 80120f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80120fc:	68f8      	ldr	r0, [r7, #12]
 80120fe:	f001 f833 	bl	8013168 <xTaskCreateStatic>
 8012102:	4603      	mov	r3, r0
 8012104:	613b      	str	r3, [r7, #16]
 8012106:	e013      	b.n	8012130 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8012108:	6a3b      	ldr	r3, [r7, #32]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d110      	bne.n	8012130 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801210e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012110:	b29a      	uxth	r2, r3
 8012112:	f107 0310 	add.w	r3, r7, #16
 8012116:	9301      	str	r3, [sp, #4]
 8012118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801211a:	9300      	str	r3, [sp, #0]
 801211c:	68bb      	ldr	r3, [r7, #8]
 801211e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012120:	68f8      	ldr	r0, [r7, #12]
 8012122:	f001 f87b 	bl	801321c <xTaskCreate>
 8012126:	4603      	mov	r3, r0
 8012128:	2b01      	cmp	r3, #1
 801212a:	d001      	beq.n	8012130 <osThreadNew+0x13c>
          hTask = NULL;
 801212c:	2300      	movs	r3, #0
 801212e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012130:	693b      	ldr	r3, [r7, #16]
}
 8012132:	4618      	mov	r0, r3
 8012134:	3730      	adds	r7, #48	; 0x30
 8012136:	46bd      	mov	sp, r7
 8012138:	bd80      	pop	{r7, pc}
 801213a:	bf00      	nop
 801213c:	200002b8 	.word	0x200002b8

08012140 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8012140:	b580      	push	{r7, lr}
 8012142:	b086      	sub	sp, #24
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012148:	f3ef 8305 	mrs	r3, IPSR
 801214c:	613b      	str	r3, [r7, #16]
  return(result);
 801214e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012150:	2b00      	cmp	r3, #0
 8012152:	d10f      	bne.n	8012174 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012154:	f3ef 8310 	mrs	r3, PRIMASK
 8012158:	60fb      	str	r3, [r7, #12]
  return(result);
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d105      	bne.n	801216c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012160:	f3ef 8311 	mrs	r3, BASEPRI
 8012164:	60bb      	str	r3, [r7, #8]
  return(result);
 8012166:	68bb      	ldr	r3, [r7, #8]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d007      	beq.n	801217c <osDelay+0x3c>
 801216c:	4b0a      	ldr	r3, [pc, #40]	; (8012198 <osDelay+0x58>)
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	2b02      	cmp	r3, #2
 8012172:	d103      	bne.n	801217c <osDelay+0x3c>
    stat = osErrorISR;
 8012174:	f06f 0305 	mvn.w	r3, #5
 8012178:	617b      	str	r3, [r7, #20]
 801217a:	e007      	b.n	801218c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 801217c:	2300      	movs	r3, #0
 801217e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d002      	beq.n	801218c <osDelay+0x4c>
      vTaskDelay(ticks);
 8012186:	6878      	ldr	r0, [r7, #4]
 8012188:	f001 f98c 	bl	80134a4 <vTaskDelay>
    }
  }

  return (stat);
 801218c:	697b      	ldr	r3, [r7, #20]
}
 801218e:	4618      	mov	r0, r3
 8012190:	3718      	adds	r7, #24
 8012192:	46bd      	mov	sp, r7
 8012194:	bd80      	pop	{r7, pc}
 8012196:	bf00      	nop
 8012198:	200002b8 	.word	0x200002b8

0801219c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801219c:	b580      	push	{r7, lr}
 801219e:	b08c      	sub	sp, #48	; 0x30
 80121a0:	af02      	add	r7, sp, #8
 80121a2:	60f8      	str	r0, [r7, #12]
 80121a4:	60b9      	str	r1, [r7, #8]
 80121a6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80121a8:	2300      	movs	r3, #0
 80121aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80121ac:	f3ef 8305 	mrs	r3, IPSR
 80121b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80121b2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d170      	bne.n	801229a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80121b8:	f3ef 8310 	mrs	r3, PRIMASK
 80121bc:	617b      	str	r3, [r7, #20]
  return(result);
 80121be:	697b      	ldr	r3, [r7, #20]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d105      	bne.n	80121d0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80121c4:	f3ef 8311 	mrs	r3, BASEPRI
 80121c8:	613b      	str	r3, [r7, #16]
  return(result);
 80121ca:	693b      	ldr	r3, [r7, #16]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d003      	beq.n	80121d8 <osMessageQueueNew+0x3c>
 80121d0:	4b34      	ldr	r3, [pc, #208]	; (80122a4 <osMessageQueueNew+0x108>)
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	2b02      	cmp	r3, #2
 80121d6:	d060      	beq.n	801229a <osMessageQueueNew+0xfe>
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d05d      	beq.n	801229a <osMessageQueueNew+0xfe>
 80121de:	68bb      	ldr	r3, [r7, #8]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d05a      	beq.n	801229a <osMessageQueueNew+0xfe>
    mem = -1;
 80121e4:	f04f 33ff 	mov.w	r3, #4294967295
 80121e8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d029      	beq.n	8012244 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	689b      	ldr	r3, [r3, #8]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d012      	beq.n	801221e <osMessageQueueNew+0x82>
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	68db      	ldr	r3, [r3, #12]
 80121fc:	2b4f      	cmp	r3, #79	; 0x4f
 80121fe:	d90e      	bls.n	801221e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012204:	2b00      	cmp	r3, #0
 8012206:	d00a      	beq.n	801221e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	695a      	ldr	r2, [r3, #20]
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	68b9      	ldr	r1, [r7, #8]
 8012210:	fb01 f303 	mul.w	r3, r1, r3
 8012214:	429a      	cmp	r2, r3
 8012216:	d302      	bcc.n	801221e <osMessageQueueNew+0x82>
        mem = 1;
 8012218:	2301      	movs	r3, #1
 801221a:	623b      	str	r3, [r7, #32]
 801221c:	e014      	b.n	8012248 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	689b      	ldr	r3, [r3, #8]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d110      	bne.n	8012248 <osMessageQueueNew+0xac>
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	68db      	ldr	r3, [r3, #12]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d10c      	bne.n	8012248 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012232:	2b00      	cmp	r3, #0
 8012234:	d108      	bne.n	8012248 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	695b      	ldr	r3, [r3, #20]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d104      	bne.n	8012248 <osMessageQueueNew+0xac>
          mem = 0;
 801223e:	2300      	movs	r3, #0
 8012240:	623b      	str	r3, [r7, #32]
 8012242:	e001      	b.n	8012248 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8012244:	2300      	movs	r3, #0
 8012246:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8012248:	6a3b      	ldr	r3, [r7, #32]
 801224a:	2b01      	cmp	r3, #1
 801224c:	d10c      	bne.n	8012268 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	691a      	ldr	r2, [r3, #16]
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	6899      	ldr	r1, [r3, #8]
 8012256:	2300      	movs	r3, #0
 8012258:	9300      	str	r3, [sp, #0]
 801225a:	460b      	mov	r3, r1
 801225c:	68b9      	ldr	r1, [r7, #8]
 801225e:	68f8      	ldr	r0, [r7, #12]
 8012260:	f000 fa58 	bl	8012714 <xQueueGenericCreateStatic>
 8012264:	6278      	str	r0, [r7, #36]	; 0x24
 8012266:	e008      	b.n	801227a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8012268:	6a3b      	ldr	r3, [r7, #32]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d105      	bne.n	801227a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 801226e:	2200      	movs	r2, #0
 8012270:	68b9      	ldr	r1, [r7, #8]
 8012272:	68f8      	ldr	r0, [r7, #12]
 8012274:	f000 fac1 	bl	80127fa <xQueueGenericCreate>
 8012278:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801227c:	2b00      	cmp	r3, #0
 801227e:	d00c      	beq.n	801229a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d003      	beq.n	801228e <osMessageQueueNew+0xf2>
        name = attr->name;
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	61fb      	str	r3, [r7, #28]
 801228c:	e001      	b.n	8012292 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 801228e:	2300      	movs	r3, #0
 8012290:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8012292:	69f9      	ldr	r1, [r7, #28]
 8012294:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012296:	f000 ff0b 	bl	80130b0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801229c:	4618      	mov	r0, r3
 801229e:	3728      	adds	r7, #40	; 0x28
 80122a0:	46bd      	mov	sp, r7
 80122a2:	bd80      	pop	{r7, pc}
 80122a4:	200002b8 	.word	0x200002b8

080122a8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b08a      	sub	sp, #40	; 0x28
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	60f8      	str	r0, [r7, #12]
 80122b0:	60b9      	str	r1, [r7, #8]
 80122b2:	603b      	str	r3, [r7, #0]
 80122b4:	4613      	mov	r3, r2
 80122b6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80122bc:	2300      	movs	r3, #0
 80122be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80122c0:	f3ef 8305 	mrs	r3, IPSR
 80122c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80122c6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d10f      	bne.n	80122ec <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80122cc:	f3ef 8310 	mrs	r3, PRIMASK
 80122d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80122d2:	69bb      	ldr	r3, [r7, #24]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d105      	bne.n	80122e4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80122d8:	f3ef 8311 	mrs	r3, BASEPRI
 80122dc:	617b      	str	r3, [r7, #20]
  return(result);
 80122de:	697b      	ldr	r3, [r7, #20]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d02c      	beq.n	801233e <osMessageQueuePut+0x96>
 80122e4:	4b28      	ldr	r3, [pc, #160]	; (8012388 <osMessageQueuePut+0xe0>)
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	2b02      	cmp	r3, #2
 80122ea:	d128      	bne.n	801233e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80122ec:	6a3b      	ldr	r3, [r7, #32]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d005      	beq.n	80122fe <osMessageQueuePut+0x56>
 80122f2:	68bb      	ldr	r3, [r7, #8]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d002      	beq.n	80122fe <osMessageQueuePut+0x56>
 80122f8:	683b      	ldr	r3, [r7, #0]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d003      	beq.n	8012306 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80122fe:	f06f 0303 	mvn.w	r3, #3
 8012302:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012304:	e039      	b.n	801237a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8012306:	2300      	movs	r3, #0
 8012308:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801230a:	f107 0210 	add.w	r2, r7, #16
 801230e:	2300      	movs	r3, #0
 8012310:	68b9      	ldr	r1, [r7, #8]
 8012312:	6a38      	ldr	r0, [r7, #32]
 8012314:	f000 fbce 	bl	8012ab4 <xQueueGenericSendFromISR>
 8012318:	4603      	mov	r3, r0
 801231a:	2b01      	cmp	r3, #1
 801231c:	d003      	beq.n	8012326 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 801231e:	f06f 0302 	mvn.w	r3, #2
 8012322:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012324:	e029      	b.n	801237a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8012326:	693b      	ldr	r3, [r7, #16]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d026      	beq.n	801237a <osMessageQueuePut+0xd2>
 801232c:	4b17      	ldr	r3, [pc, #92]	; (801238c <osMessageQueuePut+0xe4>)
 801232e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012332:	601a      	str	r2, [r3, #0]
 8012334:	f3bf 8f4f 	dsb	sy
 8012338:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801233c:	e01d      	b.n	801237a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801233e:	6a3b      	ldr	r3, [r7, #32]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d002      	beq.n	801234a <osMessageQueuePut+0xa2>
 8012344:	68bb      	ldr	r3, [r7, #8]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d103      	bne.n	8012352 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 801234a:	f06f 0303 	mvn.w	r3, #3
 801234e:	627b      	str	r3, [r7, #36]	; 0x24
 8012350:	e014      	b.n	801237c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012352:	2300      	movs	r3, #0
 8012354:	683a      	ldr	r2, [r7, #0]
 8012356:	68b9      	ldr	r1, [r7, #8]
 8012358:	6a38      	ldr	r0, [r7, #32]
 801235a:	f000 fab1 	bl	80128c0 <xQueueGenericSend>
 801235e:	4603      	mov	r3, r0
 8012360:	2b01      	cmp	r3, #1
 8012362:	d00b      	beq.n	801237c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8012364:	683b      	ldr	r3, [r7, #0]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d003      	beq.n	8012372 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 801236a:	f06f 0301 	mvn.w	r3, #1
 801236e:	627b      	str	r3, [r7, #36]	; 0x24
 8012370:	e004      	b.n	801237c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8012372:	f06f 0302 	mvn.w	r3, #2
 8012376:	627b      	str	r3, [r7, #36]	; 0x24
 8012378:	e000      	b.n	801237c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801237a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 801237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801237e:	4618      	mov	r0, r3
 8012380:	3728      	adds	r7, #40	; 0x28
 8012382:	46bd      	mov	sp, r7
 8012384:	bd80      	pop	{r7, pc}
 8012386:	bf00      	nop
 8012388:	200002b8 	.word	0x200002b8
 801238c:	e000ed04 	.word	0xe000ed04

08012390 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8012390:	b580      	push	{r7, lr}
 8012392:	b08a      	sub	sp, #40	; 0x28
 8012394:	af00      	add	r7, sp, #0
 8012396:	60f8      	str	r0, [r7, #12]
 8012398:	60b9      	str	r1, [r7, #8]
 801239a:	607a      	str	r2, [r7, #4]
 801239c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80123a2:	2300      	movs	r3, #0
 80123a4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80123a6:	f3ef 8305 	mrs	r3, IPSR
 80123aa:	61fb      	str	r3, [r7, #28]
  return(result);
 80123ac:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d10f      	bne.n	80123d2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80123b2:	f3ef 8310 	mrs	r3, PRIMASK
 80123b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80123b8:	69bb      	ldr	r3, [r7, #24]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d105      	bne.n	80123ca <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80123be:	f3ef 8311 	mrs	r3, BASEPRI
 80123c2:	617b      	str	r3, [r7, #20]
  return(result);
 80123c4:	697b      	ldr	r3, [r7, #20]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d02c      	beq.n	8012424 <osMessageQueueGet+0x94>
 80123ca:	4b28      	ldr	r3, [pc, #160]	; (801246c <osMessageQueueGet+0xdc>)
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	2b02      	cmp	r3, #2
 80123d0:	d128      	bne.n	8012424 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80123d2:	6a3b      	ldr	r3, [r7, #32]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d005      	beq.n	80123e4 <osMessageQueueGet+0x54>
 80123d8:	68bb      	ldr	r3, [r7, #8]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d002      	beq.n	80123e4 <osMessageQueueGet+0x54>
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d003      	beq.n	80123ec <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80123e4:	f06f 0303 	mvn.w	r3, #3
 80123e8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80123ea:	e038      	b.n	801245e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80123ec:	2300      	movs	r3, #0
 80123ee:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80123f0:	f107 0310 	add.w	r3, r7, #16
 80123f4:	461a      	mov	r2, r3
 80123f6:	68b9      	ldr	r1, [r7, #8]
 80123f8:	6a38      	ldr	r0, [r7, #32]
 80123fa:	f000 fccb 	bl	8012d94 <xQueueReceiveFromISR>
 80123fe:	4603      	mov	r3, r0
 8012400:	2b01      	cmp	r3, #1
 8012402:	d003      	beq.n	801240c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8012404:	f06f 0302 	mvn.w	r3, #2
 8012408:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801240a:	e028      	b.n	801245e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 801240c:	693b      	ldr	r3, [r7, #16]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d025      	beq.n	801245e <osMessageQueueGet+0xce>
 8012412:	4b17      	ldr	r3, [pc, #92]	; (8012470 <osMessageQueueGet+0xe0>)
 8012414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012418:	601a      	str	r2, [r3, #0]
 801241a:	f3bf 8f4f 	dsb	sy
 801241e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012422:	e01c      	b.n	801245e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012424:	6a3b      	ldr	r3, [r7, #32]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d002      	beq.n	8012430 <osMessageQueueGet+0xa0>
 801242a:	68bb      	ldr	r3, [r7, #8]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d103      	bne.n	8012438 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8012430:	f06f 0303 	mvn.w	r3, #3
 8012434:	627b      	str	r3, [r7, #36]	; 0x24
 8012436:	e013      	b.n	8012460 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012438:	683a      	ldr	r2, [r7, #0]
 801243a:	68b9      	ldr	r1, [r7, #8]
 801243c:	6a38      	ldr	r0, [r7, #32]
 801243e:	f000 fbcd 	bl	8012bdc <xQueueReceive>
 8012442:	4603      	mov	r3, r0
 8012444:	2b01      	cmp	r3, #1
 8012446:	d00b      	beq.n	8012460 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8012448:	683b      	ldr	r3, [r7, #0]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d003      	beq.n	8012456 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 801244e:	f06f 0301 	mvn.w	r3, #1
 8012452:	627b      	str	r3, [r7, #36]	; 0x24
 8012454:	e004      	b.n	8012460 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8012456:	f06f 0302 	mvn.w	r3, #2
 801245a:	627b      	str	r3, [r7, #36]	; 0x24
 801245c:	e000      	b.n	8012460 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801245e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8012460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012462:	4618      	mov	r0, r3
 8012464:	3728      	adds	r7, #40	; 0x28
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}
 801246a:	bf00      	nop
 801246c:	200002b8 	.word	0x200002b8
 8012470:	e000ed04 	.word	0xe000ed04

08012474 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012474:	b480      	push	{r7}
 8012476:	b085      	sub	sp, #20
 8012478:	af00      	add	r7, sp, #0
 801247a:	60f8      	str	r0, [r7, #12]
 801247c:	60b9      	str	r1, [r7, #8]
 801247e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	4a07      	ldr	r2, [pc, #28]	; (80124a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8012484:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012486:	68bb      	ldr	r3, [r7, #8]
 8012488:	4a06      	ldr	r2, [pc, #24]	; (80124a4 <vApplicationGetIdleTaskMemory+0x30>)
 801248a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	2280      	movs	r2, #128	; 0x80
 8012490:	601a      	str	r2, [r3, #0]
}
 8012492:	bf00      	nop
 8012494:	3714      	adds	r7, #20
 8012496:	46bd      	mov	sp, r7
 8012498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249c:	4770      	bx	lr
 801249e:	bf00      	nop
 80124a0:	200002bc 	.word	0x200002bc
 80124a4:	20000318 	.word	0x20000318

080124a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80124a8:	b480      	push	{r7}
 80124aa:	b085      	sub	sp, #20
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	60f8      	str	r0, [r7, #12]
 80124b0:	60b9      	str	r1, [r7, #8]
 80124b2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	4a07      	ldr	r2, [pc, #28]	; (80124d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80124b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80124ba:	68bb      	ldr	r3, [r7, #8]
 80124bc:	4a06      	ldr	r2, [pc, #24]	; (80124d8 <vApplicationGetTimerTaskMemory+0x30>)
 80124be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80124c6:	601a      	str	r2, [r3, #0]
}
 80124c8:	bf00      	nop
 80124ca:	3714      	adds	r7, #20
 80124cc:	46bd      	mov	sp, r7
 80124ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d2:	4770      	bx	lr
 80124d4:	20000518 	.word	0x20000518
 80124d8:	20000574 	.word	0x20000574

080124dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80124dc:	b480      	push	{r7}
 80124de:	b083      	sub	sp, #12
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	f103 0208 	add.w	r2, r3, #8
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	f04f 32ff 	mov.w	r2, #4294967295
 80124f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	f103 0208 	add.w	r2, r3, #8
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	f103 0208 	add.w	r2, r3, #8
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	2200      	movs	r2, #0
 801250e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012510:	bf00      	nop
 8012512:	370c      	adds	r7, #12
 8012514:	46bd      	mov	sp, r7
 8012516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251a:	4770      	bx	lr

0801251c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801251c:	b480      	push	{r7}
 801251e:	b083      	sub	sp, #12
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2200      	movs	r2, #0
 8012528:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801252a:	bf00      	nop
 801252c:	370c      	adds	r7, #12
 801252e:	46bd      	mov	sp, r7
 8012530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012534:	4770      	bx	lr

08012536 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012536:	b480      	push	{r7}
 8012538:	b085      	sub	sp, #20
 801253a:	af00      	add	r7, sp, #0
 801253c:	6078      	str	r0, [r7, #4]
 801253e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	685b      	ldr	r3, [r3, #4]
 8012544:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	68fa      	ldr	r2, [r7, #12]
 801254a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	689a      	ldr	r2, [r3, #8]
 8012550:	683b      	ldr	r3, [r7, #0]
 8012552:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	689b      	ldr	r3, [r3, #8]
 8012558:	683a      	ldr	r2, [r7, #0]
 801255a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	683a      	ldr	r2, [r7, #0]
 8012560:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012562:	683b      	ldr	r3, [r7, #0]
 8012564:	687a      	ldr	r2, [r7, #4]
 8012566:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	1c5a      	adds	r2, r3, #1
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	601a      	str	r2, [r3, #0]
}
 8012572:	bf00      	nop
 8012574:	3714      	adds	r7, #20
 8012576:	46bd      	mov	sp, r7
 8012578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801257c:	4770      	bx	lr

0801257e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801257e:	b480      	push	{r7}
 8012580:	b085      	sub	sp, #20
 8012582:	af00      	add	r7, sp, #0
 8012584:	6078      	str	r0, [r7, #4]
 8012586:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801258e:	68bb      	ldr	r3, [r7, #8]
 8012590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012594:	d103      	bne.n	801259e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	691b      	ldr	r3, [r3, #16]
 801259a:	60fb      	str	r3, [r7, #12]
 801259c:	e00c      	b.n	80125b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	3308      	adds	r3, #8
 80125a2:	60fb      	str	r3, [r7, #12]
 80125a4:	e002      	b.n	80125ac <vListInsert+0x2e>
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	685b      	ldr	r3, [r3, #4]
 80125aa:	60fb      	str	r3, [r7, #12]
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	685b      	ldr	r3, [r3, #4]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	68ba      	ldr	r2, [r7, #8]
 80125b4:	429a      	cmp	r2, r3
 80125b6:	d2f6      	bcs.n	80125a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	685a      	ldr	r2, [r3, #4]
 80125bc:	683b      	ldr	r3, [r7, #0]
 80125be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80125c0:	683b      	ldr	r3, [r7, #0]
 80125c2:	685b      	ldr	r3, [r3, #4]
 80125c4:	683a      	ldr	r2, [r7, #0]
 80125c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80125c8:	683b      	ldr	r3, [r7, #0]
 80125ca:	68fa      	ldr	r2, [r7, #12]
 80125cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	683a      	ldr	r2, [r7, #0]
 80125d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80125d4:	683b      	ldr	r3, [r7, #0]
 80125d6:	687a      	ldr	r2, [r7, #4]
 80125d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	1c5a      	adds	r2, r3, #1
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	601a      	str	r2, [r3, #0]
}
 80125e4:	bf00      	nop
 80125e6:	3714      	adds	r7, #20
 80125e8:	46bd      	mov	sp, r7
 80125ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ee:	4770      	bx	lr

080125f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80125f0:	b480      	push	{r7}
 80125f2:	b085      	sub	sp, #20
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	691b      	ldr	r3, [r3, #16]
 80125fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	685b      	ldr	r3, [r3, #4]
 8012602:	687a      	ldr	r2, [r7, #4]
 8012604:	6892      	ldr	r2, [r2, #8]
 8012606:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	689b      	ldr	r3, [r3, #8]
 801260c:	687a      	ldr	r2, [r7, #4]
 801260e:	6852      	ldr	r2, [r2, #4]
 8012610:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	685b      	ldr	r3, [r3, #4]
 8012616:	687a      	ldr	r2, [r7, #4]
 8012618:	429a      	cmp	r2, r3
 801261a:	d103      	bne.n	8012624 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	689a      	ldr	r2, [r3, #8]
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	2200      	movs	r2, #0
 8012628:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	1e5a      	subs	r2, r3, #1
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	681b      	ldr	r3, [r3, #0]
}
 8012638:	4618      	mov	r0, r3
 801263a:	3714      	adds	r7, #20
 801263c:	46bd      	mov	sp, r7
 801263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012642:	4770      	bx	lr

08012644 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012644:	b580      	push	{r7, lr}
 8012646:	b084      	sub	sp, #16
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
 801264c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d109      	bne.n	801266c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012658:	f04f 0350 	mov.w	r3, #80	; 0x50
 801265c:	f383 8811 	msr	BASEPRI, r3
 8012660:	f3bf 8f6f 	isb	sy
 8012664:	f3bf 8f4f 	dsb	sy
 8012668:	60bb      	str	r3, [r7, #8]
 801266a:	e7fe      	b.n	801266a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 801266c:	f002 f8ce 	bl	801480c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	681a      	ldr	r2, [r3, #0]
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012678:	68f9      	ldr	r1, [r7, #12]
 801267a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801267c:	fb01 f303 	mul.w	r3, r1, r3
 8012680:	441a      	add	r2, r3
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	2200      	movs	r2, #0
 801268a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	681a      	ldr	r2, [r3, #0]
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	681a      	ldr	r2, [r3, #0]
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801269c:	3b01      	subs	r3, #1
 801269e:	68f9      	ldr	r1, [r7, #12]
 80126a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80126a2:	fb01 f303 	mul.w	r3, r1, r3
 80126a6:	441a      	add	r2, r3
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	22ff      	movs	r2, #255	; 0xff
 80126b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	22ff      	movs	r2, #255	; 0xff
 80126b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80126bc:	683b      	ldr	r3, [r7, #0]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d114      	bne.n	80126ec <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	691b      	ldr	r3, [r3, #16]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d01a      	beq.n	8012700 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	3310      	adds	r3, #16
 80126ce:	4618      	mov	r0, r3
 80126d0:	f001 f99c 	bl	8013a0c <xTaskRemoveFromEventList>
 80126d4:	4603      	mov	r3, r0
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d012      	beq.n	8012700 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80126da:	4b0d      	ldr	r3, [pc, #52]	; (8012710 <xQueueGenericReset+0xcc>)
 80126dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80126e0:	601a      	str	r2, [r3, #0]
 80126e2:	f3bf 8f4f 	dsb	sy
 80126e6:	f3bf 8f6f 	isb	sy
 80126ea:	e009      	b.n	8012700 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	3310      	adds	r3, #16
 80126f0:	4618      	mov	r0, r3
 80126f2:	f7ff fef3 	bl	80124dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	3324      	adds	r3, #36	; 0x24
 80126fa:	4618      	mov	r0, r3
 80126fc:	f7ff feee 	bl	80124dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012700:	f002 f8b2 	bl	8014868 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012704:	2301      	movs	r3, #1
}
 8012706:	4618      	mov	r0, r3
 8012708:	3710      	adds	r7, #16
 801270a:	46bd      	mov	sp, r7
 801270c:	bd80      	pop	{r7, pc}
 801270e:	bf00      	nop
 8012710:	e000ed04 	.word	0xe000ed04

08012714 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012714:	b580      	push	{r7, lr}
 8012716:	b08e      	sub	sp, #56	; 0x38
 8012718:	af02      	add	r7, sp, #8
 801271a:	60f8      	str	r0, [r7, #12]
 801271c:	60b9      	str	r1, [r7, #8]
 801271e:	607a      	str	r2, [r7, #4]
 8012720:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d109      	bne.n	801273c <xQueueGenericCreateStatic+0x28>
 8012728:	f04f 0350 	mov.w	r3, #80	; 0x50
 801272c:	f383 8811 	msr	BASEPRI, r3
 8012730:	f3bf 8f6f 	isb	sy
 8012734:	f3bf 8f4f 	dsb	sy
 8012738:	62bb      	str	r3, [r7, #40]	; 0x28
 801273a:	e7fe      	b.n	801273a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801273c:	683b      	ldr	r3, [r7, #0]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d109      	bne.n	8012756 <xQueueGenericCreateStatic+0x42>
 8012742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012746:	f383 8811 	msr	BASEPRI, r3
 801274a:	f3bf 8f6f 	isb	sy
 801274e:	f3bf 8f4f 	dsb	sy
 8012752:	627b      	str	r3, [r7, #36]	; 0x24
 8012754:	e7fe      	b.n	8012754 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d002      	beq.n	8012762 <xQueueGenericCreateStatic+0x4e>
 801275c:	68bb      	ldr	r3, [r7, #8]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d001      	beq.n	8012766 <xQueueGenericCreateStatic+0x52>
 8012762:	2301      	movs	r3, #1
 8012764:	e000      	b.n	8012768 <xQueueGenericCreateStatic+0x54>
 8012766:	2300      	movs	r3, #0
 8012768:	2b00      	cmp	r3, #0
 801276a:	d109      	bne.n	8012780 <xQueueGenericCreateStatic+0x6c>
 801276c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012770:	f383 8811 	msr	BASEPRI, r3
 8012774:	f3bf 8f6f 	isb	sy
 8012778:	f3bf 8f4f 	dsb	sy
 801277c:	623b      	str	r3, [r7, #32]
 801277e:	e7fe      	b.n	801277e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d102      	bne.n	801278c <xQueueGenericCreateStatic+0x78>
 8012786:	68bb      	ldr	r3, [r7, #8]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d101      	bne.n	8012790 <xQueueGenericCreateStatic+0x7c>
 801278c:	2301      	movs	r3, #1
 801278e:	e000      	b.n	8012792 <xQueueGenericCreateStatic+0x7e>
 8012790:	2300      	movs	r3, #0
 8012792:	2b00      	cmp	r3, #0
 8012794:	d109      	bne.n	80127aa <xQueueGenericCreateStatic+0x96>
 8012796:	f04f 0350 	mov.w	r3, #80	; 0x50
 801279a:	f383 8811 	msr	BASEPRI, r3
 801279e:	f3bf 8f6f 	isb	sy
 80127a2:	f3bf 8f4f 	dsb	sy
 80127a6:	61fb      	str	r3, [r7, #28]
 80127a8:	e7fe      	b.n	80127a8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80127aa:	2350      	movs	r3, #80	; 0x50
 80127ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80127ae:	697b      	ldr	r3, [r7, #20]
 80127b0:	2b50      	cmp	r3, #80	; 0x50
 80127b2:	d009      	beq.n	80127c8 <xQueueGenericCreateStatic+0xb4>
 80127b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127b8:	f383 8811 	msr	BASEPRI, r3
 80127bc:	f3bf 8f6f 	isb	sy
 80127c0:	f3bf 8f4f 	dsb	sy
 80127c4:	61bb      	str	r3, [r7, #24]
 80127c6:	e7fe      	b.n	80127c6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80127c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80127ca:	683b      	ldr	r3, [r7, #0]
 80127cc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80127ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d00d      	beq.n	80127f0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80127d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127d6:	2201      	movs	r2, #1
 80127d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80127dc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80127e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127e2:	9300      	str	r3, [sp, #0]
 80127e4:	4613      	mov	r3, r2
 80127e6:	687a      	ldr	r2, [r7, #4]
 80127e8:	68b9      	ldr	r1, [r7, #8]
 80127ea:	68f8      	ldr	r0, [r7, #12]
 80127ec:	f000 f844 	bl	8012878 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80127f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80127f2:	4618      	mov	r0, r3
 80127f4:	3730      	adds	r7, #48	; 0x30
 80127f6:	46bd      	mov	sp, r7
 80127f8:	bd80      	pop	{r7, pc}

080127fa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80127fa:	b580      	push	{r7, lr}
 80127fc:	b08a      	sub	sp, #40	; 0x28
 80127fe:	af02      	add	r7, sp, #8
 8012800:	60f8      	str	r0, [r7, #12]
 8012802:	60b9      	str	r1, [r7, #8]
 8012804:	4613      	mov	r3, r2
 8012806:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d109      	bne.n	8012822 <xQueueGenericCreate+0x28>
 801280e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012812:	f383 8811 	msr	BASEPRI, r3
 8012816:	f3bf 8f6f 	isb	sy
 801281a:	f3bf 8f4f 	dsb	sy
 801281e:	613b      	str	r3, [r7, #16]
 8012820:	e7fe      	b.n	8012820 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012822:	68bb      	ldr	r3, [r7, #8]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d102      	bne.n	801282e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012828:	2300      	movs	r3, #0
 801282a:	61fb      	str	r3, [r7, #28]
 801282c:	e004      	b.n	8012838 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	68ba      	ldr	r2, [r7, #8]
 8012832:	fb02 f303 	mul.w	r3, r2, r3
 8012836:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012838:	69fb      	ldr	r3, [r7, #28]
 801283a:	3350      	adds	r3, #80	; 0x50
 801283c:	4618      	mov	r0, r3
 801283e:	f002 f8ff 	bl	8014a40 <pvPortMalloc>
 8012842:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012844:	69bb      	ldr	r3, [r7, #24]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d011      	beq.n	801286e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801284a:	69bb      	ldr	r3, [r7, #24]
 801284c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801284e:	697b      	ldr	r3, [r7, #20]
 8012850:	3350      	adds	r3, #80	; 0x50
 8012852:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012854:	69bb      	ldr	r3, [r7, #24]
 8012856:	2200      	movs	r2, #0
 8012858:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801285c:	79fa      	ldrb	r2, [r7, #7]
 801285e:	69bb      	ldr	r3, [r7, #24]
 8012860:	9300      	str	r3, [sp, #0]
 8012862:	4613      	mov	r3, r2
 8012864:	697a      	ldr	r2, [r7, #20]
 8012866:	68b9      	ldr	r1, [r7, #8]
 8012868:	68f8      	ldr	r0, [r7, #12]
 801286a:	f000 f805 	bl	8012878 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801286e:	69bb      	ldr	r3, [r7, #24]
	}
 8012870:	4618      	mov	r0, r3
 8012872:	3720      	adds	r7, #32
 8012874:	46bd      	mov	sp, r7
 8012876:	bd80      	pop	{r7, pc}

08012878 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b084      	sub	sp, #16
 801287c:	af00      	add	r7, sp, #0
 801287e:	60f8      	str	r0, [r7, #12]
 8012880:	60b9      	str	r1, [r7, #8]
 8012882:	607a      	str	r2, [r7, #4]
 8012884:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012886:	68bb      	ldr	r3, [r7, #8]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d103      	bne.n	8012894 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801288c:	69bb      	ldr	r3, [r7, #24]
 801288e:	69ba      	ldr	r2, [r7, #24]
 8012890:	601a      	str	r2, [r3, #0]
 8012892:	e002      	b.n	801289a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012894:	69bb      	ldr	r3, [r7, #24]
 8012896:	687a      	ldr	r2, [r7, #4]
 8012898:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801289a:	69bb      	ldr	r3, [r7, #24]
 801289c:	68fa      	ldr	r2, [r7, #12]
 801289e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80128a0:	69bb      	ldr	r3, [r7, #24]
 80128a2:	68ba      	ldr	r2, [r7, #8]
 80128a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80128a6:	2101      	movs	r1, #1
 80128a8:	69b8      	ldr	r0, [r7, #24]
 80128aa:	f7ff fecb 	bl	8012644 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80128ae:	69bb      	ldr	r3, [r7, #24]
 80128b0:	78fa      	ldrb	r2, [r7, #3]
 80128b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80128b6:	bf00      	nop
 80128b8:	3710      	adds	r7, #16
 80128ba:	46bd      	mov	sp, r7
 80128bc:	bd80      	pop	{r7, pc}
	...

080128c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b08e      	sub	sp, #56	; 0x38
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	60f8      	str	r0, [r7, #12]
 80128c8:	60b9      	str	r1, [r7, #8]
 80128ca:	607a      	str	r2, [r7, #4]
 80128cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80128ce:	2300      	movs	r3, #0
 80128d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80128d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d109      	bne.n	80128f0 <xQueueGenericSend+0x30>
 80128dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128e0:	f383 8811 	msr	BASEPRI, r3
 80128e4:	f3bf 8f6f 	isb	sy
 80128e8:	f3bf 8f4f 	dsb	sy
 80128ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80128ee:	e7fe      	b.n	80128ee <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80128f0:	68bb      	ldr	r3, [r7, #8]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d103      	bne.n	80128fe <xQueueGenericSend+0x3e>
 80128f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d101      	bne.n	8012902 <xQueueGenericSend+0x42>
 80128fe:	2301      	movs	r3, #1
 8012900:	e000      	b.n	8012904 <xQueueGenericSend+0x44>
 8012902:	2300      	movs	r3, #0
 8012904:	2b00      	cmp	r3, #0
 8012906:	d109      	bne.n	801291c <xQueueGenericSend+0x5c>
 8012908:	f04f 0350 	mov.w	r3, #80	; 0x50
 801290c:	f383 8811 	msr	BASEPRI, r3
 8012910:	f3bf 8f6f 	isb	sy
 8012914:	f3bf 8f4f 	dsb	sy
 8012918:	627b      	str	r3, [r7, #36]	; 0x24
 801291a:	e7fe      	b.n	801291a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801291c:	683b      	ldr	r3, [r7, #0]
 801291e:	2b02      	cmp	r3, #2
 8012920:	d103      	bne.n	801292a <xQueueGenericSend+0x6a>
 8012922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012926:	2b01      	cmp	r3, #1
 8012928:	d101      	bne.n	801292e <xQueueGenericSend+0x6e>
 801292a:	2301      	movs	r3, #1
 801292c:	e000      	b.n	8012930 <xQueueGenericSend+0x70>
 801292e:	2300      	movs	r3, #0
 8012930:	2b00      	cmp	r3, #0
 8012932:	d109      	bne.n	8012948 <xQueueGenericSend+0x88>
 8012934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012938:	f383 8811 	msr	BASEPRI, r3
 801293c:	f3bf 8f6f 	isb	sy
 8012940:	f3bf 8f4f 	dsb	sy
 8012944:	623b      	str	r3, [r7, #32]
 8012946:	e7fe      	b.n	8012946 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012948:	f001 fa16 	bl	8013d78 <xTaskGetSchedulerState>
 801294c:	4603      	mov	r3, r0
 801294e:	2b00      	cmp	r3, #0
 8012950:	d102      	bne.n	8012958 <xQueueGenericSend+0x98>
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d101      	bne.n	801295c <xQueueGenericSend+0x9c>
 8012958:	2301      	movs	r3, #1
 801295a:	e000      	b.n	801295e <xQueueGenericSend+0x9e>
 801295c:	2300      	movs	r3, #0
 801295e:	2b00      	cmp	r3, #0
 8012960:	d109      	bne.n	8012976 <xQueueGenericSend+0xb6>
 8012962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012966:	f383 8811 	msr	BASEPRI, r3
 801296a:	f3bf 8f6f 	isb	sy
 801296e:	f3bf 8f4f 	dsb	sy
 8012972:	61fb      	str	r3, [r7, #28]
 8012974:	e7fe      	b.n	8012974 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012976:	f001 ff49 	bl	801480c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801297c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801297e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012982:	429a      	cmp	r2, r3
 8012984:	d302      	bcc.n	801298c <xQueueGenericSend+0xcc>
 8012986:	683b      	ldr	r3, [r7, #0]
 8012988:	2b02      	cmp	r3, #2
 801298a:	d129      	bne.n	80129e0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801298c:	683a      	ldr	r2, [r7, #0]
 801298e:	68b9      	ldr	r1, [r7, #8]
 8012990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012992:	f000 fa7c 	bl	8012e8e <prvCopyDataToQueue>
 8012996:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801299c:	2b00      	cmp	r3, #0
 801299e:	d010      	beq.n	80129c2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80129a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129a2:	3324      	adds	r3, #36	; 0x24
 80129a4:	4618      	mov	r0, r3
 80129a6:	f001 f831 	bl	8013a0c <xTaskRemoveFromEventList>
 80129aa:	4603      	mov	r3, r0
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d013      	beq.n	80129d8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80129b0:	4b3f      	ldr	r3, [pc, #252]	; (8012ab0 <xQueueGenericSend+0x1f0>)
 80129b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129b6:	601a      	str	r2, [r3, #0]
 80129b8:	f3bf 8f4f 	dsb	sy
 80129bc:	f3bf 8f6f 	isb	sy
 80129c0:	e00a      	b.n	80129d8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80129c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d007      	beq.n	80129d8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80129c8:	4b39      	ldr	r3, [pc, #228]	; (8012ab0 <xQueueGenericSend+0x1f0>)
 80129ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129ce:	601a      	str	r2, [r3, #0]
 80129d0:	f3bf 8f4f 	dsb	sy
 80129d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80129d8:	f001 ff46 	bl	8014868 <vPortExitCritical>
				return pdPASS;
 80129dc:	2301      	movs	r3, #1
 80129de:	e063      	b.n	8012aa8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d103      	bne.n	80129ee <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80129e6:	f001 ff3f 	bl	8014868 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80129ea:	2300      	movs	r3, #0
 80129ec:	e05c      	b.n	8012aa8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80129ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d106      	bne.n	8012a02 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80129f4:	f107 0314 	add.w	r3, r7, #20
 80129f8:	4618      	mov	r0, r3
 80129fa:	f001 f869 	bl	8013ad0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80129fe:	2301      	movs	r3, #1
 8012a00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012a02:	f001 ff31 	bl	8014868 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012a06:	f000 fde5 	bl	80135d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012a0a:	f001 feff 	bl	801480c <vPortEnterCritical>
 8012a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012a14:	b25b      	sxtb	r3, r3
 8012a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a1a:	d103      	bne.n	8012a24 <xQueueGenericSend+0x164>
 8012a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a1e:	2200      	movs	r2, #0
 8012a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012a2a:	b25b      	sxtb	r3, r3
 8012a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a30:	d103      	bne.n	8012a3a <xQueueGenericSend+0x17a>
 8012a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a34:	2200      	movs	r2, #0
 8012a36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012a3a:	f001 ff15 	bl	8014868 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012a3e:	1d3a      	adds	r2, r7, #4
 8012a40:	f107 0314 	add.w	r3, r7, #20
 8012a44:	4611      	mov	r1, r2
 8012a46:	4618      	mov	r0, r3
 8012a48:	f001 f858 	bl	8013afc <xTaskCheckForTimeOut>
 8012a4c:	4603      	mov	r3, r0
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d124      	bne.n	8012a9c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012a52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a54:	f000 fb13 	bl	801307e <prvIsQueueFull>
 8012a58:	4603      	mov	r3, r0
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d018      	beq.n	8012a90 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a60:	3310      	adds	r3, #16
 8012a62:	687a      	ldr	r2, [r7, #4]
 8012a64:	4611      	mov	r1, r2
 8012a66:	4618      	mov	r0, r3
 8012a68:	f000 ff82 	bl	8013970 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012a6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a6e:	f000 fa9e 	bl	8012fae <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012a72:	f000 fdbd 	bl	80135f0 <xTaskResumeAll>
 8012a76:	4603      	mov	r3, r0
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	f47f af7c 	bne.w	8012976 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8012a7e:	4b0c      	ldr	r3, [pc, #48]	; (8012ab0 <xQueueGenericSend+0x1f0>)
 8012a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a84:	601a      	str	r2, [r3, #0]
 8012a86:	f3bf 8f4f 	dsb	sy
 8012a8a:	f3bf 8f6f 	isb	sy
 8012a8e:	e772      	b.n	8012976 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a92:	f000 fa8c 	bl	8012fae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012a96:	f000 fdab 	bl	80135f0 <xTaskResumeAll>
 8012a9a:	e76c      	b.n	8012976 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a9e:	f000 fa86 	bl	8012fae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012aa2:	f000 fda5 	bl	80135f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012aa6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	3738      	adds	r7, #56	; 0x38
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}
 8012ab0:	e000ed04 	.word	0xe000ed04

08012ab4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b08e      	sub	sp, #56	; 0x38
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	60f8      	str	r0, [r7, #12]
 8012abc:	60b9      	str	r1, [r7, #8]
 8012abe:	607a      	str	r2, [r7, #4]
 8012ac0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d109      	bne.n	8012ae0 <xQueueGenericSendFromISR+0x2c>
 8012acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ad0:	f383 8811 	msr	BASEPRI, r3
 8012ad4:	f3bf 8f6f 	isb	sy
 8012ad8:	f3bf 8f4f 	dsb	sy
 8012adc:	627b      	str	r3, [r7, #36]	; 0x24
 8012ade:	e7fe      	b.n	8012ade <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012ae0:	68bb      	ldr	r3, [r7, #8]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d103      	bne.n	8012aee <xQueueGenericSendFromISR+0x3a>
 8012ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d101      	bne.n	8012af2 <xQueueGenericSendFromISR+0x3e>
 8012aee:	2301      	movs	r3, #1
 8012af0:	e000      	b.n	8012af4 <xQueueGenericSendFromISR+0x40>
 8012af2:	2300      	movs	r3, #0
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d109      	bne.n	8012b0c <xQueueGenericSendFromISR+0x58>
 8012af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012afc:	f383 8811 	msr	BASEPRI, r3
 8012b00:	f3bf 8f6f 	isb	sy
 8012b04:	f3bf 8f4f 	dsb	sy
 8012b08:	623b      	str	r3, [r7, #32]
 8012b0a:	e7fe      	b.n	8012b0a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012b0c:	683b      	ldr	r3, [r7, #0]
 8012b0e:	2b02      	cmp	r3, #2
 8012b10:	d103      	bne.n	8012b1a <xQueueGenericSendFromISR+0x66>
 8012b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b16:	2b01      	cmp	r3, #1
 8012b18:	d101      	bne.n	8012b1e <xQueueGenericSendFromISR+0x6a>
 8012b1a:	2301      	movs	r3, #1
 8012b1c:	e000      	b.n	8012b20 <xQueueGenericSendFromISR+0x6c>
 8012b1e:	2300      	movs	r3, #0
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d109      	bne.n	8012b38 <xQueueGenericSendFromISR+0x84>
 8012b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b28:	f383 8811 	msr	BASEPRI, r3
 8012b2c:	f3bf 8f6f 	isb	sy
 8012b30:	f3bf 8f4f 	dsb	sy
 8012b34:	61fb      	str	r3, [r7, #28]
 8012b36:	e7fe      	b.n	8012b36 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012b38:	f001 ff44 	bl	80149c4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012b3c:	f3ef 8211 	mrs	r2, BASEPRI
 8012b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b44:	f383 8811 	msr	BASEPRI, r3
 8012b48:	f3bf 8f6f 	isb	sy
 8012b4c:	f3bf 8f4f 	dsb	sy
 8012b50:	61ba      	str	r2, [r7, #24]
 8012b52:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012b54:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012b56:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b60:	429a      	cmp	r2, r3
 8012b62:	d302      	bcc.n	8012b6a <xQueueGenericSendFromISR+0xb6>
 8012b64:	683b      	ldr	r3, [r7, #0]
 8012b66:	2b02      	cmp	r3, #2
 8012b68:	d12c      	bne.n	8012bc4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012b74:	683a      	ldr	r2, [r7, #0]
 8012b76:	68b9      	ldr	r1, [r7, #8]
 8012b78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012b7a:	f000 f988 	bl	8012e8e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012b7e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8012b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b86:	d112      	bne.n	8012bae <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d016      	beq.n	8012bbe <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b92:	3324      	adds	r3, #36	; 0x24
 8012b94:	4618      	mov	r0, r3
 8012b96:	f000 ff39 	bl	8013a0c <xTaskRemoveFromEventList>
 8012b9a:	4603      	mov	r3, r0
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d00e      	beq.n	8012bbe <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d00b      	beq.n	8012bbe <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	2201      	movs	r2, #1
 8012baa:	601a      	str	r2, [r3, #0]
 8012bac:	e007      	b.n	8012bbe <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012bae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012bb2:	3301      	adds	r3, #1
 8012bb4:	b2db      	uxtb	r3, r3
 8012bb6:	b25a      	sxtb	r2, r3
 8012bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012bbe:	2301      	movs	r3, #1
 8012bc0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8012bc2:	e001      	b.n	8012bc8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8012bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bca:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012bcc:	693b      	ldr	r3, [r7, #16]
 8012bce:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	3738      	adds	r7, #56	; 0x38
 8012bd8:	46bd      	mov	sp, r7
 8012bda:	bd80      	pop	{r7, pc}

08012bdc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	b08c      	sub	sp, #48	; 0x30
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	60f8      	str	r0, [r7, #12]
 8012be4:	60b9      	str	r1, [r7, #8]
 8012be6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012be8:	2300      	movs	r3, #0
 8012bea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d109      	bne.n	8012c0a <xQueueReceive+0x2e>
	__asm volatile
 8012bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bfa:	f383 8811 	msr	BASEPRI, r3
 8012bfe:	f3bf 8f6f 	isb	sy
 8012c02:	f3bf 8f4f 	dsb	sy
 8012c06:	623b      	str	r3, [r7, #32]
 8012c08:	e7fe      	b.n	8012c08 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012c0a:	68bb      	ldr	r3, [r7, #8]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d103      	bne.n	8012c18 <xQueueReceive+0x3c>
 8012c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d101      	bne.n	8012c1c <xQueueReceive+0x40>
 8012c18:	2301      	movs	r3, #1
 8012c1a:	e000      	b.n	8012c1e <xQueueReceive+0x42>
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d109      	bne.n	8012c36 <xQueueReceive+0x5a>
 8012c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c26:	f383 8811 	msr	BASEPRI, r3
 8012c2a:	f3bf 8f6f 	isb	sy
 8012c2e:	f3bf 8f4f 	dsb	sy
 8012c32:	61fb      	str	r3, [r7, #28]
 8012c34:	e7fe      	b.n	8012c34 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012c36:	f001 f89f 	bl	8013d78 <xTaskGetSchedulerState>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d102      	bne.n	8012c46 <xQueueReceive+0x6a>
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d101      	bne.n	8012c4a <xQueueReceive+0x6e>
 8012c46:	2301      	movs	r3, #1
 8012c48:	e000      	b.n	8012c4c <xQueueReceive+0x70>
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d109      	bne.n	8012c64 <xQueueReceive+0x88>
 8012c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c54:	f383 8811 	msr	BASEPRI, r3
 8012c58:	f3bf 8f6f 	isb	sy
 8012c5c:	f3bf 8f4f 	dsb	sy
 8012c60:	61bb      	str	r3, [r7, #24]
 8012c62:	e7fe      	b.n	8012c62 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012c64:	f001 fdd2 	bl	801480c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c6c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d01f      	beq.n	8012cb4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012c74:	68b9      	ldr	r1, [r7, #8]
 8012c76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c78:	f000 f973 	bl	8012f62 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c7e:	1e5a      	subs	r2, r3, #1
 8012c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c82:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c86:	691b      	ldr	r3, [r3, #16]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d00f      	beq.n	8012cac <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c8e:	3310      	adds	r3, #16
 8012c90:	4618      	mov	r0, r3
 8012c92:	f000 febb 	bl	8013a0c <xTaskRemoveFromEventList>
 8012c96:	4603      	mov	r3, r0
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d007      	beq.n	8012cac <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012c9c:	4b3c      	ldr	r3, [pc, #240]	; (8012d90 <xQueueReceive+0x1b4>)
 8012c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ca2:	601a      	str	r2, [r3, #0]
 8012ca4:	f3bf 8f4f 	dsb	sy
 8012ca8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012cac:	f001 fddc 	bl	8014868 <vPortExitCritical>
				return pdPASS;
 8012cb0:	2301      	movs	r3, #1
 8012cb2:	e069      	b.n	8012d88 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d103      	bne.n	8012cc2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012cba:	f001 fdd5 	bl	8014868 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012cbe:	2300      	movs	r3, #0
 8012cc0:	e062      	b.n	8012d88 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d106      	bne.n	8012cd6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012cc8:	f107 0310 	add.w	r3, r7, #16
 8012ccc:	4618      	mov	r0, r3
 8012cce:	f000 feff 	bl	8013ad0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012cd2:	2301      	movs	r3, #1
 8012cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012cd6:	f001 fdc7 	bl	8014868 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012cda:	f000 fc7b 	bl	80135d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012cde:	f001 fd95 	bl	801480c <vPortEnterCritical>
 8012ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ce4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012ce8:	b25b      	sxtb	r3, r3
 8012cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cee:	d103      	bne.n	8012cf8 <xQueueReceive+0x11c>
 8012cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012cfe:	b25b      	sxtb	r3, r3
 8012d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d04:	d103      	bne.n	8012d0e <xQueueReceive+0x132>
 8012d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d08:	2200      	movs	r2, #0
 8012d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012d0e:	f001 fdab 	bl	8014868 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012d12:	1d3a      	adds	r2, r7, #4
 8012d14:	f107 0310 	add.w	r3, r7, #16
 8012d18:	4611      	mov	r1, r2
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	f000 feee 	bl	8013afc <xTaskCheckForTimeOut>
 8012d20:	4603      	mov	r3, r0
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d123      	bne.n	8012d6e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012d26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d28:	f000 f993 	bl	8013052 <prvIsQueueEmpty>
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d017      	beq.n	8012d62 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d34:	3324      	adds	r3, #36	; 0x24
 8012d36:	687a      	ldr	r2, [r7, #4]
 8012d38:	4611      	mov	r1, r2
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	f000 fe18 	bl	8013970 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d42:	f000 f934 	bl	8012fae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012d46:	f000 fc53 	bl	80135f0 <xTaskResumeAll>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d189      	bne.n	8012c64 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8012d50:	4b0f      	ldr	r3, [pc, #60]	; (8012d90 <xQueueReceive+0x1b4>)
 8012d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d56:	601a      	str	r2, [r3, #0]
 8012d58:	f3bf 8f4f 	dsb	sy
 8012d5c:	f3bf 8f6f 	isb	sy
 8012d60:	e780      	b.n	8012c64 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012d62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d64:	f000 f923 	bl	8012fae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012d68:	f000 fc42 	bl	80135f0 <xTaskResumeAll>
 8012d6c:	e77a      	b.n	8012c64 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d70:	f000 f91d 	bl	8012fae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012d74:	f000 fc3c 	bl	80135f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012d78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d7a:	f000 f96a 	bl	8013052 <prvIsQueueEmpty>
 8012d7e:	4603      	mov	r3, r0
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	f43f af6f 	beq.w	8012c64 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012d86:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012d88:	4618      	mov	r0, r3
 8012d8a:	3730      	adds	r7, #48	; 0x30
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	bd80      	pop	{r7, pc}
 8012d90:	e000ed04 	.word	0xe000ed04

08012d94 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b08e      	sub	sp, #56	; 0x38
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	60f8      	str	r0, [r7, #12]
 8012d9c:	60b9      	str	r1, [r7, #8]
 8012d9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d109      	bne.n	8012dbe <xQueueReceiveFromISR+0x2a>
 8012daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dae:	f383 8811 	msr	BASEPRI, r3
 8012db2:	f3bf 8f6f 	isb	sy
 8012db6:	f3bf 8f4f 	dsb	sy
 8012dba:	623b      	str	r3, [r7, #32]
 8012dbc:	e7fe      	b.n	8012dbc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012dbe:	68bb      	ldr	r3, [r7, #8]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d103      	bne.n	8012dcc <xQueueReceiveFromISR+0x38>
 8012dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d101      	bne.n	8012dd0 <xQueueReceiveFromISR+0x3c>
 8012dcc:	2301      	movs	r3, #1
 8012dce:	e000      	b.n	8012dd2 <xQueueReceiveFromISR+0x3e>
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d109      	bne.n	8012dea <xQueueReceiveFromISR+0x56>
 8012dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dda:	f383 8811 	msr	BASEPRI, r3
 8012dde:	f3bf 8f6f 	isb	sy
 8012de2:	f3bf 8f4f 	dsb	sy
 8012de6:	61fb      	str	r3, [r7, #28]
 8012de8:	e7fe      	b.n	8012de8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012dea:	f001 fdeb 	bl	80149c4 <vPortValidateInterruptPriority>
	__asm volatile
 8012dee:	f3ef 8211 	mrs	r2, BASEPRI
 8012df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012df6:	f383 8811 	msr	BASEPRI, r3
 8012dfa:	f3bf 8f6f 	isb	sy
 8012dfe:	f3bf 8f4f 	dsb	sy
 8012e02:	61ba      	str	r2, [r7, #24]
 8012e04:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012e06:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012e08:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e0e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d02f      	beq.n	8012e76 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012e20:	68b9      	ldr	r1, [r7, #8]
 8012e22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012e24:	f000 f89d 	bl	8012f62 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e2a:	1e5a      	subs	r2, r3, #1
 8012e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e2e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012e30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e38:	d112      	bne.n	8012e60 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e3c:	691b      	ldr	r3, [r3, #16]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d016      	beq.n	8012e70 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e44:	3310      	adds	r3, #16
 8012e46:	4618      	mov	r0, r3
 8012e48:	f000 fde0 	bl	8013a0c <xTaskRemoveFromEventList>
 8012e4c:	4603      	mov	r3, r0
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d00e      	beq.n	8012e70 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d00b      	beq.n	8012e70 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	2201      	movs	r2, #1
 8012e5c:	601a      	str	r2, [r3, #0]
 8012e5e:	e007      	b.n	8012e70 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012e60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e64:	3301      	adds	r3, #1
 8012e66:	b2db      	uxtb	r3, r3
 8012e68:	b25a      	sxtb	r2, r3
 8012e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012e70:	2301      	movs	r3, #1
 8012e72:	637b      	str	r3, [r7, #52]	; 0x34
 8012e74:	e001      	b.n	8012e7a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8012e76:	2300      	movs	r3, #0
 8012e78:	637b      	str	r3, [r7, #52]	; 0x34
 8012e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e7c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012e7e:	693b      	ldr	r3, [r7, #16]
 8012e80:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012e86:	4618      	mov	r0, r3
 8012e88:	3738      	adds	r7, #56	; 0x38
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bd80      	pop	{r7, pc}

08012e8e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012e8e:	b580      	push	{r7, lr}
 8012e90:	b086      	sub	sp, #24
 8012e92:	af00      	add	r7, sp, #0
 8012e94:	60f8      	str	r0, [r7, #12]
 8012e96:	60b9      	str	r1, [r7, #8]
 8012e98:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ea2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d10d      	bne.n	8012ec8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d14d      	bne.n	8012f50 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	689b      	ldr	r3, [r3, #8]
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f000 ff7b 	bl	8013db4 <xTaskPriorityDisinherit>
 8012ebe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	609a      	str	r2, [r3, #8]
 8012ec6:	e043      	b.n	8012f50 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d119      	bne.n	8012f02 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	6858      	ldr	r0, [r3, #4]
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ed6:	461a      	mov	r2, r3
 8012ed8:	68b9      	ldr	r1, [r7, #8]
 8012eda:	f002 fbcf 	bl	801567c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	685a      	ldr	r2, [r3, #4]
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ee6:	441a      	add	r2, r3
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	685a      	ldr	r2, [r3, #4]
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	689b      	ldr	r3, [r3, #8]
 8012ef4:	429a      	cmp	r2, r3
 8012ef6:	d32b      	bcc.n	8012f50 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	681a      	ldr	r2, [r3, #0]
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	605a      	str	r2, [r3, #4]
 8012f00:	e026      	b.n	8012f50 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	68d8      	ldr	r0, [r3, #12]
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f0a:	461a      	mov	r2, r3
 8012f0c:	68b9      	ldr	r1, [r7, #8]
 8012f0e:	f002 fbb5 	bl	801567c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	68da      	ldr	r2, [r3, #12]
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f1a:	425b      	negs	r3, r3
 8012f1c:	441a      	add	r2, r3
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	68da      	ldr	r2, [r3, #12]
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	429a      	cmp	r2, r3
 8012f2c:	d207      	bcs.n	8012f3e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	689a      	ldr	r2, [r3, #8]
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f36:	425b      	negs	r3, r3
 8012f38:	441a      	add	r2, r3
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	2b02      	cmp	r3, #2
 8012f42:	d105      	bne.n	8012f50 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012f44:	693b      	ldr	r3, [r7, #16]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d002      	beq.n	8012f50 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012f4a:	693b      	ldr	r3, [r7, #16]
 8012f4c:	3b01      	subs	r3, #1
 8012f4e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012f50:	693b      	ldr	r3, [r7, #16]
 8012f52:	1c5a      	adds	r2, r3, #1
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012f58:	697b      	ldr	r3, [r7, #20]
}
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	3718      	adds	r7, #24
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	bd80      	pop	{r7, pc}

08012f62 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012f62:	b580      	push	{r7, lr}
 8012f64:	b082      	sub	sp, #8
 8012f66:	af00      	add	r7, sp, #0
 8012f68:	6078      	str	r0, [r7, #4]
 8012f6a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d018      	beq.n	8012fa6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	68da      	ldr	r2, [r3, #12]
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f7c:	441a      	add	r2, r3
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	68da      	ldr	r2, [r3, #12]
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	689b      	ldr	r3, [r3, #8]
 8012f8a:	429a      	cmp	r2, r3
 8012f8c:	d303      	bcc.n	8012f96 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	681a      	ldr	r2, [r3, #0]
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	68d9      	ldr	r1, [r3, #12]
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f9e:	461a      	mov	r2, r3
 8012fa0:	6838      	ldr	r0, [r7, #0]
 8012fa2:	f002 fb6b 	bl	801567c <memcpy>
	}
}
 8012fa6:	bf00      	nop
 8012fa8:	3708      	adds	r7, #8
 8012faa:	46bd      	mov	sp, r7
 8012fac:	bd80      	pop	{r7, pc}

08012fae <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012fae:	b580      	push	{r7, lr}
 8012fb0:	b084      	sub	sp, #16
 8012fb2:	af00      	add	r7, sp, #0
 8012fb4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012fb6:	f001 fc29 	bl	801480c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012fc0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012fc2:	e011      	b.n	8012fe8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d012      	beq.n	8012ff2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	3324      	adds	r3, #36	; 0x24
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	f000 fd1b 	bl	8013a0c <xTaskRemoveFromEventList>
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d001      	beq.n	8012fe0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012fdc:	f000 fdee 	bl	8013bbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012fe0:	7bfb      	ldrb	r3, [r7, #15]
 8012fe2:	3b01      	subs	r3, #1
 8012fe4:	b2db      	uxtb	r3, r3
 8012fe6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	dce9      	bgt.n	8012fc4 <prvUnlockQueue+0x16>
 8012ff0:	e000      	b.n	8012ff4 <prvUnlockQueue+0x46>
					break;
 8012ff2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	22ff      	movs	r2, #255	; 0xff
 8012ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012ffc:	f001 fc34 	bl	8014868 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013000:	f001 fc04 	bl	801480c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801300a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801300c:	e011      	b.n	8013032 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	691b      	ldr	r3, [r3, #16]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d012      	beq.n	801303c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	3310      	adds	r3, #16
 801301a:	4618      	mov	r0, r3
 801301c:	f000 fcf6 	bl	8013a0c <xTaskRemoveFromEventList>
 8013020:	4603      	mov	r3, r0
 8013022:	2b00      	cmp	r3, #0
 8013024:	d001      	beq.n	801302a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013026:	f000 fdc9 	bl	8013bbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801302a:	7bbb      	ldrb	r3, [r7, #14]
 801302c:	3b01      	subs	r3, #1
 801302e:	b2db      	uxtb	r3, r3
 8013030:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013032:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013036:	2b00      	cmp	r3, #0
 8013038:	dce9      	bgt.n	801300e <prvUnlockQueue+0x60>
 801303a:	e000      	b.n	801303e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801303c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	22ff      	movs	r2, #255	; 0xff
 8013042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013046:	f001 fc0f 	bl	8014868 <vPortExitCritical>
}
 801304a:	bf00      	nop
 801304c:	3710      	adds	r7, #16
 801304e:	46bd      	mov	sp, r7
 8013050:	bd80      	pop	{r7, pc}

08013052 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013052:	b580      	push	{r7, lr}
 8013054:	b084      	sub	sp, #16
 8013056:	af00      	add	r7, sp, #0
 8013058:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801305a:	f001 fbd7 	bl	801480c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013062:	2b00      	cmp	r3, #0
 8013064:	d102      	bne.n	801306c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013066:	2301      	movs	r3, #1
 8013068:	60fb      	str	r3, [r7, #12]
 801306a:	e001      	b.n	8013070 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801306c:	2300      	movs	r3, #0
 801306e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013070:	f001 fbfa 	bl	8014868 <vPortExitCritical>

	return xReturn;
 8013074:	68fb      	ldr	r3, [r7, #12]
}
 8013076:	4618      	mov	r0, r3
 8013078:	3710      	adds	r7, #16
 801307a:	46bd      	mov	sp, r7
 801307c:	bd80      	pop	{r7, pc}

0801307e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801307e:	b580      	push	{r7, lr}
 8013080:	b084      	sub	sp, #16
 8013082:	af00      	add	r7, sp, #0
 8013084:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013086:	f001 fbc1 	bl	801480c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013092:	429a      	cmp	r2, r3
 8013094:	d102      	bne.n	801309c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013096:	2301      	movs	r3, #1
 8013098:	60fb      	str	r3, [r7, #12]
 801309a:	e001      	b.n	80130a0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801309c:	2300      	movs	r3, #0
 801309e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80130a0:	f001 fbe2 	bl	8014868 <vPortExitCritical>

	return xReturn;
 80130a4:	68fb      	ldr	r3, [r7, #12]
}
 80130a6:	4618      	mov	r0, r3
 80130a8:	3710      	adds	r7, #16
 80130aa:	46bd      	mov	sp, r7
 80130ac:	bd80      	pop	{r7, pc}
	...

080130b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80130b0:	b480      	push	{r7}
 80130b2:	b085      	sub	sp, #20
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
 80130b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80130ba:	2300      	movs	r3, #0
 80130bc:	60fb      	str	r3, [r7, #12]
 80130be:	e014      	b.n	80130ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80130c0:	4a0e      	ldr	r2, [pc, #56]	; (80130fc <vQueueAddToRegistry+0x4c>)
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d10b      	bne.n	80130e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80130cc:	490b      	ldr	r1, [pc, #44]	; (80130fc <vQueueAddToRegistry+0x4c>)
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	683a      	ldr	r2, [r7, #0]
 80130d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80130d6:	4a09      	ldr	r2, [pc, #36]	; (80130fc <vQueueAddToRegistry+0x4c>)
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	00db      	lsls	r3, r3, #3
 80130dc:	4413      	add	r3, r2
 80130de:	687a      	ldr	r2, [r7, #4]
 80130e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80130e2:	e005      	b.n	80130f0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	3301      	adds	r3, #1
 80130e8:	60fb      	str	r3, [r7, #12]
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	2b07      	cmp	r3, #7
 80130ee:	d9e7      	bls.n	80130c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80130f0:	bf00      	nop
 80130f2:	3714      	adds	r7, #20
 80130f4:	46bd      	mov	sp, r7
 80130f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130fa:	4770      	bx	lr
 80130fc:	2003ddb8 	.word	0x2003ddb8

08013100 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013100:	b580      	push	{r7, lr}
 8013102:	b086      	sub	sp, #24
 8013104:	af00      	add	r7, sp, #0
 8013106:	60f8      	str	r0, [r7, #12]
 8013108:	60b9      	str	r1, [r7, #8]
 801310a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013110:	f001 fb7c 	bl	801480c <vPortEnterCritical>
 8013114:	697b      	ldr	r3, [r7, #20]
 8013116:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801311a:	b25b      	sxtb	r3, r3
 801311c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013120:	d103      	bne.n	801312a <vQueueWaitForMessageRestricted+0x2a>
 8013122:	697b      	ldr	r3, [r7, #20]
 8013124:	2200      	movs	r2, #0
 8013126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801312a:	697b      	ldr	r3, [r7, #20]
 801312c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013130:	b25b      	sxtb	r3, r3
 8013132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013136:	d103      	bne.n	8013140 <vQueueWaitForMessageRestricted+0x40>
 8013138:	697b      	ldr	r3, [r7, #20]
 801313a:	2200      	movs	r2, #0
 801313c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013140:	f001 fb92 	bl	8014868 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013144:	697b      	ldr	r3, [r7, #20]
 8013146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013148:	2b00      	cmp	r3, #0
 801314a:	d106      	bne.n	801315a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801314c:	697b      	ldr	r3, [r7, #20]
 801314e:	3324      	adds	r3, #36	; 0x24
 8013150:	687a      	ldr	r2, [r7, #4]
 8013152:	68b9      	ldr	r1, [r7, #8]
 8013154:	4618      	mov	r0, r3
 8013156:	f000 fc2f 	bl	80139b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801315a:	6978      	ldr	r0, [r7, #20]
 801315c:	f7ff ff27 	bl	8012fae <prvUnlockQueue>
	}
 8013160:	bf00      	nop
 8013162:	3718      	adds	r7, #24
 8013164:	46bd      	mov	sp, r7
 8013166:	bd80      	pop	{r7, pc}

08013168 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013168:	b580      	push	{r7, lr}
 801316a:	b08e      	sub	sp, #56	; 0x38
 801316c:	af04      	add	r7, sp, #16
 801316e:	60f8      	str	r0, [r7, #12]
 8013170:	60b9      	str	r1, [r7, #8]
 8013172:	607a      	str	r2, [r7, #4]
 8013174:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013178:	2b00      	cmp	r3, #0
 801317a:	d109      	bne.n	8013190 <xTaskCreateStatic+0x28>
	__asm volatile
 801317c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013180:	f383 8811 	msr	BASEPRI, r3
 8013184:	f3bf 8f6f 	isb	sy
 8013188:	f3bf 8f4f 	dsb	sy
 801318c:	623b      	str	r3, [r7, #32]
 801318e:	e7fe      	b.n	801318e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8013190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013192:	2b00      	cmp	r3, #0
 8013194:	d109      	bne.n	80131aa <xTaskCreateStatic+0x42>
 8013196:	f04f 0350 	mov.w	r3, #80	; 0x50
 801319a:	f383 8811 	msr	BASEPRI, r3
 801319e:	f3bf 8f6f 	isb	sy
 80131a2:	f3bf 8f4f 	dsb	sy
 80131a6:	61fb      	str	r3, [r7, #28]
 80131a8:	e7fe      	b.n	80131a8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80131aa:	235c      	movs	r3, #92	; 0x5c
 80131ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80131ae:	693b      	ldr	r3, [r7, #16]
 80131b0:	2b5c      	cmp	r3, #92	; 0x5c
 80131b2:	d009      	beq.n	80131c8 <xTaskCreateStatic+0x60>
 80131b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131b8:	f383 8811 	msr	BASEPRI, r3
 80131bc:	f3bf 8f6f 	isb	sy
 80131c0:	f3bf 8f4f 	dsb	sy
 80131c4:	61bb      	str	r3, [r7, #24]
 80131c6:	e7fe      	b.n	80131c6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80131c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80131ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d01e      	beq.n	801320e <xTaskCreateStatic+0xa6>
 80131d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d01b      	beq.n	801320e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80131d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131d8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80131da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80131de:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80131e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131e2:	2202      	movs	r2, #2
 80131e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80131e8:	2300      	movs	r3, #0
 80131ea:	9303      	str	r3, [sp, #12]
 80131ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ee:	9302      	str	r3, [sp, #8]
 80131f0:	f107 0314 	add.w	r3, r7, #20
 80131f4:	9301      	str	r3, [sp, #4]
 80131f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f8:	9300      	str	r3, [sp, #0]
 80131fa:	683b      	ldr	r3, [r7, #0]
 80131fc:	687a      	ldr	r2, [r7, #4]
 80131fe:	68b9      	ldr	r1, [r7, #8]
 8013200:	68f8      	ldr	r0, [r7, #12]
 8013202:	f000 f850 	bl	80132a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013206:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013208:	f000 f8dc 	bl	80133c4 <prvAddNewTaskToReadyList>
 801320c:	e001      	b.n	8013212 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 801320e:	2300      	movs	r3, #0
 8013210:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013212:	697b      	ldr	r3, [r7, #20]
	}
 8013214:	4618      	mov	r0, r3
 8013216:	3728      	adds	r7, #40	; 0x28
 8013218:	46bd      	mov	sp, r7
 801321a:	bd80      	pop	{r7, pc}

0801321c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801321c:	b580      	push	{r7, lr}
 801321e:	b08c      	sub	sp, #48	; 0x30
 8013220:	af04      	add	r7, sp, #16
 8013222:	60f8      	str	r0, [r7, #12]
 8013224:	60b9      	str	r1, [r7, #8]
 8013226:	603b      	str	r3, [r7, #0]
 8013228:	4613      	mov	r3, r2
 801322a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801322c:	88fb      	ldrh	r3, [r7, #6]
 801322e:	009b      	lsls	r3, r3, #2
 8013230:	4618      	mov	r0, r3
 8013232:	f001 fc05 	bl	8014a40 <pvPortMalloc>
 8013236:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013238:	697b      	ldr	r3, [r7, #20]
 801323a:	2b00      	cmp	r3, #0
 801323c:	d00e      	beq.n	801325c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801323e:	205c      	movs	r0, #92	; 0x5c
 8013240:	f001 fbfe 	bl	8014a40 <pvPortMalloc>
 8013244:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013246:	69fb      	ldr	r3, [r7, #28]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d003      	beq.n	8013254 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801324c:	69fb      	ldr	r3, [r7, #28]
 801324e:	697a      	ldr	r2, [r7, #20]
 8013250:	631a      	str	r2, [r3, #48]	; 0x30
 8013252:	e005      	b.n	8013260 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013254:	6978      	ldr	r0, [r7, #20]
 8013256:	f001 fcb5 	bl	8014bc4 <vPortFree>
 801325a:	e001      	b.n	8013260 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801325c:	2300      	movs	r3, #0
 801325e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013260:	69fb      	ldr	r3, [r7, #28]
 8013262:	2b00      	cmp	r3, #0
 8013264:	d017      	beq.n	8013296 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013266:	69fb      	ldr	r3, [r7, #28]
 8013268:	2200      	movs	r2, #0
 801326a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801326e:	88fa      	ldrh	r2, [r7, #6]
 8013270:	2300      	movs	r3, #0
 8013272:	9303      	str	r3, [sp, #12]
 8013274:	69fb      	ldr	r3, [r7, #28]
 8013276:	9302      	str	r3, [sp, #8]
 8013278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801327a:	9301      	str	r3, [sp, #4]
 801327c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801327e:	9300      	str	r3, [sp, #0]
 8013280:	683b      	ldr	r3, [r7, #0]
 8013282:	68b9      	ldr	r1, [r7, #8]
 8013284:	68f8      	ldr	r0, [r7, #12]
 8013286:	f000 f80e 	bl	80132a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801328a:	69f8      	ldr	r0, [r7, #28]
 801328c:	f000 f89a 	bl	80133c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013290:	2301      	movs	r3, #1
 8013292:	61bb      	str	r3, [r7, #24]
 8013294:	e002      	b.n	801329c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013296:	f04f 33ff 	mov.w	r3, #4294967295
 801329a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801329c:	69bb      	ldr	r3, [r7, #24]
	}
 801329e:	4618      	mov	r0, r3
 80132a0:	3720      	adds	r7, #32
 80132a2:	46bd      	mov	sp, r7
 80132a4:	bd80      	pop	{r7, pc}

080132a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80132a6:	b580      	push	{r7, lr}
 80132a8:	b088      	sub	sp, #32
 80132aa:	af00      	add	r7, sp, #0
 80132ac:	60f8      	str	r0, [r7, #12]
 80132ae:	60b9      	str	r1, [r7, #8]
 80132b0:	607a      	str	r2, [r7, #4]
 80132b2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80132b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	009b      	lsls	r3, r3, #2
 80132bc:	461a      	mov	r2, r3
 80132be:	21a5      	movs	r1, #165	; 0xa5
 80132c0:	f002 f9e7 	bl	8015692 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80132c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80132ce:	3b01      	subs	r3, #1
 80132d0:	009b      	lsls	r3, r3, #2
 80132d2:	4413      	add	r3, r2
 80132d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80132d6:	69bb      	ldr	r3, [r7, #24]
 80132d8:	f023 0307 	bic.w	r3, r3, #7
 80132dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80132de:	69bb      	ldr	r3, [r7, #24]
 80132e0:	f003 0307 	and.w	r3, r3, #7
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d009      	beq.n	80132fc <prvInitialiseNewTask+0x56>
 80132e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132ec:	f383 8811 	msr	BASEPRI, r3
 80132f0:	f3bf 8f6f 	isb	sy
 80132f4:	f3bf 8f4f 	dsb	sy
 80132f8:	617b      	str	r3, [r7, #20]
 80132fa:	e7fe      	b.n	80132fa <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80132fc:	68bb      	ldr	r3, [r7, #8]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d01f      	beq.n	8013342 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013302:	2300      	movs	r3, #0
 8013304:	61fb      	str	r3, [r7, #28]
 8013306:	e012      	b.n	801332e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013308:	68ba      	ldr	r2, [r7, #8]
 801330a:	69fb      	ldr	r3, [r7, #28]
 801330c:	4413      	add	r3, r2
 801330e:	7819      	ldrb	r1, [r3, #0]
 8013310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013312:	69fb      	ldr	r3, [r7, #28]
 8013314:	4413      	add	r3, r2
 8013316:	3334      	adds	r3, #52	; 0x34
 8013318:	460a      	mov	r2, r1
 801331a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801331c:	68ba      	ldr	r2, [r7, #8]
 801331e:	69fb      	ldr	r3, [r7, #28]
 8013320:	4413      	add	r3, r2
 8013322:	781b      	ldrb	r3, [r3, #0]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d006      	beq.n	8013336 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013328:	69fb      	ldr	r3, [r7, #28]
 801332a:	3301      	adds	r3, #1
 801332c:	61fb      	str	r3, [r7, #28]
 801332e:	69fb      	ldr	r3, [r7, #28]
 8013330:	2b0f      	cmp	r3, #15
 8013332:	d9e9      	bls.n	8013308 <prvInitialiseNewTask+0x62>
 8013334:	e000      	b.n	8013338 <prvInitialiseNewTask+0x92>
			{
				break;
 8013336:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801333a:	2200      	movs	r2, #0
 801333c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013340:	e003      	b.n	801334a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013344:	2200      	movs	r2, #0
 8013346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801334a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801334c:	2b37      	cmp	r3, #55	; 0x37
 801334e:	d901      	bls.n	8013354 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013350:	2337      	movs	r3, #55	; 0x37
 8013352:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013358:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801335a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801335c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801335e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013362:	2200      	movs	r2, #0
 8013364:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013368:	3304      	adds	r3, #4
 801336a:	4618      	mov	r0, r3
 801336c:	f7ff f8d6 	bl	801251c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013372:	3318      	adds	r3, #24
 8013374:	4618      	mov	r0, r3
 8013376:	f7ff f8d1 	bl	801251c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801337a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801337c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801337e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013382:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013388:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801338a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801338c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801338e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013392:	2200      	movs	r2, #0
 8013394:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013398:	2200      	movs	r2, #0
 801339a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801339e:	683a      	ldr	r2, [r7, #0]
 80133a0:	68f9      	ldr	r1, [r7, #12]
 80133a2:	69b8      	ldr	r0, [r7, #24]
 80133a4:	f001 f90c 	bl	80145c0 <pxPortInitialiseStack>
 80133a8:	4602      	mov	r2, r0
 80133aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80133ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d002      	beq.n	80133ba <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80133b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80133b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80133ba:	bf00      	nop
 80133bc:	3720      	adds	r7, #32
 80133be:	46bd      	mov	sp, r7
 80133c0:	bd80      	pop	{r7, pc}
	...

080133c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b082      	sub	sp, #8
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80133cc:	f001 fa1e 	bl	801480c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80133d0:	4b2d      	ldr	r3, [pc, #180]	; (8013488 <prvAddNewTaskToReadyList+0xc4>)
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	3301      	adds	r3, #1
 80133d6:	4a2c      	ldr	r2, [pc, #176]	; (8013488 <prvAddNewTaskToReadyList+0xc4>)
 80133d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80133da:	4b2c      	ldr	r3, [pc, #176]	; (801348c <prvAddNewTaskToReadyList+0xc8>)
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d109      	bne.n	80133f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80133e2:	4a2a      	ldr	r2, [pc, #168]	; (801348c <prvAddNewTaskToReadyList+0xc8>)
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80133e8:	4b27      	ldr	r3, [pc, #156]	; (8013488 <prvAddNewTaskToReadyList+0xc4>)
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	2b01      	cmp	r3, #1
 80133ee:	d110      	bne.n	8013412 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80133f0:	f000 fc08 	bl	8013c04 <prvInitialiseTaskLists>
 80133f4:	e00d      	b.n	8013412 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80133f6:	4b26      	ldr	r3, [pc, #152]	; (8013490 <prvAddNewTaskToReadyList+0xcc>)
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d109      	bne.n	8013412 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80133fe:	4b23      	ldr	r3, [pc, #140]	; (801348c <prvAddNewTaskToReadyList+0xc8>)
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013408:	429a      	cmp	r2, r3
 801340a:	d802      	bhi.n	8013412 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801340c:	4a1f      	ldr	r2, [pc, #124]	; (801348c <prvAddNewTaskToReadyList+0xc8>)
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013412:	4b20      	ldr	r3, [pc, #128]	; (8013494 <prvAddNewTaskToReadyList+0xd0>)
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	3301      	adds	r3, #1
 8013418:	4a1e      	ldr	r2, [pc, #120]	; (8013494 <prvAddNewTaskToReadyList+0xd0>)
 801341a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801341c:	4b1d      	ldr	r3, [pc, #116]	; (8013494 <prvAddNewTaskToReadyList+0xd0>)
 801341e:	681a      	ldr	r2, [r3, #0]
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013428:	4b1b      	ldr	r3, [pc, #108]	; (8013498 <prvAddNewTaskToReadyList+0xd4>)
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	429a      	cmp	r2, r3
 801342e:	d903      	bls.n	8013438 <prvAddNewTaskToReadyList+0x74>
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013434:	4a18      	ldr	r2, [pc, #96]	; (8013498 <prvAddNewTaskToReadyList+0xd4>)
 8013436:	6013      	str	r3, [r2, #0]
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801343c:	4613      	mov	r3, r2
 801343e:	009b      	lsls	r3, r3, #2
 8013440:	4413      	add	r3, r2
 8013442:	009b      	lsls	r3, r3, #2
 8013444:	4a15      	ldr	r2, [pc, #84]	; (801349c <prvAddNewTaskToReadyList+0xd8>)
 8013446:	441a      	add	r2, r3
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	3304      	adds	r3, #4
 801344c:	4619      	mov	r1, r3
 801344e:	4610      	mov	r0, r2
 8013450:	f7ff f871 	bl	8012536 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013454:	f001 fa08 	bl	8014868 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013458:	4b0d      	ldr	r3, [pc, #52]	; (8013490 <prvAddNewTaskToReadyList+0xcc>)
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d00e      	beq.n	801347e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013460:	4b0a      	ldr	r3, [pc, #40]	; (801348c <prvAddNewTaskToReadyList+0xc8>)
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801346a:	429a      	cmp	r2, r3
 801346c:	d207      	bcs.n	801347e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801346e:	4b0c      	ldr	r3, [pc, #48]	; (80134a0 <prvAddNewTaskToReadyList+0xdc>)
 8013470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013474:	601a      	str	r2, [r3, #0]
 8013476:	f3bf 8f4f 	dsb	sy
 801347a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801347e:	bf00      	nop
 8013480:	3708      	adds	r7, #8
 8013482:	46bd      	mov	sp, r7
 8013484:	bd80      	pop	{r7, pc}
 8013486:	bf00      	nop
 8013488:	20000e48 	.word	0x20000e48
 801348c:	20000974 	.word	0x20000974
 8013490:	20000e54 	.word	0x20000e54
 8013494:	20000e64 	.word	0x20000e64
 8013498:	20000e50 	.word	0x20000e50
 801349c:	20000978 	.word	0x20000978
 80134a0:	e000ed04 	.word	0xe000ed04

080134a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b084      	sub	sp, #16
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80134ac:	2300      	movs	r3, #0
 80134ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d016      	beq.n	80134e4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80134b6:	4b13      	ldr	r3, [pc, #76]	; (8013504 <vTaskDelay+0x60>)
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d009      	beq.n	80134d2 <vTaskDelay+0x2e>
 80134be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134c2:	f383 8811 	msr	BASEPRI, r3
 80134c6:	f3bf 8f6f 	isb	sy
 80134ca:	f3bf 8f4f 	dsb	sy
 80134ce:	60bb      	str	r3, [r7, #8]
 80134d0:	e7fe      	b.n	80134d0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80134d2:	f000 f87f 	bl	80135d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80134d6:	2100      	movs	r1, #0
 80134d8:	6878      	ldr	r0, [r7, #4]
 80134da:	f000 fcd7 	bl	8013e8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80134de:	f000 f887 	bl	80135f0 <xTaskResumeAll>
 80134e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d107      	bne.n	80134fa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80134ea:	4b07      	ldr	r3, [pc, #28]	; (8013508 <vTaskDelay+0x64>)
 80134ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134f0:	601a      	str	r2, [r3, #0]
 80134f2:	f3bf 8f4f 	dsb	sy
 80134f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80134fa:	bf00      	nop
 80134fc:	3710      	adds	r7, #16
 80134fe:	46bd      	mov	sp, r7
 8013500:	bd80      	pop	{r7, pc}
 8013502:	bf00      	nop
 8013504:	20000e70 	.word	0x20000e70
 8013508:	e000ed04 	.word	0xe000ed04

0801350c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801350c:	b580      	push	{r7, lr}
 801350e:	b08a      	sub	sp, #40	; 0x28
 8013510:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013512:	2300      	movs	r3, #0
 8013514:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013516:	2300      	movs	r3, #0
 8013518:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801351a:	463a      	mov	r2, r7
 801351c:	1d39      	adds	r1, r7, #4
 801351e:	f107 0308 	add.w	r3, r7, #8
 8013522:	4618      	mov	r0, r3
 8013524:	f7fe ffa6 	bl	8012474 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013528:	6839      	ldr	r1, [r7, #0]
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	68ba      	ldr	r2, [r7, #8]
 801352e:	9202      	str	r2, [sp, #8]
 8013530:	9301      	str	r3, [sp, #4]
 8013532:	2300      	movs	r3, #0
 8013534:	9300      	str	r3, [sp, #0]
 8013536:	2300      	movs	r3, #0
 8013538:	460a      	mov	r2, r1
 801353a:	4920      	ldr	r1, [pc, #128]	; (80135bc <vTaskStartScheduler+0xb0>)
 801353c:	4820      	ldr	r0, [pc, #128]	; (80135c0 <vTaskStartScheduler+0xb4>)
 801353e:	f7ff fe13 	bl	8013168 <xTaskCreateStatic>
 8013542:	4602      	mov	r2, r0
 8013544:	4b1f      	ldr	r3, [pc, #124]	; (80135c4 <vTaskStartScheduler+0xb8>)
 8013546:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013548:	4b1e      	ldr	r3, [pc, #120]	; (80135c4 <vTaskStartScheduler+0xb8>)
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d002      	beq.n	8013556 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013550:	2301      	movs	r3, #1
 8013552:	617b      	str	r3, [r7, #20]
 8013554:	e001      	b.n	801355a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013556:	2300      	movs	r3, #0
 8013558:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801355a:	697b      	ldr	r3, [r7, #20]
 801355c:	2b01      	cmp	r3, #1
 801355e:	d102      	bne.n	8013566 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013560:	f000 fce8 	bl	8013f34 <xTimerCreateTimerTask>
 8013564:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013566:	697b      	ldr	r3, [r7, #20]
 8013568:	2b01      	cmp	r3, #1
 801356a:	d115      	bne.n	8013598 <vTaskStartScheduler+0x8c>
 801356c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013570:	f383 8811 	msr	BASEPRI, r3
 8013574:	f3bf 8f6f 	isb	sy
 8013578:	f3bf 8f4f 	dsb	sy
 801357c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801357e:	4b12      	ldr	r3, [pc, #72]	; (80135c8 <vTaskStartScheduler+0xbc>)
 8013580:	f04f 32ff 	mov.w	r2, #4294967295
 8013584:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013586:	4b11      	ldr	r3, [pc, #68]	; (80135cc <vTaskStartScheduler+0xc0>)
 8013588:	2201      	movs	r2, #1
 801358a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801358c:	4b10      	ldr	r3, [pc, #64]	; (80135d0 <vTaskStartScheduler+0xc4>)
 801358e:	2200      	movs	r2, #0
 8013590:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013592:	f001 f89d 	bl	80146d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013596:	e00d      	b.n	80135b4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013598:	697b      	ldr	r3, [r7, #20]
 801359a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801359e:	d109      	bne.n	80135b4 <vTaskStartScheduler+0xa8>
 80135a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135a4:	f383 8811 	msr	BASEPRI, r3
 80135a8:	f3bf 8f6f 	isb	sy
 80135ac:	f3bf 8f4f 	dsb	sy
 80135b0:	60fb      	str	r3, [r7, #12]
 80135b2:	e7fe      	b.n	80135b2 <vTaskStartScheduler+0xa6>
}
 80135b4:	bf00      	nop
 80135b6:	3718      	adds	r7, #24
 80135b8:	46bd      	mov	sp, r7
 80135ba:	bd80      	pop	{r7, pc}
 80135bc:	08015fec 	.word	0x08015fec
 80135c0:	08013bd5 	.word	0x08013bd5
 80135c4:	20000e6c 	.word	0x20000e6c
 80135c8:	20000e68 	.word	0x20000e68
 80135cc:	20000e54 	.word	0x20000e54
 80135d0:	20000e4c 	.word	0x20000e4c

080135d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80135d4:	b480      	push	{r7}
 80135d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80135d8:	4b04      	ldr	r3, [pc, #16]	; (80135ec <vTaskSuspendAll+0x18>)
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	3301      	adds	r3, #1
 80135de:	4a03      	ldr	r2, [pc, #12]	; (80135ec <vTaskSuspendAll+0x18>)
 80135e0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80135e2:	bf00      	nop
 80135e4:	46bd      	mov	sp, r7
 80135e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ea:	4770      	bx	lr
 80135ec:	20000e70 	.word	0x20000e70

080135f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b084      	sub	sp, #16
 80135f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80135f6:	2300      	movs	r3, #0
 80135f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80135fa:	2300      	movs	r3, #0
 80135fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80135fe:	4b41      	ldr	r3, [pc, #260]	; (8013704 <xTaskResumeAll+0x114>)
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d109      	bne.n	801361a <xTaskResumeAll+0x2a>
 8013606:	f04f 0350 	mov.w	r3, #80	; 0x50
 801360a:	f383 8811 	msr	BASEPRI, r3
 801360e:	f3bf 8f6f 	isb	sy
 8013612:	f3bf 8f4f 	dsb	sy
 8013616:	603b      	str	r3, [r7, #0]
 8013618:	e7fe      	b.n	8013618 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801361a:	f001 f8f7 	bl	801480c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801361e:	4b39      	ldr	r3, [pc, #228]	; (8013704 <xTaskResumeAll+0x114>)
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	3b01      	subs	r3, #1
 8013624:	4a37      	ldr	r2, [pc, #220]	; (8013704 <xTaskResumeAll+0x114>)
 8013626:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013628:	4b36      	ldr	r3, [pc, #216]	; (8013704 <xTaskResumeAll+0x114>)
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d162      	bne.n	80136f6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013630:	4b35      	ldr	r3, [pc, #212]	; (8013708 <xTaskResumeAll+0x118>)
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d05e      	beq.n	80136f6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013638:	e02f      	b.n	801369a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801363a:	4b34      	ldr	r3, [pc, #208]	; (801370c <xTaskResumeAll+0x11c>)
 801363c:	68db      	ldr	r3, [r3, #12]
 801363e:	68db      	ldr	r3, [r3, #12]
 8013640:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	3318      	adds	r3, #24
 8013646:	4618      	mov	r0, r3
 8013648:	f7fe ffd2 	bl	80125f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	3304      	adds	r3, #4
 8013650:	4618      	mov	r0, r3
 8013652:	f7fe ffcd 	bl	80125f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801365a:	4b2d      	ldr	r3, [pc, #180]	; (8013710 <xTaskResumeAll+0x120>)
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	429a      	cmp	r2, r3
 8013660:	d903      	bls.n	801366a <xTaskResumeAll+0x7a>
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013666:	4a2a      	ldr	r2, [pc, #168]	; (8013710 <xTaskResumeAll+0x120>)
 8013668:	6013      	str	r3, [r2, #0]
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801366e:	4613      	mov	r3, r2
 8013670:	009b      	lsls	r3, r3, #2
 8013672:	4413      	add	r3, r2
 8013674:	009b      	lsls	r3, r3, #2
 8013676:	4a27      	ldr	r2, [pc, #156]	; (8013714 <xTaskResumeAll+0x124>)
 8013678:	441a      	add	r2, r3
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	3304      	adds	r3, #4
 801367e:	4619      	mov	r1, r3
 8013680:	4610      	mov	r0, r2
 8013682:	f7fe ff58 	bl	8012536 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801368a:	4b23      	ldr	r3, [pc, #140]	; (8013718 <xTaskResumeAll+0x128>)
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013690:	429a      	cmp	r2, r3
 8013692:	d302      	bcc.n	801369a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8013694:	4b21      	ldr	r3, [pc, #132]	; (801371c <xTaskResumeAll+0x12c>)
 8013696:	2201      	movs	r2, #1
 8013698:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801369a:	4b1c      	ldr	r3, [pc, #112]	; (801370c <xTaskResumeAll+0x11c>)
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d1cb      	bne.n	801363a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d001      	beq.n	80136ac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80136a8:	f000 fb46 	bl	8013d38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80136ac:	4b1c      	ldr	r3, [pc, #112]	; (8013720 <xTaskResumeAll+0x130>)
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d010      	beq.n	80136da <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80136b8:	f000 f846 	bl	8013748 <xTaskIncrementTick>
 80136bc:	4603      	mov	r3, r0
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d002      	beq.n	80136c8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80136c2:	4b16      	ldr	r3, [pc, #88]	; (801371c <xTaskResumeAll+0x12c>)
 80136c4:	2201      	movs	r2, #1
 80136c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	3b01      	subs	r3, #1
 80136cc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d1f1      	bne.n	80136b8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80136d4:	4b12      	ldr	r3, [pc, #72]	; (8013720 <xTaskResumeAll+0x130>)
 80136d6:	2200      	movs	r2, #0
 80136d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80136da:	4b10      	ldr	r3, [pc, #64]	; (801371c <xTaskResumeAll+0x12c>)
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d009      	beq.n	80136f6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80136e2:	2301      	movs	r3, #1
 80136e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80136e6:	4b0f      	ldr	r3, [pc, #60]	; (8013724 <xTaskResumeAll+0x134>)
 80136e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136ec:	601a      	str	r2, [r3, #0]
 80136ee:	f3bf 8f4f 	dsb	sy
 80136f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80136f6:	f001 f8b7 	bl	8014868 <vPortExitCritical>

	return xAlreadyYielded;
 80136fa:	68bb      	ldr	r3, [r7, #8]
}
 80136fc:	4618      	mov	r0, r3
 80136fe:	3710      	adds	r7, #16
 8013700:	46bd      	mov	sp, r7
 8013702:	bd80      	pop	{r7, pc}
 8013704:	20000e70 	.word	0x20000e70
 8013708:	20000e48 	.word	0x20000e48
 801370c:	20000e08 	.word	0x20000e08
 8013710:	20000e50 	.word	0x20000e50
 8013714:	20000978 	.word	0x20000978
 8013718:	20000974 	.word	0x20000974
 801371c:	20000e5c 	.word	0x20000e5c
 8013720:	20000e58 	.word	0x20000e58
 8013724:	e000ed04 	.word	0xe000ed04

08013728 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013728:	b480      	push	{r7}
 801372a:	b083      	sub	sp, #12
 801372c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801372e:	4b05      	ldr	r3, [pc, #20]	; (8013744 <xTaskGetTickCount+0x1c>)
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013734:	687b      	ldr	r3, [r7, #4]
}
 8013736:	4618      	mov	r0, r3
 8013738:	370c      	adds	r7, #12
 801373a:	46bd      	mov	sp, r7
 801373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013740:	4770      	bx	lr
 8013742:	bf00      	nop
 8013744:	20000e4c 	.word	0x20000e4c

08013748 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013748:	b580      	push	{r7, lr}
 801374a:	b086      	sub	sp, #24
 801374c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801374e:	2300      	movs	r3, #0
 8013750:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013752:	4b4e      	ldr	r3, [pc, #312]	; (801388c <xTaskIncrementTick+0x144>)
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	2b00      	cmp	r3, #0
 8013758:	f040 8088 	bne.w	801386c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801375c:	4b4c      	ldr	r3, [pc, #304]	; (8013890 <xTaskIncrementTick+0x148>)
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	3301      	adds	r3, #1
 8013762:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013764:	4a4a      	ldr	r2, [pc, #296]	; (8013890 <xTaskIncrementTick+0x148>)
 8013766:	693b      	ldr	r3, [r7, #16]
 8013768:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801376a:	693b      	ldr	r3, [r7, #16]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d11f      	bne.n	80137b0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8013770:	4b48      	ldr	r3, [pc, #288]	; (8013894 <xTaskIncrementTick+0x14c>)
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d009      	beq.n	801378e <xTaskIncrementTick+0x46>
 801377a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801377e:	f383 8811 	msr	BASEPRI, r3
 8013782:	f3bf 8f6f 	isb	sy
 8013786:	f3bf 8f4f 	dsb	sy
 801378a:	603b      	str	r3, [r7, #0]
 801378c:	e7fe      	b.n	801378c <xTaskIncrementTick+0x44>
 801378e:	4b41      	ldr	r3, [pc, #260]	; (8013894 <xTaskIncrementTick+0x14c>)
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	60fb      	str	r3, [r7, #12]
 8013794:	4b40      	ldr	r3, [pc, #256]	; (8013898 <xTaskIncrementTick+0x150>)
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	4a3e      	ldr	r2, [pc, #248]	; (8013894 <xTaskIncrementTick+0x14c>)
 801379a:	6013      	str	r3, [r2, #0]
 801379c:	4a3e      	ldr	r2, [pc, #248]	; (8013898 <xTaskIncrementTick+0x150>)
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	6013      	str	r3, [r2, #0]
 80137a2:	4b3e      	ldr	r3, [pc, #248]	; (801389c <xTaskIncrementTick+0x154>)
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	3301      	adds	r3, #1
 80137a8:	4a3c      	ldr	r2, [pc, #240]	; (801389c <xTaskIncrementTick+0x154>)
 80137aa:	6013      	str	r3, [r2, #0]
 80137ac:	f000 fac4 	bl	8013d38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80137b0:	4b3b      	ldr	r3, [pc, #236]	; (80138a0 <xTaskIncrementTick+0x158>)
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	693a      	ldr	r2, [r7, #16]
 80137b6:	429a      	cmp	r2, r3
 80137b8:	d349      	bcc.n	801384e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80137ba:	4b36      	ldr	r3, [pc, #216]	; (8013894 <xTaskIncrementTick+0x14c>)
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d104      	bne.n	80137ce <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80137c4:	4b36      	ldr	r3, [pc, #216]	; (80138a0 <xTaskIncrementTick+0x158>)
 80137c6:	f04f 32ff 	mov.w	r2, #4294967295
 80137ca:	601a      	str	r2, [r3, #0]
					break;
 80137cc:	e03f      	b.n	801384e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80137ce:	4b31      	ldr	r3, [pc, #196]	; (8013894 <xTaskIncrementTick+0x14c>)
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	68db      	ldr	r3, [r3, #12]
 80137d4:	68db      	ldr	r3, [r3, #12]
 80137d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80137d8:	68bb      	ldr	r3, [r7, #8]
 80137da:	685b      	ldr	r3, [r3, #4]
 80137dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80137de:	693a      	ldr	r2, [r7, #16]
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	429a      	cmp	r2, r3
 80137e4:	d203      	bcs.n	80137ee <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80137e6:	4a2e      	ldr	r2, [pc, #184]	; (80138a0 <xTaskIncrementTick+0x158>)
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80137ec:	e02f      	b.n	801384e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80137ee:	68bb      	ldr	r3, [r7, #8]
 80137f0:	3304      	adds	r3, #4
 80137f2:	4618      	mov	r0, r3
 80137f4:	f7fe fefc 	bl	80125f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80137f8:	68bb      	ldr	r3, [r7, #8]
 80137fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d004      	beq.n	801380a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013800:	68bb      	ldr	r3, [r7, #8]
 8013802:	3318      	adds	r3, #24
 8013804:	4618      	mov	r0, r3
 8013806:	f7fe fef3 	bl	80125f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801380a:	68bb      	ldr	r3, [r7, #8]
 801380c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801380e:	4b25      	ldr	r3, [pc, #148]	; (80138a4 <xTaskIncrementTick+0x15c>)
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	429a      	cmp	r2, r3
 8013814:	d903      	bls.n	801381e <xTaskIncrementTick+0xd6>
 8013816:	68bb      	ldr	r3, [r7, #8]
 8013818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801381a:	4a22      	ldr	r2, [pc, #136]	; (80138a4 <xTaskIncrementTick+0x15c>)
 801381c:	6013      	str	r3, [r2, #0]
 801381e:	68bb      	ldr	r3, [r7, #8]
 8013820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013822:	4613      	mov	r3, r2
 8013824:	009b      	lsls	r3, r3, #2
 8013826:	4413      	add	r3, r2
 8013828:	009b      	lsls	r3, r3, #2
 801382a:	4a1f      	ldr	r2, [pc, #124]	; (80138a8 <xTaskIncrementTick+0x160>)
 801382c:	441a      	add	r2, r3
 801382e:	68bb      	ldr	r3, [r7, #8]
 8013830:	3304      	adds	r3, #4
 8013832:	4619      	mov	r1, r3
 8013834:	4610      	mov	r0, r2
 8013836:	f7fe fe7e 	bl	8012536 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801383a:	68bb      	ldr	r3, [r7, #8]
 801383c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801383e:	4b1b      	ldr	r3, [pc, #108]	; (80138ac <xTaskIncrementTick+0x164>)
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013844:	429a      	cmp	r2, r3
 8013846:	d3b8      	bcc.n	80137ba <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8013848:	2301      	movs	r3, #1
 801384a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801384c:	e7b5      	b.n	80137ba <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801384e:	4b17      	ldr	r3, [pc, #92]	; (80138ac <xTaskIncrementTick+0x164>)
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013854:	4914      	ldr	r1, [pc, #80]	; (80138a8 <xTaskIncrementTick+0x160>)
 8013856:	4613      	mov	r3, r2
 8013858:	009b      	lsls	r3, r3, #2
 801385a:	4413      	add	r3, r2
 801385c:	009b      	lsls	r3, r3, #2
 801385e:	440b      	add	r3, r1
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	2b01      	cmp	r3, #1
 8013864:	d907      	bls.n	8013876 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8013866:	2301      	movs	r3, #1
 8013868:	617b      	str	r3, [r7, #20]
 801386a:	e004      	b.n	8013876 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801386c:	4b10      	ldr	r3, [pc, #64]	; (80138b0 <xTaskIncrementTick+0x168>)
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	3301      	adds	r3, #1
 8013872:	4a0f      	ldr	r2, [pc, #60]	; (80138b0 <xTaskIncrementTick+0x168>)
 8013874:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013876:	4b0f      	ldr	r3, [pc, #60]	; (80138b4 <xTaskIncrementTick+0x16c>)
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d001      	beq.n	8013882 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 801387e:	2301      	movs	r3, #1
 8013880:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013882:	697b      	ldr	r3, [r7, #20]
}
 8013884:	4618      	mov	r0, r3
 8013886:	3718      	adds	r7, #24
 8013888:	46bd      	mov	sp, r7
 801388a:	bd80      	pop	{r7, pc}
 801388c:	20000e70 	.word	0x20000e70
 8013890:	20000e4c 	.word	0x20000e4c
 8013894:	20000e00 	.word	0x20000e00
 8013898:	20000e04 	.word	0x20000e04
 801389c:	20000e60 	.word	0x20000e60
 80138a0:	20000e68 	.word	0x20000e68
 80138a4:	20000e50 	.word	0x20000e50
 80138a8:	20000978 	.word	0x20000978
 80138ac:	20000974 	.word	0x20000974
 80138b0:	20000e58 	.word	0x20000e58
 80138b4:	20000e5c 	.word	0x20000e5c

080138b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80138b8:	b480      	push	{r7}
 80138ba:	b085      	sub	sp, #20
 80138bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80138be:	4b27      	ldr	r3, [pc, #156]	; (801395c <vTaskSwitchContext+0xa4>)
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d003      	beq.n	80138ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80138c6:	4b26      	ldr	r3, [pc, #152]	; (8013960 <vTaskSwitchContext+0xa8>)
 80138c8:	2201      	movs	r2, #1
 80138ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80138cc:	e040      	b.n	8013950 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80138ce:	4b24      	ldr	r3, [pc, #144]	; (8013960 <vTaskSwitchContext+0xa8>)
 80138d0:	2200      	movs	r2, #0
 80138d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80138d4:	4b23      	ldr	r3, [pc, #140]	; (8013964 <vTaskSwitchContext+0xac>)
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	60fb      	str	r3, [r7, #12]
 80138da:	e00f      	b.n	80138fc <vTaskSwitchContext+0x44>
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d109      	bne.n	80138f6 <vTaskSwitchContext+0x3e>
 80138e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138e6:	f383 8811 	msr	BASEPRI, r3
 80138ea:	f3bf 8f6f 	isb	sy
 80138ee:	f3bf 8f4f 	dsb	sy
 80138f2:	607b      	str	r3, [r7, #4]
 80138f4:	e7fe      	b.n	80138f4 <vTaskSwitchContext+0x3c>
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	3b01      	subs	r3, #1
 80138fa:	60fb      	str	r3, [r7, #12]
 80138fc:	491a      	ldr	r1, [pc, #104]	; (8013968 <vTaskSwitchContext+0xb0>)
 80138fe:	68fa      	ldr	r2, [r7, #12]
 8013900:	4613      	mov	r3, r2
 8013902:	009b      	lsls	r3, r3, #2
 8013904:	4413      	add	r3, r2
 8013906:	009b      	lsls	r3, r3, #2
 8013908:	440b      	add	r3, r1
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d0e5      	beq.n	80138dc <vTaskSwitchContext+0x24>
 8013910:	68fa      	ldr	r2, [r7, #12]
 8013912:	4613      	mov	r3, r2
 8013914:	009b      	lsls	r3, r3, #2
 8013916:	4413      	add	r3, r2
 8013918:	009b      	lsls	r3, r3, #2
 801391a:	4a13      	ldr	r2, [pc, #76]	; (8013968 <vTaskSwitchContext+0xb0>)
 801391c:	4413      	add	r3, r2
 801391e:	60bb      	str	r3, [r7, #8]
 8013920:	68bb      	ldr	r3, [r7, #8]
 8013922:	685b      	ldr	r3, [r3, #4]
 8013924:	685a      	ldr	r2, [r3, #4]
 8013926:	68bb      	ldr	r3, [r7, #8]
 8013928:	605a      	str	r2, [r3, #4]
 801392a:	68bb      	ldr	r3, [r7, #8]
 801392c:	685a      	ldr	r2, [r3, #4]
 801392e:	68bb      	ldr	r3, [r7, #8]
 8013930:	3308      	adds	r3, #8
 8013932:	429a      	cmp	r2, r3
 8013934:	d104      	bne.n	8013940 <vTaskSwitchContext+0x88>
 8013936:	68bb      	ldr	r3, [r7, #8]
 8013938:	685b      	ldr	r3, [r3, #4]
 801393a:	685a      	ldr	r2, [r3, #4]
 801393c:	68bb      	ldr	r3, [r7, #8]
 801393e:	605a      	str	r2, [r3, #4]
 8013940:	68bb      	ldr	r3, [r7, #8]
 8013942:	685b      	ldr	r3, [r3, #4]
 8013944:	68db      	ldr	r3, [r3, #12]
 8013946:	4a09      	ldr	r2, [pc, #36]	; (801396c <vTaskSwitchContext+0xb4>)
 8013948:	6013      	str	r3, [r2, #0]
 801394a:	4a06      	ldr	r2, [pc, #24]	; (8013964 <vTaskSwitchContext+0xac>)
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	6013      	str	r3, [r2, #0]
}
 8013950:	bf00      	nop
 8013952:	3714      	adds	r7, #20
 8013954:	46bd      	mov	sp, r7
 8013956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395a:	4770      	bx	lr
 801395c:	20000e70 	.word	0x20000e70
 8013960:	20000e5c 	.word	0x20000e5c
 8013964:	20000e50 	.word	0x20000e50
 8013968:	20000978 	.word	0x20000978
 801396c:	20000974 	.word	0x20000974

08013970 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013970:	b580      	push	{r7, lr}
 8013972:	b084      	sub	sp, #16
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
 8013978:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d109      	bne.n	8013994 <vTaskPlaceOnEventList+0x24>
 8013980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013984:	f383 8811 	msr	BASEPRI, r3
 8013988:	f3bf 8f6f 	isb	sy
 801398c:	f3bf 8f4f 	dsb	sy
 8013990:	60fb      	str	r3, [r7, #12]
 8013992:	e7fe      	b.n	8013992 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013994:	4b07      	ldr	r3, [pc, #28]	; (80139b4 <vTaskPlaceOnEventList+0x44>)
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	3318      	adds	r3, #24
 801399a:	4619      	mov	r1, r3
 801399c:	6878      	ldr	r0, [r7, #4]
 801399e:	f7fe fdee 	bl	801257e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80139a2:	2101      	movs	r1, #1
 80139a4:	6838      	ldr	r0, [r7, #0]
 80139a6:	f000 fa71 	bl	8013e8c <prvAddCurrentTaskToDelayedList>
}
 80139aa:	bf00      	nop
 80139ac:	3710      	adds	r7, #16
 80139ae:	46bd      	mov	sp, r7
 80139b0:	bd80      	pop	{r7, pc}
 80139b2:	bf00      	nop
 80139b4:	20000974 	.word	0x20000974

080139b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b086      	sub	sp, #24
 80139bc:	af00      	add	r7, sp, #0
 80139be:	60f8      	str	r0, [r7, #12]
 80139c0:	60b9      	str	r1, [r7, #8]
 80139c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d109      	bne.n	80139de <vTaskPlaceOnEventListRestricted+0x26>
 80139ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139ce:	f383 8811 	msr	BASEPRI, r3
 80139d2:	f3bf 8f6f 	isb	sy
 80139d6:	f3bf 8f4f 	dsb	sy
 80139da:	617b      	str	r3, [r7, #20]
 80139dc:	e7fe      	b.n	80139dc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80139de:	4b0a      	ldr	r3, [pc, #40]	; (8013a08 <vTaskPlaceOnEventListRestricted+0x50>)
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	3318      	adds	r3, #24
 80139e4:	4619      	mov	r1, r3
 80139e6:	68f8      	ldr	r0, [r7, #12]
 80139e8:	f7fe fda5 	bl	8012536 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d002      	beq.n	80139f8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80139f2:	f04f 33ff 	mov.w	r3, #4294967295
 80139f6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80139f8:	6879      	ldr	r1, [r7, #4]
 80139fa:	68b8      	ldr	r0, [r7, #8]
 80139fc:	f000 fa46 	bl	8013e8c <prvAddCurrentTaskToDelayedList>
	}
 8013a00:	bf00      	nop
 8013a02:	3718      	adds	r7, #24
 8013a04:	46bd      	mov	sp, r7
 8013a06:	bd80      	pop	{r7, pc}
 8013a08:	20000974 	.word	0x20000974

08013a0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013a0c:	b580      	push	{r7, lr}
 8013a0e:	b086      	sub	sp, #24
 8013a10:	af00      	add	r7, sp, #0
 8013a12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	68db      	ldr	r3, [r3, #12]
 8013a18:	68db      	ldr	r3, [r3, #12]
 8013a1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013a1c:	693b      	ldr	r3, [r7, #16]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d109      	bne.n	8013a36 <xTaskRemoveFromEventList+0x2a>
 8013a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a26:	f383 8811 	msr	BASEPRI, r3
 8013a2a:	f3bf 8f6f 	isb	sy
 8013a2e:	f3bf 8f4f 	dsb	sy
 8013a32:	60fb      	str	r3, [r7, #12]
 8013a34:	e7fe      	b.n	8013a34 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013a36:	693b      	ldr	r3, [r7, #16]
 8013a38:	3318      	adds	r3, #24
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	f7fe fdd8 	bl	80125f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013a40:	4b1d      	ldr	r3, [pc, #116]	; (8013ab8 <xTaskRemoveFromEventList+0xac>)
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d11d      	bne.n	8013a84 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013a48:	693b      	ldr	r3, [r7, #16]
 8013a4a:	3304      	adds	r3, #4
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	f7fe fdcf 	bl	80125f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013a52:	693b      	ldr	r3, [r7, #16]
 8013a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a56:	4b19      	ldr	r3, [pc, #100]	; (8013abc <xTaskRemoveFromEventList+0xb0>)
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	429a      	cmp	r2, r3
 8013a5c:	d903      	bls.n	8013a66 <xTaskRemoveFromEventList+0x5a>
 8013a5e:	693b      	ldr	r3, [r7, #16]
 8013a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a62:	4a16      	ldr	r2, [pc, #88]	; (8013abc <xTaskRemoveFromEventList+0xb0>)
 8013a64:	6013      	str	r3, [r2, #0]
 8013a66:	693b      	ldr	r3, [r7, #16]
 8013a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a6a:	4613      	mov	r3, r2
 8013a6c:	009b      	lsls	r3, r3, #2
 8013a6e:	4413      	add	r3, r2
 8013a70:	009b      	lsls	r3, r3, #2
 8013a72:	4a13      	ldr	r2, [pc, #76]	; (8013ac0 <xTaskRemoveFromEventList+0xb4>)
 8013a74:	441a      	add	r2, r3
 8013a76:	693b      	ldr	r3, [r7, #16]
 8013a78:	3304      	adds	r3, #4
 8013a7a:	4619      	mov	r1, r3
 8013a7c:	4610      	mov	r0, r2
 8013a7e:	f7fe fd5a 	bl	8012536 <vListInsertEnd>
 8013a82:	e005      	b.n	8013a90 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013a84:	693b      	ldr	r3, [r7, #16]
 8013a86:	3318      	adds	r3, #24
 8013a88:	4619      	mov	r1, r3
 8013a8a:	480e      	ldr	r0, [pc, #56]	; (8013ac4 <xTaskRemoveFromEventList+0xb8>)
 8013a8c:	f7fe fd53 	bl	8012536 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013a90:	693b      	ldr	r3, [r7, #16]
 8013a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a94:	4b0c      	ldr	r3, [pc, #48]	; (8013ac8 <xTaskRemoveFromEventList+0xbc>)
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a9a:	429a      	cmp	r2, r3
 8013a9c:	d905      	bls.n	8013aaa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013a9e:	2301      	movs	r3, #1
 8013aa0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013aa2:	4b0a      	ldr	r3, [pc, #40]	; (8013acc <xTaskRemoveFromEventList+0xc0>)
 8013aa4:	2201      	movs	r2, #1
 8013aa6:	601a      	str	r2, [r3, #0]
 8013aa8:	e001      	b.n	8013aae <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8013aaa:	2300      	movs	r3, #0
 8013aac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013aae:	697b      	ldr	r3, [r7, #20]
}
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	3718      	adds	r7, #24
 8013ab4:	46bd      	mov	sp, r7
 8013ab6:	bd80      	pop	{r7, pc}
 8013ab8:	20000e70 	.word	0x20000e70
 8013abc:	20000e50 	.word	0x20000e50
 8013ac0:	20000978 	.word	0x20000978
 8013ac4:	20000e08 	.word	0x20000e08
 8013ac8:	20000974 	.word	0x20000974
 8013acc:	20000e5c 	.word	0x20000e5c

08013ad0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013ad0:	b480      	push	{r7}
 8013ad2:	b083      	sub	sp, #12
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013ad8:	4b06      	ldr	r3, [pc, #24]	; (8013af4 <vTaskInternalSetTimeOutState+0x24>)
 8013ada:	681a      	ldr	r2, [r3, #0]
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013ae0:	4b05      	ldr	r3, [pc, #20]	; (8013af8 <vTaskInternalSetTimeOutState+0x28>)
 8013ae2:	681a      	ldr	r2, [r3, #0]
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	605a      	str	r2, [r3, #4]
}
 8013ae8:	bf00      	nop
 8013aea:	370c      	adds	r7, #12
 8013aec:	46bd      	mov	sp, r7
 8013aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af2:	4770      	bx	lr
 8013af4:	20000e60 	.word	0x20000e60
 8013af8:	20000e4c 	.word	0x20000e4c

08013afc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b088      	sub	sp, #32
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	6078      	str	r0, [r7, #4]
 8013b04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d109      	bne.n	8013b20 <xTaskCheckForTimeOut+0x24>
 8013b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b10:	f383 8811 	msr	BASEPRI, r3
 8013b14:	f3bf 8f6f 	isb	sy
 8013b18:	f3bf 8f4f 	dsb	sy
 8013b1c:	613b      	str	r3, [r7, #16]
 8013b1e:	e7fe      	b.n	8013b1e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8013b20:	683b      	ldr	r3, [r7, #0]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d109      	bne.n	8013b3a <xTaskCheckForTimeOut+0x3e>
 8013b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b2a:	f383 8811 	msr	BASEPRI, r3
 8013b2e:	f3bf 8f6f 	isb	sy
 8013b32:	f3bf 8f4f 	dsb	sy
 8013b36:	60fb      	str	r3, [r7, #12]
 8013b38:	e7fe      	b.n	8013b38 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8013b3a:	f000 fe67 	bl	801480c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013b3e:	4b1d      	ldr	r3, [pc, #116]	; (8013bb4 <xTaskCheckForTimeOut+0xb8>)
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	685b      	ldr	r3, [r3, #4]
 8013b48:	69ba      	ldr	r2, [r7, #24]
 8013b4a:	1ad3      	subs	r3, r2, r3
 8013b4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013b4e:	683b      	ldr	r3, [r7, #0]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b56:	d102      	bne.n	8013b5e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013b58:	2300      	movs	r3, #0
 8013b5a:	61fb      	str	r3, [r7, #28]
 8013b5c:	e023      	b.n	8013ba6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	681a      	ldr	r2, [r3, #0]
 8013b62:	4b15      	ldr	r3, [pc, #84]	; (8013bb8 <xTaskCheckForTimeOut+0xbc>)
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	429a      	cmp	r2, r3
 8013b68:	d007      	beq.n	8013b7a <xTaskCheckForTimeOut+0x7e>
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	685b      	ldr	r3, [r3, #4]
 8013b6e:	69ba      	ldr	r2, [r7, #24]
 8013b70:	429a      	cmp	r2, r3
 8013b72:	d302      	bcc.n	8013b7a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013b74:	2301      	movs	r3, #1
 8013b76:	61fb      	str	r3, [r7, #28]
 8013b78:	e015      	b.n	8013ba6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013b7a:	683b      	ldr	r3, [r7, #0]
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	697a      	ldr	r2, [r7, #20]
 8013b80:	429a      	cmp	r2, r3
 8013b82:	d20b      	bcs.n	8013b9c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013b84:	683b      	ldr	r3, [r7, #0]
 8013b86:	681a      	ldr	r2, [r3, #0]
 8013b88:	697b      	ldr	r3, [r7, #20]
 8013b8a:	1ad2      	subs	r2, r2, r3
 8013b8c:	683b      	ldr	r3, [r7, #0]
 8013b8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013b90:	6878      	ldr	r0, [r7, #4]
 8013b92:	f7ff ff9d 	bl	8013ad0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013b96:	2300      	movs	r3, #0
 8013b98:	61fb      	str	r3, [r7, #28]
 8013b9a:	e004      	b.n	8013ba6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8013b9c:	683b      	ldr	r3, [r7, #0]
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013ba2:	2301      	movs	r3, #1
 8013ba4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013ba6:	f000 fe5f 	bl	8014868 <vPortExitCritical>

	return xReturn;
 8013baa:	69fb      	ldr	r3, [r7, #28]
}
 8013bac:	4618      	mov	r0, r3
 8013bae:	3720      	adds	r7, #32
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	bd80      	pop	{r7, pc}
 8013bb4:	20000e4c 	.word	0x20000e4c
 8013bb8:	20000e60 	.word	0x20000e60

08013bbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013bbc:	b480      	push	{r7}
 8013bbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013bc0:	4b03      	ldr	r3, [pc, #12]	; (8013bd0 <vTaskMissedYield+0x14>)
 8013bc2:	2201      	movs	r2, #1
 8013bc4:	601a      	str	r2, [r3, #0]
}
 8013bc6:	bf00      	nop
 8013bc8:	46bd      	mov	sp, r7
 8013bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bce:	4770      	bx	lr
 8013bd0:	20000e5c 	.word	0x20000e5c

08013bd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	b082      	sub	sp, #8
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013bdc:	f000 f852 	bl	8013c84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013be0:	4b06      	ldr	r3, [pc, #24]	; (8013bfc <prvIdleTask+0x28>)
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	2b01      	cmp	r3, #1
 8013be6:	d9f9      	bls.n	8013bdc <prvIdleTask+0x8>
			{
				taskYIELD();
 8013be8:	4b05      	ldr	r3, [pc, #20]	; (8013c00 <prvIdleTask+0x2c>)
 8013bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013bee:	601a      	str	r2, [r3, #0]
 8013bf0:	f3bf 8f4f 	dsb	sy
 8013bf4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013bf8:	e7f0      	b.n	8013bdc <prvIdleTask+0x8>
 8013bfa:	bf00      	nop
 8013bfc:	20000978 	.word	0x20000978
 8013c00:	e000ed04 	.word	0xe000ed04

08013c04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b082      	sub	sp, #8
 8013c08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	607b      	str	r3, [r7, #4]
 8013c0e:	e00c      	b.n	8013c2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013c10:	687a      	ldr	r2, [r7, #4]
 8013c12:	4613      	mov	r3, r2
 8013c14:	009b      	lsls	r3, r3, #2
 8013c16:	4413      	add	r3, r2
 8013c18:	009b      	lsls	r3, r3, #2
 8013c1a:	4a12      	ldr	r2, [pc, #72]	; (8013c64 <prvInitialiseTaskLists+0x60>)
 8013c1c:	4413      	add	r3, r2
 8013c1e:	4618      	mov	r0, r3
 8013c20:	f7fe fc5c 	bl	80124dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	3301      	adds	r3, #1
 8013c28:	607b      	str	r3, [r7, #4]
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	2b37      	cmp	r3, #55	; 0x37
 8013c2e:	d9ef      	bls.n	8013c10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013c30:	480d      	ldr	r0, [pc, #52]	; (8013c68 <prvInitialiseTaskLists+0x64>)
 8013c32:	f7fe fc53 	bl	80124dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013c36:	480d      	ldr	r0, [pc, #52]	; (8013c6c <prvInitialiseTaskLists+0x68>)
 8013c38:	f7fe fc50 	bl	80124dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013c3c:	480c      	ldr	r0, [pc, #48]	; (8013c70 <prvInitialiseTaskLists+0x6c>)
 8013c3e:	f7fe fc4d 	bl	80124dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013c42:	480c      	ldr	r0, [pc, #48]	; (8013c74 <prvInitialiseTaskLists+0x70>)
 8013c44:	f7fe fc4a 	bl	80124dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013c48:	480b      	ldr	r0, [pc, #44]	; (8013c78 <prvInitialiseTaskLists+0x74>)
 8013c4a:	f7fe fc47 	bl	80124dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013c4e:	4b0b      	ldr	r3, [pc, #44]	; (8013c7c <prvInitialiseTaskLists+0x78>)
 8013c50:	4a05      	ldr	r2, [pc, #20]	; (8013c68 <prvInitialiseTaskLists+0x64>)
 8013c52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013c54:	4b0a      	ldr	r3, [pc, #40]	; (8013c80 <prvInitialiseTaskLists+0x7c>)
 8013c56:	4a05      	ldr	r2, [pc, #20]	; (8013c6c <prvInitialiseTaskLists+0x68>)
 8013c58:	601a      	str	r2, [r3, #0]
}
 8013c5a:	bf00      	nop
 8013c5c:	3708      	adds	r7, #8
 8013c5e:	46bd      	mov	sp, r7
 8013c60:	bd80      	pop	{r7, pc}
 8013c62:	bf00      	nop
 8013c64:	20000978 	.word	0x20000978
 8013c68:	20000dd8 	.word	0x20000dd8
 8013c6c:	20000dec 	.word	0x20000dec
 8013c70:	20000e08 	.word	0x20000e08
 8013c74:	20000e1c 	.word	0x20000e1c
 8013c78:	20000e34 	.word	0x20000e34
 8013c7c:	20000e00 	.word	0x20000e00
 8013c80:	20000e04 	.word	0x20000e04

08013c84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b082      	sub	sp, #8
 8013c88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013c8a:	e019      	b.n	8013cc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013c8c:	f000 fdbe 	bl	801480c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013c90:	4b0f      	ldr	r3, [pc, #60]	; (8013cd0 <prvCheckTasksWaitingTermination+0x4c>)
 8013c92:	68db      	ldr	r3, [r3, #12]
 8013c94:	68db      	ldr	r3, [r3, #12]
 8013c96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	3304      	adds	r3, #4
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	f7fe fca7 	bl	80125f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013ca2:	4b0c      	ldr	r3, [pc, #48]	; (8013cd4 <prvCheckTasksWaitingTermination+0x50>)
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	3b01      	subs	r3, #1
 8013ca8:	4a0a      	ldr	r2, [pc, #40]	; (8013cd4 <prvCheckTasksWaitingTermination+0x50>)
 8013caa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013cac:	4b0a      	ldr	r3, [pc, #40]	; (8013cd8 <prvCheckTasksWaitingTermination+0x54>)
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	3b01      	subs	r3, #1
 8013cb2:	4a09      	ldr	r2, [pc, #36]	; (8013cd8 <prvCheckTasksWaitingTermination+0x54>)
 8013cb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013cb6:	f000 fdd7 	bl	8014868 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013cba:	6878      	ldr	r0, [r7, #4]
 8013cbc:	f000 f80e 	bl	8013cdc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013cc0:	4b05      	ldr	r3, [pc, #20]	; (8013cd8 <prvCheckTasksWaitingTermination+0x54>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d1e1      	bne.n	8013c8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013cc8:	bf00      	nop
 8013cca:	3708      	adds	r7, #8
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	bd80      	pop	{r7, pc}
 8013cd0:	20000e1c 	.word	0x20000e1c
 8013cd4:	20000e48 	.word	0x20000e48
 8013cd8:	20000e30 	.word	0x20000e30

08013cdc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b084      	sub	sp, #16
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d108      	bne.n	8013d00 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	f000 ff66 	bl	8014bc4 <vPortFree>
				vPortFree( pxTCB );
 8013cf8:	6878      	ldr	r0, [r7, #4]
 8013cfa:	f000 ff63 	bl	8014bc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013cfe:	e017      	b.n	8013d30 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013d06:	2b01      	cmp	r3, #1
 8013d08:	d103      	bne.n	8013d12 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8013d0a:	6878      	ldr	r0, [r7, #4]
 8013d0c:	f000 ff5a 	bl	8014bc4 <vPortFree>
	}
 8013d10:	e00e      	b.n	8013d30 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013d18:	2b02      	cmp	r3, #2
 8013d1a:	d009      	beq.n	8013d30 <prvDeleteTCB+0x54>
 8013d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d20:	f383 8811 	msr	BASEPRI, r3
 8013d24:	f3bf 8f6f 	isb	sy
 8013d28:	f3bf 8f4f 	dsb	sy
 8013d2c:	60fb      	str	r3, [r7, #12]
 8013d2e:	e7fe      	b.n	8013d2e <prvDeleteTCB+0x52>
	}
 8013d30:	bf00      	nop
 8013d32:	3710      	adds	r7, #16
 8013d34:	46bd      	mov	sp, r7
 8013d36:	bd80      	pop	{r7, pc}

08013d38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013d38:	b480      	push	{r7}
 8013d3a:	b083      	sub	sp, #12
 8013d3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013d3e:	4b0c      	ldr	r3, [pc, #48]	; (8013d70 <prvResetNextTaskUnblockTime+0x38>)
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d104      	bne.n	8013d52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013d48:	4b0a      	ldr	r3, [pc, #40]	; (8013d74 <prvResetNextTaskUnblockTime+0x3c>)
 8013d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8013d4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013d50:	e008      	b.n	8013d64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d52:	4b07      	ldr	r3, [pc, #28]	; (8013d70 <prvResetNextTaskUnblockTime+0x38>)
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	68db      	ldr	r3, [r3, #12]
 8013d58:	68db      	ldr	r3, [r3, #12]
 8013d5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	685b      	ldr	r3, [r3, #4]
 8013d60:	4a04      	ldr	r2, [pc, #16]	; (8013d74 <prvResetNextTaskUnblockTime+0x3c>)
 8013d62:	6013      	str	r3, [r2, #0]
}
 8013d64:	bf00      	nop
 8013d66:	370c      	adds	r7, #12
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d6e:	4770      	bx	lr
 8013d70:	20000e00 	.word	0x20000e00
 8013d74:	20000e68 	.word	0x20000e68

08013d78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013d78:	b480      	push	{r7}
 8013d7a:	b083      	sub	sp, #12
 8013d7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013d7e:	4b0b      	ldr	r3, [pc, #44]	; (8013dac <xTaskGetSchedulerState+0x34>)
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d102      	bne.n	8013d8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013d86:	2301      	movs	r3, #1
 8013d88:	607b      	str	r3, [r7, #4]
 8013d8a:	e008      	b.n	8013d9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013d8c:	4b08      	ldr	r3, [pc, #32]	; (8013db0 <xTaskGetSchedulerState+0x38>)
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d102      	bne.n	8013d9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013d94:	2302      	movs	r3, #2
 8013d96:	607b      	str	r3, [r7, #4]
 8013d98:	e001      	b.n	8013d9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013d9e:	687b      	ldr	r3, [r7, #4]
	}
 8013da0:	4618      	mov	r0, r3
 8013da2:	370c      	adds	r7, #12
 8013da4:	46bd      	mov	sp, r7
 8013da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013daa:	4770      	bx	lr
 8013dac:	20000e54 	.word	0x20000e54
 8013db0:	20000e70 	.word	0x20000e70

08013db4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b086      	sub	sp, #24
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013dc0:	2300      	movs	r3, #0
 8013dc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d054      	beq.n	8013e74 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013dca:	4b2d      	ldr	r3, [pc, #180]	; (8013e80 <xTaskPriorityDisinherit+0xcc>)
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	693a      	ldr	r2, [r7, #16]
 8013dd0:	429a      	cmp	r2, r3
 8013dd2:	d009      	beq.n	8013de8 <xTaskPriorityDisinherit+0x34>
 8013dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dd8:	f383 8811 	msr	BASEPRI, r3
 8013ddc:	f3bf 8f6f 	isb	sy
 8013de0:	f3bf 8f4f 	dsb	sy
 8013de4:	60fb      	str	r3, [r7, #12]
 8013de6:	e7fe      	b.n	8013de6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8013de8:	693b      	ldr	r3, [r7, #16]
 8013dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d109      	bne.n	8013e04 <xTaskPriorityDisinherit+0x50>
 8013df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013df4:	f383 8811 	msr	BASEPRI, r3
 8013df8:	f3bf 8f6f 	isb	sy
 8013dfc:	f3bf 8f4f 	dsb	sy
 8013e00:	60bb      	str	r3, [r7, #8]
 8013e02:	e7fe      	b.n	8013e02 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8013e04:	693b      	ldr	r3, [r7, #16]
 8013e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013e08:	1e5a      	subs	r2, r3, #1
 8013e0a:	693b      	ldr	r3, [r7, #16]
 8013e0c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013e0e:	693b      	ldr	r3, [r7, #16]
 8013e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e12:	693b      	ldr	r3, [r7, #16]
 8013e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013e16:	429a      	cmp	r2, r3
 8013e18:	d02c      	beq.n	8013e74 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013e1a:	693b      	ldr	r3, [r7, #16]
 8013e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d128      	bne.n	8013e74 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013e22:	693b      	ldr	r3, [r7, #16]
 8013e24:	3304      	adds	r3, #4
 8013e26:	4618      	mov	r0, r3
 8013e28:	f7fe fbe2 	bl	80125f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013e2c:	693b      	ldr	r3, [r7, #16]
 8013e2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013e30:	693b      	ldr	r3, [r7, #16]
 8013e32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013e34:	693b      	ldr	r3, [r7, #16]
 8013e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e38:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013e3c:	693b      	ldr	r3, [r7, #16]
 8013e3e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013e40:	693b      	ldr	r3, [r7, #16]
 8013e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e44:	4b0f      	ldr	r3, [pc, #60]	; (8013e84 <xTaskPriorityDisinherit+0xd0>)
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	429a      	cmp	r2, r3
 8013e4a:	d903      	bls.n	8013e54 <xTaskPriorityDisinherit+0xa0>
 8013e4c:	693b      	ldr	r3, [r7, #16]
 8013e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e50:	4a0c      	ldr	r2, [pc, #48]	; (8013e84 <xTaskPriorityDisinherit+0xd0>)
 8013e52:	6013      	str	r3, [r2, #0]
 8013e54:	693b      	ldr	r3, [r7, #16]
 8013e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e58:	4613      	mov	r3, r2
 8013e5a:	009b      	lsls	r3, r3, #2
 8013e5c:	4413      	add	r3, r2
 8013e5e:	009b      	lsls	r3, r3, #2
 8013e60:	4a09      	ldr	r2, [pc, #36]	; (8013e88 <xTaskPriorityDisinherit+0xd4>)
 8013e62:	441a      	add	r2, r3
 8013e64:	693b      	ldr	r3, [r7, #16]
 8013e66:	3304      	adds	r3, #4
 8013e68:	4619      	mov	r1, r3
 8013e6a:	4610      	mov	r0, r2
 8013e6c:	f7fe fb63 	bl	8012536 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013e70:	2301      	movs	r3, #1
 8013e72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013e74:	697b      	ldr	r3, [r7, #20]
	}
 8013e76:	4618      	mov	r0, r3
 8013e78:	3718      	adds	r7, #24
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	bd80      	pop	{r7, pc}
 8013e7e:	bf00      	nop
 8013e80:	20000974 	.word	0x20000974
 8013e84:	20000e50 	.word	0x20000e50
 8013e88:	20000978 	.word	0x20000978

08013e8c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013e8c:	b580      	push	{r7, lr}
 8013e8e:	b084      	sub	sp, #16
 8013e90:	af00      	add	r7, sp, #0
 8013e92:	6078      	str	r0, [r7, #4]
 8013e94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013e96:	4b21      	ldr	r3, [pc, #132]	; (8013f1c <prvAddCurrentTaskToDelayedList+0x90>)
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013e9c:	4b20      	ldr	r3, [pc, #128]	; (8013f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	3304      	adds	r3, #4
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	f7fe fba4 	bl	80125f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013eae:	d10a      	bne.n	8013ec6 <prvAddCurrentTaskToDelayedList+0x3a>
 8013eb0:	683b      	ldr	r3, [r7, #0]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d007      	beq.n	8013ec6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013eb6:	4b1a      	ldr	r3, [pc, #104]	; (8013f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	3304      	adds	r3, #4
 8013ebc:	4619      	mov	r1, r3
 8013ebe:	4819      	ldr	r0, [pc, #100]	; (8013f24 <prvAddCurrentTaskToDelayedList+0x98>)
 8013ec0:	f7fe fb39 	bl	8012536 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013ec4:	e026      	b.n	8013f14 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013ec6:	68fa      	ldr	r2, [r7, #12]
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	4413      	add	r3, r2
 8013ecc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013ece:	4b14      	ldr	r3, [pc, #80]	; (8013f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	68ba      	ldr	r2, [r7, #8]
 8013ed4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013ed6:	68ba      	ldr	r2, [r7, #8]
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	429a      	cmp	r2, r3
 8013edc:	d209      	bcs.n	8013ef2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013ede:	4b12      	ldr	r3, [pc, #72]	; (8013f28 <prvAddCurrentTaskToDelayedList+0x9c>)
 8013ee0:	681a      	ldr	r2, [r3, #0]
 8013ee2:	4b0f      	ldr	r3, [pc, #60]	; (8013f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	3304      	adds	r3, #4
 8013ee8:	4619      	mov	r1, r3
 8013eea:	4610      	mov	r0, r2
 8013eec:	f7fe fb47 	bl	801257e <vListInsert>
}
 8013ef0:	e010      	b.n	8013f14 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013ef2:	4b0e      	ldr	r3, [pc, #56]	; (8013f2c <prvAddCurrentTaskToDelayedList+0xa0>)
 8013ef4:	681a      	ldr	r2, [r3, #0]
 8013ef6:	4b0a      	ldr	r3, [pc, #40]	; (8013f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	3304      	adds	r3, #4
 8013efc:	4619      	mov	r1, r3
 8013efe:	4610      	mov	r0, r2
 8013f00:	f7fe fb3d 	bl	801257e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013f04:	4b0a      	ldr	r3, [pc, #40]	; (8013f30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	68ba      	ldr	r2, [r7, #8]
 8013f0a:	429a      	cmp	r2, r3
 8013f0c:	d202      	bcs.n	8013f14 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013f0e:	4a08      	ldr	r2, [pc, #32]	; (8013f30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013f10:	68bb      	ldr	r3, [r7, #8]
 8013f12:	6013      	str	r3, [r2, #0]
}
 8013f14:	bf00      	nop
 8013f16:	3710      	adds	r7, #16
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	bd80      	pop	{r7, pc}
 8013f1c:	20000e4c 	.word	0x20000e4c
 8013f20:	20000974 	.word	0x20000974
 8013f24:	20000e34 	.word	0x20000e34
 8013f28:	20000e04 	.word	0x20000e04
 8013f2c:	20000e00 	.word	0x20000e00
 8013f30:	20000e68 	.word	0x20000e68

08013f34 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b08a      	sub	sp, #40	; 0x28
 8013f38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013f3e:	f000 faff 	bl	8014540 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8013f42:	4b1c      	ldr	r3, [pc, #112]	; (8013fb4 <xTimerCreateTimerTask+0x80>)
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d021      	beq.n	8013f8e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013f4a:	2300      	movs	r3, #0
 8013f4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013f4e:	2300      	movs	r3, #0
 8013f50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013f52:	1d3a      	adds	r2, r7, #4
 8013f54:	f107 0108 	add.w	r1, r7, #8
 8013f58:	f107 030c 	add.w	r3, r7, #12
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	f7fe faa3 	bl	80124a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8013f62:	6879      	ldr	r1, [r7, #4]
 8013f64:	68bb      	ldr	r3, [r7, #8]
 8013f66:	68fa      	ldr	r2, [r7, #12]
 8013f68:	9202      	str	r2, [sp, #8]
 8013f6a:	9301      	str	r3, [sp, #4]
 8013f6c:	2302      	movs	r3, #2
 8013f6e:	9300      	str	r3, [sp, #0]
 8013f70:	2300      	movs	r3, #0
 8013f72:	460a      	mov	r2, r1
 8013f74:	4910      	ldr	r1, [pc, #64]	; (8013fb8 <xTimerCreateTimerTask+0x84>)
 8013f76:	4811      	ldr	r0, [pc, #68]	; (8013fbc <xTimerCreateTimerTask+0x88>)
 8013f78:	f7ff f8f6 	bl	8013168 <xTaskCreateStatic>
 8013f7c:	4602      	mov	r2, r0
 8013f7e:	4b10      	ldr	r3, [pc, #64]	; (8013fc0 <xTimerCreateTimerTask+0x8c>)
 8013f80:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8013f82:	4b0f      	ldr	r3, [pc, #60]	; (8013fc0 <xTimerCreateTimerTask+0x8c>)
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d001      	beq.n	8013f8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013f8a:	2301      	movs	r3, #1
 8013f8c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8013f8e:	697b      	ldr	r3, [r7, #20]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d109      	bne.n	8013fa8 <xTimerCreateTimerTask+0x74>
 8013f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f98:	f383 8811 	msr	BASEPRI, r3
 8013f9c:	f3bf 8f6f 	isb	sy
 8013fa0:	f3bf 8f4f 	dsb	sy
 8013fa4:	613b      	str	r3, [r7, #16]
 8013fa6:	e7fe      	b.n	8013fa6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8013fa8:	697b      	ldr	r3, [r7, #20]
}
 8013faa:	4618      	mov	r0, r3
 8013fac:	3718      	adds	r7, #24
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	bd80      	pop	{r7, pc}
 8013fb2:	bf00      	nop
 8013fb4:	20000ea4 	.word	0x20000ea4
 8013fb8:	08015ff4 	.word	0x08015ff4
 8013fbc:	080140f5 	.word	0x080140f5
 8013fc0:	20000ea8 	.word	0x20000ea8

08013fc4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b08a      	sub	sp, #40	; 0x28
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	60f8      	str	r0, [r7, #12]
 8013fcc:	60b9      	str	r1, [r7, #8]
 8013fce:	607a      	str	r2, [r7, #4]
 8013fd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013fd2:	2300      	movs	r3, #0
 8013fd4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d109      	bne.n	8013ff0 <xTimerGenericCommand+0x2c>
 8013fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fe0:	f383 8811 	msr	BASEPRI, r3
 8013fe4:	f3bf 8f6f 	isb	sy
 8013fe8:	f3bf 8f4f 	dsb	sy
 8013fec:	623b      	str	r3, [r7, #32]
 8013fee:	e7fe      	b.n	8013fee <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013ff0:	4b19      	ldr	r3, [pc, #100]	; (8014058 <xTimerGenericCommand+0x94>)
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d02a      	beq.n	801404e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013ff8:	68bb      	ldr	r3, [r7, #8]
 8013ffa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014004:	68bb      	ldr	r3, [r7, #8]
 8014006:	2b05      	cmp	r3, #5
 8014008:	dc18      	bgt.n	801403c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801400a:	f7ff feb5 	bl	8013d78 <xTaskGetSchedulerState>
 801400e:	4603      	mov	r3, r0
 8014010:	2b02      	cmp	r3, #2
 8014012:	d109      	bne.n	8014028 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014014:	4b10      	ldr	r3, [pc, #64]	; (8014058 <xTimerGenericCommand+0x94>)
 8014016:	6818      	ldr	r0, [r3, #0]
 8014018:	f107 0110 	add.w	r1, r7, #16
 801401c:	2300      	movs	r3, #0
 801401e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014020:	f7fe fc4e 	bl	80128c0 <xQueueGenericSend>
 8014024:	6278      	str	r0, [r7, #36]	; 0x24
 8014026:	e012      	b.n	801404e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014028:	4b0b      	ldr	r3, [pc, #44]	; (8014058 <xTimerGenericCommand+0x94>)
 801402a:	6818      	ldr	r0, [r3, #0]
 801402c:	f107 0110 	add.w	r1, r7, #16
 8014030:	2300      	movs	r3, #0
 8014032:	2200      	movs	r2, #0
 8014034:	f7fe fc44 	bl	80128c0 <xQueueGenericSend>
 8014038:	6278      	str	r0, [r7, #36]	; 0x24
 801403a:	e008      	b.n	801404e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801403c:	4b06      	ldr	r3, [pc, #24]	; (8014058 <xTimerGenericCommand+0x94>)
 801403e:	6818      	ldr	r0, [r3, #0]
 8014040:	f107 0110 	add.w	r1, r7, #16
 8014044:	2300      	movs	r3, #0
 8014046:	683a      	ldr	r2, [r7, #0]
 8014048:	f7fe fd34 	bl	8012ab4 <xQueueGenericSendFromISR>
 801404c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014050:	4618      	mov	r0, r3
 8014052:	3728      	adds	r7, #40	; 0x28
 8014054:	46bd      	mov	sp, r7
 8014056:	bd80      	pop	{r7, pc}
 8014058:	20000ea4 	.word	0x20000ea4

0801405c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801405c:	b580      	push	{r7, lr}
 801405e:	b088      	sub	sp, #32
 8014060:	af02      	add	r7, sp, #8
 8014062:	6078      	str	r0, [r7, #4]
 8014064:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014066:	4b22      	ldr	r3, [pc, #136]	; (80140f0 <prvProcessExpiredTimer+0x94>)
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	68db      	ldr	r3, [r3, #12]
 801406c:	68db      	ldr	r3, [r3, #12]
 801406e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014070:	697b      	ldr	r3, [r7, #20]
 8014072:	3304      	adds	r3, #4
 8014074:	4618      	mov	r0, r3
 8014076:	f7fe fabb 	bl	80125f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801407a:	697b      	ldr	r3, [r7, #20]
 801407c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014080:	f003 0304 	and.w	r3, r3, #4
 8014084:	2b00      	cmp	r3, #0
 8014086:	d021      	beq.n	80140cc <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014088:	697b      	ldr	r3, [r7, #20]
 801408a:	699a      	ldr	r2, [r3, #24]
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	18d1      	adds	r1, r2, r3
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	683a      	ldr	r2, [r7, #0]
 8014094:	6978      	ldr	r0, [r7, #20]
 8014096:	f000 f8d1 	bl	801423c <prvInsertTimerInActiveList>
 801409a:	4603      	mov	r3, r0
 801409c:	2b00      	cmp	r3, #0
 801409e:	d01e      	beq.n	80140de <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80140a0:	2300      	movs	r3, #0
 80140a2:	9300      	str	r3, [sp, #0]
 80140a4:	2300      	movs	r3, #0
 80140a6:	687a      	ldr	r2, [r7, #4]
 80140a8:	2100      	movs	r1, #0
 80140aa:	6978      	ldr	r0, [r7, #20]
 80140ac:	f7ff ff8a 	bl	8013fc4 <xTimerGenericCommand>
 80140b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80140b2:	693b      	ldr	r3, [r7, #16]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d112      	bne.n	80140de <prvProcessExpiredTimer+0x82>
 80140b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140bc:	f383 8811 	msr	BASEPRI, r3
 80140c0:	f3bf 8f6f 	isb	sy
 80140c4:	f3bf 8f4f 	dsb	sy
 80140c8:	60fb      	str	r3, [r7, #12]
 80140ca:	e7fe      	b.n	80140ca <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80140cc:	697b      	ldr	r3, [r7, #20]
 80140ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80140d2:	f023 0301 	bic.w	r3, r3, #1
 80140d6:	b2da      	uxtb	r2, r3
 80140d8:	697b      	ldr	r3, [r7, #20]
 80140da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80140de:	697b      	ldr	r3, [r7, #20]
 80140e0:	6a1b      	ldr	r3, [r3, #32]
 80140e2:	6978      	ldr	r0, [r7, #20]
 80140e4:	4798      	blx	r3
}
 80140e6:	bf00      	nop
 80140e8:	3718      	adds	r7, #24
 80140ea:	46bd      	mov	sp, r7
 80140ec:	bd80      	pop	{r7, pc}
 80140ee:	bf00      	nop
 80140f0:	20000e9c 	.word	0x20000e9c

080140f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b084      	sub	sp, #16
 80140f8:	af00      	add	r7, sp, #0
 80140fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80140fc:	f107 0308 	add.w	r3, r7, #8
 8014100:	4618      	mov	r0, r3
 8014102:	f000 f857 	bl	80141b4 <prvGetNextExpireTime>
 8014106:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014108:	68bb      	ldr	r3, [r7, #8]
 801410a:	4619      	mov	r1, r3
 801410c:	68f8      	ldr	r0, [r7, #12]
 801410e:	f000 f803 	bl	8014118 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8014112:	f000 f8d5 	bl	80142c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014116:	e7f1      	b.n	80140fc <prvTimerTask+0x8>

08014118 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014118:	b580      	push	{r7, lr}
 801411a:	b084      	sub	sp, #16
 801411c:	af00      	add	r7, sp, #0
 801411e:	6078      	str	r0, [r7, #4]
 8014120:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8014122:	f7ff fa57 	bl	80135d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014126:	f107 0308 	add.w	r3, r7, #8
 801412a:	4618      	mov	r0, r3
 801412c:	f000 f866 	bl	80141fc <prvSampleTimeNow>
 8014130:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8014132:	68bb      	ldr	r3, [r7, #8]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d130      	bne.n	801419a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014138:	683b      	ldr	r3, [r7, #0]
 801413a:	2b00      	cmp	r3, #0
 801413c:	d10a      	bne.n	8014154 <prvProcessTimerOrBlockTask+0x3c>
 801413e:	687a      	ldr	r2, [r7, #4]
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	429a      	cmp	r2, r3
 8014144:	d806      	bhi.n	8014154 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8014146:	f7ff fa53 	bl	80135f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801414a:	68f9      	ldr	r1, [r7, #12]
 801414c:	6878      	ldr	r0, [r7, #4]
 801414e:	f7ff ff85 	bl	801405c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8014152:	e024      	b.n	801419e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8014154:	683b      	ldr	r3, [r7, #0]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d008      	beq.n	801416c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801415a:	4b13      	ldr	r3, [pc, #76]	; (80141a8 <prvProcessTimerOrBlockTask+0x90>)
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d101      	bne.n	8014168 <prvProcessTimerOrBlockTask+0x50>
 8014164:	2301      	movs	r3, #1
 8014166:	e000      	b.n	801416a <prvProcessTimerOrBlockTask+0x52>
 8014168:	2300      	movs	r3, #0
 801416a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801416c:	4b0f      	ldr	r3, [pc, #60]	; (80141ac <prvProcessTimerOrBlockTask+0x94>)
 801416e:	6818      	ldr	r0, [r3, #0]
 8014170:	687a      	ldr	r2, [r7, #4]
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	1ad3      	subs	r3, r2, r3
 8014176:	683a      	ldr	r2, [r7, #0]
 8014178:	4619      	mov	r1, r3
 801417a:	f7fe ffc1 	bl	8013100 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801417e:	f7ff fa37 	bl	80135f0 <xTaskResumeAll>
 8014182:	4603      	mov	r3, r0
 8014184:	2b00      	cmp	r3, #0
 8014186:	d10a      	bne.n	801419e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014188:	4b09      	ldr	r3, [pc, #36]	; (80141b0 <prvProcessTimerOrBlockTask+0x98>)
 801418a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801418e:	601a      	str	r2, [r3, #0]
 8014190:	f3bf 8f4f 	dsb	sy
 8014194:	f3bf 8f6f 	isb	sy
}
 8014198:	e001      	b.n	801419e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801419a:	f7ff fa29 	bl	80135f0 <xTaskResumeAll>
}
 801419e:	bf00      	nop
 80141a0:	3710      	adds	r7, #16
 80141a2:	46bd      	mov	sp, r7
 80141a4:	bd80      	pop	{r7, pc}
 80141a6:	bf00      	nop
 80141a8:	20000ea0 	.word	0x20000ea0
 80141ac:	20000ea4 	.word	0x20000ea4
 80141b0:	e000ed04 	.word	0xe000ed04

080141b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80141b4:	b480      	push	{r7}
 80141b6:	b085      	sub	sp, #20
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80141bc:	4b0e      	ldr	r3, [pc, #56]	; (80141f8 <prvGetNextExpireTime+0x44>)
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d101      	bne.n	80141ca <prvGetNextExpireTime+0x16>
 80141c6:	2201      	movs	r2, #1
 80141c8:	e000      	b.n	80141cc <prvGetNextExpireTime+0x18>
 80141ca:	2200      	movs	r2, #0
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d105      	bne.n	80141e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80141d8:	4b07      	ldr	r3, [pc, #28]	; (80141f8 <prvGetNextExpireTime+0x44>)
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	68db      	ldr	r3, [r3, #12]
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	60fb      	str	r3, [r7, #12]
 80141e2:	e001      	b.n	80141e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80141e4:	2300      	movs	r3, #0
 80141e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80141e8:	68fb      	ldr	r3, [r7, #12]
}
 80141ea:	4618      	mov	r0, r3
 80141ec:	3714      	adds	r7, #20
 80141ee:	46bd      	mov	sp, r7
 80141f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f4:	4770      	bx	lr
 80141f6:	bf00      	nop
 80141f8:	20000e9c 	.word	0x20000e9c

080141fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80141fc:	b580      	push	{r7, lr}
 80141fe:	b084      	sub	sp, #16
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014204:	f7ff fa90 	bl	8013728 <xTaskGetTickCount>
 8014208:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801420a:	4b0b      	ldr	r3, [pc, #44]	; (8014238 <prvSampleTimeNow+0x3c>)
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	68fa      	ldr	r2, [r7, #12]
 8014210:	429a      	cmp	r2, r3
 8014212:	d205      	bcs.n	8014220 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014214:	f000 f930 	bl	8014478 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	2201      	movs	r2, #1
 801421c:	601a      	str	r2, [r3, #0]
 801421e:	e002      	b.n	8014226 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	2200      	movs	r2, #0
 8014224:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014226:	4a04      	ldr	r2, [pc, #16]	; (8014238 <prvSampleTimeNow+0x3c>)
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801422c:	68fb      	ldr	r3, [r7, #12]
}
 801422e:	4618      	mov	r0, r3
 8014230:	3710      	adds	r7, #16
 8014232:	46bd      	mov	sp, r7
 8014234:	bd80      	pop	{r7, pc}
 8014236:	bf00      	nop
 8014238:	20000eac 	.word	0x20000eac

0801423c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801423c:	b580      	push	{r7, lr}
 801423e:	b086      	sub	sp, #24
 8014240:	af00      	add	r7, sp, #0
 8014242:	60f8      	str	r0, [r7, #12]
 8014244:	60b9      	str	r1, [r7, #8]
 8014246:	607a      	str	r2, [r7, #4]
 8014248:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801424a:	2300      	movs	r3, #0
 801424c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	68ba      	ldr	r2, [r7, #8]
 8014252:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	68fa      	ldr	r2, [r7, #12]
 8014258:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801425a:	68ba      	ldr	r2, [r7, #8]
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	429a      	cmp	r2, r3
 8014260:	d812      	bhi.n	8014288 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014262:	687a      	ldr	r2, [r7, #4]
 8014264:	683b      	ldr	r3, [r7, #0]
 8014266:	1ad2      	subs	r2, r2, r3
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	699b      	ldr	r3, [r3, #24]
 801426c:	429a      	cmp	r2, r3
 801426e:	d302      	bcc.n	8014276 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014270:	2301      	movs	r3, #1
 8014272:	617b      	str	r3, [r7, #20]
 8014274:	e01b      	b.n	80142ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014276:	4b10      	ldr	r3, [pc, #64]	; (80142b8 <prvInsertTimerInActiveList+0x7c>)
 8014278:	681a      	ldr	r2, [r3, #0]
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	3304      	adds	r3, #4
 801427e:	4619      	mov	r1, r3
 8014280:	4610      	mov	r0, r2
 8014282:	f7fe f97c 	bl	801257e <vListInsert>
 8014286:	e012      	b.n	80142ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014288:	687a      	ldr	r2, [r7, #4]
 801428a:	683b      	ldr	r3, [r7, #0]
 801428c:	429a      	cmp	r2, r3
 801428e:	d206      	bcs.n	801429e <prvInsertTimerInActiveList+0x62>
 8014290:	68ba      	ldr	r2, [r7, #8]
 8014292:	683b      	ldr	r3, [r7, #0]
 8014294:	429a      	cmp	r2, r3
 8014296:	d302      	bcc.n	801429e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014298:	2301      	movs	r3, #1
 801429a:	617b      	str	r3, [r7, #20]
 801429c:	e007      	b.n	80142ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801429e:	4b07      	ldr	r3, [pc, #28]	; (80142bc <prvInsertTimerInActiveList+0x80>)
 80142a0:	681a      	ldr	r2, [r3, #0]
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	3304      	adds	r3, #4
 80142a6:	4619      	mov	r1, r3
 80142a8:	4610      	mov	r0, r2
 80142aa:	f7fe f968 	bl	801257e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80142ae:	697b      	ldr	r3, [r7, #20]
}
 80142b0:	4618      	mov	r0, r3
 80142b2:	3718      	adds	r7, #24
 80142b4:	46bd      	mov	sp, r7
 80142b6:	bd80      	pop	{r7, pc}
 80142b8:	20000ea0 	.word	0x20000ea0
 80142bc:	20000e9c 	.word	0x20000e9c

080142c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b08e      	sub	sp, #56	; 0x38
 80142c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80142c6:	e0c6      	b.n	8014456 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	da17      	bge.n	80142fe <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80142ce:	1d3b      	adds	r3, r7, #4
 80142d0:	3304      	adds	r3, #4
 80142d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80142d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d109      	bne.n	80142ee <prvProcessReceivedCommands+0x2e>
 80142da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142de:	f383 8811 	msr	BASEPRI, r3
 80142e2:	f3bf 8f6f 	isb	sy
 80142e6:	f3bf 8f4f 	dsb	sy
 80142ea:	61fb      	str	r3, [r7, #28]
 80142ec:	e7fe      	b.n	80142ec <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80142ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142f4:	6850      	ldr	r0, [r2, #4]
 80142f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142f8:	6892      	ldr	r2, [r2, #8]
 80142fa:	4611      	mov	r1, r2
 80142fc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	2b00      	cmp	r3, #0
 8014302:	f2c0 80a7 	blt.w	8014454 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801430c:	695b      	ldr	r3, [r3, #20]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d004      	beq.n	801431c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014314:	3304      	adds	r3, #4
 8014316:	4618      	mov	r0, r3
 8014318:	f7fe f96a 	bl	80125f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801431c:	463b      	mov	r3, r7
 801431e:	4618      	mov	r0, r3
 8014320:	f7ff ff6c 	bl	80141fc <prvSampleTimeNow>
 8014324:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	2b09      	cmp	r3, #9
 801432a:	f200 8094 	bhi.w	8014456 <prvProcessReceivedCommands+0x196>
 801432e:	a201      	add	r2, pc, #4	; (adr r2, 8014334 <prvProcessReceivedCommands+0x74>)
 8014330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014334:	0801435d 	.word	0x0801435d
 8014338:	0801435d 	.word	0x0801435d
 801433c:	0801435d 	.word	0x0801435d
 8014340:	080143cf 	.word	0x080143cf
 8014344:	080143e3 	.word	0x080143e3
 8014348:	0801442b 	.word	0x0801442b
 801434c:	0801435d 	.word	0x0801435d
 8014350:	0801435d 	.word	0x0801435d
 8014354:	080143cf 	.word	0x080143cf
 8014358:	080143e3 	.word	0x080143e3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801435c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801435e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014362:	f043 0301 	orr.w	r3, r3, #1
 8014366:	b2da      	uxtb	r2, r3
 8014368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801436a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801436e:	68ba      	ldr	r2, [r7, #8]
 8014370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014372:	699b      	ldr	r3, [r3, #24]
 8014374:	18d1      	adds	r1, r2, r3
 8014376:	68bb      	ldr	r3, [r7, #8]
 8014378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801437a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801437c:	f7ff ff5e 	bl	801423c <prvInsertTimerInActiveList>
 8014380:	4603      	mov	r3, r0
 8014382:	2b00      	cmp	r3, #0
 8014384:	d067      	beq.n	8014456 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014388:	6a1b      	ldr	r3, [r3, #32]
 801438a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801438c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801438e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014390:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014394:	f003 0304 	and.w	r3, r3, #4
 8014398:	2b00      	cmp	r3, #0
 801439a:	d05c      	beq.n	8014456 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801439c:	68ba      	ldr	r2, [r7, #8]
 801439e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143a0:	699b      	ldr	r3, [r3, #24]
 80143a2:	441a      	add	r2, r3
 80143a4:	2300      	movs	r3, #0
 80143a6:	9300      	str	r3, [sp, #0]
 80143a8:	2300      	movs	r3, #0
 80143aa:	2100      	movs	r1, #0
 80143ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80143ae:	f7ff fe09 	bl	8013fc4 <xTimerGenericCommand>
 80143b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80143b4:	6a3b      	ldr	r3, [r7, #32]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d14d      	bne.n	8014456 <prvProcessReceivedCommands+0x196>
 80143ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143be:	f383 8811 	msr	BASEPRI, r3
 80143c2:	f3bf 8f6f 	isb	sy
 80143c6:	f3bf 8f4f 	dsb	sy
 80143ca:	61bb      	str	r3, [r7, #24]
 80143cc:	e7fe      	b.n	80143cc <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80143ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80143d4:	f023 0301 	bic.w	r3, r3, #1
 80143d8:	b2da      	uxtb	r2, r3
 80143da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80143e0:	e039      	b.n	8014456 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80143e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80143e8:	f043 0301 	orr.w	r3, r3, #1
 80143ec:	b2da      	uxtb	r2, r3
 80143ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80143f4:	68ba      	ldr	r2, [r7, #8]
 80143f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80143fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143fc:	699b      	ldr	r3, [r3, #24]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d109      	bne.n	8014416 <prvProcessReceivedCommands+0x156>
 8014402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014406:	f383 8811 	msr	BASEPRI, r3
 801440a:	f3bf 8f6f 	isb	sy
 801440e:	f3bf 8f4f 	dsb	sy
 8014412:	617b      	str	r3, [r7, #20]
 8014414:	e7fe      	b.n	8014414 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014418:	699a      	ldr	r2, [r3, #24]
 801441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801441c:	18d1      	adds	r1, r2, r3
 801441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014424:	f7ff ff0a 	bl	801423c <prvInsertTimerInActiveList>
					break;
 8014428:	e015      	b.n	8014456 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801442a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801442c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014430:	f003 0302 	and.w	r3, r3, #2
 8014434:	2b00      	cmp	r3, #0
 8014436:	d103      	bne.n	8014440 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8014438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801443a:	f000 fbc3 	bl	8014bc4 <vPortFree>
 801443e:	e00a      	b.n	8014456 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014442:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014446:	f023 0301 	bic.w	r3, r3, #1
 801444a:	b2da      	uxtb	r2, r3
 801444c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801444e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014452:	e000      	b.n	8014456 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8014454:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014456:	4b07      	ldr	r3, [pc, #28]	; (8014474 <prvProcessReceivedCommands+0x1b4>)
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	1d39      	adds	r1, r7, #4
 801445c:	2200      	movs	r2, #0
 801445e:	4618      	mov	r0, r3
 8014460:	f7fe fbbc 	bl	8012bdc <xQueueReceive>
 8014464:	4603      	mov	r3, r0
 8014466:	2b00      	cmp	r3, #0
 8014468:	f47f af2e 	bne.w	80142c8 <prvProcessReceivedCommands+0x8>
	}
}
 801446c:	bf00      	nop
 801446e:	3730      	adds	r7, #48	; 0x30
 8014470:	46bd      	mov	sp, r7
 8014472:	bd80      	pop	{r7, pc}
 8014474:	20000ea4 	.word	0x20000ea4

08014478 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014478:	b580      	push	{r7, lr}
 801447a:	b088      	sub	sp, #32
 801447c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801447e:	e047      	b.n	8014510 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014480:	4b2d      	ldr	r3, [pc, #180]	; (8014538 <prvSwitchTimerLists+0xc0>)
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	68db      	ldr	r3, [r3, #12]
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801448a:	4b2b      	ldr	r3, [pc, #172]	; (8014538 <prvSwitchTimerLists+0xc0>)
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	68db      	ldr	r3, [r3, #12]
 8014490:	68db      	ldr	r3, [r3, #12]
 8014492:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	3304      	adds	r3, #4
 8014498:	4618      	mov	r0, r3
 801449a:	f7fe f8a9 	bl	80125f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	6a1b      	ldr	r3, [r3, #32]
 80144a2:	68f8      	ldr	r0, [r7, #12]
 80144a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80144ac:	f003 0304 	and.w	r3, r3, #4
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d02d      	beq.n	8014510 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	699b      	ldr	r3, [r3, #24]
 80144b8:	693a      	ldr	r2, [r7, #16]
 80144ba:	4413      	add	r3, r2
 80144bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80144be:	68ba      	ldr	r2, [r7, #8]
 80144c0:	693b      	ldr	r3, [r7, #16]
 80144c2:	429a      	cmp	r2, r3
 80144c4:	d90e      	bls.n	80144e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	68ba      	ldr	r2, [r7, #8]
 80144ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	68fa      	ldr	r2, [r7, #12]
 80144d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80144d2:	4b19      	ldr	r3, [pc, #100]	; (8014538 <prvSwitchTimerLists+0xc0>)
 80144d4:	681a      	ldr	r2, [r3, #0]
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	3304      	adds	r3, #4
 80144da:	4619      	mov	r1, r3
 80144dc:	4610      	mov	r0, r2
 80144de:	f7fe f84e 	bl	801257e <vListInsert>
 80144e2:	e015      	b.n	8014510 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80144e4:	2300      	movs	r3, #0
 80144e6:	9300      	str	r3, [sp, #0]
 80144e8:	2300      	movs	r3, #0
 80144ea:	693a      	ldr	r2, [r7, #16]
 80144ec:	2100      	movs	r1, #0
 80144ee:	68f8      	ldr	r0, [r7, #12]
 80144f0:	f7ff fd68 	bl	8013fc4 <xTimerGenericCommand>
 80144f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d109      	bne.n	8014510 <prvSwitchTimerLists+0x98>
 80144fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014500:	f383 8811 	msr	BASEPRI, r3
 8014504:	f3bf 8f6f 	isb	sy
 8014508:	f3bf 8f4f 	dsb	sy
 801450c:	603b      	str	r3, [r7, #0]
 801450e:	e7fe      	b.n	801450e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014510:	4b09      	ldr	r3, [pc, #36]	; (8014538 <prvSwitchTimerLists+0xc0>)
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	2b00      	cmp	r3, #0
 8014518:	d1b2      	bne.n	8014480 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801451a:	4b07      	ldr	r3, [pc, #28]	; (8014538 <prvSwitchTimerLists+0xc0>)
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014520:	4b06      	ldr	r3, [pc, #24]	; (801453c <prvSwitchTimerLists+0xc4>)
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	4a04      	ldr	r2, [pc, #16]	; (8014538 <prvSwitchTimerLists+0xc0>)
 8014526:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014528:	4a04      	ldr	r2, [pc, #16]	; (801453c <prvSwitchTimerLists+0xc4>)
 801452a:	697b      	ldr	r3, [r7, #20]
 801452c:	6013      	str	r3, [r2, #0]
}
 801452e:	bf00      	nop
 8014530:	3718      	adds	r7, #24
 8014532:	46bd      	mov	sp, r7
 8014534:	bd80      	pop	{r7, pc}
 8014536:	bf00      	nop
 8014538:	20000e9c 	.word	0x20000e9c
 801453c:	20000ea0 	.word	0x20000ea0

08014540 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014540:	b580      	push	{r7, lr}
 8014542:	b082      	sub	sp, #8
 8014544:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014546:	f000 f961 	bl	801480c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801454a:	4b15      	ldr	r3, [pc, #84]	; (80145a0 <prvCheckForValidListAndQueue+0x60>)
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d120      	bne.n	8014594 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014552:	4814      	ldr	r0, [pc, #80]	; (80145a4 <prvCheckForValidListAndQueue+0x64>)
 8014554:	f7fd ffc2 	bl	80124dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014558:	4813      	ldr	r0, [pc, #76]	; (80145a8 <prvCheckForValidListAndQueue+0x68>)
 801455a:	f7fd ffbf 	bl	80124dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801455e:	4b13      	ldr	r3, [pc, #76]	; (80145ac <prvCheckForValidListAndQueue+0x6c>)
 8014560:	4a10      	ldr	r2, [pc, #64]	; (80145a4 <prvCheckForValidListAndQueue+0x64>)
 8014562:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014564:	4b12      	ldr	r3, [pc, #72]	; (80145b0 <prvCheckForValidListAndQueue+0x70>)
 8014566:	4a10      	ldr	r2, [pc, #64]	; (80145a8 <prvCheckForValidListAndQueue+0x68>)
 8014568:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801456a:	2300      	movs	r3, #0
 801456c:	9300      	str	r3, [sp, #0]
 801456e:	4b11      	ldr	r3, [pc, #68]	; (80145b4 <prvCheckForValidListAndQueue+0x74>)
 8014570:	4a11      	ldr	r2, [pc, #68]	; (80145b8 <prvCheckForValidListAndQueue+0x78>)
 8014572:	2110      	movs	r1, #16
 8014574:	200a      	movs	r0, #10
 8014576:	f7fe f8cd 	bl	8012714 <xQueueGenericCreateStatic>
 801457a:	4602      	mov	r2, r0
 801457c:	4b08      	ldr	r3, [pc, #32]	; (80145a0 <prvCheckForValidListAndQueue+0x60>)
 801457e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014580:	4b07      	ldr	r3, [pc, #28]	; (80145a0 <prvCheckForValidListAndQueue+0x60>)
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	2b00      	cmp	r3, #0
 8014586:	d005      	beq.n	8014594 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014588:	4b05      	ldr	r3, [pc, #20]	; (80145a0 <prvCheckForValidListAndQueue+0x60>)
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	490b      	ldr	r1, [pc, #44]	; (80145bc <prvCheckForValidListAndQueue+0x7c>)
 801458e:	4618      	mov	r0, r3
 8014590:	f7fe fd8e 	bl	80130b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014594:	f000 f968 	bl	8014868 <vPortExitCritical>
}
 8014598:	bf00      	nop
 801459a:	46bd      	mov	sp, r7
 801459c:	bd80      	pop	{r7, pc}
 801459e:	bf00      	nop
 80145a0:	20000ea4 	.word	0x20000ea4
 80145a4:	20000e74 	.word	0x20000e74
 80145a8:	20000e88 	.word	0x20000e88
 80145ac:	20000e9c 	.word	0x20000e9c
 80145b0:	20000ea0 	.word	0x20000ea0
 80145b4:	20000f50 	.word	0x20000f50
 80145b8:	20000eb0 	.word	0x20000eb0
 80145bc:	08015ffc 	.word	0x08015ffc

080145c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80145c0:	b480      	push	{r7}
 80145c2:	b085      	sub	sp, #20
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	60f8      	str	r0, [r7, #12]
 80145c8:	60b9      	str	r1, [r7, #8]
 80145ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	3b04      	subs	r3, #4
 80145d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80145d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	3b04      	subs	r3, #4
 80145de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80145e0:	68bb      	ldr	r3, [r7, #8]
 80145e2:	f023 0201 	bic.w	r2, r3, #1
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	3b04      	subs	r3, #4
 80145ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80145f0:	4a0c      	ldr	r2, [pc, #48]	; (8014624 <pxPortInitialiseStack+0x64>)
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	3b14      	subs	r3, #20
 80145fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80145fc:	687a      	ldr	r2, [r7, #4]
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	3b04      	subs	r3, #4
 8014606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	f06f 0202 	mvn.w	r2, #2
 801460e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	3b20      	subs	r3, #32
 8014614:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014616:	68fb      	ldr	r3, [r7, #12]
}
 8014618:	4618      	mov	r0, r3
 801461a:	3714      	adds	r7, #20
 801461c:	46bd      	mov	sp, r7
 801461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014622:	4770      	bx	lr
 8014624:	08014629 	.word	0x08014629

08014628 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014628:	b480      	push	{r7}
 801462a:	b085      	sub	sp, #20
 801462c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801462e:	2300      	movs	r3, #0
 8014630:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014632:	4b11      	ldr	r3, [pc, #68]	; (8014678 <prvTaskExitError+0x50>)
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	f1b3 3fff 	cmp.w	r3, #4294967295
 801463a:	d009      	beq.n	8014650 <prvTaskExitError+0x28>
 801463c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014640:	f383 8811 	msr	BASEPRI, r3
 8014644:	f3bf 8f6f 	isb	sy
 8014648:	f3bf 8f4f 	dsb	sy
 801464c:	60fb      	str	r3, [r7, #12]
 801464e:	e7fe      	b.n	801464e <prvTaskExitError+0x26>
 8014650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014654:	f383 8811 	msr	BASEPRI, r3
 8014658:	f3bf 8f6f 	isb	sy
 801465c:	f3bf 8f4f 	dsb	sy
 8014660:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014662:	bf00      	nop
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	2b00      	cmp	r3, #0
 8014668:	d0fc      	beq.n	8014664 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801466a:	bf00      	nop
 801466c:	3714      	adds	r7, #20
 801466e:	46bd      	mov	sp, r7
 8014670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014674:	4770      	bx	lr
 8014676:	bf00      	nop
 8014678:	200000c4 	.word	0x200000c4
 801467c:	00000000 	.word	0x00000000

08014680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014680:	4b07      	ldr	r3, [pc, #28]	; (80146a0 <pxCurrentTCBConst2>)
 8014682:	6819      	ldr	r1, [r3, #0]
 8014684:	6808      	ldr	r0, [r1, #0]
 8014686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801468a:	f380 8809 	msr	PSP, r0
 801468e:	f3bf 8f6f 	isb	sy
 8014692:	f04f 0000 	mov.w	r0, #0
 8014696:	f380 8811 	msr	BASEPRI, r0
 801469a:	4770      	bx	lr
 801469c:	f3af 8000 	nop.w

080146a0 <pxCurrentTCBConst2>:
 80146a0:	20000974 	.word	0x20000974
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80146a4:	bf00      	nop
 80146a6:	bf00      	nop

080146a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80146a8:	4808      	ldr	r0, [pc, #32]	; (80146cc <prvPortStartFirstTask+0x24>)
 80146aa:	6800      	ldr	r0, [r0, #0]
 80146ac:	6800      	ldr	r0, [r0, #0]
 80146ae:	f380 8808 	msr	MSP, r0
 80146b2:	f04f 0000 	mov.w	r0, #0
 80146b6:	f380 8814 	msr	CONTROL, r0
 80146ba:	b662      	cpsie	i
 80146bc:	b661      	cpsie	f
 80146be:	f3bf 8f4f 	dsb	sy
 80146c2:	f3bf 8f6f 	isb	sy
 80146c6:	df00      	svc	0
 80146c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80146ca:	bf00      	nop
 80146cc:	e000ed08 	.word	0xe000ed08

080146d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80146d0:	b580      	push	{r7, lr}
 80146d2:	b086      	sub	sp, #24
 80146d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80146d6:	4b44      	ldr	r3, [pc, #272]	; (80147e8 <xPortStartScheduler+0x118>)
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	4a44      	ldr	r2, [pc, #272]	; (80147ec <xPortStartScheduler+0x11c>)
 80146dc:	4293      	cmp	r3, r2
 80146de:	d109      	bne.n	80146f4 <xPortStartScheduler+0x24>
 80146e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146e4:	f383 8811 	msr	BASEPRI, r3
 80146e8:	f3bf 8f6f 	isb	sy
 80146ec:	f3bf 8f4f 	dsb	sy
 80146f0:	613b      	str	r3, [r7, #16]
 80146f2:	e7fe      	b.n	80146f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80146f4:	4b3c      	ldr	r3, [pc, #240]	; (80147e8 <xPortStartScheduler+0x118>)
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	4a3d      	ldr	r2, [pc, #244]	; (80147f0 <xPortStartScheduler+0x120>)
 80146fa:	4293      	cmp	r3, r2
 80146fc:	d109      	bne.n	8014712 <xPortStartScheduler+0x42>
 80146fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014702:	f383 8811 	msr	BASEPRI, r3
 8014706:	f3bf 8f6f 	isb	sy
 801470a:	f3bf 8f4f 	dsb	sy
 801470e:	60fb      	str	r3, [r7, #12]
 8014710:	e7fe      	b.n	8014710 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014712:	4b38      	ldr	r3, [pc, #224]	; (80147f4 <xPortStartScheduler+0x124>)
 8014714:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014716:	697b      	ldr	r3, [r7, #20]
 8014718:	781b      	ldrb	r3, [r3, #0]
 801471a:	b2db      	uxtb	r3, r3
 801471c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801471e:	697b      	ldr	r3, [r7, #20]
 8014720:	22ff      	movs	r2, #255	; 0xff
 8014722:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014724:	697b      	ldr	r3, [r7, #20]
 8014726:	781b      	ldrb	r3, [r3, #0]
 8014728:	b2db      	uxtb	r3, r3
 801472a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801472c:	78fb      	ldrb	r3, [r7, #3]
 801472e:	b2db      	uxtb	r3, r3
 8014730:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014734:	b2da      	uxtb	r2, r3
 8014736:	4b30      	ldr	r3, [pc, #192]	; (80147f8 <xPortStartScheduler+0x128>)
 8014738:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801473a:	4b30      	ldr	r3, [pc, #192]	; (80147fc <xPortStartScheduler+0x12c>)
 801473c:	2207      	movs	r2, #7
 801473e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014740:	e009      	b.n	8014756 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8014742:	4b2e      	ldr	r3, [pc, #184]	; (80147fc <xPortStartScheduler+0x12c>)
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	3b01      	subs	r3, #1
 8014748:	4a2c      	ldr	r2, [pc, #176]	; (80147fc <xPortStartScheduler+0x12c>)
 801474a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801474c:	78fb      	ldrb	r3, [r7, #3]
 801474e:	b2db      	uxtb	r3, r3
 8014750:	005b      	lsls	r3, r3, #1
 8014752:	b2db      	uxtb	r3, r3
 8014754:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014756:	78fb      	ldrb	r3, [r7, #3]
 8014758:	b2db      	uxtb	r3, r3
 801475a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801475e:	2b80      	cmp	r3, #128	; 0x80
 8014760:	d0ef      	beq.n	8014742 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014762:	4b26      	ldr	r3, [pc, #152]	; (80147fc <xPortStartScheduler+0x12c>)
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	f1c3 0307 	rsb	r3, r3, #7
 801476a:	2b04      	cmp	r3, #4
 801476c:	d009      	beq.n	8014782 <xPortStartScheduler+0xb2>
 801476e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014772:	f383 8811 	msr	BASEPRI, r3
 8014776:	f3bf 8f6f 	isb	sy
 801477a:	f3bf 8f4f 	dsb	sy
 801477e:	60bb      	str	r3, [r7, #8]
 8014780:	e7fe      	b.n	8014780 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014782:	4b1e      	ldr	r3, [pc, #120]	; (80147fc <xPortStartScheduler+0x12c>)
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	021b      	lsls	r3, r3, #8
 8014788:	4a1c      	ldr	r2, [pc, #112]	; (80147fc <xPortStartScheduler+0x12c>)
 801478a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801478c:	4b1b      	ldr	r3, [pc, #108]	; (80147fc <xPortStartScheduler+0x12c>)
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014794:	4a19      	ldr	r2, [pc, #100]	; (80147fc <xPortStartScheduler+0x12c>)
 8014796:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	b2da      	uxtb	r2, r3
 801479c:	697b      	ldr	r3, [r7, #20]
 801479e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80147a0:	4b17      	ldr	r3, [pc, #92]	; (8014800 <xPortStartScheduler+0x130>)
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	4a16      	ldr	r2, [pc, #88]	; (8014800 <xPortStartScheduler+0x130>)
 80147a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80147aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80147ac:	4b14      	ldr	r3, [pc, #80]	; (8014800 <xPortStartScheduler+0x130>)
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	4a13      	ldr	r2, [pc, #76]	; (8014800 <xPortStartScheduler+0x130>)
 80147b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80147b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80147b8:	f000 f8d6 	bl	8014968 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80147bc:	4b11      	ldr	r3, [pc, #68]	; (8014804 <xPortStartScheduler+0x134>)
 80147be:	2200      	movs	r2, #0
 80147c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80147c2:	f000 f8f5 	bl	80149b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80147c6:	4b10      	ldr	r3, [pc, #64]	; (8014808 <xPortStartScheduler+0x138>)
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	4a0f      	ldr	r2, [pc, #60]	; (8014808 <xPortStartScheduler+0x138>)
 80147cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80147d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80147d2:	f7ff ff69 	bl	80146a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80147d6:	f7ff f86f 	bl	80138b8 <vTaskSwitchContext>
	prvTaskExitError();
 80147da:	f7ff ff25 	bl	8014628 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80147de:	2300      	movs	r3, #0
}
 80147e0:	4618      	mov	r0, r3
 80147e2:	3718      	adds	r7, #24
 80147e4:	46bd      	mov	sp, r7
 80147e6:	bd80      	pop	{r7, pc}
 80147e8:	e000ed00 	.word	0xe000ed00
 80147ec:	410fc271 	.word	0x410fc271
 80147f0:	410fc270 	.word	0x410fc270
 80147f4:	e000e400 	.word	0xe000e400
 80147f8:	20000fa0 	.word	0x20000fa0
 80147fc:	20000fa4 	.word	0x20000fa4
 8014800:	e000ed20 	.word	0xe000ed20
 8014804:	200000c4 	.word	0x200000c4
 8014808:	e000ef34 	.word	0xe000ef34

0801480c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801480c:	b480      	push	{r7}
 801480e:	b083      	sub	sp, #12
 8014810:	af00      	add	r7, sp, #0
 8014812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014816:	f383 8811 	msr	BASEPRI, r3
 801481a:	f3bf 8f6f 	isb	sy
 801481e:	f3bf 8f4f 	dsb	sy
 8014822:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014824:	4b0e      	ldr	r3, [pc, #56]	; (8014860 <vPortEnterCritical+0x54>)
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	3301      	adds	r3, #1
 801482a:	4a0d      	ldr	r2, [pc, #52]	; (8014860 <vPortEnterCritical+0x54>)
 801482c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801482e:	4b0c      	ldr	r3, [pc, #48]	; (8014860 <vPortEnterCritical+0x54>)
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	2b01      	cmp	r3, #1
 8014834:	d10e      	bne.n	8014854 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014836:	4b0b      	ldr	r3, [pc, #44]	; (8014864 <vPortEnterCritical+0x58>)
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	b2db      	uxtb	r3, r3
 801483c:	2b00      	cmp	r3, #0
 801483e:	d009      	beq.n	8014854 <vPortEnterCritical+0x48>
 8014840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014844:	f383 8811 	msr	BASEPRI, r3
 8014848:	f3bf 8f6f 	isb	sy
 801484c:	f3bf 8f4f 	dsb	sy
 8014850:	603b      	str	r3, [r7, #0]
 8014852:	e7fe      	b.n	8014852 <vPortEnterCritical+0x46>
	}
}
 8014854:	bf00      	nop
 8014856:	370c      	adds	r7, #12
 8014858:	46bd      	mov	sp, r7
 801485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801485e:	4770      	bx	lr
 8014860:	200000c4 	.word	0x200000c4
 8014864:	e000ed04 	.word	0xe000ed04

08014868 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014868:	b480      	push	{r7}
 801486a:	b083      	sub	sp, #12
 801486c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801486e:	4b11      	ldr	r3, [pc, #68]	; (80148b4 <vPortExitCritical+0x4c>)
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d109      	bne.n	801488a <vPortExitCritical+0x22>
 8014876:	f04f 0350 	mov.w	r3, #80	; 0x50
 801487a:	f383 8811 	msr	BASEPRI, r3
 801487e:	f3bf 8f6f 	isb	sy
 8014882:	f3bf 8f4f 	dsb	sy
 8014886:	607b      	str	r3, [r7, #4]
 8014888:	e7fe      	b.n	8014888 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801488a:	4b0a      	ldr	r3, [pc, #40]	; (80148b4 <vPortExitCritical+0x4c>)
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	3b01      	subs	r3, #1
 8014890:	4a08      	ldr	r2, [pc, #32]	; (80148b4 <vPortExitCritical+0x4c>)
 8014892:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014894:	4b07      	ldr	r3, [pc, #28]	; (80148b4 <vPortExitCritical+0x4c>)
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d104      	bne.n	80148a6 <vPortExitCritical+0x3e>
 801489c:	2300      	movs	r3, #0
 801489e:	603b      	str	r3, [r7, #0]
	__asm volatile
 80148a0:	683b      	ldr	r3, [r7, #0]
 80148a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80148a6:	bf00      	nop
 80148a8:	370c      	adds	r7, #12
 80148aa:	46bd      	mov	sp, r7
 80148ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b0:	4770      	bx	lr
 80148b2:	bf00      	nop
 80148b4:	200000c4 	.word	0x200000c4
	...

080148c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80148c0:	f3ef 8009 	mrs	r0, PSP
 80148c4:	f3bf 8f6f 	isb	sy
 80148c8:	4b15      	ldr	r3, [pc, #84]	; (8014920 <pxCurrentTCBConst>)
 80148ca:	681a      	ldr	r2, [r3, #0]
 80148cc:	f01e 0f10 	tst.w	lr, #16
 80148d0:	bf08      	it	eq
 80148d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80148d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148da:	6010      	str	r0, [r2, #0]
 80148dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80148e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80148e4:	f380 8811 	msr	BASEPRI, r0
 80148e8:	f3bf 8f4f 	dsb	sy
 80148ec:	f3bf 8f6f 	isb	sy
 80148f0:	f7fe ffe2 	bl	80138b8 <vTaskSwitchContext>
 80148f4:	f04f 0000 	mov.w	r0, #0
 80148f8:	f380 8811 	msr	BASEPRI, r0
 80148fc:	bc09      	pop	{r0, r3}
 80148fe:	6819      	ldr	r1, [r3, #0]
 8014900:	6808      	ldr	r0, [r1, #0]
 8014902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014906:	f01e 0f10 	tst.w	lr, #16
 801490a:	bf08      	it	eq
 801490c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014910:	f380 8809 	msr	PSP, r0
 8014914:	f3bf 8f6f 	isb	sy
 8014918:	4770      	bx	lr
 801491a:	bf00      	nop
 801491c:	f3af 8000 	nop.w

08014920 <pxCurrentTCBConst>:
 8014920:	20000974 	.word	0x20000974
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014924:	bf00      	nop
 8014926:	bf00      	nop

08014928 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014928:	b580      	push	{r7, lr}
 801492a:	b082      	sub	sp, #8
 801492c:	af00      	add	r7, sp, #0
	__asm volatile
 801492e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014932:	f383 8811 	msr	BASEPRI, r3
 8014936:	f3bf 8f6f 	isb	sy
 801493a:	f3bf 8f4f 	dsb	sy
 801493e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014940:	f7fe ff02 	bl	8013748 <xTaskIncrementTick>
 8014944:	4603      	mov	r3, r0
 8014946:	2b00      	cmp	r3, #0
 8014948:	d003      	beq.n	8014952 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801494a:	4b06      	ldr	r3, [pc, #24]	; (8014964 <SysTick_Handler+0x3c>)
 801494c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014950:	601a      	str	r2, [r3, #0]
 8014952:	2300      	movs	r3, #0
 8014954:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014956:	683b      	ldr	r3, [r7, #0]
 8014958:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801495c:	bf00      	nop
 801495e:	3708      	adds	r7, #8
 8014960:	46bd      	mov	sp, r7
 8014962:	bd80      	pop	{r7, pc}
 8014964:	e000ed04 	.word	0xe000ed04

08014968 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014968:	b480      	push	{r7}
 801496a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801496c:	4b0b      	ldr	r3, [pc, #44]	; (801499c <vPortSetupTimerInterrupt+0x34>)
 801496e:	2200      	movs	r2, #0
 8014970:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014972:	4b0b      	ldr	r3, [pc, #44]	; (80149a0 <vPortSetupTimerInterrupt+0x38>)
 8014974:	2200      	movs	r2, #0
 8014976:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014978:	4b0a      	ldr	r3, [pc, #40]	; (80149a4 <vPortSetupTimerInterrupt+0x3c>)
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	4a0a      	ldr	r2, [pc, #40]	; (80149a8 <vPortSetupTimerInterrupt+0x40>)
 801497e:	fba2 2303 	umull	r2, r3, r2, r3
 8014982:	099b      	lsrs	r3, r3, #6
 8014984:	4a09      	ldr	r2, [pc, #36]	; (80149ac <vPortSetupTimerInterrupt+0x44>)
 8014986:	3b01      	subs	r3, #1
 8014988:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801498a:	4b04      	ldr	r3, [pc, #16]	; (801499c <vPortSetupTimerInterrupt+0x34>)
 801498c:	2207      	movs	r2, #7
 801498e:	601a      	str	r2, [r3, #0]
}
 8014990:	bf00      	nop
 8014992:	46bd      	mov	sp, r7
 8014994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014998:	4770      	bx	lr
 801499a:	bf00      	nop
 801499c:	e000e010 	.word	0xe000e010
 80149a0:	e000e018 	.word	0xe000e018
 80149a4:	2000003c 	.word	0x2000003c
 80149a8:	10624dd3 	.word	0x10624dd3
 80149ac:	e000e014 	.word	0xe000e014

080149b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80149b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80149c0 <vPortEnableVFP+0x10>
 80149b4:	6801      	ldr	r1, [r0, #0]
 80149b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80149ba:	6001      	str	r1, [r0, #0]
 80149bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80149be:	bf00      	nop
 80149c0:	e000ed88 	.word	0xe000ed88

080149c4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80149c4:	b480      	push	{r7}
 80149c6:	b085      	sub	sp, #20
 80149c8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80149ca:	f3ef 8305 	mrs	r3, IPSR
 80149ce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	2b0f      	cmp	r3, #15
 80149d4:	d913      	bls.n	80149fe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80149d6:	4a16      	ldr	r2, [pc, #88]	; (8014a30 <vPortValidateInterruptPriority+0x6c>)
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	4413      	add	r3, r2
 80149dc:	781b      	ldrb	r3, [r3, #0]
 80149de:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80149e0:	4b14      	ldr	r3, [pc, #80]	; (8014a34 <vPortValidateInterruptPriority+0x70>)
 80149e2:	781b      	ldrb	r3, [r3, #0]
 80149e4:	7afa      	ldrb	r2, [r7, #11]
 80149e6:	429a      	cmp	r2, r3
 80149e8:	d209      	bcs.n	80149fe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80149ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149ee:	f383 8811 	msr	BASEPRI, r3
 80149f2:	f3bf 8f6f 	isb	sy
 80149f6:	f3bf 8f4f 	dsb	sy
 80149fa:	607b      	str	r3, [r7, #4]
 80149fc:	e7fe      	b.n	80149fc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80149fe:	4b0e      	ldr	r3, [pc, #56]	; (8014a38 <vPortValidateInterruptPriority+0x74>)
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014a06:	4b0d      	ldr	r3, [pc, #52]	; (8014a3c <vPortValidateInterruptPriority+0x78>)
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	429a      	cmp	r2, r3
 8014a0c:	d909      	bls.n	8014a22 <vPortValidateInterruptPriority+0x5e>
 8014a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a12:	f383 8811 	msr	BASEPRI, r3
 8014a16:	f3bf 8f6f 	isb	sy
 8014a1a:	f3bf 8f4f 	dsb	sy
 8014a1e:	603b      	str	r3, [r7, #0]
 8014a20:	e7fe      	b.n	8014a20 <vPortValidateInterruptPriority+0x5c>
	}
 8014a22:	bf00      	nop
 8014a24:	3714      	adds	r7, #20
 8014a26:	46bd      	mov	sp, r7
 8014a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a2c:	4770      	bx	lr
 8014a2e:	bf00      	nop
 8014a30:	e000e3f0 	.word	0xe000e3f0
 8014a34:	20000fa0 	.word	0x20000fa0
 8014a38:	e000ed0c 	.word	0xe000ed0c
 8014a3c:	20000fa4 	.word	0x20000fa4

08014a40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014a40:	b580      	push	{r7, lr}
 8014a42:	b08a      	sub	sp, #40	; 0x28
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014a48:	2300      	movs	r3, #0
 8014a4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014a4c:	f7fe fdc2 	bl	80135d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014a50:	4b57      	ldr	r3, [pc, #348]	; (8014bb0 <pvPortMalloc+0x170>)
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d101      	bne.n	8014a5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014a58:	f000 f90c 	bl	8014c74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014a5c:	4b55      	ldr	r3, [pc, #340]	; (8014bb4 <pvPortMalloc+0x174>)
 8014a5e:	681a      	ldr	r2, [r3, #0]
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	4013      	ands	r3, r2
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	f040 808c 	bne.w	8014b82 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d01c      	beq.n	8014aaa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8014a70:	2208      	movs	r2, #8
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	4413      	add	r3, r2
 8014a76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	f003 0307 	and.w	r3, r3, #7
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d013      	beq.n	8014aaa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	f023 0307 	bic.w	r3, r3, #7
 8014a88:	3308      	adds	r3, #8
 8014a8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	f003 0307 	and.w	r3, r3, #7
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d009      	beq.n	8014aaa <pvPortMalloc+0x6a>
 8014a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a9a:	f383 8811 	msr	BASEPRI, r3
 8014a9e:	f3bf 8f6f 	isb	sy
 8014aa2:	f3bf 8f4f 	dsb	sy
 8014aa6:	617b      	str	r3, [r7, #20]
 8014aa8:	e7fe      	b.n	8014aa8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d068      	beq.n	8014b82 <pvPortMalloc+0x142>
 8014ab0:	4b41      	ldr	r3, [pc, #260]	; (8014bb8 <pvPortMalloc+0x178>)
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	687a      	ldr	r2, [r7, #4]
 8014ab6:	429a      	cmp	r2, r3
 8014ab8:	d863      	bhi.n	8014b82 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014aba:	4b40      	ldr	r3, [pc, #256]	; (8014bbc <pvPortMalloc+0x17c>)
 8014abc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014abe:	4b3f      	ldr	r3, [pc, #252]	; (8014bbc <pvPortMalloc+0x17c>)
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014ac4:	e004      	b.n	8014ad0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8014ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ac8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ad2:	685b      	ldr	r3, [r3, #4]
 8014ad4:	687a      	ldr	r2, [r7, #4]
 8014ad6:	429a      	cmp	r2, r3
 8014ad8:	d903      	bls.n	8014ae2 <pvPortMalloc+0xa2>
 8014ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d1f1      	bne.n	8014ac6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014ae2:	4b33      	ldr	r3, [pc, #204]	; (8014bb0 <pvPortMalloc+0x170>)
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ae8:	429a      	cmp	r2, r3
 8014aea:	d04a      	beq.n	8014b82 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014aec:	6a3b      	ldr	r3, [r7, #32]
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	2208      	movs	r2, #8
 8014af2:	4413      	add	r3, r2
 8014af4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014af8:	681a      	ldr	r2, [r3, #0]
 8014afa:	6a3b      	ldr	r3, [r7, #32]
 8014afc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b00:	685a      	ldr	r2, [r3, #4]
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	1ad2      	subs	r2, r2, r3
 8014b06:	2308      	movs	r3, #8
 8014b08:	005b      	lsls	r3, r3, #1
 8014b0a:	429a      	cmp	r2, r3
 8014b0c:	d91e      	bls.n	8014b4c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	4413      	add	r3, r2
 8014b14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014b16:	69bb      	ldr	r3, [r7, #24]
 8014b18:	f003 0307 	and.w	r3, r3, #7
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d009      	beq.n	8014b34 <pvPortMalloc+0xf4>
 8014b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b24:	f383 8811 	msr	BASEPRI, r3
 8014b28:	f3bf 8f6f 	isb	sy
 8014b2c:	f3bf 8f4f 	dsb	sy
 8014b30:	613b      	str	r3, [r7, #16]
 8014b32:	e7fe      	b.n	8014b32 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b36:	685a      	ldr	r2, [r3, #4]
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	1ad2      	subs	r2, r2, r3
 8014b3c:	69bb      	ldr	r3, [r7, #24]
 8014b3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b42:	687a      	ldr	r2, [r7, #4]
 8014b44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014b46:	69b8      	ldr	r0, [r7, #24]
 8014b48:	f000 f8f6 	bl	8014d38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014b4c:	4b1a      	ldr	r3, [pc, #104]	; (8014bb8 <pvPortMalloc+0x178>)
 8014b4e:	681a      	ldr	r2, [r3, #0]
 8014b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b52:	685b      	ldr	r3, [r3, #4]
 8014b54:	1ad3      	subs	r3, r2, r3
 8014b56:	4a18      	ldr	r2, [pc, #96]	; (8014bb8 <pvPortMalloc+0x178>)
 8014b58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014b5a:	4b17      	ldr	r3, [pc, #92]	; (8014bb8 <pvPortMalloc+0x178>)
 8014b5c:	681a      	ldr	r2, [r3, #0]
 8014b5e:	4b18      	ldr	r3, [pc, #96]	; (8014bc0 <pvPortMalloc+0x180>)
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	429a      	cmp	r2, r3
 8014b64:	d203      	bcs.n	8014b6e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014b66:	4b14      	ldr	r3, [pc, #80]	; (8014bb8 <pvPortMalloc+0x178>)
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	4a15      	ldr	r2, [pc, #84]	; (8014bc0 <pvPortMalloc+0x180>)
 8014b6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b70:	685a      	ldr	r2, [r3, #4]
 8014b72:	4b10      	ldr	r3, [pc, #64]	; (8014bb4 <pvPortMalloc+0x174>)
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	431a      	orrs	r2, r3
 8014b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b7e:	2200      	movs	r2, #0
 8014b80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014b82:	f7fe fd35 	bl	80135f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014b86:	69fb      	ldr	r3, [r7, #28]
 8014b88:	f003 0307 	and.w	r3, r3, #7
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d009      	beq.n	8014ba4 <pvPortMalloc+0x164>
 8014b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b94:	f383 8811 	msr	BASEPRI, r3
 8014b98:	f3bf 8f6f 	isb	sy
 8014b9c:	f3bf 8f4f 	dsb	sy
 8014ba0:	60fb      	str	r3, [r7, #12]
 8014ba2:	e7fe      	b.n	8014ba2 <pvPortMalloc+0x162>
	return pvReturn;
 8014ba4:	69fb      	ldr	r3, [r7, #28]
}
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	3728      	adds	r7, #40	; 0x28
 8014baa:	46bd      	mov	sp, r7
 8014bac:	bd80      	pop	{r7, pc}
 8014bae:	bf00      	nop
 8014bb0:	20004bb0 	.word	0x20004bb0
 8014bb4:	20004bbc 	.word	0x20004bbc
 8014bb8:	20004bb4 	.word	0x20004bb4
 8014bbc:	20004ba8 	.word	0x20004ba8
 8014bc0:	20004bb8 	.word	0x20004bb8

08014bc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b086      	sub	sp, #24
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d046      	beq.n	8014c64 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014bd6:	2308      	movs	r3, #8
 8014bd8:	425b      	negs	r3, r3
 8014bda:	697a      	ldr	r2, [r7, #20]
 8014bdc:	4413      	add	r3, r2
 8014bde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014be0:	697b      	ldr	r3, [r7, #20]
 8014be2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014be4:	693b      	ldr	r3, [r7, #16]
 8014be6:	685a      	ldr	r2, [r3, #4]
 8014be8:	4b20      	ldr	r3, [pc, #128]	; (8014c6c <vPortFree+0xa8>)
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	4013      	ands	r3, r2
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d109      	bne.n	8014c06 <vPortFree+0x42>
 8014bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bf6:	f383 8811 	msr	BASEPRI, r3
 8014bfa:	f3bf 8f6f 	isb	sy
 8014bfe:	f3bf 8f4f 	dsb	sy
 8014c02:	60fb      	str	r3, [r7, #12]
 8014c04:	e7fe      	b.n	8014c04 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014c06:	693b      	ldr	r3, [r7, #16]
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d009      	beq.n	8014c22 <vPortFree+0x5e>
 8014c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c12:	f383 8811 	msr	BASEPRI, r3
 8014c16:	f3bf 8f6f 	isb	sy
 8014c1a:	f3bf 8f4f 	dsb	sy
 8014c1e:	60bb      	str	r3, [r7, #8]
 8014c20:	e7fe      	b.n	8014c20 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014c22:	693b      	ldr	r3, [r7, #16]
 8014c24:	685a      	ldr	r2, [r3, #4]
 8014c26:	4b11      	ldr	r3, [pc, #68]	; (8014c6c <vPortFree+0xa8>)
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	4013      	ands	r3, r2
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d019      	beq.n	8014c64 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014c30:	693b      	ldr	r3, [r7, #16]
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d115      	bne.n	8014c64 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014c38:	693b      	ldr	r3, [r7, #16]
 8014c3a:	685a      	ldr	r2, [r3, #4]
 8014c3c:	4b0b      	ldr	r3, [pc, #44]	; (8014c6c <vPortFree+0xa8>)
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	43db      	mvns	r3, r3
 8014c42:	401a      	ands	r2, r3
 8014c44:	693b      	ldr	r3, [r7, #16]
 8014c46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014c48:	f7fe fcc4 	bl	80135d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014c4c:	693b      	ldr	r3, [r7, #16]
 8014c4e:	685a      	ldr	r2, [r3, #4]
 8014c50:	4b07      	ldr	r3, [pc, #28]	; (8014c70 <vPortFree+0xac>)
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	4413      	add	r3, r2
 8014c56:	4a06      	ldr	r2, [pc, #24]	; (8014c70 <vPortFree+0xac>)
 8014c58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014c5a:	6938      	ldr	r0, [r7, #16]
 8014c5c:	f000 f86c 	bl	8014d38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014c60:	f7fe fcc6 	bl	80135f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014c64:	bf00      	nop
 8014c66:	3718      	adds	r7, #24
 8014c68:	46bd      	mov	sp, r7
 8014c6a:	bd80      	pop	{r7, pc}
 8014c6c:	20004bbc 	.word	0x20004bbc
 8014c70:	20004bb4 	.word	0x20004bb4

08014c74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014c74:	b480      	push	{r7}
 8014c76:	b085      	sub	sp, #20
 8014c78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014c7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8014c7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014c80:	4b27      	ldr	r3, [pc, #156]	; (8014d20 <prvHeapInit+0xac>)
 8014c82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	f003 0307 	and.w	r3, r3, #7
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d00c      	beq.n	8014ca8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	3307      	adds	r3, #7
 8014c92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	f023 0307 	bic.w	r3, r3, #7
 8014c9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014c9c:	68ba      	ldr	r2, [r7, #8]
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	1ad3      	subs	r3, r2, r3
 8014ca2:	4a1f      	ldr	r2, [pc, #124]	; (8014d20 <prvHeapInit+0xac>)
 8014ca4:	4413      	add	r3, r2
 8014ca6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014cac:	4a1d      	ldr	r2, [pc, #116]	; (8014d24 <prvHeapInit+0xb0>)
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014cb2:	4b1c      	ldr	r3, [pc, #112]	; (8014d24 <prvHeapInit+0xb0>)
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	68ba      	ldr	r2, [r7, #8]
 8014cbc:	4413      	add	r3, r2
 8014cbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014cc0:	2208      	movs	r2, #8
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	1a9b      	subs	r3, r3, r2
 8014cc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	f023 0307 	bic.w	r3, r3, #7
 8014cce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	4a15      	ldr	r2, [pc, #84]	; (8014d28 <prvHeapInit+0xb4>)
 8014cd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014cd6:	4b14      	ldr	r3, [pc, #80]	; (8014d28 <prvHeapInit+0xb4>)
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	2200      	movs	r2, #0
 8014cdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014cde:	4b12      	ldr	r3, [pc, #72]	; (8014d28 <prvHeapInit+0xb4>)
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014cea:	683b      	ldr	r3, [r7, #0]
 8014cec:	68fa      	ldr	r2, [r7, #12]
 8014cee:	1ad2      	subs	r2, r2, r3
 8014cf0:	683b      	ldr	r3, [r7, #0]
 8014cf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014cf4:	4b0c      	ldr	r3, [pc, #48]	; (8014d28 <prvHeapInit+0xb4>)
 8014cf6:	681a      	ldr	r2, [r3, #0]
 8014cf8:	683b      	ldr	r3, [r7, #0]
 8014cfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014cfc:	683b      	ldr	r3, [r7, #0]
 8014cfe:	685b      	ldr	r3, [r3, #4]
 8014d00:	4a0a      	ldr	r2, [pc, #40]	; (8014d2c <prvHeapInit+0xb8>)
 8014d02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014d04:	683b      	ldr	r3, [r7, #0]
 8014d06:	685b      	ldr	r3, [r3, #4]
 8014d08:	4a09      	ldr	r2, [pc, #36]	; (8014d30 <prvHeapInit+0xbc>)
 8014d0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014d0c:	4b09      	ldr	r3, [pc, #36]	; (8014d34 <prvHeapInit+0xc0>)
 8014d0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014d12:	601a      	str	r2, [r3, #0]
}
 8014d14:	bf00      	nop
 8014d16:	3714      	adds	r7, #20
 8014d18:	46bd      	mov	sp, r7
 8014d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d1e:	4770      	bx	lr
 8014d20:	20000fa8 	.word	0x20000fa8
 8014d24:	20004ba8 	.word	0x20004ba8
 8014d28:	20004bb0 	.word	0x20004bb0
 8014d2c:	20004bb8 	.word	0x20004bb8
 8014d30:	20004bb4 	.word	0x20004bb4
 8014d34:	20004bbc 	.word	0x20004bbc

08014d38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014d38:	b480      	push	{r7}
 8014d3a:	b085      	sub	sp, #20
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014d40:	4b28      	ldr	r3, [pc, #160]	; (8014de4 <prvInsertBlockIntoFreeList+0xac>)
 8014d42:	60fb      	str	r3, [r7, #12]
 8014d44:	e002      	b.n	8014d4c <prvInsertBlockIntoFreeList+0x14>
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	60fb      	str	r3, [r7, #12]
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	687a      	ldr	r2, [r7, #4]
 8014d52:	429a      	cmp	r2, r3
 8014d54:	d8f7      	bhi.n	8014d46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	685b      	ldr	r3, [r3, #4]
 8014d5e:	68ba      	ldr	r2, [r7, #8]
 8014d60:	4413      	add	r3, r2
 8014d62:	687a      	ldr	r2, [r7, #4]
 8014d64:	429a      	cmp	r2, r3
 8014d66:	d108      	bne.n	8014d7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	685a      	ldr	r2, [r3, #4]
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	685b      	ldr	r3, [r3, #4]
 8014d70:	441a      	add	r2, r3
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	685b      	ldr	r3, [r3, #4]
 8014d82:	68ba      	ldr	r2, [r7, #8]
 8014d84:	441a      	add	r2, r3
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	429a      	cmp	r2, r3
 8014d8c:	d118      	bne.n	8014dc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	681a      	ldr	r2, [r3, #0]
 8014d92:	4b15      	ldr	r3, [pc, #84]	; (8014de8 <prvInsertBlockIntoFreeList+0xb0>)
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	429a      	cmp	r2, r3
 8014d98:	d00d      	beq.n	8014db6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	685a      	ldr	r2, [r3, #4]
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	685b      	ldr	r3, [r3, #4]
 8014da4:	441a      	add	r2, r3
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	681a      	ldr	r2, [r3, #0]
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	601a      	str	r2, [r3, #0]
 8014db4:	e008      	b.n	8014dc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014db6:	4b0c      	ldr	r3, [pc, #48]	; (8014de8 <prvInsertBlockIntoFreeList+0xb0>)
 8014db8:	681a      	ldr	r2, [r3, #0]
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	601a      	str	r2, [r3, #0]
 8014dbe:	e003      	b.n	8014dc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	681a      	ldr	r2, [r3, #0]
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014dc8:	68fa      	ldr	r2, [r7, #12]
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	429a      	cmp	r2, r3
 8014dce:	d002      	beq.n	8014dd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	687a      	ldr	r2, [r7, #4]
 8014dd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014dd6:	bf00      	nop
 8014dd8:	3714      	adds	r7, #20
 8014dda:	46bd      	mov	sp, r7
 8014ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de0:	4770      	bx	lr
 8014de2:	bf00      	nop
 8014de4:	20004ba8 	.word	0x20004ba8
 8014de8:	20004bb0 	.word	0x20004bb0

08014dec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8014dec:	b580      	push	{r7, lr}
 8014dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8014df0:	2201      	movs	r2, #1
 8014df2:	490e      	ldr	r1, [pc, #56]	; (8014e2c <MX_USB_HOST_Init+0x40>)
 8014df4:	480e      	ldr	r0, [pc, #56]	; (8014e30 <MX_USB_HOST_Init+0x44>)
 8014df6:	f7f8 ff2b 	bl	800dc50 <USBH_Init>
 8014dfa:	4603      	mov	r3, r0
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d001      	beq.n	8014e04 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8014e00:	f7ed f966 	bl	80020d0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8014e04:	490b      	ldr	r1, [pc, #44]	; (8014e34 <MX_USB_HOST_Init+0x48>)
 8014e06:	480a      	ldr	r0, [pc, #40]	; (8014e30 <MX_USB_HOST_Init+0x44>)
 8014e08:	f7f8 ffd2 	bl	800ddb0 <USBH_RegisterClass>
 8014e0c:	4603      	mov	r3, r0
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d001      	beq.n	8014e16 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8014e12:	f7ed f95d 	bl	80020d0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8014e16:	4806      	ldr	r0, [pc, #24]	; (8014e30 <MX_USB_HOST_Init+0x44>)
 8014e18:	f7f9 f856 	bl	800dec8 <USBH_Start>
 8014e1c:	4603      	mov	r3, r0
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d001      	beq.n	8014e26 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8014e22:	f7ed f955 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8014e26:	bf00      	nop
 8014e28:	bd80      	pop	{r7, pc}
 8014e2a:	bf00      	nop
 8014e2c:	08014e39 	.word	0x08014e39
 8014e30:	2003ddf8 	.word	0x2003ddf8
 8014e34:	200000a0 	.word	0x200000a0

08014e38 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8014e38:	b480      	push	{r7}
 8014e3a:	b083      	sub	sp, #12
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	6078      	str	r0, [r7, #4]
 8014e40:	460b      	mov	r3, r1
 8014e42:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8014e44:	78fb      	ldrb	r3, [r7, #3]
 8014e46:	3b01      	subs	r3, #1
 8014e48:	2b04      	cmp	r3, #4
 8014e4a:	d819      	bhi.n	8014e80 <USBH_UserProcess+0x48>
 8014e4c:	a201      	add	r2, pc, #4	; (adr r2, 8014e54 <USBH_UserProcess+0x1c>)
 8014e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e52:	bf00      	nop
 8014e54:	08014e81 	.word	0x08014e81
 8014e58:	08014e71 	.word	0x08014e71
 8014e5c:	08014e81 	.word	0x08014e81
 8014e60:	08014e79 	.word	0x08014e79
 8014e64:	08014e69 	.word	0x08014e69
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8014e68:	4b09      	ldr	r3, [pc, #36]	; (8014e90 <USBH_UserProcess+0x58>)
 8014e6a:	2203      	movs	r2, #3
 8014e6c:	701a      	strb	r2, [r3, #0]
  break;
 8014e6e:	e008      	b.n	8014e82 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8014e70:	4b07      	ldr	r3, [pc, #28]	; (8014e90 <USBH_UserProcess+0x58>)
 8014e72:	2202      	movs	r2, #2
 8014e74:	701a      	strb	r2, [r3, #0]
  break;
 8014e76:	e004      	b.n	8014e82 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8014e78:	4b05      	ldr	r3, [pc, #20]	; (8014e90 <USBH_UserProcess+0x58>)
 8014e7a:	2201      	movs	r2, #1
 8014e7c:	701a      	strb	r2, [r3, #0]
  break;
 8014e7e:	e000      	b.n	8014e82 <USBH_UserProcess+0x4a>

  default:
  break;
 8014e80:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8014e82:	bf00      	nop
 8014e84:	370c      	adds	r7, #12
 8014e86:	46bd      	mov	sp, r7
 8014e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e8c:	4770      	bx	lr
 8014e8e:	bf00      	nop
 8014e90:	20004bc0 	.word	0x20004bc0

08014e94 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8014e94:	b580      	push	{r7, lr}
 8014e96:	b08a      	sub	sp, #40	; 0x28
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014e9c:	f107 0314 	add.w	r3, r7, #20
 8014ea0:	2200      	movs	r2, #0
 8014ea2:	601a      	str	r2, [r3, #0]
 8014ea4:	605a      	str	r2, [r3, #4]
 8014ea6:	609a      	str	r2, [r3, #8]
 8014ea8:	60da      	str	r2, [r3, #12]
 8014eaa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014eb4:	d147      	bne.n	8014f46 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	613b      	str	r3, [r7, #16]
 8014eba:	4b25      	ldr	r3, [pc, #148]	; (8014f50 <HAL_HCD_MspInit+0xbc>)
 8014ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ebe:	4a24      	ldr	r2, [pc, #144]	; (8014f50 <HAL_HCD_MspInit+0xbc>)
 8014ec0:	f043 0301 	orr.w	r3, r3, #1
 8014ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8014ec6:	4b22      	ldr	r3, [pc, #136]	; (8014f50 <HAL_HCD_MspInit+0xbc>)
 8014ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014eca:	f003 0301 	and.w	r3, r3, #1
 8014ece:	613b      	str	r3, [r7, #16]
 8014ed0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8014ed2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014ed8:	2300      	movs	r3, #0
 8014eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014edc:	2300      	movs	r3, #0
 8014ede:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8014ee0:	f107 0314 	add.w	r3, r7, #20
 8014ee4:	4619      	mov	r1, r3
 8014ee6:	481b      	ldr	r0, [pc, #108]	; (8014f54 <HAL_HCD_MspInit+0xc0>)
 8014ee8:	f7f0 ffae 	bl	8005e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8014eec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8014ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014ef2:	2302      	movs	r3, #2
 8014ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014efa:	2303      	movs	r3, #3
 8014efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8014efe:	230a      	movs	r3, #10
 8014f00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014f02:	f107 0314 	add.w	r3, r7, #20
 8014f06:	4619      	mov	r1, r3
 8014f08:	4812      	ldr	r0, [pc, #72]	; (8014f54 <HAL_HCD_MspInit+0xc0>)
 8014f0a:	f7f0 ff9d 	bl	8005e48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014f0e:	4b10      	ldr	r3, [pc, #64]	; (8014f50 <HAL_HCD_MspInit+0xbc>)
 8014f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f12:	4a0f      	ldr	r2, [pc, #60]	; (8014f50 <HAL_HCD_MspInit+0xbc>)
 8014f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014f18:	6353      	str	r3, [r2, #52]	; 0x34
 8014f1a:	2300      	movs	r3, #0
 8014f1c:	60fb      	str	r3, [r7, #12]
 8014f1e:	4b0c      	ldr	r3, [pc, #48]	; (8014f50 <HAL_HCD_MspInit+0xbc>)
 8014f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014f22:	4a0b      	ldr	r2, [pc, #44]	; (8014f50 <HAL_HCD_MspInit+0xbc>)
 8014f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014f28:	6453      	str	r3, [r2, #68]	; 0x44
 8014f2a:	4b09      	ldr	r3, [pc, #36]	; (8014f50 <HAL_HCD_MspInit+0xbc>)
 8014f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014f32:	60fb      	str	r3, [r7, #12]
 8014f34:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8014f36:	2200      	movs	r2, #0
 8014f38:	2100      	movs	r1, #0
 8014f3a:	2043      	movs	r0, #67	; 0x43
 8014f3c:	f7f0 faa2 	bl	8005484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014f40:	2043      	movs	r0, #67	; 0x43
 8014f42:	f7f0 fabb 	bl	80054bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014f46:	bf00      	nop
 8014f48:	3728      	adds	r7, #40	; 0x28
 8014f4a:	46bd      	mov	sp, r7
 8014f4c:	bd80      	pop	{r7, pc}
 8014f4e:	bf00      	nop
 8014f50:	40023800 	.word	0x40023800
 8014f54:	40020000 	.word	0x40020000

08014f58 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b082      	sub	sp, #8
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014f66:	4618      	mov	r0, r3
 8014f68:	f7f9 fc5b 	bl	800e822 <USBH_LL_IncTimer>
}
 8014f6c:	bf00      	nop
 8014f6e:	3708      	adds	r7, #8
 8014f70:	46bd      	mov	sp, r7
 8014f72:	bd80      	pop	{r7, pc}

08014f74 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8014f74:	b580      	push	{r7, lr}
 8014f76:	b082      	sub	sp, #8
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014f82:	4618      	mov	r0, r3
 8014f84:	f7f9 fc9f 	bl	800e8c6 <USBH_LL_Connect>
}
 8014f88:	bf00      	nop
 8014f8a:	3708      	adds	r7, #8
 8014f8c:	46bd      	mov	sp, r7
 8014f8e:	bd80      	pop	{r7, pc}

08014f90 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8014f90:	b580      	push	{r7, lr}
 8014f92:	b082      	sub	sp, #8
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	f7f9 fcb4 	bl	800e90c <USBH_LL_Disconnect>
}
 8014fa4:	bf00      	nop
 8014fa6:	3708      	adds	r7, #8
 8014fa8:	46bd      	mov	sp, r7
 8014faa:	bd80      	pop	{r7, pc}

08014fac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8014fac:	b580      	push	{r7, lr}
 8014fae:	b082      	sub	sp, #8
 8014fb0:	af00      	add	r7, sp, #0
 8014fb2:	6078      	str	r0, [r7, #4]
 8014fb4:	460b      	mov	r3, r1
 8014fb6:	70fb      	strb	r3, [r7, #3]
 8014fb8:	4613      	mov	r3, r2
 8014fba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	f7f9 fceb 	bl	800e99e <USBH_LL_NotifyURBChange>
#endif
}
 8014fc8:	bf00      	nop
 8014fca:	3708      	adds	r7, #8
 8014fcc:	46bd      	mov	sp, r7
 8014fce:	bd80      	pop	{r7, pc}

08014fd0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	b082      	sub	sp, #8
 8014fd4:	af00      	add	r7, sp, #0
 8014fd6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014fde:	4618      	mov	r0, r3
 8014fe0:	f7f9 fc49 	bl	800e876 <USBH_LL_PortEnabled>
}
 8014fe4:	bf00      	nop
 8014fe6:	3708      	adds	r7, #8
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	bd80      	pop	{r7, pc}

08014fec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	b082      	sub	sp, #8
 8014ff0:	af00      	add	r7, sp, #0
 8014ff2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014ffa:	4618      	mov	r0, r3
 8014ffc:	f7f9 fc55 	bl	800e8aa <USBH_LL_PortDisabled>
}
 8015000:	bf00      	nop
 8015002:	3708      	adds	r7, #8
 8015004:	46bd      	mov	sp, r7
 8015006:	bd80      	pop	{r7, pc}

08015008 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8015008:	b580      	push	{r7, lr}
 801500a:	b082      	sub	sp, #8
 801500c:	af00      	add	r7, sp, #0
 801500e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8015016:	2b01      	cmp	r3, #1
 8015018:	d12a      	bne.n	8015070 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801501a:	4a18      	ldr	r2, [pc, #96]	; (801507c <USBH_LL_Init+0x74>)
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	4a15      	ldr	r2, [pc, #84]	; (801507c <USBH_LL_Init+0x74>)
 8015026:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801502a:	4b14      	ldr	r3, [pc, #80]	; (801507c <USBH_LL_Init+0x74>)
 801502c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015030:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8015032:	4b12      	ldr	r3, [pc, #72]	; (801507c <USBH_LL_Init+0x74>)
 8015034:	220c      	movs	r2, #12
 8015036:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8015038:	4b10      	ldr	r3, [pc, #64]	; (801507c <USBH_LL_Init+0x74>)
 801503a:	2201      	movs	r2, #1
 801503c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801503e:	4b0f      	ldr	r3, [pc, #60]	; (801507c <USBH_LL_Init+0x74>)
 8015040:	2200      	movs	r2, #0
 8015042:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8015044:	4b0d      	ldr	r3, [pc, #52]	; (801507c <USBH_LL_Init+0x74>)
 8015046:	2202      	movs	r2, #2
 8015048:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801504a:	4b0c      	ldr	r3, [pc, #48]	; (801507c <USBH_LL_Init+0x74>)
 801504c:	2200      	movs	r2, #0
 801504e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8015050:	480a      	ldr	r0, [pc, #40]	; (801507c <USBH_LL_Init+0x74>)
 8015052:	f7f1 f8fa 	bl	800624a <HAL_HCD_Init>
 8015056:	4603      	mov	r3, r0
 8015058:	2b00      	cmp	r3, #0
 801505a:	d001      	beq.n	8015060 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801505c:	f7ed f838 	bl	80020d0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8015060:	4806      	ldr	r0, [pc, #24]	; (801507c <USBH_LL_Init+0x74>)
 8015062:	f7f1 fcfd 	bl	8006a60 <HAL_HCD_GetCurrentFrame>
 8015066:	4603      	mov	r3, r0
 8015068:	4619      	mov	r1, r3
 801506a:	6878      	ldr	r0, [r7, #4]
 801506c:	f7f9 fbca 	bl	800e804 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8015070:	2300      	movs	r3, #0
}
 8015072:	4618      	mov	r0, r3
 8015074:	3708      	adds	r7, #8
 8015076:	46bd      	mov	sp, r7
 8015078:	bd80      	pop	{r7, pc}
 801507a:	bf00      	nop
 801507c:	2003e1dc 	.word	0x2003e1dc

08015080 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8015080:	b580      	push	{r7, lr}
 8015082:	b084      	sub	sp, #16
 8015084:	af00      	add	r7, sp, #0
 8015086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015088:	2300      	movs	r3, #0
 801508a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801508c:	2300      	movs	r3, #0
 801508e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015096:	4618      	mov	r0, r3
 8015098:	f7f1 fc6a 	bl	8006970 <HAL_HCD_Start>
 801509c:	4603      	mov	r3, r0
 801509e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80150a0:	7bfb      	ldrb	r3, [r7, #15]
 80150a2:	4618      	mov	r0, r3
 80150a4:	f000 f95c 	bl	8015360 <USBH_Get_USB_Status>
 80150a8:	4603      	mov	r3, r0
 80150aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80150ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80150ae:	4618      	mov	r0, r3
 80150b0:	3710      	adds	r7, #16
 80150b2:	46bd      	mov	sp, r7
 80150b4:	bd80      	pop	{r7, pc}

080150b6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80150b6:	b580      	push	{r7, lr}
 80150b8:	b084      	sub	sp, #16
 80150ba:	af00      	add	r7, sp, #0
 80150bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80150be:	2300      	movs	r3, #0
 80150c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80150c2:	2300      	movs	r3, #0
 80150c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80150cc:	4618      	mov	r0, r3
 80150ce:	f7f1 fc72 	bl	80069b6 <HAL_HCD_Stop>
 80150d2:	4603      	mov	r3, r0
 80150d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80150d6:	7bfb      	ldrb	r3, [r7, #15]
 80150d8:	4618      	mov	r0, r3
 80150da:	f000 f941 	bl	8015360 <USBH_Get_USB_Status>
 80150de:	4603      	mov	r3, r0
 80150e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80150e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80150e4:	4618      	mov	r0, r3
 80150e6:	3710      	adds	r7, #16
 80150e8:	46bd      	mov	sp, r7
 80150ea:	bd80      	pop	{r7, pc}

080150ec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b084      	sub	sp, #16
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80150f4:	2301      	movs	r3, #1
 80150f6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80150fe:	4618      	mov	r0, r3
 8015100:	f7f1 fcbc 	bl	8006a7c <HAL_HCD_GetCurrentSpeed>
 8015104:	4603      	mov	r3, r0
 8015106:	2b01      	cmp	r3, #1
 8015108:	d007      	beq.n	801511a <USBH_LL_GetSpeed+0x2e>
 801510a:	2b01      	cmp	r3, #1
 801510c:	d302      	bcc.n	8015114 <USBH_LL_GetSpeed+0x28>
 801510e:	2b02      	cmp	r3, #2
 8015110:	d006      	beq.n	8015120 <USBH_LL_GetSpeed+0x34>
 8015112:	e008      	b.n	8015126 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8015114:	2300      	movs	r3, #0
 8015116:	73fb      	strb	r3, [r7, #15]
    break;
 8015118:	e008      	b.n	801512c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 801511a:	2301      	movs	r3, #1
 801511c:	73fb      	strb	r3, [r7, #15]
    break;
 801511e:	e005      	b.n	801512c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8015120:	2302      	movs	r3, #2
 8015122:	73fb      	strb	r3, [r7, #15]
    break;
 8015124:	e002      	b.n	801512c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8015126:	2301      	movs	r3, #1
 8015128:	73fb      	strb	r3, [r7, #15]
    break;
 801512a:	bf00      	nop
  }
  return  speed;
 801512c:	7bfb      	ldrb	r3, [r7, #15]
}
 801512e:	4618      	mov	r0, r3
 8015130:	3710      	adds	r7, #16
 8015132:	46bd      	mov	sp, r7
 8015134:	bd80      	pop	{r7, pc}

08015136 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8015136:	b580      	push	{r7, lr}
 8015138:	b084      	sub	sp, #16
 801513a:	af00      	add	r7, sp, #0
 801513c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801513e:	2300      	movs	r3, #0
 8015140:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015142:	2300      	movs	r3, #0
 8015144:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801514c:	4618      	mov	r0, r3
 801514e:	f7f1 fc4f 	bl	80069f0 <HAL_HCD_ResetPort>
 8015152:	4603      	mov	r3, r0
 8015154:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015156:	7bfb      	ldrb	r3, [r7, #15]
 8015158:	4618      	mov	r0, r3
 801515a:	f000 f901 	bl	8015360 <USBH_Get_USB_Status>
 801515e:	4603      	mov	r3, r0
 8015160:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015162:	7bbb      	ldrb	r3, [r7, #14]
}
 8015164:	4618      	mov	r0, r3
 8015166:	3710      	adds	r7, #16
 8015168:	46bd      	mov	sp, r7
 801516a:	bd80      	pop	{r7, pc}

0801516c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801516c:	b580      	push	{r7, lr}
 801516e:	b082      	sub	sp, #8
 8015170:	af00      	add	r7, sp, #0
 8015172:	6078      	str	r0, [r7, #4]
 8015174:	460b      	mov	r3, r1
 8015176:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801517e:	78fa      	ldrb	r2, [r7, #3]
 8015180:	4611      	mov	r1, r2
 8015182:	4618      	mov	r0, r3
 8015184:	f7f1 fc57 	bl	8006a36 <HAL_HCD_HC_GetXferCount>
 8015188:	4603      	mov	r3, r0
}
 801518a:	4618      	mov	r0, r3
 801518c:	3708      	adds	r7, #8
 801518e:	46bd      	mov	sp, r7
 8015190:	bd80      	pop	{r7, pc}

08015192 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8015192:	b590      	push	{r4, r7, lr}
 8015194:	b089      	sub	sp, #36	; 0x24
 8015196:	af04      	add	r7, sp, #16
 8015198:	6078      	str	r0, [r7, #4]
 801519a:	4608      	mov	r0, r1
 801519c:	4611      	mov	r1, r2
 801519e:	461a      	mov	r2, r3
 80151a0:	4603      	mov	r3, r0
 80151a2:	70fb      	strb	r3, [r7, #3]
 80151a4:	460b      	mov	r3, r1
 80151a6:	70bb      	strb	r3, [r7, #2]
 80151a8:	4613      	mov	r3, r2
 80151aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80151ac:	2300      	movs	r3, #0
 80151ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80151b0:	2300      	movs	r3, #0
 80151b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80151ba:	787c      	ldrb	r4, [r7, #1]
 80151bc:	78ba      	ldrb	r2, [r7, #2]
 80151be:	78f9      	ldrb	r1, [r7, #3]
 80151c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80151c2:	9302      	str	r3, [sp, #8]
 80151c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80151c8:	9301      	str	r3, [sp, #4]
 80151ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80151ce:	9300      	str	r3, [sp, #0]
 80151d0:	4623      	mov	r3, r4
 80151d2:	f7f1 f89c 	bl	800630e <HAL_HCD_HC_Init>
 80151d6:	4603      	mov	r3, r0
 80151d8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80151da:	7bfb      	ldrb	r3, [r7, #15]
 80151dc:	4618      	mov	r0, r3
 80151de:	f000 f8bf 	bl	8015360 <USBH_Get_USB_Status>
 80151e2:	4603      	mov	r3, r0
 80151e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80151e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80151e8:	4618      	mov	r0, r3
 80151ea:	3714      	adds	r7, #20
 80151ec:	46bd      	mov	sp, r7
 80151ee:	bd90      	pop	{r4, r7, pc}

080151f0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80151f0:	b580      	push	{r7, lr}
 80151f2:	b084      	sub	sp, #16
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	6078      	str	r0, [r7, #4]
 80151f8:	460b      	mov	r3, r1
 80151fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80151fc:	2300      	movs	r3, #0
 80151fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015200:	2300      	movs	r3, #0
 8015202:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801520a:	78fa      	ldrb	r2, [r7, #3]
 801520c:	4611      	mov	r1, r2
 801520e:	4618      	mov	r0, r3
 8015210:	f7f1 f915 	bl	800643e <HAL_HCD_HC_Halt>
 8015214:	4603      	mov	r3, r0
 8015216:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015218:	7bfb      	ldrb	r3, [r7, #15]
 801521a:	4618      	mov	r0, r3
 801521c:	f000 f8a0 	bl	8015360 <USBH_Get_USB_Status>
 8015220:	4603      	mov	r3, r0
 8015222:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015224:	7bbb      	ldrb	r3, [r7, #14]
}
 8015226:	4618      	mov	r0, r3
 8015228:	3710      	adds	r7, #16
 801522a:	46bd      	mov	sp, r7
 801522c:	bd80      	pop	{r7, pc}

0801522e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801522e:	b590      	push	{r4, r7, lr}
 8015230:	b089      	sub	sp, #36	; 0x24
 8015232:	af04      	add	r7, sp, #16
 8015234:	6078      	str	r0, [r7, #4]
 8015236:	4608      	mov	r0, r1
 8015238:	4611      	mov	r1, r2
 801523a:	461a      	mov	r2, r3
 801523c:	4603      	mov	r3, r0
 801523e:	70fb      	strb	r3, [r7, #3]
 8015240:	460b      	mov	r3, r1
 8015242:	70bb      	strb	r3, [r7, #2]
 8015244:	4613      	mov	r3, r2
 8015246:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015248:	2300      	movs	r3, #0
 801524a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801524c:	2300      	movs	r3, #0
 801524e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8015256:	787c      	ldrb	r4, [r7, #1]
 8015258:	78ba      	ldrb	r2, [r7, #2]
 801525a:	78f9      	ldrb	r1, [r7, #3]
 801525c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8015260:	9303      	str	r3, [sp, #12]
 8015262:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8015264:	9302      	str	r3, [sp, #8]
 8015266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015268:	9301      	str	r3, [sp, #4]
 801526a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801526e:	9300      	str	r3, [sp, #0]
 8015270:	4623      	mov	r3, r4
 8015272:	f7f1 f907 	bl	8006484 <HAL_HCD_HC_SubmitRequest>
 8015276:	4603      	mov	r3, r0
 8015278:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801527a:	7bfb      	ldrb	r3, [r7, #15]
 801527c:	4618      	mov	r0, r3
 801527e:	f000 f86f 	bl	8015360 <USBH_Get_USB_Status>
 8015282:	4603      	mov	r3, r0
 8015284:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015286:	7bbb      	ldrb	r3, [r7, #14]
}
 8015288:	4618      	mov	r0, r3
 801528a:	3714      	adds	r7, #20
 801528c:	46bd      	mov	sp, r7
 801528e:	bd90      	pop	{r4, r7, pc}

08015290 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015290:	b580      	push	{r7, lr}
 8015292:	b082      	sub	sp, #8
 8015294:	af00      	add	r7, sp, #0
 8015296:	6078      	str	r0, [r7, #4]
 8015298:	460b      	mov	r3, r1
 801529a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80152a2:	78fa      	ldrb	r2, [r7, #3]
 80152a4:	4611      	mov	r1, r2
 80152a6:	4618      	mov	r0, r3
 80152a8:	f7f1 fbb0 	bl	8006a0c <HAL_HCD_HC_GetURBState>
 80152ac:	4603      	mov	r3, r0
}
 80152ae:	4618      	mov	r0, r3
 80152b0:	3708      	adds	r7, #8
 80152b2:	46bd      	mov	sp, r7
 80152b4:	bd80      	pop	{r7, pc}

080152b6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80152b6:	b580      	push	{r7, lr}
 80152b8:	b082      	sub	sp, #8
 80152ba:	af00      	add	r7, sp, #0
 80152bc:	6078      	str	r0, [r7, #4]
 80152be:	460b      	mov	r3, r1
 80152c0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80152c8:	2b01      	cmp	r3, #1
 80152ca:	d103      	bne.n	80152d4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80152cc:	78fb      	ldrb	r3, [r7, #3]
 80152ce:	4618      	mov	r0, r3
 80152d0:	f000 f872 	bl	80153b8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80152d4:	20c8      	movs	r0, #200	; 0xc8
 80152d6:	f7ef fd89 	bl	8004dec <HAL_Delay>
  return USBH_OK;
 80152da:	2300      	movs	r3, #0
}
 80152dc:	4618      	mov	r0, r3
 80152de:	3708      	adds	r7, #8
 80152e0:	46bd      	mov	sp, r7
 80152e2:	bd80      	pop	{r7, pc}

080152e4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80152e4:	b480      	push	{r7}
 80152e6:	b085      	sub	sp, #20
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	6078      	str	r0, [r7, #4]
 80152ec:	460b      	mov	r3, r1
 80152ee:	70fb      	strb	r3, [r7, #3]
 80152f0:	4613      	mov	r3, r2
 80152f2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80152fa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80152fc:	78fa      	ldrb	r2, [r7, #3]
 80152fe:	68f9      	ldr	r1, [r7, #12]
 8015300:	4613      	mov	r3, r2
 8015302:	009b      	lsls	r3, r3, #2
 8015304:	4413      	add	r3, r2
 8015306:	00db      	lsls	r3, r3, #3
 8015308:	440b      	add	r3, r1
 801530a:	333b      	adds	r3, #59	; 0x3b
 801530c:	781b      	ldrb	r3, [r3, #0]
 801530e:	2b00      	cmp	r3, #0
 8015310:	d00a      	beq.n	8015328 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8015312:	78fa      	ldrb	r2, [r7, #3]
 8015314:	68f9      	ldr	r1, [r7, #12]
 8015316:	4613      	mov	r3, r2
 8015318:	009b      	lsls	r3, r3, #2
 801531a:	4413      	add	r3, r2
 801531c:	00db      	lsls	r3, r3, #3
 801531e:	440b      	add	r3, r1
 8015320:	3350      	adds	r3, #80	; 0x50
 8015322:	78ba      	ldrb	r2, [r7, #2]
 8015324:	701a      	strb	r2, [r3, #0]
 8015326:	e009      	b.n	801533c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8015328:	78fa      	ldrb	r2, [r7, #3]
 801532a:	68f9      	ldr	r1, [r7, #12]
 801532c:	4613      	mov	r3, r2
 801532e:	009b      	lsls	r3, r3, #2
 8015330:	4413      	add	r3, r2
 8015332:	00db      	lsls	r3, r3, #3
 8015334:	440b      	add	r3, r1
 8015336:	3351      	adds	r3, #81	; 0x51
 8015338:	78ba      	ldrb	r2, [r7, #2]
 801533a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801533c:	2300      	movs	r3, #0
}
 801533e:	4618      	mov	r0, r3
 8015340:	3714      	adds	r7, #20
 8015342:	46bd      	mov	sp, r7
 8015344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015348:	4770      	bx	lr

0801534a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801534a:	b580      	push	{r7, lr}
 801534c:	b082      	sub	sp, #8
 801534e:	af00      	add	r7, sp, #0
 8015350:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8015352:	6878      	ldr	r0, [r7, #4]
 8015354:	f7ef fd4a 	bl	8004dec <HAL_Delay>
}
 8015358:	bf00      	nop
 801535a:	3708      	adds	r7, #8
 801535c:	46bd      	mov	sp, r7
 801535e:	bd80      	pop	{r7, pc}

08015360 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015360:	b480      	push	{r7}
 8015362:	b085      	sub	sp, #20
 8015364:	af00      	add	r7, sp, #0
 8015366:	4603      	mov	r3, r0
 8015368:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801536a:	2300      	movs	r3, #0
 801536c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801536e:	79fb      	ldrb	r3, [r7, #7]
 8015370:	2b03      	cmp	r3, #3
 8015372:	d817      	bhi.n	80153a4 <USBH_Get_USB_Status+0x44>
 8015374:	a201      	add	r2, pc, #4	; (adr r2, 801537c <USBH_Get_USB_Status+0x1c>)
 8015376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801537a:	bf00      	nop
 801537c:	0801538d 	.word	0x0801538d
 8015380:	08015393 	.word	0x08015393
 8015384:	08015399 	.word	0x08015399
 8015388:	0801539f 	.word	0x0801539f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801538c:	2300      	movs	r3, #0
 801538e:	73fb      	strb	r3, [r7, #15]
    break;
 8015390:	e00b      	b.n	80153aa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8015392:	2302      	movs	r3, #2
 8015394:	73fb      	strb	r3, [r7, #15]
    break;
 8015396:	e008      	b.n	80153aa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8015398:	2301      	movs	r3, #1
 801539a:	73fb      	strb	r3, [r7, #15]
    break;
 801539c:	e005      	b.n	80153aa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801539e:	2302      	movs	r3, #2
 80153a0:	73fb      	strb	r3, [r7, #15]
    break;
 80153a2:	e002      	b.n	80153aa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80153a4:	2302      	movs	r3, #2
 80153a6:	73fb      	strb	r3, [r7, #15]
    break;
 80153a8:	bf00      	nop
  }
  return usb_status;
 80153aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80153ac:	4618      	mov	r0, r3
 80153ae:	3714      	adds	r7, #20
 80153b0:	46bd      	mov	sp, r7
 80153b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b6:	4770      	bx	lr

080153b8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80153b8:	b580      	push	{r7, lr}
 80153ba:	b084      	sub	sp, #16
 80153bc:	af00      	add	r7, sp, #0
 80153be:	4603      	mov	r3, r0
 80153c0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80153c2:	79fb      	ldrb	r3, [r7, #7]
 80153c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80153c6:	79fb      	ldrb	r3, [r7, #7]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d102      	bne.n	80153d2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80153cc:	2301      	movs	r3, #1
 80153ce:	73fb      	strb	r3, [r7, #15]
 80153d0:	e001      	b.n	80153d6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80153d2:	2300      	movs	r3, #0
 80153d4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 80153d6:	7bfb      	ldrb	r3, [r7, #15]
 80153d8:	461a      	mov	r2, r3
 80153da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80153de:	4803      	ldr	r0, [pc, #12]	; (80153ec <MX_DriverVbusFS+0x34>)
 80153e0:	f7f0 fedc 	bl	800619c <HAL_GPIO_WritePin>
}
 80153e4:	bf00      	nop
 80153e6:	3710      	adds	r7, #16
 80153e8:	46bd      	mov	sp, r7
 80153ea:	bd80      	pop	{r7, pc}
 80153ec:	40021800 	.word	0x40021800

080153f0 <sqrt>:
 80153f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80153f4:	ed2d 8b02 	vpush	{d8}
 80153f8:	b08b      	sub	sp, #44	; 0x2c
 80153fa:	ec55 4b10 	vmov	r4, r5, d0
 80153fe:	f000 f851 	bl	80154a4 <__ieee754_sqrt>
 8015402:	4b26      	ldr	r3, [pc, #152]	; (801549c <sqrt+0xac>)
 8015404:	eeb0 8a40 	vmov.f32	s16, s0
 8015408:	eef0 8a60 	vmov.f32	s17, s1
 801540c:	f993 6000 	ldrsb.w	r6, [r3]
 8015410:	1c73      	adds	r3, r6, #1
 8015412:	d02a      	beq.n	801546a <sqrt+0x7a>
 8015414:	4622      	mov	r2, r4
 8015416:	462b      	mov	r3, r5
 8015418:	4620      	mov	r0, r4
 801541a:	4629      	mov	r1, r5
 801541c:	f7eb fba6 	bl	8000b6c <__aeabi_dcmpun>
 8015420:	4607      	mov	r7, r0
 8015422:	bb10      	cbnz	r0, 801546a <sqrt+0x7a>
 8015424:	f04f 0800 	mov.w	r8, #0
 8015428:	f04f 0900 	mov.w	r9, #0
 801542c:	4642      	mov	r2, r8
 801542e:	464b      	mov	r3, r9
 8015430:	4620      	mov	r0, r4
 8015432:	4629      	mov	r1, r5
 8015434:	f7eb fb72 	bl	8000b1c <__aeabi_dcmplt>
 8015438:	b1b8      	cbz	r0, 801546a <sqrt+0x7a>
 801543a:	2301      	movs	r3, #1
 801543c:	9300      	str	r3, [sp, #0]
 801543e:	4b18      	ldr	r3, [pc, #96]	; (80154a0 <sqrt+0xb0>)
 8015440:	9301      	str	r3, [sp, #4]
 8015442:	9708      	str	r7, [sp, #32]
 8015444:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8015448:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801544c:	b9b6      	cbnz	r6, 801547c <sqrt+0x8c>
 801544e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8015452:	4668      	mov	r0, sp
 8015454:	f000 f8d6 	bl	8015604 <matherr>
 8015458:	b1d0      	cbz	r0, 8015490 <sqrt+0xa0>
 801545a:	9b08      	ldr	r3, [sp, #32]
 801545c:	b11b      	cbz	r3, 8015466 <sqrt+0x76>
 801545e:	f000 f8d3 	bl	8015608 <__errno>
 8015462:	9b08      	ldr	r3, [sp, #32]
 8015464:	6003      	str	r3, [r0, #0]
 8015466:	ed9d 8b06 	vldr	d8, [sp, #24]
 801546a:	eeb0 0a48 	vmov.f32	s0, s16
 801546e:	eef0 0a68 	vmov.f32	s1, s17
 8015472:	b00b      	add	sp, #44	; 0x2c
 8015474:	ecbd 8b02 	vpop	{d8}
 8015478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801547c:	4642      	mov	r2, r8
 801547e:	464b      	mov	r3, r9
 8015480:	4640      	mov	r0, r8
 8015482:	4649      	mov	r1, r9
 8015484:	f7eb fa02 	bl	800088c <__aeabi_ddiv>
 8015488:	2e02      	cmp	r6, #2
 801548a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801548e:	d1e0      	bne.n	8015452 <sqrt+0x62>
 8015490:	f000 f8ba 	bl	8015608 <__errno>
 8015494:	2321      	movs	r3, #33	; 0x21
 8015496:	6003      	str	r3, [r0, #0]
 8015498:	e7df      	b.n	801545a <sqrt+0x6a>
 801549a:	bf00      	nop
 801549c:	200000c8 	.word	0x200000c8
 80154a0:	08018f74 	.word	0x08018f74

080154a4 <__ieee754_sqrt>:
 80154a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154a8:	4955      	ldr	r1, [pc, #340]	; (8015600 <__ieee754_sqrt+0x15c>)
 80154aa:	ec55 4b10 	vmov	r4, r5, d0
 80154ae:	43a9      	bics	r1, r5
 80154b0:	462b      	mov	r3, r5
 80154b2:	462a      	mov	r2, r5
 80154b4:	d112      	bne.n	80154dc <__ieee754_sqrt+0x38>
 80154b6:	ee10 2a10 	vmov	r2, s0
 80154ba:	ee10 0a10 	vmov	r0, s0
 80154be:	4629      	mov	r1, r5
 80154c0:	f7eb f8ba 	bl	8000638 <__aeabi_dmul>
 80154c4:	4602      	mov	r2, r0
 80154c6:	460b      	mov	r3, r1
 80154c8:	4620      	mov	r0, r4
 80154ca:	4629      	mov	r1, r5
 80154cc:	f7ea fefe 	bl	80002cc <__adddf3>
 80154d0:	4604      	mov	r4, r0
 80154d2:	460d      	mov	r5, r1
 80154d4:	ec45 4b10 	vmov	d0, r4, r5
 80154d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154dc:	2d00      	cmp	r5, #0
 80154de:	ee10 0a10 	vmov	r0, s0
 80154e2:	4621      	mov	r1, r4
 80154e4:	dc0f      	bgt.n	8015506 <__ieee754_sqrt+0x62>
 80154e6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80154ea:	4330      	orrs	r0, r6
 80154ec:	d0f2      	beq.n	80154d4 <__ieee754_sqrt+0x30>
 80154ee:	b155      	cbz	r5, 8015506 <__ieee754_sqrt+0x62>
 80154f0:	ee10 2a10 	vmov	r2, s0
 80154f4:	4620      	mov	r0, r4
 80154f6:	4629      	mov	r1, r5
 80154f8:	f7ea fee6 	bl	80002c8 <__aeabi_dsub>
 80154fc:	4602      	mov	r2, r0
 80154fe:	460b      	mov	r3, r1
 8015500:	f7eb f9c4 	bl	800088c <__aeabi_ddiv>
 8015504:	e7e4      	b.n	80154d0 <__ieee754_sqrt+0x2c>
 8015506:	151b      	asrs	r3, r3, #20
 8015508:	d073      	beq.n	80155f2 <__ieee754_sqrt+0x14e>
 801550a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801550e:	07dd      	lsls	r5, r3, #31
 8015510:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8015514:	bf48      	it	mi
 8015516:	0fc8      	lsrmi	r0, r1, #31
 8015518:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801551c:	bf44      	itt	mi
 801551e:	0049      	lslmi	r1, r1, #1
 8015520:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8015524:	2500      	movs	r5, #0
 8015526:	1058      	asrs	r0, r3, #1
 8015528:	0fcb      	lsrs	r3, r1, #31
 801552a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801552e:	0049      	lsls	r1, r1, #1
 8015530:	2316      	movs	r3, #22
 8015532:	462c      	mov	r4, r5
 8015534:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8015538:	19a7      	adds	r7, r4, r6
 801553a:	4297      	cmp	r7, r2
 801553c:	bfde      	ittt	le
 801553e:	19bc      	addle	r4, r7, r6
 8015540:	1bd2      	suble	r2, r2, r7
 8015542:	19ad      	addle	r5, r5, r6
 8015544:	0fcf      	lsrs	r7, r1, #31
 8015546:	3b01      	subs	r3, #1
 8015548:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801554c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015550:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8015554:	d1f0      	bne.n	8015538 <__ieee754_sqrt+0x94>
 8015556:	f04f 0c20 	mov.w	ip, #32
 801555a:	469e      	mov	lr, r3
 801555c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8015560:	42a2      	cmp	r2, r4
 8015562:	eb06 070e 	add.w	r7, r6, lr
 8015566:	dc02      	bgt.n	801556e <__ieee754_sqrt+0xca>
 8015568:	d112      	bne.n	8015590 <__ieee754_sqrt+0xec>
 801556a:	428f      	cmp	r7, r1
 801556c:	d810      	bhi.n	8015590 <__ieee754_sqrt+0xec>
 801556e:	2f00      	cmp	r7, #0
 8015570:	eb07 0e06 	add.w	lr, r7, r6
 8015574:	da42      	bge.n	80155fc <__ieee754_sqrt+0x158>
 8015576:	f1be 0f00 	cmp.w	lr, #0
 801557a:	db3f      	blt.n	80155fc <__ieee754_sqrt+0x158>
 801557c:	f104 0801 	add.w	r8, r4, #1
 8015580:	1b12      	subs	r2, r2, r4
 8015582:	428f      	cmp	r7, r1
 8015584:	bf88      	it	hi
 8015586:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801558a:	1bc9      	subs	r1, r1, r7
 801558c:	4433      	add	r3, r6
 801558e:	4644      	mov	r4, r8
 8015590:	0052      	lsls	r2, r2, #1
 8015592:	f1bc 0c01 	subs.w	ip, ip, #1
 8015596:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801559a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801559e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80155a2:	d1dd      	bne.n	8015560 <__ieee754_sqrt+0xbc>
 80155a4:	430a      	orrs	r2, r1
 80155a6:	d006      	beq.n	80155b6 <__ieee754_sqrt+0x112>
 80155a8:	1c5c      	adds	r4, r3, #1
 80155aa:	bf13      	iteet	ne
 80155ac:	3301      	addne	r3, #1
 80155ae:	3501      	addeq	r5, #1
 80155b0:	4663      	moveq	r3, ip
 80155b2:	f023 0301 	bicne.w	r3, r3, #1
 80155b6:	106a      	asrs	r2, r5, #1
 80155b8:	085b      	lsrs	r3, r3, #1
 80155ba:	07e9      	lsls	r1, r5, #31
 80155bc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80155c0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80155c4:	bf48      	it	mi
 80155c6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80155ca:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80155ce:	461c      	mov	r4, r3
 80155d0:	e780      	b.n	80154d4 <__ieee754_sqrt+0x30>
 80155d2:	0aca      	lsrs	r2, r1, #11
 80155d4:	3815      	subs	r0, #21
 80155d6:	0549      	lsls	r1, r1, #21
 80155d8:	2a00      	cmp	r2, #0
 80155da:	d0fa      	beq.n	80155d2 <__ieee754_sqrt+0x12e>
 80155dc:	02d6      	lsls	r6, r2, #11
 80155de:	d50a      	bpl.n	80155f6 <__ieee754_sqrt+0x152>
 80155e0:	f1c3 0420 	rsb	r4, r3, #32
 80155e4:	fa21 f404 	lsr.w	r4, r1, r4
 80155e8:	1e5d      	subs	r5, r3, #1
 80155ea:	4099      	lsls	r1, r3
 80155ec:	4322      	orrs	r2, r4
 80155ee:	1b43      	subs	r3, r0, r5
 80155f0:	e78b      	b.n	801550a <__ieee754_sqrt+0x66>
 80155f2:	4618      	mov	r0, r3
 80155f4:	e7f0      	b.n	80155d8 <__ieee754_sqrt+0x134>
 80155f6:	0052      	lsls	r2, r2, #1
 80155f8:	3301      	adds	r3, #1
 80155fa:	e7ef      	b.n	80155dc <__ieee754_sqrt+0x138>
 80155fc:	46a0      	mov	r8, r4
 80155fe:	e7bf      	b.n	8015580 <__ieee754_sqrt+0xdc>
 8015600:	7ff00000 	.word	0x7ff00000

08015604 <matherr>:
 8015604:	2000      	movs	r0, #0
 8015606:	4770      	bx	lr

08015608 <__errno>:
 8015608:	4b01      	ldr	r3, [pc, #4]	; (8015610 <__errno+0x8>)
 801560a:	6818      	ldr	r0, [r3, #0]
 801560c:	4770      	bx	lr
 801560e:	bf00      	nop
 8015610:	200000cc 	.word	0x200000cc

08015614 <__libc_init_array>:
 8015614:	b570      	push	{r4, r5, r6, lr}
 8015616:	4e0d      	ldr	r6, [pc, #52]	; (801564c <__libc_init_array+0x38>)
 8015618:	4c0d      	ldr	r4, [pc, #52]	; (8015650 <__libc_init_array+0x3c>)
 801561a:	1ba4      	subs	r4, r4, r6
 801561c:	10a4      	asrs	r4, r4, #2
 801561e:	2500      	movs	r5, #0
 8015620:	42a5      	cmp	r5, r4
 8015622:	d109      	bne.n	8015638 <__libc_init_array+0x24>
 8015624:	4e0b      	ldr	r6, [pc, #44]	; (8015654 <__libc_init_array+0x40>)
 8015626:	4c0c      	ldr	r4, [pc, #48]	; (8015658 <__libc_init_array+0x44>)
 8015628:	f000 fc40 	bl	8015eac <_init>
 801562c:	1ba4      	subs	r4, r4, r6
 801562e:	10a4      	asrs	r4, r4, #2
 8015630:	2500      	movs	r5, #0
 8015632:	42a5      	cmp	r5, r4
 8015634:	d105      	bne.n	8015642 <__libc_init_array+0x2e>
 8015636:	bd70      	pop	{r4, r5, r6, pc}
 8015638:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801563c:	4798      	blx	r3
 801563e:	3501      	adds	r5, #1
 8015640:	e7ee      	b.n	8015620 <__libc_init_array+0xc>
 8015642:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015646:	4798      	blx	r3
 8015648:	3501      	adds	r5, #1
 801564a:	e7f2      	b.n	8015632 <__libc_init_array+0x1e>
 801564c:	08019018 	.word	0x08019018
 8015650:	08019018 	.word	0x08019018
 8015654:	08019018 	.word	0x08019018
 8015658:	0801901c 	.word	0x0801901c

0801565c <malloc>:
 801565c:	4b02      	ldr	r3, [pc, #8]	; (8015668 <malloc+0xc>)
 801565e:	4601      	mov	r1, r0
 8015660:	6818      	ldr	r0, [r3, #0]
 8015662:	f000 b86d 	b.w	8015740 <_malloc_r>
 8015666:	bf00      	nop
 8015668:	200000cc 	.word	0x200000cc

0801566c <free>:
 801566c:	4b02      	ldr	r3, [pc, #8]	; (8015678 <free+0xc>)
 801566e:	4601      	mov	r1, r0
 8015670:	6818      	ldr	r0, [r3, #0]
 8015672:	f000 b817 	b.w	80156a4 <_free_r>
 8015676:	bf00      	nop
 8015678:	200000cc 	.word	0x200000cc

0801567c <memcpy>:
 801567c:	b510      	push	{r4, lr}
 801567e:	1e43      	subs	r3, r0, #1
 8015680:	440a      	add	r2, r1
 8015682:	4291      	cmp	r1, r2
 8015684:	d100      	bne.n	8015688 <memcpy+0xc>
 8015686:	bd10      	pop	{r4, pc}
 8015688:	f811 4b01 	ldrb.w	r4, [r1], #1
 801568c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015690:	e7f7      	b.n	8015682 <memcpy+0x6>

08015692 <memset>:
 8015692:	4402      	add	r2, r0
 8015694:	4603      	mov	r3, r0
 8015696:	4293      	cmp	r3, r2
 8015698:	d100      	bne.n	801569c <memset+0xa>
 801569a:	4770      	bx	lr
 801569c:	f803 1b01 	strb.w	r1, [r3], #1
 80156a0:	e7f9      	b.n	8015696 <memset+0x4>
	...

080156a4 <_free_r>:
 80156a4:	b538      	push	{r3, r4, r5, lr}
 80156a6:	4605      	mov	r5, r0
 80156a8:	2900      	cmp	r1, #0
 80156aa:	d045      	beq.n	8015738 <_free_r+0x94>
 80156ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80156b0:	1f0c      	subs	r4, r1, #4
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	bfb8      	it	lt
 80156b6:	18e4      	addlt	r4, r4, r3
 80156b8:	f000 f8d4 	bl	8015864 <__malloc_lock>
 80156bc:	4a1f      	ldr	r2, [pc, #124]	; (801573c <_free_r+0x98>)
 80156be:	6813      	ldr	r3, [r2, #0]
 80156c0:	4610      	mov	r0, r2
 80156c2:	b933      	cbnz	r3, 80156d2 <_free_r+0x2e>
 80156c4:	6063      	str	r3, [r4, #4]
 80156c6:	6014      	str	r4, [r2, #0]
 80156c8:	4628      	mov	r0, r5
 80156ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80156ce:	f000 b8ca 	b.w	8015866 <__malloc_unlock>
 80156d2:	42a3      	cmp	r3, r4
 80156d4:	d90c      	bls.n	80156f0 <_free_r+0x4c>
 80156d6:	6821      	ldr	r1, [r4, #0]
 80156d8:	1862      	adds	r2, r4, r1
 80156da:	4293      	cmp	r3, r2
 80156dc:	bf04      	itt	eq
 80156de:	681a      	ldreq	r2, [r3, #0]
 80156e0:	685b      	ldreq	r3, [r3, #4]
 80156e2:	6063      	str	r3, [r4, #4]
 80156e4:	bf04      	itt	eq
 80156e6:	1852      	addeq	r2, r2, r1
 80156e8:	6022      	streq	r2, [r4, #0]
 80156ea:	6004      	str	r4, [r0, #0]
 80156ec:	e7ec      	b.n	80156c8 <_free_r+0x24>
 80156ee:	4613      	mov	r3, r2
 80156f0:	685a      	ldr	r2, [r3, #4]
 80156f2:	b10a      	cbz	r2, 80156f8 <_free_r+0x54>
 80156f4:	42a2      	cmp	r2, r4
 80156f6:	d9fa      	bls.n	80156ee <_free_r+0x4a>
 80156f8:	6819      	ldr	r1, [r3, #0]
 80156fa:	1858      	adds	r0, r3, r1
 80156fc:	42a0      	cmp	r0, r4
 80156fe:	d10b      	bne.n	8015718 <_free_r+0x74>
 8015700:	6820      	ldr	r0, [r4, #0]
 8015702:	4401      	add	r1, r0
 8015704:	1858      	adds	r0, r3, r1
 8015706:	4282      	cmp	r2, r0
 8015708:	6019      	str	r1, [r3, #0]
 801570a:	d1dd      	bne.n	80156c8 <_free_r+0x24>
 801570c:	6810      	ldr	r0, [r2, #0]
 801570e:	6852      	ldr	r2, [r2, #4]
 8015710:	605a      	str	r2, [r3, #4]
 8015712:	4401      	add	r1, r0
 8015714:	6019      	str	r1, [r3, #0]
 8015716:	e7d7      	b.n	80156c8 <_free_r+0x24>
 8015718:	d902      	bls.n	8015720 <_free_r+0x7c>
 801571a:	230c      	movs	r3, #12
 801571c:	602b      	str	r3, [r5, #0]
 801571e:	e7d3      	b.n	80156c8 <_free_r+0x24>
 8015720:	6820      	ldr	r0, [r4, #0]
 8015722:	1821      	adds	r1, r4, r0
 8015724:	428a      	cmp	r2, r1
 8015726:	bf04      	itt	eq
 8015728:	6811      	ldreq	r1, [r2, #0]
 801572a:	6852      	ldreq	r2, [r2, #4]
 801572c:	6062      	str	r2, [r4, #4]
 801572e:	bf04      	itt	eq
 8015730:	1809      	addeq	r1, r1, r0
 8015732:	6021      	streq	r1, [r4, #0]
 8015734:	605c      	str	r4, [r3, #4]
 8015736:	e7c7      	b.n	80156c8 <_free_r+0x24>
 8015738:	bd38      	pop	{r3, r4, r5, pc}
 801573a:	bf00      	nop
 801573c:	20004bc4 	.word	0x20004bc4

08015740 <_malloc_r>:
 8015740:	b570      	push	{r4, r5, r6, lr}
 8015742:	1ccd      	adds	r5, r1, #3
 8015744:	f025 0503 	bic.w	r5, r5, #3
 8015748:	3508      	adds	r5, #8
 801574a:	2d0c      	cmp	r5, #12
 801574c:	bf38      	it	cc
 801574e:	250c      	movcc	r5, #12
 8015750:	2d00      	cmp	r5, #0
 8015752:	4606      	mov	r6, r0
 8015754:	db01      	blt.n	801575a <_malloc_r+0x1a>
 8015756:	42a9      	cmp	r1, r5
 8015758:	d903      	bls.n	8015762 <_malloc_r+0x22>
 801575a:	230c      	movs	r3, #12
 801575c:	6033      	str	r3, [r6, #0]
 801575e:	2000      	movs	r0, #0
 8015760:	bd70      	pop	{r4, r5, r6, pc}
 8015762:	f000 f87f 	bl	8015864 <__malloc_lock>
 8015766:	4a21      	ldr	r2, [pc, #132]	; (80157ec <_malloc_r+0xac>)
 8015768:	6814      	ldr	r4, [r2, #0]
 801576a:	4621      	mov	r1, r4
 801576c:	b991      	cbnz	r1, 8015794 <_malloc_r+0x54>
 801576e:	4c20      	ldr	r4, [pc, #128]	; (80157f0 <_malloc_r+0xb0>)
 8015770:	6823      	ldr	r3, [r4, #0]
 8015772:	b91b      	cbnz	r3, 801577c <_malloc_r+0x3c>
 8015774:	4630      	mov	r0, r6
 8015776:	f000 f83d 	bl	80157f4 <_sbrk_r>
 801577a:	6020      	str	r0, [r4, #0]
 801577c:	4629      	mov	r1, r5
 801577e:	4630      	mov	r0, r6
 8015780:	f000 f838 	bl	80157f4 <_sbrk_r>
 8015784:	1c43      	adds	r3, r0, #1
 8015786:	d124      	bne.n	80157d2 <_malloc_r+0x92>
 8015788:	230c      	movs	r3, #12
 801578a:	6033      	str	r3, [r6, #0]
 801578c:	4630      	mov	r0, r6
 801578e:	f000 f86a 	bl	8015866 <__malloc_unlock>
 8015792:	e7e4      	b.n	801575e <_malloc_r+0x1e>
 8015794:	680b      	ldr	r3, [r1, #0]
 8015796:	1b5b      	subs	r3, r3, r5
 8015798:	d418      	bmi.n	80157cc <_malloc_r+0x8c>
 801579a:	2b0b      	cmp	r3, #11
 801579c:	d90f      	bls.n	80157be <_malloc_r+0x7e>
 801579e:	600b      	str	r3, [r1, #0]
 80157a0:	50cd      	str	r5, [r1, r3]
 80157a2:	18cc      	adds	r4, r1, r3
 80157a4:	4630      	mov	r0, r6
 80157a6:	f000 f85e 	bl	8015866 <__malloc_unlock>
 80157aa:	f104 000b 	add.w	r0, r4, #11
 80157ae:	1d23      	adds	r3, r4, #4
 80157b0:	f020 0007 	bic.w	r0, r0, #7
 80157b4:	1ac3      	subs	r3, r0, r3
 80157b6:	d0d3      	beq.n	8015760 <_malloc_r+0x20>
 80157b8:	425a      	negs	r2, r3
 80157ba:	50e2      	str	r2, [r4, r3]
 80157bc:	e7d0      	b.n	8015760 <_malloc_r+0x20>
 80157be:	428c      	cmp	r4, r1
 80157c0:	684b      	ldr	r3, [r1, #4]
 80157c2:	bf16      	itet	ne
 80157c4:	6063      	strne	r3, [r4, #4]
 80157c6:	6013      	streq	r3, [r2, #0]
 80157c8:	460c      	movne	r4, r1
 80157ca:	e7eb      	b.n	80157a4 <_malloc_r+0x64>
 80157cc:	460c      	mov	r4, r1
 80157ce:	6849      	ldr	r1, [r1, #4]
 80157d0:	e7cc      	b.n	801576c <_malloc_r+0x2c>
 80157d2:	1cc4      	adds	r4, r0, #3
 80157d4:	f024 0403 	bic.w	r4, r4, #3
 80157d8:	42a0      	cmp	r0, r4
 80157da:	d005      	beq.n	80157e8 <_malloc_r+0xa8>
 80157dc:	1a21      	subs	r1, r4, r0
 80157de:	4630      	mov	r0, r6
 80157e0:	f000 f808 	bl	80157f4 <_sbrk_r>
 80157e4:	3001      	adds	r0, #1
 80157e6:	d0cf      	beq.n	8015788 <_malloc_r+0x48>
 80157e8:	6025      	str	r5, [r4, #0]
 80157ea:	e7db      	b.n	80157a4 <_malloc_r+0x64>
 80157ec:	20004bc4 	.word	0x20004bc4
 80157f0:	20004bc8 	.word	0x20004bc8

080157f4 <_sbrk_r>:
 80157f4:	b538      	push	{r3, r4, r5, lr}
 80157f6:	4c06      	ldr	r4, [pc, #24]	; (8015810 <_sbrk_r+0x1c>)
 80157f8:	2300      	movs	r3, #0
 80157fa:	4605      	mov	r5, r0
 80157fc:	4608      	mov	r0, r1
 80157fe:	6023      	str	r3, [r4, #0]
 8015800:	f7ed ff14 	bl	800362c <_sbrk>
 8015804:	1c43      	adds	r3, r0, #1
 8015806:	d102      	bne.n	801580e <_sbrk_r+0x1a>
 8015808:	6823      	ldr	r3, [r4, #0]
 801580a:	b103      	cbz	r3, 801580e <_sbrk_r+0x1a>
 801580c:	602b      	str	r3, [r5, #0]
 801580e:	bd38      	pop	{r3, r4, r5, pc}
 8015810:	2003e4a0 	.word	0x2003e4a0

08015814 <siprintf>:
 8015814:	b40e      	push	{r1, r2, r3}
 8015816:	b500      	push	{lr}
 8015818:	b09c      	sub	sp, #112	; 0x70
 801581a:	ab1d      	add	r3, sp, #116	; 0x74
 801581c:	9002      	str	r0, [sp, #8]
 801581e:	9006      	str	r0, [sp, #24]
 8015820:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015824:	4809      	ldr	r0, [pc, #36]	; (801584c <siprintf+0x38>)
 8015826:	9107      	str	r1, [sp, #28]
 8015828:	9104      	str	r1, [sp, #16]
 801582a:	4909      	ldr	r1, [pc, #36]	; (8015850 <siprintf+0x3c>)
 801582c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015830:	9105      	str	r1, [sp, #20]
 8015832:	6800      	ldr	r0, [r0, #0]
 8015834:	9301      	str	r3, [sp, #4]
 8015836:	a902      	add	r1, sp, #8
 8015838:	f000 f870 	bl	801591c <_svfiprintf_r>
 801583c:	9b02      	ldr	r3, [sp, #8]
 801583e:	2200      	movs	r2, #0
 8015840:	701a      	strb	r2, [r3, #0]
 8015842:	b01c      	add	sp, #112	; 0x70
 8015844:	f85d eb04 	ldr.w	lr, [sp], #4
 8015848:	b003      	add	sp, #12
 801584a:	4770      	bx	lr
 801584c:	200000cc 	.word	0x200000cc
 8015850:	ffff0208 	.word	0xffff0208

08015854 <strcpy>:
 8015854:	4603      	mov	r3, r0
 8015856:	f811 2b01 	ldrb.w	r2, [r1], #1
 801585a:	f803 2b01 	strb.w	r2, [r3], #1
 801585e:	2a00      	cmp	r2, #0
 8015860:	d1f9      	bne.n	8015856 <strcpy+0x2>
 8015862:	4770      	bx	lr

08015864 <__malloc_lock>:
 8015864:	4770      	bx	lr

08015866 <__malloc_unlock>:
 8015866:	4770      	bx	lr

08015868 <__ssputs_r>:
 8015868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801586c:	688e      	ldr	r6, [r1, #8]
 801586e:	429e      	cmp	r6, r3
 8015870:	4682      	mov	sl, r0
 8015872:	460c      	mov	r4, r1
 8015874:	4690      	mov	r8, r2
 8015876:	4699      	mov	r9, r3
 8015878:	d837      	bhi.n	80158ea <__ssputs_r+0x82>
 801587a:	898a      	ldrh	r2, [r1, #12]
 801587c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015880:	d031      	beq.n	80158e6 <__ssputs_r+0x7e>
 8015882:	6825      	ldr	r5, [r4, #0]
 8015884:	6909      	ldr	r1, [r1, #16]
 8015886:	1a6f      	subs	r7, r5, r1
 8015888:	6965      	ldr	r5, [r4, #20]
 801588a:	2302      	movs	r3, #2
 801588c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015890:	fb95 f5f3 	sdiv	r5, r5, r3
 8015894:	f109 0301 	add.w	r3, r9, #1
 8015898:	443b      	add	r3, r7
 801589a:	429d      	cmp	r5, r3
 801589c:	bf38      	it	cc
 801589e:	461d      	movcc	r5, r3
 80158a0:	0553      	lsls	r3, r2, #21
 80158a2:	d530      	bpl.n	8015906 <__ssputs_r+0x9e>
 80158a4:	4629      	mov	r1, r5
 80158a6:	f7ff ff4b 	bl	8015740 <_malloc_r>
 80158aa:	4606      	mov	r6, r0
 80158ac:	b950      	cbnz	r0, 80158c4 <__ssputs_r+0x5c>
 80158ae:	230c      	movs	r3, #12
 80158b0:	f8ca 3000 	str.w	r3, [sl]
 80158b4:	89a3      	ldrh	r3, [r4, #12]
 80158b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80158ba:	81a3      	strh	r3, [r4, #12]
 80158bc:	f04f 30ff 	mov.w	r0, #4294967295
 80158c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158c4:	463a      	mov	r2, r7
 80158c6:	6921      	ldr	r1, [r4, #16]
 80158c8:	f7ff fed8 	bl	801567c <memcpy>
 80158cc:	89a3      	ldrh	r3, [r4, #12]
 80158ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80158d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80158d6:	81a3      	strh	r3, [r4, #12]
 80158d8:	6126      	str	r6, [r4, #16]
 80158da:	6165      	str	r5, [r4, #20]
 80158dc:	443e      	add	r6, r7
 80158de:	1bed      	subs	r5, r5, r7
 80158e0:	6026      	str	r6, [r4, #0]
 80158e2:	60a5      	str	r5, [r4, #8]
 80158e4:	464e      	mov	r6, r9
 80158e6:	454e      	cmp	r6, r9
 80158e8:	d900      	bls.n	80158ec <__ssputs_r+0x84>
 80158ea:	464e      	mov	r6, r9
 80158ec:	4632      	mov	r2, r6
 80158ee:	4641      	mov	r1, r8
 80158f0:	6820      	ldr	r0, [r4, #0]
 80158f2:	f000 fa93 	bl	8015e1c <memmove>
 80158f6:	68a3      	ldr	r3, [r4, #8]
 80158f8:	1b9b      	subs	r3, r3, r6
 80158fa:	60a3      	str	r3, [r4, #8]
 80158fc:	6823      	ldr	r3, [r4, #0]
 80158fe:	441e      	add	r6, r3
 8015900:	6026      	str	r6, [r4, #0]
 8015902:	2000      	movs	r0, #0
 8015904:	e7dc      	b.n	80158c0 <__ssputs_r+0x58>
 8015906:	462a      	mov	r2, r5
 8015908:	f000 faa1 	bl	8015e4e <_realloc_r>
 801590c:	4606      	mov	r6, r0
 801590e:	2800      	cmp	r0, #0
 8015910:	d1e2      	bne.n	80158d8 <__ssputs_r+0x70>
 8015912:	6921      	ldr	r1, [r4, #16]
 8015914:	4650      	mov	r0, sl
 8015916:	f7ff fec5 	bl	80156a4 <_free_r>
 801591a:	e7c8      	b.n	80158ae <__ssputs_r+0x46>

0801591c <_svfiprintf_r>:
 801591c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015920:	461d      	mov	r5, r3
 8015922:	898b      	ldrh	r3, [r1, #12]
 8015924:	061f      	lsls	r7, r3, #24
 8015926:	b09d      	sub	sp, #116	; 0x74
 8015928:	4680      	mov	r8, r0
 801592a:	460c      	mov	r4, r1
 801592c:	4616      	mov	r6, r2
 801592e:	d50f      	bpl.n	8015950 <_svfiprintf_r+0x34>
 8015930:	690b      	ldr	r3, [r1, #16]
 8015932:	b96b      	cbnz	r3, 8015950 <_svfiprintf_r+0x34>
 8015934:	2140      	movs	r1, #64	; 0x40
 8015936:	f7ff ff03 	bl	8015740 <_malloc_r>
 801593a:	6020      	str	r0, [r4, #0]
 801593c:	6120      	str	r0, [r4, #16]
 801593e:	b928      	cbnz	r0, 801594c <_svfiprintf_r+0x30>
 8015940:	230c      	movs	r3, #12
 8015942:	f8c8 3000 	str.w	r3, [r8]
 8015946:	f04f 30ff 	mov.w	r0, #4294967295
 801594a:	e0c8      	b.n	8015ade <_svfiprintf_r+0x1c2>
 801594c:	2340      	movs	r3, #64	; 0x40
 801594e:	6163      	str	r3, [r4, #20]
 8015950:	2300      	movs	r3, #0
 8015952:	9309      	str	r3, [sp, #36]	; 0x24
 8015954:	2320      	movs	r3, #32
 8015956:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801595a:	2330      	movs	r3, #48	; 0x30
 801595c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015960:	9503      	str	r5, [sp, #12]
 8015962:	f04f 0b01 	mov.w	fp, #1
 8015966:	4637      	mov	r7, r6
 8015968:	463d      	mov	r5, r7
 801596a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801596e:	b10b      	cbz	r3, 8015974 <_svfiprintf_r+0x58>
 8015970:	2b25      	cmp	r3, #37	; 0x25
 8015972:	d13e      	bne.n	80159f2 <_svfiprintf_r+0xd6>
 8015974:	ebb7 0a06 	subs.w	sl, r7, r6
 8015978:	d00b      	beq.n	8015992 <_svfiprintf_r+0x76>
 801597a:	4653      	mov	r3, sl
 801597c:	4632      	mov	r2, r6
 801597e:	4621      	mov	r1, r4
 8015980:	4640      	mov	r0, r8
 8015982:	f7ff ff71 	bl	8015868 <__ssputs_r>
 8015986:	3001      	adds	r0, #1
 8015988:	f000 80a4 	beq.w	8015ad4 <_svfiprintf_r+0x1b8>
 801598c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801598e:	4453      	add	r3, sl
 8015990:	9309      	str	r3, [sp, #36]	; 0x24
 8015992:	783b      	ldrb	r3, [r7, #0]
 8015994:	2b00      	cmp	r3, #0
 8015996:	f000 809d 	beq.w	8015ad4 <_svfiprintf_r+0x1b8>
 801599a:	2300      	movs	r3, #0
 801599c:	f04f 32ff 	mov.w	r2, #4294967295
 80159a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80159a4:	9304      	str	r3, [sp, #16]
 80159a6:	9307      	str	r3, [sp, #28]
 80159a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80159ac:	931a      	str	r3, [sp, #104]	; 0x68
 80159ae:	462f      	mov	r7, r5
 80159b0:	2205      	movs	r2, #5
 80159b2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80159b6:	4850      	ldr	r0, [pc, #320]	; (8015af8 <_svfiprintf_r+0x1dc>)
 80159b8:	f7ea fc32 	bl	8000220 <memchr>
 80159bc:	9b04      	ldr	r3, [sp, #16]
 80159be:	b9d0      	cbnz	r0, 80159f6 <_svfiprintf_r+0xda>
 80159c0:	06d9      	lsls	r1, r3, #27
 80159c2:	bf44      	itt	mi
 80159c4:	2220      	movmi	r2, #32
 80159c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80159ca:	071a      	lsls	r2, r3, #28
 80159cc:	bf44      	itt	mi
 80159ce:	222b      	movmi	r2, #43	; 0x2b
 80159d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80159d4:	782a      	ldrb	r2, [r5, #0]
 80159d6:	2a2a      	cmp	r2, #42	; 0x2a
 80159d8:	d015      	beq.n	8015a06 <_svfiprintf_r+0xea>
 80159da:	9a07      	ldr	r2, [sp, #28]
 80159dc:	462f      	mov	r7, r5
 80159de:	2000      	movs	r0, #0
 80159e0:	250a      	movs	r5, #10
 80159e2:	4639      	mov	r1, r7
 80159e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80159e8:	3b30      	subs	r3, #48	; 0x30
 80159ea:	2b09      	cmp	r3, #9
 80159ec:	d94d      	bls.n	8015a8a <_svfiprintf_r+0x16e>
 80159ee:	b1b8      	cbz	r0, 8015a20 <_svfiprintf_r+0x104>
 80159f0:	e00f      	b.n	8015a12 <_svfiprintf_r+0xf6>
 80159f2:	462f      	mov	r7, r5
 80159f4:	e7b8      	b.n	8015968 <_svfiprintf_r+0x4c>
 80159f6:	4a40      	ldr	r2, [pc, #256]	; (8015af8 <_svfiprintf_r+0x1dc>)
 80159f8:	1a80      	subs	r0, r0, r2
 80159fa:	fa0b f000 	lsl.w	r0, fp, r0
 80159fe:	4318      	orrs	r0, r3
 8015a00:	9004      	str	r0, [sp, #16]
 8015a02:	463d      	mov	r5, r7
 8015a04:	e7d3      	b.n	80159ae <_svfiprintf_r+0x92>
 8015a06:	9a03      	ldr	r2, [sp, #12]
 8015a08:	1d11      	adds	r1, r2, #4
 8015a0a:	6812      	ldr	r2, [r2, #0]
 8015a0c:	9103      	str	r1, [sp, #12]
 8015a0e:	2a00      	cmp	r2, #0
 8015a10:	db01      	blt.n	8015a16 <_svfiprintf_r+0xfa>
 8015a12:	9207      	str	r2, [sp, #28]
 8015a14:	e004      	b.n	8015a20 <_svfiprintf_r+0x104>
 8015a16:	4252      	negs	r2, r2
 8015a18:	f043 0302 	orr.w	r3, r3, #2
 8015a1c:	9207      	str	r2, [sp, #28]
 8015a1e:	9304      	str	r3, [sp, #16]
 8015a20:	783b      	ldrb	r3, [r7, #0]
 8015a22:	2b2e      	cmp	r3, #46	; 0x2e
 8015a24:	d10c      	bne.n	8015a40 <_svfiprintf_r+0x124>
 8015a26:	787b      	ldrb	r3, [r7, #1]
 8015a28:	2b2a      	cmp	r3, #42	; 0x2a
 8015a2a:	d133      	bne.n	8015a94 <_svfiprintf_r+0x178>
 8015a2c:	9b03      	ldr	r3, [sp, #12]
 8015a2e:	1d1a      	adds	r2, r3, #4
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	9203      	str	r2, [sp, #12]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	bfb8      	it	lt
 8015a38:	f04f 33ff 	movlt.w	r3, #4294967295
 8015a3c:	3702      	adds	r7, #2
 8015a3e:	9305      	str	r3, [sp, #20]
 8015a40:	4d2e      	ldr	r5, [pc, #184]	; (8015afc <_svfiprintf_r+0x1e0>)
 8015a42:	7839      	ldrb	r1, [r7, #0]
 8015a44:	2203      	movs	r2, #3
 8015a46:	4628      	mov	r0, r5
 8015a48:	f7ea fbea 	bl	8000220 <memchr>
 8015a4c:	b138      	cbz	r0, 8015a5e <_svfiprintf_r+0x142>
 8015a4e:	2340      	movs	r3, #64	; 0x40
 8015a50:	1b40      	subs	r0, r0, r5
 8015a52:	fa03 f000 	lsl.w	r0, r3, r0
 8015a56:	9b04      	ldr	r3, [sp, #16]
 8015a58:	4303      	orrs	r3, r0
 8015a5a:	3701      	adds	r7, #1
 8015a5c:	9304      	str	r3, [sp, #16]
 8015a5e:	7839      	ldrb	r1, [r7, #0]
 8015a60:	4827      	ldr	r0, [pc, #156]	; (8015b00 <_svfiprintf_r+0x1e4>)
 8015a62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015a66:	2206      	movs	r2, #6
 8015a68:	1c7e      	adds	r6, r7, #1
 8015a6a:	f7ea fbd9 	bl	8000220 <memchr>
 8015a6e:	2800      	cmp	r0, #0
 8015a70:	d038      	beq.n	8015ae4 <_svfiprintf_r+0x1c8>
 8015a72:	4b24      	ldr	r3, [pc, #144]	; (8015b04 <_svfiprintf_r+0x1e8>)
 8015a74:	bb13      	cbnz	r3, 8015abc <_svfiprintf_r+0x1a0>
 8015a76:	9b03      	ldr	r3, [sp, #12]
 8015a78:	3307      	adds	r3, #7
 8015a7a:	f023 0307 	bic.w	r3, r3, #7
 8015a7e:	3308      	adds	r3, #8
 8015a80:	9303      	str	r3, [sp, #12]
 8015a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a84:	444b      	add	r3, r9
 8015a86:	9309      	str	r3, [sp, #36]	; 0x24
 8015a88:	e76d      	b.n	8015966 <_svfiprintf_r+0x4a>
 8015a8a:	fb05 3202 	mla	r2, r5, r2, r3
 8015a8e:	2001      	movs	r0, #1
 8015a90:	460f      	mov	r7, r1
 8015a92:	e7a6      	b.n	80159e2 <_svfiprintf_r+0xc6>
 8015a94:	2300      	movs	r3, #0
 8015a96:	3701      	adds	r7, #1
 8015a98:	9305      	str	r3, [sp, #20]
 8015a9a:	4619      	mov	r1, r3
 8015a9c:	250a      	movs	r5, #10
 8015a9e:	4638      	mov	r0, r7
 8015aa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015aa4:	3a30      	subs	r2, #48	; 0x30
 8015aa6:	2a09      	cmp	r2, #9
 8015aa8:	d903      	bls.n	8015ab2 <_svfiprintf_r+0x196>
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d0c8      	beq.n	8015a40 <_svfiprintf_r+0x124>
 8015aae:	9105      	str	r1, [sp, #20]
 8015ab0:	e7c6      	b.n	8015a40 <_svfiprintf_r+0x124>
 8015ab2:	fb05 2101 	mla	r1, r5, r1, r2
 8015ab6:	2301      	movs	r3, #1
 8015ab8:	4607      	mov	r7, r0
 8015aba:	e7f0      	b.n	8015a9e <_svfiprintf_r+0x182>
 8015abc:	ab03      	add	r3, sp, #12
 8015abe:	9300      	str	r3, [sp, #0]
 8015ac0:	4622      	mov	r2, r4
 8015ac2:	4b11      	ldr	r3, [pc, #68]	; (8015b08 <_svfiprintf_r+0x1ec>)
 8015ac4:	a904      	add	r1, sp, #16
 8015ac6:	4640      	mov	r0, r8
 8015ac8:	f3af 8000 	nop.w
 8015acc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015ad0:	4681      	mov	r9, r0
 8015ad2:	d1d6      	bne.n	8015a82 <_svfiprintf_r+0x166>
 8015ad4:	89a3      	ldrh	r3, [r4, #12]
 8015ad6:	065b      	lsls	r3, r3, #25
 8015ad8:	f53f af35 	bmi.w	8015946 <_svfiprintf_r+0x2a>
 8015adc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015ade:	b01d      	add	sp, #116	; 0x74
 8015ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ae4:	ab03      	add	r3, sp, #12
 8015ae6:	9300      	str	r3, [sp, #0]
 8015ae8:	4622      	mov	r2, r4
 8015aea:	4b07      	ldr	r3, [pc, #28]	; (8015b08 <_svfiprintf_r+0x1ec>)
 8015aec:	a904      	add	r1, sp, #16
 8015aee:	4640      	mov	r0, r8
 8015af0:	f000 f882 	bl	8015bf8 <_printf_i>
 8015af4:	e7ea      	b.n	8015acc <_svfiprintf_r+0x1b0>
 8015af6:	bf00      	nop
 8015af8:	08018fdc 	.word	0x08018fdc
 8015afc:	08018fe2 	.word	0x08018fe2
 8015b00:	08018fe6 	.word	0x08018fe6
 8015b04:	00000000 	.word	0x00000000
 8015b08:	08015869 	.word	0x08015869

08015b0c <_printf_common>:
 8015b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b10:	4691      	mov	r9, r2
 8015b12:	461f      	mov	r7, r3
 8015b14:	688a      	ldr	r2, [r1, #8]
 8015b16:	690b      	ldr	r3, [r1, #16]
 8015b18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015b1c:	4293      	cmp	r3, r2
 8015b1e:	bfb8      	it	lt
 8015b20:	4613      	movlt	r3, r2
 8015b22:	f8c9 3000 	str.w	r3, [r9]
 8015b26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015b2a:	4606      	mov	r6, r0
 8015b2c:	460c      	mov	r4, r1
 8015b2e:	b112      	cbz	r2, 8015b36 <_printf_common+0x2a>
 8015b30:	3301      	adds	r3, #1
 8015b32:	f8c9 3000 	str.w	r3, [r9]
 8015b36:	6823      	ldr	r3, [r4, #0]
 8015b38:	0699      	lsls	r1, r3, #26
 8015b3a:	bf42      	ittt	mi
 8015b3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015b40:	3302      	addmi	r3, #2
 8015b42:	f8c9 3000 	strmi.w	r3, [r9]
 8015b46:	6825      	ldr	r5, [r4, #0]
 8015b48:	f015 0506 	ands.w	r5, r5, #6
 8015b4c:	d107      	bne.n	8015b5e <_printf_common+0x52>
 8015b4e:	f104 0a19 	add.w	sl, r4, #25
 8015b52:	68e3      	ldr	r3, [r4, #12]
 8015b54:	f8d9 2000 	ldr.w	r2, [r9]
 8015b58:	1a9b      	subs	r3, r3, r2
 8015b5a:	42ab      	cmp	r3, r5
 8015b5c:	dc28      	bgt.n	8015bb0 <_printf_common+0xa4>
 8015b5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015b62:	6822      	ldr	r2, [r4, #0]
 8015b64:	3300      	adds	r3, #0
 8015b66:	bf18      	it	ne
 8015b68:	2301      	movne	r3, #1
 8015b6a:	0692      	lsls	r2, r2, #26
 8015b6c:	d42d      	bmi.n	8015bca <_printf_common+0xbe>
 8015b6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015b72:	4639      	mov	r1, r7
 8015b74:	4630      	mov	r0, r6
 8015b76:	47c0      	blx	r8
 8015b78:	3001      	adds	r0, #1
 8015b7a:	d020      	beq.n	8015bbe <_printf_common+0xb2>
 8015b7c:	6823      	ldr	r3, [r4, #0]
 8015b7e:	68e5      	ldr	r5, [r4, #12]
 8015b80:	f8d9 2000 	ldr.w	r2, [r9]
 8015b84:	f003 0306 	and.w	r3, r3, #6
 8015b88:	2b04      	cmp	r3, #4
 8015b8a:	bf08      	it	eq
 8015b8c:	1aad      	subeq	r5, r5, r2
 8015b8e:	68a3      	ldr	r3, [r4, #8]
 8015b90:	6922      	ldr	r2, [r4, #16]
 8015b92:	bf0c      	ite	eq
 8015b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015b98:	2500      	movne	r5, #0
 8015b9a:	4293      	cmp	r3, r2
 8015b9c:	bfc4      	itt	gt
 8015b9e:	1a9b      	subgt	r3, r3, r2
 8015ba0:	18ed      	addgt	r5, r5, r3
 8015ba2:	f04f 0900 	mov.w	r9, #0
 8015ba6:	341a      	adds	r4, #26
 8015ba8:	454d      	cmp	r5, r9
 8015baa:	d11a      	bne.n	8015be2 <_printf_common+0xd6>
 8015bac:	2000      	movs	r0, #0
 8015bae:	e008      	b.n	8015bc2 <_printf_common+0xb6>
 8015bb0:	2301      	movs	r3, #1
 8015bb2:	4652      	mov	r2, sl
 8015bb4:	4639      	mov	r1, r7
 8015bb6:	4630      	mov	r0, r6
 8015bb8:	47c0      	blx	r8
 8015bba:	3001      	adds	r0, #1
 8015bbc:	d103      	bne.n	8015bc6 <_printf_common+0xba>
 8015bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8015bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bc6:	3501      	adds	r5, #1
 8015bc8:	e7c3      	b.n	8015b52 <_printf_common+0x46>
 8015bca:	18e1      	adds	r1, r4, r3
 8015bcc:	1c5a      	adds	r2, r3, #1
 8015bce:	2030      	movs	r0, #48	; 0x30
 8015bd0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015bd4:	4422      	add	r2, r4
 8015bd6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015bda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015bde:	3302      	adds	r3, #2
 8015be0:	e7c5      	b.n	8015b6e <_printf_common+0x62>
 8015be2:	2301      	movs	r3, #1
 8015be4:	4622      	mov	r2, r4
 8015be6:	4639      	mov	r1, r7
 8015be8:	4630      	mov	r0, r6
 8015bea:	47c0      	blx	r8
 8015bec:	3001      	adds	r0, #1
 8015bee:	d0e6      	beq.n	8015bbe <_printf_common+0xb2>
 8015bf0:	f109 0901 	add.w	r9, r9, #1
 8015bf4:	e7d8      	b.n	8015ba8 <_printf_common+0x9c>
	...

08015bf8 <_printf_i>:
 8015bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015bfc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015c00:	460c      	mov	r4, r1
 8015c02:	7e09      	ldrb	r1, [r1, #24]
 8015c04:	b085      	sub	sp, #20
 8015c06:	296e      	cmp	r1, #110	; 0x6e
 8015c08:	4617      	mov	r7, r2
 8015c0a:	4606      	mov	r6, r0
 8015c0c:	4698      	mov	r8, r3
 8015c0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015c10:	f000 80b3 	beq.w	8015d7a <_printf_i+0x182>
 8015c14:	d822      	bhi.n	8015c5c <_printf_i+0x64>
 8015c16:	2963      	cmp	r1, #99	; 0x63
 8015c18:	d036      	beq.n	8015c88 <_printf_i+0x90>
 8015c1a:	d80a      	bhi.n	8015c32 <_printf_i+0x3a>
 8015c1c:	2900      	cmp	r1, #0
 8015c1e:	f000 80b9 	beq.w	8015d94 <_printf_i+0x19c>
 8015c22:	2958      	cmp	r1, #88	; 0x58
 8015c24:	f000 8083 	beq.w	8015d2e <_printf_i+0x136>
 8015c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015c2c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015c30:	e032      	b.n	8015c98 <_printf_i+0xa0>
 8015c32:	2964      	cmp	r1, #100	; 0x64
 8015c34:	d001      	beq.n	8015c3a <_printf_i+0x42>
 8015c36:	2969      	cmp	r1, #105	; 0x69
 8015c38:	d1f6      	bne.n	8015c28 <_printf_i+0x30>
 8015c3a:	6820      	ldr	r0, [r4, #0]
 8015c3c:	6813      	ldr	r3, [r2, #0]
 8015c3e:	0605      	lsls	r5, r0, #24
 8015c40:	f103 0104 	add.w	r1, r3, #4
 8015c44:	d52a      	bpl.n	8015c9c <_printf_i+0xa4>
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	6011      	str	r1, [r2, #0]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	da03      	bge.n	8015c56 <_printf_i+0x5e>
 8015c4e:	222d      	movs	r2, #45	; 0x2d
 8015c50:	425b      	negs	r3, r3
 8015c52:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015c56:	486f      	ldr	r0, [pc, #444]	; (8015e14 <_printf_i+0x21c>)
 8015c58:	220a      	movs	r2, #10
 8015c5a:	e039      	b.n	8015cd0 <_printf_i+0xd8>
 8015c5c:	2973      	cmp	r1, #115	; 0x73
 8015c5e:	f000 809d 	beq.w	8015d9c <_printf_i+0x1a4>
 8015c62:	d808      	bhi.n	8015c76 <_printf_i+0x7e>
 8015c64:	296f      	cmp	r1, #111	; 0x6f
 8015c66:	d020      	beq.n	8015caa <_printf_i+0xb2>
 8015c68:	2970      	cmp	r1, #112	; 0x70
 8015c6a:	d1dd      	bne.n	8015c28 <_printf_i+0x30>
 8015c6c:	6823      	ldr	r3, [r4, #0]
 8015c6e:	f043 0320 	orr.w	r3, r3, #32
 8015c72:	6023      	str	r3, [r4, #0]
 8015c74:	e003      	b.n	8015c7e <_printf_i+0x86>
 8015c76:	2975      	cmp	r1, #117	; 0x75
 8015c78:	d017      	beq.n	8015caa <_printf_i+0xb2>
 8015c7a:	2978      	cmp	r1, #120	; 0x78
 8015c7c:	d1d4      	bne.n	8015c28 <_printf_i+0x30>
 8015c7e:	2378      	movs	r3, #120	; 0x78
 8015c80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015c84:	4864      	ldr	r0, [pc, #400]	; (8015e18 <_printf_i+0x220>)
 8015c86:	e055      	b.n	8015d34 <_printf_i+0x13c>
 8015c88:	6813      	ldr	r3, [r2, #0]
 8015c8a:	1d19      	adds	r1, r3, #4
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	6011      	str	r1, [r2, #0]
 8015c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015c94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015c98:	2301      	movs	r3, #1
 8015c9a:	e08c      	b.n	8015db6 <_printf_i+0x1be>
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	6011      	str	r1, [r2, #0]
 8015ca0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015ca4:	bf18      	it	ne
 8015ca6:	b21b      	sxthne	r3, r3
 8015ca8:	e7cf      	b.n	8015c4a <_printf_i+0x52>
 8015caa:	6813      	ldr	r3, [r2, #0]
 8015cac:	6825      	ldr	r5, [r4, #0]
 8015cae:	1d18      	adds	r0, r3, #4
 8015cb0:	6010      	str	r0, [r2, #0]
 8015cb2:	0628      	lsls	r0, r5, #24
 8015cb4:	d501      	bpl.n	8015cba <_printf_i+0xc2>
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	e002      	b.n	8015cc0 <_printf_i+0xc8>
 8015cba:	0668      	lsls	r0, r5, #25
 8015cbc:	d5fb      	bpl.n	8015cb6 <_printf_i+0xbe>
 8015cbe:	881b      	ldrh	r3, [r3, #0]
 8015cc0:	4854      	ldr	r0, [pc, #336]	; (8015e14 <_printf_i+0x21c>)
 8015cc2:	296f      	cmp	r1, #111	; 0x6f
 8015cc4:	bf14      	ite	ne
 8015cc6:	220a      	movne	r2, #10
 8015cc8:	2208      	moveq	r2, #8
 8015cca:	2100      	movs	r1, #0
 8015ccc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015cd0:	6865      	ldr	r5, [r4, #4]
 8015cd2:	60a5      	str	r5, [r4, #8]
 8015cd4:	2d00      	cmp	r5, #0
 8015cd6:	f2c0 8095 	blt.w	8015e04 <_printf_i+0x20c>
 8015cda:	6821      	ldr	r1, [r4, #0]
 8015cdc:	f021 0104 	bic.w	r1, r1, #4
 8015ce0:	6021      	str	r1, [r4, #0]
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d13d      	bne.n	8015d62 <_printf_i+0x16a>
 8015ce6:	2d00      	cmp	r5, #0
 8015ce8:	f040 808e 	bne.w	8015e08 <_printf_i+0x210>
 8015cec:	4665      	mov	r5, ip
 8015cee:	2a08      	cmp	r2, #8
 8015cf0:	d10b      	bne.n	8015d0a <_printf_i+0x112>
 8015cf2:	6823      	ldr	r3, [r4, #0]
 8015cf4:	07db      	lsls	r3, r3, #31
 8015cf6:	d508      	bpl.n	8015d0a <_printf_i+0x112>
 8015cf8:	6923      	ldr	r3, [r4, #16]
 8015cfa:	6862      	ldr	r2, [r4, #4]
 8015cfc:	429a      	cmp	r2, r3
 8015cfe:	bfde      	ittt	le
 8015d00:	2330      	movle	r3, #48	; 0x30
 8015d02:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015d06:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015d0a:	ebac 0305 	sub.w	r3, ip, r5
 8015d0e:	6123      	str	r3, [r4, #16]
 8015d10:	f8cd 8000 	str.w	r8, [sp]
 8015d14:	463b      	mov	r3, r7
 8015d16:	aa03      	add	r2, sp, #12
 8015d18:	4621      	mov	r1, r4
 8015d1a:	4630      	mov	r0, r6
 8015d1c:	f7ff fef6 	bl	8015b0c <_printf_common>
 8015d20:	3001      	adds	r0, #1
 8015d22:	d14d      	bne.n	8015dc0 <_printf_i+0x1c8>
 8015d24:	f04f 30ff 	mov.w	r0, #4294967295
 8015d28:	b005      	add	sp, #20
 8015d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d2e:	4839      	ldr	r0, [pc, #228]	; (8015e14 <_printf_i+0x21c>)
 8015d30:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015d34:	6813      	ldr	r3, [r2, #0]
 8015d36:	6821      	ldr	r1, [r4, #0]
 8015d38:	1d1d      	adds	r5, r3, #4
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	6015      	str	r5, [r2, #0]
 8015d3e:	060a      	lsls	r2, r1, #24
 8015d40:	d50b      	bpl.n	8015d5a <_printf_i+0x162>
 8015d42:	07ca      	lsls	r2, r1, #31
 8015d44:	bf44      	itt	mi
 8015d46:	f041 0120 	orrmi.w	r1, r1, #32
 8015d4a:	6021      	strmi	r1, [r4, #0]
 8015d4c:	b91b      	cbnz	r3, 8015d56 <_printf_i+0x15e>
 8015d4e:	6822      	ldr	r2, [r4, #0]
 8015d50:	f022 0220 	bic.w	r2, r2, #32
 8015d54:	6022      	str	r2, [r4, #0]
 8015d56:	2210      	movs	r2, #16
 8015d58:	e7b7      	b.n	8015cca <_printf_i+0xd2>
 8015d5a:	064d      	lsls	r5, r1, #25
 8015d5c:	bf48      	it	mi
 8015d5e:	b29b      	uxthmi	r3, r3
 8015d60:	e7ef      	b.n	8015d42 <_printf_i+0x14a>
 8015d62:	4665      	mov	r5, ip
 8015d64:	fbb3 f1f2 	udiv	r1, r3, r2
 8015d68:	fb02 3311 	mls	r3, r2, r1, r3
 8015d6c:	5cc3      	ldrb	r3, [r0, r3]
 8015d6e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015d72:	460b      	mov	r3, r1
 8015d74:	2900      	cmp	r1, #0
 8015d76:	d1f5      	bne.n	8015d64 <_printf_i+0x16c>
 8015d78:	e7b9      	b.n	8015cee <_printf_i+0xf6>
 8015d7a:	6813      	ldr	r3, [r2, #0]
 8015d7c:	6825      	ldr	r5, [r4, #0]
 8015d7e:	6961      	ldr	r1, [r4, #20]
 8015d80:	1d18      	adds	r0, r3, #4
 8015d82:	6010      	str	r0, [r2, #0]
 8015d84:	0628      	lsls	r0, r5, #24
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	d501      	bpl.n	8015d8e <_printf_i+0x196>
 8015d8a:	6019      	str	r1, [r3, #0]
 8015d8c:	e002      	b.n	8015d94 <_printf_i+0x19c>
 8015d8e:	066a      	lsls	r2, r5, #25
 8015d90:	d5fb      	bpl.n	8015d8a <_printf_i+0x192>
 8015d92:	8019      	strh	r1, [r3, #0]
 8015d94:	2300      	movs	r3, #0
 8015d96:	6123      	str	r3, [r4, #16]
 8015d98:	4665      	mov	r5, ip
 8015d9a:	e7b9      	b.n	8015d10 <_printf_i+0x118>
 8015d9c:	6813      	ldr	r3, [r2, #0]
 8015d9e:	1d19      	adds	r1, r3, #4
 8015da0:	6011      	str	r1, [r2, #0]
 8015da2:	681d      	ldr	r5, [r3, #0]
 8015da4:	6862      	ldr	r2, [r4, #4]
 8015da6:	2100      	movs	r1, #0
 8015da8:	4628      	mov	r0, r5
 8015daa:	f7ea fa39 	bl	8000220 <memchr>
 8015dae:	b108      	cbz	r0, 8015db4 <_printf_i+0x1bc>
 8015db0:	1b40      	subs	r0, r0, r5
 8015db2:	6060      	str	r0, [r4, #4]
 8015db4:	6863      	ldr	r3, [r4, #4]
 8015db6:	6123      	str	r3, [r4, #16]
 8015db8:	2300      	movs	r3, #0
 8015dba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015dbe:	e7a7      	b.n	8015d10 <_printf_i+0x118>
 8015dc0:	6923      	ldr	r3, [r4, #16]
 8015dc2:	462a      	mov	r2, r5
 8015dc4:	4639      	mov	r1, r7
 8015dc6:	4630      	mov	r0, r6
 8015dc8:	47c0      	blx	r8
 8015dca:	3001      	adds	r0, #1
 8015dcc:	d0aa      	beq.n	8015d24 <_printf_i+0x12c>
 8015dce:	6823      	ldr	r3, [r4, #0]
 8015dd0:	079b      	lsls	r3, r3, #30
 8015dd2:	d413      	bmi.n	8015dfc <_printf_i+0x204>
 8015dd4:	68e0      	ldr	r0, [r4, #12]
 8015dd6:	9b03      	ldr	r3, [sp, #12]
 8015dd8:	4298      	cmp	r0, r3
 8015dda:	bfb8      	it	lt
 8015ddc:	4618      	movlt	r0, r3
 8015dde:	e7a3      	b.n	8015d28 <_printf_i+0x130>
 8015de0:	2301      	movs	r3, #1
 8015de2:	464a      	mov	r2, r9
 8015de4:	4639      	mov	r1, r7
 8015de6:	4630      	mov	r0, r6
 8015de8:	47c0      	blx	r8
 8015dea:	3001      	adds	r0, #1
 8015dec:	d09a      	beq.n	8015d24 <_printf_i+0x12c>
 8015dee:	3501      	adds	r5, #1
 8015df0:	68e3      	ldr	r3, [r4, #12]
 8015df2:	9a03      	ldr	r2, [sp, #12]
 8015df4:	1a9b      	subs	r3, r3, r2
 8015df6:	42ab      	cmp	r3, r5
 8015df8:	dcf2      	bgt.n	8015de0 <_printf_i+0x1e8>
 8015dfa:	e7eb      	b.n	8015dd4 <_printf_i+0x1dc>
 8015dfc:	2500      	movs	r5, #0
 8015dfe:	f104 0919 	add.w	r9, r4, #25
 8015e02:	e7f5      	b.n	8015df0 <_printf_i+0x1f8>
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d1ac      	bne.n	8015d62 <_printf_i+0x16a>
 8015e08:	7803      	ldrb	r3, [r0, #0]
 8015e0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015e0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015e12:	e76c      	b.n	8015cee <_printf_i+0xf6>
 8015e14:	08018fed 	.word	0x08018fed
 8015e18:	08018ffe 	.word	0x08018ffe

08015e1c <memmove>:
 8015e1c:	4288      	cmp	r0, r1
 8015e1e:	b510      	push	{r4, lr}
 8015e20:	eb01 0302 	add.w	r3, r1, r2
 8015e24:	d807      	bhi.n	8015e36 <memmove+0x1a>
 8015e26:	1e42      	subs	r2, r0, #1
 8015e28:	4299      	cmp	r1, r3
 8015e2a:	d00a      	beq.n	8015e42 <memmove+0x26>
 8015e2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e30:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015e34:	e7f8      	b.n	8015e28 <memmove+0xc>
 8015e36:	4283      	cmp	r3, r0
 8015e38:	d9f5      	bls.n	8015e26 <memmove+0xa>
 8015e3a:	1881      	adds	r1, r0, r2
 8015e3c:	1ad2      	subs	r2, r2, r3
 8015e3e:	42d3      	cmn	r3, r2
 8015e40:	d100      	bne.n	8015e44 <memmove+0x28>
 8015e42:	bd10      	pop	{r4, pc}
 8015e44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015e48:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015e4c:	e7f7      	b.n	8015e3e <memmove+0x22>

08015e4e <_realloc_r>:
 8015e4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e50:	4607      	mov	r7, r0
 8015e52:	4614      	mov	r4, r2
 8015e54:	460e      	mov	r6, r1
 8015e56:	b921      	cbnz	r1, 8015e62 <_realloc_r+0x14>
 8015e58:	4611      	mov	r1, r2
 8015e5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015e5e:	f7ff bc6f 	b.w	8015740 <_malloc_r>
 8015e62:	b922      	cbnz	r2, 8015e6e <_realloc_r+0x20>
 8015e64:	f7ff fc1e 	bl	80156a4 <_free_r>
 8015e68:	4625      	mov	r5, r4
 8015e6a:	4628      	mov	r0, r5
 8015e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e6e:	f000 f814 	bl	8015e9a <_malloc_usable_size_r>
 8015e72:	42a0      	cmp	r0, r4
 8015e74:	d20f      	bcs.n	8015e96 <_realloc_r+0x48>
 8015e76:	4621      	mov	r1, r4
 8015e78:	4638      	mov	r0, r7
 8015e7a:	f7ff fc61 	bl	8015740 <_malloc_r>
 8015e7e:	4605      	mov	r5, r0
 8015e80:	2800      	cmp	r0, #0
 8015e82:	d0f2      	beq.n	8015e6a <_realloc_r+0x1c>
 8015e84:	4631      	mov	r1, r6
 8015e86:	4622      	mov	r2, r4
 8015e88:	f7ff fbf8 	bl	801567c <memcpy>
 8015e8c:	4631      	mov	r1, r6
 8015e8e:	4638      	mov	r0, r7
 8015e90:	f7ff fc08 	bl	80156a4 <_free_r>
 8015e94:	e7e9      	b.n	8015e6a <_realloc_r+0x1c>
 8015e96:	4635      	mov	r5, r6
 8015e98:	e7e7      	b.n	8015e6a <_realloc_r+0x1c>

08015e9a <_malloc_usable_size_r>:
 8015e9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015e9e:	1f18      	subs	r0, r3, #4
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	bfbc      	itt	lt
 8015ea4:	580b      	ldrlt	r3, [r1, r0]
 8015ea6:	18c0      	addlt	r0, r0, r3
 8015ea8:	4770      	bx	lr
	...

08015eac <_init>:
 8015eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015eae:	bf00      	nop
 8015eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015eb2:	bc08      	pop	{r3}
 8015eb4:	469e      	mov	lr, r3
 8015eb6:	4770      	bx	lr

08015eb8 <_fini>:
 8015eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015eba:	bf00      	nop
 8015ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ebe:	bc08      	pop	{r3}
 8015ec0:	469e      	mov	lr, r3
 8015ec2:	4770      	bx	lr
