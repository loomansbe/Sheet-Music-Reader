
Sheet Music Assistant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001481c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d7c  080149fc  080149fc  000249fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017778  08017778  000300f0  2**0
                  CONTENTS
  4 .ARM          00000008  08017778  08017778  00027778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017780  08017780  000300f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017780  08017780  00027780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017784  08017784  00027784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08017788  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003e368  200000f0  08017878  000300f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2003e458  08017878  0003e458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000490be  00000000  00000000  00030120  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007f2a  00000000  00000000  000791de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000034c8  00000000  00000000  00081108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003168  00000000  00000000  000845d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e8bd  00000000  00000000  00087738  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00031655  00000000  00000000  000b5ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ffc9f  00000000  00000000  000e764a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e72e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e498  00000000  00000000  001e7364  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000f0 	.word	0x200000f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	080149e4 	.word	0x080149e4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000f4 	.word	0x200000f4
 800021c:	080149e4 	.word	0x080149e4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <Storage_OpenReadFile>:
  * @param  BufferAddress: A pointer to a buffer to copy the file to
  * @param  FileLen: the File lenght
  * @retval err: Error status (0=> success, 1=> fail)
  */
uint32_t Storage_OpenReadFile(uint8_t *Address, const char* BmpName)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	6018      	str	r0, [r3, #0]
 80005cc:	463b      	mov	r3, r7
 80005ce:	6019      	str	r1, [r3, #0]
  uint32_t index = 0, size = 0, i1 = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80005d6:	2300      	movs	r3, #0
 80005d8:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 80005dc:	2300      	movs	r3, #0
 80005de:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
  uint32_t BmpAddress;
  FIL F1;

  if (f_open(&F1, BmpName, FA_READ) != FR_OK)
 80005e2:	463b      	mov	r3, r7
 80005e4:	f107 0008 	add.w	r0, r7, #8
 80005e8:	2201      	movs	r2, #1
 80005ea:	6819      	ldr	r1, [r3, #0]
 80005ec:	f00f fda0 	bl	8010130 <f_open>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d000      	beq.n	80005f8 <Storage_OpenReadFile+0x38>
  {
    while(1)
 80005f6:	e7fe      	b.n	80005f6 <Storage_OpenReadFile+0x36>
    {
    } 
  }
  if (f_read (&F1, sector, 30, (UINT *)&BytesRead) != FR_OK)
 80005f8:	f107 0008 	add.w	r0, r7, #8
 80005fc:	4b48      	ldr	r3, [pc, #288]	; (8000720 <Storage_OpenReadFile+0x160>)
 80005fe:	221e      	movs	r2, #30
 8000600:	4948      	ldr	r1, [pc, #288]	; (8000724 <Storage_OpenReadFile+0x164>)
 8000602:	f00f ff53 	bl	80104ac <f_read>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d000      	beq.n	800060e <Storage_OpenReadFile+0x4e>
  {
    while(1)
 800060c:	e7fe      	b.n	800060c <Storage_OpenReadFile+0x4c>
    {
    } 
  }
  
  BmpAddress = (uint32_t)sector;
 800060e:	4b45      	ldr	r3, [pc, #276]	; (8000724 <Storage_OpenReadFile+0x164>)
 8000610:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

  /* Read bitmap size */
  size = *(uint16_t *) (BmpAddress + 2);
 8000614:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000618:	3302      	adds	r3, #2
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
  size |= (*(uint16_t *) (BmpAddress + 4)) << 16;  
 8000620:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000624:	3304      	adds	r3, #4
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	041b      	lsls	r3, r3, #16
 800062a:	461a      	mov	r2, r3
 800062c:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8000630:	4313      	orrs	r3, r2
 8000632:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 
  /* Get bitmap data address offset */
  index = *(uint16_t *) (BmpAddress + 10);
 8000636:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800063a:	330a      	adds	r3, #10
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
  index |= (*(uint16_t *) (BmpAddress + 12)) << 16;  
 8000642:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000646:	330c      	adds	r3, #12
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	041b      	lsls	r3, r3, #16
 800064c:	461a      	mov	r2, r3
 800064e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000652:	4313      	orrs	r3, r2
 8000654:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
  
  f_close (&F1);
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	4618      	mov	r0, r3
 800065e:	f010 f8e2 	bl	8010826 <f_close>
  
  f_open (&F1, BmpName, FA_READ);
 8000662:	463b      	mov	r3, r7
 8000664:	f107 0008 	add.w	r0, r7, #8
 8000668:	2201      	movs	r2, #1
 800066a:	6819      	ldr	r1, [r3, #0]
 800066c:	f00f fd60 	bl	8010130 <f_open>

  if (size > 240*240*2)
 8000670:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8000674:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
 8000678:	d903      	bls.n	8000682 <Storage_OpenReadFile+0xc2>
  {
    size = 240*240*2;
 800067a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800067e:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
  }
  
  do
  {
    if (size < 256*2)
 8000682:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8000686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800068a:	d204      	bcs.n	8000696 <Storage_OpenReadFile+0xd6>
    {
      i1 = size;
 800068c:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8000690:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8000694:	e003      	b.n	800069e <Storage_OpenReadFile+0xde>
    }
    else
    {
      i1 = 256*2;
 8000696:	f44f 7300 	mov.w	r3, #512	; 0x200
 800069a:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    }
    size -= i1;
 800069e:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 80006a2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
    f_read (&F1, sector, i1, (UINT *)&BytesRead);
 80006ac:	f107 0008 	add.w	r0, r7, #8
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <Storage_OpenReadFile+0x160>)
 80006b2:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 80006b6:	491b      	ldr	r1, [pc, #108]	; (8000724 <Storage_OpenReadFile+0x164>)
 80006b8:	f00f fef8 	bl	80104ac <f_read>

    for (index = 0; index < i1; index++)
 80006bc:	2300      	movs	r3, #0
 80006be:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80006c2:	e015      	b.n	80006f0 <Storage_OpenReadFile+0x130>
    {
      *(__IO uint8_t*) (Address) = *(__IO uint8_t *)BmpAddress;
 80006c4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	701a      	strb	r2, [r3, #0]
      
      BmpAddress++;  
 80006d2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80006d6:	3301      	adds	r3, #1
 80006d8:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
      Address++;
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	1d3a      	adds	r2, r7, #4
 80006e0:	6812      	ldr	r2, [r2, #0]
 80006e2:	3201      	adds	r2, #1
 80006e4:	601a      	str	r2, [r3, #0]
    for (index = 0; index < i1; index++)
 80006e6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80006ea:	3301      	adds	r3, #1
 80006ec:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80006f0:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80006f4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d3e3      	bcc.n	80006c4 <Storage_OpenReadFile+0x104>
    }  
    
    BmpAddress = (uint32_t)sector;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <Storage_OpenReadFile+0x164>)
 80006fe:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
  }
  while (size > 0);
 8000702:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8000706:	2b00      	cmp	r3, #0
 8000708:	d1bb      	bne.n	8000682 <Storage_OpenReadFile+0xc2>

  f_close (&F1);
 800070a:	f107 0308 	add.w	r3, r7, #8
 800070e:	4618      	mov	r0, r3
 8000710:	f010 f889 	bl	8010826 <f_close>
  
  return 1;
 8000714:	2301      	movs	r3, #1
}
 8000716:	4618      	mov	r0, r3
 8000718:	f507 7712 	add.w	r7, r7, #584	; 0x248
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	2000010c 	.word	0x2000010c
 8000724:	20004dcc 	.word	0x20004dcc

08000728 <Storage_CheckBitmapFile>:
  * @param  BufferAddress: A pointer to a buffer to copy the file to
  * @param  FileLen: the File lenght
  * @retval err: Error status (0=> success, 1=> fail)
  */
uint32_t Storage_CheckBitmapFile(const char* BmpName, uint32_t *FileLen)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
  if(f_mount(&fs, (TCHAR const*)"",0))
 8000732:	2200      	movs	r2, #0
 8000734:	4913      	ldr	r1, [pc, #76]	; (8000784 <Storage_CheckBitmapFile+0x5c>)
 8000736:	4814      	ldr	r0, [pc, #80]	; (8000788 <Storage_CheckBitmapFile+0x60>)
 8000738:	f00f fcb4 	bl	80100a4 <f_mount>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <Storage_CheckBitmapFile+0x1e>
  {
    return 1;
 8000742:	2301      	movs	r3, #1
 8000744:	e01a      	b.n	800077c <Storage_CheckBitmapFile+0x54>
  }
  if (f_open (&F, BmpName, FA_READ))
 8000746:	2201      	movs	r2, #1
 8000748:	6879      	ldr	r1, [r7, #4]
 800074a:	4810      	ldr	r0, [pc, #64]	; (800078c <Storage_CheckBitmapFile+0x64>)
 800074c:	f00f fcf0 	bl	8010130 <f_open>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <Storage_CheckBitmapFile+0x32>
  {
    return 2;
 8000756:	2302      	movs	r3, #2
 8000758:	e010      	b.n	800077c <Storage_CheckBitmapFile+0x54>
  }
  
  f_read (&F, sector, 6, (UINT *)&BytesRead);
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <Storage_CheckBitmapFile+0x68>)
 800075c:	2206      	movs	r2, #6
 800075e:	490d      	ldr	r1, [pc, #52]	; (8000794 <Storage_CheckBitmapFile+0x6c>)
 8000760:	480a      	ldr	r0, [pc, #40]	; (800078c <Storage_CheckBitmapFile+0x64>)
 8000762:	f00f fea3 	bl	80104ac <f_read>
  
  if (Buffercmp((uint8_t *)SlidesCheck, (uint8_t *) sector, 2) != 0)
 8000766:	2202      	movs	r2, #2
 8000768:	490a      	ldr	r1, [pc, #40]	; (8000794 <Storage_CheckBitmapFile+0x6c>)
 800076a:	480b      	ldr	r0, [pc, #44]	; (8000798 <Storage_CheckBitmapFile+0x70>)
 800076c:	f000 f8b2 	bl	80008d4 <Buffercmp>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <Storage_CheckBitmapFile+0x52>
  {
    return 3;
 8000776:	2303      	movs	r3, #3
 8000778:	e000      	b.n	800077c <Storage_CheckBitmapFile+0x54>
  }
  return 0;
 800077a:	2300      	movs	r3, #0
}
 800077c:	4618      	mov	r0, r3
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	080149fc 	.word	0x080149fc
 8000788:	20004b9c 	.word	0x20004b9c
 800078c:	20004ffc 	.word	0x20004ffc
 8000790:	2000010c 	.word	0x2000010c
 8000794:	20004dcc 	.word	0x20004dcc
 8000798:	08014af0 	.word	0x08014af0

0800079c <Storage_GetDirectoryBitmapFiles>:
  * @brief  List up to 25 file on the root directory with extension .BMP
  * @param  None
  * @retval The number of the found files
  */
uint32_t Storage_GetDirectoryBitmapFiles (const char* DirName, char* Files[])
{
 800079c:	b580      	push	{r7, lr}
 800079e:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	6018      	str	r0, [r3, #0]
 80007a8:	463b      	mov	r3, r7
 80007aa:	6019      	str	r1, [r3, #0]
  FATFS fs;
  FILINFO fno;
  DIR dir;
  uint32_t counter = 0, index = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80007b2:	2300      	movs	r3, #0
 80007b4:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
  FRESULT res;

  /* Open filesystem */
  if(f_mount(&fs, (TCHAR const*)"",0) != FR_OK)
 80007b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007bc:	2200      	movs	r2, #0
 80007be:	4944      	ldr	r1, [pc, #272]	; (80008d0 <Storage_GetDirectoryBitmapFiles+0x134>)
 80007c0:	4618      	mov	r0, r3
 80007c2:	f00f fc6f 	bl	80100a4 <f_mount>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <Storage_GetDirectoryBitmapFiles+0x34>
  {
    return 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	e07a      	b.n	80008c6 <Storage_GetDirectoryBitmapFiles+0x12a>
  }

  /* Open directory */
  res = f_opendir(&dir, DirName);
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	f107 020c 	add.w	r2, r7, #12
 80007d6:	6819      	ldr	r1, [r3, #0]
 80007d8:	4610      	mov	r0, r2
 80007da:	f010 f84e 	bl	801087a <f_opendir>
 80007de:	4603      	mov	r3, r0
 80007e0:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
  
  if (res == FR_OK)
 80007e4:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d165      	bne.n	80008b8 <Storage_GetDirectoryBitmapFiles+0x11c>
  {
    for (;;)
    {
      res = f_readdir(&dir, &fno);
 80007ec:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	4611      	mov	r1, r2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f010 f8b2 	bl	8010960 <f_readdir>
 80007fc:	4603      	mov	r3, r0
 80007fe:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
      if (res != FR_OK || fno.fname[0] == 0)
 8000802:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 8000806:	2b00      	cmp	r3, #0
 8000808:	d156      	bne.n	80008b8 <Storage_GetDirectoryBitmapFiles+0x11c>
 800080a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800080e:	7a5b      	ldrb	r3, [r3, #9]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d051      	beq.n	80008b8 <Storage_GetDirectoryBitmapFiles+0x11c>
        break;
      if (fno.fname[0] == '.')
 8000814:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000818:	7a5b      	ldrb	r3, [r3, #9]
 800081a:	2b2e      	cmp	r3, #46	; 0x2e
 800081c:	d04a      	beq.n	80008b4 <Storage_GetDirectoryBitmapFiles+0x118>
        continue;

      if (!(fno.fattrib & AM_DIR))
 800081e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000822:	7a1b      	ldrb	r3, [r3, #8]
 8000824:	f003 0310 	and.w	r3, r3, #16
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1df      	bne.n	80007ec <Storage_GetDirectoryBitmapFiles+0x50>
      {
        do
        {
          counter++;
 800082c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8000830:	3301      	adds	r3, #1
 8000832:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
        }
        while (fno.fname[counter] != 0x2E); /* . */
 8000836:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800083a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800083e:	4413      	add	r3, r2
 8000840:	3309      	adds	r3, #9
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b2e      	cmp	r3, #46	; 0x2e
 8000846:	d1f1      	bne.n	800082c <Storage_GetDirectoryBitmapFiles+0x90>


        if (index < MAX_BMP_FILES)
 8000848:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 800084c:	2b01      	cmp	r3, #1
 800084e:	d82d      	bhi.n	80008ac <Storage_GetDirectoryBitmapFiles+0x110>
        {
          if ((fno.fname[counter + 1] == 'B') && (fno.fname[counter + 2] == 'M') && (fno.fname[counter + 3] == 'P'))
 8000850:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8000854:	3301      	adds	r3, #1
 8000856:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800085a:	4413      	add	r3, r2
 800085c:	7a5b      	ldrb	r3, [r3, #9]
 800085e:	2b42      	cmp	r3, #66	; 0x42
 8000860:	d124      	bne.n	80008ac <Storage_GetDirectoryBitmapFiles+0x110>
 8000862:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8000866:	3302      	adds	r3, #2
 8000868:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800086c:	4413      	add	r3, r2
 800086e:	7a5b      	ldrb	r3, [r3, #9]
 8000870:	2b4d      	cmp	r3, #77	; 0x4d
 8000872:	d11b      	bne.n	80008ac <Storage_GetDirectoryBitmapFiles+0x110>
 8000874:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8000878:	3303      	adds	r3, #3
 800087a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800087e:	4413      	add	r3, r2
 8000880:	7a5b      	ldrb	r3, [r3, #9]
 8000882:	2b50      	cmp	r3, #80	; 0x50
 8000884:	d112      	bne.n	80008ac <Storage_GetDirectoryBitmapFiles+0x110>
          {
            if(sizeof(fno.fname) <= (MAX_BMP_FILE_NAME + 2))
            {
              sprintf (Files[index], "%s", fno.fname);
 8000886:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	463a      	mov	r2, r7
 800088e:	6812      	ldr	r2, [r2, #0]
 8000890:	4413      	add	r3, r2
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000898:	3309      	adds	r3, #9
 800089a:	4619      	mov	r1, r3
 800089c:	4610      	mov	r0, r2
 800089e:	f013 fd75 	bl	801438c <strcpy>
              index++;
 80008a2:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80008a6:	3301      	adds	r3, #1
 80008a8:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
            }
          }
        }
        counter = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80008b2:	e79b      	b.n	80007ec <Storage_GetDirectoryBitmapFiles+0x50>
        continue;
 80008b4:	bf00      	nop
      res = f_readdir(&dir, &fno);
 80008b6:	e799      	b.n	80007ec <Storage_GetDirectoryBitmapFiles+0x50>
      }
    }
  }
  f_mount(NULL, (TCHAR const*)"",0);
 80008b8:	2200      	movs	r2, #0
 80008ba:	4905      	ldr	r1, [pc, #20]	; (80008d0 <Storage_GetDirectoryBitmapFiles+0x134>)
 80008bc:	2000      	movs	r0, #0
 80008be:	f00f fbf1 	bl	80100a4 <f_mount>
  return index;
 80008c2:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	f507 7724 	add.w	r7, r7, #656	; 0x290
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	080149fc 	.word	0x080149fc

080008d4 <Buffercmp>:
  * @param  BufferLength: buffer's length.
  * @retval  0: pBuffer1 identical to pBuffer2
  *          1: pBuffer1 differs from pBuffer2
  */
uint8_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	4613      	mov	r3, r2
 80008e0:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 80008e2:	e00d      	b.n	8000900 <Buffercmp+0x2c>
  {
    if (*pBuffer1 != *pBuffer2)
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	781a      	ldrb	r2, [r3, #0]
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d001      	beq.n	80008f4 <Buffercmp+0x20>
    {
      return 1;
 80008f0:	2301      	movs	r3, #1
 80008f2:	e00b      	b.n	800090c <Buffercmp+0x38>
    }

    pBuffer1++;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	3301      	adds	r3, #1
 80008f8:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	3301      	adds	r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	1e5a      	subs	r2, r3, #1
 8000904:	80fa      	strh	r2, [r7, #6]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d1ec      	bne.n	80008e4 <Buffercmp+0x10>
  }

  return 0;
 800090a:	2300      	movs	r3, #0
}
 800090c:	4618      	mov	r0, r3
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000918:	b598      	push	{r3, r4, r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091c:	f003 f8ca 	bl	8003ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000920:	f000 f92a 	bl	8000b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000924:	f000 fc34 	bl	8001190 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000928:	f000 f9d2 	bl	8000cd0 <MX_ADC1_Init>
  MX_DAC_Init();
 800092c:	f000 fa22 	bl	8000d74 <MX_DAC_Init>
  MX_DFSDM1_Init();
 8000930:	f000 fa4a 	bl	8000dc8 <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 8000934:	f000 fa80 	bl	8000e38 <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 8000938:	f000 fae8 	bl	8000f0c <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 800093c:	f000 fdbe 	bl	80014bc <MX_FSMC_Init>
  MX_I2S2_Init();
 8000940:	f000 fb48 	bl	8000fd4 <MX_I2S2_Init>
  MX_QUADSPI_Init();
 8000944:	f000 fb74 	bl	8001030 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 8000948:	f000 fb9e 	bl	8001088 <MX_SDIO_SD_Init>
  MX_UART10_Init();
 800094c:	f000 fbcc 	bl	80010e8 <MX_UART10_Init>
  MX_USART6_UART_Init();
 8000950:	f000 fbf4 	bl	800113c <MX_USART6_UART_Init>
  MX_I2C2_Init();
 8000954:	f000 fb10 	bl	8000f78 <MX_I2C2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000958:	f000 f9ae 	bl	8000cb8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* LCD Initialization */
    BSP_LCD_Init();
 800095c:	f002 fb59 	bl	8003012 <BSP_LCD_Init>

     //Clear the LCD
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000960:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000964:	f002 fc14 	bl	8003190 <BSP_LCD_Clear>

     //Configure Key Button
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8000968:	2100      	movs	r1, #0
 800096a:	2000      	movs	r0, #0
 800096c:	f002 f99c 	bl	8002ca8 <BSP_PB_Init>

     //SD Initialization
    BSP_SD_Init();
 8000970:	f002 fec8 	bl	8003704 <BSP_SD_Init>

     //Set the font Size
    BSP_LCD_SetFont(&Font16);
 8000974:	4864      	ldr	r0, [pc, #400]	; (8000b08 <main+0x1f0>)
 8000976:	f002 fbfb 	bl	8003170 <BSP_LCD_SetFont>
     //Set the Text Color
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800097a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800097e:	f002 fbd7 	bl	8003130 <BSP_LCD_SetTextColor>
     //Set the Back Color
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000982:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000986:	f002 fbe3 	bl	8003150 <BSP_LCD_SetBackColor>

    while(BSP_SD_IsDetected() != SD_PRESENT)
 800098a:	e005      	b.n	8000998 <main+0x80>
      {
        BSP_LCD_DisplayStringAt(0, 112, (uint8_t*)"Starting Project...", CENTER_MODE);
 800098c:	2301      	movs	r3, #1
 800098e:	4a5f      	ldr	r2, [pc, #380]	; (8000b0c <main+0x1f4>)
 8000990:	2170      	movs	r1, #112	; 0x70
 8000992:	2000      	movs	r0, #0
 8000994:	f002 fc5c 	bl	8003250 <BSP_LCD_DisplayStringAt>
    while(BSP_SD_IsDetected() != SD_PRESENT)
 8000998:	f002 ff00 	bl	800379c <BSP_SD_IsDetected>
 800099c:	4603      	mov	r3, r0
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d1f4      	bne.n	800098c <main+0x74>
      }
    sdStatus = true;
 80009a2:	4b5b      	ldr	r3, [pc, #364]	; (8000b10 <main+0x1f8>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	701a      	strb	r2, [r3, #0]
     //Clear the LCD
      BSP_LCD_Clear(LCD_COLOR_WHITE);
 80009a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80009ac:	f002 fbf0 	bl	8003190 <BSP_LCD_Clear>

      //##-2- Link the SD Card disk I/O driver ###################################
      if(FATFS_LinkDriver(&SD_Driver, SD_Path) == 0)
 80009b0:	4958      	ldr	r1, [pc, #352]	; (8000b14 <main+0x1fc>)
 80009b2:	4859      	ldr	r0, [pc, #356]	; (8000b18 <main+0x200>)
 80009b4:	f010 f85e 	bl	8010a74 <FATFS_LinkDriver>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d14a      	bne.n	8000a54 <main+0x13c>
      {
        //##-3- Initialize the Directory Files pointers (heap) ###################
        for (counter = 0; counter < MAX_BMP_FILES; counter++)
 80009be:	4b57      	ldr	r3, [pc, #348]	; (8000b1c <main+0x204>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	e01b      	b.n	80009fe <main+0xe6>
        {
          pDirectoryFiles[counter] = malloc(MAX_BMP_FILE_NAME);
 80009c6:	4b55      	ldr	r3, [pc, #340]	; (8000b1c <main+0x204>)
 80009c8:	681c      	ldr	r4, [r3, #0]
 80009ca:	200b      	movs	r0, #11
 80009cc:	f013 fbe2 	bl	8014194 <malloc>
 80009d0:	4603      	mov	r3, r0
 80009d2:	461a      	mov	r2, r3
 80009d4:	4b52      	ldr	r3, [pc, #328]	; (8000b20 <main+0x208>)
 80009d6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
          if(pDirectoryFiles[counter] == NULL)
 80009da:	4b50      	ldr	r3, [pc, #320]	; (8000b1c <main+0x204>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a50      	ldr	r2, [pc, #320]	; (8000b20 <main+0x208>)
 80009e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d105      	bne.n	80009f4 <main+0xdc>
          {
            BSP_LCD_DisplayStringAt(0, 112, (uint8_t*)"Cannot allocate memory", CENTER_MODE);
 80009e8:	2301      	movs	r3, #1
 80009ea:	4a4e      	ldr	r2, [pc, #312]	; (8000b24 <main+0x20c>)
 80009ec:	2170      	movs	r1, #112	; 0x70
 80009ee:	2000      	movs	r0, #0
 80009f0:	f002 fc2e 	bl	8003250 <BSP_LCD_DisplayStringAt>
        for (counter = 0; counter < MAX_BMP_FILES; counter++)
 80009f4:	4b49      	ldr	r3, [pc, #292]	; (8000b1c <main+0x204>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	3301      	adds	r3, #1
 80009fa:	4a48      	ldr	r2, [pc, #288]	; (8000b1c <main+0x204>)
 80009fc:	6013      	str	r3, [r2, #0]
 80009fe:	4b47      	ldr	r3, [pc, #284]	; (8000b1c <main+0x204>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d9df      	bls.n	80009c6 <main+0xae>
          }
        }

         //Get the BMP file names on root directory
        ubNumberOfFiles = Storage_GetDirectoryBitmapFiles("/Music", pDirectoryFiles);
 8000a06:	4946      	ldr	r1, [pc, #280]	; (8000b20 <main+0x208>)
 8000a08:	4847      	ldr	r0, [pc, #284]	; (8000b28 <main+0x210>)
 8000a0a:	f7ff fec7 	bl	800079c <Storage_GetDirectoryBitmapFiles>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4b46      	ldr	r3, [pc, #280]	; (8000b2c <main+0x214>)
 8000a14:	701a      	strb	r2, [r3, #0]

        if (ubNumberOfFiles == 0)
 8000a16:	4b45      	ldr	r3, [pc, #276]	; (8000b2c <main+0x214>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d11a      	bne.n	8000a54 <main+0x13c>
        {
          for (counter = 0; counter < MAX_BMP_FILES; counter++)
 8000a1e:	4b3f      	ldr	r3, [pc, #252]	; (8000b1c <main+0x204>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	e00c      	b.n	8000a40 <main+0x128>
          {
            free(pDirectoryFiles[counter]);
 8000a26:	4b3d      	ldr	r3, [pc, #244]	; (8000b1c <main+0x204>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a3d      	ldr	r2, [pc, #244]	; (8000b20 <main+0x208>)
 8000a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f013 fbb7 	bl	80141a4 <free>
          for (counter = 0; counter < MAX_BMP_FILES; counter++)
 8000a36:	4b39      	ldr	r3, [pc, #228]	; (8000b1c <main+0x204>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	4a37      	ldr	r2, [pc, #220]	; (8000b1c <main+0x204>)
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	4b36      	ldr	r3, [pc, #216]	; (8000b1c <main+0x204>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d9ee      	bls.n	8000a26 <main+0x10e>
          }

          BSP_LCD_DisplayStringAt(0, 112, (uint8_t*)"No Bitmap files...", CENTER_MODE);
 8000a48:	2301      	movs	r3, #1
 8000a4a:	4a39      	ldr	r2, [pc, #228]	; (8000b30 <main+0x218>)
 8000a4c:	2170      	movs	r1, #112	; 0x70
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f002 fbfe 	bl	8003250 <BSP_LCD_DisplayStringAt>
      else
      {
         //FatFs Initialization Error
      }

      counter = 0;
 8000a54:	4b31      	ldr	r3, [pc, #196]	; (8000b1c <main+0x204>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]


      if(BSP_SD_IsDetected())
 8000a5a:	f002 fe9f 	bl	800379c <BSP_SD_IsDetected>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d026      	beq.n	8000ab2 <main+0x19a>
        {
    	  while(counter < MAX_BMP_FILES)
 8000a64:	e021      	b.n	8000aaa <main+0x192>
    	  {
             //Format the string
            sprintf ((char*)str, "Music/%-11.11s", pDirectoryFiles[counter]);
 8000a66:	4b2d      	ldr	r3, [pc, #180]	; (8000b1c <main+0x204>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a2d      	ldr	r2, [pc, #180]	; (8000b20 <main+0x208>)
 8000a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a70:	461a      	mov	r2, r3
 8000a72:	4930      	ldr	r1, [pc, #192]	; (8000b34 <main+0x21c>)
 8000a74:	4830      	ldr	r0, [pc, #192]	; (8000b38 <main+0x220>)
 8000a76:	f013 fc69 	bl	801434c <siprintf>

            if (Storage_CheckBitmapFile((const char*)str, &uwBmplen) == 0)
 8000a7a:	4930      	ldr	r1, [pc, #192]	; (8000b3c <main+0x224>)
 8000a7c:	482e      	ldr	r0, [pc, #184]	; (8000b38 <main+0x220>)
 8000a7e:	f7ff fe53 	bl	8000728 <Storage_CheckBitmapFile>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d110      	bne.n	8000aaa <main+0x192>
            {
              // Open a file and copy its content to an internal buffer
              Storage_OpenReadFile(bufferArray[counter].uwInternelBuffer, (const char*)str);
 8000a88:	4b24      	ldr	r3, [pc, #144]	; (8000b1c <main+0x204>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a90:	fb02 f303 	mul.w	r3, r2, r3
 8000a94:	4a2a      	ldr	r2, [pc, #168]	; (8000b40 <main+0x228>)
 8000a96:	4413      	add	r3, r2
 8000a98:	4927      	ldr	r1, [pc, #156]	; (8000b38 <main+0x220>)
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fd90 	bl	80005c0 <Storage_OpenReadFile>
              //{
              //  BSP_LCD_DisplayStringAt(0, 112, (uint8_t*)"Please insert SD Card  ", CENTER_MODE);
              //  BSP_LCD_DisplayStringAt(0, 128, (uint8_t*)"Reset the board        ", CENTER_MODE);
              //}
               //Jump to the next image
              counter++;
 8000aa0:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <main+0x204>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	4a1d      	ldr	r2, [pc, #116]	; (8000b1c <main+0x204>)
 8000aa8:	6013      	str	r3, [r2, #0]
    	  while(counter < MAX_BMP_FILES)
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <main+0x204>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d9d9      	bls.n	8000a66 <main+0x14e>
            }
    	  }
        }
      counter = 0;
 8000ab2:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <main+0x204>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
      count = -1;
 8000ab8:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <main+0x22c>)
 8000aba:	22ff      	movs	r2, #255	; 0xff
 8000abc:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000abe:	f010 f8d5 	bl	8010c6c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000ac2:	4a21      	ldr	r2, [pc, #132]	; (8000b48 <main+0x230>)
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4821      	ldr	r0, [pc, #132]	; (8000b4c <main+0x234>)
 8000ac8:	f010 f93a 	bl	8010d40 <osThreadNew>
 8000acc:	4602      	mov	r2, r0
 8000ace:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <main+0x238>)
 8000ad0:	601a      	str	r2, [r3, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000ad2:	4a20      	ldr	r2, [pc, #128]	; (8000b54 <main+0x23c>)
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4820      	ldr	r0, [pc, #128]	; (8000b58 <main+0x240>)
 8000ad8:	f010 f932 	bl	8010d40 <osThreadNew>
 8000adc:	4602      	mov	r2, r0
 8000ade:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <main+0x244>)
 8000ae0:	601a      	str	r2, [r3, #0]

  /* creation of buttonPoll */
  buttonPollHandle = osThreadNew(StartButtonPoll, NULL, &buttonPoll_attributes);
 8000ae2:	4a1f      	ldr	r2, [pc, #124]	; (8000b60 <main+0x248>)
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	481f      	ldr	r0, [pc, #124]	; (8000b64 <main+0x24c>)
 8000ae8:	f010 f92a 	bl	8010d40 <osThreadNew>
 8000aec:	4602      	mov	r2, r0
 8000aee:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <main+0x250>)
 8000af0:	601a      	str	r2, [r3, #0]

  /* creation of displayImage */
  displayImageHandle = osThreadNew(StartDisplayImage, NULL, &displayImage_attributes);
 8000af2:	4a1e      	ldr	r2, [pc, #120]	; (8000b6c <main+0x254>)
 8000af4:	2100      	movs	r1, #0
 8000af6:	481e      	ldr	r0, [pc, #120]	; (8000b70 <main+0x258>)
 8000af8:	f010 f922 	bl	8010d40 <osThreadNew>
 8000afc:	4602      	mov	r2, r0
 8000afe:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <main+0x25c>)
 8000b00:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b02:	f010 f8e7 	bl	8010cd4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <main+0x1ee>
 8000b08:	2000004c 	.word	0x2000004c
 8000b0c:	08014a2c 	.word	0x08014a2c
 8000b10:	2000011d 	.word	0x2000011d
 8000b14:	2003d870 	.word	0x2003d870
 8000b18:	08017730 	.word	0x08017730
 8000b1c:	20000118 	.word	0x20000118
 8000b20:	2003d784 	.word	0x2003d784
 8000b24:	08014a40 	.word	0x08014a40
 8000b28:	08014a58 	.word	0x08014a58
 8000b2c:	20000110 	.word	0x20000110
 8000b30:	08014a60 	.word	0x08014a60
 8000b34:	08014a74 	.word	0x08014a74
 8000b38:	2003d98c 	.word	0x2003d98c
 8000b3c:	20000114 	.word	0x20000114
 8000b40:	20005264 	.word	0x20005264
 8000b44:	2000011c 	.word	0x2000011c
 8000b48:	08014af4 	.word	0x08014af4
 8000b4c:	08001621 	.word	0x08001621
 8000b50:	2003d988 	.word	0x2003d988
 8000b54:	08014b18 	.word	0x08014b18
 8000b58:	08001645 	.word	0x08001645
 8000b5c:	2003dc24 	.word	0x2003dc24
 8000b60:	08014b3c 	.word	0x08014b3c
 8000b64:	08001665 	.word	0x08001665
 8000b68:	2003d664 	.word	0x2003d664
 8000b6c:	08014b60 	.word	0x08014b60
 8000b70:	080016cd 	.word	0x080016cd
 8000b74:	2003d7c4 	.word	0x2003d7c4

08000b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b0aa      	sub	sp, #168	; 0xa8
 8000b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b82:	2234      	movs	r2, #52	; 0x34
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f013 fb1f 	bl	80141ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b8c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b9c:	f107 0308 	add.w	r3, r7, #8
 8000ba0:	2258      	movs	r2, #88	; 0x58
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f013 fb10 	bl	80141ca <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	4b40      	ldr	r3, [pc, #256]	; (8000cb0 <SystemClock_Config+0x138>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a3f      	ldr	r2, [pc, #252]	; (8000cb0 <SystemClock_Config+0x138>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b3d      	ldr	r3, [pc, #244]	; (8000cb0 <SystemClock_Config+0x138>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	4b3a      	ldr	r3, [pc, #232]	; (8000cb4 <SystemClock_Config+0x13c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a39      	ldr	r2, [pc, #228]	; (8000cb4 <SystemClock_Config+0x13c>)
 8000bd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bd4:	6013      	str	r3, [r2, #0]
 8000bd6:	4b37      	ldr	r3, [pc, #220]	; (8000cb4 <SystemClock_Config+0x13c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000be2:	2303      	movs	r3, #3
 8000be4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000be6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bea:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bec:	2301      	movs	r3, #1
 8000bee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bf2:	2310      	movs	r3, #16
 8000bf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000c06:	230f      	movs	r3, #15
 8000c08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000c0c:	2390      	movs	r3, #144	; 0x90
 8000c0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c12:	2302      	movs	r3, #2
 8000c14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000c18:	2305      	movs	r3, #5
 8000c1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c24:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f007 fb1d 	bl	8008268 <HAL_RCC_OscConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c34:	f000 fd90 	bl	8001758 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c38:	230f      	movs	r3, #15
 8000c3a:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c4c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f006 fd2e 	bl	80076b4 <HAL_RCC_ClockConfig>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000c5e:	f000 fd7b 	bl	8001758 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 8000c62:	f240 1371 	movw	r3, #369	; 0x171
 8000c66:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000c68:	2332      	movs	r3, #50	; 0x32
 8000c6a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 8000c6c:	230c      	movs	r3, #12
 8000c6e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c70:	2302      	movs	r3, #2
 8000c72:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000c74:	2302      	movs	r3, #2
 8000c76:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 8000c80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c84:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 8000c86:	2300      	movs	r3, #0
 8000c88:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c92:	f107 0308 	add.w	r3, r7, #8
 8000c96:	4618      	mov	r0, r3
 8000c98:	f006 ff0a 	bl	8007ab0 <HAL_RCCEx_PeriphCLKConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0x12e>
  {
    Error_Handler();
 8000ca2:	f000 fd59 	bl	8001758 <Error_Handler>
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	37a8      	adds	r7, #168	; 0xa8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40007000 	.word	0x40007000

08000cb8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2006      	movs	r0, #6
 8000cc2:	f003 fa85 	bl	80041d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000cc6:	2006      	movs	r0, #6
 8000cc8:	f003 fa9e 	bl	8004208 <HAL_NVIC_EnableIRQ>
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ce2:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <MX_ADC1_Init+0x98>)
 8000ce4:	4a21      	ldr	r2, [pc, #132]	; (8000d6c <MX_ADC1_Init+0x9c>)
 8000ce6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <MX_ADC1_Init+0x98>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cee:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <MX_ADC1_Init+0x98>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000cf4:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <MX_ADC1_Init+0x98>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cfa:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <MX_ADC1_Init+0x98>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d00:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <MX_ADC1_Init+0x98>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d08:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <MX_ADC1_Init+0x98>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d0e:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <MX_ADC1_Init+0x98>)
 8000d10:	4a17      	ldr	r2, [pc, #92]	; (8000d70 <MX_ADC1_Init+0xa0>)
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d14:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <MX_ADC1_Init+0x98>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d1a:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <MX_ADC1_Init+0x98>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <MX_ADC1_Init+0x98>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <MX_ADC1_Init+0x98>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d2e:	480e      	ldr	r0, [pc, #56]	; (8000d68 <MX_ADC1_Init+0x98>)
 8000d30:	f002 ff24 	bl	8003b7c <HAL_ADC_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d3a:	f000 fd0d 	bl	8001758 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000d3e:	230a      	movs	r3, #10
 8000d40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d42:	2301      	movs	r3, #1
 8000d44:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4806      	ldr	r0, [pc, #24]	; (8000d68 <MX_ADC1_Init+0x98>)
 8000d50:	f002 ff58 	bl	8003c04 <HAL_ADC_ConfigChannel>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000d5a:	f000 fcfd 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	2003d7c8 	.word	0x2003d7c8
 8000d6c:	40012000 	.word	0x40012000
 8000d70:	0f000001 	.word	0x0f000001

08000d74 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_DAC_Init+0x4c>)
 8000d84:	4a0f      	ldr	r2, [pc, #60]	; (8000dc4 <MX_DAC_Init+0x50>)
 8000d86:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000d88:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <MX_DAC_Init+0x4c>)
 8000d8a:	f003 fa4b 	bl	8004224 <HAL_DAC_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000d94:	f000 fce0 	bl	8001758 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000da0:	463b      	mov	r3, r7
 8000da2:	2200      	movs	r2, #0
 8000da4:	4619      	mov	r1, r3
 8000da6:	4806      	ldr	r0, [pc, #24]	; (8000dc0 <MX_DAC_Init+0x4c>)
 8000da8:	f003 fab2 	bl	8004310 <HAL_DAC_ConfigChannel>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000db2:	f000 fcd1 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2003d810 	.word	0x2003d810
 8000dc4:	40007400 	.word	0x40007400

08000dc8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <MX_DFSDM1_Init+0x68>)
 8000dce:	4a19      	ldr	r2, [pc, #100]	; (8000e34 <MX_DFSDM1_Init+0x6c>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000dd2:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <MX_DFSDM1_Init+0x68>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000dd8:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <MX_DFSDM1_Init+0x68>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000dde:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <MX_DFSDM1_Init+0x68>)
 8000de0:	2202      	movs	r2, #2
 8000de2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <MX_DFSDM1_Init+0x68>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <MX_DFSDM1_Init+0x68>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <MX_DFSDM1_Init+0x68>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <MX_DFSDM1_Init+0x68>)
 8000df8:	2202      	movs	r2, #2
 8000dfa:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <MX_DFSDM1_Init+0x68>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <MX_DFSDM1_Init+0x68>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <MX_DFSDM1_Init+0x68>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <MX_DFSDM1_Init+0x68>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <MX_DFSDM1_Init+0x68>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_DFSDM1_Init+0x68>)
 8000e1c:	f003 fad0 	bl	80043c0 <HAL_DFSDM_ChannelInit>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000e26:	f000 fc97 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	2000522c 	.word	0x2000522c
 8000e34:	40016020 	.word	0x40016020

08000e38 <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 8000e3c:	4b2f      	ldr	r3, [pc, #188]	; (8000efc <MX_DFSDM2_Init+0xc4>)
 8000e3e:	4a30      	ldr	r2, [pc, #192]	; (8000f00 <MX_DFSDM2_Init+0xc8>)
 8000e40:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 8000e42:	4b2e      	ldr	r3, [pc, #184]	; (8000efc <MX_DFSDM2_Init+0xc4>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000e48:	4b2c      	ldr	r3, [pc, #176]	; (8000efc <MX_DFSDM2_Init+0xc4>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 8000e4e:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <MX_DFSDM2_Init+0xc4>)
 8000e50:	2202      	movs	r2, #2
 8000e52:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000e54:	4b29      	ldr	r3, [pc, #164]	; (8000efc <MX_DFSDM2_Init+0xc4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000e5a:	4b28      	ldr	r3, [pc, #160]	; (8000efc <MX_DFSDM2_Init+0xc4>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000e60:	4b26      	ldr	r3, [pc, #152]	; (8000efc <MX_DFSDM2_Init+0xc4>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000e66:	4b25      	ldr	r3, [pc, #148]	; (8000efc <MX_DFSDM2_Init+0xc4>)
 8000e68:	2202      	movs	r2, #2
 8000e6a:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000e6c:	4b23      	ldr	r3, [pc, #140]	; (8000efc <MX_DFSDM2_Init+0xc4>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000e72:	4b22      	ldr	r3, [pc, #136]	; (8000efc <MX_DFSDM2_Init+0xc4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 8000e78:	4b20      	ldr	r3, [pc, #128]	; (8000efc <MX_DFSDM2_Init+0xc4>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <MX_DFSDM2_Init+0xc4>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <MX_DFSDM2_Init+0xc4>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 8000e8a:	481c      	ldr	r0, [pc, #112]	; (8000efc <MX_DFSDM2_Init+0xc4>)
 8000e8c:	f003 fa98 	bl	80043c0 <HAL_DFSDM_ChannelInit>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_DFSDM2_Init+0x62>
  {
    Error_Handler();
 8000e96:	f000 fc5f 	bl	8001758 <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <MX_DFSDM2_Init+0xcc>)
 8000e9c:	4a1a      	ldr	r2, [pc, #104]	; (8000f08 <MX_DFSDM2_Init+0xd0>)
 8000e9e:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_DFSDM2_Init+0xcc>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <MX_DFSDM2_Init+0xcc>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 8000eac:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <MX_DFSDM2_Init+0xcc>)
 8000eae:	2202      	movs	r2, #2
 8000eb0:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000eb2:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_DFSDM2_Init+0xcc>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <MX_DFSDM2_Init+0xcc>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_DFSDM2_Init+0xcc>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_DFSDM2_Init+0xcc>)
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <MX_DFSDM2_Init+0xcc>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_DFSDM2_Init+0xcc>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <MX_DFSDM2_Init+0xcc>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_DFSDM2_Init+0xcc>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <MX_DFSDM2_Init+0xcc>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 8000ee8:	4806      	ldr	r0, [pc, #24]	; (8000f04 <MX_DFSDM2_Init+0xcc>)
 8000eea:	f003 fa69 	bl	80043c0 <HAL_DFSDM_ChannelInit>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_DFSDM2_Init+0xc0>
  {
    Error_Handler();
 8000ef4:	f000 fc30 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	2003d78c 	.word	0x2003d78c
 8000f00:	40016420 	.word	0x40016420
 8000f04:	2003d6bc 	.word	0x2003d6bc
 8000f08:	400164e0 	.word	0x400164e0

08000f0c <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8000f10:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <MX_FMPI2C1_Init+0x60>)
 8000f12:	4a17      	ldr	r2, [pc, #92]	; (8000f70 <MX_FMPI2C1_Init+0x64>)
 8000f14:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <MX_FMPI2C1_Init+0x60>)
 8000f18:	4a16      	ldr	r2, [pc, #88]	; (8000f74 <MX_FMPI2C1_Init+0x68>)
 8000f1a:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <MX_FMPI2C1_Init+0x60>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <MX_FMPI2C1_Init+0x60>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8000f28:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <MX_FMPI2C1_Init+0x60>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <MX_FMPI2C1_Init+0x60>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8000f34:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <MX_FMPI2C1_Init+0x60>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <MX_FMPI2C1_Init+0x60>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8000f40:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <MX_FMPI2C1_Init+0x60>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8000f46:	4809      	ldr	r0, [pc, #36]	; (8000f6c <MX_FMPI2C1_Init+0x60>)
 8000f48:	f003 fd4a 	bl	80049e0 <HAL_FMPI2C_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8000f52:	f000 fc01 	bl	8001758 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f56:	2100      	movs	r1, #0
 8000f58:	4804      	ldr	r0, [pc, #16]	; (8000f6c <MX_FMPI2C1_Init+0x60>)
 8000f5a:	f003 fdd0 	bl	8004afe <HAL_FMPI2CEx_ConfigAnalogFilter>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000f64:	f000 fbf8 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	2003d824 	.word	0x2003d824
 8000f70:	40006000 	.word	0x40006000
 8000f74:	00303d5b 	.word	0x00303d5b

08000f78 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <MX_I2C2_Init+0x50>)
 8000f7e:	4a13      	ldr	r2, [pc, #76]	; (8000fcc <MX_I2C2_Init+0x54>)
 8000f80:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_I2C2_Init+0x50>)
 8000f84:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <MX_I2C2_Init+0x58>)
 8000f86:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_I2C2_Init+0x50>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_I2C2_Init+0x50>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_I2C2_Init+0x50>)
 8000f96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f9a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <MX_I2C2_Init+0x50>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_I2C2_Init+0x50>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa8:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <MX_I2C2_Init+0x50>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_I2C2_Init+0x50>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fb4:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <MX_I2C2_Init+0x50>)
 8000fb6:	f005 fcdf 	bl	8006978 <HAL_I2C_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000fc0:	f000 fbca 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	2003d668 	.word	0x2003d668
 8000fcc:	40005800 	.word	0x40005800
 8000fd0:	000186a0 	.word	0x000186a0

08000fd4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <MX_I2S2_Init+0x54>)
 8000fda:	4a14      	ldr	r2, [pc, #80]	; (800102c <MX_I2S2_Init+0x58>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000fde:	4b12      	ldr	r3, [pc, #72]	; (8001028 <MX_I2S2_Init+0x54>)
 8000fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fe4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <MX_I2S2_Init+0x54>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000fec:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_I2S2_Init+0x54>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <MX_I2S2_Init+0x54>)
 8000ff4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ff8:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <MX_I2S2_Init+0x54>)
 8000ffc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001000:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_I2S2_Init+0x54>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <MX_I2S2_Init+0x54>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_I2S2_Init+0x54>)
 8001010:	2201      	movs	r2, #1
 8001012:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001014:	4804      	ldr	r0, [pc, #16]	; (8001028 <MX_I2S2_Init+0x54>)
 8001016:	f005 fde7 	bl	8006be8 <HAL_I2S_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8001020:	f000 fb9a 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	2003dbdc 	.word	0x2003dbdc
 800102c:	40003800 	.word	0x40003800

08001030 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <MX_QUADSPI_Init+0x50>)
 8001036:	4a13      	ldr	r2, [pc, #76]	; (8001084 <MX_QUADSPI_Init+0x54>)
 8001038:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <MX_QUADSPI_Init+0x50>)
 800103c:	22ff      	movs	r2, #255	; 0xff
 800103e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <MX_QUADSPI_Init+0x50>)
 8001042:	2201      	movs	r2, #1
 8001044:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <MX_QUADSPI_Init+0x50>)
 8001048:	2200      	movs	r2, #0
 800104a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <MX_QUADSPI_Init+0x50>)
 800104e:	2201      	movs	r2, #1
 8001050:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <MX_QUADSPI_Init+0x50>)
 8001054:	2200      	movs	r2, #0
 8001056:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <MX_QUADSPI_Init+0x50>)
 800105a:	2200      	movs	r2, #0
 800105c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <MX_QUADSPI_Init+0x50>)
 8001060:	2200      	movs	r2, #0
 8001062:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <MX_QUADSPI_Init+0x50>)
 8001066:	2200      	movs	r2, #0
 8001068:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_QUADSPI_Init+0x50>)
 800106c:	f006 fa60 	bl	8007530 <HAL_QSPI_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001076:	f000 fb6f 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2003dc28 	.word	0x2003dc28
 8001084:	a0001000 	.word	0xa0001000

08001088 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_SDIO_SD_Init+0x58>)
 800108e:	4a15      	ldr	r2, [pc, #84]	; (80010e4 <MX_SDIO_SD_Init+0x5c>)
 8001090:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001092:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <MX_SDIO_SD_Init+0x58>)
 8001094:	2200      	movs	r2, #0
 8001096:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_SDIO_SD_Init+0x58>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <MX_SDIO_SD_Init+0x58>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_SDIO_SD_Init+0x58>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <MX_SDIO_SD_Init+0x58>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <MX_SDIO_SD_Init+0x58>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 80010b6:	480a      	ldr	r0, [pc, #40]	; (80010e0 <MX_SDIO_SD_Init+0x58>)
 80010b8:	f007 fb18 	bl	80086ec <HAL_SD_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 80010c2:	f000 fb49 	bl	8001758 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80010c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_SDIO_SD_Init+0x58>)
 80010cc:	f008 f906 	bl	80092dc <HAL_SD_ConfigWideBusOperation>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 80010d6:	f000 fb3f 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	2003d8c4 	.word	0x2003d8c4
 80010e4:	40012c00 	.word	0x40012c00

080010e8 <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_UART10_Init+0x4c>)
 80010ee:	4a12      	ldr	r2, [pc, #72]	; (8001138 <MX_UART10_Init+0x50>)
 80010f0:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <MX_UART10_Init+0x4c>)
 80010f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010f8:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_UART10_Init+0x4c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_UART10_Init+0x4c>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <MX_UART10_Init+0x4c>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_UART10_Init+0x4c>)
 800110e:	220c      	movs	r2, #12
 8001110:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <MX_UART10_Init+0x4c>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_UART10_Init+0x4c>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <MX_UART10_Init+0x4c>)
 8001120:	f008 fede 	bl	8009ee0 <HAL_UART_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_UART10_Init+0x46>
  {
    Error_Handler();
 800112a:	f000 fb15 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2003d6f4 	.word	0x2003d6f4
 8001138:	40011c00 	.word	0x40011c00

0800113c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <MX_USART6_UART_Init+0x4c>)
 8001142:	4a12      	ldr	r2, [pc, #72]	; (800118c <MX_USART6_UART_Init+0x50>)
 8001144:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <MX_USART6_UART_Init+0x4c>)
 8001148:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800114c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <MX_USART6_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <MX_USART6_UART_Init+0x4c>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <MX_USART6_UART_Init+0x4c>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_USART6_UART_Init+0x4c>)
 8001162:	220c      	movs	r2, #12
 8001164:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <MX_USART6_UART_Init+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_USART6_UART_Init+0x4c>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <MX_USART6_UART_Init+0x4c>)
 8001174:	f008 feb4 	bl	8009ee0 <HAL_UART_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800117e:	f000 faeb 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2003d948 	.word	0x2003d948
 800118c:	40011400 	.word	0x40011400

08001190 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08e      	sub	sp, #56	; 0x38
 8001194:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	623b      	str	r3, [r7, #32]
 80011aa:	4bb0      	ldr	r3, [pc, #704]	; (800146c <MX_GPIO_Init+0x2dc>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4aaf      	ldr	r2, [pc, #700]	; (800146c <MX_GPIO_Init+0x2dc>)
 80011b0:	f043 0310 	orr.w	r3, r3, #16
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4bad      	ldr	r3, [pc, #692]	; (800146c <MX_GPIO_Init+0x2dc>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0310 	and.w	r3, r3, #16
 80011be:	623b      	str	r3, [r7, #32]
 80011c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
 80011c6:	4ba9      	ldr	r3, [pc, #676]	; (800146c <MX_GPIO_Init+0x2dc>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4aa8      	ldr	r2, [pc, #672]	; (800146c <MX_GPIO_Init+0x2dc>)
 80011cc:	f043 0304 	orr.w	r3, r3, #4
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4ba6      	ldr	r3, [pc, #664]	; (800146c <MX_GPIO_Init+0x2dc>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	61fb      	str	r3, [r7, #28]
 80011dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	61bb      	str	r3, [r7, #24]
 80011e2:	4ba2      	ldr	r3, [pc, #648]	; (800146c <MX_GPIO_Init+0x2dc>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4aa1      	ldr	r2, [pc, #644]	; (800146c <MX_GPIO_Init+0x2dc>)
 80011e8:	f043 0320 	orr.w	r3, r3, #32
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b9f      	ldr	r3, [pc, #636]	; (800146c <MX_GPIO_Init+0x2dc>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0320 	and.w	r3, r3, #32
 80011f6:	61bb      	str	r3, [r7, #24]
 80011f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	4b9b      	ldr	r3, [pc, #620]	; (800146c <MX_GPIO_Init+0x2dc>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a9a      	ldr	r2, [pc, #616]	; (800146c <MX_GPIO_Init+0x2dc>)
 8001204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b98      	ldr	r3, [pc, #608]	; (800146c <MX_GPIO_Init+0x2dc>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	4b94      	ldr	r3, [pc, #592]	; (800146c <MX_GPIO_Init+0x2dc>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a93      	ldr	r2, [pc, #588]	; (800146c <MX_GPIO_Init+0x2dc>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b91      	ldr	r3, [pc, #580]	; (800146c <MX_GPIO_Init+0x2dc>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b8d      	ldr	r3, [pc, #564]	; (800146c <MX_GPIO_Init+0x2dc>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a8c      	ldr	r2, [pc, #560]	; (800146c <MX_GPIO_Init+0x2dc>)
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b8a      	ldr	r3, [pc, #552]	; (800146c <MX_GPIO_Init+0x2dc>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	4b86      	ldr	r3, [pc, #536]	; (800146c <MX_GPIO_Init+0x2dc>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a85      	ldr	r2, [pc, #532]	; (800146c <MX_GPIO_Init+0x2dc>)
 8001258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b83      	ldr	r3, [pc, #524]	; (800146c <MX_GPIO_Init+0x2dc>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	4b7f      	ldr	r3, [pc, #508]	; (800146c <MX_GPIO_Init+0x2dc>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a7e      	ldr	r2, [pc, #504]	; (800146c <MX_GPIO_Init+0x2dc>)
 8001274:	f043 0308 	orr.w	r3, r3, #8
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b7c      	ldr	r3, [pc, #496]	; (800146c <MX_GPIO_Init+0x2dc>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	2138      	movs	r1, #56	; 0x38
 800128a:	4879      	ldr	r0, [pc, #484]	; (8001470 <MX_GPIO_Init+0x2e0>)
 800128c:	f003 fe2c 	bl	8004ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	2120      	movs	r1, #32
 8001294:	4877      	ldr	r0, [pc, #476]	; (8001474 <MX_GPIO_Init+0x2e4>)
 8001296:	f003 fe27 	bl	8004ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80012a0:	4875      	ldr	r0, [pc, #468]	; (8001478 <MX_GPIO_Init+0x2e8>)
 80012a2:	f003 fe21 	bl	8004ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 80012ac:	4873      	ldr	r0, [pc, #460]	; (800147c <MX_GPIO_Init+0x2ec>)
 80012ae:	f003 fe1b 	bl	8004ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 80012b2:	2338      	movs	r3, #56	; 0x38
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c6:	4619      	mov	r1, r3
 80012c8:	4869      	ldr	r0, [pc, #420]	; (8001470 <MX_GPIO_Init+0x2e0>)
 80012ca:	f003 fc63 	bl	8004b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 80012ce:	2340      	movs	r3, #64	; 0x40
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80012de:	2303      	movs	r3, #3
 80012e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e6:	4619      	mov	r1, r3
 80012e8:	4861      	ldr	r0, [pc, #388]	; (8001470 <MX_GPIO_Init+0x2e0>)
 80012ea:	f003 fc53 	bl	8004b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80012ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001300:	2302      	movs	r3, #2
 8001302:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001308:	4619      	mov	r1, r3
 800130a:	485d      	ldr	r0, [pc, #372]	; (8001480 <MX_GPIO_Init+0x2f0>)
 800130c:	f003 fc42 	bl	8004b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8001310:	2302      	movs	r3, #2
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001314:	4b5b      	ldr	r3, [pc, #364]	; (8001484 <MX_GPIO_Init+0x2f4>)
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001320:	4619      	mov	r1, r3
 8001322:	4854      	ldr	r0, [pc, #336]	; (8001474 <MX_GPIO_Init+0x2e4>)
 8001324:	f003 fc36 	bl	8004b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001328:	2301      	movs	r3, #1
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800132c:	4b55      	ldr	r3, [pc, #340]	; (8001484 <MX_GPIO_Init+0x2f4>)
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001338:	4619      	mov	r1, r3
 800133a:	4853      	ldr	r0, [pc, #332]	; (8001488 <MX_GPIO_Init+0x2f8>)
 800133c:	f003 fc2a 	bl	8004b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8001340:	2320      	movs	r3, #32
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001344:	2301      	movs	r3, #1
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001354:	4619      	mov	r1, r3
 8001356:	4847      	ldr	r0, [pc, #284]	; (8001474 <MX_GPIO_Init+0x2e4>)
 8001358:	f003 fc1c 	bl	8004b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800135c:	2301      	movs	r3, #1
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800136c:	2302      	movs	r3, #2
 800136e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001374:	4619      	mov	r1, r3
 8001376:	4840      	ldr	r0, [pc, #256]	; (8001478 <MX_GPIO_Init+0x2e8>)
 8001378:	f003 fc0c 	bl	8004b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 800137c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001382:	4b40      	ldr	r3, [pc, #256]	; (8001484 <MX_GPIO_Init+0x2f4>)
 8001384:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 800138a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138e:	4619      	mov	r1, r3
 8001390:	483b      	ldr	r0, [pc, #236]	; (8001480 <MX_GPIO_Init+0x2f0>)
 8001392:	f003 fbff 	bl	8004b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8001396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80013a8:	2307      	movs	r3, #7
 80013aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 80013ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b0:	4619      	mov	r1, r3
 80013b2:	4831      	ldr	r0, [pc, #196]	; (8001478 <MX_GPIO_Init+0x2e8>)
 80013b4:	f003 fbee 	bl	8004b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 80013b8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	2301      	movs	r3, #1
 80013c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ce:	4619      	mov	r1, r3
 80013d0:	4829      	ldr	r0, [pc, #164]	; (8001478 <MX_GPIO_Init+0x2e8>)
 80013d2:	f003 fbdf 	bl	8004b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 80013d6:	f248 0380 	movw	r3, #32896	; 0x8080
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013dc:	4b29      	ldr	r3, [pc, #164]	; (8001484 <MX_GPIO_Init+0x2f4>)
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e8:	4619      	mov	r1, r3
 80013ea:	4824      	ldr	r0, [pc, #144]	; (800147c <MX_GPIO_Init+0x2ec>)
 80013ec:	f003 fbd2 	bl	8004b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin;
 80013f0:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001406:	4619      	mov	r1, r3
 8001408:	481c      	ldr	r0, [pc, #112]	; (800147c <MX_GPIO_Init+0x2ec>)
 800140a:	f003 fbc3 	bl	8004b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 800140e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001420:	2301      	movs	r3, #1
 8001422:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8001424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001428:	4619      	mov	r1, r3
 800142a:	4817      	ldr	r0, [pc, #92]	; (8001488 <MX_GPIO_Init+0x2f8>)
 800142c:	f003 fbb2 	bl	8004b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001430:	2330      	movs	r3, #48	; 0x30
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143c:	2303      	movs	r3, #3
 800143e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001440:	2306      	movs	r3, #6
 8001442:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001448:	4619      	mov	r1, r3
 800144a:	480b      	ldr	r0, [pc, #44]	; (8001478 <MX_GPIO_Init+0x2e8>)
 800144c:	f003 fba2 	bl	8004b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001450:	2340      	movs	r3, #64	; 0x40
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <MX_GPIO_Init+0x2f4>)
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001460:	4619      	mov	r1, r3
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_GPIO_Init+0x2e8>)
 8001464:	f003 fb96 	bl	8004b94 <HAL_GPIO_Init>
 8001468:	e010      	b.n	800148c <MX_GPIO_Init+0x2fc>
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800
 8001470:	40021000 	.word	0x40021000
 8001474:	40020800 	.word	0x40020800
 8001478:	40020400 	.word	0x40020400
 800147c:	40021800 	.word	0x40021800
 8001480:	40021400 	.word	0x40021400
 8001484:	10110000 	.word	0x10110000
 8001488:	40020000 	.word	0x40020000

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 800148c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800149e:	2302      	movs	r3, #2
 80014a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	4619      	mov	r1, r3
 80014a8:	4803      	ldr	r0, [pc, #12]	; (80014b8 <MX_GPIO_Init+0x328>)
 80014aa:	f003 fb73 	bl	8004b94 <HAL_GPIO_Init>

}
 80014ae:	bf00      	nop
 80014b0:	3738      	adds	r7, #56	; 0x38
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40020400 	.word	0x40020400

080014bc <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
 80014d0:	615a      	str	r2, [r3, #20]
 80014d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80014d4:	4b4f      	ldr	r3, [pc, #316]	; (8001614 <MX_FSMC_Init+0x158>)
 80014d6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80014da:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80014dc:	4b4d      	ldr	r3, [pc, #308]	; (8001614 <MX_FSMC_Init+0x158>)
 80014de:	4a4e      	ldr	r2, [pc, #312]	; (8001618 <MX_FSMC_Init+0x15c>)
 80014e0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80014e2:	4b4c      	ldr	r3, [pc, #304]	; (8001614 <MX_FSMC_Init+0x158>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80014e8:	4b4a      	ldr	r3, [pc, #296]	; (8001614 <MX_FSMC_Init+0x158>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80014ee:	4b49      	ldr	r3, [pc, #292]	; (8001614 <MX_FSMC_Init+0x158>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80014f4:	4b47      	ldr	r3, [pc, #284]	; (8001614 <MX_FSMC_Init+0x158>)
 80014f6:	2210      	movs	r2, #16
 80014f8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80014fa:	4b46      	ldr	r3, [pc, #280]	; (8001614 <MX_FSMC_Init+0x158>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001500:	4b44      	ldr	r3, [pc, #272]	; (8001614 <MX_FSMC_Init+0x158>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001506:	4b43      	ldr	r3, [pc, #268]	; (8001614 <MX_FSMC_Init+0x158>)
 8001508:	2200      	movs	r2, #0
 800150a:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800150c:	4b41      	ldr	r3, [pc, #260]	; (8001614 <MX_FSMC_Init+0x158>)
 800150e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001512:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001514:	4b3f      	ldr	r3, [pc, #252]	; (8001614 <MX_FSMC_Init+0x158>)
 8001516:	2200      	movs	r2, #0
 8001518:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800151a:	4b3e      	ldr	r3, [pc, #248]	; (8001614 <MX_FSMC_Init+0x158>)
 800151c:	2200      	movs	r2, #0
 800151e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001520:	4b3c      	ldr	r3, [pc, #240]	; (8001614 <MX_FSMC_Init+0x158>)
 8001522:	2200      	movs	r2, #0
 8001524:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001526:	4b3b      	ldr	r3, [pc, #236]	; (8001614 <MX_FSMC_Init+0x158>)
 8001528:	2200      	movs	r2, #0
 800152a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800152c:	4b39      	ldr	r3, [pc, #228]	; (8001614 <MX_FSMC_Init+0x158>)
 800152e:	2200      	movs	r2, #0
 8001530:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001532:	4b38      	ldr	r3, [pc, #224]	; (8001614 <MX_FSMC_Init+0x158>)
 8001534:	2200      	movs	r2, #0
 8001536:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001538:	4b36      	ldr	r3, [pc, #216]	; (8001614 <MX_FSMC_Init+0x158>)
 800153a:	2200      	movs	r2, #0
 800153c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800153e:	230f      	movs	r3, #15
 8001540:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001542:	230f      	movs	r3, #15
 8001544:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001546:	23ff      	movs	r3, #255	; 0xff
 8001548:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800154a:	230f      	movs	r3, #15
 800154c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800154e:	2310      	movs	r3, #16
 8001550:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001552:	2311      	movs	r3, #17
 8001554:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2200      	movs	r2, #0
 800155e:	4619      	mov	r1, r3
 8001560:	482c      	ldr	r0, [pc, #176]	; (8001614 <MX_FSMC_Init+0x158>)
 8001562:	f008 fa3b 	bl	80099dc <HAL_SRAM_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 800156c:	f000 f8f4 	bl	8001758 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8001570:	4b2a      	ldr	r3, [pc, #168]	; (800161c <MX_FSMC_Init+0x160>)
 8001572:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001576:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001578:	4b28      	ldr	r3, [pc, #160]	; (800161c <MX_FSMC_Init+0x160>)
 800157a:	4a27      	ldr	r2, [pc, #156]	; (8001618 <MX_FSMC_Init+0x15c>)
 800157c:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 800157e:	4b27      	ldr	r3, [pc, #156]	; (800161c <MX_FSMC_Init+0x160>)
 8001580:	2204      	movs	r2, #4
 8001582:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001584:	4b25      	ldr	r3, [pc, #148]	; (800161c <MX_FSMC_Init+0x160>)
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800158a:	4b24      	ldr	r3, [pc, #144]	; (800161c <MX_FSMC_Init+0x160>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001590:	4b22      	ldr	r3, [pc, #136]	; (800161c <MX_FSMC_Init+0x160>)
 8001592:	2210      	movs	r2, #16
 8001594:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001596:	4b21      	ldr	r3, [pc, #132]	; (800161c <MX_FSMC_Init+0x160>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800159c:	4b1f      	ldr	r3, [pc, #124]	; (800161c <MX_FSMC_Init+0x160>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80015a2:	4b1e      	ldr	r3, [pc, #120]	; (800161c <MX_FSMC_Init+0x160>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80015a8:	4b1c      	ldr	r3, [pc, #112]	; (800161c <MX_FSMC_Init+0x160>)
 80015aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015ae:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80015b0:	4b1a      	ldr	r3, [pc, #104]	; (800161c <MX_FSMC_Init+0x160>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80015b6:	4b19      	ldr	r3, [pc, #100]	; (800161c <MX_FSMC_Init+0x160>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80015bc:	4b17      	ldr	r3, [pc, #92]	; (800161c <MX_FSMC_Init+0x160>)
 80015be:	2200      	movs	r2, #0
 80015c0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <MX_FSMC_Init+0x160>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80015c8:	4b14      	ldr	r3, [pc, #80]	; (800161c <MX_FSMC_Init+0x160>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <MX_FSMC_Init+0x160>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <MX_FSMC_Init+0x160>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80015da:	230f      	movs	r3, #15
 80015dc:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80015de:	230f      	movs	r3, #15
 80015e0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80015e2:	23ff      	movs	r3, #255	; 0xff
 80015e4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80015e6:	230f      	movs	r3, #15
 80015e8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80015ea:	2310      	movs	r3, #16
 80015ec:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80015ee:	2311      	movs	r3, #17
 80015f0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	2200      	movs	r2, #0
 80015fa:	4619      	mov	r1, r3
 80015fc:	4807      	ldr	r0, [pc, #28]	; (800161c <MX_FSMC_Init+0x160>)
 80015fe:	f008 f9ed 	bl	80099dc <HAL_SRAM_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_FSMC_Init+0x150>
  {
    Error_Handler( );
 8001608:	f000 f8a6 	bl	8001758 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800160c:	bf00      	nop
 800160e:	3720      	adds	r7, #32
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	2003d734 	.word	0x2003d734
 8001618:	a0000104 	.word	0xa0000104
 800161c:	2003d874 	.word	0x2003d874

08001620 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001628:	f012 fa88 	bl	8013b3c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 800162c:	2108      	movs	r1, #8
 800162e:	4804      	ldr	r0, [pc, #16]	; (8001640 <StartBlink01+0x20>)
 8001630:	f003 fc73 	bl	8004f1a <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8001634:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001638:	f00f fc28 	bl	8010e8c <osDelay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 800163c:	e7f6      	b.n	800162c <StartBlink01+0xc>
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000

08001644 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 800164c:	2120      	movs	r1, #32
 800164e:	4804      	ldr	r0, [pc, #16]	; (8001660 <StartBlink02+0x1c>)
 8001650:	f003 fc63 	bl	8004f1a <HAL_GPIO_TogglePin>
	  osDelay(500);
 8001654:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001658:	f00f fc18 	bl	8010e8c <osDelay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 800165c:	e7f6      	b.n	800164c <StartBlink02+0x8>
 800165e:	bf00      	nop
 8001660:	40020800 	.word	0x40020800

08001664 <StartButtonPoll>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonPoll */
void StartButtonPoll(void *argument)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonPoll */
  /* Infinite loop */
  for(;;)
  {
	  bool buttonCurrent = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800166c:	2101      	movs	r1, #1
 800166e:	4813      	ldr	r0, [pc, #76]	; (80016bc <StartButtonPoll+0x58>)
 8001670:	f003 fc22 	bl	8004eb8 <HAL_GPIO_ReadPin>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	bf14      	ite	ne
 800167a:	2301      	movne	r3, #1
 800167c:	2300      	moveq	r3, #0
 800167e:	73fb      	strb	r3, [r7, #15]
	  if(buttonCurrent && !prevState) {
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d012      	beq.n	80016ac <StartButtonPoll+0x48>
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <StartButtonPoll+0x5c>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	f083 0301 	eor.w	r3, r3, #1
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00b      	beq.n	80016ac <StartButtonPoll+0x48>
		  counter = (counter+1)%ubNumberOfFiles;
 8001694:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <StartButtonPoll+0x60>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	3301      	adds	r3, #1
 800169a:	4a0b      	ldr	r2, [pc, #44]	; (80016c8 <StartButtonPoll+0x64>)
 800169c:	7812      	ldrb	r2, [r2, #0]
 800169e:	fbb3 f1f2 	udiv	r1, r3, r2
 80016a2:	fb02 f201 	mul.w	r2, r2, r1
 80016a6:	1a9b      	subs	r3, r3, r2
 80016a8:	4a06      	ldr	r2, [pc, #24]	; (80016c4 <StartButtonPoll+0x60>)
 80016aa:	6013      	str	r3, [r2, #0]
	  }
	  prevState = buttonCurrent;
 80016ac:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <StartButtonPoll+0x5c>)
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	7013      	strb	r3, [r2, #0]
	  osDelay(50);
 80016b2:	2032      	movs	r0, #50	; 0x32
 80016b4:	f00f fbea 	bl	8010e8c <osDelay>
  {
 80016b8:	e7d8      	b.n	800166c <StartButtonPoll+0x8>
 80016ba:	bf00      	nop
 80016bc:	40020000 	.word	0x40020000
 80016c0:	2000011e 	.word	0x2000011e
 80016c4:	20000118 	.word	0x20000118
 80016c8:	20000110 	.word	0x20000110

080016cc <StartDisplayImage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayImage */
void StartDisplayImage(void *argument)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
		//FreeRtos tasks happen then get the specific uwInternelBuffer for the counter to avoid the hard faults
		//i.e.: I can use what is done in the example project basically to get the uwInternelBuffer for each image, then
		//have an array of structs (like what is done in the image processing by BenV and Joshua) with a counter value and a buffer value.
		//I can have the array initialized to have the MAX_BMP_FILES value and send in the buffer values when they are received. as well as the counter value.
		//Then, I can simply draw the bitmap for the struct array of counter!
		if (counter != count)
 80016d4:	4b13      	ldr	r3, [pc, #76]	; (8001724 <StartDisplayImage+0x58>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b13      	ldr	r3, [pc, #76]	; (8001728 <StartDisplayImage+0x5c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d01b      	beq.n	800171a <StartDisplayImage+0x4e>
		{
			BSP_LCD_Clear(LCD_COLOR_WHITE);
 80016e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80016e6:	f001 fd53 	bl	8003190 <BSP_LCD_Clear>
			BSP_LCD_DrawBitmap(0, 0, bufferArray[counter].uwInternelBuffer);
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <StartDisplayImage+0x5c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016f2:	fb02 f303 	mul.w	r3, r2, r3
 80016f6:	4a0d      	ldr	r2, [pc, #52]	; (800172c <StartDisplayImage+0x60>)
 80016f8:	4413      	add	r3, r2
 80016fa:	461a      	mov	r2, r3
 80016fc:	2100      	movs	r1, #0
 80016fe:	2000      	movs	r0, #0
 8001700:	f001 fe8e 	bl	8003420 <BSP_LCD_DrawBitmap>
			BSP_LCD_DisplayStringAt(0, 220, (uint8_t*)"No Bitmap files...", CENTER_MODE);
 8001704:	2301      	movs	r3, #1
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <StartDisplayImage+0x64>)
 8001708:	21dc      	movs	r1, #220	; 0xdc
 800170a:	2000      	movs	r0, #0
 800170c:	f001 fda0 	bl	8003250 <BSP_LCD_DisplayStringAt>
			count = counter;
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <StartDisplayImage+0x5c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4b03      	ldr	r3, [pc, #12]	; (8001724 <StartDisplayImage+0x58>)
 8001718:	701a      	strb	r2, [r3, #0]
		}
		osDelay(250);
 800171a:	20fa      	movs	r0, #250	; 0xfa
 800171c:	f00f fbb6 	bl	8010e8c <osDelay>
		if (counter != count)
 8001720:	e7d8      	b.n	80016d4 <StartDisplayImage+0x8>
 8001722:	bf00      	nop
 8001724:	2000011c 	.word	0x2000011c
 8001728:	20000118 	.word	0x20000118
 800172c:	20005264 	.word	0x20005264
 8001730:	08014a60 	.word	0x08014a60

08001734 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a04      	ldr	r2, [pc, #16]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d101      	bne.n	800174a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001746:	f002 f9d7 	bl	8003af8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40001000 	.word	0x40001000

08001758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <HAL_MspInit+0x4c>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	4a0f      	ldr	r2, [pc, #60]	; (80017b4 <HAL_MspInit+0x4c>)
 8001778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800177c:	6453      	str	r3, [r2, #68]	; 0x44
 800177e:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <HAL_MspInit+0x4c>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	603b      	str	r3, [r7, #0]
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_MspInit+0x4c>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <HAL_MspInit+0x4c>)
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001798:	6413      	str	r3, [r2, #64]	; 0x40
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_MspInit+0x4c>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800

080017b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08c      	sub	sp, #48	; 0x30
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 031c 	add.w	r3, r7, #28
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a31      	ldr	r2, [pc, #196]	; (800189c <HAL_ADC_MspInit+0xe4>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d15b      	bne.n	8001892 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	61bb      	str	r3, [r7, #24]
 80017de:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <HAL_ADC_MspInit+0xe8>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	4a2f      	ldr	r2, [pc, #188]	; (80018a0 <HAL_ADC_MspInit+0xe8>)
 80017e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ea:	4b2d      	ldr	r3, [pc, #180]	; (80018a0 <HAL_ADC_MspInit+0xe8>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f2:	61bb      	str	r3, [r7, #24]
 80017f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <HAL_ADC_MspInit+0xe8>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a28      	ldr	r2, [pc, #160]	; (80018a0 <HAL_ADC_MspInit+0xe8>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <HAL_ADC_MspInit+0xe8>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <HAL_ADC_MspInit+0xe8>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a21      	ldr	r2, [pc, #132]	; (80018a0 <HAL_ADC_MspInit+0xe8>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <HAL_ADC_MspInit+0xe8>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <HAL_ADC_MspInit+0xe8>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a1a      	ldr	r2, [pc, #104]	; (80018a0 <HAL_ADC_MspInit+0xe8>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <HAL_ADC_MspInit+0xe8>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 800184a:	2311      	movs	r3, #17
 800184c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800184e:	2303      	movs	r3, #3
 8001850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001856:	f107 031c 	add.w	r3, r7, #28
 800185a:	4619      	mov	r1, r3
 800185c:	4811      	ldr	r0, [pc, #68]	; (80018a4 <HAL_ADC_MspInit+0xec>)
 800185e:	f003 f999 	bl	8004b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 8001862:	2326      	movs	r3, #38	; 0x26
 8001864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001866:	2303      	movs	r3, #3
 8001868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 031c 	add.w	r3, r7, #28
 8001872:	4619      	mov	r1, r3
 8001874:	480c      	ldr	r0, [pc, #48]	; (80018a8 <HAL_ADC_MspInit+0xf0>)
 8001876:	f003 f98d 	bl	8004b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 800187a:	2302      	movs	r3, #2
 800187c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800187e:	2303      	movs	r3, #3
 8001880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 8001886:	f107 031c 	add.w	r3, r7, #28
 800188a:	4619      	mov	r1, r3
 800188c:	4807      	ldr	r0, [pc, #28]	; (80018ac <HAL_ADC_MspInit+0xf4>)
 800188e:	f003 f981 	bl	8004b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001892:	bf00      	nop
 8001894:	3730      	adds	r7, #48	; 0x30
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40012000 	.word	0x40012000
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40020800 	.word	0x40020800
 80018a8:	40020000 	.word	0x40020000
 80018ac:	40020400 	.word	0x40020400

080018b0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	; 0x28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a1b      	ldr	r2, [pc, #108]	; (800193c <HAL_DAC_MspInit+0x8c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d12f      	bne.n	8001932 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <HAL_DAC_MspInit+0x90>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	4a19      	ldr	r2, [pc, #100]	; (8001940 <HAL_DAC_MspInit+0x90>)
 80018dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80018e0:	6413      	str	r3, [r2, #64]	; 0x40
 80018e2:	4b17      	ldr	r3, [pc, #92]	; (8001940 <HAL_DAC_MspInit+0x90>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	4b13      	ldr	r3, [pc, #76]	; (8001940 <HAL_DAC_MspInit+0x90>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a12      	ldr	r2, [pc, #72]	; (8001940 <HAL_DAC_MspInit+0x90>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <HAL_DAC_MspInit+0x90>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 800190a:	2310      	movs	r3, #16
 800190c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800190e:	2303      	movs	r3, #3
 8001910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	4619      	mov	r1, r3
 800191c:	4809      	ldr	r0, [pc, #36]	; (8001944 <HAL_DAC_MspInit+0x94>)
 800191e:	f003 f939 	bl	8004b94 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	2100      	movs	r1, #0
 8001926:	2036      	movs	r0, #54	; 0x36
 8001928:	f002 fc52 	bl	80041d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800192c:	2036      	movs	r0, #54	; 0x36
 800192e:	f002 fc6b 	bl	8004208 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001932:	bf00      	nop
 8001934:	3728      	adds	r7, #40	; 0x28
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40007400 	.word	0x40007400
 8001940:	40023800 	.word	0x40023800
 8001944:	40020000 	.word	0x40020000

08001948 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08e      	sub	sp, #56	; 0x38
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a77      	ldr	r2, [pc, #476]	; (8001b44 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d00e      	beq.n	8001988 <HAL_DFSDM_ChannelMspInit+0x40>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a76      	ldr	r2, [pc, #472]	; (8001b48 <HAL_DFSDM_ChannelMspInit+0x200>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d009      	beq.n	8001988 <HAL_DFSDM_ChannelMspInit+0x40>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a74      	ldr	r2, [pc, #464]	; (8001b4c <HAL_DFSDM_ChannelMspInit+0x204>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d004      	beq.n	8001988 <HAL_DFSDM_ChannelMspInit+0x40>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a73      	ldr	r2, [pc, #460]	; (8001b50 <HAL_DFSDM_ChannelMspInit+0x208>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d154      	bne.n	8001a32 <HAL_DFSDM_ChannelMspInit+0xea>
 8001988:	4b72      	ldr	r3, [pc, #456]	; (8001b54 <HAL_DFSDM_ChannelMspInit+0x20c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d150      	bne.n	8001a32 <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001990:	2300      	movs	r3, #0
 8001992:	623b      	str	r3, [r7, #32]
 8001994:	4b70      	ldr	r3, [pc, #448]	; (8001b58 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001998:	4a6f      	ldr	r2, [pc, #444]	; (8001b58 <HAL_DFSDM_ChannelMspInit+0x210>)
 800199a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800199e:	6453      	str	r3, [r2, #68]	; 0x44
 80019a0:	4b6d      	ldr	r3, [pc, #436]	; (8001b58 <HAL_DFSDM_ChannelMspInit+0x210>)
 80019a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019a8:	623b      	str	r3, [r7, #32]
 80019aa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
 80019b0:	4b69      	ldr	r3, [pc, #420]	; (8001b58 <HAL_DFSDM_ChannelMspInit+0x210>)
 80019b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b4:	4a68      	ldr	r2, [pc, #416]	; (8001b58 <HAL_DFSDM_ChannelMspInit+0x210>)
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	6313      	str	r3, [r2, #48]	; 0x30
 80019bc:	4b66      	ldr	r3, [pc, #408]	; (8001b58 <HAL_DFSDM_ChannelMspInit+0x210>)
 80019be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	61fb      	str	r3, [r7, #28]
 80019c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019c8:	2300      	movs	r3, #0
 80019ca:	61bb      	str	r3, [r7, #24]
 80019cc:	4b62      	ldr	r3, [pc, #392]	; (8001b58 <HAL_DFSDM_ChannelMspInit+0x210>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	4a61      	ldr	r2, [pc, #388]	; (8001b58 <HAL_DFSDM_ChannelMspInit+0x210>)
 80019d2:	f043 0308 	orr.w	r3, r3, #8
 80019d6:	6313      	str	r3, [r2, #48]	; 0x30
 80019d8:	4b5f      	ldr	r3, [pc, #380]	; (8001b58 <HAL_DFSDM_ChannelMspInit+0x210>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	61bb      	str	r3, [r7, #24]
 80019e2:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 80019e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f2:	2300      	movs	r3, #0
 80019f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80019f6:	2306      	movs	r3, #6
 80019f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80019fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fe:	4619      	mov	r1, r3
 8001a00:	4856      	ldr	r0, [pc, #344]	; (8001b5c <HAL_DFSDM_ChannelMspInit+0x214>)
 8001a02:	f003 f8c7 	bl	8004b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8001a06:	2340      	movs	r3, #64	; 0x40
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001a16:	2306      	movs	r3, #6
 8001a18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a1e:	4619      	mov	r1, r3
 8001a20:	484f      	ldr	r0, [pc, #316]	; (8001b60 <HAL_DFSDM_ChannelMspInit+0x218>)
 8001a22:	f003 f8b7 	bl	8004b94 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001a26:	4b4b      	ldr	r3, [pc, #300]	; (8001b54 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	4a49      	ldr	r2, [pc, #292]	; (8001b54 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001a2e:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 8001a30:	e084      	b.n	8001b3c <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a43      	ldr	r2, [pc, #268]	; (8001b44 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d07f      	beq.n	8001b3c <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a41      	ldr	r2, [pc, #260]	; (8001b48 <HAL_DFSDM_ChannelMspInit+0x200>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d07a      	beq.n	8001b3c <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a40      	ldr	r2, [pc, #256]	; (8001b4c <HAL_DFSDM_ChannelMspInit+0x204>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d075      	beq.n	8001b3c <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a3e      	ldr	r2, [pc, #248]	; (8001b50 <HAL_DFSDM_ChannelMspInit+0x208>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d070      	beq.n	8001b3c <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001a5a:	4b42      	ldr	r3, [pc, #264]	; (8001b64 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d16c      	bne.n	8001b3c <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	4b3c      	ldr	r3, [pc, #240]	; (8001b58 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	4a3b      	ldr	r2, [pc, #236]	; (8001b58 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001a6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a70:	6453      	str	r3, [r2, #68]	; 0x44
 8001a72:	4b39      	ldr	r3, [pc, #228]	; (8001b58 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	4b35      	ldr	r3, [pc, #212]	; (8001b58 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a34      	ldr	r2, [pc, #208]	; (8001b58 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b32      	ldr	r3, [pc, #200]	; (8001b58 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	4b2e      	ldr	r3, [pc, #184]	; (8001b58 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a2d      	ldr	r2, [pc, #180]	; (8001b58 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001aa4:	f043 0308 	orr.w	r3, r3, #8
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b2b      	ldr	r3, [pc, #172]	; (8001b58 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	4b27      	ldr	r3, [pc, #156]	; (8001b58 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a26      	ldr	r2, [pc, #152]	; (8001b58 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001ac0:	f043 0302 	orr.w	r3, r3, #2
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8001ae2:	2307      	movs	r3, #7
 8001ae4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aea:	4619      	mov	r1, r3
 8001aec:	481b      	ldr	r0, [pc, #108]	; (8001b5c <HAL_DFSDM_ChannelMspInit+0x214>)
 8001aee:	f003 f851 	bl	8004b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8001af2:	2304      	movs	r3, #4
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8001b02:	2303      	movs	r3, #3
 8001b04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4814      	ldr	r0, [pc, #80]	; (8001b60 <HAL_DFSDM_ChannelMspInit+0x218>)
 8001b0e:	f003 f841 	bl	8004b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8001b12:	2380      	movs	r3, #128	; 0x80
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8001b22:	2306      	movs	r3, #6
 8001b24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8001b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	480e      	ldr	r0, [pc, #56]	; (8001b68 <HAL_DFSDM_ChannelMspInit+0x220>)
 8001b2e:	f003 f831 	bl	8004b94 <HAL_GPIO_Init>
  DFSDM2_Init++;
 8001b32:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	3301      	adds	r3, #1
 8001b38:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001b3a:	6013      	str	r3, [r2, #0]
}
 8001b3c:	bf00      	nop
 8001b3e:	3738      	adds	r7, #56	; 0x38
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40016000 	.word	0x40016000
 8001b48:	40016020 	.word	0x40016020
 8001b4c:	40016040 	.word	0x40016040
 8001b50:	40016060 	.word	0x40016060
 8001b54:	20000120 	.word	0x20000120
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40020000 	.word	0x40020000
 8001b60:	40020c00 	.word	0x40020c00
 8001b64:	20000124 	.word	0x20000124
 8001b68:	40020400 	.word	0x40020400

08001b6c <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	; 0x28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a19      	ldr	r2, [pc, #100]	; (8001bf0 <HAL_FMPI2C_MspInit+0x84>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d12b      	bne.n	8001be6 <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <HAL_FMPI2C_MspInit+0x88>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	4a17      	ldr	r2, [pc, #92]	; (8001bf4 <HAL_FMPI2C_MspInit+0x88>)
 8001b98:	f043 0304 	orr.w	r3, r3, #4
 8001b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_FMPI2C_MspInit+0x88>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 8001baa:	23c0      	movs	r3, #192	; 0xc0
 8001bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bae:	2312      	movs	r3, #18
 8001bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8001bba:	2304      	movs	r3, #4
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	480c      	ldr	r0, [pc, #48]	; (8001bf8 <HAL_FMPI2C_MspInit+0x8c>)
 8001bc6:	f002 ffe5 	bl	8004b94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_FMPI2C_MspInit+0x88>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	4a08      	ldr	r2, [pc, #32]	; (8001bf4 <HAL_FMPI2C_MspInit+0x88>)
 8001bd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_FMPI2C_MspInit+0x88>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8001be6:	bf00      	nop
 8001be8:	3728      	adds	r7, #40	; 0x28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40006000 	.word	0x40006000
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020800 	.word	0x40020800

08001bfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	; 0x28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a19      	ldr	r2, [pc, #100]	; (8001c80 <HAL_I2C_MspInit+0x84>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d12c      	bne.n	8001c78 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <HAL_I2C_MspInit+0x88>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a17      	ldr	r2, [pc, #92]	; (8001c84 <HAL_I2C_MspInit+0x88>)
 8001c28:	f043 0302 	orr.w	r3, r3, #2
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_I2C_MspInit+0x88>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001c3a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c40:	2312      	movs	r3, #18
 8001c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c44:	2301      	movs	r3, #1
 8001c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	4619      	mov	r1, r3
 8001c56:	480c      	ldr	r0, [pc, #48]	; (8001c88 <HAL_I2C_MspInit+0x8c>)
 8001c58:	f002 ff9c 	bl	8004b94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <HAL_I2C_MspInit+0x88>)
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <HAL_I2C_MspInit+0x88>)
 8001c66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_I2C_MspInit+0x88>)
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c78:	bf00      	nop
 8001c7a:	3728      	adds	r7, #40	; 0x28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40005800 	.word	0x40005800
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40020400 	.word	0x40020400

08001c8c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08c      	sub	sp, #48	; 0x30
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 031c 	add.w	r3, r7, #28
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a4f      	ldr	r2, [pc, #316]	; (8001de8 <HAL_I2S_MspInit+0x15c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	f040 8097 	bne.w	8001dde <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	4b4d      	ldr	r3, [pc, #308]	; (8001dec <HAL_I2S_MspInit+0x160>)
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	4a4c      	ldr	r2, [pc, #304]	; (8001dec <HAL_I2S_MspInit+0x160>)
 8001cba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc0:	4b4a      	ldr	r3, [pc, #296]	; (8001dec <HAL_I2S_MspInit+0x160>)
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc8:	61bb      	str	r3, [r7, #24]
 8001cca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	4b46      	ldr	r3, [pc, #280]	; (8001dec <HAL_I2S_MspInit+0x160>)
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd4:	4a45      	ldr	r2, [pc, #276]	; (8001dec <HAL_I2S_MspInit+0x160>)
 8001cd6:	f043 0304 	orr.w	r3, r3, #4
 8001cda:	6313      	str	r3, [r2, #48]	; 0x30
 8001cdc:	4b43      	ldr	r3, [pc, #268]	; (8001dec <HAL_I2S_MspInit+0x160>)
 8001cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce8:	2300      	movs	r3, #0
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	4b3f      	ldr	r3, [pc, #252]	; (8001dec <HAL_I2S_MspInit+0x160>)
 8001cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf0:	4a3e      	ldr	r2, [pc, #248]	; (8001dec <HAL_I2S_MspInit+0x160>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf8:	4b3c      	ldr	r3, [pc, #240]	; (8001dec <HAL_I2S_MspInit+0x160>)
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	4b38      	ldr	r3, [pc, #224]	; (8001dec <HAL_I2S_MspInit+0x160>)
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0c:	4a37      	ldr	r2, [pc, #220]	; (8001dec <HAL_I2S_MspInit+0x160>)
 8001d0e:	f043 0308 	orr.w	r3, r3, #8
 8001d12:	6313      	str	r3, [r2, #48]	; 0x30
 8001d14:	4b35      	ldr	r3, [pc, #212]	; (8001dec <HAL_I2S_MspInit+0x160>)
 8001d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d20:	2300      	movs	r3, #0
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	4b31      	ldr	r3, [pc, #196]	; (8001dec <HAL_I2S_MspInit+0x160>)
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	4a30      	ldr	r2, [pc, #192]	; (8001dec <HAL_I2S_MspInit+0x160>)
 8001d2a:	f043 0302 	orr.w	r3, r3, #2
 8001d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d30:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <HAL_I2S_MspInit+0x160>)
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8001d4c:	2306      	movs	r3, #6
 8001d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8001d50:	f107 031c 	add.w	r3, r7, #28
 8001d54:	4619      	mov	r1, r3
 8001d56:	4826      	ldr	r0, [pc, #152]	; (8001df0 <HAL_I2S_MspInit+0x164>)
 8001d58:	f002 ff1c 	bl	8004b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8001d5c:	2308      	movs	r3, #8
 8001d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d60:	2302      	movs	r3, #2
 8001d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d6c:	2305      	movs	r3, #5
 8001d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8001d70:	f107 031c 	add.w	r3, r7, #28
 8001d74:	4619      	mov	r1, r3
 8001d76:	481e      	ldr	r0, [pc, #120]	; (8001df0 <HAL_I2S_MspInit+0x164>)
 8001d78:	f002 ff0c 	bl	8004b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8001d7c:	2308      	movs	r3, #8
 8001d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d80:	2302      	movs	r3, #2
 8001d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d8c:	2305      	movs	r3, #5
 8001d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8001d90:	f107 031c 	add.w	r3, r7, #28
 8001d94:	4619      	mov	r1, r3
 8001d96:	4817      	ldr	r0, [pc, #92]	; (8001df4 <HAL_I2S_MspInit+0x168>)
 8001d98:	f002 fefc 	bl	8004b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8001d9c:	2308      	movs	r3, #8
 8001d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da8:	2300      	movs	r3, #0
 8001daa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001dac:	2305      	movs	r3, #5
 8001dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8001db0:	f107 031c 	add.w	r3, r7, #28
 8001db4:	4619      	mov	r1, r3
 8001db6:	4810      	ldr	r0, [pc, #64]	; (8001df8 <HAL_I2S_MspInit+0x16c>)
 8001db8:	f002 feec 	bl	8004b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 8001dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001dce:	2305      	movs	r3, #5
 8001dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 8001dd2:	f107 031c 	add.w	r3, r7, #28
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4808      	ldr	r0, [pc, #32]	; (8001dfc <HAL_I2S_MspInit+0x170>)
 8001dda:	f002 fedb 	bl	8004b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001dde:	bf00      	nop
 8001de0:	3730      	adds	r7, #48	; 0x30
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40003800 	.word	0x40003800
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40020800 	.word	0x40020800
 8001df4:	40020000 	.word	0x40020000
 8001df8:	40020c00 	.word	0x40020c00
 8001dfc:	40020400 	.word	0x40020400

08001e00 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08e      	sub	sp, #56	; 0x38
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a56      	ldr	r2, [pc, #344]	; (8001f78 <HAL_QSPI_MspInit+0x178>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	f040 80a6 	bne.w	8001f70 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001e24:	2300      	movs	r3, #0
 8001e26:	623b      	str	r3, [r7, #32]
 8001e28:	4b54      	ldr	r3, [pc, #336]	; (8001f7c <HAL_QSPI_MspInit+0x17c>)
 8001e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2c:	4a53      	ldr	r2, [pc, #332]	; (8001f7c <HAL_QSPI_MspInit+0x17c>)
 8001e2e:	f043 0302 	orr.w	r3, r3, #2
 8001e32:	6393      	str	r3, [r2, #56]	; 0x38
 8001e34:	4b51      	ldr	r3, [pc, #324]	; (8001f7c <HAL_QSPI_MspInit+0x17c>)
 8001e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	623b      	str	r3, [r7, #32]
 8001e3e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
 8001e44:	4b4d      	ldr	r3, [pc, #308]	; (8001f7c <HAL_QSPI_MspInit+0x17c>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	4a4c      	ldr	r2, [pc, #304]	; (8001f7c <HAL_QSPI_MspInit+0x17c>)
 8001e4a:	f043 0310 	orr.w	r3, r3, #16
 8001e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e50:	4b4a      	ldr	r3, [pc, #296]	; (8001f7c <HAL_QSPI_MspInit+0x17c>)
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	f003 0310 	and.w	r3, r3, #16
 8001e58:	61fb      	str	r3, [r7, #28]
 8001e5a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61bb      	str	r3, [r7, #24]
 8001e60:	4b46      	ldr	r3, [pc, #280]	; (8001f7c <HAL_QSPI_MspInit+0x17c>)
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	4a45      	ldr	r2, [pc, #276]	; (8001f7c <HAL_QSPI_MspInit+0x17c>)
 8001e66:	f043 0320 	orr.w	r3, r3, #32
 8001e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6c:	4b43      	ldr	r3, [pc, #268]	; (8001f7c <HAL_QSPI_MspInit+0x17c>)
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e70:	f003 0320 	and.w	r3, r3, #32
 8001e74:	61bb      	str	r3, [r7, #24]
 8001e76:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	4b3f      	ldr	r3, [pc, #252]	; (8001f7c <HAL_QSPI_MspInit+0x17c>)
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	4a3e      	ldr	r2, [pc, #248]	; (8001f7c <HAL_QSPI_MspInit+0x17c>)
 8001e82:	f043 0302 	orr.w	r3, r3, #2
 8001e86:	6313      	str	r3, [r2, #48]	; 0x30
 8001e88:	4b3c      	ldr	r3, [pc, #240]	; (8001f7c <HAL_QSPI_MspInit+0x17c>)
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e94:	2300      	movs	r3, #0
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	4b38      	ldr	r3, [pc, #224]	; (8001f7c <HAL_QSPI_MspInit+0x17c>)
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	4a37      	ldr	r2, [pc, #220]	; (8001f7c <HAL_QSPI_MspInit+0x17c>)
 8001e9e:	f043 0308 	orr.w	r3, r3, #8
 8001ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea4:	4b35      	ldr	r3, [pc, #212]	; (8001f7c <HAL_QSPI_MspInit+0x17c>)
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	4b31      	ldr	r3, [pc, #196]	; (8001f7c <HAL_QSPI_MspInit+0x17c>)
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	4a30      	ldr	r2, [pc, #192]	; (8001f7c <HAL_QSPI_MspInit+0x17c>)
 8001eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec0:	4b2e      	ldr	r3, [pc, #184]	; (8001f7c <HAL_QSPI_MspInit+0x17c>)
 8001ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8001ecc:	2304      	movs	r3, #4
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001edc:	2309      	movs	r3, #9
 8001ede:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4826      	ldr	r0, [pc, #152]	; (8001f80 <HAL_QSPI_MspInit+0x180>)
 8001ee8:	f002 fe54 	bl	8004b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001eec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efa:	2303      	movs	r3, #3
 8001efc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001efe:	230a      	movs	r3, #10
 8001f00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f06:	4619      	mov	r1, r3
 8001f08:	481e      	ldr	r0, [pc, #120]	; (8001f84 <HAL_QSPI_MspInit+0x184>)
 8001f0a:	f002 fe43 	bl	8004b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001f0e:	2304      	movs	r3, #4
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001f1e:	2309      	movs	r3, #9
 8001f20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f26:	4619      	mov	r1, r3
 8001f28:	4817      	ldr	r0, [pc, #92]	; (8001f88 <HAL_QSPI_MspInit+0x188>)
 8001f2a:	f002 fe33 	bl	8004b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 8001f2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001f40:	2309      	movs	r3, #9
 8001f42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8001f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4810      	ldr	r0, [pc, #64]	; (8001f8c <HAL_QSPI_MspInit+0x18c>)
 8001f4c:	f002 fe22 	bl	8004b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001f50:	2340      	movs	r3, #64	; 0x40
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f54:	2302      	movs	r3, #2
 8001f56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f60:	230a      	movs	r3, #10
 8001f62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4809      	ldr	r0, [pc, #36]	; (8001f90 <HAL_QSPI_MspInit+0x190>)
 8001f6c:	f002 fe12 	bl	8004b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001f70:	bf00      	nop
 8001f72:	3738      	adds	r7, #56	; 0x38
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	a0001000 	.word	0xa0001000
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40021400 	.word	0x40021400
 8001f88:	40020400 	.word	0x40020400
 8001f8c:	40020c00 	.word	0x40020c00
 8001f90:	40021800 	.word	0x40021800

08001f94 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08a      	sub	sp, #40	; 0x28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a28      	ldr	r2, [pc, #160]	; (8002054 <HAL_SD_MspInit+0xc0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d14a      	bne.n	800204c <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	4b27      	ldr	r3, [pc, #156]	; (8002058 <HAL_SD_MspInit+0xc4>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	4a26      	ldr	r2, [pc, #152]	; (8002058 <HAL_SD_MspInit+0xc4>)
 8001fc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc6:	4b24      	ldr	r3, [pc, #144]	; (8002058 <HAL_SD_MspInit+0xc4>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	4b20      	ldr	r3, [pc, #128]	; (8002058 <HAL_SD_MspInit+0xc4>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a1f      	ldr	r2, [pc, #124]	; (8002058 <HAL_SD_MspInit+0xc4>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b1d      	ldr	r3, [pc, #116]	; (8002058 <HAL_SD_MspInit+0xc4>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	4b19      	ldr	r3, [pc, #100]	; (8002058 <HAL_SD_MspInit+0xc4>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	4a18      	ldr	r2, [pc, #96]	; (8002058 <HAL_SD_MspInit+0xc4>)
 8001ff8:	f043 0304 	orr.w	r3, r3, #4
 8001ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffe:	4b16      	ldr	r3, [pc, #88]	; (8002058 <HAL_SD_MspInit+0xc4>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 800200a:	2340      	movs	r3, #64	; 0x40
 800200c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200e:	2302      	movs	r3, #2
 8002010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002016:	2303      	movs	r3, #3
 8002018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800201a:	230c      	movs	r3, #12
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 800201e:	f107 0314 	add.w	r3, r7, #20
 8002022:	4619      	mov	r1, r3
 8002024:	480d      	ldr	r0, [pc, #52]	; (800205c <HAL_SD_MspInit+0xc8>)
 8002026:	f002 fdb5 	bl	8004b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 800202a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800202e:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002030:	2302      	movs	r3, #2
 8002032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002038:	2303      	movs	r3, #3
 800203a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800203c:	230c      	movs	r3, #12
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	4619      	mov	r1, r3
 8002046:	4806      	ldr	r0, [pc, #24]	; (8002060 <HAL_SD_MspInit+0xcc>)
 8002048:	f002 fda4 	bl	8004b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800204c:	bf00      	nop
 800204e:	3728      	adds	r7, #40	; 0x28
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40012c00 	.word	0x40012c00
 8002058:	40023800 	.word	0x40023800
 800205c:	40020000 	.word	0x40020000
 8002060:	40020800 	.word	0x40020800

08002064 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08c      	sub	sp, #48	; 0x30
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 031c 	add.w	r3, r7, #28
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a33      	ldr	r2, [pc, #204]	; (8002150 <HAL_UART_MspInit+0xec>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d12d      	bne.n	80020e2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	4b32      	ldr	r3, [pc, #200]	; (8002154 <HAL_UART_MspInit+0xf0>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	4a31      	ldr	r2, [pc, #196]	; (8002154 <HAL_UART_MspInit+0xf0>)
 8002090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002094:	6453      	str	r3, [r2, #68]	; 0x44
 8002096:	4b2f      	ldr	r3, [pc, #188]	; (8002154 <HAL_UART_MspInit+0xf0>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209e:	61bb      	str	r3, [r7, #24]
 80020a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	4b2b      	ldr	r3, [pc, #172]	; (8002154 <HAL_UART_MspInit+0xf0>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a2a      	ldr	r2, [pc, #168]	; (8002154 <HAL_UART_MspInit+0xf0>)
 80020ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b28      	ldr	r3, [pc, #160]	; (8002154 <HAL_UART_MspInit+0xf0>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 80020be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80020c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c4:	2302      	movs	r3, #2
 80020c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020c8:	2301      	movs	r3, #1
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020cc:	2303      	movs	r3, #3
 80020ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 80020d0:	230b      	movs	r3, #11
 80020d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020d4:	f107 031c 	add.w	r3, r7, #28
 80020d8:	4619      	mov	r1, r3
 80020da:	481f      	ldr	r0, [pc, #124]	; (8002158 <HAL_UART_MspInit+0xf4>)
 80020dc:	f002 fd5a 	bl	8004b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80020e0:	e031      	b.n	8002146 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a1d      	ldr	r2, [pc, #116]	; (800215c <HAL_UART_MspInit+0xf8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d12c      	bne.n	8002146 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80020ec:	2300      	movs	r3, #0
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	4b18      	ldr	r3, [pc, #96]	; (8002154 <HAL_UART_MspInit+0xf0>)
 80020f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f4:	4a17      	ldr	r2, [pc, #92]	; (8002154 <HAL_UART_MspInit+0xf0>)
 80020f6:	f043 0320 	orr.w	r3, r3, #32
 80020fa:	6453      	str	r3, [r2, #68]	; 0x44
 80020fc:	4b15      	ldr	r3, [pc, #84]	; (8002154 <HAL_UART_MspInit+0xf0>)
 80020fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002100:	f003 0320 	and.w	r3, r3, #32
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <HAL_UART_MspInit+0xf0>)
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	4a10      	ldr	r2, [pc, #64]	; (8002154 <HAL_UART_MspInit+0xf0>)
 8002112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002116:	6313      	str	r3, [r2, #48]	; 0x30
 8002118:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <HAL_UART_MspInit+0xf0>)
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8002124:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212a:	2302      	movs	r3, #2
 800212c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002132:	2303      	movs	r3, #3
 8002134:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002136:	2308      	movs	r3, #8
 8002138:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800213a:	f107 031c 	add.w	r3, r7, #28
 800213e:	4619      	mov	r1, r3
 8002140:	4805      	ldr	r0, [pc, #20]	; (8002158 <HAL_UART_MspInit+0xf4>)
 8002142:	f002 fd27 	bl	8004b94 <HAL_GPIO_Init>
}
 8002146:	bf00      	nop
 8002148:	3730      	adds	r7, #48	; 0x30
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40011c00 	.word	0x40011c00
 8002154:	40023800 	.word	0x40023800
 8002158:	40021800 	.word	0x40021800
 800215c:	40011400 	.word	0x40011400

08002160 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002166:	1d3b      	adds	r3, r7, #4
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002174:	4b2c      	ldr	r3, [pc, #176]	; (8002228 <HAL_FSMC_MspInit+0xc8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d151      	bne.n	8002220 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 800217c:	4b2a      	ldr	r3, [pc, #168]	; (8002228 <HAL_FSMC_MspInit+0xc8>)
 800217e:	2201      	movs	r2, #1
 8002180:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	603b      	str	r3, [r7, #0]
 8002186:	4b29      	ldr	r3, [pc, #164]	; (800222c <HAL_FSMC_MspInit+0xcc>)
 8002188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218a:	4a28      	ldr	r2, [pc, #160]	; (800222c <HAL_FSMC_MspInit+0xcc>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6393      	str	r3, [r2, #56]	; 0x38
 8002192:	4b26      	ldr	r3, [pc, #152]	; (800222c <HAL_FSMC_MspInit+0xcc>)
 8002194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 800219e:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80021a2:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ac:	2303      	movs	r3, #3
 80021ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80021b0:	230c      	movs	r3, #12
 80021b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021b4:	1d3b      	adds	r3, r7, #4
 80021b6:	4619      	mov	r1, r3
 80021b8:	481d      	ldr	r0, [pc, #116]	; (8002230 <HAL_FSMC_MspInit+0xd0>)
 80021ba:	f002 fceb 	bl	8004b94 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 80021be:	f240 433f 	movw	r3, #1087	; 0x43f
 80021c2:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c4:	2302      	movs	r3, #2
 80021c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021cc:	2303      	movs	r3, #3
 80021ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80021d0:	230c      	movs	r3, #12
 80021d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	4619      	mov	r1, r3
 80021d8:	4816      	ldr	r0, [pc, #88]	; (8002234 <HAL_FSMC_MspInit+0xd4>)
 80021da:	f002 fcdb 	bl	8004b94 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 80021de:	f64f 7383 	movw	r3, #65411	; 0xff83
 80021e2:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e4:	2302      	movs	r3, #2
 80021e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ec:	2303      	movs	r3, #3
 80021ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80021f0:	230c      	movs	r3, #12
 80021f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021f4:	1d3b      	adds	r3, r7, #4
 80021f6:	4619      	mov	r1, r3
 80021f8:	480f      	ldr	r0, [pc, #60]	; (8002238 <HAL_FSMC_MspInit+0xd8>)
 80021fa:	f002 fccb 	bl	8004b94 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 80021fe:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8002202:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002204:	2302      	movs	r3, #2
 8002206:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220c:	2303      	movs	r3, #3
 800220e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002210:	230c      	movs	r3, #12
 8002212:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002214:	1d3b      	adds	r3, r7, #4
 8002216:	4619      	mov	r1, r3
 8002218:	4808      	ldr	r0, [pc, #32]	; (800223c <HAL_FSMC_MspInit+0xdc>)
 800221a:	f002 fcbb 	bl	8004b94 <HAL_GPIO_Init>
 800221e:	e000      	b.n	8002222 <HAL_FSMC_MspInit+0xc2>
    return;
 8002220:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000128 	.word	0x20000128
 800222c:	40023800 	.word	0x40023800
 8002230:	40021400 	.word	0x40021400
 8002234:	40021800 	.word	0x40021800
 8002238:	40021000 	.word	0x40021000
 800223c:	40020c00 	.word	0x40020c00

08002240 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002248:	f7ff ff8a 	bl	8002160 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08c      	sub	sp, #48	; 0x30
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002264:	2200      	movs	r2, #0
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	2036      	movs	r0, #54	; 0x36
 800226a:	f001 ffb1 	bl	80041d0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800226e:	2036      	movs	r0, #54	; 0x36
 8002270:	f001 ffca 	bl	8004208 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002274:	2300      	movs	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	4b1e      	ldr	r3, [pc, #120]	; (80022f4 <HAL_InitTick+0xa0>)
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	4a1d      	ldr	r2, [pc, #116]	; (80022f4 <HAL_InitTick+0xa0>)
 800227e:	f043 0310 	orr.w	r3, r3, #16
 8002282:	6413      	str	r3, [r2, #64]	; 0x40
 8002284:	4b1b      	ldr	r3, [pc, #108]	; (80022f4 <HAL_InitTick+0xa0>)
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	f003 0310 	and.w	r3, r3, #16
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002290:	f107 0210 	add.w	r2, r7, #16
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	4611      	mov	r1, r2
 800229a:	4618      	mov	r0, r3
 800229c:	f005 fbd6 	bl	8007a4c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80022a0:	f005 fbac 	bl	80079fc <HAL_RCC_GetPCLK1Freq>
 80022a4:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80022a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a8:	4a13      	ldr	r2, [pc, #76]	; (80022f8 <HAL_InitTick+0xa4>)
 80022aa:	fba2 2303 	umull	r2, r3, r2, r3
 80022ae:	0c9b      	lsrs	r3, r3, #18
 80022b0:	3b01      	subs	r3, #1
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80022b4:	4b11      	ldr	r3, [pc, #68]	; (80022fc <HAL_InitTick+0xa8>)
 80022b6:	4a12      	ldr	r2, [pc, #72]	; (8002300 <HAL_InitTick+0xac>)
 80022b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <HAL_InitTick+0xa8>)
 80022bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022c0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80022c2:	4a0e      	ldr	r2, [pc, #56]	; (80022fc <HAL_InitTick+0xa8>)
 80022c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80022c8:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <HAL_InitTick+0xa8>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ce:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <HAL_InitTick+0xa8>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80022d4:	4809      	ldr	r0, [pc, #36]	; (80022fc <HAL_InitTick+0xa8>)
 80022d6:	f007 fbc5 	bl	8009a64 <HAL_TIM_Base_Init>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d104      	bne.n	80022ea <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80022e0:	4806      	ldr	r0, [pc, #24]	; (80022fc <HAL_InitTick+0xa8>)
 80022e2:	f007 fbf4 	bl	8009ace <HAL_TIM_Base_Start_IT>
 80022e6:	4603      	mov	r3, r0
 80022e8:	e000      	b.n	80022ec <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3730      	adds	r7, #48	; 0x30
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40023800 	.word	0x40023800
 80022f8:	431bde83 	.word	0x431bde83
 80022fc:	2003dc74 	.word	0x2003dc74
 8002300:	40001000 	.word	0x40001000

08002304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002316:	e7fe      	b.n	8002316 <HardFault_Handler+0x4>

08002318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800231c:	e7fe      	b.n	800231c <MemManage_Handler+0x4>

0800231e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002322:	e7fe      	b.n	8002322 <BusFault_Handler+0x4>

08002324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002328:	e7fe      	b.n	8002328 <UsageFault_Handler+0x4>

0800232a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800233c:	2001      	movs	r0, #1
 800233e:	f002 fe07 	bl	8004f50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 800234c:	4803      	ldr	r0, [pc, #12]	; (800235c <TIM6_DAC_IRQHandler+0x14>)
 800234e:	f001 ff8b 	bl	8004268 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002352:	4803      	ldr	r0, [pc, #12]	; (8002360 <TIM6_DAC_IRQHandler+0x18>)
 8002354:	f007 fbdf 	bl	8009b16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}
 800235c:	2003d810 	.word	0x2003d810
 8002360:	2003dc74 	.word	0x2003dc74

08002364 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002368:	4802      	ldr	r0, [pc, #8]	; (8002374 <OTG_FS_IRQHandler+0x10>)
 800236a:	f003 f8a3 	bl	80054b4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	2003e190 	.word	0x2003e190

08002378 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002380:	4a14      	ldr	r2, [pc, #80]	; (80023d4 <_sbrk+0x5c>)
 8002382:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <_sbrk+0x60>)
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800238c:	4b13      	ldr	r3, [pc, #76]	; (80023dc <_sbrk+0x64>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d102      	bne.n	800239a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <_sbrk+0x64>)
 8002396:	4a12      	ldr	r2, [pc, #72]	; (80023e0 <_sbrk+0x68>)
 8002398:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <_sbrk+0x64>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4413      	add	r3, r2
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d207      	bcs.n	80023b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023a8:	f011 feca 	bl	8014140 <__errno>
 80023ac:	4602      	mov	r2, r0
 80023ae:	230c      	movs	r3, #12
 80023b0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80023b2:	f04f 33ff 	mov.w	r3, #4294967295
 80023b6:	e009      	b.n	80023cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023b8:	4b08      	ldr	r3, [pc, #32]	; (80023dc <_sbrk+0x64>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023be:	4b07      	ldr	r3, [pc, #28]	; (80023dc <_sbrk+0x64>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	4a05      	ldr	r2, [pc, #20]	; (80023dc <_sbrk+0x64>)
 80023c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ca:	68fb      	ldr	r3, [r7, #12]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20050000 	.word	0x20050000
 80023d8:	00000400 	.word	0x00000400
 80023dc:	2000012c 	.word	0x2000012c
 80023e0:	2003e458 	.word	0x2003e458

080023e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023e8:	4b08      	ldr	r3, [pc, #32]	; (800240c <SystemInit+0x28>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ee:	4a07      	ldr	r2, [pc, #28]	; (800240c <SystemInit+0x28>)
 80023f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <SystemInit+0x28>)
 80023fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023fe:	609a      	str	r2, [r3, #8]
#endif
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002410:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002448 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002414:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002416:	e003      	b.n	8002420 <LoopCopyDataInit>

08002418 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002418:	4b0c      	ldr	r3, [pc, #48]	; (800244c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800241a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800241c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800241e:	3104      	adds	r1, #4

08002420 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002420:	480b      	ldr	r0, [pc, #44]	; (8002450 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002422:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002424:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002426:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002428:	d3f6      	bcc.n	8002418 <CopyDataInit>
  ldr  r2, =_sbss
 800242a:	4a0b      	ldr	r2, [pc, #44]	; (8002458 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800242c:	e002      	b.n	8002434 <LoopFillZerobss>

0800242e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800242e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002430:	f842 3b04 	str.w	r3, [r2], #4

08002434 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002434:	4b09      	ldr	r3, [pc, #36]	; (800245c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002436:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002438:	d3f9      	bcc.n	800242e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800243a:	f7ff ffd3 	bl	80023e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800243e:	f011 fe85 	bl	801414c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002442:	f7fe fa69 	bl	8000918 <main>
  bx  lr    
 8002446:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002448:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800244c:	08017788 	.word	0x08017788
  ldr  r0, =_sdata
 8002450:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002454:	200000f0 	.word	0x200000f0
  ldr  r2, =_sbss
 8002458:	200000f0 	.word	0x200000f0
  ldr  r3, = _ebss
 800245c:	2003e458 	.word	0x2003e458

08002460 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002460:	e7fe      	b.n	8002460 <ADC_IRQHandler>

08002462 <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b084      	sub	sp, #16
 8002466:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002468:	f000 fd6e 	bl	8002f48 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 800246c:	2200      	movs	r2, #0
 800246e:	2100      	movs	r1, #0
 8002470:	2010      	movs	r0, #16
 8002472:	f000 f9e4 	bl	800283e <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8002476:	200a      	movs	r0, #10
 8002478:	f000 fd8d 	bl	8002f96 <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 800247c:	2200      	movs	r2, #0
 800247e:	2100      	movs	r1, #0
 8002480:	2001      	movs	r0, #1
 8002482:	f000 f9dc 	bl	800283e <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 8002486:	20c8      	movs	r0, #200	; 0xc8
 8002488:	f000 fd85 	bl	8002f96 <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 800248c:	2200      	movs	r2, #0
 800248e:	2100      	movs	r1, #0
 8002490:	2011      	movs	r0, #17
 8002492:	f000 f9d4 	bl	800283e <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 8002496:	2078      	movs	r0, #120	; 0x78
 8002498:	f000 fd7d 	bl	8002f96 <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 800249c:	2300      	movs	r3, #0
 800249e:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80024a0:	463b      	mov	r3, r7
 80024a2:	2201      	movs	r2, #1
 80024a4:	4619      	mov	r1, r3
 80024a6:	2036      	movs	r0, #54	; 0x36
 80024a8:	f000 f9c9 	bl	800283e <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 80024ac:	2305      	movs	r3, #5
 80024ae:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 80024b0:	463b      	mov	r3, r7
 80024b2:	2201      	movs	r2, #1
 80024b4:	4619      	mov	r1, r3
 80024b6:	203a      	movs	r0, #58	; 0x3a
 80024b8:	f000 f9c1 	bl	800283e <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 80024bc:	2200      	movs	r2, #0
 80024be:	2100      	movs	r1, #0
 80024c0:	2021      	movs	r0, #33	; 0x21
 80024c2:	f000 f9bc 	bl	800283e <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 80024c6:	2300      	movs	r3, #0
 80024c8:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 80024ca:	2300      	movs	r3, #0
 80024cc:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80024ce:	2300      	movs	r3, #0
 80024d0:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 80024d2:	23ef      	movs	r3, #239	; 0xef
 80024d4:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 80024d6:	463b      	mov	r3, r7
 80024d8:	2204      	movs	r2, #4
 80024da:	4619      	mov	r1, r3
 80024dc:	202a      	movs	r0, #42	; 0x2a
 80024de:	f000 f9ae 	bl	800283e <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 80024e2:	2300      	movs	r3, #0
 80024e4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 80024e6:	2300      	movs	r3, #0
 80024e8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80024ea:	2300      	movs	r3, #0
 80024ec:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 80024ee:	23ef      	movs	r3, #239	; 0xef
 80024f0:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 80024f2:	463b      	mov	r3, r7
 80024f4:	2204      	movs	r2, #4
 80024f6:	4619      	mov	r1, r3
 80024f8:	202b      	movs	r0, #43	; 0x2b
 80024fa:	f000 f9a0 	bl	800283e <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 80024fe:	230c      	movs	r3, #12
 8002500:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 8002502:	230c      	movs	r3, #12
 8002504:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8002506:	2300      	movs	r3, #0
 8002508:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 800250a:	2333      	movs	r3, #51	; 0x33
 800250c:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 800250e:	2333      	movs	r3, #51	; 0x33
 8002510:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 8002512:	463b      	mov	r3, r7
 8002514:	2205      	movs	r2, #5
 8002516:	4619      	mov	r1, r3
 8002518:	20b2      	movs	r0, #178	; 0xb2
 800251a:	f000 f990 	bl	800283e <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 800251e:	2335      	movs	r3, #53	; 0x35
 8002520:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8002522:	463b      	mov	r3, r7
 8002524:	2201      	movs	r2, #1
 8002526:	4619      	mov	r1, r3
 8002528:	20b7      	movs	r0, #183	; 0xb7
 800252a:	f000 f988 	bl	800283e <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 800252e:	231f      	movs	r3, #31
 8002530:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8002532:	463b      	mov	r3, r7
 8002534:	2201      	movs	r2, #1
 8002536:	4619      	mov	r1, r3
 8002538:	20bb      	movs	r0, #187	; 0xbb
 800253a:	f000 f980 	bl	800283e <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 800253e:	232c      	movs	r3, #44	; 0x2c
 8002540:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8002542:	463b      	mov	r3, r7
 8002544:	2201      	movs	r2, #1
 8002546:	4619      	mov	r1, r3
 8002548:	20c0      	movs	r0, #192	; 0xc0
 800254a:	f000 f978 	bl	800283e <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 800254e:	2301      	movs	r3, #1
 8002550:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 8002552:	23c3      	movs	r3, #195	; 0xc3
 8002554:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8002556:	463b      	mov	r3, r7
 8002558:	2202      	movs	r2, #2
 800255a:	4619      	mov	r1, r3
 800255c:	20c2      	movs	r0, #194	; 0xc2
 800255e:	f000 f96e 	bl	800283e <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 8002562:	2320      	movs	r3, #32
 8002564:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8002566:	463b      	mov	r3, r7
 8002568:	2201      	movs	r2, #1
 800256a:	4619      	mov	r1, r3
 800256c:	20c4      	movs	r0, #196	; 0xc4
 800256e:	f000 f966 	bl	800283e <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 8002572:	230f      	movs	r3, #15
 8002574:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 8002576:	463b      	mov	r3, r7
 8002578:	2201      	movs	r2, #1
 800257a:	4619      	mov	r1, r3
 800257c:	20c6      	movs	r0, #198	; 0xc6
 800257e:	f000 f95e 	bl	800283e <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 8002582:	23a4      	movs	r3, #164	; 0xa4
 8002584:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 8002586:	23a1      	movs	r3, #161	; 0xa1
 8002588:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 1); 
 800258a:	463b      	mov	r3, r7
 800258c:	2201      	movs	r2, #1
 800258e:	4619      	mov	r1, r3
 8002590:	20d0      	movs	r0, #208	; 0xd0
 8002592:	f000 f954 	bl	800283e <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 8002596:	23d0      	movs	r3, #208	; 0xd0
 8002598:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 800259a:	2308      	movs	r3, #8
 800259c:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 800259e:	2311      	movs	r3, #17
 80025a0:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 80025a2:	2308      	movs	r3, #8
 80025a4:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 80025a6:	230c      	movs	r3, #12
 80025a8:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 80025aa:	2315      	movs	r3, #21
 80025ac:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 80025ae:	2339      	movs	r3, #57	; 0x39
 80025b0:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 80025b2:	2333      	movs	r3, #51	; 0x33
 80025b4:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 80025b6:	2350      	movs	r3, #80	; 0x50
 80025b8:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 80025ba:	2336      	movs	r3, #54	; 0x36
 80025bc:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 80025be:	2313      	movs	r3, #19
 80025c0:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 80025c2:	2314      	movs	r3, #20
 80025c4:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 80025c6:	2329      	movs	r3, #41	; 0x29
 80025c8:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 80025ca:	232d      	movs	r3, #45	; 0x2d
 80025cc:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 80025ce:	463b      	mov	r3, r7
 80025d0:	220e      	movs	r2, #14
 80025d2:	4619      	mov	r1, r3
 80025d4:	20e0      	movs	r0, #224	; 0xe0
 80025d6:	f000 f932 	bl	800283e <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 80025da:	23d0      	movs	r3, #208	; 0xd0
 80025dc:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 80025de:	2308      	movs	r3, #8
 80025e0:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 80025e2:	2310      	movs	r3, #16
 80025e4:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 80025e6:	2308      	movs	r3, #8
 80025e8:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 80025ea:	2306      	movs	r3, #6
 80025ec:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 80025ee:	2306      	movs	r3, #6
 80025f0:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 80025f2:	2339      	movs	r3, #57	; 0x39
 80025f4:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 80025f6:	2344      	movs	r3, #68	; 0x44
 80025f8:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 80025fa:	2351      	movs	r3, #81	; 0x51
 80025fc:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 80025fe:	230b      	movs	r3, #11
 8002600:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 8002602:	2316      	movs	r3, #22
 8002604:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8002606:	2314      	movs	r3, #20
 8002608:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 800260a:	232f      	movs	r3, #47	; 0x2f
 800260c:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 800260e:	2331      	movs	r3, #49	; 0x31
 8002610:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 8002612:	463b      	mov	r3, r7
 8002614:	220e      	movs	r2, #14
 8002616:	4619      	mov	r1, r3
 8002618:	20e1      	movs	r0, #225	; 0xe1
 800261a:	f000 f910 	bl	800283e <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 800261e:	f000 f847 	bl	80026b0 <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 8002622:	2300      	movs	r3, #0
 8002624:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8002626:	463b      	mov	r3, r7
 8002628:	2201      	movs	r2, #1
 800262a:	4619      	mov	r1, r3
 800262c:	2035      	movs	r0, #53	; 0x35
 800262e:	f000 f906 	bl	800283e <ST7789H2_WriteReg>

}
 8002632:	bf00      	nop
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b084      	sub	sp, #16
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d102      	bne.n	800264e <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8002648:	2300      	movs	r3, #0
 800264a:	723b      	strb	r3, [r7, #8]
 800264c:	e025      	b.n	800269a <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d120      	bne.n	8002696 <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 8002654:	2300      	movs	r3, #0
 8002656:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8002658:	2300      	movs	r3, #0
 800265a:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 800265c:	2301      	movs	r3, #1
 800265e:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 8002660:	23f0      	movs	r3, #240	; 0xf0
 8002662:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 8002664:	2300      	movs	r3, #0
 8002666:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 8002668:	2300      	movs	r3, #0
 800266a:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 800266c:	f107 0308 	add.w	r3, r7, #8
 8002670:	2206      	movs	r2, #6
 8002672:	4619      	mov	r1, r3
 8002674:	2033      	movs	r0, #51	; 0x33
 8002676:	f000 f8e2 	bl	800283e <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 800267a:	2300      	movs	r3, #0
 800267c:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 800267e:	2350      	movs	r3, #80	; 0x50
 8002680:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 8002682:	f107 0308 	add.w	r3, r7, #8
 8002686:	2202      	movs	r2, #2
 8002688:	4619      	mov	r1, r3
 800268a:	2037      	movs	r0, #55	; 0x37
 800268c:	f000 f8d7 	bl	800283e <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 8002690:	23c0      	movs	r3, #192	; 0xc0
 8002692:	723b      	strb	r3, [r7, #8]
 8002694:	e001      	b.n	800269a <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 8002696:	2360      	movs	r3, #96	; 0x60
 8002698:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 800269a:	f107 0308 	add.w	r3, r7, #8
 800269e:	2201      	movs	r2, #1
 80026a0:	4619      	mov	r1, r3
 80026a2:	2036      	movs	r0, #54	; 0x36
 80026a4:	f000 f8cb 	bl	800283e <ST7789H2_WriteReg>
}
 80026a8:	bf00      	nop
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 80026b4:	2200      	movs	r2, #0
 80026b6:	2100      	movs	r1, #0
 80026b8:	2029      	movs	r0, #41	; 0x29
 80026ba:	f000 f8c0 	bl	800283e <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 80026be:	2200      	movs	r2, #0
 80026c0:	2100      	movs	r1, #0
 80026c2:	2011      	movs	r0, #17
 80026c4:	f000 f8bb 	bl	800283e <ST7789H2_WriteReg>
}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}

080026cc <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 80026d2:	23fe      	movs	r3, #254	; 0xfe
 80026d4:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	2201      	movs	r2, #1
 80026da:	4619      	mov	r1, r3
 80026dc:	20bd      	movs	r0, #189	; 0xbd
 80026de:	f000 f8ae 	bl	800283e <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 80026e2:	2200      	movs	r2, #0
 80026e4:	2100      	movs	r1, #0
 80026e6:	2010      	movs	r0, #16
 80026e8:	f000 f8a9 	bl	800283e <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 80026ec:	200a      	movs	r0, #10
 80026ee:	f000 fc52 	bl	8002f96 <LCD_IO_Delay>
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 80026fa:	b480      	push	{r7}
 80026fc:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 80026fe:	23f0      	movs	r3, #240	; 0xf0
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 800270a:	b480      	push	{r7}
 800270c:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 800270e:	23f0      	movs	r3, #240	; 0xf0
}
 8002710:	4618      	mov	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800271e:	f000 fc13 	bl	8002f48 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 8002722:	2004      	movs	r0, #4
 8002724:	f000 f8ad 	bl	8002882 <ST7789H2_ReadReg>
 8002728:	4603      	mov	r3, r0
 800272a:	b29b      	uxth	r3, r3
}
 800272c:	4618      	mov	r0, r3
 800272e:	bd80      	pop	{r7, pc}

08002730 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	460a      	mov	r2, r1
 800273a:	80fb      	strh	r3, [r7, #6]
 800273c:	4613      	mov	r3, r2
 800273e:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 8002740:	2300      	movs	r3, #0
 8002742:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 8002744:	88fb      	ldrh	r3, [r7, #6]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 800274a:	2300      	movs	r3, #0
 800274c:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 800274e:	88fb      	ldrh	r3, [r7, #6]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	3b11      	subs	r3, #17
 8002754:	b2db      	uxtb	r3, r3
 8002756:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8002758:	f107 030c 	add.w	r3, r7, #12
 800275c:	2204      	movs	r2, #4
 800275e:	4619      	mov	r1, r3
 8002760:	202a      	movs	r0, #42	; 0x2a
 8002762:	f000 f86c 	bl	800283e <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 8002766:	2300      	movs	r3, #0
 8002768:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 800276a:	88bb      	ldrh	r3, [r7, #4]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8002770:	2300      	movs	r3, #0
 8002772:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 8002774:	88bb      	ldrh	r3, [r7, #4]
 8002776:	b2db      	uxtb	r3, r3
 8002778:	3b11      	subs	r3, #17
 800277a:	b2db      	uxtb	r3, r3
 800277c:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 800277e:	f107 030c 	add.w	r3, r7, #12
 8002782:	2204      	movs	r2, #4
 8002784:	4619      	mov	r1, r3
 8002786:	202b      	movs	r0, #43	; 0x2b
 8002788:	f000 f859 	bl	800283e <ST7789H2_WriteReg>
}
 800278c:	bf00      	nop
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	80fb      	strh	r3, [r7, #6]
 800279e:	460b      	mov	r3, r1
 80027a0:	80bb      	strh	r3, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80027a6:	88ba      	ldrh	r2, [r7, #4]
 80027a8:	88fb      	ldrh	r3, [r7, #6]
 80027aa:	4611      	mov	r1, r2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ffbf 	bl	8002730 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80027b2:	2200      	movs	r2, #0
 80027b4:	2100      	movs	r1, #0
 80027b6:	202c      	movs	r0, #44	; 0x2c
 80027b8:	f000 f841 	bl	800283e <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 80027bc:	887b      	ldrh	r3, [r7, #2]
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 fbc8 	bl	8002f54 <LCD_IO_WriteData>
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	460a      	mov	r2, r1
 80027d6:	80fb      	strh	r3, [r7, #6]
 80027d8:	4613      	mov	r3, r2
 80027da:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80027dc:	88ba      	ldrh	r2, [r7, #4]
 80027de:	88fb      	ldrh	r3, [r7, #6]
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff ffa4 	bl	8002730 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 80027e8:	88ba      	ldrh	r2, [r7, #4]
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	4611      	mov	r1, r2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 f9bd 	bl	8002b6e <ST7789H2_ReadPixel_rgb888>
 80027f4:	4603      	mov	r3, r0
 80027f6:	461a      	mov	r2, r3
 80027f8:	733a      	strb	r2, [r7, #12]
 80027fa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80027fe:	737a      	strb	r2, [r7, #13]
 8002800:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002804:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8002806:	7b3b      	ldrb	r3, [r7, #12]
 8002808:	08db      	lsrs	r3, r3, #3
 800280a:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 800280c:	7b7b      	ldrb	r3, [r7, #13]
 800280e:	089b      	lsrs	r3, r3, #2
 8002810:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 8002812:	7bbb      	ldrb	r3, [r7, #14]
 8002814:	08db      	lsrs	r3, r3, #3
 8002816:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8002818:	7dfb      	ldrb	r3, [r7, #23]
 800281a:	b29b      	uxth	r3, r3
 800281c:	02db      	lsls	r3, r3, #11
 800281e:	b29a      	uxth	r2, r3
 8002820:	7dbb      	ldrb	r3, [r7, #22]
 8002822:	b29b      	uxth	r3, r3
 8002824:	015b      	lsls	r3, r3, #5
 8002826:	b29b      	uxth	r3, r3
 8002828:	4413      	add	r3, r2
 800282a:	b29a      	uxth	r2, r3
 800282c:	7d7b      	ldrb	r3, [r7, #21]
 800282e:	b29b      	uxth	r3, r3
 8002830:	4413      	add	r3, r2
 8002832:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8002834:	8a7b      	ldrh	r3, [r7, #18]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
 8002844:	4603      	mov	r3, r0
 8002846:	6039      	str	r1, [r7, #0]
 8002848:	71fb      	strb	r3, [r7, #7]
 800284a:	4613      	mov	r3, r2
 800284c:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	4618      	mov	r0, r3
 8002852:	f000 fb8c 	bl	8002f6e <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8002856:	2300      	movs	r3, #0
 8002858:	73fb      	strb	r3, [r7, #15]
 800285a:	e00a      	b.n	8002872 <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 800285c:	7bfb      	ldrb	r3, [r7, #15]
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	4413      	add	r3, r2
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	b29b      	uxth	r3, r3
 8002866:	4618      	mov	r0, r3
 8002868:	f000 fb74 	bl	8002f54 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	3301      	adds	r3, #1
 8002870:	73fb      	strb	r3, [r7, #15]
 8002872:	7bfa      	ldrb	r2, [r7, #15]
 8002874:	79bb      	ldrb	r3, [r7, #6]
 8002876:	429a      	cmp	r2, r3
 8002878:	d3f0      	bcc.n	800285c <ST7789H2_WriteReg+0x1e>
  }
}
 800287a:	bf00      	nop
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	4603      	mov	r3, r0
 800288a:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	4618      	mov	r0, r3
 8002890:	f000 fb6d 	bl	8002f6e <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 8002894:	f000 fb78 	bl	8002f88 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 8002898:	f000 fb76 	bl	8002f88 <LCD_IO_ReadData>
 800289c:	4603      	mov	r3, r0
 800289e:	b2db      	uxtb	r3, r3
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80028a8:	b490      	push	{r4, r7}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4604      	mov	r4, r0
 80028b0:	4608      	mov	r0, r1
 80028b2:	4611      	mov	r1, r2
 80028b4:	461a      	mov	r2, r3
 80028b6:	4623      	mov	r3, r4
 80028b8:	80fb      	strh	r3, [r7, #6]
 80028ba:	4603      	mov	r3, r0
 80028bc:	80bb      	strh	r3, [r7, #4]
 80028be:	460b      	mov	r3, r1
 80028c0:	807b      	strh	r3, [r7, #2]
 80028c2:	4613      	mov	r3, r2
 80028c4:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 80028c6:	88fb      	ldrh	r3, [r7, #6]
 80028c8:	2bef      	cmp	r3, #239	; 0xef
 80028ca:	d803      	bhi.n	80028d4 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 80028cc:	4a1b      	ldr	r2, [pc, #108]	; (800293c <ST7789H2_SetDisplayWindow+0x94>)
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	8013      	strh	r3, [r2, #0]
 80028d2:	e002      	b.n	80028da <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 80028d4:	4b19      	ldr	r3, [pc, #100]	; (800293c <ST7789H2_SetDisplayWindow+0x94>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 80028da:	88bb      	ldrh	r3, [r7, #4]
 80028dc:	2bef      	cmp	r3, #239	; 0xef
 80028de:	d803      	bhi.n	80028e8 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 80028e0:	4a17      	ldr	r2, [pc, #92]	; (8002940 <ST7789H2_SetDisplayWindow+0x98>)
 80028e2:	88bb      	ldrh	r3, [r7, #4]
 80028e4:	8013      	strh	r3, [r2, #0]
 80028e6:	e002      	b.n	80028ee <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 80028e8:	4b15      	ldr	r3, [pc, #84]	; (8002940 <ST7789H2_SetDisplayWindow+0x98>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 80028ee:	887a      	ldrh	r2, [r7, #2]
 80028f0:	88fb      	ldrh	r3, [r7, #6]
 80028f2:	4413      	add	r3, r2
 80028f4:	2bf0      	cmp	r3, #240	; 0xf0
 80028f6:	dc08      	bgt.n	800290a <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 80028f8:	887a      	ldrh	r2, [r7, #2]
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	4413      	add	r3, r2
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <ST7789H2_SetDisplayWindow+0x9c>)
 8002906:	801a      	strh	r2, [r3, #0]
 8002908:	e002      	b.n	8002910 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 800290a:	4b0e      	ldr	r3, [pc, #56]	; (8002944 <ST7789H2_SetDisplayWindow+0x9c>)
 800290c:	22ef      	movs	r2, #239	; 0xef
 800290e:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 8002910:	883a      	ldrh	r2, [r7, #0]
 8002912:	88bb      	ldrh	r3, [r7, #4]
 8002914:	4413      	add	r3, r2
 8002916:	2bf0      	cmp	r3, #240	; 0xf0
 8002918:	dc08      	bgt.n	800292c <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 800291a:	883a      	ldrh	r2, [r7, #0]
 800291c:	88bb      	ldrh	r3, [r7, #4]
 800291e:	4413      	add	r3, r2
 8002920:	b29b      	uxth	r3, r3
 8002922:	3b01      	subs	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	4b08      	ldr	r3, [pc, #32]	; (8002948 <ST7789H2_SetDisplayWindow+0xa0>)
 8002928:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 800292a:	e002      	b.n	8002932 <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <ST7789H2_SetDisplayWindow+0xa0>)
 800292e:	22ef      	movs	r2, #239	; 0xef
 8002930:	801a      	strh	r2, [r3, #0]
}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bc90      	pop	{r4, r7}
 800293a:	4770      	bx	lr
 800293c:	20000130 	.word	0x20000130
 8002940:	20000132 	.word	0x20000132
 8002944:	2000003c 	.word	0x2000003c
 8002948:	2000003e 	.word	0x2000003e

0800294c <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800294c:	b590      	push	{r4, r7, lr}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	4604      	mov	r4, r0
 8002954:	4608      	mov	r0, r1
 8002956:	4611      	mov	r1, r2
 8002958:	461a      	mov	r2, r3
 800295a:	4623      	mov	r3, r4
 800295c:	80fb      	strh	r3, [r7, #6]
 800295e:	4603      	mov	r3, r0
 8002960:	80bb      	strh	r3, [r7, #4]
 8002962:	460b      	mov	r3, r1
 8002964:	807b      	strh	r3, [r7, #2]
 8002966:	4613      	mov	r3, r2
 8002968:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 800296e:	887a      	ldrh	r2, [r7, #2]
 8002970:	88bb      	ldrh	r3, [r7, #4]
 8002972:	4611      	mov	r1, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff fedb 	bl	8002730 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 800297a:	2200      	movs	r2, #0
 800297c:	2100      	movs	r1, #0
 800297e:	202c      	movs	r0, #44	; 0x2c
 8002980:	f7ff ff5d 	bl	800283e <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8002984:	2300      	movs	r3, #0
 8002986:	81fb      	strh	r3, [r7, #14]
 8002988:	e006      	b.n	8002998 <ST7789H2_DrawHLine+0x4c>
  {
    LCD_IO_WriteData(RGBCode);
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	4618      	mov	r0, r3
 800298e:	f000 fae1 	bl	8002f54 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 8002992:	89fb      	ldrh	r3, [r7, #14]
 8002994:	3301      	adds	r3, #1
 8002996:	81fb      	strh	r3, [r7, #14]
 8002998:	89fa      	ldrh	r2, [r7, #14]
 800299a:	883b      	ldrh	r3, [r7, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d3f4      	bcc.n	800298a <ST7789H2_DrawHLine+0x3e>
  }  
}
 80029a0:	bf00      	nop
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd90      	pop	{r4, r7, pc}

080029a8 <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80029a8:	b590      	push	{r4, r7, lr}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4604      	mov	r4, r0
 80029b0:	4608      	mov	r0, r1
 80029b2:	4611      	mov	r1, r2
 80029b4:	461a      	mov	r2, r3
 80029b6:	4623      	mov	r3, r4
 80029b8:	80fb      	strh	r3, [r7, #6]
 80029ba:	4603      	mov	r3, r0
 80029bc:	80bb      	strh	r3, [r7, #4]
 80029be:	460b      	mov	r3, r1
 80029c0:	807b      	strh	r3, [r7, #2]
 80029c2:	4613      	mov	r3, r2
 80029c4:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80029ca:	887a      	ldrh	r2, [r7, #2]
 80029cc:	88bb      	ldrh	r3, [r7, #4]
 80029ce:	4611      	mov	r1, r2
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff fead 	bl	8002730 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80029d6:	2200      	movs	r2, #0
 80029d8:	2100      	movs	r1, #0
 80029da:	202c      	movs	r0, #44	; 0x2c
 80029dc:	f7ff ff2f 	bl	800283e <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 80029e0:	2300      	movs	r3, #0
 80029e2:	81fb      	strh	r3, [r7, #14]
 80029e4:	e00b      	b.n	80029fe <ST7789H2_DrawVLine+0x56>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 80029e6:	887a      	ldrh	r2, [r7, #2]
 80029e8:	89fb      	ldrh	r3, [r7, #14]
 80029ea:	4413      	add	r3, r2
 80029ec:	b299      	uxth	r1, r3
 80029ee:	88fa      	ldrh	r2, [r7, #6]
 80029f0:	88bb      	ldrh	r3, [r7, #4]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fece 	bl	8002794 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 80029f8:	89fb      	ldrh	r3, [r7, #14]
 80029fa:	3301      	adds	r3, #1
 80029fc:	81fb      	strh	r3, [r7, #14]
 80029fe:	89fa      	ldrh	r2, [r7, #14]
 8002a00:	883b      	ldrh	r3, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d3ef      	bcc.n	80029e6 <ST7789H2_DrawVLine+0x3e>
  }
}
 8002a06:	bf00      	nop
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd90      	pop	{r4, r7, pc}
	...

08002a10 <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	603a      	str	r2, [r7, #0]
 8002a1a:	80fb      	strh	r3, [r7, #6]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	2300      	movs	r3, #0
 8002a26:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8002a2c:	4b2f      	ldr	r3, [pc, #188]	; (8002aec <ST7789H2_DrawBitmap+0xdc>)
 8002a2e:	881a      	ldrh	r2, [r3, #0]
 8002a30:	4b2f      	ldr	r3, [pc, #188]	; (8002af0 <ST7789H2_DrawBitmap+0xe0>)
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3301      	adds	r3, #1
 8002a3a:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8002a3c:	4b2d      	ldr	r3, [pc, #180]	; (8002af4 <ST7789H2_DrawBitmap+0xe4>)
 8002a3e:	881a      	ldrh	r2, [r3, #0]
 8002a40:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <ST7789H2_DrawBitmap+0xe8>)
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3301      	adds	r3, #1
 8002a4a:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	3302      	adds	r3, #2
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	3304      	adds	r3, #4
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	041b      	lsls	r3, r3, #16
 8002a60:	461a      	mov	r2, r3
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	330a      	adds	r3, #10
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	330c      	adds	r3, #12
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	041b      	lsls	r3, r3, #16
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	085b      	lsrs	r3, r3, #1
 8002a8c:	613b      	str	r3, [r7, #16]
  pbmp += index;
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	4413      	add	r3, r2
 8002a94:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8002a96:	88ba      	ldrh	r2, [r7, #4]
 8002a98:	89bb      	ldrh	r3, [r7, #12]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	e01d      	b.n	8002adc <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	88fb      	ldrh	r3, [r7, #6]
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fe3f 	bl	8002730 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b299      	uxth	r1, r3
 8002aba:	89fb      	ldrh	r3, [r7, #14]
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	89fa      	ldrh	r2, [r7, #14]
 8002aca:	88f8      	ldrh	r0, [r7, #6]
 8002acc:	f000 f898 	bl	8002c00 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	61fb      	str	r3, [r7, #28]
 8002adc:	88bb      	ldrh	r3, [r7, #4]
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d8dd      	bhi.n	8002aa0 <ST7789H2_DrawBitmap+0x90>
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	3720      	adds	r7, #32
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	2000003c 	.word	0x2000003c
 8002af0:	20000130 	.word	0x20000130
 8002af4:	2000003e 	.word	0x2000003e
 8002af8:	20000132 	.word	0x20000132

08002afc <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8002afc:	b590      	push	{r4, r7, lr}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4604      	mov	r4, r0
 8002b04:	4608      	mov	r0, r1
 8002b06:	4611      	mov	r1, r2
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4623      	mov	r3, r4
 8002b0c:	80fb      	strh	r3, [r7, #6]
 8002b0e:	4603      	mov	r3, r0
 8002b10:	80bb      	strh	r3, [r7, #4]
 8002b12:	460b      	mov	r3, r1
 8002b14:	807b      	strh	r3, [r7, #2]
 8002b16:	4613      	mov	r3, r2
 8002b18:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8002b1e:	88bb      	ldrh	r3, [r7, #4]
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	e019      	b.n	8002b58 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff fdff 	bl	8002730 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	b299      	uxth	r1, r3
 8002b36:	887b      	ldrh	r3, [r7, #2]
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	fb02 f303 	mul.w	r3, r2, r3
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	6a3a      	ldr	r2, [r7, #32]
 8002b42:	4413      	add	r3, r2
 8002b44:	887a      	ldrh	r2, [r7, #2]
 8002b46:	88f8      	ldrh	r0, [r7, #6]
 8002b48:	f000 f85a 	bl	8002c00 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	3301      	adds	r3, #1
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	88ba      	ldrh	r2, [r7, #4]
 8002b5a:	883b      	ldrh	r3, [r7, #0]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d3de      	bcc.n	8002b24 <ST7789H2_DrawRGBImage+0x28>
  }
}
 8002b66:	bf00      	nop
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd90      	pop	{r4, r7, pc}

08002b6e <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b086      	sub	sp, #24
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	4603      	mov	r3, r0
 8002b76:	460a      	mov	r2, r1
 8002b78:	80fb      	strh	r3, [r7, #6]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002b7e:	88ba      	ldrh	r2, [r7, #4]
 8002b80:	88fb      	ldrh	r3, [r7, #6]
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fdd3 	bl	8002730 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	202e      	movs	r0, #46	; 0x2e
 8002b90:	f7ff fe55 	bl	800283e <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 8002b94:	f000 f9f8 	bl	8002f88 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 8002b98:	f000 f9f6 	bl	8002f88 <LCD_IO_ReadData>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 8002ba0:	f000 f9f2 	bl	8002f88 <LCD_IO_ReadData>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 8002ba8:	8afb      	ldrh	r3, [r7, #22]
 8002baa:	121b      	asrs	r3, r3, #8
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	f023 0303 	bic.w	r3, r3, #3
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 8002bb6:	8afb      	ldrh	r3, [r7, #22]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	f023 0303 	bic.w	r3, r3, #3
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 8002bc2:	8abb      	ldrh	r3, [r7, #20]
 8002bc4:	121b      	asrs	r3, r3, #8
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f023 0303 	bic.w	r3, r3, #3
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 8002bd0:	f107 0310 	add.w	r3, r7, #16
 8002bd4:	f107 020c 	add.w	r2, r7, #12
 8002bd8:	6812      	ldr	r2, [r2, #0]
 8002bda:	4611      	mov	r1, r2
 8002bdc:	8019      	strh	r1, [r3, #0]
 8002bde:	3302      	adds	r3, #2
 8002be0:	0c12      	lsrs	r2, r2, #16
 8002be2:	701a      	strb	r2, [r3, #0]
 8002be4:	2300      	movs	r3, #0
 8002be6:	7c3a      	ldrb	r2, [r7, #16]
 8002be8:	f362 0307 	bfi	r3, r2, #0, #8
 8002bec:	7c7a      	ldrb	r2, [r7, #17]
 8002bee:	f362 230f 	bfi	r3, r2, #8, #8
 8002bf2:	7cba      	ldrb	r2, [r7, #18]
 8002bf4:	f362 4317 	bfi	r3, r2, #16, #8
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	607b      	str	r3, [r7, #4]
 8002c08:	4603      	mov	r3, r0
 8002c0a:	81fb      	strh	r3, [r7, #14]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	81bb      	strh	r3, [r7, #12]
 8002c10:	4613      	mov	r3, r2
 8002c12:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	2100      	movs	r1, #0
 8002c20:	202c      	movs	r0, #44	; 0x2c
 8002c22:	f7ff fe0c 	bl	800283e <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8002c26:	89fb      	ldrh	r3, [r7, #14]
 8002c28:	61bb      	str	r3, [r7, #24]
 8002c2a:	e02a      	b.n	8002c82 <ST7789H2_DrawRGBHLine+0x82>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002c2c:	4b1a      	ldr	r3, [pc, #104]	; (8002c98 <ST7789H2_DrawRGBHLine+0x98>)
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	461a      	mov	r2, r3
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d321      	bcc.n	8002c7c <ST7789H2_DrawRGBHLine+0x7c>
 8002c38:	4b18      	ldr	r3, [pc, #96]	; (8002c9c <ST7789H2_DrawRGBHLine+0x9c>)
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	89ba      	ldrh	r2, [r7, #12]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d31c      	bcc.n	8002c7c <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002c42:	4b17      	ldr	r3, [pc, #92]	; (8002ca0 <ST7789H2_DrawRGBHLine+0xa0>)
 8002c44:	881b      	ldrh	r3, [r3, #0]
 8002c46:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d816      	bhi.n	8002c7c <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002c4e:	4b15      	ldr	r3, [pc, #84]	; (8002ca4 <ST7789H2_DrawRGBHLine+0xa4>)
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	89ba      	ldrh	r2, [r7, #12]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d811      	bhi.n	8002c7c <ST7789H2_DrawRGBHLine+0x7c>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8002c58:	897a      	ldrh	r2, [r7, #10]
 8002c5a:	89fb      	ldrh	r3, [r7, #14]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	461a      	mov	r2, r3
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d007      	beq.n	8002c76 <ST7789H2_DrawRGBHLine+0x76>
      {
        LCD_IO_WriteData(rgb565[i]);        
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 f96f 	bl	8002f54 <LCD_IO_WriteData>
      }      
      i++;
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	61bb      	str	r3, [r7, #24]
 8002c82:	897a      	ldrh	r2, [r7, #10]
 8002c84:	89fb      	ldrh	r3, [r7, #14]
 8002c86:	4413      	add	r3, r2
 8002c88:	461a      	mov	r2, r3
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d3cd      	bcc.n	8002c2c <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 8002c90:	bf00      	nop
 8002c92:	3720      	adds	r7, #32
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20000130 	.word	0x20000130
 8002c9c:	20000132 	.word	0x20000132
 8002ca0:	2000003c 	.word	0x2000003c
 8002ca4:	2000003e 	.word	0x2000003e

08002ca8 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b088      	sub	sp, #32
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	460a      	mov	r2, r1
 8002cb2:	71fb      	strb	r3, [r7, #7]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  WAKEUP_BUTTON_GPIO_CLK_ENABLE();
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	4b22      	ldr	r3, [pc, #136]	; (8002d48 <BSP_PB_Init+0xa0>)
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc0:	4a21      	ldr	r2, [pc, #132]	; (8002d48 <BSP_PB_Init+0xa0>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc8:	4b1f      	ldr	r3, [pc, #124]	; (8002d48 <BSP_PB_Init+0xa0>)
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002cd4:	79bb      	ldrb	r3, [r7, #6]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d111      	bne.n	8002cfe <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002cda:	2301      	movs	r3, #1
 8002cdc:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	4a17      	ldr	r2, [pc, #92]	; (8002d4c <BSP_PB_Init+0xa4>)
 8002cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf2:	f107 020c 	add.w	r2, r7, #12
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f001 ff4b 	bl	8004b94 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002cfe:	79bb      	ldrb	r3, [r7, #6]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d11d      	bne.n	8002d40 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002d04:	2301      	movs	r3, #1
 8002d06:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002d10:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <BSP_PB_Init+0xa8>)
 8002d12:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002d14:	79fb      	ldrb	r3, [r7, #7]
 8002d16:	4a0d      	ldr	r2, [pc, #52]	; (8002d4c <BSP_PB_Init+0xa4>)
 8002d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d1c:	f107 020c 	add.w	r2, r7, #12
 8002d20:	4611      	mov	r1, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f001 ff36 	bl	8004b94 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002d28:	2306      	movs	r3, #6
 8002d2a:	b25b      	sxtb	r3, r3
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	210f      	movs	r1, #15
 8002d30:	4618      	mov	r0, r3
 8002d32:	f001 fa4d 	bl	80041d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002d36:	2306      	movs	r3, #6
 8002d38:	b25b      	sxtb	r3, r3
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f001 fa64 	bl	8004208 <HAL_NVIC_EnableIRQ>
  }
}
 8002d40:	bf00      	nop
 8002d42:	3720      	adds	r7, #32
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	20000040 	.word	0x20000040
 8002d50:	10110000 	.word	0x10110000

08002d54 <FMC_BANK3_MspInit>:
/*************************** FMC Routines ************************************/
/**
  * @brief  Initializes FMC_BANK3 MSP.
  */
static void FMC_BANK3_MspInit(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08a      	sub	sp, #40	; 0x28
 8002d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
    
  /* Enable FSMC clock */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	4b3a      	ldr	r3, [pc, #232]	; (8002e48 <FMC_BANK3_MspInit+0xf4>)
 8002d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d62:	4a39      	ldr	r2, [pc, #228]	; (8002e48 <FMC_BANK3_MspInit+0xf4>)
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	6393      	str	r3, [r2, #56]	; 0x38
 8002d6a:	4b37      	ldr	r3, [pc, #220]	; (8002e48 <FMC_BANK3_MspInit+0xf4>)
 8002d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	693b      	ldr	r3, [r7, #16]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	4b33      	ldr	r3, [pc, #204]	; (8002e48 <FMC_BANK3_MspInit+0xf4>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	4a32      	ldr	r2, [pc, #200]	; (8002e48 <FMC_BANK3_MspInit+0xf4>)
 8002d80:	f043 0308 	orr.w	r3, r3, #8
 8002d84:	6313      	str	r3, [r2, #48]	; 0x30
 8002d86:	4b30      	ldr	r3, [pc, #192]	; (8002e48 <FMC_BANK3_MspInit+0xf4>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	4b2c      	ldr	r3, [pc, #176]	; (8002e48 <FMC_BANK3_MspInit+0xf4>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	4a2b      	ldr	r2, [pc, #172]	; (8002e48 <FMC_BANK3_MspInit+0xf4>)
 8002d9c:	f043 0310 	orr.w	r3, r3, #16
 8002da0:	6313      	str	r3, [r2, #48]	; 0x30
 8002da2:	4b29      	ldr	r3, [pc, #164]	; (8002e48 <FMC_BANK3_MspInit+0xf4>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	f003 0310 	and.w	r3, r3, #16
 8002daa:	60bb      	str	r3, [r7, #8]
 8002dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	607b      	str	r3, [r7, #4]
 8002db2:	4b25      	ldr	r3, [pc, #148]	; (8002e48 <FMC_BANK3_MspInit+0xf4>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	4a24      	ldr	r2, [pc, #144]	; (8002e48 <FMC_BANK3_MspInit+0xf4>)
 8002db8:	f043 0320 	orr.w	r3, r3, #32
 8002dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dbe:	4b22      	ldr	r3, [pc, #136]	; (8002e48 <FMC_BANK3_MspInit+0xf4>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f003 0320 	and.w	r3, r3, #32
 8002dc6:	607b      	str	r3, [r7, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	603b      	str	r3, [r7, #0]
 8002dce:	4b1e      	ldr	r3, [pc, #120]	; (8002e48 <FMC_BANK3_MspInit+0xf4>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	4a1d      	ldr	r2, [pc, #116]	; (8002e48 <FMC_BANK3_MspInit+0xf4>)
 8002dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dda:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <FMC_BANK3_MspInit+0xf4>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	683b      	ldr	r3, [r7, #0]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002de6:	2302      	movs	r3, #2
 8002de8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002dea:	2301      	movs	r3, #1
 8002dec:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dee:	2303      	movs	r3, #3
 8002df0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 8002df2:	230c      	movs	r3, #12
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* GPIOD configuration: GPIO_PIN_7 is  FMC_NE1 , GPIO_PIN_11 ans GPIO_PIN_12 are PSRAM_A16 and PSRAM_A17 */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 8002df6:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8002dfa:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7|\
                              GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002dfc:	f107 0314 	add.w	r3, r7, #20
 8002e00:	4619      	mov	r1, r3
 8002e02:	4812      	ldr	r0, [pc, #72]	; (8002e4c <FMC_BANK3_MspInit+0xf8>)
 8002e04:	f001 fec6 	bl	8004b94 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 8002e08:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002e0c:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_12 |GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002e0e:	f107 0314 	add.w	r3, r7, #20
 8002e12:	4619      	mov	r1, r3
 8002e14:	480e      	ldr	r0, [pc, #56]	; (8002e50 <FMC_BANK3_MspInit+0xfc>)
 8002e16:	f001 febd 	bl	8004b94 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002e1a:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8002e1e:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15; 
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002e20:	f107 0314 	add.w	r3, r7, #20
 8002e24:	4619      	mov	r1, r3
 8002e26:	480b      	ldr	r0, [pc, #44]	; (8002e54 <FMC_BANK3_MspInit+0x100>)
 8002e28:	f001 feb4 	bl	8004b94 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002e2c:	f240 433f 	movw	r3, #1087	; 0x43f
 8002e30:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_10 ; 
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002e32:	f107 0314 	add.w	r3, r7, #20
 8002e36:	4619      	mov	r1, r3
 8002e38:	4807      	ldr	r0, [pc, #28]	; (8002e58 <FMC_BANK3_MspInit+0x104>)
 8002e3a:	f001 feab 	bl	8004b94 <HAL_GPIO_Init>
}
 8002e3e:	bf00      	nop
 8002e40:	3728      	adds	r7, #40	; 0x28
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	40020c00 	.word	0x40020c00
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40021400 	.word	0x40021400
 8002e58:	40021800 	.word	0x40021800

08002e5c <FMC_BANK3_Init>:

/**
  * @brief  Initializes LCD IOs.
  */ 
static void FMC_BANK3_Init(void) 
{  
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b09c      	sub	sp, #112	; 0x70
 8002e60:	af00      	add	r7, sp, #0
  SRAM_HandleTypeDef hsram;
  FSMC_NORSRAM_TimingTypeDef sram_timing;

  /* Initialize the SRAM controller */
  FMC_BANK3_MspInit();
 8002e62:	f7ff ff77 	bl	8002d54 <FMC_BANK3_MspInit>
  
  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FSMC_NORSRAM_DEVICE;
 8002e66:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002e6a:	623b      	str	r3, [r7, #32]
  hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002e6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ee8 <FMC_BANK3_Init+0x8c>)
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Timing config */
  sram_timing.AddressSetupTime      = 3;
 8002e70:	2303      	movs	r3, #3
 8002e72:	607b      	str	r3, [r7, #4]
  sram_timing.AddressHoldTime       = 1;
 8002e74:	2301      	movs	r3, #1
 8002e76:	60bb      	str	r3, [r7, #8]
  sram_timing.DataSetupTime         = 4;
 8002e78:	2304      	movs	r3, #4
 8002e7a:	60fb      	str	r3, [r7, #12]
  sram_timing.BusTurnAroundDuration = 1;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	613b      	str	r3, [r7, #16]
  sram_timing.CLKDivision           = 2;
 8002e80:	2302      	movs	r3, #2
 8002e82:	617b      	str	r3, [r7, #20]
  sram_timing.DataLatency           = 2;
 8002e84:	2302      	movs	r3, #2
 8002e86:	61bb      	str	r3, [r7, #24]
  sram_timing.AccessMode            = FSMC_ACCESS_MODE_A;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	61fb      	str	r3, [r7, #28]
      
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK3;
 8002e8c:	2304      	movs	r3, #4
 8002e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002e90:	2300      	movs	r3, #0
 8002e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 8002e94:	2300      	movs	r3, #0
 8002e96:	633b      	str	r3, [r7, #48]	; 0x30
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002e98:	2310      	movs	r3, #16
 8002e9a:	637b      	str	r3, [r7, #52]	; 0x34
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	63bb      	str	r3, [r7, #56]	; 0x38
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	647b      	str	r3, [r7, #68]	; 0x44
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 8002eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eb0:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_ENABLE;
 8002eb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002eba:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 8002ec4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ec8:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.ContinuousClock    = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	65fb      	str	r3, [r7, #92]	; 0x5c

  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 8002ed2:	1d3a      	adds	r2, r7, #4
 8002ed4:	1d39      	adds	r1, r7, #4
 8002ed6:	f107 0320 	add.w	r3, r7, #32
 8002eda:	4618      	mov	r0, r3
 8002edc:	f006 fd7e 	bl	80099dc <HAL_SRAM_Init>
}
 8002ee0:	bf00      	nop
 8002ee2:	3770      	adds	r7, #112	; 0x70
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	a0000104 	.word	0xa0000104

08002eec <FMC_BANK3_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written 
  */
static void FMC_BANK3_WriteData(uint16_t Data) 
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3->RAM = Data;
 8002ef6:	f04f 42d0 	mov.w	r2, #1744830464	; 0x68000000
 8002efa:	88fb      	ldrh	r3, [r7, #6]
 8002efc:	8053      	strh	r3, [r2, #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002efe:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <FMC_BANK3_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
static void FMC_BANK3_WriteReg(uint8_t Reg) 
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	4603      	mov	r3, r0
 8002f16:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK3->REG = Reg;
 8002f18:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002f1c:	79fa      	ldrb	r2, [r7, #7]
 8002f1e:	b292      	uxth	r2, r2
 8002f20:	801a      	strh	r2, [r3, #0]
 8002f22:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <FMC_BANK3_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
static uint16_t FMC_BANK3_ReadData(void) 
{
 8002f32:	b480      	push	{r7}
 8002f34:	af00      	add	r7, sp, #0
  return FMC_BANK3->RAM;
 8002f36:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002f3a:	885b      	ldrh	r3, [r3, #2]
 8002f3c:	b29b      	uxth	r3, r3
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <LCD_IO_Init>:
/********************************* LINK LCD ***********************************/
/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  FMC_BANK3_Init();
 8002f4c:	f7ff ff86 	bl	8002e5c <FMC_BANK3_Init>
}
 8002f50:	bf00      	nop
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <LCD_IO_WriteData>:
/**
  * @brief  Writes data on LCD data register.
  * @param  RegValue: Data to be written
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3_WriteData(RegValue);
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff ffc3 	bl	8002eec <FMC_BANK3_WriteData>
}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <LCD_IO_WriteReg>:
/**
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	4603      	mov	r3, r0
 8002f76:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK3_WriteReg(Reg);
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff ffc7 	bl	8002f0e <FMC_BANK3_WriteReg>
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <LCD_IO_ReadData>:
/**
  * @brief  Reads data from LCD data register.
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  return FMC_BANK3_ReadData();
 8002f8c:	f7ff ffd1 	bl	8002f32 <FMC_BANK3_ReadData>
 8002f90:	4603      	mov	r3, r0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <LCD_IO_Delay>:
/**
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  */
void LCD_IO_Delay(uint32_t Delay)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fdca 	bl	8003b38 <HAL_Delay>
}
 8002fa4:	bf00      	nop
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in STM32F413H_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8002fb4:	f000 f80e 	bl	8002fd4 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8002fb8:	bf00      	nop
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  BSP_AUDIO_OUT_Error_CallBack();
 8002fc8:	f000 f80b 	bl	8002fe2 <BSP_AUDIO_OUT_Error_CallBack>
}
 8002fcc:	bf00      	nop
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
}
 8002fd8:	bf00      	nop
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	af00      	add	r7, sp, #0
}
 8002fe6:	bf00      	nop
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Reception complete callback.
  * @param  hi2s : I2S handle.
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8002ff8:	f000 f804 	bl	8003004 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8002ffc:	bf00      	nop
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	af00      	add	r7, sp, #0
 return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8003016:	2001      	movs	r0, #1
 8003018:	f000 f804 	bl	8003024 <BSP_LCD_InitEx>
 800301c:	4603      	mov	r3, r0
}
 800301e:	4618      	mov	r0, r3
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <BSP_LCD_InitEx>:
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  *         or LCD_ORIENTATION_LANDSCAPE_ROT180
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{ 
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	73fb      	strb	r3, [r7, #15]

  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 8003030:	4b2c      	ldr	r3, [pc, #176]	; (80030e4 <BSP_LCD_InitEx+0xc0>)
 8003032:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003036:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8003038:	4b2a      	ldr	r3, [pc, #168]	; (80030e4 <BSP_LCD_InitEx+0xc0>)
 800303a:	4a2b      	ldr	r2, [pc, #172]	; (80030e8 <BSP_LCD_InitEx+0xc4>)
 800303c:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 800303e:	4b29      	ldr	r3, [pc, #164]	; (80030e4 <BSP_LCD_InitEx+0xc0>)
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
  
  /* Initialize LCD special pins GPIOs */
  BSP_LCD_MspInit();
 8003044:	f000 fa48 	bl	80034d8 <BSP_LCD_MspInit>
  
  /* Backlight control signal assertion */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003048:	2201      	movs	r2, #1
 800304a:	2120      	movs	r1, #32
 800304c:	4827      	ldr	r0, [pc, #156]	; (80030ec <BSP_LCD_InitEx+0xc8>)
 800304e:	f001 ff4b 	bl	8004ee8 <HAL_GPIO_WritePin>
  
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8003052:	2200      	movs	r2, #0
 8003054:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003058:	4825      	ldr	r0, [pc, #148]	; (80030f0 <BSP_LCD_InitEx+0xcc>)
 800305a:	f001 ff45 	bl	8004ee8 <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 800305e:	2005      	movs	r0, #5
 8003060:	f000 fd6a 	bl	8003b38 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8003064:	2201      	movs	r2, #1
 8003066:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800306a:	4821      	ldr	r0, [pc, #132]	; (80030f0 <BSP_LCD_InitEx+0xcc>)
 800306c:	f001 ff3c 	bl	8004ee8 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8003070:	200a      	movs	r0, #10
 8003072:	f000 fd61 	bl	8003b38 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8003076:	2200      	movs	r2, #0
 8003078:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800307c:	481c      	ldr	r0, [pc, #112]	; (80030f0 <BSP_LCD_InitEx+0xcc>)
 800307e:	f001 ff33 	bl	8004ee8 <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 8003082:	2014      	movs	r0, #20
 8003084:	f000 fd58 	bl	8003b38 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8003088:	2201      	movs	r2, #1
 800308a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800308e:	4818      	ldr	r0, [pc, #96]	; (80030f0 <BSP_LCD_InitEx+0xcc>)
 8003090:	f001 ff2a 	bl	8004ee8 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8003094:	200a      	movs	r0, #10
 8003096:	f000 fd4f 	bl	8003b38 <HAL_Delay>
  
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 800309a:	4b16      	ldr	r3, [pc, #88]	; (80030f4 <BSP_LCD_InitEx+0xd0>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	4798      	blx	r3
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b85      	cmp	r3, #133	; 0x85
 80030a4:	d118      	bne.n	80030d8 <BSP_LCD_InitEx+0xb4>
  {    
    LcdDrv = &ST7789H2_drv;
 80030a6:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <BSP_LCD_InitEx+0xd4>)
 80030a8:	4a12      	ldr	r2, [pc, #72]	; (80030f4 <BSP_LCD_InitEx+0xd0>)
 80030aa:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 80030ac:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <BSP_LCD_InitEx+0xd4>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4798      	blx	r3
    
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d103      	bne.n	80030c2 <BSP_LCD_InitEx+0x9e>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT); 
 80030ba:	2000      	movs	r0, #0
 80030bc:	f7ff fabd 	bl	800263a <ST7789H2_SetOrientation>
 80030c0:	e005      	b.n	80030ce <BSP_LCD_InitEx+0xaa>
    }
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d102      	bne.n	80030ce <BSP_LCD_InitEx+0xaa>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_LANDSCAPE_ROT180);
 80030c8:	2002      	movs	r0, #2
 80030ca:	f7ff fab6 	bl	800263a <ST7789H2_SetOrientation>
    else
    {
      /* Default landscape orientation is selected */
    }
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80030ce:	480b      	ldr	r0, [pc, #44]	; (80030fc <BSP_LCD_InitEx+0xd8>)
 80030d0:	f000 f84e 	bl	8003170 <BSP_LCD_SetFont>
    
    ret = LCD_OK;   
 80030d4:	2300      	movs	r3, #0
 80030d6:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	2003dcb4 	.word	0x2003dcb4
 80030e8:	20000044 	.word	0x20000044
 80030ec:	40021000 	.word	0x40021000
 80030f0:	40020400 	.word	0x40020400
 80030f4:	20000004 	.word	0x20000004
 80030f8:	20000134 	.word	0x20000134
 80030fc:	20000054 	.word	0x20000054

08003100 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size. 
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelWidth());
 8003104:	4b03      	ldr	r3, [pc, #12]	; (8003114 <BSP_LCD_GetXSize+0x14>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310a:	4798      	blx	r3
 800310c:	4603      	mov	r3, r0
}
 800310e:	4618      	mov	r0, r3
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20000134 	.word	0x20000134

08003118 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size. 
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelHeight());
 800311c:	4b03      	ldr	r3, [pc, #12]	; (800312c <BSP_LCD_GetYSize+0x14>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003122:	4798      	blx	r3
 8003124:	4603      	mov	r3, r0
}
 8003126:	4618      	mov	r0, r3
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20000134 	.word	0x20000134

08003130 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 800313a:	88fb      	ldrh	r3, [r7, #6]
 800313c:	4a03      	ldr	r2, [pc, #12]	; (800314c <BSP_LCD_SetTextColor+0x1c>)
 800313e:	6013      	str	r3, [r2, #0]
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	2003dcb4 	.word	0x2003dcb4

08003150 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 800315a:	88fb      	ldrh	r3, [r7, #6]
 800315c:	4a03      	ldr	r2, [pc, #12]	; (800316c <BSP_LCD_SetBackColor+0x1c>)
 800315e:	6053      	str	r3, [r2, #4]
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	2003dcb4 	.word	0x2003dcb4

08003170 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 8003178:	4a04      	ldr	r2, [pc, #16]	; (800318c <BSP_LCD_SetFont+0x1c>)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6093      	str	r3, [r2, #8]
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	2003dcb4 	.word	0x2003dcb4

08003190 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b087      	sub	sp, #28
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 800319e:	2300      	movs	r3, #0
 80031a0:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor; 
 80031a2:	4b15      	ldr	r3, [pc, #84]	; (80031f8 <BSP_LCD_Clear+0x68>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 80031a8:	88fb      	ldrh	r3, [r7, #6]
 80031aa:	4a13      	ldr	r2, [pc, #76]	; (80031f8 <BSP_LCD_Clear+0x68>)
 80031ac:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 80031ae:	f7ff ffb3 	bl	8003118 <BSP_LCD_GetYSize>
 80031b2:	6138      	str	r0, [r7, #16]
  
  for(counter = 0; counter < y_size; counter++)
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	e00d      	b.n	80031d6 <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	b29c      	uxth	r4, r3
 80031be:	f7ff ff9f 	bl	8003100 <BSP_LCD_GetXSize>
 80031c2:	4603      	mov	r3, r0
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	461a      	mov	r2, r3
 80031c8:	4621      	mov	r1, r4
 80031ca:	2000      	movs	r0, #0
 80031cc:	f000 f8ee 	bl	80033ac <BSP_LCD_DrawHLine>
  for(counter = 0; counter < y_size; counter++)
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	3301      	adds	r3, #1
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d3ed      	bcc.n	80031ba <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup; 
 80031de:	4a06      	ldr	r2, [pc, #24]	; (80031f8 <BSP_LCD_Clear+0x68>)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 80031e4:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <BSP_LCD_Clear+0x68>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff ffa0 	bl	8003130 <BSP_LCD_SetTextColor>
}
 80031f0:	bf00      	nop
 80031f2:	371c      	adds	r7, #28
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd90      	pop	{r4, r7, pc}
 80031f8:	2003dcb4 	.word	0x2003dcb4

080031fc <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	80fb      	strh	r3, [r7, #6]
 8003206:	460b      	mov	r3, r1
 8003208:	80bb      	strh	r3, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800320e:	4b0f      	ldr	r3, [pc, #60]	; (800324c <BSP_LCD_DisplayChar+0x50>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8003218:	490c      	ldr	r1, [pc, #48]	; (800324c <BSP_LCD_DisplayChar+0x50>)
 800321a:	6889      	ldr	r1, [r1, #8]
 800321c:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800321e:	fb01 f103 	mul.w	r1, r1, r3
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8003222:	4b0a      	ldr	r3, [pc, #40]	; (800324c <BSP_LCD_DisplayChar+0x50>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	889b      	ldrh	r3, [r3, #4]
 8003228:	3307      	adds	r3, #7
 800322a:	2b00      	cmp	r3, #0
 800322c:	da00      	bge.n	8003230 <BSP_LCD_DisplayChar+0x34>
 800322e:	3307      	adds	r3, #7
 8003230:	10db      	asrs	r3, r3, #3
 8003232:	fb03 f301 	mul.w	r3, r3, r1
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8003236:	441a      	add	r2, r3
 8003238:	88b9      	ldrh	r1, [r7, #4]
 800323a:	88fb      	ldrh	r3, [r7, #6]
 800323c:	4618      	mov	r0, r3
 800323e:	f000 f9a7 	bl	8003590 <DrawChar>
}
 8003242:	bf00      	nop
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	2003dcb4 	.word	0x2003dcb4

08003250 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8003250:	b590      	push	{r4, r7, lr}
 8003252:	b089      	sub	sp, #36	; 0x24
 8003254:	af00      	add	r7, sp, #0
 8003256:	60ba      	str	r2, [r7, #8]
 8003258:	461a      	mov	r2, r3
 800325a:	4603      	mov	r3, r0
 800325c:	81fb      	strh	r3, [r7, #14]
 800325e:	460b      	mov	r3, r1
 8003260:	81bb      	strh	r3, [r7, #12]
 8003262:	4613      	mov	r3, r2
 8003264:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8003266:	2301      	movs	r3, #1
 8003268:	83fb      	strh	r3, [r7, #30]
 800326a:	2300      	movs	r3, #0
 800326c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800326e:	2300      	movs	r3, #0
 8003270:	61bb      	str	r3, [r7, #24]
 8003272:	2300      	movs	r3, #0
 8003274:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800327a:	e002      	b.n	8003282 <BSP_LCD_DisplayStringAt+0x32>
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	3301      	adds	r3, #1
 8003280:	61bb      	str	r3, [r7, #24]
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	1c5a      	adds	r2, r3, #1
 8003286:	617a      	str	r2, [r7, #20]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f6      	bne.n	800327c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 800328e:	f7ff ff37 	bl	8003100 <BSP_LCD_GetXSize>
 8003292:	4602      	mov	r2, r0
 8003294:	4b36      	ldr	r3, [pc, #216]	; (8003370 <BSP_LCD_DisplayStringAt+0x120>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	889b      	ldrh	r3, [r3, #4]
 800329a:	fbb2 f3f3 	udiv	r3, r2, r3
 800329e:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d014      	beq.n	80032d0 <BSP_LCD_DisplayStringAt+0x80>
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d00f      	beq.n	80032ca <BSP_LCD_DisplayStringAt+0x7a>
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d11e      	bne.n	80032ec <BSP_LCD_DisplayStringAt+0x9c>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	4a2e      	ldr	r2, [pc, #184]	; (8003370 <BSP_LCD_DisplayStringAt+0x120>)
 80032b6:	6892      	ldr	r2, [r2, #8]
 80032b8:	8892      	ldrh	r2, [r2, #4]
 80032ba:	fb02 f303 	mul.w	r3, r2, r3
 80032be:	085b      	lsrs	r3, r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	89fb      	ldrh	r3, [r7, #14]
 80032c4:	4413      	add	r3, r2
 80032c6:	83fb      	strh	r3, [r7, #30]
      break;
 80032c8:	e013      	b.n	80032f2 <BSP_LCD_DisplayStringAt+0xa2>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80032ca:	89fb      	ldrh	r3, [r7, #14]
 80032cc:	83fb      	strh	r3, [r7, #30]
      break;
 80032ce:	e010      	b.n	80032f2 <BSP_LCD_DisplayStringAt+0xa2>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	4b25      	ldr	r3, [pc, #148]	; (8003370 <BSP_LCD_DisplayStringAt+0x120>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	889b      	ldrh	r3, [r3, #4]
 80032de:	fb12 f303 	smulbb	r3, r2, r3
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	89fb      	ldrh	r3, [r7, #14]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	83fb      	strh	r3, [r7, #30]
      break;
 80032ea:	e002      	b.n	80032f2 <BSP_LCD_DisplayStringAt+0xa2>
    }    
  default:
    {
      refcolumn = Xpos;
 80032ec:	89fb      	ldrh	r3, [r7, #14]
 80032ee:	83fb      	strh	r3, [r7, #30]
      break;
 80032f0:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80032f2:	8bfb      	ldrh	r3, [r7, #30]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <BSP_LCD_DisplayStringAt+0xb0>
 80032f8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	da15      	bge.n	800332c <BSP_LCD_DisplayStringAt+0xdc>
  {
    refcolumn = 1;
 8003300:	2301      	movs	r3, #1
 8003302:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8003304:	e012      	b.n	800332c <BSP_LCD_DisplayStringAt+0xdc>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	781a      	ldrb	r2, [r3, #0]
 800330a:	89b9      	ldrh	r1, [r7, #12]
 800330c:	8bfb      	ldrh	r3, [r7, #30]
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff ff74 	bl	80031fc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8003314:	4b16      	ldr	r3, [pc, #88]	; (8003370 <BSP_LCD_DisplayStringAt+0x120>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	889a      	ldrh	r2, [r3, #4]
 800331a:	8bfb      	ldrh	r3, [r7, #30]
 800331c:	4413      	add	r3, r2
 800331e:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	3301      	adds	r3, #1
 8003324:	60bb      	str	r3, [r7, #8]
    i++;
 8003326:	8bbb      	ldrh	r3, [r7, #28]
 8003328:	3301      	adds	r3, #1
 800332a:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	bf14      	ite	ne
 8003334:	2301      	movne	r3, #1
 8003336:	2300      	moveq	r3, #0
 8003338:	b2dc      	uxtb	r4, r3
 800333a:	f7ff fee1 	bl	8003100 <BSP_LCD_GetXSize>
 800333e:	4601      	mov	r1, r0
 8003340:	8bbb      	ldrh	r3, [r7, #28]
 8003342:	4a0b      	ldr	r2, [pc, #44]	; (8003370 <BSP_LCD_DisplayStringAt+0x120>)
 8003344:	6892      	ldr	r2, [r2, #8]
 8003346:	8892      	ldrh	r2, [r2, #4]
 8003348:	fb02 f303 	mul.w	r3, r2, r3
 800334c:	1acb      	subs	r3, r1, r3
 800334e:	b29b      	uxth	r3, r3
 8003350:	4a07      	ldr	r2, [pc, #28]	; (8003370 <BSP_LCD_DisplayStringAt+0x120>)
 8003352:	6892      	ldr	r2, [r2, #8]
 8003354:	8892      	ldrh	r2, [r2, #4]
 8003356:	4293      	cmp	r3, r2
 8003358:	bf2c      	ite	cs
 800335a:	2301      	movcs	r3, #1
 800335c:	2300      	movcc	r3, #0
 800335e:	b2db      	uxtb	r3, r3
 8003360:	4023      	ands	r3, r4
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1ce      	bne.n	8003306 <BSP_LCD_DisplayStringAt+0xb6>
  }
}
 8003368:	bf00      	nop
 800336a:	3724      	adds	r7, #36	; 0x24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd90      	pop	{r4, r7, pc}
 8003370:	2003dcb4 	.word	0x2003dcb4

08003374 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	4603      	mov	r3, r0
 800337c:	80fb      	strh	r3, [r7, #6]
 800337e:	460b      	mov	r3, r1
 8003380:	80bb      	strh	r3, [r7, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	807b      	strh	r3, [r7, #2]
  if(LcdDrv->WritePixel != NULL)
 8003386:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <BSP_LCD_DrawPixel+0x34>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d006      	beq.n	800339e <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 8003390:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <BSP_LCD_DrawPixel+0x34>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	887a      	ldrh	r2, [r7, #2]
 8003398:	88b9      	ldrh	r1, [r7, #4]
 800339a:	88f8      	ldrh	r0, [r7, #6]
 800339c:	4798      	blx	r3
  }
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	20000134 	.word	0x20000134

080033ac <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80033ac:	b590      	push	{r4, r7, lr}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	80fb      	strh	r3, [r7, #6]
 80033b6:	460b      	mov	r3, r1
 80033b8:	80bb      	strh	r3, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
  
  if(LcdDrv->DrawHLine != NULL)
 80033c2:	4b15      	ldr	r3, [pc, #84]	; (8003418 <BSP_LCD_DrawHLine+0x6c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00a      	beq.n	80033e2 <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80033cc:	4b12      	ldr	r3, [pc, #72]	; (8003418 <BSP_LCD_DrawHLine+0x6c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6a1c      	ldr	r4, [r3, #32]
 80033d2:	4b12      	ldr	r3, [pc, #72]	; (800341c <BSP_LCD_DrawHLine+0x70>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	b298      	uxth	r0, r3
 80033d8:	887b      	ldrh	r3, [r7, #2]
 80033da:	88ba      	ldrh	r2, [r7, #4]
 80033dc:	88f9      	ldrh	r1, [r7, #6]
 80033de:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 80033e0:	e015      	b.n	800340e <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	e00e      	b.n	8003406 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	88fb      	ldrh	r3, [r7, #6]
 80033ee:	4413      	add	r3, r2
 80033f0:	b298      	uxth	r0, r3
 80033f2:	4b0a      	ldr	r3, [pc, #40]	; (800341c <BSP_LCD_DrawHLine+0x70>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	88bb      	ldrh	r3, [r7, #4]
 80033fa:	4619      	mov	r1, r3
 80033fc:	f7ff ffba 	bl	8003374 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	3301      	adds	r3, #1
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	887b      	ldrh	r3, [r7, #2]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	429a      	cmp	r2, r3
 800340c:	d3ec      	bcc.n	80033e8 <BSP_LCD_DrawHLine+0x3c>
}
 800340e:	bf00      	nop
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	bd90      	pop	{r4, r7, pc}
 8003416:	bf00      	nop
 8003418:	20000134 	.word	0x20000134
 800341c:	2003dcb4 	.word	0x2003dcb4

08003420 <BSP_LCD_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address.
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8003420:	b590      	push	{r4, r7, lr}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	603a      	str	r2, [r7, #0]
 800342a:	80fb      	strh	r3, [r7, #6]
 800342c:	460b      	mov	r3, r1
 800342e:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	60bb      	str	r3, [r7, #8]
 
  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	3312      	adds	r3, #18
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	3313      	adds	r3, #19
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	021b      	lsls	r3, r3, #8
 8003448:	441a      	add	r2, r3
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	3314      	adds	r3, #20
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	041b      	lsls	r3, r3, #16
 8003452:	441a      	add	r2, r3
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	3315      	adds	r3, #21
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	061b      	lsls	r3, r3, #24
 800345c:	4413      	add	r3, r2
 800345e:	60bb      	str	r3, [r7, #8]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	3316      	adds	r3, #22
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	3317      	adds	r3, #23
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	021b      	lsls	r3, r3, #8
 8003470:	441a      	add	r2, r3
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	3318      	adds	r3, #24
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	041b      	lsls	r3, r3, #16
 800347a:	441a      	add	r2, r3
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	3319      	adds	r3, #25
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	061b      	lsls	r3, r3, #24
 8003484:	4413      	add	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]
  
  SetDisplayWindow(Xpos, Ypos, width, height);
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	b29b      	uxth	r3, r3
 8003490:	88b9      	ldrh	r1, [r7, #4]
 8003492:	88f8      	ldrh	r0, [r7, #6]
 8003494:	f000 f914 	bl	80036c0 <SetDisplayWindow>
  
  if(LcdDrv->DrawBitmap != NULL)
 8003498:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <BSP_LCD_DrawBitmap+0xb4>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d006      	beq.n	80034b0 <BSP_LCD_DrawBitmap+0x90>
  {
    LcdDrv->DrawBitmap(Xpos, Ypos, pbmp);
 80034a2:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <BSP_LCD_DrawBitmap+0xb4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a8:	88b9      	ldrh	r1, [r7, #4]
 80034aa:	88f8      	ldrh	r0, [r7, #6]
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	4798      	blx	r3
  } 
  SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80034b0:	f7ff fe26 	bl	8003100 <BSP_LCD_GetXSize>
 80034b4:	4603      	mov	r3, r0
 80034b6:	b29c      	uxth	r4, r3
 80034b8:	f7ff fe2e 	bl	8003118 <BSP_LCD_GetYSize>
 80034bc:	4603      	mov	r3, r0
 80034be:	b29b      	uxth	r3, r3
 80034c0:	4622      	mov	r2, r4
 80034c2:	2100      	movs	r1, #0
 80034c4:	2000      	movs	r0, #0
 80034c6:	f000 f8fb 	bl	80036c0 <SetDisplayWindow>
}
 80034ca:	bf00      	nop
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd90      	pop	{r4, r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000134 	.word	0x20000134

080034d8 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LCD GPIO special pins MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIOs clock */
  LCD_RESET_GPIO_CLK_ENABLE();
 80034de:	2300      	movs	r3, #0
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	4b28      	ldr	r3, [pc, #160]	; (8003584 <BSP_LCD_MspInit+0xac>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	4a27      	ldr	r2, [pc, #156]	; (8003584 <BSP_LCD_MspInit+0xac>)
 80034e8:	f043 0302 	orr.w	r3, r3, #2
 80034ec:	6313      	str	r3, [r2, #48]	; 0x30
 80034ee:	4b25      	ldr	r3, [pc, #148]	; (8003584 <BSP_LCD_MspInit+0xac>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	68bb      	ldr	r3, [r7, #8]
  LCD_TE_GPIO_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	607b      	str	r3, [r7, #4]
 80034fe:	4b21      	ldr	r3, [pc, #132]	; (8003584 <BSP_LCD_MspInit+0xac>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	4a20      	ldr	r2, [pc, #128]	; (8003584 <BSP_LCD_MspInit+0xac>)
 8003504:	f043 0302 	orr.w	r3, r3, #2
 8003508:	6313      	str	r3, [r2, #48]	; 0x30
 800350a:	4b1e      	ldr	r3, [pc, #120]	; (8003584 <BSP_LCD_MspInit+0xac>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	607b      	str	r3, [r7, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	603b      	str	r3, [r7, #0]
 800351a:	4b1a      	ldr	r3, [pc, #104]	; (8003584 <BSP_LCD_MspInit+0xac>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	4a19      	ldr	r2, [pc, #100]	; (8003584 <BSP_LCD_MspInit+0xac>)
 8003520:	f043 0310 	orr.w	r3, r3, #16
 8003524:	6313      	str	r3, [r2, #48]	; 0x30
 8003526:	4b17      	ldr	r3, [pc, #92]	; (8003584 <BSP_LCD_MspInit+0xac>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	f003 0310 	and.w	r3, r3, #16
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 8003532:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003536:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800353c:	2302      	movs	r3, #2
 800353e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003540:	2301      	movs	r3, #1
 8003542:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 8003544:	f107 030c 	add.w	r3, r7, #12
 8003548:	4619      	mov	r1, r3
 800354a:	480f      	ldr	r0, [pc, #60]	; (8003588 <BSP_LCD_MspInit+0xb0>)
 800354c:	f001 fb22 	bl	8004b94 <HAL_GPIO_Init>

  /* LCD_TE GPIO configuration */
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 8003550:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003554:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8003556:	2300      	movs	r3, #0
 8003558:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 800355a:	f107 030c 	add.w	r3, r7, #12
 800355e:	4619      	mov	r1, r3
 8003560:	4809      	ldr	r0, [pc, #36]	; (8003588 <BSP_LCD_MspInit+0xb0>)
 8003562:	f001 fb17 	bl	8004b94 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 8003566:	2320      	movs	r3, #32
 8003568:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800356a:	2301      	movs	r3, #1
 800356c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800356e:	f107 030c 	add.w	r3, r7, #12
 8003572:	4619      	mov	r1, r3
 8003574:	4805      	ldr	r0, [pc, #20]	; (800358c <BSP_LCD_MspInit+0xb4>)
 8003576:	f001 fb0d 	bl	8004b94 <HAL_GPIO_Init>
}
 800357a:	bf00      	nop
 800357c:	3720      	adds	r7, #32
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40023800 	.word	0x40023800
 8003588:	40020400 	.word	0x40020400
 800358c:	40021000 	.word	0x40021000

08003590 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	603a      	str	r2, [r7, #0]
 800359a:	80fb      	strh	r3, [r7, #6]
 800359c:	460b      	mov	r3, r1
 800359e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61fb      	str	r3, [r7, #28]
 80035a4:	2300      	movs	r3, #0
 80035a6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;
  
  height = DrawProp.pFont->Height;
 80035a8:	4b44      	ldr	r3, [pc, #272]	; (80036bc <DrawChar+0x12c>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	88db      	ldrh	r3, [r3, #6]
 80035ae:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 80035b0:	4b42      	ldr	r3, [pc, #264]	; (80036bc <DrawChar+0x12c>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	889b      	ldrh	r3, [r3, #4]
 80035b6:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80035b8:	8a3b      	ldrh	r3, [r7, #16]
 80035ba:	3307      	adds	r3, #7
 80035bc:	2b00      	cmp	r3, #0
 80035be:	da00      	bge.n	80035c2 <DrawChar+0x32>
 80035c0:	3307      	adds	r3, #7
 80035c2:	10db      	asrs	r3, r3, #3
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	8a3b      	ldrh	r3, [r7, #16]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]
 80035d6:	e069      	b.n	80036ac <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80035d8:	8a3b      	ldrh	r3, [r7, #16]
 80035da:	3307      	adds	r3, #7
 80035dc:	2b00      	cmp	r3, #0
 80035de:	da00      	bge.n	80035e2 <DrawChar+0x52>
 80035e0:	3307      	adds	r3, #7
 80035e2:	10db      	asrs	r3, r3, #3
 80035e4:	461a      	mov	r2, r3
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	fb03 f302 	mul.w	r3, r3, r2
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	4413      	add	r3, r2
 80035f0:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80035f2:	8a3b      	ldrh	r3, [r7, #16]
 80035f4:	3307      	adds	r3, #7
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	da00      	bge.n	80035fc <DrawChar+0x6c>
 80035fa:	3307      	adds	r3, #7
 80035fc:	10db      	asrs	r3, r3, #3
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d002      	beq.n	8003608 <DrawChar+0x78>
 8003602:	2b02      	cmp	r3, #2
 8003604:	d004      	beq.n	8003610 <DrawChar+0x80>
 8003606:	e00c      	b.n	8003622 <DrawChar+0x92>
    {
    case 1:
      line =  pchar[0];
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	617b      	str	r3, [r7, #20]
      break;    
 800360e:	e016      	b.n	800363e <DrawChar+0xae>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	021b      	lsls	r3, r3, #8
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	3201      	adds	r2, #1
 800361a:	7812      	ldrb	r2, [r2, #0]
 800361c:	4313      	orrs	r3, r2
 800361e:	617b      	str	r3, [r7, #20]
      break;
 8003620:	e00d      	b.n	800363e <DrawChar+0xae>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	041a      	lsls	r2, r3, #16
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	3301      	adds	r3, #1
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	021b      	lsls	r3, r3, #8
 8003630:	4313      	orrs	r3, r2
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	3202      	adds	r2, #2
 8003636:	7812      	ldrb	r2, [r2, #0]
 8003638:	4313      	orrs	r3, r2
 800363a:	617b      	str	r3, [r7, #20]
      break;
 800363c:	bf00      	nop
    }  
    
    for (j = 0; j < width; j++)
 800363e:	2300      	movs	r3, #0
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	e029      	b.n	8003698 <DrawChar+0x108>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003644:	8a3a      	ldrh	r2, [r7, #16]
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	1ad2      	subs	r2, r2, r3
 800364a:	7bfb      	ldrb	r3, [r7, #15]
 800364c:	4413      	add	r3, r2
 800364e:	3b01      	subs	r3, #1
 8003650:	2201      	movs	r2, #1
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	461a      	mov	r2, r3
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	4013      	ands	r3, r2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00c      	beq.n	800367a <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	b29a      	uxth	r2, r3
 8003664:	88fb      	ldrh	r3, [r7, #6]
 8003666:	4413      	add	r3, r2
 8003668:	b298      	uxth	r0, r3
 800366a:	4b14      	ldr	r3, [pc, #80]	; (80036bc <DrawChar+0x12c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	b29a      	uxth	r2, r3
 8003670:	88bb      	ldrh	r3, [r7, #4]
 8003672:	4619      	mov	r1, r3
 8003674:	f7ff fe7e 	bl	8003374 <BSP_LCD_DrawPixel>
 8003678:	e00b      	b.n	8003692 <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	b29a      	uxth	r2, r3
 800367e:	88fb      	ldrh	r3, [r7, #6]
 8003680:	4413      	add	r3, r2
 8003682:	b298      	uxth	r0, r3
 8003684:	4b0d      	ldr	r3, [pc, #52]	; (80036bc <DrawChar+0x12c>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	b29a      	uxth	r2, r3
 800368a:	88bb      	ldrh	r3, [r7, #4]
 800368c:	4619      	mov	r1, r3
 800368e:	f7ff fe71 	bl	8003374 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	3301      	adds	r3, #1
 8003696:	61bb      	str	r3, [r7, #24]
 8003698:	8a3b      	ldrh	r3, [r7, #16]
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	429a      	cmp	r2, r3
 800369e:	d3d1      	bcc.n	8003644 <DrawChar+0xb4>
      } 
    }
    Ypos++;
 80036a0:	88bb      	ldrh	r3, [r7, #4]
 80036a2:	3301      	adds	r3, #1
 80036a4:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	3301      	adds	r3, #1
 80036aa:	61fb      	str	r3, [r7, #28]
 80036ac:	8a7b      	ldrh	r3, [r7, #18]
 80036ae:	69fa      	ldr	r2, [r7, #28]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d391      	bcc.n	80035d8 <DrawChar+0x48>
  }
}
 80036b4:	bf00      	nop
 80036b6:	3720      	adds	r7, #32
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	2003dcb4 	.word	0x2003dcb4

080036c0 <SetDisplayWindow>:
  * @param  Ypos: LCD Y position
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  */
static void SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80036c0:	b590      	push	{r4, r7, lr}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	4604      	mov	r4, r0
 80036c8:	4608      	mov	r0, r1
 80036ca:	4611      	mov	r1, r2
 80036cc:	461a      	mov	r2, r3
 80036ce:	4623      	mov	r3, r4
 80036d0:	80fb      	strh	r3, [r7, #6]
 80036d2:	4603      	mov	r3, r0
 80036d4:	80bb      	strh	r3, [r7, #4]
 80036d6:	460b      	mov	r3, r1
 80036d8:	807b      	strh	r3, [r7, #2]
 80036da:	4613      	mov	r3, r2
 80036dc:	803b      	strh	r3, [r7, #0]
  if(LcdDrv->SetDisplayWindow != NULL)
 80036de:	4b08      	ldr	r3, [pc, #32]	; (8003700 <SetDisplayWindow+0x40>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d007      	beq.n	80036f8 <SetDisplayWindow+0x38>
  {
    LcdDrv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <SetDisplayWindow+0x40>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	69dc      	ldr	r4, [r3, #28]
 80036ee:	883b      	ldrh	r3, [r7, #0]
 80036f0:	887a      	ldrh	r2, [r7, #2]
 80036f2:	88b9      	ldrh	r1, [r7, #4]
 80036f4:	88f8      	ldrh	r0, [r7, #6]
 80036f6:	47a0      	blx	r4
  }  
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd90      	pop	{r4, r7, pc}
 8003700:	20000134 	.word	0x20000134

08003704 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{ 
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	71fb      	strb	r3, [r7, #7]
  
  /* uSD device interface configuration */
  uSdHandle.Instance = SDIO;
 800370e:	4b21      	ldr	r3, [pc, #132]	; (8003794 <BSP_SD_Init+0x90>)
 8003710:	4a21      	ldr	r2, [pc, #132]	; (8003798 <BSP_SD_Init+0x94>)
 8003712:	601a      	str	r2, [r3, #0]

  uSdHandle.Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003714:	4b1f      	ldr	r3, [pc, #124]	; (8003794 <BSP_SD_Init+0x90>)
 8003716:	2200      	movs	r2, #0
 8003718:	605a      	str	r2, [r3, #4]
  uSdHandle.Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800371a:	4b1e      	ldr	r3, [pc, #120]	; (8003794 <BSP_SD_Init+0x90>)
 800371c:	2200      	movs	r2, #0
 800371e:	609a      	str	r2, [r3, #8]
  uSdHandle.Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003720:	4b1c      	ldr	r3, [pc, #112]	; (8003794 <BSP_SD_Init+0x90>)
 8003722:	2200      	movs	r2, #0
 8003724:	60da      	str	r2, [r3, #12]
  uSdHandle.Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003726:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <BSP_SD_Init+0x90>)
 8003728:	2200      	movs	r2, #0
 800372a:	611a      	str	r2, [r3, #16]
  uSdHandle.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 800372c:	4b19      	ldr	r3, [pc, #100]	; (8003794 <BSP_SD_Init+0x90>)
 800372e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003732:	615a      	str	r2, [r3, #20]
  uSdHandle.Init.ClockDiv            = SDIO_TRANSFER_CLK_DIV;
 8003734:	4b17      	ldr	r3, [pc, #92]	; (8003794 <BSP_SD_Init+0x90>)
 8003736:	2200      	movs	r2, #0
 8003738:	619a      	str	r2, [r3, #24]
  
  /* Msp SD Detect pin initialization */
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 800373a:	2100      	movs	r1, #0
 800373c:	4815      	ldr	r0, [pc, #84]	; (8003794 <BSP_SD_Init+0x90>)
 800373e:	f000 f971 	bl	8003a24 <BSP_SD_Detect_MspInit>
  
  /* Check if SD card is present */
  if(BSP_SD_IsDetected() != SD_PRESENT)
 8003742:	f000 f82b 	bl	800379c <BSP_SD_IsDetected>
 8003746:	4603      	mov	r3, r0
 8003748:	2b01      	cmp	r3, #1
 800374a:	d001      	beq.n	8003750 <BSP_SD_Init+0x4c>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800374c:	2302      	movs	r3, #2
 800374e:	e01c      	b.n	800378a <BSP_SD_Init+0x86>
  }
  
  /* Msp SD initialization */
  BSP_SD_MspInit(&uSdHandle, NULL);
 8003750:	2100      	movs	r1, #0
 8003752:	4810      	ldr	r0, [pc, #64]	; (8003794 <BSP_SD_Init+0x90>)
 8003754:	f000 f872 	bl	800383c <BSP_SD_MspInit>

  /* HAL SD initialization */
  if(HAL_SD_Init(&uSdHandle) != HAL_OK)
 8003758:	480e      	ldr	r0, [pc, #56]	; (8003794 <BSP_SD_Init+0x90>)
 800375a:	f004 ffc7 	bl	80086ec <HAL_SD_Init>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <BSP_SD_Init+0x64>
  {
    sd_state = MSD_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	71fb      	strb	r3, [r7, #7]
  }
  
  /* Configure SD Bus width */
  if(sd_state == MSD_OK)
 8003768:	79fb      	ldrb	r3, [r7, #7]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10c      	bne.n	8003788 <BSP_SD_Init+0x84>
  {
    /* Enable wide operation */
    if(HAL_SD_ConfigWideBusOperation(&uSdHandle, SDIO_BUS_WIDE_4B) != HAL_OK)
 800376e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003772:	4808      	ldr	r0, [pc, #32]	; (8003794 <BSP_SD_Init+0x90>)
 8003774:	f005 fdb2 	bl	80092dc <HAL_SD_ConfigWideBusOperation>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <BSP_SD_Init+0x80>
    {
      sd_state = MSD_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	71fb      	strb	r3, [r7, #7]
 8003782:	e001      	b.n	8003788 <BSP_SD_Init+0x84>
    }
    else
    {
      sd_state = MSD_OK;
 8003784:	2300      	movs	r3, #0
 8003786:	71fb      	strb	r3, [r7, #7]
    }
  }
  
  return  sd_state;
 8003788:	79fb      	ldrb	r3, [r7, #7]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	2003dcc0 	.word	0x2003dcc0
 8003798:	40012c00 	.word	0x40012c00

0800379c <BSP_SD_IsDetected>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80037a2:	2301      	movs	r3, #1
 80037a4:	71fb      	strb	r3, [r7, #7]
  
  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 80037a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80037aa:	4807      	ldr	r0, [pc, #28]	; (80037c8 <BSP_SD_IsDetected+0x2c>)
 80037ac:	f001 fb84 	bl	8004eb8 <HAL_GPIO_ReadPin>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <BSP_SD_IsDetected+0x1e>
  {
    status = SD_NOT_PRESENT;
 80037b6:	2300      	movs	r3, #0
 80037b8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80037ba:	79fb      	ldrb	r3, [r7, #7]
 80037bc:	b2db      	uxtb	r3, r3
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40021400 	.word	0x40021400

080037cc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	603b      	str	r3, [r7, #0]
  if(HAL_SD_ReadBlocks(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	68f9      	ldr	r1, [r7, #12]
 80037e4:	4806      	ldr	r0, [pc, #24]	; (8003800 <BSP_SD_ReadBlocks+0x34>)
 80037e6:	f005 f811 	bl	800880c <HAL_SD_ReadBlocks>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <BSP_SD_ReadBlocks+0x28>
  {
    return MSD_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e000      	b.n	80037f6 <BSP_SD_ReadBlocks+0x2a>
  }
  else
  {
    return MSD_OK;
 80037f4:	2300      	movs	r3, #0
  }
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	2003dcc0 	.word	0x2003dcc0

08003804 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af02      	add	r7, sp, #8
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	603b      	str	r3, [r7, #0]
  if(HAL_SD_WriteBlocks(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	68f9      	ldr	r1, [r7, #12]
 800381c:	4806      	ldr	r0, [pc, #24]	; (8003838 <BSP_SD_WriteBlocks+0x34>)
 800381e:	f005 f9ed 	bl	8008bfc <HAL_SD_WriteBlocks>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <BSP_SD_WriteBlocks+0x28>
  {
    return MSD_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e000      	b.n	800382e <BSP_SD_WriteBlocks+0x2a>
  }
  else
  {
    return MSD_OK;
 800382c:	2300      	movs	r3, #0
  }
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	2003dcc0 	.word	0x2003dcc0

0800383c <BSP_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd: SD handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08c      	sub	sp, #48	; 0x30
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Params);

  /* Enable SDIO clock */
  __HAL_RCC_SDIO_CLK_ENABLE();
 8003846:	2300      	movs	r3, #0
 8003848:	61bb      	str	r3, [r7, #24]
 800384a:	4b6f      	ldr	r3, [pc, #444]	; (8003a08 <BSP_SD_MspInit+0x1cc>)
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	4a6e      	ldr	r2, [pc, #440]	; (8003a08 <BSP_SD_MspInit+0x1cc>)
 8003850:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003854:	6453      	str	r3, [r2, #68]	; 0x44
 8003856:	4b6c      	ldr	r3, [pc, #432]	; (8003a08 <BSP_SD_MspInit+0x1cc>)
 8003858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800385e:	61bb      	str	r3, [r7, #24]
 8003860:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable DMA2 clocks */
  __DMAx_TxRx_CLK_ENABLE();
 8003862:	2300      	movs	r3, #0
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	4b68      	ldr	r3, [pc, #416]	; (8003a08 <BSP_SD_MspInit+0x1cc>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	4a67      	ldr	r2, [pc, #412]	; (8003a08 <BSP_SD_MspInit+0x1cc>)
 800386c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003870:	6313      	str	r3, [r2, #48]	; 0x30
 8003872:	4b65      	ldr	r3, [pc, #404]	; (8003a08 <BSP_SD_MspInit+0x1cc>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	697b      	ldr	r3, [r7, #20]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800387e:	2300      	movs	r3, #0
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	4b61      	ldr	r3, [pc, #388]	; (8003a08 <BSP_SD_MspInit+0x1cc>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	4a60      	ldr	r2, [pc, #384]	; (8003a08 <BSP_SD_MspInit+0x1cc>)
 8003888:	f043 0304 	orr.w	r3, r3, #4
 800388c:	6313      	str	r3, [r2, #48]	; 0x30
 800388e:	4b5e      	ldr	r3, [pc, #376]	; (8003a08 <BSP_SD_MspInit+0x1cc>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	4b5a      	ldr	r3, [pc, #360]	; (8003a08 <BSP_SD_MspInit+0x1cc>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	4a59      	ldr	r2, [pc, #356]	; (8003a08 <BSP_SD_MspInit+0x1cc>)
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	6313      	str	r3, [r2, #48]	; 0x30
 80038aa:	4b57      	ldr	r3, [pc, #348]	; (8003a08 <BSP_SD_MspInit+0x1cc>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80038b6:	2302      	movs	r3, #2
 80038b8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80038ba:	2301      	movs	r3, #1
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80038be:	2303      	movs	r3, #3
 80038c0:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_SDIO;
 80038c2:	230c      	movs	r3, #12
 80038c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* GPIOC configuration: SD_D[0..3] and SD_clk */
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80038c6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80038ca:	61fb      	str	r3, [r7, #28]
   
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80038cc:	f107 031c 	add.w	r3, r7, #28
 80038d0:	4619      	mov	r1, r3
 80038d2:	484e      	ldr	r0, [pc, #312]	; (8003a0c <BSP_SD_MspInit+0x1d0>)
 80038d4:	f001 f95e 	bl	8004b94 <HAL_GPIO_Init>

  /* GPIOA configuration: SD cmd */
  gpio_init_structure.Pin = GPIO_PIN_6;
 80038d8:	2340      	movs	r3, #64	; 0x40
 80038da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 80038dc:	f107 031c 	add.w	r3, r7, #28
 80038e0:	4619      	mov	r1, r3
 80038e2:	484b      	ldr	r0, [pc, #300]	; (8003a10 <BSP_SD_MspInit+0x1d4>)
 80038e4:	f001 f956 	bl	8004b94 <HAL_GPIO_Init>

  /* NVIC configuration for SDIO interrupts */
  HAL_NVIC_SetPriority(SDIO_IRQn, 0x0E, 0x00);
 80038e8:	2200      	movs	r2, #0
 80038ea:	210e      	movs	r1, #14
 80038ec:	2031      	movs	r0, #49	; 0x31
 80038ee:	f000 fc6f 	bl	80041d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80038f2:	2031      	movs	r0, #49	; 0x31
 80038f4:	f000 fc88 	bl	8004208 <HAL_NVIC_EnableIRQ>
    
  /* Configure DMA Rx parameters */
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 80038f8:	4b46      	ldr	r3, [pc, #280]	; (8003a14 <BSP_SD_MspInit+0x1d8>)
 80038fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038fe:	605a      	str	r2, [r3, #4]
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8003900:	4b44      	ldr	r3, [pc, #272]	; (8003a14 <BSP_SD_MspInit+0x1d8>)
 8003902:	2200      	movs	r2, #0
 8003904:	609a      	str	r2, [r3, #8]
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003906:	4b43      	ldr	r3, [pc, #268]	; (8003a14 <BSP_SD_MspInit+0x1d8>)
 8003908:	2200      	movs	r2, #0
 800390a:	60da      	str	r2, [r3, #12]
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800390c:	4b41      	ldr	r3, [pc, #260]	; (8003a14 <BSP_SD_MspInit+0x1d8>)
 800390e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003912:	611a      	str	r2, [r3, #16]
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003914:	4b3f      	ldr	r3, [pc, #252]	; (8003a14 <BSP_SD_MspInit+0x1d8>)
 8003916:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800391a:	615a      	str	r2, [r3, #20]
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800391c:	4b3d      	ldr	r3, [pc, #244]	; (8003a14 <BSP_SD_MspInit+0x1d8>)
 800391e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003922:	619a      	str	r2, [r3, #24]
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8003924:	4b3b      	ldr	r3, [pc, #236]	; (8003a14 <BSP_SD_MspInit+0x1d8>)
 8003926:	2220      	movs	r2, #32
 8003928:	61da      	str	r2, [r3, #28]
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 800392a:	4b3a      	ldr	r3, [pc, #232]	; (8003a14 <BSP_SD_MspInit+0x1d8>)
 800392c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003930:	621a      	str	r2, [r3, #32]
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8003932:	4b38      	ldr	r3, [pc, #224]	; (8003a14 <BSP_SD_MspInit+0x1d8>)
 8003934:	2204      	movs	r2, #4
 8003936:	625a      	str	r2, [r3, #36]	; 0x24
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003938:	4b36      	ldr	r3, [pc, #216]	; (8003a14 <BSP_SD_MspInit+0x1d8>)
 800393a:	2203      	movs	r2, #3
 800393c:	629a      	str	r2, [r3, #40]	; 0x28
  dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 800393e:	4b35      	ldr	r3, [pc, #212]	; (8003a14 <BSP_SD_MspInit+0x1d8>)
 8003940:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003944:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8003946:	4b33      	ldr	r3, [pc, #204]	; (8003a14 <BSP_SD_MspInit+0x1d8>)
 8003948:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800394c:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 800394e:	4b31      	ldr	r3, [pc, #196]	; (8003a14 <BSP_SD_MspInit+0x1d8>)
 8003950:	4a31      	ldr	r2, [pc, #196]	; (8003a18 <BSP_SD_MspInit+0x1dc>)
 8003952:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a2f      	ldr	r2, [pc, #188]	; (8003a14 <BSP_SD_MspInit+0x1d8>)
 8003958:	641a      	str	r2, [r3, #64]	; 0x40
 800395a:	4a2e      	ldr	r2, [pc, #184]	; (8003a14 <BSP_SD_MspInit+0x1d8>)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_rx_handle);
 8003960:	482c      	ldr	r0, [pc, #176]	; (8003a14 <BSP_SD_MspInit+0x1d8>)
 8003962:	f000 ff2f 	bl	80047c4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_rx_handle);
 8003966:	482b      	ldr	r0, [pc, #172]	; (8003a14 <BSP_SD_MspInit+0x1d8>)
 8003968:	f000 fe7e 	bl	8004668 <HAL_DMA_Init>
  
  /* Configure DMA Tx parameters */
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 800396c:	4b2b      	ldr	r3, [pc, #172]	; (8003a1c <BSP_SD_MspInit+0x1e0>)
 800396e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003972:	605a      	str	r2, [r3, #4]
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8003974:	4b29      	ldr	r3, [pc, #164]	; (8003a1c <BSP_SD_MspInit+0x1e0>)
 8003976:	2240      	movs	r2, #64	; 0x40
 8003978:	609a      	str	r2, [r3, #8]
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 800397a:	4b28      	ldr	r3, [pc, #160]	; (8003a1c <BSP_SD_MspInit+0x1e0>)
 800397c:	2200      	movs	r2, #0
 800397e:	60da      	str	r2, [r3, #12]
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003980:	4b26      	ldr	r3, [pc, #152]	; (8003a1c <BSP_SD_MspInit+0x1e0>)
 8003982:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003986:	611a      	str	r2, [r3, #16]
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003988:	4b24      	ldr	r3, [pc, #144]	; (8003a1c <BSP_SD_MspInit+0x1e0>)
 800398a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800398e:	615a      	str	r2, [r3, #20]
  dma_tx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003990:	4b22      	ldr	r3, [pc, #136]	; (8003a1c <BSP_SD_MspInit+0x1e0>)
 8003992:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003996:	619a      	str	r2, [r3, #24]
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 8003998:	4b20      	ldr	r3, [pc, #128]	; (8003a1c <BSP_SD_MspInit+0x1e0>)
 800399a:	2220      	movs	r2, #32
 800399c:	61da      	str	r2, [r3, #28]
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 800399e:	4b1f      	ldr	r3, [pc, #124]	; (8003a1c <BSP_SD_MspInit+0x1e0>)
 80039a0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80039a4:	621a      	str	r2, [r3, #32]
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 80039a6:	4b1d      	ldr	r3, [pc, #116]	; (8003a1c <BSP_SD_MspInit+0x1e0>)
 80039a8:	2204      	movs	r2, #4
 80039aa:	625a      	str	r2, [r3, #36]	; 0x24
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80039ac:	4b1b      	ldr	r3, [pc, #108]	; (8003a1c <BSP_SD_MspInit+0x1e0>)
 80039ae:	2203      	movs	r2, #3
 80039b0:	629a      	str	r2, [r3, #40]	; 0x28
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 80039b2:	4b1a      	ldr	r3, [pc, #104]	; (8003a1c <BSP_SD_MspInit+0x1e0>)
 80039b4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80039b8:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 80039ba:	4b18      	ldr	r3, [pc, #96]	; (8003a1c <BSP_SD_MspInit+0x1e0>)
 80039bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80039c0:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 80039c2:	4b16      	ldr	r3, [pc, #88]	; (8003a1c <BSP_SD_MspInit+0x1e0>)
 80039c4:	4a16      	ldr	r2, [pc, #88]	; (8003a20 <BSP_SD_MspInit+0x1e4>)
 80039c6:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a14      	ldr	r2, [pc, #80]	; (8003a1c <BSP_SD_MspInit+0x1e0>)
 80039cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80039ce:	4a13      	ldr	r2, [pc, #76]	; (8003a1c <BSP_SD_MspInit+0x1e0>)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_tx_handle);
 80039d4:	4811      	ldr	r0, [pc, #68]	; (8003a1c <BSP_SD_MspInit+0x1e0>)
 80039d6:	f000 fef5 	bl	80047c4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_tx_handle); 
 80039da:	4810      	ldr	r0, [pc, #64]	; (8003a1c <BSP_SD_MspInit+0x1e0>)
 80039dc:	f000 fe44 	bl	8004668 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0F, 0x00);
 80039e0:	2200      	movs	r2, #0
 80039e2:	210f      	movs	r1, #15
 80039e4:	203b      	movs	r0, #59	; 0x3b
 80039e6:	f000 fbf3 	bl	80041d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 80039ea:	203b      	movs	r0, #59	; 0x3b
 80039ec:	f000 fc0c 	bl	8004208 <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 0x0F, 0x00);
 80039f0:	2200      	movs	r2, #0
 80039f2:	210f      	movs	r1, #15
 80039f4:	2045      	movs	r0, #69	; 0x45
 80039f6:	f000 fbeb 	bl	80041d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 80039fa:	2045      	movs	r0, #69	; 0x45
 80039fc:	f000 fc04 	bl	8004208 <HAL_NVIC_EnableIRQ>
}
 8003a00:	bf00      	nop
 8003a02:	3730      	adds	r7, #48	; 0x30
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	40020800 	.word	0x40020800
 8003a10:	40020000 	.word	0x40020000
 8003a14:	20000138 	.word	0x20000138
 8003a18:	40026458 	.word	0x40026458
 8003a1c:	20000198 	.word	0x20000198
 8003a20:	400264a0 	.word	0x400264a0

08003a24 <BSP_SD_Detect_MspInit>:
  * @brief  Initializes the SD Detect pin MSP.
  * @param  hsd: SD handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Params);
  
  SD_DETECT_GPIO_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60bb      	str	r3, [r7, #8]
 8003a32:	4b0f      	ldr	r3, [pc, #60]	; (8003a70 <BSP_SD_Detect_MspInit+0x4c>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	4a0e      	ldr	r2, [pc, #56]	; (8003a70 <BSP_SD_Detect_MspInit+0x4c>)
 8003a38:	f043 0320 	orr.w	r3, r3, #32
 8003a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3e:	4b0c      	ldr	r3, [pc, #48]	; (8003a70 <BSP_SD_Detect_MspInit+0x4c>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	60bb      	str	r3, [r7, #8]
 8003a48:	68bb      	ldr	r3, [r7, #8]

  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin       = SD_DETECT_PIN;
 8003a4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a4e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8003a50:	2300      	movs	r3, #0
 8003a52:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003a54:	2301      	movs	r3, #1
 8003a56:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8003a5c:	f107 030c 	add.w	r3, r7, #12
 8003a60:	4619      	mov	r1, r3
 8003a62:	4804      	ldr	r0, [pc, #16]	; (8003a74 <BSP_SD_Detect_MspInit+0x50>)
 8003a64:	f001 f896 	bl	8004b94 <HAL_GPIO_Init>
}
 8003a68:	bf00      	nop
 8003a6a:	3720      	adds	r7, #32
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40023800 	.word	0x40023800
 8003a74:	40021400 	.word	0x40021400

08003a78 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  return((HAL_SD_GetCardState(&uSdHandle) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8003a7c:	4805      	ldr	r0, [pc, #20]	; (8003a94 <BSP_SD_GetCardState+0x1c>)
 8003a7e:	f005 fca9 	bl	80093d4 <HAL_SD_GetCardState>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	bf14      	ite	ne
 8003a88:	2301      	movne	r3, #1
 8003a8a:	2300      	moveq	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	2003dcc0 	.word	0x2003dcc0

08003a98 <BSP_SD_GetCardInfo>:
/**
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	4803      	ldr	r0, [pc, #12]	; (8003ab0 <BSP_SD_GetCardInfo+0x18>)
 8003aa4:	f005 fbee 	bl	8009284 <HAL_SD_GetCardInfo>
}
 8003aa8:	bf00      	nop
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	2003dcc0 	.word	0x2003dcc0

08003ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ab8:	4b0e      	ldr	r3, [pc, #56]	; (8003af4 <HAL_Init+0x40>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a0d      	ldr	r2, [pc, #52]	; (8003af4 <HAL_Init+0x40>)
 8003abe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ac2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ac4:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <HAL_Init+0x40>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a0a      	ldr	r2, [pc, #40]	; (8003af4 <HAL_Init+0x40>)
 8003aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ace:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ad0:	4b08      	ldr	r3, [pc, #32]	; (8003af4 <HAL_Init+0x40>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a07      	ldr	r2, [pc, #28]	; (8003af4 <HAL_Init+0x40>)
 8003ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ada:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003adc:	2003      	movs	r0, #3
 8003ade:	f000 fb6c 	bl	80041ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	f7fe fbb6 	bl	8002254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ae8:	f7fd fe3e 	bl	8001768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40023c00 	.word	0x40023c00

08003af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003afc:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <HAL_IncTick+0x20>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	461a      	mov	r2, r3
 8003b02:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <HAL_IncTick+0x24>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4413      	add	r3, r2
 8003b08:	4a04      	ldr	r2, [pc, #16]	; (8003b1c <HAL_IncTick+0x24>)
 8003b0a:	6013      	str	r3, [r2, #0]
}
 8003b0c:	bf00      	nop
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	20000060 	.word	0x20000060
 8003b1c:	2003dd44 	.word	0x2003dd44

08003b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  return uwTick;
 8003b24:	4b03      	ldr	r3, [pc, #12]	; (8003b34 <HAL_GetTick+0x14>)
 8003b26:	681b      	ldr	r3, [r3, #0]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	2003dd44 	.word	0x2003dd44

08003b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b40:	f7ff ffee 	bl	8003b20 <HAL_GetTick>
 8003b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d005      	beq.n	8003b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b52:	4b09      	ldr	r3, [pc, #36]	; (8003b78 <HAL_Delay+0x40>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	461a      	mov	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b5e:	bf00      	nop
 8003b60:	f7ff ffde 	bl	8003b20 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d8f7      	bhi.n	8003b60 <HAL_Delay+0x28>
  {
  }
}
 8003b70:	bf00      	nop
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	20000060 	.word	0x20000060

08003b7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e033      	b.n	8003bfa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d109      	bne.n	8003bae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fd fe0c 	bl	80017b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	f003 0310 	and.w	r3, r3, #16
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d118      	bne.n	8003bec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003bc2:	f023 0302 	bic.w	r3, r3, #2
 8003bc6:	f043 0202 	orr.w	r2, r3, #2
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f94a 	bl	8003e68 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f023 0303 	bic.w	r3, r3, #3
 8003be2:	f043 0201 	orr.w	r2, r3, #1
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	641a      	str	r2, [r3, #64]	; 0x40
 8003bea:	e001      	b.n	8003bf0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
	...

08003c04 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_ADC_ConfigChannel+0x1c>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e113      	b.n	8003e48 <HAL_ADC_ConfigChannel+0x244>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b09      	cmp	r3, #9
 8003c2e:	d925      	bls.n	8003c7c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68d9      	ldr	r1, [r3, #12]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4613      	mov	r3, r2
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	4413      	add	r3, r2
 8003c44:	3b1e      	subs	r3, #30
 8003c46:	2207      	movs	r2, #7
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	43da      	mvns	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	400a      	ands	r2, r1
 8003c54:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68d9      	ldr	r1, [r3, #12]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	4618      	mov	r0, r3
 8003c68:	4603      	mov	r3, r0
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	4403      	add	r3, r0
 8003c6e:	3b1e      	subs	r3, #30
 8003c70:	409a      	lsls	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	60da      	str	r2, [r3, #12]
 8003c7a:	e022      	b.n	8003cc2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6919      	ldr	r1, [r3, #16]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	4413      	add	r3, r2
 8003c90:	2207      	movs	r2, #7
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	43da      	mvns	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	400a      	ands	r2, r1
 8003c9e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6919      	ldr	r1, [r3, #16]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	4403      	add	r3, r0
 8003cb8:	409a      	lsls	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b06      	cmp	r3, #6
 8003cc8:	d824      	bhi.n	8003d14 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	3b05      	subs	r3, #5
 8003cdc:	221f      	movs	r2, #31
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	43da      	mvns	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	400a      	ands	r2, r1
 8003cea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	3b05      	subs	r3, #5
 8003d06:	fa00 f203 	lsl.w	r2, r0, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	635a      	str	r2, [r3, #52]	; 0x34
 8003d12:	e04c      	b.n	8003dae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b0c      	cmp	r3, #12
 8003d1a:	d824      	bhi.n	8003d66 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	3b23      	subs	r3, #35	; 0x23
 8003d2e:	221f      	movs	r2, #31
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	43da      	mvns	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	400a      	ands	r2, r1
 8003d3c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	4613      	mov	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	3b23      	subs	r3, #35	; 0x23
 8003d58:	fa00 f203 	lsl.w	r2, r0, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	631a      	str	r2, [r3, #48]	; 0x30
 8003d64:	e023      	b.n	8003dae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	4613      	mov	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	3b41      	subs	r3, #65	; 0x41
 8003d78:	221f      	movs	r2, #31
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	43da      	mvns	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	400a      	ands	r2, r1
 8003d86:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	4618      	mov	r0, r3
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4413      	add	r3, r2
 8003da0:	3b41      	subs	r3, #65	; 0x41
 8003da2:	fa00 f203 	lsl.w	r2, r0, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003dae:	4b29      	ldr	r3, [pc, #164]	; (8003e54 <HAL_ADC_ConfigChannel+0x250>)
 8003db0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a28      	ldr	r2, [pc, #160]	; (8003e58 <HAL_ADC_ConfigChannel+0x254>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d10f      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x1d8>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b12      	cmp	r3, #18
 8003dc2:	d10b      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a1d      	ldr	r2, [pc, #116]	; (8003e58 <HAL_ADC_ConfigChannel+0x254>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d12b      	bne.n	8003e3e <HAL_ADC_ConfigChannel+0x23a>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a1c      	ldr	r2, [pc, #112]	; (8003e5c <HAL_ADC_ConfigChannel+0x258>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d003      	beq.n	8003df8 <HAL_ADC_ConfigChannel+0x1f4>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b11      	cmp	r3, #17
 8003df6:	d122      	bne.n	8003e3e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a11      	ldr	r2, [pc, #68]	; (8003e5c <HAL_ADC_ConfigChannel+0x258>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d111      	bne.n	8003e3e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e1a:	4b11      	ldr	r3, [pc, #68]	; (8003e60 <HAL_ADC_ConfigChannel+0x25c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a11      	ldr	r2, [pc, #68]	; (8003e64 <HAL_ADC_ConfigChannel+0x260>)
 8003e20:	fba2 2303 	umull	r2, r3, r2, r3
 8003e24:	0c9a      	lsrs	r2, r3, #18
 8003e26:	4613      	mov	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e30:	e002      	b.n	8003e38 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	3b01      	subs	r3, #1
 8003e36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1f9      	bne.n	8003e32 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	40012300 	.word	0x40012300
 8003e58:	40012000 	.word	0x40012000
 8003e5c:	10000012 	.word	0x10000012
 8003e60:	20000000 	.word	0x20000000
 8003e64:	431bde83 	.word	0x431bde83

08003e68 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e70:	4b79      	ldr	r3, [pc, #484]	; (8004058 <ADC_Init+0x1f0>)
 8003e72:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6859      	ldr	r1, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	021a      	lsls	r2, r3, #8
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ec0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6859      	ldr	r1, [r3, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ee2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6899      	ldr	r1, [r3, #8]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	4a58      	ldr	r2, [pc, #352]	; (800405c <ADC_Init+0x1f4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d022      	beq.n	8003f46 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6899      	ldr	r1, [r3, #8]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6899      	ldr	r1, [r3, #8]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	609a      	str	r2, [r3, #8]
 8003f44:	e00f      	b.n	8003f66 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f64:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0202 	bic.w	r2, r2, #2
 8003f74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6899      	ldr	r1, [r3, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	7e1b      	ldrb	r3, [r3, #24]
 8003f80:	005a      	lsls	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d01b      	beq.n	8003fcc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fa2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003fb2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6859      	ldr	r1, [r3, #4]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	035a      	lsls	r2, r3, #13
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	605a      	str	r2, [r3, #4]
 8003fca:	e007      	b.n	8003fdc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fda:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003fea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	051a      	lsls	r2, r3, #20
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004010:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6899      	ldr	r1, [r3, #8]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800401e:	025a      	lsls	r2, r3, #9
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004036:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6899      	ldr	r1, [r3, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	029a      	lsls	r2, r3, #10
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	609a      	str	r2, [r3, #8]
}
 800404c:	bf00      	nop
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	40012300 	.word	0x40012300
 800405c:	0f000001 	.word	0x0f000001

08004060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004070:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800407c:	4013      	ands	r3, r2
 800407e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004088:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800408c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004092:	4a04      	ldr	r2, [pc, #16]	; (80040a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	60d3      	str	r3, [r2, #12]
}
 8004098:	bf00      	nop
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	e000ed00 	.word	0xe000ed00

080040a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040ac:	4b04      	ldr	r3, [pc, #16]	; (80040c0 <__NVIC_GetPriorityGrouping+0x18>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	0a1b      	lsrs	r3, r3, #8
 80040b2:	f003 0307 	and.w	r3, r3, #7
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	e000ed00 	.word	0xe000ed00

080040c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	4603      	mov	r3, r0
 80040cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	db0b      	blt.n	80040ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040d6:	79fb      	ldrb	r3, [r7, #7]
 80040d8:	f003 021f 	and.w	r2, r3, #31
 80040dc:	4907      	ldr	r1, [pc, #28]	; (80040fc <__NVIC_EnableIRQ+0x38>)
 80040de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	2001      	movs	r0, #1
 80040e6:	fa00 f202 	lsl.w	r2, r0, r2
 80040ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	e000e100 	.word	0xe000e100

08004100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	4603      	mov	r3, r0
 8004108:	6039      	str	r1, [r7, #0]
 800410a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800410c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004110:	2b00      	cmp	r3, #0
 8004112:	db0a      	blt.n	800412a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	b2da      	uxtb	r2, r3
 8004118:	490c      	ldr	r1, [pc, #48]	; (800414c <__NVIC_SetPriority+0x4c>)
 800411a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411e:	0112      	lsls	r2, r2, #4
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	440b      	add	r3, r1
 8004124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004128:	e00a      	b.n	8004140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	b2da      	uxtb	r2, r3
 800412e:	4908      	ldr	r1, [pc, #32]	; (8004150 <__NVIC_SetPriority+0x50>)
 8004130:	79fb      	ldrb	r3, [r7, #7]
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	3b04      	subs	r3, #4
 8004138:	0112      	lsls	r2, r2, #4
 800413a:	b2d2      	uxtb	r2, r2
 800413c:	440b      	add	r3, r1
 800413e:	761a      	strb	r2, [r3, #24]
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	e000e100 	.word	0xe000e100
 8004150:	e000ed00 	.word	0xe000ed00

08004154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004154:	b480      	push	{r7}
 8004156:	b089      	sub	sp, #36	; 0x24
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f1c3 0307 	rsb	r3, r3, #7
 800416e:	2b04      	cmp	r3, #4
 8004170:	bf28      	it	cs
 8004172:	2304      	movcs	r3, #4
 8004174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	3304      	adds	r3, #4
 800417a:	2b06      	cmp	r3, #6
 800417c:	d902      	bls.n	8004184 <NVIC_EncodePriority+0x30>
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	3b03      	subs	r3, #3
 8004182:	e000      	b.n	8004186 <NVIC_EncodePriority+0x32>
 8004184:	2300      	movs	r3, #0
 8004186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004188:	f04f 32ff 	mov.w	r2, #4294967295
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	43da      	mvns	r2, r3
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	401a      	ands	r2, r3
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800419c:	f04f 31ff 	mov.w	r1, #4294967295
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	fa01 f303 	lsl.w	r3, r1, r3
 80041a6:	43d9      	mvns	r1, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041ac:	4313      	orrs	r3, r2
         );
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3724      	adds	r7, #36	; 0x24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b082      	sub	sp, #8
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff ff4c 	bl	8004060 <__NVIC_SetPriorityGrouping>
}
 80041c8:	bf00      	nop
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	4603      	mov	r3, r0
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041de:	2300      	movs	r3, #0
 80041e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041e2:	f7ff ff61 	bl	80040a8 <__NVIC_GetPriorityGrouping>
 80041e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	68b9      	ldr	r1, [r7, #8]
 80041ec:	6978      	ldr	r0, [r7, #20]
 80041ee:	f7ff ffb1 	bl	8004154 <NVIC_EncodePriority>
 80041f2:	4602      	mov	r2, r0
 80041f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041f8:	4611      	mov	r1, r2
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff ff80 	bl	8004100 <__NVIC_SetPriority>
}
 8004200:	bf00      	nop
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	4603      	mov	r3, r0
 8004210:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff ff54 	bl	80040c4 <__NVIC_EnableIRQ>
}
 800421c:	bf00      	nop
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e014      	b.n	8004260 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	791b      	ldrb	r3, [r3, #4]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d105      	bne.n	800424c <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7fd fb32 	bl	80018b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004276:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800427a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800427e:	d118      	bne.n	80042b2 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2204      	movs	r2, #4
 8004284:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f043 0201 	orr.w	r2, r3, #1
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800429a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042aa:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f825 	bl	80042fc <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042c0:	d118      	bne.n	80042f4 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2204      	movs	r2, #4
 80042c6:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	f043 0202 	orr.w	r2, r3, #2
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80042dc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80042ec:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f85b 	bl	80043aa <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 80042f4:	bf00      	nop
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	2300      	movs	r3, #0
 8004322:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	795b      	ldrb	r3, [r3, #5]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d101      	bne.n	8004330 <HAL_DAC_ConfigChannel+0x20>
 800432c:	2302      	movs	r3, #2
 800432e:	e036      	b.n	800439e <HAL_DAC_ConfigChannel+0x8e>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2201      	movs	r2, #1
 8004334:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2202      	movs	r2, #2
 800433a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004344:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	43db      	mvns	r3, r3
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	4013      	ands	r3, r2
 8004354:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	4313      	orrs	r3, r2
 8004360:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	4313      	orrs	r3, r2
 800436e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6819      	ldr	r1, [r3, #0]
 800437e:	22c0      	movs	r2, #192	; 0xc0
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	fa02 f303 	lsl.w	r3, r2, r3
 8004386:	43da      	mvns	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	400a      	ands	r2, r1
 800438e:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2201      	movs	r2, #1
 8004394:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	371c      	adds	r7, #28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
	...

080043c0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e0cf      	b.n	8004572 <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a69      	ldr	r2, [pc, #420]	; (800457c <HAL_DFSDM_ChannelInit+0x1bc>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d00e      	beq.n	80043fa <HAL_DFSDM_ChannelInit+0x3a>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a67      	ldr	r2, [pc, #412]	; (8004580 <HAL_DFSDM_ChannelInit+0x1c0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d009      	beq.n	80043fa <HAL_DFSDM_ChannelInit+0x3a>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a66      	ldr	r2, [pc, #408]	; (8004584 <HAL_DFSDM_ChannelInit+0x1c4>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d004      	beq.n	80043fa <HAL_DFSDM_ChannelInit+0x3a>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a64      	ldr	r2, [pc, #400]	; (8004588 <HAL_DFSDM_ChannelInit+0x1c8>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d106      	bne.n	8004408 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 80043fa:	4b64      	ldr	r3, [pc, #400]	; (800458c <HAL_DFSDM_ChannelInit+0x1cc>)
 80043fc:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 80043fe:	4b64      	ldr	r3, [pc, #400]	; (8004590 <HAL_DFSDM_ChannelInit+0x1d0>)
 8004400:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 8004402:	4b5e      	ldr	r3, [pc, #376]	; (800457c <HAL_DFSDM_ChannelInit+0x1bc>)
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	e005      	b.n	8004414 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8004408:	4b62      	ldr	r3, [pc, #392]	; (8004594 <HAL_DFSDM_ChannelInit+0x1d4>)
 800440a:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 800440c:	4b62      	ldr	r3, [pc, #392]	; (8004598 <HAL_DFSDM_ChannelInit+0x1d8>)
 800440e:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8004410:	4b62      	ldr	r3, [pc, #392]	; (800459c <HAL_DFSDM_ChannelInit+0x1dc>)
 8004412:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f000 f8c1 	bl	80045a0 <DFSDM_GetChannelFromInstance>
 800441e:	4603      	mov	r3, r0
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	4413      	add	r3, r2
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e0a0      	b.n	8004572 <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7fd fa89 	bl	8001948 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d125      	bne.n	8004494 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	431a      	orrs	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	791b      	ldrb	r3, [r3, #4]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d108      	bne.n	8004488 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	3b01      	subs	r3, #1
 8004480:	041b      	lsls	r3, r3, #16
 8004482:	431a      	orrs	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80044a2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6819      	ldr	r1, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80044b2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80044b8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 020f 	bic.w	r2, r2, #15
 80044d0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6819      	ldr	r1, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80044e0:	431a      	orrs	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80044f8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6899      	ldr	r1, [r3, #8]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004508:	3b01      	subs	r3, #1
 800450a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 800450c:	431a      	orrs	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f002 0207 	and.w	r2, r2, #7
 8004524:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6859      	ldr	r1, [r3, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004530:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8004538:	431a      	orrs	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004550:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f000 f81e 	bl	80045a0 <DFSDM_GetChannelFromInstance>
 8004564:	4603      	mov	r3, r0
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4413      	add	r3, r2
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	40016000 	.word	0x40016000
 8004580:	40016020 	.word	0x40016020
 8004584:	40016040 	.word	0x40016040
 8004588:	40016060 	.word	0x40016060
 800458c:	200001f8 	.word	0x200001f8
 8004590:	200001fc 	.word	0x200001fc
 8004594:	2000020c 	.word	0x2000020c
 8004598:	20000210 	.word	0x20000210
 800459c:	40016400 	.word	0x40016400

080045a0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a24      	ldr	r2, [pc, #144]	; (800463c <DFSDM_GetChannelFromInstance+0x9c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d003      	beq.n	80045b8 <DFSDM_GetChannelFromInstance+0x18>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a23      	ldr	r2, [pc, #140]	; (8004640 <DFSDM_GetChannelFromInstance+0xa0>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d102      	bne.n	80045be <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	e037      	b.n	800462e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a20      	ldr	r2, [pc, #128]	; (8004644 <DFSDM_GetChannelFromInstance+0xa4>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d003      	beq.n	80045ce <DFSDM_GetChannelFromInstance+0x2e>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a1f      	ldr	r2, [pc, #124]	; (8004648 <DFSDM_GetChannelFromInstance+0xa8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d102      	bne.n	80045d4 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 80045ce:	2301      	movs	r3, #1
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	e02c      	b.n	800462e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a1d      	ldr	r2, [pc, #116]	; (800464c <DFSDM_GetChannelFromInstance+0xac>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d003      	beq.n	80045e4 <DFSDM_GetChannelFromInstance+0x44>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a1c      	ldr	r2, [pc, #112]	; (8004650 <DFSDM_GetChannelFromInstance+0xb0>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d102      	bne.n	80045ea <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 80045e4:	2302      	movs	r3, #2
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	e021      	b.n	800462e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a19      	ldr	r2, [pc, #100]	; (8004654 <DFSDM_GetChannelFromInstance+0xb4>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d003      	beq.n	80045fa <DFSDM_GetChannelFromInstance+0x5a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a18      	ldr	r2, [pc, #96]	; (8004658 <DFSDM_GetChannelFromInstance+0xb8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d102      	bne.n	8004600 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 80045fa:	2303      	movs	r3, #3
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	e016      	b.n	800462e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a16      	ldr	r2, [pc, #88]	; (800465c <DFSDM_GetChannelFromInstance+0xbc>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d102      	bne.n	800460e <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8004608:	2304      	movs	r3, #4
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	e00f      	b.n	800462e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a13      	ldr	r2, [pc, #76]	; (8004660 <DFSDM_GetChannelFromInstance+0xc0>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d102      	bne.n	800461c <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 8004616:	2305      	movs	r3, #5
 8004618:	60fb      	str	r3, [r7, #12]
 800461a:	e008      	b.n	800462e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a11      	ldr	r2, [pc, #68]	; (8004664 <DFSDM_GetChannelFromInstance+0xc4>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d102      	bne.n	800462a <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8004624:	2306      	movs	r3, #6
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	e001      	b.n	800462e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 800462a:	2307      	movs	r3, #7
 800462c:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 800462e:	68fb      	ldr	r3, [r7, #12]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	40016000 	.word	0x40016000
 8004640:	40016400 	.word	0x40016400
 8004644:	40016020 	.word	0x40016020
 8004648:	40016420 	.word	0x40016420
 800464c:	40016040 	.word	0x40016040
 8004650:	40016440 	.word	0x40016440
 8004654:	40016060 	.word	0x40016060
 8004658:	40016460 	.word	0x40016460
 800465c:	40016480 	.word	0x40016480
 8004660:	400164a0 	.word	0x400164a0
 8004664:	400164c0 	.word	0x400164c0

08004668 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004674:	f7ff fa54 	bl	8003b20 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e099      	b.n	80047b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 0201 	bic.w	r2, r2, #1
 80046a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046a4:	e00f      	b.n	80046c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046a6:	f7ff fa3b 	bl	8003b20 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b05      	cmp	r3, #5
 80046b2:	d908      	bls.n	80046c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2220      	movs	r2, #32
 80046b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2203      	movs	r2, #3
 80046be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e078      	b.n	80047b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1e8      	bne.n	80046a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	4b38      	ldr	r3, [pc, #224]	; (80047c0 <HAL_DMA_Init+0x158>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800470a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	4313      	orrs	r3, r2
 8004716:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	2b04      	cmp	r3, #4
 800471e:	d107      	bne.n	8004730 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004728:	4313      	orrs	r3, r2
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	4313      	orrs	r3, r2
 800472e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f023 0307 	bic.w	r3, r3, #7
 8004746:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	4313      	orrs	r3, r2
 8004750:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	2b04      	cmp	r3, #4
 8004758:	d117      	bne.n	800478a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	4313      	orrs	r3, r2
 8004762:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00e      	beq.n	800478a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f8bd 	bl	80048ec <DMA_CheckFifoParam>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d008      	beq.n	800478a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2240      	movs	r2, #64	; 0x40
 800477c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004786:	2301      	movs	r3, #1
 8004788:	e016      	b.n	80047b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f874 	bl	8004880 <DMA_CalcBaseAndBitshift>
 8004798:	4603      	mov	r3, r0
 800479a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a0:	223f      	movs	r2, #63	; 0x3f
 80047a2:	409a      	lsls	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	e010803f 	.word	0xe010803f

080047c4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e050      	b.n	8004878 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d101      	bne.n	80047e6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80047e2:	2302      	movs	r3, #2
 80047e4:	e048      	b.n	8004878 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0201 	bic.w	r2, r2, #1
 80047f4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2200      	movs	r2, #0
 80047fc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2200      	movs	r2, #0
 8004804:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2200      	movs	r2, #0
 800480c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2200      	movs	r2, #0
 8004814:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2200      	movs	r2, #0
 800481c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2221      	movs	r2, #33	; 0x21
 8004824:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f82a 	bl	8004880 <DMA_CalcBaseAndBitshift>
 800482c:	4603      	mov	r3, r0
 800482e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004858:	223f      	movs	r2, #63	; 0x3f
 800485a:	409a      	lsls	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	3b10      	subs	r3, #16
 8004890:	4a14      	ldr	r2, [pc, #80]	; (80048e4 <DMA_CalcBaseAndBitshift+0x64>)
 8004892:	fba2 2303 	umull	r2, r3, r2, r3
 8004896:	091b      	lsrs	r3, r3, #4
 8004898:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800489a:	4a13      	ldr	r2, [pc, #76]	; (80048e8 <DMA_CalcBaseAndBitshift+0x68>)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4413      	add	r3, r2
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	461a      	mov	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b03      	cmp	r3, #3
 80048ac:	d909      	bls.n	80048c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80048b6:	f023 0303 	bic.w	r3, r3, #3
 80048ba:	1d1a      	adds	r2, r3, #4
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	659a      	str	r2, [r3, #88]	; 0x58
 80048c0:	e007      	b.n	80048d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80048ca:	f023 0303 	bic.w	r3, r3, #3
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	aaaaaaab 	.word	0xaaaaaaab
 80048e8:	080176a8 	.word	0x080176a8

080048ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048f4:	2300      	movs	r3, #0
 80048f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d11f      	bne.n	8004946 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2b03      	cmp	r3, #3
 800490a:	d855      	bhi.n	80049b8 <DMA_CheckFifoParam+0xcc>
 800490c:	a201      	add	r2, pc, #4	; (adr r2, 8004914 <DMA_CheckFifoParam+0x28>)
 800490e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004912:	bf00      	nop
 8004914:	08004925 	.word	0x08004925
 8004918:	08004937 	.word	0x08004937
 800491c:	08004925 	.word	0x08004925
 8004920:	080049b9 	.word	0x080049b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004928:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d045      	beq.n	80049bc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004934:	e042      	b.n	80049bc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800493e:	d13f      	bne.n	80049c0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004944:	e03c      	b.n	80049c0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800494e:	d121      	bne.n	8004994 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b03      	cmp	r3, #3
 8004954:	d836      	bhi.n	80049c4 <DMA_CheckFifoParam+0xd8>
 8004956:	a201      	add	r2, pc, #4	; (adr r2, 800495c <DMA_CheckFifoParam+0x70>)
 8004958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495c:	0800496d 	.word	0x0800496d
 8004960:	08004973 	.word	0x08004973
 8004964:	0800496d 	.word	0x0800496d
 8004968:	08004985 	.word	0x08004985
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	73fb      	strb	r3, [r7, #15]
      break;
 8004970:	e02f      	b.n	80049d2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004976:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d024      	beq.n	80049c8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004982:	e021      	b.n	80049c8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004988:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800498c:	d11e      	bne.n	80049cc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004992:	e01b      	b.n	80049cc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	2b02      	cmp	r3, #2
 8004998:	d902      	bls.n	80049a0 <DMA_CheckFifoParam+0xb4>
 800499a:	2b03      	cmp	r3, #3
 800499c:	d003      	beq.n	80049a6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800499e:	e018      	b.n	80049d2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	73fb      	strb	r3, [r7, #15]
      break;
 80049a4:	e015      	b.n	80049d2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00e      	beq.n	80049d0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	73fb      	strb	r3, [r7, #15]
      break;
 80049b6:	e00b      	b.n	80049d0 <DMA_CheckFifoParam+0xe4>
      break;
 80049b8:	bf00      	nop
 80049ba:	e00a      	b.n	80049d2 <DMA_CheckFifoParam+0xe6>
      break;
 80049bc:	bf00      	nop
 80049be:	e008      	b.n	80049d2 <DMA_CheckFifoParam+0xe6>
      break;
 80049c0:	bf00      	nop
 80049c2:	e006      	b.n	80049d2 <DMA_CheckFifoParam+0xe6>
      break;
 80049c4:	bf00      	nop
 80049c6:	e004      	b.n	80049d2 <DMA_CheckFifoParam+0xe6>
      break;
 80049c8:	bf00      	nop
 80049ca:	e002      	b.n	80049d2 <DMA_CheckFifoParam+0xe6>
      break;   
 80049cc:	bf00      	nop
 80049ce:	e000      	b.n	80049d2 <DMA_CheckFifoParam+0xe6>
      break;
 80049d0:	bf00      	nop
    }
  } 
  
  return status; 
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e081      	b.n	8004af6 <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d106      	bne.n	8004a0c <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7fd f8b0 	bl	8001b6c <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2224      	movs	r2, #36	; 0x24
 8004a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0201 	bic.w	r2, r2, #1
 8004a22:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a30:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a40:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d107      	bne.n	8004a5a <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689a      	ldr	r2, [r3, #8]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a56:	609a      	str	r2, [r3, #8]
 8004a58:	e006      	b.n	8004a68 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	689a      	ldr	r2, [r3, #8]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004a66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d104      	bne.n	8004a7a <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6812      	ldr	r2, [r2, #0]
 8004a84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a9c:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691a      	ldr	r2, [r3, #16]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	ea42 0103 	orr.w	r1, r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	021a      	lsls	r2, r3, #8
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	69d9      	ldr	r1, [r3, #28]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a1a      	ldr	r2, [r3, #32]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0201 	orr.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b083      	sub	sp, #12
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
 8004b06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	d138      	bne.n	8004b86 <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d101      	bne.n	8004b22 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	e032      	b.n	8004b88 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2224      	movs	r2, #36	; 0x24
 8004b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0201 	bic.w	r2, r2, #1
 8004b40:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b50:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6819      	ldr	r1, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f042 0201 	orr.w	r2, r2, #1
 8004b70:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2220      	movs	r2, #32
 8004b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	e000      	b.n	8004b88 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b86:	2302      	movs	r3, #2
  }
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b089      	sub	sp, #36	; 0x24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004baa:	2300      	movs	r3, #0
 8004bac:	61fb      	str	r3, [r7, #28]
 8004bae:	e165      	b.n	8004e7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	f040 8154 	bne.w	8004e76 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d00b      	beq.n	8004bee <HAL_GPIO_Init+0x5a>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d007      	beq.n	8004bee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004be2:	2b11      	cmp	r3, #17
 8004be4:	d003      	beq.n	8004bee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b12      	cmp	r3, #18
 8004bec:	d130      	bne.n	8004c50 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	2203      	movs	r2, #3
 8004bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfe:	43db      	mvns	r3, r3
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	4013      	ands	r3, r2
 8004c04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c24:	2201      	movs	r2, #1
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	4013      	ands	r3, r2
 8004c32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	091b      	lsrs	r3, r3, #4
 8004c3a:	f003 0201 	and.w	r2, r3, #1
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	fa02 f303 	lsl.w	r3, r2, r3
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	2203      	movs	r2, #3
 8004c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c60:	43db      	mvns	r3, r3
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	4013      	ands	r3, r2
 8004c66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d003      	beq.n	8004c90 <HAL_GPIO_Init+0xfc>
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2b12      	cmp	r3, #18
 8004c8e:	d123      	bne.n	8004cd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	08da      	lsrs	r2, r3, #3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3208      	adds	r2, #8
 8004c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	220f      	movs	r2, #15
 8004ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cac:	43db      	mvns	r3, r3
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	691a      	ldr	r2, [r3, #16]
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	08da      	lsrs	r2, r3, #3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	3208      	adds	r2, #8
 8004cd2:	69b9      	ldr	r1, [r7, #24]
 8004cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	2203      	movs	r2, #3
 8004ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	4013      	ands	r3, r2
 8004cee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f003 0203 	and.w	r2, r3, #3
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 80ae 	beq.w	8004e76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	4b5c      	ldr	r3, [pc, #368]	; (8004e90 <HAL_GPIO_Init+0x2fc>)
 8004d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d22:	4a5b      	ldr	r2, [pc, #364]	; (8004e90 <HAL_GPIO_Init+0x2fc>)
 8004d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d28:	6453      	str	r3, [r2, #68]	; 0x44
 8004d2a:	4b59      	ldr	r3, [pc, #356]	; (8004e90 <HAL_GPIO_Init+0x2fc>)
 8004d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d36:	4a57      	ldr	r2, [pc, #348]	; (8004e94 <HAL_GPIO_Init+0x300>)
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	089b      	lsrs	r3, r3, #2
 8004d3c:	3302      	adds	r3, #2
 8004d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	220f      	movs	r2, #15
 8004d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d52:	43db      	mvns	r3, r3
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	4013      	ands	r3, r2
 8004d58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a4e      	ldr	r2, [pc, #312]	; (8004e98 <HAL_GPIO_Init+0x304>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d025      	beq.n	8004dae <HAL_GPIO_Init+0x21a>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a4d      	ldr	r2, [pc, #308]	; (8004e9c <HAL_GPIO_Init+0x308>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d01f      	beq.n	8004daa <HAL_GPIO_Init+0x216>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a4c      	ldr	r2, [pc, #304]	; (8004ea0 <HAL_GPIO_Init+0x30c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d019      	beq.n	8004da6 <HAL_GPIO_Init+0x212>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a4b      	ldr	r2, [pc, #300]	; (8004ea4 <HAL_GPIO_Init+0x310>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d013      	beq.n	8004da2 <HAL_GPIO_Init+0x20e>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a4a      	ldr	r2, [pc, #296]	; (8004ea8 <HAL_GPIO_Init+0x314>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d00d      	beq.n	8004d9e <HAL_GPIO_Init+0x20a>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a49      	ldr	r2, [pc, #292]	; (8004eac <HAL_GPIO_Init+0x318>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d007      	beq.n	8004d9a <HAL_GPIO_Init+0x206>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a48      	ldr	r2, [pc, #288]	; (8004eb0 <HAL_GPIO_Init+0x31c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d101      	bne.n	8004d96 <HAL_GPIO_Init+0x202>
 8004d92:	2306      	movs	r3, #6
 8004d94:	e00c      	b.n	8004db0 <HAL_GPIO_Init+0x21c>
 8004d96:	2307      	movs	r3, #7
 8004d98:	e00a      	b.n	8004db0 <HAL_GPIO_Init+0x21c>
 8004d9a:	2305      	movs	r3, #5
 8004d9c:	e008      	b.n	8004db0 <HAL_GPIO_Init+0x21c>
 8004d9e:	2304      	movs	r3, #4
 8004da0:	e006      	b.n	8004db0 <HAL_GPIO_Init+0x21c>
 8004da2:	2303      	movs	r3, #3
 8004da4:	e004      	b.n	8004db0 <HAL_GPIO_Init+0x21c>
 8004da6:	2302      	movs	r3, #2
 8004da8:	e002      	b.n	8004db0 <HAL_GPIO_Init+0x21c>
 8004daa:	2301      	movs	r3, #1
 8004dac:	e000      	b.n	8004db0 <HAL_GPIO_Init+0x21c>
 8004dae:	2300      	movs	r3, #0
 8004db0:	69fa      	ldr	r2, [r7, #28]
 8004db2:	f002 0203 	and.w	r2, r2, #3
 8004db6:	0092      	lsls	r2, r2, #2
 8004db8:	4093      	lsls	r3, r2
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dc0:	4934      	ldr	r1, [pc, #208]	; (8004e94 <HAL_GPIO_Init+0x300>)
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	089b      	lsrs	r3, r3, #2
 8004dc6:	3302      	adds	r3, #2
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dce:	4b39      	ldr	r3, [pc, #228]	; (8004eb4 <HAL_GPIO_Init+0x320>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	43db      	mvns	r3, r3
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004df2:	4a30      	ldr	r2, [pc, #192]	; (8004eb4 <HAL_GPIO_Init+0x320>)
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004df8:	4b2e      	ldr	r3, [pc, #184]	; (8004eb4 <HAL_GPIO_Init+0x320>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	43db      	mvns	r3, r3
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	4013      	ands	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d003      	beq.n	8004e1c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e1c:	4a25      	ldr	r2, [pc, #148]	; (8004eb4 <HAL_GPIO_Init+0x320>)
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e22:	4b24      	ldr	r3, [pc, #144]	; (8004eb4 <HAL_GPIO_Init+0x320>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	43db      	mvns	r3, r3
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	4013      	ands	r3, r2
 8004e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e46:	4a1b      	ldr	r2, [pc, #108]	; (8004eb4 <HAL_GPIO_Init+0x320>)
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e4c:	4b19      	ldr	r3, [pc, #100]	; (8004eb4 <HAL_GPIO_Init+0x320>)
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	43db      	mvns	r3, r3
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e70:	4a10      	ldr	r2, [pc, #64]	; (8004eb4 <HAL_GPIO_Init+0x320>)
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	61fb      	str	r3, [r7, #28]
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	2b0f      	cmp	r3, #15
 8004e80:	f67f ae96 	bls.w	8004bb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e84:	bf00      	nop
 8004e86:	3724      	adds	r7, #36	; 0x24
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	40023800 	.word	0x40023800
 8004e94:	40013800 	.word	0x40013800
 8004e98:	40020000 	.word	0x40020000
 8004e9c:	40020400 	.word	0x40020400
 8004ea0:	40020800 	.word	0x40020800
 8004ea4:	40020c00 	.word	0x40020c00
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	40021400 	.word	0x40021400
 8004eb0:	40021800 	.word	0x40021800
 8004eb4:	40013c00 	.word	0x40013c00

08004eb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691a      	ldr	r2, [r3, #16]
 8004ec8:	887b      	ldrh	r3, [r7, #2]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	73fb      	strb	r3, [r7, #15]
 8004ed4:	e001      	b.n	8004eda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3714      	adds	r7, #20
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	807b      	strh	r3, [r7, #2]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ef8:	787b      	ldrb	r3, [r7, #1]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004efe:	887a      	ldrh	r2, [r7, #2]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f04:	e003      	b.n	8004f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f06:	887b      	ldrh	r3, [r7, #2]
 8004f08:	041a      	lsls	r2, r3, #16
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	619a      	str	r2, [r3, #24]
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	460b      	mov	r3, r1
 8004f24:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	695a      	ldr	r2, [r3, #20]
 8004f2a:	887b      	ldrh	r3, [r7, #2]
 8004f2c:	401a      	ands	r2, r3
 8004f2e:	887b      	ldrh	r3, [r7, #2]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d104      	bne.n	8004f3e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004f34:	887b      	ldrh	r3, [r7, #2]
 8004f36:	041a      	lsls	r2, r3, #16
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004f3c:	e002      	b.n	8004f44 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004f3e:	887a      	ldrh	r2, [r7, #2]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	619a      	str	r2, [r3, #24]
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	4603      	mov	r3, r0
 8004f58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004f5a:	4b08      	ldr	r3, [pc, #32]	; (8004f7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f5c:	695a      	ldr	r2, [r3, #20]
 8004f5e:	88fb      	ldrh	r3, [r7, #6]
 8004f60:	4013      	ands	r3, r2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d006      	beq.n	8004f74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f66:	4a05      	ldr	r2, [pc, #20]	; (8004f7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f68:	88fb      	ldrh	r3, [r7, #6]
 8004f6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f6c:	88fb      	ldrh	r3, [r7, #6]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 f806 	bl	8004f80 <HAL_GPIO_EXTI_Callback>
  }
}
 8004f74:	bf00      	nop
 8004f76:	3708      	adds	r7, #8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	40013c00 	.word	0x40013c00

08004f80 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	4603      	mov	r3, r0
 8004f88:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004f96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f98:	b08f      	sub	sp, #60	; 0x3c
 8004f9a:	af0a      	add	r7, sp, #40	; 0x28
 8004f9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e054      	b.n	8005052 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d106      	bne.n	8004fc8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f00e fe0e 	bl	8013be4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2203      	movs	r2, #3
 8004fcc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d102      	bne.n	8004fe2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f006 fa3a 	bl	800b460 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	603b      	str	r3, [r7, #0]
 8004ff2:	687e      	ldr	r6, [r7, #4]
 8004ff4:	466d      	mov	r5, sp
 8004ff6:	f106 0410 	add.w	r4, r6, #16
 8004ffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ffc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ffe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005000:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005002:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005006:	e885 0003 	stmia.w	r5, {r0, r1}
 800500a:	1d33      	adds	r3, r6, #4
 800500c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800500e:	6838      	ldr	r0, [r7, #0]
 8005010:	f006 f9b4 	bl	800b37c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2101      	movs	r1, #1
 800501a:	4618      	mov	r0, r3
 800501c:	f006 fa31 	bl	800b482 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	603b      	str	r3, [r7, #0]
 8005026:	687e      	ldr	r6, [r7, #4]
 8005028:	466d      	mov	r5, sp
 800502a:	f106 0410 	add.w	r4, r6, #16
 800502e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005030:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005032:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005034:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005036:	e894 0003 	ldmia.w	r4, {r0, r1}
 800503a:	e885 0003 	stmia.w	r5, {r0, r1}
 800503e:	1d33      	adds	r3, r6, #4
 8005040:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005042:	6838      	ldr	r0, [r7, #0]
 8005044:	f006 fb44 	bl	800b6d0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800505a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800505a:	b590      	push	{r4, r7, lr}
 800505c:	b089      	sub	sp, #36	; 0x24
 800505e:	af04      	add	r7, sp, #16
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	4608      	mov	r0, r1
 8005064:	4611      	mov	r1, r2
 8005066:	461a      	mov	r2, r3
 8005068:	4603      	mov	r3, r0
 800506a:	70fb      	strb	r3, [r7, #3]
 800506c:	460b      	mov	r3, r1
 800506e:	70bb      	strb	r3, [r7, #2]
 8005070:	4613      	mov	r3, r2
 8005072:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800507a:	2b01      	cmp	r3, #1
 800507c:	d101      	bne.n	8005082 <HAL_HCD_HC_Init+0x28>
 800507e:	2302      	movs	r3, #2
 8005080:	e07f      	b.n	8005182 <HAL_HCD_HC_Init+0x128>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800508a:	78fa      	ldrb	r2, [r7, #3]
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	4613      	mov	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	440b      	add	r3, r1
 8005098:	333d      	adds	r3, #61	; 0x3d
 800509a:	2200      	movs	r2, #0
 800509c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800509e:	78fa      	ldrb	r2, [r7, #3]
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	00db      	lsls	r3, r3, #3
 80050aa:	440b      	add	r3, r1
 80050ac:	3338      	adds	r3, #56	; 0x38
 80050ae:	787a      	ldrb	r2, [r7, #1]
 80050b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80050b2:	78fa      	ldrb	r2, [r7, #3]
 80050b4:	6879      	ldr	r1, [r7, #4]
 80050b6:	4613      	mov	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	440b      	add	r3, r1
 80050c0:	3340      	adds	r3, #64	; 0x40
 80050c2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80050c4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80050c6:	78fa      	ldrb	r2, [r7, #3]
 80050c8:	6879      	ldr	r1, [r7, #4]
 80050ca:	4613      	mov	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	440b      	add	r3, r1
 80050d4:	3339      	adds	r3, #57	; 0x39
 80050d6:	78fa      	ldrb	r2, [r7, #3]
 80050d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80050da:	78fa      	ldrb	r2, [r7, #3]
 80050dc:	6879      	ldr	r1, [r7, #4]
 80050de:	4613      	mov	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	440b      	add	r3, r1
 80050e8:	333f      	adds	r3, #63	; 0x3f
 80050ea:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80050ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80050f0:	78fa      	ldrb	r2, [r7, #3]
 80050f2:	78bb      	ldrb	r3, [r7, #2]
 80050f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050f8:	b2d8      	uxtb	r0, r3
 80050fa:	6879      	ldr	r1, [r7, #4]
 80050fc:	4613      	mov	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	440b      	add	r3, r1
 8005106:	333a      	adds	r3, #58	; 0x3a
 8005108:	4602      	mov	r2, r0
 800510a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800510c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005110:	2b00      	cmp	r3, #0
 8005112:	da0a      	bge.n	800512a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005114:	78fa      	ldrb	r2, [r7, #3]
 8005116:	6879      	ldr	r1, [r7, #4]
 8005118:	4613      	mov	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	440b      	add	r3, r1
 8005122:	333b      	adds	r3, #59	; 0x3b
 8005124:	2201      	movs	r2, #1
 8005126:	701a      	strb	r2, [r3, #0]
 8005128:	e009      	b.n	800513e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800512a:	78fa      	ldrb	r2, [r7, #3]
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	4613      	mov	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	440b      	add	r3, r1
 8005138:	333b      	adds	r3, #59	; 0x3b
 800513a:	2200      	movs	r2, #0
 800513c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800513e:	78fa      	ldrb	r2, [r7, #3]
 8005140:	6879      	ldr	r1, [r7, #4]
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	00db      	lsls	r3, r3, #3
 800514a:	440b      	add	r3, r1
 800514c:	333c      	adds	r3, #60	; 0x3c
 800514e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005152:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	787c      	ldrb	r4, [r7, #1]
 800515a:	78ba      	ldrb	r2, [r7, #2]
 800515c:	78f9      	ldrb	r1, [r7, #3]
 800515e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005160:	9302      	str	r3, [sp, #8]
 8005162:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005166:	9301      	str	r3, [sp, #4]
 8005168:	f897 3020 	ldrb.w	r3, [r7, #32]
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	4623      	mov	r3, r4
 8005170:	f006 fc2a 	bl	800b9c8 <USB_HC_Init>
 8005174:	4603      	mov	r3, r0
 8005176:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8005180:	7bfb      	ldrb	r3, [r7, #15]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	bd90      	pop	{r4, r7, pc}

0800518a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b084      	sub	sp, #16
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
 8005192:	460b      	mov	r3, r1
 8005194:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005196:	2300      	movs	r3, #0
 8005198:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d101      	bne.n	80051a8 <HAL_HCD_HC_Halt+0x1e>
 80051a4:	2302      	movs	r3, #2
 80051a6:	e00f      	b.n	80051c8 <HAL_HCD_HC_Halt+0x3e>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	78fa      	ldrb	r2, [r7, #3]
 80051b6:	4611      	mov	r1, r2
 80051b8:	4618      	mov	r0, r3
 80051ba:	f006 fe66 	bl	800be8a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	4608      	mov	r0, r1
 80051da:	4611      	mov	r1, r2
 80051dc:	461a      	mov	r2, r3
 80051de:	4603      	mov	r3, r0
 80051e0:	70fb      	strb	r3, [r7, #3]
 80051e2:	460b      	mov	r3, r1
 80051e4:	70bb      	strb	r3, [r7, #2]
 80051e6:	4613      	mov	r3, r2
 80051e8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80051ea:	78fa      	ldrb	r2, [r7, #3]
 80051ec:	6879      	ldr	r1, [r7, #4]
 80051ee:	4613      	mov	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	440b      	add	r3, r1
 80051f8:	333b      	adds	r3, #59	; 0x3b
 80051fa:	78ba      	ldrb	r2, [r7, #2]
 80051fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80051fe:	78fa      	ldrb	r2, [r7, #3]
 8005200:	6879      	ldr	r1, [r7, #4]
 8005202:	4613      	mov	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	440b      	add	r3, r1
 800520c:	333f      	adds	r3, #63	; 0x3f
 800520e:	787a      	ldrb	r2, [r7, #1]
 8005210:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005212:	7c3b      	ldrb	r3, [r7, #16]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d114      	bne.n	8005242 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005218:	78fa      	ldrb	r2, [r7, #3]
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	4613      	mov	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	440b      	add	r3, r1
 8005226:	3342      	adds	r3, #66	; 0x42
 8005228:	2203      	movs	r2, #3
 800522a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800522c:	78fa      	ldrb	r2, [r7, #3]
 800522e:	6879      	ldr	r1, [r7, #4]
 8005230:	4613      	mov	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	440b      	add	r3, r1
 800523a:	333d      	adds	r3, #61	; 0x3d
 800523c:	7f3a      	ldrb	r2, [r7, #28]
 800523e:	701a      	strb	r2, [r3, #0]
 8005240:	e009      	b.n	8005256 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005242:	78fa      	ldrb	r2, [r7, #3]
 8005244:	6879      	ldr	r1, [r7, #4]
 8005246:	4613      	mov	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	00db      	lsls	r3, r3, #3
 800524e:	440b      	add	r3, r1
 8005250:	3342      	adds	r3, #66	; 0x42
 8005252:	2202      	movs	r2, #2
 8005254:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005256:	787b      	ldrb	r3, [r7, #1]
 8005258:	2b03      	cmp	r3, #3
 800525a:	f200 80d6 	bhi.w	800540a <HAL_HCD_HC_SubmitRequest+0x23a>
 800525e:	a201      	add	r2, pc, #4	; (adr r2, 8005264 <HAL_HCD_HC_SubmitRequest+0x94>)
 8005260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005264:	08005275 	.word	0x08005275
 8005268:	080053f5 	.word	0x080053f5
 800526c:	080052e1 	.word	0x080052e1
 8005270:	0800536b 	.word	0x0800536b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005274:	7c3b      	ldrb	r3, [r7, #16]
 8005276:	2b01      	cmp	r3, #1
 8005278:	f040 80c9 	bne.w	800540e <HAL_HCD_HC_SubmitRequest+0x23e>
 800527c:	78bb      	ldrb	r3, [r7, #2]
 800527e:	2b00      	cmp	r3, #0
 8005280:	f040 80c5 	bne.w	800540e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8005284:	8b3b      	ldrh	r3, [r7, #24]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d109      	bne.n	800529e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800528a:	78fa      	ldrb	r2, [r7, #3]
 800528c:	6879      	ldr	r1, [r7, #4]
 800528e:	4613      	mov	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	440b      	add	r3, r1
 8005298:	3351      	adds	r3, #81	; 0x51
 800529a:	2201      	movs	r2, #1
 800529c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800529e:	78fa      	ldrb	r2, [r7, #3]
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	4613      	mov	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	440b      	add	r3, r1
 80052ac:	3351      	adds	r3, #81	; 0x51
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10a      	bne.n	80052ca <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80052b4:	78fa      	ldrb	r2, [r7, #3]
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	4613      	mov	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	440b      	add	r3, r1
 80052c2:	3342      	adds	r3, #66	; 0x42
 80052c4:	2200      	movs	r2, #0
 80052c6:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80052c8:	e0a1      	b.n	800540e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80052ca:	78fa      	ldrb	r2, [r7, #3]
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	4613      	mov	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	440b      	add	r3, r1
 80052d8:	3342      	adds	r3, #66	; 0x42
 80052da:	2202      	movs	r2, #2
 80052dc:	701a      	strb	r2, [r3, #0]
      break;
 80052de:	e096      	b.n	800540e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80052e0:	78bb      	ldrb	r3, [r7, #2]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d120      	bne.n	8005328 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80052e6:	78fa      	ldrb	r2, [r7, #3]
 80052e8:	6879      	ldr	r1, [r7, #4]
 80052ea:	4613      	mov	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	00db      	lsls	r3, r3, #3
 80052f2:	440b      	add	r3, r1
 80052f4:	3351      	adds	r3, #81	; 0x51
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10a      	bne.n	8005312 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80052fc:	78fa      	ldrb	r2, [r7, #3]
 80052fe:	6879      	ldr	r1, [r7, #4]
 8005300:	4613      	mov	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	440b      	add	r3, r1
 800530a:	3342      	adds	r3, #66	; 0x42
 800530c:	2200      	movs	r2, #0
 800530e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005310:	e07e      	b.n	8005410 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005312:	78fa      	ldrb	r2, [r7, #3]
 8005314:	6879      	ldr	r1, [r7, #4]
 8005316:	4613      	mov	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	00db      	lsls	r3, r3, #3
 800531e:	440b      	add	r3, r1
 8005320:	3342      	adds	r3, #66	; 0x42
 8005322:	2202      	movs	r2, #2
 8005324:	701a      	strb	r2, [r3, #0]
      break;
 8005326:	e073      	b.n	8005410 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005328:	78fa      	ldrb	r2, [r7, #3]
 800532a:	6879      	ldr	r1, [r7, #4]
 800532c:	4613      	mov	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	440b      	add	r3, r1
 8005336:	3350      	adds	r3, #80	; 0x50
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10a      	bne.n	8005354 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800533e:	78fa      	ldrb	r2, [r7, #3]
 8005340:	6879      	ldr	r1, [r7, #4]
 8005342:	4613      	mov	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	00db      	lsls	r3, r3, #3
 800534a:	440b      	add	r3, r1
 800534c:	3342      	adds	r3, #66	; 0x42
 800534e:	2200      	movs	r2, #0
 8005350:	701a      	strb	r2, [r3, #0]
      break;
 8005352:	e05d      	b.n	8005410 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005354:	78fa      	ldrb	r2, [r7, #3]
 8005356:	6879      	ldr	r1, [r7, #4]
 8005358:	4613      	mov	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	440b      	add	r3, r1
 8005362:	3342      	adds	r3, #66	; 0x42
 8005364:	2202      	movs	r2, #2
 8005366:	701a      	strb	r2, [r3, #0]
      break;
 8005368:	e052      	b.n	8005410 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800536a:	78bb      	ldrb	r3, [r7, #2]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d120      	bne.n	80053b2 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005370:	78fa      	ldrb	r2, [r7, #3]
 8005372:	6879      	ldr	r1, [r7, #4]
 8005374:	4613      	mov	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	440b      	add	r3, r1
 800537e:	3351      	adds	r3, #81	; 0x51
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10a      	bne.n	800539c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005386:	78fa      	ldrb	r2, [r7, #3]
 8005388:	6879      	ldr	r1, [r7, #4]
 800538a:	4613      	mov	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	440b      	add	r3, r1
 8005394:	3342      	adds	r3, #66	; 0x42
 8005396:	2200      	movs	r2, #0
 8005398:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800539a:	e039      	b.n	8005410 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800539c:	78fa      	ldrb	r2, [r7, #3]
 800539e:	6879      	ldr	r1, [r7, #4]
 80053a0:	4613      	mov	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	440b      	add	r3, r1
 80053aa:	3342      	adds	r3, #66	; 0x42
 80053ac:	2202      	movs	r2, #2
 80053ae:	701a      	strb	r2, [r3, #0]
      break;
 80053b0:	e02e      	b.n	8005410 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80053b2:	78fa      	ldrb	r2, [r7, #3]
 80053b4:	6879      	ldr	r1, [r7, #4]
 80053b6:	4613      	mov	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	440b      	add	r3, r1
 80053c0:	3350      	adds	r3, #80	; 0x50
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10a      	bne.n	80053de <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80053c8:	78fa      	ldrb	r2, [r7, #3]
 80053ca:	6879      	ldr	r1, [r7, #4]
 80053cc:	4613      	mov	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	440b      	add	r3, r1
 80053d6:	3342      	adds	r3, #66	; 0x42
 80053d8:	2200      	movs	r2, #0
 80053da:	701a      	strb	r2, [r3, #0]
      break;
 80053dc:	e018      	b.n	8005410 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80053de:	78fa      	ldrb	r2, [r7, #3]
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	4613      	mov	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	440b      	add	r3, r1
 80053ec:	3342      	adds	r3, #66	; 0x42
 80053ee:	2202      	movs	r2, #2
 80053f0:	701a      	strb	r2, [r3, #0]
      break;
 80053f2:	e00d      	b.n	8005410 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80053f4:	78fa      	ldrb	r2, [r7, #3]
 80053f6:	6879      	ldr	r1, [r7, #4]
 80053f8:	4613      	mov	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	440b      	add	r3, r1
 8005402:	3342      	adds	r3, #66	; 0x42
 8005404:	2200      	movs	r2, #0
 8005406:	701a      	strb	r2, [r3, #0]
      break;
 8005408:	e002      	b.n	8005410 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800540a:	bf00      	nop
 800540c:	e000      	b.n	8005410 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800540e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005410:	78fa      	ldrb	r2, [r7, #3]
 8005412:	6879      	ldr	r1, [r7, #4]
 8005414:	4613      	mov	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	440b      	add	r3, r1
 800541e:	3344      	adds	r3, #68	; 0x44
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005424:	78fa      	ldrb	r2, [r7, #3]
 8005426:	8b39      	ldrh	r1, [r7, #24]
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	4613      	mov	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	4403      	add	r3, r0
 8005434:	3348      	adds	r3, #72	; 0x48
 8005436:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005438:	78fa      	ldrb	r2, [r7, #3]
 800543a:	6879      	ldr	r1, [r7, #4]
 800543c:	4613      	mov	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4413      	add	r3, r2
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	440b      	add	r3, r1
 8005446:	335c      	adds	r3, #92	; 0x5c
 8005448:	2200      	movs	r2, #0
 800544a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800544c:	78fa      	ldrb	r2, [r7, #3]
 800544e:	6879      	ldr	r1, [r7, #4]
 8005450:	4613      	mov	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	440b      	add	r3, r1
 800545a:	334c      	adds	r3, #76	; 0x4c
 800545c:	2200      	movs	r2, #0
 800545e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005460:	78fa      	ldrb	r2, [r7, #3]
 8005462:	6879      	ldr	r1, [r7, #4]
 8005464:	4613      	mov	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	00db      	lsls	r3, r3, #3
 800546c:	440b      	add	r3, r1
 800546e:	3339      	adds	r3, #57	; 0x39
 8005470:	78fa      	ldrb	r2, [r7, #3]
 8005472:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005474:	78fa      	ldrb	r2, [r7, #3]
 8005476:	6879      	ldr	r1, [r7, #4]
 8005478:	4613      	mov	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	440b      	add	r3, r1
 8005482:	335d      	adds	r3, #93	; 0x5d
 8005484:	2200      	movs	r2, #0
 8005486:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6818      	ldr	r0, [r3, #0]
 800548c:	78fa      	ldrb	r2, [r7, #3]
 800548e:	4613      	mov	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	00db      	lsls	r3, r3, #3
 8005496:	3338      	adds	r3, #56	; 0x38
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	18d1      	adds	r1, r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	461a      	mov	r2, r3
 80054a4:	f006 fb9a 	bl	800bbdc <USB_HC_StartXfer>
 80054a8:	4603      	mov	r3, r0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop

080054b4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f006 f8bd 	bl	800b64a <USB_GetMode>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	f040 80ef 	bne.w	80056b6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4618      	mov	r0, r3
 80054de:	f006 f8a1 	bl	800b624 <USB_ReadInterrupts>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 80e5 	beq.w	80056b4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f006 f898 	bl	800b624 <USB_ReadInterrupts>
 80054f4:	4603      	mov	r3, r0
 80054f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054fe:	d104      	bne.n	800550a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005508:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4618      	mov	r0, r3
 8005510:	f006 f888 	bl	800b624 <USB_ReadInterrupts>
 8005514:	4603      	mov	r3, r0
 8005516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800551a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800551e:	d104      	bne.n	800552a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005528:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f006 f878 	bl	800b624 <USB_ReadInterrupts>
 8005534:	4603      	mov	r3, r0
 8005536:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800553a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800553e:	d104      	bne.n	800554a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005548:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4618      	mov	r0, r3
 8005550:	f006 f868 	bl	800b624 <USB_ReadInterrupts>
 8005554:	4603      	mov	r3, r0
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b02      	cmp	r3, #2
 800555c:	d103      	bne.n	8005566 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2202      	movs	r2, #2
 8005564:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4618      	mov	r0, r3
 800556c:	f006 f85a 	bl	800b624 <USB_ReadInterrupts>
 8005570:	4603      	mov	r3, r0
 8005572:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800557a:	d115      	bne.n	80055a8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005584:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	d108      	bne.n	80055a8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f00e fba2 	bl	8013ce0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2101      	movs	r1, #1
 80055a2:	4618      	mov	r0, r3
 80055a4:	f006 f94a 	bl	800b83c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f006 f839 	bl	800b624 <USB_ReadInterrupts>
 80055b2:	4603      	mov	r3, r0
 80055b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055bc:	d102      	bne.n	80055c4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f001 f966 	bl	8006890 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f006 f82b 	bl	800b624 <USB_ReadInterrupts>
 80055ce:	4603      	mov	r3, r0
 80055d0:	f003 0308 	and.w	r3, r3, #8
 80055d4:	2b08      	cmp	r3, #8
 80055d6:	d106      	bne.n	80055e6 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f00e fb65 	bl	8013ca8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2208      	movs	r2, #8
 80055e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f006 f81a 	bl	800b624 <USB_ReadInterrupts>
 80055f0:	4603      	mov	r3, r0
 80055f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055fa:	d138      	bne.n	800566e <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4618      	mov	r0, r3
 8005602:	f006 fc31 	bl	800be68 <USB_HC_ReadInterrupt>
 8005606:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005608:	2300      	movs	r3, #0
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	e025      	b.n	800565a <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f003 030f 	and.w	r3, r3, #15
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	fa22 f303 	lsr.w	r3, r2, r3
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	d018      	beq.n	8005654 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4413      	add	r3, r2
 800562a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005638:	d106      	bne.n	8005648 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	b2db      	uxtb	r3, r3
 800563e:	4619      	mov	r1, r3
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f8cf 	bl	80057e4 <HCD_HC_IN_IRQHandler>
 8005646:	e005      	b.n	8005654 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	b2db      	uxtb	r3, r3
 800564c:	4619      	mov	r1, r3
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 fcfd 	bl	800604e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	3301      	adds	r3, #1
 8005658:	617b      	str	r3, [r7, #20]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	429a      	cmp	r2, r3
 8005662:	d3d4      	bcc.n	800560e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800566c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4618      	mov	r0, r3
 8005674:	f005 ffd6 	bl	800b624 <USB_ReadInterrupts>
 8005678:	4603      	mov	r3, r0
 800567a:	f003 0310 	and.w	r3, r3, #16
 800567e:	2b10      	cmp	r3, #16
 8005680:	d101      	bne.n	8005686 <HAL_HCD_IRQHandler+0x1d2>
 8005682:	2301      	movs	r3, #1
 8005684:	e000      	b.n	8005688 <HAL_HCD_IRQHandler+0x1d4>
 8005686:	2300      	movs	r3, #0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d014      	beq.n	80056b6 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699a      	ldr	r2, [r3, #24]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 0210 	bic.w	r2, r2, #16
 800569a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f001 f84b 	bl	8006738 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	699a      	ldr	r2, [r3, #24]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f042 0210 	orr.w	r2, r2, #16
 80056b0:	619a      	str	r2, [r3, #24]
 80056b2:	e000      	b.n	80056b6 <HAL_HCD_IRQHandler+0x202>
      return;
 80056b4:	bf00      	nop
    }
  }
}
 80056b6:	3718      	adds	r7, #24
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d101      	bne.n	80056d2 <HAL_HCD_Start+0x16>
 80056ce:	2302      	movs	r3, #2
 80056d0:	e013      	b.n	80056fa <HAL_HCD_Start+0x3e>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4618      	mov	r0, r3
 80056e0:	f005 fead 	bl	800b43e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2101      	movs	r1, #1
 80056ea:	4618      	mov	r0, r3
 80056ec:	f006 f90a 	bl	800b904 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b082      	sub	sp, #8
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005710:	2b01      	cmp	r3, #1
 8005712:	d101      	bne.n	8005718 <HAL_HCD_Stop+0x16>
 8005714:	2302      	movs	r3, #2
 8005716:	e00d      	b.n	8005734 <HAL_HCD_Stop+0x32>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4618      	mov	r0, r3
 8005726:	f006 fceb 	bl	800c100 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4618      	mov	r0, r3
 800574a:	f006 f8b1 	bl	800b8b0 <USB_ResetPort>
 800574e:	4603      	mov	r3, r0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	460b      	mov	r3, r1
 8005762:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005764:	78fa      	ldrb	r2, [r7, #3]
 8005766:	6879      	ldr	r1, [r7, #4]
 8005768:	4613      	mov	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	440b      	add	r3, r1
 8005772:	335c      	adds	r3, #92	; 0x5c
 8005774:	781b      	ldrb	r3, [r3, #0]
}
 8005776:	4618      	mov	r0, r3
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005782:	b480      	push	{r7}
 8005784:	b083      	sub	sp, #12
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
 800578a:	460b      	mov	r3, r1
 800578c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800578e:	78fa      	ldrb	r2, [r7, #3]
 8005790:	6879      	ldr	r1, [r7, #4]
 8005792:	4613      	mov	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	00db      	lsls	r3, r3, #3
 800579a:	440b      	add	r3, r1
 800579c:	334c      	adds	r3, #76	; 0x4c
 800579e:	681b      	ldr	r3, [r3, #0]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f006 f8f3 	bl	800b9a4 <USB_GetCurrentFrame>
 80057be:	4603      	mov	r3, r0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f006 f8ce 	bl	800b976 <USB_GetHostSpeed>
 80057da:	4603      	mov	r3, r0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3708      	adds	r7, #8
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	460b      	mov	r3, r1
 80057ee:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80057fa:	78fb      	ldrb	r3, [r7, #3]
 80057fc:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	4413      	add	r3, r2
 8005806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f003 0304 	and.w	r3, r3, #4
 8005810:	2b04      	cmp	r3, #4
 8005812:	d119      	bne.n	8005848 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	4413      	add	r3, r2
 800581c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005820:	461a      	mov	r2, r3
 8005822:	2304      	movs	r3, #4
 8005824:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	4413      	add	r3, r2
 800582e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	0151      	lsls	r1, r2, #5
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	440a      	add	r2, r1
 800583c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005840:	f043 0302 	orr.w	r3, r3, #2
 8005844:	60d3      	str	r3, [r2, #12]
 8005846:	e0ce      	b.n	80059e6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	4413      	add	r3, r2
 8005850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800585a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800585e:	d12c      	bne.n	80058ba <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	4413      	add	r3, r2
 8005868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800586c:	461a      	mov	r2, r3
 800586e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005872:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005874:	6879      	ldr	r1, [r7, #4]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	4613      	mov	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	00db      	lsls	r3, r3, #3
 8005880:	440b      	add	r3, r1
 8005882:	335d      	adds	r3, #93	; 0x5d
 8005884:	2207      	movs	r2, #7
 8005886:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	4413      	add	r3, r2
 8005890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	0151      	lsls	r1, r2, #5
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	440a      	add	r2, r1
 800589e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058a2:	f043 0302 	orr.w	r3, r3, #2
 80058a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	4611      	mov	r1, r2
 80058b2:	4618      	mov	r0, r3
 80058b4:	f006 fae9 	bl	800be8a <USB_HC_Halt>
 80058b8:	e095      	b.n	80059e6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f003 0320 	and.w	r3, r3, #32
 80058cc:	2b20      	cmp	r3, #32
 80058ce:	d109      	bne.n	80058e4 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058dc:	461a      	mov	r2, r3
 80058de:	2320      	movs	r3, #32
 80058e0:	6093      	str	r3, [r2, #8]
 80058e2:	e080      	b.n	80059e6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f003 0308 	and.w	r3, r3, #8
 80058f6:	2b08      	cmp	r3, #8
 80058f8:	d134      	bne.n	8005964 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	015a      	lsls	r2, r3, #5
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	4413      	add	r3, r2
 8005902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	0151      	lsls	r1, r2, #5
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	440a      	add	r2, r1
 8005910:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005914:	f043 0302 	orr.w	r3, r3, #2
 8005918:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800591a:	6879      	ldr	r1, [r7, #4]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4613      	mov	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	440b      	add	r3, r1
 8005928:	335d      	adds	r3, #93	; 0x5d
 800592a:	2205      	movs	r2, #5
 800592c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	4413      	add	r3, r2
 8005936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800593a:	461a      	mov	r2, r3
 800593c:	2310      	movs	r3, #16
 800593e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	4413      	add	r3, r2
 8005948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800594c:	461a      	mov	r2, r3
 800594e:	2308      	movs	r3, #8
 8005950:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	b2d2      	uxtb	r2, r2
 800595a:	4611      	mov	r1, r2
 800595c:	4618      	mov	r0, r3
 800595e:	f006 fa94 	bl	800be8a <USB_HC_Halt>
 8005962:	e040      	b.n	80059e6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	4413      	add	r3, r2
 800596c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800597a:	d134      	bne.n	80059e6 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	4413      	add	r3, r2
 8005984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	0151      	lsls	r1, r2, #5
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	440a      	add	r2, r1
 8005992:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005996:	f043 0302 	orr.w	r3, r3, #2
 800599a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	4611      	mov	r1, r2
 80059a6:	4618      	mov	r0, r3
 80059a8:	f006 fa6f 	bl	800be8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b8:	461a      	mov	r2, r3
 80059ba:	2310      	movs	r3, #16
 80059bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80059be:	6879      	ldr	r1, [r7, #4]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	4613      	mov	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	00db      	lsls	r3, r3, #3
 80059ca:	440b      	add	r3, r1
 80059cc:	335d      	adds	r3, #93	; 0x5d
 80059ce:	2208      	movs	r2, #8
 80059d0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059de:	461a      	mov	r2, r3
 80059e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059e4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059fc:	d122      	bne.n	8005a44 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	0151      	lsls	r1, r2, #5
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	440a      	add	r2, r1
 8005a14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a18:	f043 0302 	orr.w	r3, r3, #2
 8005a1c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	b2d2      	uxtb	r2, r2
 8005a26:	4611      	mov	r1, r2
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f006 fa2e 	bl	800be8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a40:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005a42:	e300      	b.n	8006046 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	f040 80fd 	bne.w	8005c56 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d01b      	beq.n	8005a9c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005a64:	6879      	ldr	r1, [r7, #4]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	440b      	add	r3, r1
 8005a72:	3348      	adds	r3, #72	; 0x48
 8005a74:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	0159      	lsls	r1, r3, #5
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	440b      	add	r3, r1
 8005a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005a88:	1ad1      	subs	r1, r2, r3
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	4403      	add	r3, r0
 8005a98:	334c      	adds	r3, #76	; 0x4c
 8005a9a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005a9c:	6879      	ldr	r1, [r7, #4]
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	440b      	add	r3, r1
 8005aaa:	335d      	adds	r3, #93	; 0x5d
 8005aac:	2201      	movs	r2, #1
 8005aae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005ab0:	6879      	ldr	r1, [r7, #4]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	440b      	add	r3, r1
 8005abe:	3358      	adds	r3, #88	; 0x58
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005ad6:	6879      	ldr	r1, [r7, #4]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	4613      	mov	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	440b      	add	r3, r1
 8005ae4:	333f      	adds	r3, #63	; 0x3f
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00a      	beq.n	8005b02 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005aec:	6879      	ldr	r1, [r7, #4]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	4613      	mov	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	440b      	add	r3, r1
 8005afa:	333f      	adds	r3, #63	; 0x3f
 8005afc:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d121      	bne.n	8005b46 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	0151      	lsls	r1, r2, #5
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	440a      	add	r2, r1
 8005b18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b1c:	f043 0302 	orr.w	r3, r3, #2
 8005b20:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	4611      	mov	r1, r2
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f006 f9ac 	bl	800be8a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b3e:	461a      	mov	r2, r3
 8005b40:	2310      	movs	r3, #16
 8005b42:	6093      	str	r3, [r2, #8]
 8005b44:	e070      	b.n	8005c28 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005b46:	6879      	ldr	r1, [r7, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	00db      	lsls	r3, r3, #3
 8005b52:	440b      	add	r3, r1
 8005b54:	333f      	adds	r3, #63	; 0x3f
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b03      	cmp	r3, #3
 8005b5a:	d12a      	bne.n	8005bb2 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	015a      	lsls	r2, r3, #5
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	0151      	lsls	r1, r2, #5
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	440a      	add	r2, r1
 8005b72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b7a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005b7c:	6879      	ldr	r1, [r7, #4]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4613      	mov	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	440b      	add	r3, r1
 8005b8a:	335c      	adds	r3, #92	; 0x5c
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	b2d8      	uxtb	r0, r3
 8005b94:	6879      	ldr	r1, [r7, #4]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	440b      	add	r3, r1
 8005ba2:	335c      	adds	r3, #92	; 0x5c
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	4601      	mov	r1, r0
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f00e f8a6 	bl	8013cfc <HAL_HCD_HC_NotifyURBChange_Callback>
 8005bb0:	e03a      	b.n	8005c28 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005bb2:	6879      	ldr	r1, [r7, #4]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	440b      	add	r3, r1
 8005bc0:	333f      	adds	r3, #63	; 0x3f
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d12f      	bne.n	8005c28 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005bc8:	6879      	ldr	r1, [r7, #4]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	440b      	add	r3, r1
 8005bd6:	335c      	adds	r3, #92	; 0x5c
 8005bd8:	2201      	movs	r2, #1
 8005bda:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005bdc:	6879      	ldr	r1, [r7, #4]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	4613      	mov	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	440b      	add	r3, r1
 8005bea:	3350      	adds	r3, #80	; 0x50
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	f083 0301 	eor.w	r3, r3, #1
 8005bf2:	b2d8      	uxtb	r0, r3
 8005bf4:	6879      	ldr	r1, [r7, #4]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	440b      	add	r3, r1
 8005c02:	3350      	adds	r3, #80	; 0x50
 8005c04:	4602      	mov	r2, r0
 8005c06:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	b2d8      	uxtb	r0, r3
 8005c0c:	6879      	ldr	r1, [r7, #4]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4613      	mov	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	440b      	add	r3, r1
 8005c1a:	335c      	adds	r3, #92	; 0x5c
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	4601      	mov	r1, r0
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f00e f86a 	bl	8013cfc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8005c28:	6879      	ldr	r1, [r7, #4]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	00db      	lsls	r3, r3, #3
 8005c34:	440b      	add	r3, r1
 8005c36:	3350      	adds	r3, #80	; 0x50
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	f083 0301 	eor.w	r3, r3, #1
 8005c3e:	b2d8      	uxtb	r0, r3
 8005c40:	6879      	ldr	r1, [r7, #4]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	4613      	mov	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	440b      	add	r3, r1
 8005c4e:	3350      	adds	r3, #80	; 0x50
 8005c50:	4602      	mov	r2, r0
 8005c52:	701a      	strb	r2, [r3, #0]
}
 8005c54:	e1f7      	b.n	8006046 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	f040 811a 	bne.w	8005ea2 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	0151      	lsls	r1, r2, #5
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	440a      	add	r2, r1
 8005c84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c88:	f023 0302 	bic.w	r3, r3, #2
 8005c8c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005c8e:	6879      	ldr	r1, [r7, #4]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	4613      	mov	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	00db      	lsls	r3, r3, #3
 8005c9a:	440b      	add	r3, r1
 8005c9c:	335d      	adds	r3, #93	; 0x5d
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d10a      	bne.n	8005cba <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005ca4:	6879      	ldr	r1, [r7, #4]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	440b      	add	r3, r1
 8005cb2:	335c      	adds	r3, #92	; 0x5c
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	701a      	strb	r2, [r3, #0]
 8005cb8:	e0d9      	b.n	8005e6e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005cba:	6879      	ldr	r1, [r7, #4]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	440b      	add	r3, r1
 8005cc8:	335d      	adds	r3, #93	; 0x5d
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	2b05      	cmp	r3, #5
 8005cce:	d10a      	bne.n	8005ce6 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005cd0:	6879      	ldr	r1, [r7, #4]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4413      	add	r3, r2
 8005cda:	00db      	lsls	r3, r3, #3
 8005cdc:	440b      	add	r3, r1
 8005cde:	335c      	adds	r3, #92	; 0x5c
 8005ce0:	2205      	movs	r2, #5
 8005ce2:	701a      	strb	r2, [r3, #0]
 8005ce4:	e0c3      	b.n	8005e6e <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005ce6:	6879      	ldr	r1, [r7, #4]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	4613      	mov	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	00db      	lsls	r3, r3, #3
 8005cf2:	440b      	add	r3, r1
 8005cf4:	335d      	adds	r3, #93	; 0x5d
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	2b06      	cmp	r3, #6
 8005cfa:	d00a      	beq.n	8005d12 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005cfc:	6879      	ldr	r1, [r7, #4]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	4613      	mov	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	440b      	add	r3, r1
 8005d0a:	335d      	adds	r3, #93	; 0x5d
 8005d0c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005d0e:	2b08      	cmp	r3, #8
 8005d10:	d156      	bne.n	8005dc0 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8005d12:	6879      	ldr	r1, [r7, #4]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	4613      	mov	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	00db      	lsls	r3, r3, #3
 8005d1e:	440b      	add	r3, r1
 8005d20:	3358      	adds	r3, #88	; 0x58
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	1c59      	adds	r1, r3, #1
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	00db      	lsls	r3, r3, #3
 8005d32:	4403      	add	r3, r0
 8005d34:	3358      	adds	r3, #88	; 0x58
 8005d36:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005d38:	6879      	ldr	r1, [r7, #4]
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	440b      	add	r3, r1
 8005d46:	3358      	adds	r3, #88	; 0x58
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	d914      	bls.n	8005d78 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005d4e:	6879      	ldr	r1, [r7, #4]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	4613      	mov	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	440b      	add	r3, r1
 8005d5c:	3358      	adds	r3, #88	; 0x58
 8005d5e:	2200      	movs	r2, #0
 8005d60:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	4613      	mov	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4413      	add	r3, r2
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	440b      	add	r3, r1
 8005d70:	335c      	adds	r3, #92	; 0x5c
 8005d72:	2204      	movs	r2, #4
 8005d74:	701a      	strb	r2, [r3, #0]
 8005d76:	e009      	b.n	8005d8c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005d78:	6879      	ldr	r1, [r7, #4]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	440b      	add	r3, r1
 8005d86:	335c      	adds	r3, #92	; 0x5c
 8005d88:	2202      	movs	r2, #2
 8005d8a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005da2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005daa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db8:	461a      	mov	r2, r3
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	6013      	str	r3, [r2, #0]
 8005dbe:	e056      	b.n	8005e6e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005dc0:	6879      	ldr	r1, [r7, #4]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	440b      	add	r3, r1
 8005dce:	335d      	adds	r3, #93	; 0x5d
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d123      	bne.n	8005e1e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005dd6:	6879      	ldr	r1, [r7, #4]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	00db      	lsls	r3, r3, #3
 8005de2:	440b      	add	r3, r1
 8005de4:	335c      	adds	r3, #92	; 0x5c
 8005de6:	2202      	movs	r2, #2
 8005de8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e00:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e08:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e16:	461a      	mov	r2, r3
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	6013      	str	r3, [r2, #0]
 8005e1c:	e027      	b.n	8005e6e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005e1e:	6879      	ldr	r1, [r7, #4]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	4613      	mov	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	00db      	lsls	r3, r3, #3
 8005e2a:	440b      	add	r3, r1
 8005e2c:	335d      	adds	r3, #93	; 0x5d
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b07      	cmp	r3, #7
 8005e32:	d11c      	bne.n	8005e6e <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8005e34:	6879      	ldr	r1, [r7, #4]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	440b      	add	r3, r1
 8005e42:	3358      	adds	r3, #88	; 0x58
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	1c59      	adds	r1, r3, #1
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	00db      	lsls	r3, r3, #3
 8005e54:	4403      	add	r3, r0
 8005e56:	3358      	adds	r3, #88	; 0x58
 8005e58:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	00db      	lsls	r3, r3, #3
 8005e66:	440b      	add	r3, r1
 8005e68:	335c      	adds	r3, #92	; 0x5c
 8005e6a:	2204      	movs	r2, #4
 8005e6c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	b2d8      	uxtb	r0, r3
 8005e84:	6879      	ldr	r1, [r7, #4]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	00db      	lsls	r3, r3, #3
 8005e90:	440b      	add	r3, r1
 8005e92:	335c      	adds	r3, #92	; 0x5c
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	461a      	mov	r2, r3
 8005e98:	4601      	mov	r1, r0
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f00d ff2e 	bl	8013cfc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005ea0:	e0d1      	b.n	8006046 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb4:	2b80      	cmp	r3, #128	; 0x80
 8005eb6:	d13e      	bne.n	8005f36 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	0151      	lsls	r1, r2, #5
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	440a      	add	r2, r1
 8005ece:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ed2:	f043 0302 	orr.w	r3, r3, #2
 8005ed6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	4613      	mov	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	440b      	add	r3, r1
 8005ee6:	3358      	adds	r3, #88	; 0x58
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	1c59      	adds	r1, r3, #1
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	4403      	add	r3, r0
 8005efa:	3358      	adds	r3, #88	; 0x58
 8005efc:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005efe:	6879      	ldr	r1, [r7, #4]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	4613      	mov	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	00db      	lsls	r3, r3, #3
 8005f0a:	440b      	add	r3, r1
 8005f0c:	335d      	adds	r3, #93	; 0x5d
 8005f0e:	2206      	movs	r2, #6
 8005f10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	b2d2      	uxtb	r2, r2
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f005 ffb4 	bl	800be8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f2e:	461a      	mov	r2, r3
 8005f30:	2380      	movs	r3, #128	; 0x80
 8005f32:	6093      	str	r3, [r2, #8]
}
 8005f34:	e087      	b.n	8006046 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f003 0310 	and.w	r3, r3, #16
 8005f48:	2b10      	cmp	r3, #16
 8005f4a:	d17c      	bne.n	8006046 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005f4c:	6879      	ldr	r1, [r7, #4]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	4613      	mov	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	00db      	lsls	r3, r3, #3
 8005f58:	440b      	add	r3, r1
 8005f5a:	333f      	adds	r3, #63	; 0x3f
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2b03      	cmp	r3, #3
 8005f60:	d122      	bne.n	8005fa8 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005f62:	6879      	ldr	r1, [r7, #4]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4613      	mov	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	440b      	add	r3, r1
 8005f70:	3358      	adds	r3, #88	; 0x58
 8005f72:	2200      	movs	r2, #0
 8005f74:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	0151      	lsls	r1, r2, #5
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	440a      	add	r2, r1
 8005f8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f90:	f043 0302 	orr.w	r3, r3, #2
 8005f94:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	b2d2      	uxtb	r2, r2
 8005f9e:	4611      	mov	r1, r2
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f005 ff72 	bl	800be8a <USB_HC_Halt>
 8005fa6:	e045      	b.n	8006034 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005fa8:	6879      	ldr	r1, [r7, #4]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4613      	mov	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	440b      	add	r3, r1
 8005fb6:	333f      	adds	r3, #63	; 0x3f
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00a      	beq.n	8005fd4 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	00db      	lsls	r3, r3, #3
 8005fca:	440b      	add	r3, r1
 8005fcc:	333f      	adds	r3, #63	; 0x3f
 8005fce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d12f      	bne.n	8006034 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005fd4:	6879      	ldr	r1, [r7, #4]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	00db      	lsls	r3, r3, #3
 8005fe0:	440b      	add	r3, r1
 8005fe2:	3358      	adds	r3, #88	; 0x58
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d121      	bne.n	8006034 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8005ff0:	6879      	ldr	r1, [r7, #4]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	00db      	lsls	r3, r3, #3
 8005ffc:	440b      	add	r3, r1
 8005ffe:	335d      	adds	r3, #93	; 0x5d
 8006000:	2203      	movs	r2, #3
 8006002:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	4413      	add	r3, r2
 800600c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	0151      	lsls	r1, r2, #5
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	440a      	add	r2, r1
 800601a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800601e:	f043 0302 	orr.w	r3, r3, #2
 8006022:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	b2d2      	uxtb	r2, r2
 800602c:	4611      	mov	r1, r2
 800602e:	4618      	mov	r0, r3
 8006030:	f005 ff2b 	bl	800be8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	4413      	add	r3, r2
 800603c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006040:	461a      	mov	r2, r3
 8006042:	2310      	movs	r3, #16
 8006044:	6093      	str	r3, [r2, #8]
}
 8006046:	bf00      	nop
 8006048:	3718      	adds	r7, #24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b086      	sub	sp, #24
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	460b      	mov	r3, r1
 8006058:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	4413      	add	r3, r2
 8006070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f003 0304 	and.w	r3, r3, #4
 800607a:	2b04      	cmp	r3, #4
 800607c:	d119      	bne.n	80060b2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	4413      	add	r3, r2
 8006086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800608a:	461a      	mov	r2, r3
 800608c:	2304      	movs	r3, #4
 800608e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	4413      	add	r3, r2
 8006098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	0151      	lsls	r1, r2, #5
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	440a      	add	r2, r1
 80060a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060aa:	f043 0302 	orr.w	r3, r3, #2
 80060ae:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80060b0:	e33e      	b.n	8006730 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f003 0320 	and.w	r3, r3, #32
 80060c4:	2b20      	cmp	r3, #32
 80060c6:	d141      	bne.n	800614c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060d4:	461a      	mov	r2, r3
 80060d6:	2320      	movs	r3, #32
 80060d8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80060da:	6879      	ldr	r1, [r7, #4]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	4613      	mov	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	00db      	lsls	r3, r3, #3
 80060e6:	440b      	add	r3, r1
 80060e8:	333d      	adds	r3, #61	; 0x3d
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	f040 831f 	bne.w	8006730 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80060f2:	6879      	ldr	r1, [r7, #4]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	4613      	mov	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	00db      	lsls	r3, r3, #3
 80060fe:	440b      	add	r3, r1
 8006100:	333d      	adds	r3, #61	; 0x3d
 8006102:	2200      	movs	r2, #0
 8006104:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006106:	6879      	ldr	r1, [r7, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	4613      	mov	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	440b      	add	r3, r1
 8006114:	335c      	adds	r3, #92	; 0x5c
 8006116:	2202      	movs	r2, #2
 8006118:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	015a      	lsls	r2, r3, #5
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	4413      	add	r3, r2
 8006122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	0151      	lsls	r1, r2, #5
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	440a      	add	r2, r1
 8006130:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006134:	f043 0302 	orr.w	r3, r3, #2
 8006138:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	b2d2      	uxtb	r2, r2
 8006142:	4611      	mov	r1, r2
 8006144:	4618      	mov	r0, r3
 8006146:	f005 fea0 	bl	800be8a <USB_HC_Halt>
}
 800614a:	e2f1      	b.n	8006730 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	4413      	add	r3, r2
 8006154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615e:	2b40      	cmp	r3, #64	; 0x40
 8006160:	d13f      	bne.n	80061e2 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8006162:	6879      	ldr	r1, [r7, #4]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	4613      	mov	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4413      	add	r3, r2
 800616c:	00db      	lsls	r3, r3, #3
 800616e:	440b      	add	r3, r1
 8006170:	335d      	adds	r3, #93	; 0x5d
 8006172:	2204      	movs	r2, #4
 8006174:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8006176:	6879      	ldr	r1, [r7, #4]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	4613      	mov	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	00db      	lsls	r3, r3, #3
 8006182:	440b      	add	r3, r1
 8006184:	333d      	adds	r3, #61	; 0x3d
 8006186:	2201      	movs	r2, #1
 8006188:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800618a:	6879      	ldr	r1, [r7, #4]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	4613      	mov	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	440b      	add	r3, r1
 8006198:	3358      	adds	r3, #88	; 0x58
 800619a:	2200      	movs	r2, #0
 800619c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	0151      	lsls	r1, r2, #5
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	440a      	add	r2, r1
 80061b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061b8:	f043 0302 	orr.w	r3, r3, #2
 80061bc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	b2d2      	uxtb	r2, r2
 80061c6:	4611      	mov	r1, r2
 80061c8:	4618      	mov	r0, r3
 80061ca:	f005 fe5e 	bl	800be8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061da:	461a      	mov	r2, r3
 80061dc:	2340      	movs	r3, #64	; 0x40
 80061de:	6093      	str	r3, [r2, #8]
}
 80061e0:	e2a6      	b.n	8006730 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061f8:	d122      	bne.n	8006240 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	4413      	add	r3, r2
 8006202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	0151      	lsls	r1, r2, #5
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	440a      	add	r2, r1
 8006210:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006214:	f043 0302 	orr.w	r3, r3, #2
 8006218:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	b2d2      	uxtb	r2, r2
 8006222:	4611      	mov	r1, r2
 8006224:	4618      	mov	r0, r3
 8006226:	f005 fe30 	bl	800be8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	4413      	add	r3, r2
 8006232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006236:	461a      	mov	r2, r3
 8006238:	f44f 7300 	mov.w	r3, #512	; 0x200
 800623c:	6093      	str	r3, [r2, #8]
}
 800623e:	e277      	b.n	8006730 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	4413      	add	r3, r2
 8006248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b01      	cmp	r3, #1
 8006254:	d135      	bne.n	80062c2 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006256:	6879      	ldr	r1, [r7, #4]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	4613      	mov	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	00db      	lsls	r3, r3, #3
 8006262:	440b      	add	r3, r1
 8006264:	3358      	adds	r3, #88	; 0x58
 8006266:	2200      	movs	r2, #0
 8006268:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	4413      	add	r3, r2
 8006272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	0151      	lsls	r1, r2, #5
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	440a      	add	r2, r1
 8006280:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006284:	f043 0302 	orr.w	r3, r3, #2
 8006288:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	b2d2      	uxtb	r2, r2
 8006292:	4611      	mov	r1, r2
 8006294:	4618      	mov	r0, r3
 8006296:	f005 fdf8 	bl	800be8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a6:	461a      	mov	r2, r3
 80062a8:	2301      	movs	r3, #1
 80062aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80062ac:	6879      	ldr	r1, [r7, #4]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	4613      	mov	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4413      	add	r3, r2
 80062b6:	00db      	lsls	r3, r3, #3
 80062b8:	440b      	add	r3, r1
 80062ba:	335d      	adds	r3, #93	; 0x5d
 80062bc:	2201      	movs	r2, #1
 80062be:	701a      	strb	r2, [r3, #0]
}
 80062c0:	e236      	b.n	8006730 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	015a      	lsls	r2, r3, #5
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f003 0308 	and.w	r3, r3, #8
 80062d4:	2b08      	cmp	r3, #8
 80062d6:	d12b      	bne.n	8006330 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e4:	461a      	mov	r2, r3
 80062e6:	2308      	movs	r3, #8
 80062e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	015a      	lsls	r2, r3, #5
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	0151      	lsls	r1, r2, #5
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	440a      	add	r2, r1
 8006300:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006304:	f043 0302 	orr.w	r3, r3, #2
 8006308:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	b2d2      	uxtb	r2, r2
 8006312:	4611      	mov	r1, r2
 8006314:	4618      	mov	r0, r3
 8006316:	f005 fdb8 	bl	800be8a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800631a:	6879      	ldr	r1, [r7, #4]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	4613      	mov	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	00db      	lsls	r3, r3, #3
 8006326:	440b      	add	r3, r1
 8006328:	335d      	adds	r3, #93	; 0x5d
 800632a:	2205      	movs	r2, #5
 800632c:	701a      	strb	r2, [r3, #0]
}
 800632e:	e1ff      	b.n	8006730 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	4413      	add	r3, r2
 8006338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f003 0310 	and.w	r3, r3, #16
 8006342:	2b10      	cmp	r3, #16
 8006344:	d155      	bne.n	80063f2 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006346:	6879      	ldr	r1, [r7, #4]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	4613      	mov	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4413      	add	r3, r2
 8006350:	00db      	lsls	r3, r3, #3
 8006352:	440b      	add	r3, r1
 8006354:	3358      	adds	r3, #88	; 0x58
 8006356:	2200      	movs	r2, #0
 8006358:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800635a:	6879      	ldr	r1, [r7, #4]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4613      	mov	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	00db      	lsls	r3, r3, #3
 8006366:	440b      	add	r3, r1
 8006368:	335d      	adds	r3, #93	; 0x5d
 800636a:	2203      	movs	r2, #3
 800636c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800636e:	6879      	ldr	r1, [r7, #4]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	4613      	mov	r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4413      	add	r3, r2
 8006378:	00db      	lsls	r3, r3, #3
 800637a:	440b      	add	r3, r1
 800637c:	333d      	adds	r3, #61	; 0x3d
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d114      	bne.n	80063ae <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8006384:	6879      	ldr	r1, [r7, #4]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	4613      	mov	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4413      	add	r3, r2
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	440b      	add	r3, r1
 8006392:	333c      	adds	r3, #60	; 0x3c
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d109      	bne.n	80063ae <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800639a:	6879      	ldr	r1, [r7, #4]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	4613      	mov	r3, r2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4413      	add	r3, r2
 80063a4:	00db      	lsls	r3, r3, #3
 80063a6:	440b      	add	r3, r1
 80063a8:	333d      	adds	r3, #61	; 0x3d
 80063aa:	2201      	movs	r2, #1
 80063ac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	0151      	lsls	r1, r2, #5
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	440a      	add	r2, r1
 80063c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063c8:	f043 0302 	orr.w	r3, r3, #2
 80063cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	b2d2      	uxtb	r2, r2
 80063d6:	4611      	mov	r1, r2
 80063d8:	4618      	mov	r0, r3
 80063da:	f005 fd56 	bl	800be8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ea:	461a      	mov	r2, r3
 80063ec:	2310      	movs	r3, #16
 80063ee:	6093      	str	r3, [r2, #8]
}
 80063f0:	e19e      	b.n	8006730 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006404:	2b80      	cmp	r3, #128	; 0x80
 8006406:	d12b      	bne.n	8006460 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	4413      	add	r3, r2
 8006410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	0151      	lsls	r1, r2, #5
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	440a      	add	r2, r1
 800641e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006422:	f043 0302 	orr.w	r3, r3, #2
 8006426:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	b2d2      	uxtb	r2, r2
 8006430:	4611      	mov	r1, r2
 8006432:	4618      	mov	r0, r3
 8006434:	f005 fd29 	bl	800be8a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006438:	6879      	ldr	r1, [r7, #4]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	4613      	mov	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	00db      	lsls	r3, r3, #3
 8006444:	440b      	add	r3, r1
 8006446:	335d      	adds	r3, #93	; 0x5d
 8006448:	2206      	movs	r2, #6
 800644a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	4413      	add	r3, r2
 8006454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006458:	461a      	mov	r2, r3
 800645a:	2380      	movs	r3, #128	; 0x80
 800645c:	6093      	str	r3, [r2, #8]
}
 800645e:	e167      	b.n	8006730 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	4413      	add	r3, r2
 8006468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006476:	d135      	bne.n	80064e4 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	4413      	add	r3, r2
 8006480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	0151      	lsls	r1, r2, #5
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	440a      	add	r2, r1
 800648e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006492:	f043 0302 	orr.w	r3, r3, #2
 8006496:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	b2d2      	uxtb	r2, r2
 80064a0:	4611      	mov	r1, r2
 80064a2:	4618      	mov	r0, r3
 80064a4:	f005 fcf1 	bl	800be8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b4:	461a      	mov	r2, r3
 80064b6:	2310      	movs	r3, #16
 80064b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c6:	461a      	mov	r2, r3
 80064c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80064ce:	6879      	ldr	r1, [r7, #4]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	4613      	mov	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	00db      	lsls	r3, r3, #3
 80064da:	440b      	add	r3, r1
 80064dc:	335d      	adds	r3, #93	; 0x5d
 80064de:	2208      	movs	r2, #8
 80064e0:	701a      	strb	r2, [r3, #0]
}
 80064e2:	e125      	b.n	8006730 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	f040 811a 	bne.w	8006730 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	4413      	add	r3, r2
 8006504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	0151      	lsls	r1, r2, #5
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	440a      	add	r2, r1
 8006512:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006516:	f023 0302 	bic.w	r3, r3, #2
 800651a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800651c:	6879      	ldr	r1, [r7, #4]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	4613      	mov	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	00db      	lsls	r3, r3, #3
 8006528:	440b      	add	r3, r1
 800652a:	335d      	adds	r3, #93	; 0x5d
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d137      	bne.n	80065a2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006532:	6879      	ldr	r1, [r7, #4]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	4613      	mov	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	00db      	lsls	r3, r3, #3
 800653e:	440b      	add	r3, r1
 8006540:	335c      	adds	r3, #92	; 0x5c
 8006542:	2201      	movs	r2, #1
 8006544:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	4613      	mov	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4413      	add	r3, r2
 8006550:	00db      	lsls	r3, r3, #3
 8006552:	440b      	add	r3, r1
 8006554:	333f      	adds	r3, #63	; 0x3f
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	2b02      	cmp	r3, #2
 800655a:	d00b      	beq.n	8006574 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800655c:	6879      	ldr	r1, [r7, #4]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	4613      	mov	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	00db      	lsls	r3, r3, #3
 8006568:	440b      	add	r3, r1
 800656a:	333f      	adds	r3, #63	; 0x3f
 800656c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800656e:	2b03      	cmp	r3, #3
 8006570:	f040 80c5 	bne.w	80066fe <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8006574:	6879      	ldr	r1, [r7, #4]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	4613      	mov	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	00db      	lsls	r3, r3, #3
 8006580:	440b      	add	r3, r1
 8006582:	3351      	adds	r3, #81	; 0x51
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	f083 0301 	eor.w	r3, r3, #1
 800658a:	b2d8      	uxtb	r0, r3
 800658c:	6879      	ldr	r1, [r7, #4]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	4613      	mov	r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4413      	add	r3, r2
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	440b      	add	r3, r1
 800659a:	3351      	adds	r3, #81	; 0x51
 800659c:	4602      	mov	r2, r0
 800659e:	701a      	strb	r2, [r3, #0]
 80065a0:	e0ad      	b.n	80066fe <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80065a2:	6879      	ldr	r1, [r7, #4]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	4613      	mov	r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	4413      	add	r3, r2
 80065ac:	00db      	lsls	r3, r3, #3
 80065ae:	440b      	add	r3, r1
 80065b0:	335d      	adds	r3, #93	; 0x5d
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	2b03      	cmp	r3, #3
 80065b6:	d10a      	bne.n	80065ce <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80065b8:	6879      	ldr	r1, [r7, #4]
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	4613      	mov	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4413      	add	r3, r2
 80065c2:	00db      	lsls	r3, r3, #3
 80065c4:	440b      	add	r3, r1
 80065c6:	335c      	adds	r3, #92	; 0x5c
 80065c8:	2202      	movs	r2, #2
 80065ca:	701a      	strb	r2, [r3, #0]
 80065cc:	e097      	b.n	80066fe <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80065ce:	6879      	ldr	r1, [r7, #4]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	4613      	mov	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	00db      	lsls	r3, r3, #3
 80065da:	440b      	add	r3, r1
 80065dc:	335d      	adds	r3, #93	; 0x5d
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	2b04      	cmp	r3, #4
 80065e2:	d10a      	bne.n	80065fa <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80065e4:	6879      	ldr	r1, [r7, #4]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	4613      	mov	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4413      	add	r3, r2
 80065ee:	00db      	lsls	r3, r3, #3
 80065f0:	440b      	add	r3, r1
 80065f2:	335c      	adds	r3, #92	; 0x5c
 80065f4:	2202      	movs	r2, #2
 80065f6:	701a      	strb	r2, [r3, #0]
 80065f8:	e081      	b.n	80066fe <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80065fa:	6879      	ldr	r1, [r7, #4]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	4613      	mov	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	00db      	lsls	r3, r3, #3
 8006606:	440b      	add	r3, r1
 8006608:	335d      	adds	r3, #93	; 0x5d
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	2b05      	cmp	r3, #5
 800660e:	d10a      	bne.n	8006626 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006610:	6879      	ldr	r1, [r7, #4]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	4613      	mov	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	00db      	lsls	r3, r3, #3
 800661c:	440b      	add	r3, r1
 800661e:	335c      	adds	r3, #92	; 0x5c
 8006620:	2205      	movs	r2, #5
 8006622:	701a      	strb	r2, [r3, #0]
 8006624:	e06b      	b.n	80066fe <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006626:	6879      	ldr	r1, [r7, #4]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	4613      	mov	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	00db      	lsls	r3, r3, #3
 8006632:	440b      	add	r3, r1
 8006634:	335d      	adds	r3, #93	; 0x5d
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	2b06      	cmp	r3, #6
 800663a:	d00a      	beq.n	8006652 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800663c:	6879      	ldr	r1, [r7, #4]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	4613      	mov	r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	00db      	lsls	r3, r3, #3
 8006648:	440b      	add	r3, r1
 800664a:	335d      	adds	r3, #93	; 0x5d
 800664c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800664e:	2b08      	cmp	r3, #8
 8006650:	d155      	bne.n	80066fe <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8006652:	6879      	ldr	r1, [r7, #4]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	4613      	mov	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	00db      	lsls	r3, r3, #3
 800665e:	440b      	add	r3, r1
 8006660:	3358      	adds	r3, #88	; 0x58
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	1c59      	adds	r1, r3, #1
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	4613      	mov	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	4403      	add	r3, r0
 8006674:	3358      	adds	r3, #88	; 0x58
 8006676:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006678:	6879      	ldr	r1, [r7, #4]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	4613      	mov	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	00db      	lsls	r3, r3, #3
 8006684:	440b      	add	r3, r1
 8006686:	3358      	adds	r3, #88	; 0x58
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2b03      	cmp	r3, #3
 800668c:	d914      	bls.n	80066b8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800668e:	6879      	ldr	r1, [r7, #4]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	4613      	mov	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	00db      	lsls	r3, r3, #3
 800669a:	440b      	add	r3, r1
 800669c:	3358      	adds	r3, #88	; 0x58
 800669e:	2200      	movs	r2, #0
 80066a0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80066a2:	6879      	ldr	r1, [r7, #4]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	4613      	mov	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	00db      	lsls	r3, r3, #3
 80066ae:	440b      	add	r3, r1
 80066b0:	335c      	adds	r3, #92	; 0x5c
 80066b2:	2204      	movs	r2, #4
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	e009      	b.n	80066cc <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80066b8:	6879      	ldr	r1, [r7, #4]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	4613      	mov	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	00db      	lsls	r3, r3, #3
 80066c4:	440b      	add	r3, r1
 80066c6:	335c      	adds	r3, #92	; 0x5c
 80066c8:	2202      	movs	r2, #2
 80066ca:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066e2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066ea:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f8:	461a      	mov	r2, r3
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	4413      	add	r3, r2
 8006706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800670a:	461a      	mov	r2, r3
 800670c:	2302      	movs	r3, #2
 800670e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	b2d8      	uxtb	r0, r3
 8006714:	6879      	ldr	r1, [r7, #4]
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	4613      	mov	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4413      	add	r3, r2
 800671e:	00db      	lsls	r3, r3, #3
 8006720:	440b      	add	r3, r1
 8006722:	335c      	adds	r3, #92	; 0x5c
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	461a      	mov	r2, r3
 8006728:	4601      	mov	r1, r0
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f00d fae6 	bl	8013cfc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006730:	bf00      	nop
 8006732:	3718      	adds	r7, #24
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b08a      	sub	sp, #40	; 0x28
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006748:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	f003 030f 	and.w	r3, r3, #15
 8006758:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	0c5b      	lsrs	r3, r3, #17
 800675e:	f003 030f 	and.w	r3, r3, #15
 8006762:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	091b      	lsrs	r3, r3, #4
 8006768:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800676c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2b02      	cmp	r3, #2
 8006772:	d003      	beq.n	800677c <HCD_RXQLVL_IRQHandler+0x44>
 8006774:	2b05      	cmp	r3, #5
 8006776:	f000 8082 	beq.w	800687e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800677a:	e083      	b.n	8006884 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d07f      	beq.n	8006882 <HCD_RXQLVL_IRQHandler+0x14a>
 8006782:	6879      	ldr	r1, [r7, #4]
 8006784:	69ba      	ldr	r2, [r7, #24]
 8006786:	4613      	mov	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	00db      	lsls	r3, r3, #3
 800678e:	440b      	add	r3, r1
 8006790:	3344      	adds	r3, #68	; 0x44
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d074      	beq.n	8006882 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6818      	ldr	r0, [r3, #0]
 800679c:	6879      	ldr	r1, [r7, #4]
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	4613      	mov	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4413      	add	r3, r2
 80067a6:	00db      	lsls	r3, r3, #3
 80067a8:	440b      	add	r3, r1
 80067aa:	3344      	adds	r3, #68	; 0x44
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	b292      	uxth	r2, r2
 80067b2:	4619      	mov	r1, r3
 80067b4:	f004 ff0d 	bl	800b5d2 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80067b8:	6879      	ldr	r1, [r7, #4]
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	4613      	mov	r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	440b      	add	r3, r1
 80067c6:	3344      	adds	r3, #68	; 0x44
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	18d1      	adds	r1, r2, r3
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	4613      	mov	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	4413      	add	r3, r2
 80067d8:	00db      	lsls	r3, r3, #3
 80067da:	4403      	add	r3, r0
 80067dc:	3344      	adds	r3, #68	; 0x44
 80067de:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80067e0:	6879      	ldr	r1, [r7, #4]
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	4613      	mov	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	00db      	lsls	r3, r3, #3
 80067ec:	440b      	add	r3, r1
 80067ee:	334c      	adds	r3, #76	; 0x4c
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	18d1      	adds	r1, r2, r3
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	4613      	mov	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4413      	add	r3, r2
 8006800:	00db      	lsls	r3, r3, #3
 8006802:	4403      	add	r3, r0
 8006804:	334c      	adds	r3, #76	; 0x4c
 8006806:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	6a3b      	ldr	r3, [r7, #32]
 800680e:	4413      	add	r3, r2
 8006810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006814:	691a      	ldr	r2, [r3, #16]
 8006816:	4b1d      	ldr	r3, [pc, #116]	; (800688c <HCD_RXQLVL_IRQHandler+0x154>)
 8006818:	4013      	ands	r3, r2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d031      	beq.n	8006882 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	6a3b      	ldr	r3, [r7, #32]
 8006824:	4413      	add	r3, r2
 8006826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006834:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800683c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	015a      	lsls	r2, r3, #5
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	4413      	add	r3, r2
 8006846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800684a:	461a      	mov	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006850:	6879      	ldr	r1, [r7, #4]
 8006852:	69ba      	ldr	r2, [r7, #24]
 8006854:	4613      	mov	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	00db      	lsls	r3, r3, #3
 800685c:	440b      	add	r3, r1
 800685e:	3350      	adds	r3, #80	; 0x50
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	f083 0301 	eor.w	r3, r3, #1
 8006866:	b2d8      	uxtb	r0, r3
 8006868:	6879      	ldr	r1, [r7, #4]
 800686a:	69ba      	ldr	r2, [r7, #24]
 800686c:	4613      	mov	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	00db      	lsls	r3, r3, #3
 8006874:	440b      	add	r3, r1
 8006876:	3350      	adds	r3, #80	; 0x50
 8006878:	4602      	mov	r2, r0
 800687a:	701a      	strb	r2, [r3, #0]
      break;
 800687c:	e001      	b.n	8006882 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800687e:	bf00      	nop
 8006880:	e000      	b.n	8006884 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8006882:	bf00      	nop
  }
}
 8006884:	bf00      	nop
 8006886:	3728      	adds	r7, #40	; 0x28
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	1ff80000 	.word	0x1ff80000

08006890 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80068bc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d10b      	bne.n	80068e0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d102      	bne.n	80068d8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f00d f9f6 	bl	8013cc4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f043 0302 	orr.w	r3, r3, #2
 80068de:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f003 0308 	and.w	r3, r3, #8
 80068e6:	2b08      	cmp	r3, #8
 80068e8:	d132      	bne.n	8006950 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	f043 0308 	orr.w	r3, r3, #8
 80068f0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f003 0304 	and.w	r3, r3, #4
 80068f8:	2b04      	cmp	r3, #4
 80068fa:	d126      	bne.n	800694a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	2b02      	cmp	r3, #2
 8006902:	d113      	bne.n	800692c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800690a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800690e:	d106      	bne.n	800691e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2102      	movs	r1, #2
 8006916:	4618      	mov	r0, r3
 8006918:	f004 ff90 	bl	800b83c <USB_InitFSLSPClkSel>
 800691c:	e011      	b.n	8006942 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2101      	movs	r1, #1
 8006924:	4618      	mov	r0, r3
 8006926:	f004 ff89 	bl	800b83c <USB_InitFSLSPClkSel>
 800692a:	e00a      	b.n	8006942 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d106      	bne.n	8006942 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800693a:	461a      	mov	r2, r3
 800693c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006940:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f00d f9ec 	bl	8013d20 <HAL_HCD_PortEnabled_Callback>
 8006948:	e002      	b.n	8006950 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f00d f9f6 	bl	8013d3c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f003 0320 	and.w	r3, r3, #32
 8006956:	2b20      	cmp	r3, #32
 8006958:	d103      	bne.n	8006962 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	f043 0320 	orr.w	r3, r3, #32
 8006960:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006968:	461a      	mov	r2, r3
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	6013      	str	r3, [r2, #0]
}
 800696e:	bf00      	nop
 8006970:	3718      	adds	r7, #24
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
	...

08006978 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e11f      	b.n	8006bca <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	d106      	bne.n	80069a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7fb f92c 	bl	8001bfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2224      	movs	r2, #36	; 0x24
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f022 0201 	bic.w	r2, r2, #1
 80069ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80069dc:	f001 f80e 	bl	80079fc <HAL_RCC_GetPCLK1Freq>
 80069e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	4a7b      	ldr	r2, [pc, #492]	; (8006bd4 <HAL_I2C_Init+0x25c>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d807      	bhi.n	80069fc <HAL_I2C_Init+0x84>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4a7a      	ldr	r2, [pc, #488]	; (8006bd8 <HAL_I2C_Init+0x260>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	bf94      	ite	ls
 80069f4:	2301      	movls	r3, #1
 80069f6:	2300      	movhi	r3, #0
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	e006      	b.n	8006a0a <HAL_I2C_Init+0x92>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4a77      	ldr	r2, [pc, #476]	; (8006bdc <HAL_I2C_Init+0x264>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	bf94      	ite	ls
 8006a04:	2301      	movls	r3, #1
 8006a06:	2300      	movhi	r3, #0
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e0db      	b.n	8006bca <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	4a72      	ldr	r2, [pc, #456]	; (8006be0 <HAL_I2C_Init+0x268>)
 8006a16:	fba2 2303 	umull	r2, r3, r2, r3
 8006a1a:	0c9b      	lsrs	r3, r3, #18
 8006a1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6a1b      	ldr	r3, [r3, #32]
 8006a38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	4a64      	ldr	r2, [pc, #400]	; (8006bd4 <HAL_I2C_Init+0x25c>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d802      	bhi.n	8006a4c <HAL_I2C_Init+0xd4>
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	e009      	b.n	8006a60 <HAL_I2C_Init+0xe8>
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006a52:	fb02 f303 	mul.w	r3, r2, r3
 8006a56:	4a63      	ldr	r2, [pc, #396]	; (8006be4 <HAL_I2C_Init+0x26c>)
 8006a58:	fba2 2303 	umull	r2, r3, r2, r3
 8006a5c:	099b      	lsrs	r3, r3, #6
 8006a5e:	3301      	adds	r3, #1
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	6812      	ldr	r2, [r2, #0]
 8006a64:	430b      	orrs	r3, r1
 8006a66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006a72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	4956      	ldr	r1, [pc, #344]	; (8006bd4 <HAL_I2C_Init+0x25c>)
 8006a7c:	428b      	cmp	r3, r1
 8006a7e:	d80d      	bhi.n	8006a9c <HAL_I2C_Init+0x124>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	1e59      	subs	r1, r3, #1
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a8e:	3301      	adds	r3, #1
 8006a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a94:	2b04      	cmp	r3, #4
 8006a96:	bf38      	it	cc
 8006a98:	2304      	movcc	r3, #4
 8006a9a:	e04f      	b.n	8006b3c <HAL_I2C_Init+0x1c4>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d111      	bne.n	8006ac8 <HAL_I2C_Init+0x150>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	1e58      	subs	r0, r3, #1
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6859      	ldr	r1, [r3, #4]
 8006aac:	460b      	mov	r3, r1
 8006aae:	005b      	lsls	r3, r3, #1
 8006ab0:	440b      	add	r3, r1
 8006ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	bf0c      	ite	eq
 8006ac0:	2301      	moveq	r3, #1
 8006ac2:	2300      	movne	r3, #0
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	e012      	b.n	8006aee <HAL_I2C_Init+0x176>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	1e58      	subs	r0, r3, #1
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6859      	ldr	r1, [r3, #4]
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	440b      	add	r3, r1
 8006ad6:	0099      	lsls	r1, r3, #2
 8006ad8:	440b      	add	r3, r1
 8006ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ade:	3301      	adds	r3, #1
 8006ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	bf0c      	ite	eq
 8006ae8:	2301      	moveq	r3, #1
 8006aea:	2300      	movne	r3, #0
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <HAL_I2C_Init+0x17e>
 8006af2:	2301      	movs	r3, #1
 8006af4:	e022      	b.n	8006b3c <HAL_I2C_Init+0x1c4>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10e      	bne.n	8006b1c <HAL_I2C_Init+0x1a4>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	1e58      	subs	r0, r3, #1
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6859      	ldr	r1, [r3, #4]
 8006b06:	460b      	mov	r3, r1
 8006b08:	005b      	lsls	r3, r3, #1
 8006b0a:	440b      	add	r3, r1
 8006b0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b10:	3301      	adds	r3, #1
 8006b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b1a:	e00f      	b.n	8006b3c <HAL_I2C_Init+0x1c4>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	1e58      	subs	r0, r3, #1
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6859      	ldr	r1, [r3, #4]
 8006b24:	460b      	mov	r3, r1
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	440b      	add	r3, r1
 8006b2a:	0099      	lsls	r1, r3, #2
 8006b2c:	440b      	add	r3, r1
 8006b2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b32:	3301      	adds	r3, #1
 8006b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b3c:	6879      	ldr	r1, [r7, #4]
 8006b3e:	6809      	ldr	r1, [r1, #0]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	69da      	ldr	r2, [r3, #28]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	431a      	orrs	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006b6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	6911      	ldr	r1, [r2, #16]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	68d2      	ldr	r2, [r2, #12]
 8006b76:	4311      	orrs	r1, r2
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	6812      	ldr	r2, [r2, #0]
 8006b7c:	430b      	orrs	r3, r1
 8006b7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	695a      	ldr	r2, [r3, #20]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	431a      	orrs	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f042 0201 	orr.w	r2, r2, #1
 8006baa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2220      	movs	r2, #32
 8006bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	000186a0 	.word	0x000186a0
 8006bd8:	001e847f 	.word	0x001e847f
 8006bdc:	003d08ff 	.word	0x003d08ff
 8006be0:	431bde83 	.word	0x431bde83
 8006be4:	10624dd3 	.word	0x10624dd3

08006be8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b088      	sub	sp, #32
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e154      	b.n	8006ea4 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d109      	bne.n	8006c1a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a98      	ldr	r2, [pc, #608]	; (8006e74 <HAL_I2S_Init+0x28c>)
 8006c12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7fb f839 	bl	8001c8c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2202      	movs	r2, #2
 8006c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	69db      	ldr	r3, [r3, #28]
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	6812      	ldr	r2, [r2, #0]
 8006c2c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006c30:	f023 030f 	bic.w	r3, r3, #15
 8006c34:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d06f      	beq.n	8006d26 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d102      	bne.n	8006c54 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006c4e:	2310      	movs	r3, #16
 8006c50:	617b      	str	r3, [r7, #20]
 8006c52:	e001      	b.n	8006c58 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006c54:	2320      	movs	r3, #32
 8006c56:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	2b20      	cmp	r3, #32
 8006c5e:	d802      	bhi.n	8006c66 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	005b      	lsls	r3, r3, #1
 8006c64:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a83      	ldr	r2, [pc, #524]	; (8006e78 <HAL_I2S_Init+0x290>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d004      	beq.n	8006c7a <HAL_I2S_Init+0x92>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a81      	ldr	r2, [pc, #516]	; (8006e7c <HAL_I2S_Init+0x294>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d104      	bne.n	8006c84 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8006c7a:	2001      	movs	r0, #1
 8006c7c:	f001 f9a4 	bl	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c80:	60f8      	str	r0, [r7, #12]
 8006c82:	e003      	b.n	8006c8c <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8006c84:	2002      	movs	r0, #2
 8006c86:	f001 f99f 	bl	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c8a:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c94:	d125      	bne.n	8006ce2 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d010      	beq.n	8006cc0 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ca8:	4613      	mov	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	005b      	lsls	r3, r3, #1
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cba:	3305      	adds	r3, #5
 8006cbc:	613b      	str	r3, [r7, #16]
 8006cbe:	e01f      	b.n	8006d00 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	00db      	lsls	r3, r3, #3
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8006cca:	4613      	mov	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	005b      	lsls	r3, r3, #1
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	695b      	ldr	r3, [r3, #20]
 8006cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cdc:	3305      	adds	r3, #5
 8006cde:	613b      	str	r3, [r7, #16]
 8006ce0:	e00e      	b.n	8006d00 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	fbb2 f2f3 	udiv	r2, r2, r3
 8006cea:	4613      	mov	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	005b      	lsls	r3, r3, #1
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cfc:	3305      	adds	r3, #5
 8006cfe:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	4a5f      	ldr	r2, [pc, #380]	; (8006e80 <HAL_I2S_Init+0x298>)
 8006d04:	fba2 2303 	umull	r2, r3, r2, r3
 8006d08:	08db      	lsrs	r3, r3, #3
 8006d0a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	085b      	lsrs	r3, r3, #1
 8006d1c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	021b      	lsls	r3, r3, #8
 8006d22:	61bb      	str	r3, [r7, #24]
 8006d24:	e003      	b.n	8006d2e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006d26:	2302      	movs	r3, #2
 8006d28:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d902      	bls.n	8006d3a <HAL_I2S_Init+0x152>
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	2bff      	cmp	r3, #255	; 0xff
 8006d38:	d907      	bls.n	8006d4a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d3e:	f043 0210 	orr.w	r2, r3, #16
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e0ac      	b.n	8006ea4 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	691a      	ldr	r2, [r3, #16]
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	ea42 0103 	orr.w	r1, r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	69fa      	ldr	r2, [r7, #28]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	69db      	ldr	r3, [r3, #28]
 8006d64:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006d68:	f023 030f 	bic.w	r3, r3, #15
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	6851      	ldr	r1, [r2, #4]
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	6892      	ldr	r2, [r2, #8]
 8006d74:	4311      	orrs	r1, r2
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	68d2      	ldr	r2, [r2, #12]
 8006d7a:	4311      	orrs	r1, r2
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	6992      	ldr	r2, [r2, #24]
 8006d80:	430a      	orrs	r2, r1
 8006d82:	431a      	orrs	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d8c:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	2b30      	cmp	r3, #48	; 0x30
 8006d94:	d003      	beq.n	8006d9e <HAL_I2S_Init+0x1b6>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	2bb0      	cmp	r3, #176	; 0xb0
 8006d9c:	d107      	bne.n	8006dae <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	69da      	ldr	r2, [r3, #28]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006dac:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d16e      	bne.n	8006e94 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a32      	ldr	r2, [pc, #200]	; (8006e84 <HAL_I2S_Init+0x29c>)
 8006dba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a2d      	ldr	r2, [pc, #180]	; (8006e78 <HAL_I2S_Init+0x290>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d101      	bne.n	8006dca <HAL_I2S_Init+0x1e2>
 8006dc6:	4b30      	ldr	r3, [pc, #192]	; (8006e88 <HAL_I2S_Init+0x2a0>)
 8006dc8:	e001      	b.n	8006dce <HAL_I2S_Init+0x1e6>
 8006dca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006dce:	69db      	ldr	r3, [r3, #28]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	6812      	ldr	r2, [r2, #0]
 8006dd4:	4928      	ldr	r1, [pc, #160]	; (8006e78 <HAL_I2S_Init+0x290>)
 8006dd6:	428a      	cmp	r2, r1
 8006dd8:	d101      	bne.n	8006dde <HAL_I2S_Init+0x1f6>
 8006dda:	4a2b      	ldr	r2, [pc, #172]	; (8006e88 <HAL_I2S_Init+0x2a0>)
 8006ddc:	e001      	b.n	8006de2 <HAL_I2S_Init+0x1fa>
 8006dde:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006de2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006de6:	f023 030f 	bic.w	r3, r3, #15
 8006dea:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a21      	ldr	r2, [pc, #132]	; (8006e78 <HAL_I2S_Init+0x290>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d101      	bne.n	8006dfa <HAL_I2S_Init+0x212>
 8006df6:	4b24      	ldr	r3, [pc, #144]	; (8006e88 <HAL_I2S_Init+0x2a0>)
 8006df8:	e001      	b.n	8006dfe <HAL_I2S_Init+0x216>
 8006dfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006dfe:	2202      	movs	r2, #2
 8006e00:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a1c      	ldr	r2, [pc, #112]	; (8006e78 <HAL_I2S_Init+0x290>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d101      	bne.n	8006e10 <HAL_I2S_Init+0x228>
 8006e0c:	4b1e      	ldr	r3, [pc, #120]	; (8006e88 <HAL_I2S_Init+0x2a0>)
 8006e0e:	e001      	b.n	8006e14 <HAL_I2S_Init+0x22c>
 8006e10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e20:	d003      	beq.n	8006e2a <HAL_I2S_Init+0x242>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d103      	bne.n	8006e32 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e2e:	613b      	str	r3, [r7, #16]
 8006e30:	e001      	b.n	8006e36 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006e32:	2300      	movs	r3, #0
 8006e34:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	b299      	uxth	r1, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8006e4c:	4303      	orrs	r3, r0
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	430b      	orrs	r3, r1
 8006e52:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8006e54:	4313      	orrs	r3, r2
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	897b      	ldrh	r3, [r7, #10]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006e62:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a03      	ldr	r2, [pc, #12]	; (8006e78 <HAL_I2S_Init+0x290>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d10e      	bne.n	8006e8c <HAL_I2S_Init+0x2a4>
 8006e6e:	4b06      	ldr	r3, [pc, #24]	; (8006e88 <HAL_I2S_Init+0x2a0>)
 8006e70:	e00e      	b.n	8006e90 <HAL_I2S_Init+0x2a8>
 8006e72:	bf00      	nop
 8006e74:	08006f67 	.word	0x08006f67
 8006e78:	40003800 	.word	0x40003800
 8006e7c:	40003c00 	.word	0x40003c00
 8006e80:	cccccccd 	.word	0xcccccccd
 8006e84:	0800707d 	.word	0x0800707d
 8006e88:	40003400 	.word	0x40003400
 8006e8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e90:	897a      	ldrh	r2, [r7, #10]
 8006e92:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3720      	adds	r7, #32
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb8:	881a      	ldrh	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec4:	1c9a      	adds	r2, r3, #2
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10e      	bne.n	8006f00 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ef0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7fc f856 	bl	8002fac <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006f00:	bf00      	nop
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68da      	ldr	r2, [r3, #12]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1a:	b292      	uxth	r2, r2
 8006f1c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f22:	1c9a      	adds	r2, r3, #2
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10e      	bne.n	8006f5e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685a      	ldr	r2, [r3, #4]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f4e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7fc f849 	bl	8002ff0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006f5e:	bf00      	nop
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b086      	sub	sp, #24
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b04      	cmp	r3, #4
 8006f80:	d13a      	bne.n	8006ff8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f003 0301 	and.w	r3, r3, #1
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d109      	bne.n	8006fa0 <I2S_IRQHandler+0x3a>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f96:	2b40      	cmp	r3, #64	; 0x40
 8006f98:	d102      	bne.n	8006fa0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7ff ffb4 	bl	8006f08 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa6:	2b40      	cmp	r3, #64	; 0x40
 8006fa8:	d126      	bne.n	8006ff8 <I2S_IRQHandler+0x92>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	f003 0320 	and.w	r3, r3, #32
 8006fb4:	2b20      	cmp	r3, #32
 8006fb6:	d11f      	bne.n	8006ff8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006fc6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006fc8:	2300      	movs	r3, #0
 8006fca:	613b      	str	r3, [r7, #16]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	613b      	str	r3, [r7, #16]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	613b      	str	r3, [r7, #16]
 8006fdc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fea:	f043 0202 	orr.w	r2, r3, #2
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f7fb ffe4 	bl	8002fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b03      	cmp	r3, #3
 8007002:	d136      	bne.n	8007072 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f003 0302 	and.w	r3, r3, #2
 800700a:	2b02      	cmp	r3, #2
 800700c:	d109      	bne.n	8007022 <I2S_IRQHandler+0xbc>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007018:	2b80      	cmp	r3, #128	; 0x80
 800701a:	d102      	bne.n	8007022 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f7ff ff45 	bl	8006eac <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f003 0308 	and.w	r3, r3, #8
 8007028:	2b08      	cmp	r3, #8
 800702a:	d122      	bne.n	8007072 <I2S_IRQHandler+0x10c>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	f003 0320 	and.w	r3, r3, #32
 8007036:	2b20      	cmp	r3, #32
 8007038:	d11b      	bne.n	8007072 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007048:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800704a:	2300      	movs	r3, #0
 800704c:	60fb      	str	r3, [r7, #12]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	60fb      	str	r3, [r7, #12]
 8007056:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007064:	f043 0204 	orr.w	r2, r3, #4
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f7fb ffa7 	bl	8002fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007072:	bf00      	nop
 8007074:	3718      	adds	r7, #24
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
	...

0800707c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b088      	sub	sp, #32
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4aa2      	ldr	r2, [pc, #648]	; (800731c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d101      	bne.n	800709a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8007096:	4ba2      	ldr	r3, [pc, #648]	; (8007320 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007098:	e001      	b.n	800709e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800709a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a9b      	ldr	r2, [pc, #620]	; (800731c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d101      	bne.n	80070b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80070b4:	4b9a      	ldr	r3, [pc, #616]	; (8007320 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80070b6:	e001      	b.n	80070bc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80070b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070c8:	d004      	beq.n	80070d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f040 8099 	bne.w	8007206 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	f003 0302 	and.w	r3, r3, #2
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d107      	bne.n	80070ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f925 	bl	8007338 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	f003 0301 	and.w	r3, r3, #1
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d107      	bne.n	8007108 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d002      	beq.n	8007108 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f9c8 	bl	8007498 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800710e:	2b40      	cmp	r3, #64	; 0x40
 8007110:	d13a      	bne.n	8007188 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	f003 0320 	and.w	r3, r3, #32
 8007118:	2b00      	cmp	r3, #0
 800711a:	d035      	beq.n	8007188 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a7e      	ldr	r2, [pc, #504]	; (800731c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d101      	bne.n	800712a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8007126:	4b7e      	ldr	r3, [pc, #504]	; (8007320 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007128:	e001      	b.n	800712e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800712a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4979      	ldr	r1, [pc, #484]	; (800731c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007136:	428b      	cmp	r3, r1
 8007138:	d101      	bne.n	800713e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800713a:	4b79      	ldr	r3, [pc, #484]	; (8007320 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800713c:	e001      	b.n	8007142 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800713e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007142:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007146:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	685a      	ldr	r2, [r3, #4]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007156:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007158:	2300      	movs	r3, #0
 800715a:	60fb      	str	r3, [r7, #12]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	60fb      	str	r3, [r7, #12]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	60fb      	str	r3, [r7, #12]
 800716c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800717a:	f043 0202 	orr.w	r2, r3, #2
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7fb ff1c 	bl	8002fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	f003 0308 	and.w	r3, r3, #8
 800718e:	2b08      	cmp	r3, #8
 8007190:	f040 80be 	bne.w	8007310 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f003 0320 	and.w	r3, r3, #32
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 80b8 	beq.w	8007310 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	685a      	ldr	r2, [r3, #4]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80071ae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a59      	ldr	r2, [pc, #356]	; (800731c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d101      	bne.n	80071be <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80071ba:	4b59      	ldr	r3, [pc, #356]	; (8007320 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80071bc:	e001      	b.n	80071c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80071be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4954      	ldr	r1, [pc, #336]	; (800731c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80071ca:	428b      	cmp	r3, r1
 80071cc:	d101      	bne.n	80071d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80071ce:	4b54      	ldr	r3, [pc, #336]	; (8007320 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80071d0:	e001      	b.n	80071d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80071d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80071da:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80071dc:	2300      	movs	r3, #0
 80071de:	60bb      	str	r3, [r7, #8]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	60bb      	str	r3, [r7, #8]
 80071e8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f6:	f043 0204 	orr.w	r2, r3, #4
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f7fb fede 	bl	8002fc0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007204:	e084      	b.n	8007310 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	f003 0302 	and.w	r3, r3, #2
 800720c:	2b02      	cmp	r3, #2
 800720e:	d107      	bne.n	8007220 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f8be 	bl	800739c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	2b01      	cmp	r3, #1
 8007228:	d107      	bne.n	800723a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f8fd 	bl	8007434 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007240:	2b40      	cmp	r3, #64	; 0x40
 8007242:	d12f      	bne.n	80072a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	f003 0320 	and.w	r3, r3, #32
 800724a:	2b00      	cmp	r3, #0
 800724c:	d02a      	beq.n	80072a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800725c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a2e      	ldr	r2, [pc, #184]	; (800731c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d101      	bne.n	800726c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007268:	4b2d      	ldr	r3, [pc, #180]	; (8007320 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800726a:	e001      	b.n	8007270 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800726c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007270:	685a      	ldr	r2, [r3, #4]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4929      	ldr	r1, [pc, #164]	; (800731c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007278:	428b      	cmp	r3, r1
 800727a:	d101      	bne.n	8007280 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800727c:	4b28      	ldr	r3, [pc, #160]	; (8007320 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800727e:	e001      	b.n	8007284 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007280:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007284:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007288:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007296:	f043 0202 	orr.w	r2, r3, #2
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7fb fe8e 	bl	8002fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	f003 0308 	and.w	r3, r3, #8
 80072aa:	2b08      	cmp	r3, #8
 80072ac:	d131      	bne.n	8007312 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	f003 0320 	and.w	r3, r3, #32
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d02c      	beq.n	8007312 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a17      	ldr	r2, [pc, #92]	; (800731c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d101      	bne.n	80072c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80072c2:	4b17      	ldr	r3, [pc, #92]	; (8007320 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80072c4:	e001      	b.n	80072ca <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80072c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4912      	ldr	r1, [pc, #72]	; (800731c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80072d2:	428b      	cmp	r3, r1
 80072d4:	d101      	bne.n	80072da <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80072d6:	4b12      	ldr	r3, [pc, #72]	; (8007320 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80072d8:	e001      	b.n	80072de <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80072da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80072e2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	685a      	ldr	r2, [r3, #4]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80072f2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007300:	f043 0204 	orr.w	r2, r3, #4
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f7fb fe59 	bl	8002fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800730e:	e000      	b.n	8007312 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007310:	bf00      	nop
}
 8007312:	bf00      	nop
 8007314:	3720      	adds	r7, #32
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	40003800 	.word	0x40003800
 8007320:	40003400 	.word	0x40003400

08007324 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	1c99      	adds	r1, r3, #2
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	6251      	str	r1, [r2, #36]	; 0x24
 800734a:	881a      	ldrh	r2, [r3, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007356:	b29b      	uxth	r3, r3
 8007358:	3b01      	subs	r3, #1
 800735a:	b29a      	uxth	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007364:	b29b      	uxth	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d113      	bne.n	8007392 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	685a      	ldr	r2, [r3, #4]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007378:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800737e:	b29b      	uxth	r3, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	d106      	bne.n	8007392 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f7ff ffc9 	bl	8007324 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007392:	bf00      	nop
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
	...

0800739c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a8:	1c99      	adds	r1, r3, #2
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	6251      	str	r1, [r2, #36]	; 0x24
 80073ae:	8819      	ldrh	r1, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a1d      	ldr	r2, [pc, #116]	; (800742c <I2SEx_TxISR_I2SExt+0x90>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d101      	bne.n	80073be <I2SEx_TxISR_I2SExt+0x22>
 80073ba:	4b1d      	ldr	r3, [pc, #116]	; (8007430 <I2SEx_TxISR_I2SExt+0x94>)
 80073bc:	e001      	b.n	80073c2 <I2SEx_TxISR_I2SExt+0x26>
 80073be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073c2:	460a      	mov	r2, r1
 80073c4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	3b01      	subs	r3, #1
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073d8:	b29b      	uxth	r3, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d121      	bne.n	8007422 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a12      	ldr	r2, [pc, #72]	; (800742c <I2SEx_TxISR_I2SExt+0x90>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d101      	bne.n	80073ec <I2SEx_TxISR_I2SExt+0x50>
 80073e8:	4b11      	ldr	r3, [pc, #68]	; (8007430 <I2SEx_TxISR_I2SExt+0x94>)
 80073ea:	e001      	b.n	80073f0 <I2SEx_TxISR_I2SExt+0x54>
 80073ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	490d      	ldr	r1, [pc, #52]	; (800742c <I2SEx_TxISR_I2SExt+0x90>)
 80073f8:	428b      	cmp	r3, r1
 80073fa:	d101      	bne.n	8007400 <I2SEx_TxISR_I2SExt+0x64>
 80073fc:	4b0c      	ldr	r3, [pc, #48]	; (8007430 <I2SEx_TxISR_I2SExt+0x94>)
 80073fe:	e001      	b.n	8007404 <I2SEx_TxISR_I2SExt+0x68>
 8007400:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007404:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007408:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800740e:	b29b      	uxth	r3, r3
 8007410:	2b00      	cmp	r3, #0
 8007412:	d106      	bne.n	8007422 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7ff ff81 	bl	8007324 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007422:	bf00      	nop
 8007424:	3708      	adds	r7, #8
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	40003800 	.word	0x40003800
 8007430:	40003400 	.word	0x40003400

08007434 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68d8      	ldr	r0, [r3, #12]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007446:	1c99      	adds	r1, r3, #2
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800744c:	b282      	uxth	r2, r0
 800744e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007454:	b29b      	uxth	r3, r3
 8007456:	3b01      	subs	r3, #1
 8007458:	b29a      	uxth	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007462:	b29b      	uxth	r3, r3
 8007464:	2b00      	cmp	r3, #0
 8007466:	d113      	bne.n	8007490 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685a      	ldr	r2, [r3, #4]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007476:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800747c:	b29b      	uxth	r3, r3
 800747e:	2b00      	cmp	r3, #0
 8007480:	d106      	bne.n	8007490 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f7ff ff4a 	bl	8007324 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007490:	bf00      	nop
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a20      	ldr	r2, [pc, #128]	; (8007528 <I2SEx_RxISR_I2SExt+0x90>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d101      	bne.n	80074ae <I2SEx_RxISR_I2SExt+0x16>
 80074aa:	4b20      	ldr	r3, [pc, #128]	; (800752c <I2SEx_RxISR_I2SExt+0x94>)
 80074ac:	e001      	b.n	80074b2 <I2SEx_RxISR_I2SExt+0x1a>
 80074ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074b2:	68d8      	ldr	r0, [r3, #12]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b8:	1c99      	adds	r1, r3, #2
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80074be:	b282      	uxth	r2, r0
 80074c0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	3b01      	subs	r3, #1
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d121      	bne.n	800751e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a12      	ldr	r2, [pc, #72]	; (8007528 <I2SEx_RxISR_I2SExt+0x90>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d101      	bne.n	80074e8 <I2SEx_RxISR_I2SExt+0x50>
 80074e4:	4b11      	ldr	r3, [pc, #68]	; (800752c <I2SEx_RxISR_I2SExt+0x94>)
 80074e6:	e001      	b.n	80074ec <I2SEx_RxISR_I2SExt+0x54>
 80074e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074ec:	685a      	ldr	r2, [r3, #4]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	490d      	ldr	r1, [pc, #52]	; (8007528 <I2SEx_RxISR_I2SExt+0x90>)
 80074f4:	428b      	cmp	r3, r1
 80074f6:	d101      	bne.n	80074fc <I2SEx_RxISR_I2SExt+0x64>
 80074f8:	4b0c      	ldr	r3, [pc, #48]	; (800752c <I2SEx_RxISR_I2SExt+0x94>)
 80074fa:	e001      	b.n	8007500 <I2SEx_RxISR_I2SExt+0x68>
 80074fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007500:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007504:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800750a:	b29b      	uxth	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	d106      	bne.n	800751e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f7ff ff03 	bl	8007324 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800751e:	bf00      	nop
 8007520:	3708      	adds	r7, #8
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	40003800 	.word	0x40003800
 800752c:	40003400 	.word	0x40003400

08007530 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b086      	sub	sp, #24
 8007534:	af02      	add	r7, sp, #8
 8007536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007538:	f7fc faf2 	bl	8003b20 <HAL_GetTick>
 800753c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e069      	b.n	800761c <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800754e:	b2db      	uxtb	r3, r3
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10b      	bne.n	800756c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7fa fc4f 	bl	8001e00 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007562:	f241 3188 	movw	r1, #5000	; 0x1388
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f85e 	bl	8007628 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	3b01      	subs	r3, #1
 800757c:	021a      	lsls	r2, r3, #8
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	430a      	orrs	r2, r1
 8007584:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	2120      	movs	r1, #32
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f856 	bl	8007644 <QSPI_WaitFlagStateUntilTimeout>
 8007598:	4603      	mov	r3, r0
 800759a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800759c:	7afb      	ldrb	r3, [r7, #11]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d137      	bne.n	8007612 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80075ac:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	6852      	ldr	r2, [r2, #4]
 80075b4:	0611      	lsls	r1, r2, #24
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	68d2      	ldr	r2, [r2, #12]
 80075ba:	4311      	orrs	r1, r2
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	69d2      	ldr	r2, [r2, #28]
 80075c0:	4311      	orrs	r1, r2
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	6a12      	ldr	r2, [r2, #32]
 80075c6:	4311      	orrs	r1, r2
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	6812      	ldr	r2, [r2, #0]
 80075cc:	430b      	orrs	r3, r1
 80075ce:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	685a      	ldr	r2, [r3, #4]
 80075d6:	4b13      	ldr	r3, [pc, #76]	; (8007624 <HAL_QSPI_Init+0xf4>)
 80075d8:	4013      	ands	r3, r2
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	6912      	ldr	r2, [r2, #16]
 80075de:	0411      	lsls	r1, r2, #16
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	6952      	ldr	r2, [r2, #20]
 80075e4:	4311      	orrs	r1, r2
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	6992      	ldr	r2, [r2, #24]
 80075ea:	4311      	orrs	r1, r2
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	6812      	ldr	r2, [r2, #0]
 80075f0:	430b      	orrs	r3, r1
 80075f2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f042 0201 	orr.w	r2, r2, #1
 8007602:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800761a:	7afb      	ldrb	r3, [r7, #11]
}
 800761c:	4618      	mov	r0, r3
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	ffe0f8fe 	.word	0xffe0f8fe

08007628 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	683a      	ldr	r2, [r7, #0]
 8007636:	649a      	str	r2, [r3, #72]	; 0x48
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	603b      	str	r3, [r7, #0]
 8007650:	4613      	mov	r3, r2
 8007652:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007654:	e01a      	b.n	800768c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800765c:	d016      	beq.n	800768c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800765e:	f7fc fa5f 	bl	8003b20 <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	69ba      	ldr	r2, [r7, #24]
 800766a:	429a      	cmp	r2, r3
 800766c:	d302      	bcc.n	8007674 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10b      	bne.n	800768c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2204      	movs	r2, #4
 8007678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007680:	f043 0201 	orr.w	r2, r3, #1
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e00e      	b.n	80076aa <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	689a      	ldr	r2, [r3, #8]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	4013      	ands	r3, r2
 8007696:	2b00      	cmp	r3, #0
 8007698:	bf14      	ite	ne
 800769a:	2301      	movne	r3, #1
 800769c:	2300      	moveq	r3, #0
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	461a      	mov	r2, r3
 80076a2:	79fb      	ldrb	r3, [r7, #7]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d1d6      	bne.n	8007656 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
	...

080076b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d101      	bne.n	80076c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e0cc      	b.n	8007862 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80076c8:	4b68      	ldr	r3, [pc, #416]	; (800786c <HAL_RCC_ClockConfig+0x1b8>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 030f 	and.w	r3, r3, #15
 80076d0:	683a      	ldr	r2, [r7, #0]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d90c      	bls.n	80076f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076d6:	4b65      	ldr	r3, [pc, #404]	; (800786c <HAL_RCC_ClockConfig+0x1b8>)
 80076d8:	683a      	ldr	r2, [r7, #0]
 80076da:	b2d2      	uxtb	r2, r2
 80076dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076de:	4b63      	ldr	r3, [pc, #396]	; (800786c <HAL_RCC_ClockConfig+0x1b8>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 030f 	and.w	r3, r3, #15
 80076e6:	683a      	ldr	r2, [r7, #0]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d001      	beq.n	80076f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e0b8      	b.n	8007862 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 0302 	and.w	r3, r3, #2
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d020      	beq.n	800773e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0304 	and.w	r3, r3, #4
 8007704:	2b00      	cmp	r3, #0
 8007706:	d005      	beq.n	8007714 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007708:	4b59      	ldr	r3, [pc, #356]	; (8007870 <HAL_RCC_ClockConfig+0x1bc>)
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	4a58      	ldr	r2, [pc, #352]	; (8007870 <HAL_RCC_ClockConfig+0x1bc>)
 800770e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007712:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0308 	and.w	r3, r3, #8
 800771c:	2b00      	cmp	r3, #0
 800771e:	d005      	beq.n	800772c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007720:	4b53      	ldr	r3, [pc, #332]	; (8007870 <HAL_RCC_ClockConfig+0x1bc>)
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	4a52      	ldr	r2, [pc, #328]	; (8007870 <HAL_RCC_ClockConfig+0x1bc>)
 8007726:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800772a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800772c:	4b50      	ldr	r3, [pc, #320]	; (8007870 <HAL_RCC_ClockConfig+0x1bc>)
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	494d      	ldr	r1, [pc, #308]	; (8007870 <HAL_RCC_ClockConfig+0x1bc>)
 800773a:	4313      	orrs	r3, r2
 800773c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0301 	and.w	r3, r3, #1
 8007746:	2b00      	cmp	r3, #0
 8007748:	d044      	beq.n	80077d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d107      	bne.n	8007762 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007752:	4b47      	ldr	r3, [pc, #284]	; (8007870 <HAL_RCC_ClockConfig+0x1bc>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d119      	bne.n	8007792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e07f      	b.n	8007862 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	2b02      	cmp	r3, #2
 8007768:	d003      	beq.n	8007772 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800776e:	2b03      	cmp	r3, #3
 8007770:	d107      	bne.n	8007782 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007772:	4b3f      	ldr	r3, [pc, #252]	; (8007870 <HAL_RCC_ClockConfig+0x1bc>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800777a:	2b00      	cmp	r3, #0
 800777c:	d109      	bne.n	8007792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e06f      	b.n	8007862 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007782:	4b3b      	ldr	r3, [pc, #236]	; (8007870 <HAL_RCC_ClockConfig+0x1bc>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0302 	and.w	r3, r3, #2
 800778a:	2b00      	cmp	r3, #0
 800778c:	d101      	bne.n	8007792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e067      	b.n	8007862 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007792:	4b37      	ldr	r3, [pc, #220]	; (8007870 <HAL_RCC_ClockConfig+0x1bc>)
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f023 0203 	bic.w	r2, r3, #3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	4934      	ldr	r1, [pc, #208]	; (8007870 <HAL_RCC_ClockConfig+0x1bc>)
 80077a0:	4313      	orrs	r3, r2
 80077a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80077a4:	f7fc f9bc 	bl	8003b20 <HAL_GetTick>
 80077a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077aa:	e00a      	b.n	80077c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077ac:	f7fc f9b8 	bl	8003b20 <HAL_GetTick>
 80077b0:	4602      	mov	r2, r0
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d901      	bls.n	80077c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e04f      	b.n	8007862 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077c2:	4b2b      	ldr	r3, [pc, #172]	; (8007870 <HAL_RCC_ClockConfig+0x1bc>)
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f003 020c 	and.w	r2, r3, #12
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d1eb      	bne.n	80077ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80077d4:	4b25      	ldr	r3, [pc, #148]	; (800786c <HAL_RCC_ClockConfig+0x1b8>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 030f 	and.w	r3, r3, #15
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d20c      	bcs.n	80077fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077e2:	4b22      	ldr	r3, [pc, #136]	; (800786c <HAL_RCC_ClockConfig+0x1b8>)
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	b2d2      	uxtb	r2, r2
 80077e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ea:	4b20      	ldr	r3, [pc, #128]	; (800786c <HAL_RCC_ClockConfig+0x1b8>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 030f 	and.w	r3, r3, #15
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d001      	beq.n	80077fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e032      	b.n	8007862 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0304 	and.w	r3, r3, #4
 8007804:	2b00      	cmp	r3, #0
 8007806:	d008      	beq.n	800781a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007808:	4b19      	ldr	r3, [pc, #100]	; (8007870 <HAL_RCC_ClockConfig+0x1bc>)
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	4916      	ldr	r1, [pc, #88]	; (8007870 <HAL_RCC_ClockConfig+0x1bc>)
 8007816:	4313      	orrs	r3, r2
 8007818:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0308 	and.w	r3, r3, #8
 8007822:	2b00      	cmp	r3, #0
 8007824:	d009      	beq.n	800783a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007826:	4b12      	ldr	r3, [pc, #72]	; (8007870 <HAL_RCC_ClockConfig+0x1bc>)
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	00db      	lsls	r3, r3, #3
 8007834:	490e      	ldr	r1, [pc, #56]	; (8007870 <HAL_RCC_ClockConfig+0x1bc>)
 8007836:	4313      	orrs	r3, r2
 8007838:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800783a:	f000 f821 	bl	8007880 <HAL_RCC_GetSysClockFreq>
 800783e:	4601      	mov	r1, r0
 8007840:	4b0b      	ldr	r3, [pc, #44]	; (8007870 <HAL_RCC_ClockConfig+0x1bc>)
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	091b      	lsrs	r3, r3, #4
 8007846:	f003 030f 	and.w	r3, r3, #15
 800784a:	4a0a      	ldr	r2, [pc, #40]	; (8007874 <HAL_RCC_ClockConfig+0x1c0>)
 800784c:	5cd3      	ldrb	r3, [r2, r3]
 800784e:	fa21 f303 	lsr.w	r3, r1, r3
 8007852:	4a09      	ldr	r2, [pc, #36]	; (8007878 <HAL_RCC_ClockConfig+0x1c4>)
 8007854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007856:	4b09      	ldr	r3, [pc, #36]	; (800787c <HAL_RCC_ClockConfig+0x1c8>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4618      	mov	r0, r3
 800785c:	f7fa fcfa 	bl	8002254 <HAL_InitTick>

  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	40023c00 	.word	0x40023c00
 8007870:	40023800 	.word	0x40023800
 8007874:	08014b84 	.word	0x08014b84
 8007878:	20000000 	.word	0x20000000
 800787c:	2000005c 	.word	0x2000005c

08007880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007886:	2300      	movs	r3, #0
 8007888:	607b      	str	r3, [r7, #4]
 800788a:	2300      	movs	r3, #0
 800788c:	60fb      	str	r3, [r7, #12]
 800788e:	2300      	movs	r3, #0
 8007890:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007892:	2300      	movs	r3, #0
 8007894:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007896:	4b50      	ldr	r3, [pc, #320]	; (80079d8 <HAL_RCC_GetSysClockFreq+0x158>)
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	f003 030c 	and.w	r3, r3, #12
 800789e:	2b04      	cmp	r3, #4
 80078a0:	d007      	beq.n	80078b2 <HAL_RCC_GetSysClockFreq+0x32>
 80078a2:	2b08      	cmp	r3, #8
 80078a4:	d008      	beq.n	80078b8 <HAL_RCC_GetSysClockFreq+0x38>
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f040 808d 	bne.w	80079c6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80078ac:	4b4b      	ldr	r3, [pc, #300]	; (80079dc <HAL_RCC_GetSysClockFreq+0x15c>)
 80078ae:	60bb      	str	r3, [r7, #8]
       break;
 80078b0:	e08c      	b.n	80079cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80078b2:	4b4b      	ldr	r3, [pc, #300]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80078b4:	60bb      	str	r3, [r7, #8]
      break;
 80078b6:	e089      	b.n	80079cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80078b8:	4b47      	ldr	r3, [pc, #284]	; (80079d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80078c2:	4b45      	ldr	r3, [pc, #276]	; (80079d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d023      	beq.n	8007916 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078ce:	4b42      	ldr	r3, [pc, #264]	; (80079d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	099b      	lsrs	r3, r3, #6
 80078d4:	f04f 0400 	mov.w	r4, #0
 80078d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80078dc:	f04f 0200 	mov.w	r2, #0
 80078e0:	ea03 0501 	and.w	r5, r3, r1
 80078e4:	ea04 0602 	and.w	r6, r4, r2
 80078e8:	4a3d      	ldr	r2, [pc, #244]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80078ea:	fb02 f106 	mul.w	r1, r2, r6
 80078ee:	2200      	movs	r2, #0
 80078f0:	fb02 f205 	mul.w	r2, r2, r5
 80078f4:	440a      	add	r2, r1
 80078f6:	493a      	ldr	r1, [pc, #232]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80078f8:	fba5 0101 	umull	r0, r1, r5, r1
 80078fc:	1853      	adds	r3, r2, r1
 80078fe:	4619      	mov	r1, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f04f 0400 	mov.w	r4, #0
 8007906:	461a      	mov	r2, r3
 8007908:	4623      	mov	r3, r4
 800790a:	f7f8 fcd9 	bl	80002c0 <__aeabi_uldivmod>
 800790e:	4603      	mov	r3, r0
 8007910:	460c      	mov	r4, r1
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	e049      	b.n	80079aa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007916:	4b30      	ldr	r3, [pc, #192]	; (80079d8 <HAL_RCC_GetSysClockFreq+0x158>)
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	099b      	lsrs	r3, r3, #6
 800791c:	f04f 0400 	mov.w	r4, #0
 8007920:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007924:	f04f 0200 	mov.w	r2, #0
 8007928:	ea03 0501 	and.w	r5, r3, r1
 800792c:	ea04 0602 	and.w	r6, r4, r2
 8007930:	4629      	mov	r1, r5
 8007932:	4632      	mov	r2, r6
 8007934:	f04f 0300 	mov.w	r3, #0
 8007938:	f04f 0400 	mov.w	r4, #0
 800793c:	0154      	lsls	r4, r2, #5
 800793e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007942:	014b      	lsls	r3, r1, #5
 8007944:	4619      	mov	r1, r3
 8007946:	4622      	mov	r2, r4
 8007948:	1b49      	subs	r1, r1, r5
 800794a:	eb62 0206 	sbc.w	r2, r2, r6
 800794e:	f04f 0300 	mov.w	r3, #0
 8007952:	f04f 0400 	mov.w	r4, #0
 8007956:	0194      	lsls	r4, r2, #6
 8007958:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800795c:	018b      	lsls	r3, r1, #6
 800795e:	1a5b      	subs	r3, r3, r1
 8007960:	eb64 0402 	sbc.w	r4, r4, r2
 8007964:	f04f 0100 	mov.w	r1, #0
 8007968:	f04f 0200 	mov.w	r2, #0
 800796c:	00e2      	lsls	r2, r4, #3
 800796e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007972:	00d9      	lsls	r1, r3, #3
 8007974:	460b      	mov	r3, r1
 8007976:	4614      	mov	r4, r2
 8007978:	195b      	adds	r3, r3, r5
 800797a:	eb44 0406 	adc.w	r4, r4, r6
 800797e:	f04f 0100 	mov.w	r1, #0
 8007982:	f04f 0200 	mov.w	r2, #0
 8007986:	02a2      	lsls	r2, r4, #10
 8007988:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800798c:	0299      	lsls	r1, r3, #10
 800798e:	460b      	mov	r3, r1
 8007990:	4614      	mov	r4, r2
 8007992:	4618      	mov	r0, r3
 8007994:	4621      	mov	r1, r4
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f04f 0400 	mov.w	r4, #0
 800799c:	461a      	mov	r2, r3
 800799e:	4623      	mov	r3, r4
 80079a0:	f7f8 fc8e 	bl	80002c0 <__aeabi_uldivmod>
 80079a4:	4603      	mov	r3, r0
 80079a6:	460c      	mov	r4, r1
 80079a8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80079aa:	4b0b      	ldr	r3, [pc, #44]	; (80079d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	0c1b      	lsrs	r3, r3, #16
 80079b0:	f003 0303 	and.w	r3, r3, #3
 80079b4:	3301      	adds	r3, #1
 80079b6:	005b      	lsls	r3, r3, #1
 80079b8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c2:	60bb      	str	r3, [r7, #8]
      break;
 80079c4:	e002      	b.n	80079cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80079c6:	4b05      	ldr	r3, [pc, #20]	; (80079dc <HAL_RCC_GetSysClockFreq+0x15c>)
 80079c8:	60bb      	str	r3, [r7, #8]
      break;
 80079ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80079cc:	68bb      	ldr	r3, [r7, #8]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3714      	adds	r7, #20
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079d6:	bf00      	nop
 80079d8:	40023800 	.word	0x40023800
 80079dc:	00f42400 	.word	0x00f42400
 80079e0:	017d7840 	.word	0x017d7840

080079e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079e4:	b480      	push	{r7}
 80079e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079e8:	4b03      	ldr	r3, [pc, #12]	; (80079f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80079ea:	681b      	ldr	r3, [r3, #0]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	20000000 	.word	0x20000000

080079fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007a00:	f7ff fff0 	bl	80079e4 <HAL_RCC_GetHCLKFreq>
 8007a04:	4601      	mov	r1, r0
 8007a06:	4b05      	ldr	r3, [pc, #20]	; (8007a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	0a9b      	lsrs	r3, r3, #10
 8007a0c:	f003 0307 	and.w	r3, r3, #7
 8007a10:	4a03      	ldr	r2, [pc, #12]	; (8007a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a12:	5cd3      	ldrb	r3, [r2, r3]
 8007a14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	40023800 	.word	0x40023800
 8007a20:	08014b94 	.word	0x08014b94

08007a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007a28:	f7ff ffdc 	bl	80079e4 <HAL_RCC_GetHCLKFreq>
 8007a2c:	4601      	mov	r1, r0
 8007a2e:	4b05      	ldr	r3, [pc, #20]	; (8007a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	0b5b      	lsrs	r3, r3, #13
 8007a34:	f003 0307 	and.w	r3, r3, #7
 8007a38:	4a03      	ldr	r2, [pc, #12]	; (8007a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a3a:	5cd3      	ldrb	r3, [r2, r3]
 8007a3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	40023800 	.word	0x40023800
 8007a48:	08014b94 	.word	0x08014b94

08007a4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	220f      	movs	r2, #15
 8007a5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007a5c:	4b12      	ldr	r3, [pc, #72]	; (8007aa8 <HAL_RCC_GetClockConfig+0x5c>)
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f003 0203 	and.w	r2, r3, #3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007a68:	4b0f      	ldr	r3, [pc, #60]	; (8007aa8 <HAL_RCC_GetClockConfig+0x5c>)
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007a74:	4b0c      	ldr	r3, [pc, #48]	; (8007aa8 <HAL_RCC_GetClockConfig+0x5c>)
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007a80:	4b09      	ldr	r3, [pc, #36]	; (8007aa8 <HAL_RCC_GetClockConfig+0x5c>)
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	08db      	lsrs	r3, r3, #3
 8007a86:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007a8e:	4b07      	ldr	r3, [pc, #28]	; (8007aac <HAL_RCC_GetClockConfig+0x60>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 020f 	and.w	r2, r3, #15
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	601a      	str	r2, [r3, #0]
}
 8007a9a:	bf00      	nop
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	40023800 	.word	0x40023800
 8007aac:	40023c00 	.word	0x40023c00

08007ab0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b088      	sub	sp, #32
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8007abc:	2300      	movs	r3, #0
 8007abe:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0301 	and.w	r3, r3, #1
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d010      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8007ad4:	4b7a      	ldr	r3, [pc, #488]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ada:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	69db      	ldr	r3, [r3, #28]
 8007ae2:	4977      	ldr	r1, [pc, #476]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	69db      	ldr	r3, [r3, #28]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d101      	bne.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8007af2:	2301      	movs	r3, #1
 8007af4:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0302 	and.w	r3, r3, #2
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d010      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8007b02:	4b6f      	ldr	r3, [pc, #444]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b08:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a1b      	ldr	r3, [r3, #32]
 8007b10:	496b      	ldr	r1, [pc, #428]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007b12:	4313      	orrs	r3, r2
 8007b14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a1b      	ldr	r3, [r3, #32]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d101      	bne.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8007b20:	2301      	movs	r3, #1
 8007b22:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d022      	beq.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8007b30:	4b63      	ldr	r3, [pc, #396]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b3e:	4960      	ldr	r1, [pc, #384]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007b40:	4313      	orrs	r3, r2
 8007b42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d101      	bne.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b5a:	d10c      	bne.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8007b5c:	4b58      	ldr	r3, [pc, #352]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b62:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	021b      	lsls	r3, r3, #8
 8007b6e:	4954      	ldr	r1, [pc, #336]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007b70:	4313      	orrs	r3, r2
 8007b72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d022      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8007b82:	4b4f      	ldr	r3, [pc, #316]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b90:	494b      	ldr	r1, [pc, #300]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007b92:	4313      	orrs	r3, r2
 8007b94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d101      	bne.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ba8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bac:	d10c      	bne.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8007bae:	4b44      	ldr	r3, [pc, #272]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bb4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	021b      	lsls	r3, r3, #8
 8007bc0:	493f      	ldr	r1, [pc, #252]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 0308 	and.w	r3, r3, #8
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 808a 	beq.w	8007cea <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	60fb      	str	r3, [r7, #12]
 8007bda:	4b39      	ldr	r3, [pc, #228]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bde:	4a38      	ldr	r2, [pc, #224]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007be4:	6413      	str	r3, [r2, #64]	; 0x40
 8007be6:	4b36      	ldr	r3, [pc, #216]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bee:	60fb      	str	r3, [r7, #12]
 8007bf0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007bf2:	4b34      	ldr	r3, [pc, #208]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a33      	ldr	r2, [pc, #204]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bfc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007bfe:	f7fb ff8f 	bl	8003b20 <HAL_GetTick>
 8007c02:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007c04:	e008      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007c06:	f7fb ff8b 	bl	8003b20 <HAL_GetTick>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d901      	bls.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	e1d1      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007c18:	4b2a      	ldr	r3, [pc, #168]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d0f0      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c24:	4b26      	ldr	r3, [pc, #152]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c2c:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d02f      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d028      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c42:	4b1f      	ldr	r3, [pc, #124]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c4a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c4c:	4b1e      	ldr	r3, [pc, #120]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8007c4e:	2201      	movs	r2, #1
 8007c50:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c52:	4b1d      	ldr	r3, [pc, #116]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8007c54:	2200      	movs	r2, #0
 8007c56:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007c58:	4a19      	ldr	r2, [pc, #100]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007c5e:	4b18      	ldr	r3, [pc, #96]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d114      	bne.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007c6a:	f7fb ff59 	bl	8003b20 <HAL_GetTick>
 8007c6e:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c70:	e00a      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c72:	f7fb ff55 	bl	8003b20 <HAL_GetTick>
 8007c76:	4602      	mov	r2, r0
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d901      	bls.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8007c84:	2303      	movs	r3, #3
 8007c86:	e199      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c88:	4b0d      	ldr	r3, [pc, #52]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c8c:	f003 0302 	and.w	r3, r3, #2
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d0ee      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ca0:	d114      	bne.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8007ca2:	4b07      	ldr	r3, [pc, #28]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cb6:	4902      	ldr	r1, [pc, #8]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	608b      	str	r3, [r1, #8]
 8007cbc:	e00c      	b.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8007cbe:	bf00      	nop
 8007cc0:	40023800 	.word	0x40023800
 8007cc4:	40007000 	.word	0x40007000
 8007cc8:	42470e40 	.word	0x42470e40
 8007ccc:	4b89      	ldr	r3, [pc, #548]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	4a88      	ldr	r2, [pc, #544]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007cd2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007cd6:	6093      	str	r3, [r2, #8]
 8007cd8:	4b86      	ldr	r3, [pc, #536]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007cda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ce4:	4983      	ldr	r1, [pc, #524]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 0304 	and.w	r3, r3, #4
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d004      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8007cfc:	4b7e      	ldr	r3, [pc, #504]	; (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8007cfe:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0310 	and.w	r3, r3, #16
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00a      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8007d0c:	4b79      	ldr	r3, [pc, #484]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1a:	4976      	ldr	r1, [pc, #472]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 0320 	and.w	r3, r3, #32
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d011      	beq.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007d2e:	4b71      	ldr	r3, [pc, #452]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d34:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3c:	496d      	ldr	r1, [pc, #436]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d4c:	d101      	bne.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00a      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8007d5e:	4b65      	ldr	r3, [pc, #404]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d64:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6c:	4961      	ldr	r1, [pc, #388]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d004      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2b80      	cmp	r3, #128	; 0x80
 8007d80:	f040 80c6 	bne.w	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007d84:	4b5d      	ldr	r3, [pc, #372]	; (8007efc <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8007d86:	2200      	movs	r2, #0
 8007d88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007d8a:	f7fb fec9 	bl	8003b20 <HAL_GetTick>
 8007d8e:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d90:	e008      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007d92:	f7fb fec5 	bl	8003b20 <HAL_GetTick>
 8007d96:	4602      	mov	r2, r0
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d901      	bls.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007da0:	2303      	movs	r3, #3
 8007da2:	e10b      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007da4:	4b53      	ldr	r3, [pc, #332]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1f0      	bne.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8007db0:	4a53      	ldr	r2, [pc, #332]	; (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007db6:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 0301 	and.w	r3, r3, #1
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d003      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	69db      	ldr	r3, [r3, #28]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d023      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d003      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a1b      	ldr	r3, [r3, #32]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d019      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d004      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007df4:	d00e      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d019      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d115      	bne.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e12:	d110      	bne.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	685a      	ldr	r2, [r3, #4]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	019b      	lsls	r3, r3, #6
 8007e1e:	431a      	orrs	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	061b      	lsls	r3, r3, #24
 8007e26:	431a      	orrs	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	071b      	lsls	r3, r3, #28
 8007e2e:	4931      	ldr	r1, [pc, #196]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007e30:	4313      	orrs	r3, r2
 8007e32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d003      	beq.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d009      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d026      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d122      	bne.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e5e:	4b25      	ldr	r3, [pc, #148]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e64:	0e1b      	lsrs	r3, r3, #24
 8007e66:	f003 030f 	and.w	r3, r3, #15
 8007e6a:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685a      	ldr	r2, [r3, #4]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	019b      	lsls	r3, r3, #6
 8007e76:	431a      	orrs	r2, r3
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	061b      	lsls	r3, r3, #24
 8007e7c:	431a      	orrs	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	071b      	lsls	r3, r3, #28
 8007e84:	491b      	ldr	r1, [pc, #108]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007e86:	4313      	orrs	r3, r2
 8007e88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8007e8c:	4b19      	ldr	r3, [pc, #100]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e92:	f023 021f 	bic.w	r2, r3, #31
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	4915      	ldr	r1, [pc, #84]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d010      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	685a      	ldr	r2, [r3, #4]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	019b      	lsls	r3, r3, #6
 8007eba:	431a      	orrs	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	061b      	lsls	r3, r3, #24
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	071b      	lsls	r3, r3, #28
 8007eca:	490a      	ldr	r1, [pc, #40]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007ed2:	4b0a      	ldr	r3, [pc, #40]	; (8007efc <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007ed8:	f7fb fe22 	bl	8003b20 <HAL_GetTick>
 8007edc:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007ede:	e011      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007ee0:	f7fb fe1e 	bl	8003b20 <HAL_GetTick>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d90a      	bls.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e064      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8007ef2:	bf00      	nop
 8007ef4:	40023800 	.word	0x40023800
 8007ef8:	424711e0 	.word	0x424711e0
 8007efc:	42470068 	.word	0x42470068
 8007f00:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f04:	4b2f      	ldr	r3, [pc, #188]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d0e7      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00a      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f1c:	4b29      	ldr	r3, [pc, #164]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f2a:	4926      	ldr	r1, [pc, #152]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00a      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007f3e:	4b21      	ldr	r3, [pc, #132]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f44:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f4c:	491d      	ldr	r1, [pc, #116]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00a      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007f60:	4b18      	ldr	r3, [pc, #96]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f6e:	4915      	ldr	r1, [pc, #84]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007f70:	4313      	orrs	r3, r2
 8007f72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00a      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8007f82:	4b10      	ldr	r3, [pc, #64]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f88:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f90:	490c      	ldr	r1, [pc, #48]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007f92:	4313      	orrs	r3, r2
 8007f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00a      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007fa4:	4b07      	ldr	r3, [pc, #28]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007faa:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fb2:	4904      	ldr	r1, [pc, #16]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3720      	adds	r7, #32
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	40023800 	.word	0x40023800

08007fc8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b087      	sub	sp, #28
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d003      	beq.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	f000 8098 	beq.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8007fec:	e12d      	b.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8007fee:	4b9a      	ldr	r3, [pc, #616]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ff4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8007ff8:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008000:	d00c      	beq.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8008002:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008006:	d802      	bhi.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00a      	beq.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 800800c:	e082      	b.n	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800800e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008012:	d047      	beq.n	80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8008014:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8008018:	d06f      	beq.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 800801a:	e07b      	b.n	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800801c:	4b8f      	ldr	r3, [pc, #572]	; (800825c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800801e:	617b      	str	r3, [r7, #20]
          break;
 8008020:	e07b      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8008022:	4b8d      	ldr	r3, [pc, #564]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800802c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008030:	d109      	bne.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008032:	4b89      	ldr	r3, [pc, #548]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800803c:	4a87      	ldr	r2, [pc, #540]	; (800825c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800803e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008042:	613b      	str	r3, [r7, #16]
 8008044:	e019      	b.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008046:	4b84      	ldr	r3, [pc, #528]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800804e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008052:	d109      	bne.n	8008068 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008054:	4b80      	ldr	r3, [pc, #512]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800805a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800805e:	4a80      	ldr	r2, [pc, #512]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008060:	fbb2 f3f3 	udiv	r3, r2, r3
 8008064:	613b      	str	r3, [r7, #16]
 8008066:	e008      	b.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008068:	4b7b      	ldr	r3, [pc, #492]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800806a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800806e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008072:	4a7c      	ldr	r2, [pc, #496]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008074:	fbb2 f3f3 	udiv	r3, r2, r3
 8008078:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800807a:	4b77      	ldr	r3, [pc, #476]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800807c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008080:	099b      	lsrs	r3, r3, #6
 8008082:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	fb02 f303 	mul.w	r3, r2, r3
 800808c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800808e:	4b72      	ldr	r3, [pc, #456]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008094:	0f1b      	lsrs	r3, r3, #28
 8008096:	f003 0307 	and.w	r3, r3, #7
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a0:	617b      	str	r3, [r7, #20]
          break;
 80080a2:	e03a      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80080a4:	4b6c      	ldr	r3, [pc, #432]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080b0:	d108      	bne.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80080b2:	4b69      	ldr	r3, [pc, #420]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080ba:	4a69      	ldr	r2, [pc, #420]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80080bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c0:	613b      	str	r3, [r7, #16]
 80080c2:	e007      	b.n	80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80080c4:	4b64      	ldr	r3, [pc, #400]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080cc:	4a65      	ldr	r2, [pc, #404]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80080ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80080d2:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80080d4:	4b60      	ldr	r3, [pc, #384]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	099b      	lsrs	r3, r3, #6
 80080da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	fb02 f303 	mul.w	r3, r2, r3
 80080e4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80080e6:	4b5c      	ldr	r3, [pc, #368]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	0f1b      	lsrs	r3, r3, #28
 80080ec:	f003 0307 	and.w	r3, r3, #7
 80080f0:	68ba      	ldr	r2, [r7, #8]
 80080f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80080f6:	617b      	str	r3, [r7, #20]
          break;
 80080f8:	e00f      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80080fa:	4b57      	ldr	r3, [pc, #348]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008102:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008106:	d102      	bne.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 8008108:	4b55      	ldr	r3, [pc, #340]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800810a:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800810c:	e005      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 800810e:	4b55      	ldr	r3, [pc, #340]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008110:	617b      	str	r3, [r7, #20]
          break;
 8008112:	e002      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008114:	2300      	movs	r3, #0
 8008116:	617b      	str	r3, [r7, #20]
          break;
 8008118:	bf00      	nop
        }
      }
      break;
 800811a:	e096      	b.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 800811c:	4b4e      	ldr	r3, [pc, #312]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800811e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008122:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8008126:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800812e:	d00c      	beq.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8008130:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008134:	d802      	bhi.n	800813c <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00a      	beq.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800813a:	e082      	b.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800813c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008140:	d047      	beq.n	80081d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008142:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008146:	d06f      	beq.n	8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008148:	e07b      	b.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800814a:	4b44      	ldr	r3, [pc, #272]	; (800825c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800814c:	617b      	str	r3, [r7, #20]
          break;
 800814e:	e07b      	b.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8008150:	4b41      	ldr	r3, [pc, #260]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008152:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800815a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800815e:	d109      	bne.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008160:	4b3d      	ldr	r3, [pc, #244]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008166:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800816a:	4a3c      	ldr	r2, [pc, #240]	; (800825c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800816c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008170:	613b      	str	r3, [r7, #16]
 8008172:	e019      	b.n	80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008174:	4b38      	ldr	r3, [pc, #224]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800817c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008180:	d109      	bne.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008182:	4b35      	ldr	r3, [pc, #212]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800818c:	4a34      	ldr	r2, [pc, #208]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800818e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008192:	613b      	str	r3, [r7, #16]
 8008194:	e008      	b.n	80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008196:	4b30      	ldr	r3, [pc, #192]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800819c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081a0:	4a30      	ldr	r2, [pc, #192]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80081a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081a6:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80081a8:	4b2b      	ldr	r3, [pc, #172]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80081aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081ae:	099b      	lsrs	r3, r3, #6
 80081b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	fb02 f303 	mul.w	r3, r2, r3
 80081ba:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80081bc:	4b26      	ldr	r3, [pc, #152]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80081be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081c2:	0f1b      	lsrs	r3, r3, #28
 80081c4:	f003 0307 	and.w	r3, r3, #7
 80081c8:	68ba      	ldr	r2, [r7, #8]
 80081ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ce:	617b      	str	r3, [r7, #20]
          break;
 80081d0:	e03a      	b.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80081d2:	4b21      	ldr	r3, [pc, #132]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081de:	d108      	bne.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80081e0:	4b1d      	ldr	r3, [pc, #116]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081e8:	4a1d      	ldr	r2, [pc, #116]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80081ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ee:	613b      	str	r3, [r7, #16]
 80081f0:	e007      	b.n	8008202 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80081f2:	4b19      	ldr	r3, [pc, #100]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081fa:	4a1a      	ldr	r2, [pc, #104]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80081fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008200:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8008202:	4b15      	ldr	r3, [pc, #84]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	099b      	lsrs	r3, r3, #6
 8008208:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	fb02 f303 	mul.w	r3, r2, r3
 8008212:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8008214:	4b10      	ldr	r3, [pc, #64]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	0f1b      	lsrs	r3, r3, #28
 800821a:	f003 0307 	and.w	r3, r3, #7
 800821e:	68ba      	ldr	r2, [r7, #8]
 8008220:	fbb2 f3f3 	udiv	r3, r2, r3
 8008224:	617b      	str	r3, [r7, #20]
          break;
 8008226:	e00f      	b.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008228:	4b0b      	ldr	r3, [pc, #44]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008234:	d102      	bne.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 8008236:	4b0a      	ldr	r3, [pc, #40]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008238:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800823a:	e005      	b.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 800823c:	4b09      	ldr	r3, [pc, #36]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800823e:	617b      	str	r3, [r7, #20]
          break;
 8008240:	e002      	b.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008242:	2300      	movs	r3, #0
 8008244:	617b      	str	r3, [r7, #20]
          break;
 8008246:	bf00      	nop
        }
      }
      break;
 8008248:	bf00      	nop
    }
  }
  return frequency;
 800824a:	697b      	ldr	r3, [r7, #20]
}
 800824c:	4618      	mov	r0, r3
 800824e:	371c      	adds	r7, #28
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	40023800 	.word	0x40023800
 800825c:	00bb8000 	.word	0x00bb8000
 8008260:	017d7840 	.word	0x017d7840
 8008264:	00f42400 	.word	0x00f42400

08008268 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b086      	sub	sp, #24
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008270:	2300      	movs	r3, #0
 8008272:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 0301 	and.w	r3, r3, #1
 800827c:	2b00      	cmp	r3, #0
 800827e:	d075      	beq.n	800836c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008280:	4ba2      	ldr	r3, [pc, #648]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f003 030c 	and.w	r3, r3, #12
 8008288:	2b04      	cmp	r3, #4
 800828a:	d00c      	beq.n	80082a6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800828c:	4b9f      	ldr	r3, [pc, #636]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008294:	2b08      	cmp	r3, #8
 8008296:	d112      	bne.n	80082be <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008298:	4b9c      	ldr	r3, [pc, #624]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082a4:	d10b      	bne.n	80082be <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082a6:	4b99      	ldr	r3, [pc, #612]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d05b      	beq.n	800836a <HAL_RCC_OscConfig+0x102>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d157      	bne.n	800836a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e20b      	b.n	80086d6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082c6:	d106      	bne.n	80082d6 <HAL_RCC_OscConfig+0x6e>
 80082c8:	4b90      	ldr	r3, [pc, #576]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a8f      	ldr	r2, [pc, #572]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 80082ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082d2:	6013      	str	r3, [r2, #0]
 80082d4:	e01d      	b.n	8008312 <HAL_RCC_OscConfig+0xaa>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80082de:	d10c      	bne.n	80082fa <HAL_RCC_OscConfig+0x92>
 80082e0:	4b8a      	ldr	r3, [pc, #552]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a89      	ldr	r2, [pc, #548]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 80082e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082ea:	6013      	str	r3, [r2, #0]
 80082ec:	4b87      	ldr	r3, [pc, #540]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a86      	ldr	r2, [pc, #536]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 80082f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082f6:	6013      	str	r3, [r2, #0]
 80082f8:	e00b      	b.n	8008312 <HAL_RCC_OscConfig+0xaa>
 80082fa:	4b84      	ldr	r3, [pc, #528]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a83      	ldr	r2, [pc, #524]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 8008300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008304:	6013      	str	r3, [r2, #0]
 8008306:	4b81      	ldr	r3, [pc, #516]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a80      	ldr	r2, [pc, #512]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 800830c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008310:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d013      	beq.n	8008342 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800831a:	f7fb fc01 	bl	8003b20 <HAL_GetTick>
 800831e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008320:	e008      	b.n	8008334 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008322:	f7fb fbfd 	bl	8003b20 <HAL_GetTick>
 8008326:	4602      	mov	r2, r0
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	2b64      	cmp	r3, #100	; 0x64
 800832e:	d901      	bls.n	8008334 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8008330:	2303      	movs	r3, #3
 8008332:	e1d0      	b.n	80086d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008334:	4b75      	ldr	r3, [pc, #468]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d0f0      	beq.n	8008322 <HAL_RCC_OscConfig+0xba>
 8008340:	e014      	b.n	800836c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008342:	f7fb fbed 	bl	8003b20 <HAL_GetTick>
 8008346:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008348:	e008      	b.n	800835c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800834a:	f7fb fbe9 	bl	8003b20 <HAL_GetTick>
 800834e:	4602      	mov	r2, r0
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	1ad3      	subs	r3, r2, r3
 8008354:	2b64      	cmp	r3, #100	; 0x64
 8008356:	d901      	bls.n	800835c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8008358:	2303      	movs	r3, #3
 800835a:	e1bc      	b.n	80086d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800835c:	4b6b      	ldr	r3, [pc, #428]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d1f0      	bne.n	800834a <HAL_RCC_OscConfig+0xe2>
 8008368:	e000      	b.n	800836c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800836a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 0302 	and.w	r3, r3, #2
 8008374:	2b00      	cmp	r3, #0
 8008376:	d063      	beq.n	8008440 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008378:	4b64      	ldr	r3, [pc, #400]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	f003 030c 	and.w	r3, r3, #12
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00b      	beq.n	800839c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008384:	4b61      	ldr	r3, [pc, #388]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800838c:	2b08      	cmp	r3, #8
 800838e:	d11c      	bne.n	80083ca <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008390:	4b5e      	ldr	r3, [pc, #376]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008398:	2b00      	cmp	r3, #0
 800839a:	d116      	bne.n	80083ca <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800839c:	4b5b      	ldr	r3, [pc, #364]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 0302 	and.w	r3, r3, #2
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d005      	beq.n	80083b4 <HAL_RCC_OscConfig+0x14c>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d001      	beq.n	80083b4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e190      	b.n	80086d6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083b4:	4b55      	ldr	r3, [pc, #340]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	00db      	lsls	r3, r3, #3
 80083c2:	4952      	ldr	r1, [pc, #328]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 80083c4:	4313      	orrs	r3, r2
 80083c6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80083c8:	e03a      	b.n	8008440 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d020      	beq.n	8008414 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80083d2:	4b4f      	ldr	r3, [pc, #316]	; (8008510 <HAL_RCC_OscConfig+0x2a8>)
 80083d4:	2201      	movs	r2, #1
 80083d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083d8:	f7fb fba2 	bl	8003b20 <HAL_GetTick>
 80083dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083de:	e008      	b.n	80083f2 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083e0:	f7fb fb9e 	bl	8003b20 <HAL_GetTick>
 80083e4:	4602      	mov	r2, r0
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	2b02      	cmp	r3, #2
 80083ec:	d901      	bls.n	80083f2 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80083ee:	2303      	movs	r3, #3
 80083f0:	e171      	b.n	80086d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083f2:	4b46      	ldr	r3, [pc, #280]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 0302 	and.w	r3, r3, #2
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d0f0      	beq.n	80083e0 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083fe:	4b43      	ldr	r3, [pc, #268]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	00db      	lsls	r3, r3, #3
 800840c:	493f      	ldr	r1, [pc, #252]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 800840e:	4313      	orrs	r3, r2
 8008410:	600b      	str	r3, [r1, #0]
 8008412:	e015      	b.n	8008440 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008414:	4b3e      	ldr	r3, [pc, #248]	; (8008510 <HAL_RCC_OscConfig+0x2a8>)
 8008416:	2200      	movs	r2, #0
 8008418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800841a:	f7fb fb81 	bl	8003b20 <HAL_GetTick>
 800841e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008420:	e008      	b.n	8008434 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008422:	f7fb fb7d 	bl	8003b20 <HAL_GetTick>
 8008426:	4602      	mov	r2, r0
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	1ad3      	subs	r3, r2, r3
 800842c:	2b02      	cmp	r3, #2
 800842e:	d901      	bls.n	8008434 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008430:	2303      	movs	r3, #3
 8008432:	e150      	b.n	80086d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008434:	4b35      	ldr	r3, [pc, #212]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0302 	and.w	r3, r3, #2
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1f0      	bne.n	8008422 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 0308 	and.w	r3, r3, #8
 8008448:	2b00      	cmp	r3, #0
 800844a:	d030      	beq.n	80084ae <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	695b      	ldr	r3, [r3, #20]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d016      	beq.n	8008482 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008454:	4b2f      	ldr	r3, [pc, #188]	; (8008514 <HAL_RCC_OscConfig+0x2ac>)
 8008456:	2201      	movs	r2, #1
 8008458:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800845a:	f7fb fb61 	bl	8003b20 <HAL_GetTick>
 800845e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008460:	e008      	b.n	8008474 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008462:	f7fb fb5d 	bl	8003b20 <HAL_GetTick>
 8008466:	4602      	mov	r2, r0
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	1ad3      	subs	r3, r2, r3
 800846c:	2b02      	cmp	r3, #2
 800846e:	d901      	bls.n	8008474 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8008470:	2303      	movs	r3, #3
 8008472:	e130      	b.n	80086d6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008474:	4b25      	ldr	r3, [pc, #148]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 8008476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008478:	f003 0302 	and.w	r3, r3, #2
 800847c:	2b00      	cmp	r3, #0
 800847e:	d0f0      	beq.n	8008462 <HAL_RCC_OscConfig+0x1fa>
 8008480:	e015      	b.n	80084ae <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008482:	4b24      	ldr	r3, [pc, #144]	; (8008514 <HAL_RCC_OscConfig+0x2ac>)
 8008484:	2200      	movs	r2, #0
 8008486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008488:	f7fb fb4a 	bl	8003b20 <HAL_GetTick>
 800848c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800848e:	e008      	b.n	80084a2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008490:	f7fb fb46 	bl	8003b20 <HAL_GetTick>
 8008494:	4602      	mov	r2, r0
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	1ad3      	subs	r3, r2, r3
 800849a:	2b02      	cmp	r3, #2
 800849c:	d901      	bls.n	80084a2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800849e:	2303      	movs	r3, #3
 80084a0:	e119      	b.n	80086d6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084a2:	4b1a      	ldr	r3, [pc, #104]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 80084a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084a6:	f003 0302 	and.w	r3, r3, #2
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1f0      	bne.n	8008490 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 0304 	and.w	r3, r3, #4
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	f000 809f 	beq.w	80085fa <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 80084bc:	2300      	movs	r3, #0
 80084be:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80084c0:	4b12      	ldr	r3, [pc, #72]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 80084c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d10f      	bne.n	80084ec <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084cc:	2300      	movs	r3, #0
 80084ce:	60fb      	str	r3, [r7, #12]
 80084d0:	4b0e      	ldr	r3, [pc, #56]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 80084d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d4:	4a0d      	ldr	r2, [pc, #52]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 80084d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084da:	6413      	str	r3, [r2, #64]	; 0x40
 80084dc:	4b0b      	ldr	r3, [pc, #44]	; (800850c <HAL_RCC_OscConfig+0x2a4>)
 80084de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084e4:	60fb      	str	r3, [r7, #12]
 80084e6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80084e8:	2301      	movs	r3, #1
 80084ea:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084ec:	4b0a      	ldr	r3, [pc, #40]	; (8008518 <HAL_RCC_OscConfig+0x2b0>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d120      	bne.n	800853a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80084f8:	4b07      	ldr	r3, [pc, #28]	; (8008518 <HAL_RCC_OscConfig+0x2b0>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a06      	ldr	r2, [pc, #24]	; (8008518 <HAL_RCC_OscConfig+0x2b0>)
 80084fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008502:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008504:	f7fb fb0c 	bl	8003b20 <HAL_GetTick>
 8008508:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800850a:	e010      	b.n	800852e <HAL_RCC_OscConfig+0x2c6>
 800850c:	40023800 	.word	0x40023800
 8008510:	42470000 	.word	0x42470000
 8008514:	42470e80 	.word	0x42470e80
 8008518:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800851c:	f7fb fb00 	bl	8003b20 <HAL_GetTick>
 8008520:	4602      	mov	r2, r0
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	2b02      	cmp	r3, #2
 8008528:	d901      	bls.n	800852e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800852a:	2303      	movs	r3, #3
 800852c:	e0d3      	b.n	80086d6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800852e:	4b6c      	ldr	r3, [pc, #432]	; (80086e0 <HAL_RCC_OscConfig+0x478>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008536:	2b00      	cmp	r3, #0
 8008538:	d0f0      	beq.n	800851c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	2b01      	cmp	r3, #1
 8008540:	d106      	bne.n	8008550 <HAL_RCC_OscConfig+0x2e8>
 8008542:	4b68      	ldr	r3, [pc, #416]	; (80086e4 <HAL_RCC_OscConfig+0x47c>)
 8008544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008546:	4a67      	ldr	r2, [pc, #412]	; (80086e4 <HAL_RCC_OscConfig+0x47c>)
 8008548:	f043 0301 	orr.w	r3, r3, #1
 800854c:	6713      	str	r3, [r2, #112]	; 0x70
 800854e:	e01c      	b.n	800858a <HAL_RCC_OscConfig+0x322>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	2b05      	cmp	r3, #5
 8008556:	d10c      	bne.n	8008572 <HAL_RCC_OscConfig+0x30a>
 8008558:	4b62      	ldr	r3, [pc, #392]	; (80086e4 <HAL_RCC_OscConfig+0x47c>)
 800855a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800855c:	4a61      	ldr	r2, [pc, #388]	; (80086e4 <HAL_RCC_OscConfig+0x47c>)
 800855e:	f043 0304 	orr.w	r3, r3, #4
 8008562:	6713      	str	r3, [r2, #112]	; 0x70
 8008564:	4b5f      	ldr	r3, [pc, #380]	; (80086e4 <HAL_RCC_OscConfig+0x47c>)
 8008566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008568:	4a5e      	ldr	r2, [pc, #376]	; (80086e4 <HAL_RCC_OscConfig+0x47c>)
 800856a:	f043 0301 	orr.w	r3, r3, #1
 800856e:	6713      	str	r3, [r2, #112]	; 0x70
 8008570:	e00b      	b.n	800858a <HAL_RCC_OscConfig+0x322>
 8008572:	4b5c      	ldr	r3, [pc, #368]	; (80086e4 <HAL_RCC_OscConfig+0x47c>)
 8008574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008576:	4a5b      	ldr	r2, [pc, #364]	; (80086e4 <HAL_RCC_OscConfig+0x47c>)
 8008578:	f023 0301 	bic.w	r3, r3, #1
 800857c:	6713      	str	r3, [r2, #112]	; 0x70
 800857e:	4b59      	ldr	r3, [pc, #356]	; (80086e4 <HAL_RCC_OscConfig+0x47c>)
 8008580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008582:	4a58      	ldr	r2, [pc, #352]	; (80086e4 <HAL_RCC_OscConfig+0x47c>)
 8008584:	f023 0304 	bic.w	r3, r3, #4
 8008588:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d015      	beq.n	80085be <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008592:	f7fb fac5 	bl	8003b20 <HAL_GetTick>
 8008596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008598:	e00a      	b.n	80085b0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800859a:	f7fb fac1 	bl	8003b20 <HAL_GetTick>
 800859e:	4602      	mov	r2, r0
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d901      	bls.n	80085b0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e092      	b.n	80086d6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085b0:	4b4c      	ldr	r3, [pc, #304]	; (80086e4 <HAL_RCC_OscConfig+0x47c>)
 80085b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085b4:	f003 0302 	and.w	r3, r3, #2
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d0ee      	beq.n	800859a <HAL_RCC_OscConfig+0x332>
 80085bc:	e014      	b.n	80085e8 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085be:	f7fb faaf 	bl	8003b20 <HAL_GetTick>
 80085c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80085c4:	e00a      	b.n	80085dc <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085c6:	f7fb faab 	bl	8003b20 <HAL_GetTick>
 80085ca:	4602      	mov	r2, r0
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	1ad3      	subs	r3, r2, r3
 80085d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d901      	bls.n	80085dc <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 80085d8:	2303      	movs	r3, #3
 80085da:	e07c      	b.n	80086d6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80085dc:	4b41      	ldr	r3, [pc, #260]	; (80086e4 <HAL_RCC_OscConfig+0x47c>)
 80085de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085e0:	f003 0302 	and.w	r3, r3, #2
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1ee      	bne.n	80085c6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80085e8:	7dfb      	ldrb	r3, [r7, #23]
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d105      	bne.n	80085fa <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085ee:	4b3d      	ldr	r3, [pc, #244]	; (80086e4 <HAL_RCC_OscConfig+0x47c>)
 80085f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f2:	4a3c      	ldr	r2, [pc, #240]	; (80086e4 <HAL_RCC_OscConfig+0x47c>)
 80085f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	699b      	ldr	r3, [r3, #24]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d068      	beq.n	80086d4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008602:	4b38      	ldr	r3, [pc, #224]	; (80086e4 <HAL_RCC_OscConfig+0x47c>)
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	f003 030c 	and.w	r3, r3, #12
 800860a:	2b08      	cmp	r3, #8
 800860c:	d060      	beq.n	80086d0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	2b02      	cmp	r3, #2
 8008614:	d145      	bne.n	80086a2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008616:	4b34      	ldr	r3, [pc, #208]	; (80086e8 <HAL_RCC_OscConfig+0x480>)
 8008618:	2200      	movs	r2, #0
 800861a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800861c:	f7fb fa80 	bl	8003b20 <HAL_GetTick>
 8008620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008622:	e008      	b.n	8008636 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008624:	f7fb fa7c 	bl	8003b20 <HAL_GetTick>
 8008628:	4602      	mov	r2, r0
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	2b02      	cmp	r3, #2
 8008630:	d901      	bls.n	8008636 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8008632:	2303      	movs	r3, #3
 8008634:	e04f      	b.n	80086d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008636:	4b2b      	ldr	r3, [pc, #172]	; (80086e4 <HAL_RCC_OscConfig+0x47c>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800863e:	2b00      	cmp	r3, #0
 8008640:	d1f0      	bne.n	8008624 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	69da      	ldr	r2, [r3, #28]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a1b      	ldr	r3, [r3, #32]
 800864a:	431a      	orrs	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008650:	019b      	lsls	r3, r3, #6
 8008652:	431a      	orrs	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008658:	085b      	lsrs	r3, r3, #1
 800865a:	3b01      	subs	r3, #1
 800865c:	041b      	lsls	r3, r3, #16
 800865e:	431a      	orrs	r2, r3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008664:	061b      	lsls	r3, r3, #24
 8008666:	431a      	orrs	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866c:	071b      	lsls	r3, r3, #28
 800866e:	491d      	ldr	r1, [pc, #116]	; (80086e4 <HAL_RCC_OscConfig+0x47c>)
 8008670:	4313      	orrs	r3, r2
 8008672:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008674:	4b1c      	ldr	r3, [pc, #112]	; (80086e8 <HAL_RCC_OscConfig+0x480>)
 8008676:	2201      	movs	r2, #1
 8008678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800867a:	f7fb fa51 	bl	8003b20 <HAL_GetTick>
 800867e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008680:	e008      	b.n	8008694 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008682:	f7fb fa4d 	bl	8003b20 <HAL_GetTick>
 8008686:	4602      	mov	r2, r0
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	2b02      	cmp	r3, #2
 800868e:	d901      	bls.n	8008694 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8008690:	2303      	movs	r3, #3
 8008692:	e020      	b.n	80086d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008694:	4b13      	ldr	r3, [pc, #76]	; (80086e4 <HAL_RCC_OscConfig+0x47c>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d0f0      	beq.n	8008682 <HAL_RCC_OscConfig+0x41a>
 80086a0:	e018      	b.n	80086d4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086a2:	4b11      	ldr	r3, [pc, #68]	; (80086e8 <HAL_RCC_OscConfig+0x480>)
 80086a4:	2200      	movs	r2, #0
 80086a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086a8:	f7fb fa3a 	bl	8003b20 <HAL_GetTick>
 80086ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086ae:	e008      	b.n	80086c2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086b0:	f7fb fa36 	bl	8003b20 <HAL_GetTick>
 80086b4:	4602      	mov	r2, r0
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d901      	bls.n	80086c2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80086be:	2303      	movs	r3, #3
 80086c0:	e009      	b.n	80086d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086c2:	4b08      	ldr	r3, [pc, #32]	; (80086e4 <HAL_RCC_OscConfig+0x47c>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1f0      	bne.n	80086b0 <HAL_RCC_OscConfig+0x448>
 80086ce:	e001      	b.n	80086d4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e000      	b.n	80086d6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3718      	adds	r7, #24
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	40007000 	.word	0x40007000
 80086e4:	40023800 	.word	0x40023800
 80086e8:	42470060 	.word	0x42470060

080086ec <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d101      	bne.n	80086fe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e022      	b.n	8008744 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	d105      	bne.n	8008716 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f7f9 fc3f 	bl	8001f94 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2203      	movs	r2, #3
 800871a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f814 	bl	800874c <HAL_SD_InitCard>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d001      	beq.n	800872e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	e00a      	b.n	8008744 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800874c:	b5b0      	push	{r4, r5, r7, lr}
 800874e:	b08e      	sub	sp, #56	; 0x38
 8008750:	af04      	add	r7, sp, #16
 8008752:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008754:	2300      	movs	r3, #0
 8008756:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008758:	2300      	movs	r3, #0
 800875a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800875c:	2300      	movs	r3, #0
 800875e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008760:	2300      	movs	r3, #0
 8008762:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008764:	2300      	movs	r3, #0
 8008766:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008768:	2376      	movs	r3, #118	; 0x76
 800876a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681d      	ldr	r5, [r3, #0]
 8008770:	466c      	mov	r4, sp
 8008772:	f107 0314 	add.w	r3, r7, #20
 8008776:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800877a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800877e:	f107 0308 	add.w	r3, r7, #8
 8008782:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008784:	4628      	mov	r0, r5
 8008786:	f002 f895 	bl	800a8b4 <SDIO_Init>
 800878a:	4603      	mov	r3, r0
 800878c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008794:	2b00      	cmp	r3, #0
 8008796:	d001      	beq.n	800879c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e031      	b.n	8008800 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800879c:	4b1a      	ldr	r3, [pc, #104]	; (8008808 <HAL_SD_InitCard+0xbc>)
 800879e:	2200      	movs	r2, #0
 80087a0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4618      	mov	r0, r3
 80087a8:	f002 f8cd 	bl	800a946 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80087ac:	4b16      	ldr	r3, [pc, #88]	; (8008808 <HAL_SD_InitCard+0xbc>)
 80087ae:	2201      	movs	r2, #1
 80087b0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 fefc 	bl	80095b0 <SD_PowerON>
 80087b8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087ba:	6a3b      	ldr	r3, [r7, #32]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00b      	beq.n	80087d8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087cc:	6a3b      	ldr	r3, [r7, #32]
 80087ce:	431a      	orrs	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	e013      	b.n	8008800 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fe1b 	bl	8009414 <SD_InitCard>
 80087de:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087e0:	6a3b      	ldr	r3, [r7, #32]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00b      	beq.n	80087fe <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2201      	movs	r2, #1
 80087ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087f2:	6a3b      	ldr	r3, [r7, #32]
 80087f4:	431a      	orrs	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	e000      	b.n	8008800 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	3728      	adds	r7, #40	; 0x28
 8008804:	46bd      	mov	sp, r7
 8008806:	bdb0      	pop	{r4, r5, r7, pc}
 8008808:	422580a0 	.word	0x422580a0

0800880c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b092      	sub	sp, #72	; 0x48
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
 8008818:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800881a:	f7fb f981 	bl	8003b20 <HAL_GetTick>
 800881e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d107      	bne.n	800883e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008832:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	e1d7      	b.n	8008bee <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008844:	b2db      	uxtb	r3, r3
 8008846:	2b01      	cmp	r3, #1
 8008848:	f040 81ca 	bne.w	8008be0 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008852:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	441a      	add	r2, r3
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800885c:	429a      	cmp	r2, r3
 800885e:	d907      	bls.n	8008870 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008864:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	e1be      	b.n	8008bee <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2203      	movs	r2, #3
 8008874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2200      	movs	r2, #0
 800887e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008884:	2b01      	cmp	r3, #1
 8008886:	d002      	beq.n	800888e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888a:	025b      	lsls	r3, r3, #9
 800888c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008896:	4618      	mov	r0, r3
 8008898:	f002 f8e8 	bl	800aa6c <SDMMC_CmdBlockLength>
 800889c:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800889e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00f      	beq.n	80088c4 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a9a      	ldr	r2, [pc, #616]	; (8008b14 <HAL_SD_ReadBlocks+0x308>)
 80088aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088b2:	431a      	orrs	r2, r3
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e194      	b.n	8008bee <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80088c4:	f04f 33ff 	mov.w	r3, #4294967295
 80088c8:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	025b      	lsls	r3, r3, #9
 80088ce:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80088d0:	2390      	movs	r3, #144	; 0x90
 80088d2:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80088d4:	2302      	movs	r3, #2
 80088d6:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80088d8:	2300      	movs	r3, #0
 80088da:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80088dc:	2301      	movs	r3, #1
 80088de:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f107 0214 	add.w	r2, r7, #20
 80088e8:	4611      	mov	r1, r2
 80088ea:	4618      	mov	r0, r3
 80088ec:	f002 f892 	bl	800aa14 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d90a      	bls.n	800890c <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2202      	movs	r2, #2
 80088fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008902:	4618      	mov	r0, r3
 8008904:	f002 f8f6 	bl	800aaf4 <SDMMC_CmdReadMultiBlock>
 8008908:	6478      	str	r0, [r7, #68]	; 0x44
 800890a:	e009      	b.n	8008920 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2201      	movs	r2, #1
 8008910:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008918:	4618      	mov	r0, r3
 800891a:	f002 f8c9 	bl	800aab0 <SDMMC_CmdReadSingleBlock>
 800891e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008922:	2b00      	cmp	r3, #0
 8008924:	d012      	beq.n	800894c <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a7a      	ldr	r2, [pc, #488]	; (8008b14 <HAL_SD_ReadBlocks+0x308>)
 800892c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008934:	431a      	orrs	r2, r3
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2201      	movs	r2, #1
 800893e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	e150      	b.n	8008bee <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8008950:	e061      	b.n	8008a16 <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800895c:	2b00      	cmp	r3, #0
 800895e:	d03c      	beq.n	80089da <HAL_SD_ReadBlocks+0x1ce>
 8008960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008962:	2b00      	cmp	r3, #0
 8008964:	d039      	beq.n	80089da <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008966:	2300      	movs	r3, #0
 8008968:	643b      	str	r3, [r7, #64]	; 0x40
 800896a:	e033      	b.n	80089d4 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4618      	mov	r0, r3
 8008972:	f001 ffca 	bl	800a90a <SDIO_ReadFIFO>
 8008976:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800897a:	b2da      	uxtb	r2, r3
 800897c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800897e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008982:	3301      	adds	r3, #1
 8008984:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008988:	3b01      	subs	r3, #1
 800898a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800898c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898e:	0a1b      	lsrs	r3, r3, #8
 8008990:	b2da      	uxtb	r2, r3
 8008992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008994:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008998:	3301      	adds	r3, #1
 800899a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800899c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800899e:	3b01      	subs	r3, #1
 80089a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80089a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a4:	0c1b      	lsrs	r3, r3, #16
 80089a6:	b2da      	uxtb	r2, r3
 80089a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089aa:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80089ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ae:	3301      	adds	r3, #1
 80089b0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80089b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089b4:	3b01      	subs	r3, #1
 80089b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80089b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ba:	0e1b      	lsrs	r3, r3, #24
 80089bc:	b2da      	uxtb	r2, r3
 80089be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80089c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c4:	3301      	adds	r3, #1
 80089c6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80089c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ca:	3b01      	subs	r3, #1
 80089cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80089ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089d0:	3301      	adds	r3, #1
 80089d2:	643b      	str	r3, [r7, #64]	; 0x40
 80089d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089d6:	2b07      	cmp	r3, #7
 80089d8:	d9c8      	bls.n	800896c <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80089da:	f7fb f8a1 	bl	8003b20 <HAL_GetTick>
 80089de:	4602      	mov	r2, r0
 80089e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e2:	1ad3      	subs	r3, r2, r3
 80089e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d902      	bls.n	80089f0 <HAL_SD_ReadBlocks+0x1e4>
 80089ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d112      	bne.n	8008a16 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a47      	ldr	r2, [pc, #284]	; (8008b14 <HAL_SD_ReadBlocks+0x308>)
 80089f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008a12:	2303      	movs	r3, #3
 8008a14:	e0eb      	b.n	8008bee <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a1c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d096      	beq.n	8008952 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d022      	beq.n	8008a78 <HAL_SD_ReadBlocks+0x26c>
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d91f      	bls.n	8008a78 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a3c:	2b03      	cmp	r3, #3
 8008a3e:	d01b      	beq.n	8008a78 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4618      	mov	r0, r3
 8008a46:	f002 f8bb 	bl	800abc0 <SDMMC_CmdStopTransfer>
 8008a4a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d012      	beq.n	8008a78 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a2f      	ldr	r2, [pc, #188]	; (8008b14 <HAL_SD_ReadBlocks+0x308>)
 8008a58:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a60:	431a      	orrs	r2, r3
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	e0ba      	b.n	8008bee <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a7e:	f003 0308 	and.w	r3, r3, #8
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d012      	beq.n	8008aac <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a22      	ldr	r2, [pc, #136]	; (8008b14 <HAL_SD_ReadBlocks+0x308>)
 8008a8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a92:	f043 0208 	orr.w	r2, r3, #8
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e0a0      	b.n	8008bee <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab2:	f003 0302 	and.w	r3, r3, #2
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d012      	beq.n	8008ae0 <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a15      	ldr	r2, [pc, #84]	; (8008b14 <HAL_SD_ReadBlocks+0x308>)
 8008ac0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac6:	f043 0202 	orr.w	r2, r3, #2
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	e086      	b.n	8008bee <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ae6:	f003 0320 	and.w	r3, r3, #32
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d063      	beq.n	8008bb6 <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a08      	ldr	r2, [pc, #32]	; (8008b14 <HAL_SD_ReadBlocks+0x308>)
 8008af4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008afa:	f043 0220 	orr.w	r2, r3, #32
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2201      	movs	r2, #1
 8008b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e06c      	b.n	8008bee <HAL_SD_ReadBlocks+0x3e2>
 8008b14:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f001 fef4 	bl	800a90a <SDIO_ReadFIFO>
 8008b22:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8008b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b26:	b2da      	uxtb	r2, r3
 8008b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b2a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b2e:	3301      	adds	r3, #1
 8008b30:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b34:	3b01      	subs	r3, #1
 8008b36:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3a:	0a1b      	lsrs	r3, r3, #8
 8008b3c:	b2da      	uxtb	r2, r3
 8008b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b40:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b44:	3301      	adds	r3, #1
 8008b46:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b50:	0c1b      	lsrs	r3, r3, #16
 8008b52:	b2da      	uxtb	r2, r3
 8008b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b56:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b60:	3b01      	subs	r3, #1
 8008b62:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b66:	0e1b      	lsrs	r3, r3, #24
 8008b68:	b2da      	uxtb	r2, r3
 8008b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b6c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b70:	3301      	adds	r3, #1
 8008b72:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b76:	3b01      	subs	r3, #1
 8008b78:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008b7a:	f7fa ffd1 	bl	8003b20 <HAL_GetTick>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b82:	1ad3      	subs	r3, r2, r3
 8008b84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d902      	bls.n	8008b90 <HAL_SD_ReadBlocks+0x384>
 8008b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d112      	bne.n	8008bb6 <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a18      	ldr	r2, [pc, #96]	; (8008bf8 <HAL_SD_ReadBlocks+0x3ec>)
 8008b96:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e01b      	b.n	8008bee <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d002      	beq.n	8008bca <HAL_SD_ReadBlocks+0x3be>
 8008bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1a6      	bne.n	8008b18 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f240 523a 	movw	r2, #1338	; 0x53a
 8008bd2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	e006      	b.n	8008bee <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
  }
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3748      	adds	r7, #72	; 0x48
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	004005ff 	.word	0x004005ff

08008bfc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b092      	sub	sp, #72	; 0x48
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	607a      	str	r2, [r7, #4]
 8008c08:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008c0a:	f7fa ff89 	bl	8003b20 <HAL_GetTick>
 8008c0e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d107      	bne.n	8008c2e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c22:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e182      	b.n	8008f34 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	f040 8175 	bne.w	8008f26 <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008c42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	441a      	add	r2, r3
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d907      	bls.n	8008c60 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c54:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e169      	b.n	8008f34 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2203      	movs	r2, #3
 8008c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d002      	beq.n	8008c7e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7a:	025b      	lsls	r3, r3, #9
 8008c7c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008c86:	4618      	mov	r0, r3
 8008c88:	f001 fef0 	bl	800aa6c <SDMMC_CmdBlockLength>
 8008c8c:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00f      	beq.n	8008cb4 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a9c      	ldr	r2, [pc, #624]	; (8008f0c <HAL_SD_WriteBlocks+0x310>)
 8008c9a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ca2:	431a      	orrs	r2, r3
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e13f      	b.n	8008f34 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8008cb8:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	025b      	lsls	r3, r3, #9
 8008cbe:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008cc0:	2390      	movs	r3, #144	; 0x90
 8008cc2:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f107 0218 	add.w	r2, r7, #24
 8008cd8:	4611      	mov	r1, r2
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f001 fe9a 	bl	800aa14 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d90a      	bls.n	8008cfc <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2220      	movs	r2, #32
 8008cea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f001 ff42 	bl	800ab7c <SDMMC_CmdWriteMultiBlock>
 8008cf8:	6478      	str	r0, [r7, #68]	; 0x44
 8008cfa:	e009      	b.n	8008d10 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2210      	movs	r2, #16
 8008d00:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f001 ff15 	bl	800ab38 <SDMMC_CmdWriteSingleBlock>
 8008d0e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d012      	beq.n	8008d3c <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a7c      	ldr	r2, [pc, #496]	; (8008f0c <HAL_SD_WriteBlocks+0x310>)
 8008d1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d24:	431a      	orrs	r2, r3
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e0fb      	b.n	8008f34 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8008d40:	e065      	b.n	8008e0e <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d040      	beq.n	8008dd2 <HAL_SD_WriteBlocks+0x1d6>
 8008d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d03d      	beq.n	8008dd2 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008d56:	2300      	movs	r3, #0
 8008d58:	643b      	str	r3, [r7, #64]	; 0x40
 8008d5a:	e037      	b.n	8008dcc <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8008d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d64:	3301      	adds	r3, #1
 8008d66:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	021a      	lsls	r2, r3, #8
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d82:	3b01      	subs	r3, #1
 8008d84:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	041a      	lsls	r2, r3, #16
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d94:	3301      	adds	r3, #1
 8008d96:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	061a      	lsls	r2, r3, #24
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dac:	3301      	adds	r3, #1
 8008dae:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008db2:	3b01      	subs	r3, #1
 8008db4:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f107 0214 	add.w	r2, r7, #20
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f001 fdaf 	bl	800a924 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dc8:	3301      	adds	r3, #1
 8008dca:	643b      	str	r3, [r7, #64]	; 0x40
 8008dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dce:	2b07      	cmp	r3, #7
 8008dd0:	d9c4      	bls.n	8008d5c <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008dd2:	f7fa fea5 	bl	8003b20 <HAL_GetTick>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dda:	1ad3      	subs	r3, r2, r3
 8008ddc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d902      	bls.n	8008de8 <HAL_SD_WriteBlocks+0x1ec>
 8008de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d112      	bne.n	8008e0e <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a47      	ldr	r2, [pc, #284]	; (8008f0c <HAL_SD_WriteBlocks+0x310>)
 8008dee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008df6:	431a      	orrs	r2, r3
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2200      	movs	r2, #0
 8008e08:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	e092      	b.n	8008f34 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e14:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d092      	beq.n	8008d42 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d022      	beq.n	8008e70 <HAL_SD_WriteBlocks+0x274>
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d91f      	bls.n	8008e70 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e34:	2b03      	cmp	r3, #3
 8008e36:	d01b      	beq.n	8008e70 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f001 febf 	bl	800abc0 <SDMMC_CmdStopTransfer>
 8008e42:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d012      	beq.n	8008e70 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a2f      	ldr	r2, [pc, #188]	; (8008f0c <HAL_SD_WriteBlocks+0x310>)
 8008e50:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e58:	431a      	orrs	r2, r3
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e061      	b.n	8008f34 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e76:	f003 0308 	and.w	r3, r3, #8
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d012      	beq.n	8008ea4 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a22      	ldr	r2, [pc, #136]	; (8008f0c <HAL_SD_WriteBlocks+0x310>)
 8008e84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e8a:	f043 0208 	orr.w	r2, r3, #8
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2201      	movs	r2, #1
 8008e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e047      	b.n	8008f34 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eaa:	f003 0302 	and.w	r3, r3, #2
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d012      	beq.n	8008ed8 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a15      	ldr	r2, [pc, #84]	; (8008f0c <HAL_SD_WriteBlocks+0x310>)
 8008eb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ebe:	f043 0202 	orr.w	r2, r3, #2
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e02d      	b.n	8008f34 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ede:	f003 0310 	and.w	r3, r3, #16
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d014      	beq.n	8008f10 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a08      	ldr	r2, [pc, #32]	; (8008f0c <HAL_SD_WriteBlocks+0x310>)
 8008eec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef2:	f043 0210 	orr.w	r2, r3, #16
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2201      	movs	r2, #1
 8008efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2200      	movs	r2, #0
 8008f06:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e013      	b.n	8008f34 <HAL_SD_WriteBlocks+0x338>
 8008f0c:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f240 523a 	movw	r2, #1338	; 0x53a
 8008f18:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008f22:	2300      	movs	r3, #0
 8008f24:	e006      	b.n	8008f34 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
  }
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3748      	adds	r7, #72	; 0x48
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f4a:	0f9b      	lsrs	r3, r3, #30
 8008f4c:	b2da      	uxtb	r2, r3
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f56:	0e9b      	lsrs	r3, r3, #26
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	f003 030f 	and.w	r3, r3, #15
 8008f5e:	b2da      	uxtb	r2, r3
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f68:	0e1b      	lsrs	r3, r3, #24
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	f003 0303 	and.w	r3, r3, #3
 8008f70:	b2da      	uxtb	r2, r3
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f7a:	0c1b      	lsrs	r3, r3, #16
 8008f7c:	b2da      	uxtb	r2, r3
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f86:	0a1b      	lsrs	r3, r3, #8
 8008f88:	b2da      	uxtb	r2, r3
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f92:	b2da      	uxtb	r2, r3
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f9c:	0d1b      	lsrs	r3, r3, #20
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fa8:	0c1b      	lsrs	r3, r3, #16
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	f003 030f 	and.w	r3, r3, #15
 8008fb0:	b2da      	uxtb	r2, r3
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fba:	0bdb      	lsrs	r3, r3, #15
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	f003 0301 	and.w	r3, r3, #1
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fcc:	0b9b      	lsrs	r3, r3, #14
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	f003 0301 	and.w	r3, r3, #1
 8008fd4:	b2da      	uxtb	r2, r3
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fde:	0b5b      	lsrs	r3, r3, #13
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	f003 0301 	and.w	r3, r3, #1
 8008fe6:	b2da      	uxtb	r2, r3
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ff0:	0b1b      	lsrs	r3, r3, #12
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	f003 0301 	and.w	r3, r3, #1
 8008ff8:	b2da      	uxtb	r2, r3
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	2200      	movs	r2, #0
 8009002:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009008:	2b00      	cmp	r3, #0
 800900a:	d163      	bne.n	80090d4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009010:	009a      	lsls	r2, r3, #2
 8009012:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009016:	4013      	ands	r3, r2
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800901c:	0f92      	lsrs	r2, r2, #30
 800901e:	431a      	orrs	r2, r3
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009028:	0edb      	lsrs	r3, r3, #27
 800902a:	b2db      	uxtb	r3, r3
 800902c:	f003 0307 	and.w	r3, r3, #7
 8009030:	b2da      	uxtb	r2, r3
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800903a:	0e1b      	lsrs	r3, r3, #24
 800903c:	b2db      	uxtb	r3, r3
 800903e:	f003 0307 	and.w	r3, r3, #7
 8009042:	b2da      	uxtb	r2, r3
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800904c:	0d5b      	lsrs	r3, r3, #21
 800904e:	b2db      	uxtb	r3, r3
 8009050:	f003 0307 	and.w	r3, r3, #7
 8009054:	b2da      	uxtb	r2, r3
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800905e:	0c9b      	lsrs	r3, r3, #18
 8009060:	b2db      	uxtb	r3, r3
 8009062:	f003 0307 	and.w	r3, r3, #7
 8009066:	b2da      	uxtb	r2, r3
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009070:	0bdb      	lsrs	r3, r3, #15
 8009072:	b2db      	uxtb	r3, r3
 8009074:	f003 0307 	and.w	r3, r3, #7
 8009078:	b2da      	uxtb	r2, r3
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	691b      	ldr	r3, [r3, #16]
 8009082:	1c5a      	adds	r2, r3, #1
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	7e1b      	ldrb	r3, [r3, #24]
 800908c:	b2db      	uxtb	r3, r3
 800908e:	f003 0307 	and.w	r3, r3, #7
 8009092:	3302      	adds	r3, #2
 8009094:	2201      	movs	r2, #1
 8009096:	fa02 f303 	lsl.w	r3, r2, r3
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800909e:	fb02 f203 	mul.w	r2, r2, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	7a1b      	ldrb	r3, [r3, #8]
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	f003 030f 	and.w	r3, r3, #15
 80090b0:	2201      	movs	r2, #1
 80090b2:	409a      	lsls	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80090c0:	0a52      	lsrs	r2, r2, #9
 80090c2:	fb02 f203 	mul.w	r2, r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090d0:	661a      	str	r2, [r3, #96]	; 0x60
 80090d2:	e031      	b.n	8009138 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d11d      	bne.n	8009118 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090e0:	041b      	lsls	r3, r3, #16
 80090e2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090ea:	0c1b      	lsrs	r3, r3, #16
 80090ec:	431a      	orrs	r2, r3
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	3301      	adds	r3, #1
 80090f8:	029a      	lsls	r2, r3, #10
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f44f 7200 	mov.w	r2, #512	; 0x200
 800910c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	661a      	str	r2, [r3, #96]	; 0x60
 8009116:	e00f      	b.n	8009138 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a58      	ldr	r2, [pc, #352]	; (8009280 <HAL_SD_GetCardCSD+0x344>)
 800911e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009124:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	e09d      	b.n	8009274 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800913c:	0b9b      	lsrs	r3, r3, #14
 800913e:	b2db      	uxtb	r3, r3
 8009140:	f003 0301 	and.w	r3, r3, #1
 8009144:	b2da      	uxtb	r2, r3
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800914e:	09db      	lsrs	r3, r3, #7
 8009150:	b2db      	uxtb	r3, r3
 8009152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009156:	b2da      	uxtb	r2, r3
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009160:	b2db      	uxtb	r3, r3
 8009162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009166:	b2da      	uxtb	r2, r3
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009170:	0fdb      	lsrs	r3, r3, #31
 8009172:	b2da      	uxtb	r2, r3
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800917c:	0f5b      	lsrs	r3, r3, #29
 800917e:	b2db      	uxtb	r3, r3
 8009180:	f003 0303 	and.w	r3, r3, #3
 8009184:	b2da      	uxtb	r2, r3
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800918e:	0e9b      	lsrs	r3, r3, #26
 8009190:	b2db      	uxtb	r3, r3
 8009192:	f003 0307 	and.w	r3, r3, #7
 8009196:	b2da      	uxtb	r2, r3
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091a0:	0d9b      	lsrs	r3, r3, #22
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	f003 030f 	and.w	r3, r3, #15
 80091a8:	b2da      	uxtb	r2, r3
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091b2:	0d5b      	lsrs	r3, r3, #21
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	f003 0301 	and.w	r3, r3, #1
 80091ba:	b2da      	uxtb	r2, r3
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ce:	0c1b      	lsrs	r3, r3, #16
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	f003 0301 	and.w	r3, r3, #1
 80091d6:	b2da      	uxtb	r2, r3
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091e2:	0bdb      	lsrs	r3, r3, #15
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	f003 0301 	and.w	r3, r3, #1
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091f6:	0b9b      	lsrs	r3, r3, #14
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	f003 0301 	and.w	r3, r3, #1
 80091fe:	b2da      	uxtb	r2, r3
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800920a:	0b5b      	lsrs	r3, r3, #13
 800920c:	b2db      	uxtb	r3, r3
 800920e:	f003 0301 	and.w	r3, r3, #1
 8009212:	b2da      	uxtb	r2, r3
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800921e:	0b1b      	lsrs	r3, r3, #12
 8009220:	b2db      	uxtb	r3, r3
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	b2da      	uxtb	r2, r3
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009232:	0a9b      	lsrs	r3, r3, #10
 8009234:	b2db      	uxtb	r3, r3
 8009236:	f003 0303 	and.w	r3, r3, #3
 800923a:	b2da      	uxtb	r2, r3
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009246:	0a1b      	lsrs	r3, r3, #8
 8009248:	b2db      	uxtb	r3, r3
 800924a:	f003 0303 	and.w	r3, r3, #3
 800924e:	b2da      	uxtb	r2, r3
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800925a:	085b      	lsrs	r3, r3, #1
 800925c:	b2db      	uxtb	r3, r3
 800925e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009262:	b2da      	uxtb	r2, r3
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	2201      	movs	r2, #1
 800926e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr
 8009280:	004005ff 	.word	0x004005ff

08009284 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80092ce:	2300      	movs	r3, #0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80092dc:	b5b0      	push	{r4, r5, r7, lr}
 80092de:	b08e      	sub	sp, #56	; 0x38
 80092e0:	af04      	add	r7, sp, #16
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2203      	movs	r2, #3
 80092ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092f2:	2b03      	cmp	r3, #3
 80092f4:	d02e      	beq.n	8009354 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092fc:	d106      	bne.n	800930c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009302:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	639a      	str	r2, [r3, #56]	; 0x38
 800930a:	e029      	b.n	8009360 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009312:	d10a      	bne.n	800932a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 fa01 	bl	800971c <SD_WideBus_Enable>
 800931a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009322:	431a      	orrs	r2, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	639a      	str	r2, [r3, #56]	; 0x38
 8009328:	e01a      	b.n	8009360 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10a      	bne.n	8009346 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 fa3e 	bl	80097b2 <SD_WideBus_Disable>
 8009336:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800933c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933e:	431a      	orrs	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	639a      	str	r2, [r3, #56]	; 0x38
 8009344:	e00c      	b.n	8009360 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800934a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	639a      	str	r2, [r3, #56]	; 0x38
 8009352:	e005      	b.n	8009360 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009358:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009364:	2b00      	cmp	r3, #0
 8009366:	d009      	beq.n	800937c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a18      	ldr	r2, [pc, #96]	; (80093d0 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800936e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009378:	2301      	movs	r3, #1
 800937a:	e024      	b.n	80093c6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	695b      	ldr	r3, [r3, #20]
 8009396:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	699b      	ldr	r3, [r3, #24]
 800939c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681d      	ldr	r5, [r3, #0]
 80093a2:	466c      	mov	r4, sp
 80093a4:	f107 0318 	add.w	r3, r7, #24
 80093a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80093ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80093b0:	f107 030c 	add.w	r3, r7, #12
 80093b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80093b6:	4628      	mov	r0, r5
 80093b8:	f001 fa7c 	bl	800a8b4 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3728      	adds	r7, #40	; 0x28
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bdb0      	pop	{r4, r5, r7, pc}
 80093ce:	bf00      	nop
 80093d0:	004005ff 	.word	0x004005ff

080093d4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b086      	sub	sp, #24
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80093dc:	2300      	movs	r3, #0
 80093de:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80093e0:	f107 030c 	add.w	r3, r7, #12
 80093e4:	4619      	mov	r1, r3
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 f970 	bl	80096cc <SD_SendStatus>
 80093ec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d005      	beq.n	8009400 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	431a      	orrs	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	0a5b      	lsrs	r3, r3, #9
 8009404:	f003 030f 	and.w	r3, r3, #15
 8009408:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800940a:	693b      	ldr	r3, [r7, #16]
}
 800940c:	4618      	mov	r0, r3
 800940e:	3718      	adds	r7, #24
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009414:	b5b0      	push	{r4, r5, r7, lr}
 8009416:	b094      	sub	sp, #80	; 0x50
 8009418:	af04      	add	r7, sp, #16
 800941a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800941c:	2301      	movs	r3, #1
 800941e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4618      	mov	r0, r3
 8009426:	f001 fa9d 	bl	800a964 <SDIO_GetPowerState>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d102      	bne.n	8009436 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009430:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009434:	e0b7      	b.n	80095a6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800943a:	2b03      	cmp	r3, #3
 800943c:	d02f      	beq.n	800949e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4618      	mov	r0, r3
 8009444:	f001 fcc6 	bl	800add4 <SDMMC_CmdSendCID>
 8009448:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800944a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800944c:	2b00      	cmp	r3, #0
 800944e:	d001      	beq.n	8009454 <SD_InitCard+0x40>
    {
      return errorstate;
 8009450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009452:	e0a8      	b.n	80095a6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2100      	movs	r1, #0
 800945a:	4618      	mov	r0, r3
 800945c:	f001 fac7 	bl	800a9ee <SDIO_GetResponse>
 8009460:	4602      	mov	r2, r0
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	2104      	movs	r1, #4
 800946c:	4618      	mov	r0, r3
 800946e:	f001 fabe 	bl	800a9ee <SDIO_GetResponse>
 8009472:	4602      	mov	r2, r0
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2108      	movs	r1, #8
 800947e:	4618      	mov	r0, r3
 8009480:	f001 fab5 	bl	800a9ee <SDIO_GetResponse>
 8009484:	4602      	mov	r2, r0
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	210c      	movs	r1, #12
 8009490:	4618      	mov	r0, r3
 8009492:	f001 faac 	bl	800a9ee <SDIO_GetResponse>
 8009496:	4602      	mov	r2, r0
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094a2:	2b03      	cmp	r3, #3
 80094a4:	d00d      	beq.n	80094c2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f107 020e 	add.w	r2, r7, #14
 80094ae:	4611      	mov	r1, r2
 80094b0:	4618      	mov	r0, r3
 80094b2:	f001 fccc 	bl	800ae4e <SDMMC_CmdSetRelAdd>
 80094b6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80094b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d001      	beq.n	80094c2 <SD_InitCard+0xae>
    {
      return errorstate;
 80094be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094c0:	e071      	b.n	80095a6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094c6:	2b03      	cmp	r3, #3
 80094c8:	d036      	beq.n	8009538 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80094ca:	89fb      	ldrh	r3, [r7, #14]
 80094cc:	461a      	mov	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094da:	041b      	lsls	r3, r3, #16
 80094dc:	4619      	mov	r1, r3
 80094de:	4610      	mov	r0, r2
 80094e0:	f001 fc96 	bl	800ae10 <SDMMC_CmdSendCSD>
 80094e4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80094e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d001      	beq.n	80094f0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80094ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ee:	e05a      	b.n	80095a6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2100      	movs	r1, #0
 80094f6:	4618      	mov	r0, r3
 80094f8:	f001 fa79 	bl	800a9ee <SDIO_GetResponse>
 80094fc:	4602      	mov	r2, r0
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2104      	movs	r1, #4
 8009508:	4618      	mov	r0, r3
 800950a:	f001 fa70 	bl	800a9ee <SDIO_GetResponse>
 800950e:	4602      	mov	r2, r0
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2108      	movs	r1, #8
 800951a:	4618      	mov	r0, r3
 800951c:	f001 fa67 	bl	800a9ee <SDIO_GetResponse>
 8009520:	4602      	mov	r2, r0
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	210c      	movs	r1, #12
 800952c:	4618      	mov	r0, r3
 800952e:	f001 fa5e 	bl	800a9ee <SDIO_GetResponse>
 8009532:	4602      	mov	r2, r0
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2104      	movs	r1, #4
 800953e:	4618      	mov	r0, r3
 8009540:	f001 fa55 	bl	800a9ee <SDIO_GetResponse>
 8009544:	4603      	mov	r3, r0
 8009546:	0d1a      	lsrs	r2, r3, #20
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800954c:	f107 0310 	add.w	r3, r7, #16
 8009550:	4619      	mov	r1, r3
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f7ff fcf2 	bl	8008f3c <HAL_SD_GetCardCSD>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d002      	beq.n	8009564 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800955e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009562:	e020      	b.n	80095a6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6819      	ldr	r1, [r3, #0]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800956c:	041b      	lsls	r3, r3, #16
 800956e:	f04f 0400 	mov.w	r4, #0
 8009572:	461a      	mov	r2, r3
 8009574:	4623      	mov	r3, r4
 8009576:	4608      	mov	r0, r1
 8009578:	f001 fb44 	bl	800ac04 <SDMMC_CmdSelDesel>
 800957c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800957e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009580:	2b00      	cmp	r3, #0
 8009582:	d001      	beq.n	8009588 <SD_InitCard+0x174>
  {
    return errorstate;
 8009584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009586:	e00e      	b.n	80095a6 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681d      	ldr	r5, [r3, #0]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	466c      	mov	r4, sp
 8009590:	f103 0210 	add.w	r2, r3, #16
 8009594:	ca07      	ldmia	r2, {r0, r1, r2}
 8009596:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800959a:	3304      	adds	r3, #4
 800959c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800959e:	4628      	mov	r0, r5
 80095a0:	f001 f988 	bl	800a8b4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3740      	adds	r7, #64	; 0x40
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080095b0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b086      	sub	sp, #24
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095b8:	2300      	movs	r3, #0
 80095ba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80095bc:	2300      	movs	r3, #0
 80095be:	617b      	str	r3, [r7, #20]
 80095c0:	2300      	movs	r3, #0
 80095c2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4618      	mov	r0, r3
 80095ca:	f001 fb3e 	bl	800ac4a <SDMMC_CmdGoIdleState>
 80095ce:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d001      	beq.n	80095da <SD_PowerON+0x2a>
  {
    return errorstate;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	e072      	b.n	80096c0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4618      	mov	r0, r3
 80095e0:	f001 fb51 	bl	800ac86 <SDMMC_CmdOperCond>
 80095e4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00d      	beq.n	8009608 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4618      	mov	r0, r3
 80095f8:	f001 fb27 	bl	800ac4a <SDMMC_CmdGoIdleState>
 80095fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d004      	beq.n	800960e <SD_PowerON+0x5e>
    {
      return errorstate;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	e05b      	b.n	80096c0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009612:	2b01      	cmp	r3, #1
 8009614:	d137      	bne.n	8009686 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2100      	movs	r1, #0
 800961c:	4618      	mov	r0, r3
 800961e:	f001 fb51 	bl	800acc4 <SDMMC_CmdAppCommand>
 8009622:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d02d      	beq.n	8009686 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800962a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800962e:	e047      	b.n	80096c0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2100      	movs	r1, #0
 8009636:	4618      	mov	r0, r3
 8009638:	f001 fb44 	bl	800acc4 <SDMMC_CmdAppCommand>
 800963c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d001      	beq.n	8009648 <SD_PowerON+0x98>
    {
      return errorstate;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	e03b      	b.n	80096c0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	491e      	ldr	r1, [pc, #120]	; (80096c8 <SD_PowerON+0x118>)
 800964e:	4618      	mov	r0, r3
 8009650:	f001 fb5a 	bl	800ad08 <SDMMC_CmdAppOperCommand>
 8009654:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d002      	beq.n	8009662 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800965c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009660:	e02e      	b.n	80096c0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2100      	movs	r1, #0
 8009668:	4618      	mov	r0, r3
 800966a:	f001 f9c0 	bl	800a9ee <SDIO_GetResponse>
 800966e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	0fdb      	lsrs	r3, r3, #31
 8009674:	2b01      	cmp	r3, #1
 8009676:	d101      	bne.n	800967c <SD_PowerON+0xcc>
 8009678:	2301      	movs	r3, #1
 800967a:	e000      	b.n	800967e <SD_PowerON+0xce>
 800967c:	2300      	movs	r3, #0
 800967e:	613b      	str	r3, [r7, #16]

    count++;
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	3301      	adds	r3, #1
 8009684:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800968c:	4293      	cmp	r3, r2
 800968e:	d802      	bhi.n	8009696 <SD_PowerON+0xe6>
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d0cc      	beq.n	8009630 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800969c:	4293      	cmp	r3, r2
 800969e:	d902      	bls.n	80096a6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80096a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80096a4:	e00c      	b.n	80096c0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d003      	beq.n	80096b8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2201      	movs	r2, #1
 80096b4:	645a      	str	r2, [r3, #68]	; 0x44
 80096b6:	e002      	b.n	80096be <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3718      	adds	r7, #24
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	c1100000 	.word	0xc1100000

080096cc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d102      	bne.n	80096e2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80096dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80096e0:	e018      	b.n	8009714 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096ea:	041b      	lsls	r3, r3, #16
 80096ec:	4619      	mov	r1, r3
 80096ee:	4610      	mov	r0, r2
 80096f0:	f001 fbce 	bl	800ae90 <SDMMC_CmdSendStatus>
 80096f4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d001      	beq.n	8009700 <SD_SendStatus+0x34>
  {
    return errorstate;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	e009      	b.n	8009714 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2100      	movs	r1, #0
 8009706:	4618      	mov	r0, r3
 8009708:	f001 f971 	bl	800a9ee <SDIO_GetResponse>
 800970c:	4602      	mov	r2, r0
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009712:	2300      	movs	r3, #0
}
 8009714:	4618      	mov	r0, r3
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b086      	sub	sp, #24
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009724:	2300      	movs	r3, #0
 8009726:	60fb      	str	r3, [r7, #12]
 8009728:	2300      	movs	r3, #0
 800972a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2100      	movs	r1, #0
 8009732:	4618      	mov	r0, r3
 8009734:	f001 f95b 	bl	800a9ee <SDIO_GetResponse>
 8009738:	4603      	mov	r3, r0
 800973a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800973e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009742:	d102      	bne.n	800974a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009744:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009748:	e02f      	b.n	80097aa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800974a:	f107 030c 	add.w	r3, r7, #12
 800974e:	4619      	mov	r1, r3
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 f879 	bl	8009848 <SD_FindSCR>
 8009756:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d001      	beq.n	8009762 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	e023      	b.n	80097aa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009768:	2b00      	cmp	r3, #0
 800976a:	d01c      	beq.n	80097a6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009774:	041b      	lsls	r3, r3, #16
 8009776:	4619      	mov	r1, r3
 8009778:	4610      	mov	r0, r2
 800977a:	f001 faa3 	bl	800acc4 <SDMMC_CmdAppCommand>
 800977e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d001      	beq.n	800978a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	e00f      	b.n	80097aa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2102      	movs	r1, #2
 8009790:	4618      	mov	r0, r3
 8009792:	f001 fadc 	bl	800ad4e <SDMMC_CmdBusWidth>
 8009796:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d001      	beq.n	80097a2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	e003      	b.n	80097aa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80097a2:	2300      	movs	r3, #0
 80097a4:	e001      	b.n	80097aa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80097a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3718      	adds	r7, #24
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b086      	sub	sp, #24
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80097ba:	2300      	movs	r3, #0
 80097bc:	60fb      	str	r3, [r7, #12]
 80097be:	2300      	movs	r3, #0
 80097c0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2100      	movs	r1, #0
 80097c8:	4618      	mov	r0, r3
 80097ca:	f001 f910 	bl	800a9ee <SDIO_GetResponse>
 80097ce:	4603      	mov	r3, r0
 80097d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097d8:	d102      	bne.n	80097e0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80097da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80097de:	e02f      	b.n	8009840 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80097e0:	f107 030c 	add.w	r3, r7, #12
 80097e4:	4619      	mov	r1, r3
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 f82e 	bl	8009848 <SD_FindSCR>
 80097ec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d001      	beq.n	80097f8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	e023      	b.n	8009840 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d01c      	beq.n	800983c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800980a:	041b      	lsls	r3, r3, #16
 800980c:	4619      	mov	r1, r3
 800980e:	4610      	mov	r0, r2
 8009810:	f001 fa58 	bl	800acc4 <SDMMC_CmdAppCommand>
 8009814:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d001      	beq.n	8009820 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	e00f      	b.n	8009840 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2100      	movs	r1, #0
 8009826:	4618      	mov	r0, r3
 8009828:	f001 fa91 	bl	800ad4e <SDMMC_CmdBusWidth>
 800982c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d001      	beq.n	8009838 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	e003      	b.n	8009840 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009838:	2300      	movs	r3, #0
 800983a:	e001      	b.n	8009840 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800983c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009840:	4618      	mov	r0, r3
 8009842:	3718      	adds	r7, #24
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009848:	b590      	push	{r4, r7, lr}
 800984a:	b08f      	sub	sp, #60	; 0x3c
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009852:	f7fa f965 	bl	8003b20 <HAL_GetTick>
 8009856:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009858:	2300      	movs	r3, #0
 800985a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800985c:	2300      	movs	r3, #0
 800985e:	60bb      	str	r3, [r7, #8]
 8009860:	2300      	movs	r3, #0
 8009862:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2108      	movs	r1, #8
 800986e:	4618      	mov	r0, r3
 8009870:	f001 f8fc 	bl	800aa6c <SDMMC_CmdBlockLength>
 8009874:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009878:	2b00      	cmp	r3, #0
 800987a:	d001      	beq.n	8009880 <SD_FindSCR+0x38>
  {
    return errorstate;
 800987c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987e:	e0a9      	b.n	80099d4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009888:	041b      	lsls	r3, r3, #16
 800988a:	4619      	mov	r1, r3
 800988c:	4610      	mov	r0, r2
 800988e:	f001 fa19 	bl	800acc4 <SDMMC_CmdAppCommand>
 8009892:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009896:	2b00      	cmp	r3, #0
 8009898:	d001      	beq.n	800989e <SD_FindSCR+0x56>
  {
    return errorstate;
 800989a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989c:	e09a      	b.n	80099d4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800989e:	f04f 33ff 	mov.w	r3, #4294967295
 80098a2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80098a4:	2308      	movs	r3, #8
 80098a6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80098a8:	2330      	movs	r3, #48	; 0x30
 80098aa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80098ac:	2302      	movs	r3, #2
 80098ae:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80098b4:	2301      	movs	r3, #1
 80098b6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f107 0210 	add.w	r2, r7, #16
 80098c0:	4611      	mov	r1, r2
 80098c2:	4618      	mov	r0, r3
 80098c4:	f001 f8a6 	bl	800aa14 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4618      	mov	r0, r3
 80098ce:	f001 fa60 	bl	800ad92 <SDMMC_CmdSendSCR>
 80098d2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80098d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d022      	beq.n	8009920 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80098da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098dc:	e07a      	b.n	80099d4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d00e      	beq.n	800990a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6819      	ldr	r1, [r3, #0]
 80098f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	f107 0208 	add.w	r2, r7, #8
 80098f8:	18d4      	adds	r4, r2, r3
 80098fa:	4608      	mov	r0, r1
 80098fc:	f001 f805 	bl	800a90a <SDIO_ReadFIFO>
 8009900:	4603      	mov	r3, r0
 8009902:	6023      	str	r3, [r4, #0]
      index++;
 8009904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009906:	3301      	adds	r3, #1
 8009908:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800990a:	f7fa f909 	bl	8003b20 <HAL_GetTick>
 800990e:	4602      	mov	r2, r0
 8009910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009912:	1ad3      	subs	r3, r2, r3
 8009914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009918:	d102      	bne.n	8009920 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800991a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800991e:	e059      	b.n	80099d4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009926:	f240 432a 	movw	r3, #1066	; 0x42a
 800992a:	4013      	ands	r3, r2
 800992c:	2b00      	cmp	r3, #0
 800992e:	d0d6      	beq.n	80098de <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009936:	f003 0308 	and.w	r3, r3, #8
 800993a:	2b00      	cmp	r3, #0
 800993c:	d005      	beq.n	800994a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2208      	movs	r2, #8
 8009944:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009946:	2308      	movs	r3, #8
 8009948:	e044      	b.n	80099d4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009950:	f003 0302 	and.w	r3, r3, #2
 8009954:	2b00      	cmp	r3, #0
 8009956:	d005      	beq.n	8009964 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2202      	movs	r2, #2
 800995e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009960:	2302      	movs	r3, #2
 8009962:	e037      	b.n	80099d4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800996a:	f003 0320 	and.w	r3, r3, #32
 800996e:	2b00      	cmp	r3, #0
 8009970:	d005      	beq.n	800997e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2220      	movs	r2, #32
 8009978:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800997a:	2320      	movs	r3, #32
 800997c:	e02a      	b.n	80099d4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f240 523a 	movw	r2, #1338	; 0x53a
 8009986:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	061a      	lsls	r2, r3, #24
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	021b      	lsls	r3, r3, #8
 8009990:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009994:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	0a1b      	lsrs	r3, r3, #8
 800999a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800999e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	0e1b      	lsrs	r3, r3, #24
 80099a4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80099a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a8:	601a      	str	r2, [r3, #0]
    scr++;
 80099aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ac:	3304      	adds	r3, #4
 80099ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	061a      	lsls	r2, r3, #24
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	021b      	lsls	r3, r3, #8
 80099b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80099bc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	0a1b      	lsrs	r3, r3, #8
 80099c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80099c6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	0e1b      	lsrs	r3, r3, #24
 80099cc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80099ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	373c      	adds	r7, #60	; 0x3c
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd90      	pop	{r4, r7, pc}

080099dc <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d101      	bne.n	80099f2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	e034      	b.n	8009a5c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d106      	bne.n	8009a0c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	f7f8 fc1a 	bl	8002240 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	3308      	adds	r3, #8
 8009a14:	4619      	mov	r1, r3
 8009a16:	4610      	mov	r0, r2
 8009a18:	f000 fe48 	bl	800a6ac <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6818      	ldr	r0, [r3, #0]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	461a      	mov	r2, r3
 8009a26:	68b9      	ldr	r1, [r7, #8]
 8009a28:	f000 feb0 	bl	800a78c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6858      	ldr	r0, [r3, #4]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	689a      	ldr	r2, [r3, #8]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a38:	6879      	ldr	r1, [r7, #4]
 8009a3a:	f000 fefb 	bl	800a834 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	6892      	ldr	r2, [r2, #8]
 8009a46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	68fa      	ldr	r2, [r7, #12]
 8009a50:	6892      	ldr	r2, [r2, #8]
 8009a52:	f041 0101 	orr.w	r1, r1, #1
 8009a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3710      	adds	r7, #16
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d101      	bne.n	8009a76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	e01d      	b.n	8009ab2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d106      	bne.n	8009a90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 f815 	bl	8009aba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2202      	movs	r2, #2
 8009a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	4610      	mov	r0, r2
 8009aa4:	f000 f968 	bl	8009d78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3708      	adds	r7, #8
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009aba:	b480      	push	{r7}
 8009abc:	b083      	sub	sp, #12
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009ac2:	bf00      	nop
 8009ac4:	370c      	adds	r7, #12
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr

08009ace <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009ace:	b480      	push	{r7}
 8009ad0:	b085      	sub	sp, #20
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	68da      	ldr	r2, [r3, #12]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f042 0201 	orr.w	r2, r2, #1
 8009ae4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	f003 0307 	and.w	r3, r3, #7
 8009af0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2b06      	cmp	r3, #6
 8009af6:	d007      	beq.n	8009b08 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f042 0201 	orr.w	r2, r2, #1
 8009b06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b08:	2300      	movs	r3, #0
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3714      	adds	r7, #20
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr

08009b16 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b082      	sub	sp, #8
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	691b      	ldr	r3, [r3, #16]
 8009b24:	f003 0302 	and.w	r3, r3, #2
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	d122      	bne.n	8009b72 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	f003 0302 	and.w	r3, r3, #2
 8009b36:	2b02      	cmp	r3, #2
 8009b38:	d11b      	bne.n	8009b72 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f06f 0202 	mvn.w	r2, #2
 8009b42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	699b      	ldr	r3, [r3, #24]
 8009b50:	f003 0303 	and.w	r3, r3, #3
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d003      	beq.n	8009b60 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f8ee 	bl	8009d3a <HAL_TIM_IC_CaptureCallback>
 8009b5e:	e005      	b.n	8009b6c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 f8e0 	bl	8009d26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 f8f1 	bl	8009d4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	691b      	ldr	r3, [r3, #16]
 8009b78:	f003 0304 	and.w	r3, r3, #4
 8009b7c:	2b04      	cmp	r3, #4
 8009b7e:	d122      	bne.n	8009bc6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68db      	ldr	r3, [r3, #12]
 8009b86:	f003 0304 	and.w	r3, r3, #4
 8009b8a:	2b04      	cmp	r3, #4
 8009b8c:	d11b      	bne.n	8009bc6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f06f 0204 	mvn.w	r2, #4
 8009b96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2202      	movs	r2, #2
 8009b9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	699b      	ldr	r3, [r3, #24]
 8009ba4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d003      	beq.n	8009bb4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 f8c4 	bl	8009d3a <HAL_TIM_IC_CaptureCallback>
 8009bb2:	e005      	b.n	8009bc0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 f8b6 	bl	8009d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 f8c7 	bl	8009d4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	691b      	ldr	r3, [r3, #16]
 8009bcc:	f003 0308 	and.w	r3, r3, #8
 8009bd0:	2b08      	cmp	r3, #8
 8009bd2:	d122      	bne.n	8009c1a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	f003 0308 	and.w	r3, r3, #8
 8009bde:	2b08      	cmp	r3, #8
 8009be0:	d11b      	bne.n	8009c1a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f06f 0208 	mvn.w	r2, #8
 8009bea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2204      	movs	r2, #4
 8009bf0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	69db      	ldr	r3, [r3, #28]
 8009bf8:	f003 0303 	and.w	r3, r3, #3
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d003      	beq.n	8009c08 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 f89a 	bl	8009d3a <HAL_TIM_IC_CaptureCallback>
 8009c06:	e005      	b.n	8009c14 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 f88c 	bl	8009d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 f89d 	bl	8009d4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	f003 0310 	and.w	r3, r3, #16
 8009c24:	2b10      	cmp	r3, #16
 8009c26:	d122      	bne.n	8009c6e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	f003 0310 	and.w	r3, r3, #16
 8009c32:	2b10      	cmp	r3, #16
 8009c34:	d11b      	bne.n	8009c6e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f06f 0210 	mvn.w	r2, #16
 8009c3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2208      	movs	r2, #8
 8009c44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	69db      	ldr	r3, [r3, #28]
 8009c4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d003      	beq.n	8009c5c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 f870 	bl	8009d3a <HAL_TIM_IC_CaptureCallback>
 8009c5a:	e005      	b.n	8009c68 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 f862 	bl	8009d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 f873 	bl	8009d4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	691b      	ldr	r3, [r3, #16]
 8009c74:	f003 0301 	and.w	r3, r3, #1
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d10e      	bne.n	8009c9a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	f003 0301 	and.w	r3, r3, #1
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d107      	bne.n	8009c9a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f06f 0201 	mvn.w	r2, #1
 8009c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f7f7 fd4d 	bl	8001734 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	691b      	ldr	r3, [r3, #16]
 8009ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ca4:	2b80      	cmp	r3, #128	; 0x80
 8009ca6:	d10e      	bne.n	8009cc6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	68db      	ldr	r3, [r3, #12]
 8009cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cb2:	2b80      	cmp	r3, #128	; 0x80
 8009cb4:	d107      	bne.n	8009cc6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 f903 	bl	8009ecc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	691b      	ldr	r3, [r3, #16]
 8009ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cd0:	2b40      	cmp	r3, #64	; 0x40
 8009cd2:	d10e      	bne.n	8009cf2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cde:	2b40      	cmp	r3, #64	; 0x40
 8009ce0:	d107      	bne.n	8009cf2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 f838 	bl	8009d62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	691b      	ldr	r3, [r3, #16]
 8009cf8:	f003 0320 	and.w	r3, r3, #32
 8009cfc:	2b20      	cmp	r3, #32
 8009cfe:	d10e      	bne.n	8009d1e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	f003 0320 	and.w	r3, r3, #32
 8009d0a:	2b20      	cmp	r3, #32
 8009d0c:	d107      	bne.n	8009d1e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f06f 0220 	mvn.w	r2, #32
 8009d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f8cd 	bl	8009eb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d1e:	bf00      	nop
 8009d20:	3708      	adds	r7, #8
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d26:	b480      	push	{r7}
 8009d28:	b083      	sub	sp, #12
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d2e:	bf00      	nop
 8009d30:	370c      	adds	r7, #12
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr

08009d3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d3a:	b480      	push	{r7}
 8009d3c:	b083      	sub	sp, #12
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d42:	bf00      	nop
 8009d44:	370c      	adds	r7, #12
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr

08009d4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d4e:	b480      	push	{r7}
 8009d50:	b083      	sub	sp, #12
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d56:	bf00      	nop
 8009d58:	370c      	adds	r7, #12
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr

08009d62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d62:	b480      	push	{r7}
 8009d64:	b083      	sub	sp, #12
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d6a:	bf00      	nop
 8009d6c:	370c      	adds	r7, #12
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr
	...

08009d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4a40      	ldr	r2, [pc, #256]	; (8009e8c <TIM_Base_SetConfig+0x114>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d013      	beq.n	8009db8 <TIM_Base_SetConfig+0x40>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d96:	d00f      	beq.n	8009db8 <TIM_Base_SetConfig+0x40>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	4a3d      	ldr	r2, [pc, #244]	; (8009e90 <TIM_Base_SetConfig+0x118>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d00b      	beq.n	8009db8 <TIM_Base_SetConfig+0x40>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	4a3c      	ldr	r2, [pc, #240]	; (8009e94 <TIM_Base_SetConfig+0x11c>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d007      	beq.n	8009db8 <TIM_Base_SetConfig+0x40>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4a3b      	ldr	r2, [pc, #236]	; (8009e98 <TIM_Base_SetConfig+0x120>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d003      	beq.n	8009db8 <TIM_Base_SetConfig+0x40>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	4a3a      	ldr	r2, [pc, #232]	; (8009e9c <TIM_Base_SetConfig+0x124>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d108      	bne.n	8009dca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4a2f      	ldr	r2, [pc, #188]	; (8009e8c <TIM_Base_SetConfig+0x114>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d02b      	beq.n	8009e2a <TIM_Base_SetConfig+0xb2>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dd8:	d027      	beq.n	8009e2a <TIM_Base_SetConfig+0xb2>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4a2c      	ldr	r2, [pc, #176]	; (8009e90 <TIM_Base_SetConfig+0x118>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d023      	beq.n	8009e2a <TIM_Base_SetConfig+0xb2>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	4a2b      	ldr	r2, [pc, #172]	; (8009e94 <TIM_Base_SetConfig+0x11c>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d01f      	beq.n	8009e2a <TIM_Base_SetConfig+0xb2>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4a2a      	ldr	r2, [pc, #168]	; (8009e98 <TIM_Base_SetConfig+0x120>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d01b      	beq.n	8009e2a <TIM_Base_SetConfig+0xb2>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	4a29      	ldr	r2, [pc, #164]	; (8009e9c <TIM_Base_SetConfig+0x124>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d017      	beq.n	8009e2a <TIM_Base_SetConfig+0xb2>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a28      	ldr	r2, [pc, #160]	; (8009ea0 <TIM_Base_SetConfig+0x128>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d013      	beq.n	8009e2a <TIM_Base_SetConfig+0xb2>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4a27      	ldr	r2, [pc, #156]	; (8009ea4 <TIM_Base_SetConfig+0x12c>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d00f      	beq.n	8009e2a <TIM_Base_SetConfig+0xb2>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4a26      	ldr	r2, [pc, #152]	; (8009ea8 <TIM_Base_SetConfig+0x130>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d00b      	beq.n	8009e2a <TIM_Base_SetConfig+0xb2>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4a25      	ldr	r2, [pc, #148]	; (8009eac <TIM_Base_SetConfig+0x134>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d007      	beq.n	8009e2a <TIM_Base_SetConfig+0xb2>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4a24      	ldr	r2, [pc, #144]	; (8009eb0 <TIM_Base_SetConfig+0x138>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d003      	beq.n	8009e2a <TIM_Base_SetConfig+0xb2>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4a23      	ldr	r2, [pc, #140]	; (8009eb4 <TIM_Base_SetConfig+0x13c>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d108      	bne.n	8009e3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	68db      	ldr	r3, [r3, #12]
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	695b      	ldr	r3, [r3, #20]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	689a      	ldr	r2, [r3, #8]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	4a0a      	ldr	r2, [pc, #40]	; (8009e8c <TIM_Base_SetConfig+0x114>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d003      	beq.n	8009e70 <TIM_Base_SetConfig+0xf8>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	4a0c      	ldr	r2, [pc, #48]	; (8009e9c <TIM_Base_SetConfig+0x124>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d103      	bne.n	8009e78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	691a      	ldr	r2, [r3, #16]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	615a      	str	r2, [r3, #20]
}
 8009e7e:	bf00      	nop
 8009e80:	3714      	adds	r7, #20
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop
 8009e8c:	40010000 	.word	0x40010000
 8009e90:	40000400 	.word	0x40000400
 8009e94:	40000800 	.word	0x40000800
 8009e98:	40000c00 	.word	0x40000c00
 8009e9c:	40010400 	.word	0x40010400
 8009ea0:	40014000 	.word	0x40014000
 8009ea4:	40014400 	.word	0x40014400
 8009ea8:	40014800 	.word	0x40014800
 8009eac:	40001800 	.word	0x40001800
 8009eb0:	40001c00 	.word	0x40001c00
 8009eb4:	40002000 	.word	0x40002000

08009eb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ec0:	bf00      	nop
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ed4:	bf00      	nop
 8009ed6:	370c      	adds	r7, #12
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d101      	bne.n	8009ef2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e03f      	b.n	8009f72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d106      	bne.n	8009f0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f7f8 f8ac 	bl	8002064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2224      	movs	r2, #36	; 0x24
 8009f10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	68da      	ldr	r2, [r3, #12]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009f22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 f829 	bl	8009f7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	691a      	ldr	r2, [r3, #16]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	695a      	ldr	r2, [r3, #20]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	68da      	ldr	r2, [r3, #12]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2220      	movs	r2, #32
 8009f64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2220      	movs	r2, #32
 8009f6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009f70:	2300      	movs	r3, #0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3708      	adds	r7, #8
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
	...

08009f7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f80:	b085      	sub	sp, #20
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	691b      	ldr	r3, [r3, #16]
 8009f8c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	68da      	ldr	r2, [r3, #12]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	430a      	orrs	r2, r1
 8009f9a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	689a      	ldr	r2, [r3, #8]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	691b      	ldr	r3, [r3, #16]
 8009fa4:	431a      	orrs	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	695b      	ldr	r3, [r3, #20]
 8009faa:	431a      	orrs	r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	69db      	ldr	r3, [r3, #28]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	68db      	ldr	r3, [r3, #12]
 8009fba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009fbe:	f023 030c 	bic.w	r3, r3, #12
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	6812      	ldr	r2, [r2, #0]
 8009fc6:	68f9      	ldr	r1, [r7, #12]
 8009fc8:	430b      	orrs	r3, r1
 8009fca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	695b      	ldr	r3, [r3, #20]
 8009fd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	699a      	ldr	r2, [r3, #24]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	430a      	orrs	r2, r1
 8009fe0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	69db      	ldr	r3, [r3, #28]
 8009fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fea:	f040 8199 	bne.w	800a320 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4ac6      	ldr	r2, [pc, #792]	; (800a30c <UART_SetConfig+0x390>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d00f      	beq.n	800a018 <UART_SetConfig+0x9c>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4ac4      	ldr	r2, [pc, #784]	; (800a310 <UART_SetConfig+0x394>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d00a      	beq.n	800a018 <UART_SetConfig+0x9c>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4ac3      	ldr	r2, [pc, #780]	; (800a314 <UART_SetConfig+0x398>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d005      	beq.n	800a018 <UART_SetConfig+0x9c>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4ac1      	ldr	r2, [pc, #772]	; (800a318 <UART_SetConfig+0x39c>)
 800a012:	4293      	cmp	r3, r2
 800a014:	f040 80bd 	bne.w	800a192 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a018:	f7fd fd04 	bl	8007a24 <HAL_RCC_GetPCLK2Freq>
 800a01c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	461d      	mov	r5, r3
 800a022:	f04f 0600 	mov.w	r6, #0
 800a026:	46a8      	mov	r8, r5
 800a028:	46b1      	mov	r9, r6
 800a02a:	eb18 0308 	adds.w	r3, r8, r8
 800a02e:	eb49 0409 	adc.w	r4, r9, r9
 800a032:	4698      	mov	r8, r3
 800a034:	46a1      	mov	r9, r4
 800a036:	eb18 0805 	adds.w	r8, r8, r5
 800a03a:	eb49 0906 	adc.w	r9, r9, r6
 800a03e:	f04f 0100 	mov.w	r1, #0
 800a042:	f04f 0200 	mov.w	r2, #0
 800a046:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a04a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a04e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a052:	4688      	mov	r8, r1
 800a054:	4691      	mov	r9, r2
 800a056:	eb18 0005 	adds.w	r0, r8, r5
 800a05a:	eb49 0106 	adc.w	r1, r9, r6
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	461d      	mov	r5, r3
 800a064:	f04f 0600 	mov.w	r6, #0
 800a068:	196b      	adds	r3, r5, r5
 800a06a:	eb46 0406 	adc.w	r4, r6, r6
 800a06e:	461a      	mov	r2, r3
 800a070:	4623      	mov	r3, r4
 800a072:	f7f6 f925 	bl	80002c0 <__aeabi_uldivmod>
 800a076:	4603      	mov	r3, r0
 800a078:	460c      	mov	r4, r1
 800a07a:	461a      	mov	r2, r3
 800a07c:	4ba7      	ldr	r3, [pc, #668]	; (800a31c <UART_SetConfig+0x3a0>)
 800a07e:	fba3 2302 	umull	r2, r3, r3, r2
 800a082:	095b      	lsrs	r3, r3, #5
 800a084:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	461d      	mov	r5, r3
 800a08c:	f04f 0600 	mov.w	r6, #0
 800a090:	46a9      	mov	r9, r5
 800a092:	46b2      	mov	sl, r6
 800a094:	eb19 0309 	adds.w	r3, r9, r9
 800a098:	eb4a 040a 	adc.w	r4, sl, sl
 800a09c:	4699      	mov	r9, r3
 800a09e:	46a2      	mov	sl, r4
 800a0a0:	eb19 0905 	adds.w	r9, r9, r5
 800a0a4:	eb4a 0a06 	adc.w	sl, sl, r6
 800a0a8:	f04f 0100 	mov.w	r1, #0
 800a0ac:	f04f 0200 	mov.w	r2, #0
 800a0b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a0b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a0b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a0bc:	4689      	mov	r9, r1
 800a0be:	4692      	mov	sl, r2
 800a0c0:	eb19 0005 	adds.w	r0, r9, r5
 800a0c4:	eb4a 0106 	adc.w	r1, sl, r6
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	461d      	mov	r5, r3
 800a0ce:	f04f 0600 	mov.w	r6, #0
 800a0d2:	196b      	adds	r3, r5, r5
 800a0d4:	eb46 0406 	adc.w	r4, r6, r6
 800a0d8:	461a      	mov	r2, r3
 800a0da:	4623      	mov	r3, r4
 800a0dc:	f7f6 f8f0 	bl	80002c0 <__aeabi_uldivmod>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	460c      	mov	r4, r1
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	4b8d      	ldr	r3, [pc, #564]	; (800a31c <UART_SetConfig+0x3a0>)
 800a0e8:	fba3 1302 	umull	r1, r3, r3, r2
 800a0ec:	095b      	lsrs	r3, r3, #5
 800a0ee:	2164      	movs	r1, #100	; 0x64
 800a0f0:	fb01 f303 	mul.w	r3, r1, r3
 800a0f4:	1ad3      	subs	r3, r2, r3
 800a0f6:	00db      	lsls	r3, r3, #3
 800a0f8:	3332      	adds	r3, #50	; 0x32
 800a0fa:	4a88      	ldr	r2, [pc, #544]	; (800a31c <UART_SetConfig+0x3a0>)
 800a0fc:	fba2 2303 	umull	r2, r3, r2, r3
 800a100:	095b      	lsrs	r3, r3, #5
 800a102:	005b      	lsls	r3, r3, #1
 800a104:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a108:	4498      	add	r8, r3
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	461d      	mov	r5, r3
 800a10e:	f04f 0600 	mov.w	r6, #0
 800a112:	46a9      	mov	r9, r5
 800a114:	46b2      	mov	sl, r6
 800a116:	eb19 0309 	adds.w	r3, r9, r9
 800a11a:	eb4a 040a 	adc.w	r4, sl, sl
 800a11e:	4699      	mov	r9, r3
 800a120:	46a2      	mov	sl, r4
 800a122:	eb19 0905 	adds.w	r9, r9, r5
 800a126:	eb4a 0a06 	adc.w	sl, sl, r6
 800a12a:	f04f 0100 	mov.w	r1, #0
 800a12e:	f04f 0200 	mov.w	r2, #0
 800a132:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a136:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a13a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a13e:	4689      	mov	r9, r1
 800a140:	4692      	mov	sl, r2
 800a142:	eb19 0005 	adds.w	r0, r9, r5
 800a146:	eb4a 0106 	adc.w	r1, sl, r6
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	461d      	mov	r5, r3
 800a150:	f04f 0600 	mov.w	r6, #0
 800a154:	196b      	adds	r3, r5, r5
 800a156:	eb46 0406 	adc.w	r4, r6, r6
 800a15a:	461a      	mov	r2, r3
 800a15c:	4623      	mov	r3, r4
 800a15e:	f7f6 f8af 	bl	80002c0 <__aeabi_uldivmod>
 800a162:	4603      	mov	r3, r0
 800a164:	460c      	mov	r4, r1
 800a166:	461a      	mov	r2, r3
 800a168:	4b6c      	ldr	r3, [pc, #432]	; (800a31c <UART_SetConfig+0x3a0>)
 800a16a:	fba3 1302 	umull	r1, r3, r3, r2
 800a16e:	095b      	lsrs	r3, r3, #5
 800a170:	2164      	movs	r1, #100	; 0x64
 800a172:	fb01 f303 	mul.w	r3, r1, r3
 800a176:	1ad3      	subs	r3, r2, r3
 800a178:	00db      	lsls	r3, r3, #3
 800a17a:	3332      	adds	r3, #50	; 0x32
 800a17c:	4a67      	ldr	r2, [pc, #412]	; (800a31c <UART_SetConfig+0x3a0>)
 800a17e:	fba2 2303 	umull	r2, r3, r2, r3
 800a182:	095b      	lsrs	r3, r3, #5
 800a184:	f003 0207 	and.w	r2, r3, #7
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4442      	add	r2, r8
 800a18e:	609a      	str	r2, [r3, #8]
 800a190:	e27d      	b.n	800a68e <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a192:	f7fd fc33 	bl	80079fc <HAL_RCC_GetPCLK1Freq>
 800a196:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	461d      	mov	r5, r3
 800a19c:	f04f 0600 	mov.w	r6, #0
 800a1a0:	46a8      	mov	r8, r5
 800a1a2:	46b1      	mov	r9, r6
 800a1a4:	eb18 0308 	adds.w	r3, r8, r8
 800a1a8:	eb49 0409 	adc.w	r4, r9, r9
 800a1ac:	4698      	mov	r8, r3
 800a1ae:	46a1      	mov	r9, r4
 800a1b0:	eb18 0805 	adds.w	r8, r8, r5
 800a1b4:	eb49 0906 	adc.w	r9, r9, r6
 800a1b8:	f04f 0100 	mov.w	r1, #0
 800a1bc:	f04f 0200 	mov.w	r2, #0
 800a1c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a1c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a1c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a1cc:	4688      	mov	r8, r1
 800a1ce:	4691      	mov	r9, r2
 800a1d0:	eb18 0005 	adds.w	r0, r8, r5
 800a1d4:	eb49 0106 	adc.w	r1, r9, r6
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	461d      	mov	r5, r3
 800a1de:	f04f 0600 	mov.w	r6, #0
 800a1e2:	196b      	adds	r3, r5, r5
 800a1e4:	eb46 0406 	adc.w	r4, r6, r6
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	4623      	mov	r3, r4
 800a1ec:	f7f6 f868 	bl	80002c0 <__aeabi_uldivmod>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	460c      	mov	r4, r1
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	4b49      	ldr	r3, [pc, #292]	; (800a31c <UART_SetConfig+0x3a0>)
 800a1f8:	fba3 2302 	umull	r2, r3, r3, r2
 800a1fc:	095b      	lsrs	r3, r3, #5
 800a1fe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	461d      	mov	r5, r3
 800a206:	f04f 0600 	mov.w	r6, #0
 800a20a:	46a9      	mov	r9, r5
 800a20c:	46b2      	mov	sl, r6
 800a20e:	eb19 0309 	adds.w	r3, r9, r9
 800a212:	eb4a 040a 	adc.w	r4, sl, sl
 800a216:	4699      	mov	r9, r3
 800a218:	46a2      	mov	sl, r4
 800a21a:	eb19 0905 	adds.w	r9, r9, r5
 800a21e:	eb4a 0a06 	adc.w	sl, sl, r6
 800a222:	f04f 0100 	mov.w	r1, #0
 800a226:	f04f 0200 	mov.w	r2, #0
 800a22a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a22e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a232:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a236:	4689      	mov	r9, r1
 800a238:	4692      	mov	sl, r2
 800a23a:	eb19 0005 	adds.w	r0, r9, r5
 800a23e:	eb4a 0106 	adc.w	r1, sl, r6
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	461d      	mov	r5, r3
 800a248:	f04f 0600 	mov.w	r6, #0
 800a24c:	196b      	adds	r3, r5, r5
 800a24e:	eb46 0406 	adc.w	r4, r6, r6
 800a252:	461a      	mov	r2, r3
 800a254:	4623      	mov	r3, r4
 800a256:	f7f6 f833 	bl	80002c0 <__aeabi_uldivmod>
 800a25a:	4603      	mov	r3, r0
 800a25c:	460c      	mov	r4, r1
 800a25e:	461a      	mov	r2, r3
 800a260:	4b2e      	ldr	r3, [pc, #184]	; (800a31c <UART_SetConfig+0x3a0>)
 800a262:	fba3 1302 	umull	r1, r3, r3, r2
 800a266:	095b      	lsrs	r3, r3, #5
 800a268:	2164      	movs	r1, #100	; 0x64
 800a26a:	fb01 f303 	mul.w	r3, r1, r3
 800a26e:	1ad3      	subs	r3, r2, r3
 800a270:	00db      	lsls	r3, r3, #3
 800a272:	3332      	adds	r3, #50	; 0x32
 800a274:	4a29      	ldr	r2, [pc, #164]	; (800a31c <UART_SetConfig+0x3a0>)
 800a276:	fba2 2303 	umull	r2, r3, r2, r3
 800a27a:	095b      	lsrs	r3, r3, #5
 800a27c:	005b      	lsls	r3, r3, #1
 800a27e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a282:	4498      	add	r8, r3
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	461d      	mov	r5, r3
 800a288:	f04f 0600 	mov.w	r6, #0
 800a28c:	46a9      	mov	r9, r5
 800a28e:	46b2      	mov	sl, r6
 800a290:	eb19 0309 	adds.w	r3, r9, r9
 800a294:	eb4a 040a 	adc.w	r4, sl, sl
 800a298:	4699      	mov	r9, r3
 800a29a:	46a2      	mov	sl, r4
 800a29c:	eb19 0905 	adds.w	r9, r9, r5
 800a2a0:	eb4a 0a06 	adc.w	sl, sl, r6
 800a2a4:	f04f 0100 	mov.w	r1, #0
 800a2a8:	f04f 0200 	mov.w	r2, #0
 800a2ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a2b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a2b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a2b8:	4689      	mov	r9, r1
 800a2ba:	4692      	mov	sl, r2
 800a2bc:	eb19 0005 	adds.w	r0, r9, r5
 800a2c0:	eb4a 0106 	adc.w	r1, sl, r6
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	461d      	mov	r5, r3
 800a2ca:	f04f 0600 	mov.w	r6, #0
 800a2ce:	196b      	adds	r3, r5, r5
 800a2d0:	eb46 0406 	adc.w	r4, r6, r6
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	4623      	mov	r3, r4
 800a2d8:	f7f5 fff2 	bl	80002c0 <__aeabi_uldivmod>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	460c      	mov	r4, r1
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	4b0e      	ldr	r3, [pc, #56]	; (800a31c <UART_SetConfig+0x3a0>)
 800a2e4:	fba3 1302 	umull	r1, r3, r3, r2
 800a2e8:	095b      	lsrs	r3, r3, #5
 800a2ea:	2164      	movs	r1, #100	; 0x64
 800a2ec:	fb01 f303 	mul.w	r3, r1, r3
 800a2f0:	1ad3      	subs	r3, r2, r3
 800a2f2:	00db      	lsls	r3, r3, #3
 800a2f4:	3332      	adds	r3, #50	; 0x32
 800a2f6:	4a09      	ldr	r2, [pc, #36]	; (800a31c <UART_SetConfig+0x3a0>)
 800a2f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a2fc:	095b      	lsrs	r3, r3, #5
 800a2fe:	f003 0207 	and.w	r2, r3, #7
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4442      	add	r2, r8
 800a308:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800a30a:	e1c0      	b.n	800a68e <UART_SetConfig+0x712>
 800a30c:	40011000 	.word	0x40011000
 800a310:	40011400 	.word	0x40011400
 800a314:	40011800 	.word	0x40011800
 800a318:	40011c00 	.word	0x40011c00
 800a31c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4adc      	ldr	r2, [pc, #880]	; (800a698 <UART_SetConfig+0x71c>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d00f      	beq.n	800a34a <UART_SetConfig+0x3ce>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4adb      	ldr	r2, [pc, #876]	; (800a69c <UART_SetConfig+0x720>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d00a      	beq.n	800a34a <UART_SetConfig+0x3ce>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4ad9      	ldr	r2, [pc, #868]	; (800a6a0 <UART_SetConfig+0x724>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d005      	beq.n	800a34a <UART_SetConfig+0x3ce>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4ad8      	ldr	r2, [pc, #864]	; (800a6a4 <UART_SetConfig+0x728>)
 800a344:	4293      	cmp	r3, r2
 800a346:	f040 80d1 	bne.w	800a4ec <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a34a:	f7fd fb6b 	bl	8007a24 <HAL_RCC_GetPCLK2Freq>
 800a34e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	469a      	mov	sl, r3
 800a354:	f04f 0b00 	mov.w	fp, #0
 800a358:	46d0      	mov	r8, sl
 800a35a:	46d9      	mov	r9, fp
 800a35c:	eb18 0308 	adds.w	r3, r8, r8
 800a360:	eb49 0409 	adc.w	r4, r9, r9
 800a364:	4698      	mov	r8, r3
 800a366:	46a1      	mov	r9, r4
 800a368:	eb18 080a 	adds.w	r8, r8, sl
 800a36c:	eb49 090b 	adc.w	r9, r9, fp
 800a370:	f04f 0100 	mov.w	r1, #0
 800a374:	f04f 0200 	mov.w	r2, #0
 800a378:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a37c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a380:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a384:	4688      	mov	r8, r1
 800a386:	4691      	mov	r9, r2
 800a388:	eb1a 0508 	adds.w	r5, sl, r8
 800a38c:	eb4b 0609 	adc.w	r6, fp, r9
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	4619      	mov	r1, r3
 800a396:	f04f 0200 	mov.w	r2, #0
 800a39a:	f04f 0300 	mov.w	r3, #0
 800a39e:	f04f 0400 	mov.w	r4, #0
 800a3a2:	0094      	lsls	r4, r2, #2
 800a3a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a3a8:	008b      	lsls	r3, r1, #2
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	4623      	mov	r3, r4
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	4631      	mov	r1, r6
 800a3b2:	f7f5 ff85 	bl	80002c0 <__aeabi_uldivmod>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	460c      	mov	r4, r1
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	4bba      	ldr	r3, [pc, #744]	; (800a6a8 <UART_SetConfig+0x72c>)
 800a3be:	fba3 2302 	umull	r2, r3, r3, r2
 800a3c2:	095b      	lsrs	r3, r3, #5
 800a3c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	469b      	mov	fp, r3
 800a3cc:	f04f 0c00 	mov.w	ip, #0
 800a3d0:	46d9      	mov	r9, fp
 800a3d2:	46e2      	mov	sl, ip
 800a3d4:	eb19 0309 	adds.w	r3, r9, r9
 800a3d8:	eb4a 040a 	adc.w	r4, sl, sl
 800a3dc:	4699      	mov	r9, r3
 800a3de:	46a2      	mov	sl, r4
 800a3e0:	eb19 090b 	adds.w	r9, r9, fp
 800a3e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a3e8:	f04f 0100 	mov.w	r1, #0
 800a3ec:	f04f 0200 	mov.w	r2, #0
 800a3f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a3f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a3f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a3fc:	4689      	mov	r9, r1
 800a3fe:	4692      	mov	sl, r2
 800a400:	eb1b 0509 	adds.w	r5, fp, r9
 800a404:	eb4c 060a 	adc.w	r6, ip, sl
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	4619      	mov	r1, r3
 800a40e:	f04f 0200 	mov.w	r2, #0
 800a412:	f04f 0300 	mov.w	r3, #0
 800a416:	f04f 0400 	mov.w	r4, #0
 800a41a:	0094      	lsls	r4, r2, #2
 800a41c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a420:	008b      	lsls	r3, r1, #2
 800a422:	461a      	mov	r2, r3
 800a424:	4623      	mov	r3, r4
 800a426:	4628      	mov	r0, r5
 800a428:	4631      	mov	r1, r6
 800a42a:	f7f5 ff49 	bl	80002c0 <__aeabi_uldivmod>
 800a42e:	4603      	mov	r3, r0
 800a430:	460c      	mov	r4, r1
 800a432:	461a      	mov	r2, r3
 800a434:	4b9c      	ldr	r3, [pc, #624]	; (800a6a8 <UART_SetConfig+0x72c>)
 800a436:	fba3 1302 	umull	r1, r3, r3, r2
 800a43a:	095b      	lsrs	r3, r3, #5
 800a43c:	2164      	movs	r1, #100	; 0x64
 800a43e:	fb01 f303 	mul.w	r3, r1, r3
 800a442:	1ad3      	subs	r3, r2, r3
 800a444:	011b      	lsls	r3, r3, #4
 800a446:	3332      	adds	r3, #50	; 0x32
 800a448:	4a97      	ldr	r2, [pc, #604]	; (800a6a8 <UART_SetConfig+0x72c>)
 800a44a:	fba2 2303 	umull	r2, r3, r2, r3
 800a44e:	095b      	lsrs	r3, r3, #5
 800a450:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a454:	4498      	add	r8, r3
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	469b      	mov	fp, r3
 800a45a:	f04f 0c00 	mov.w	ip, #0
 800a45e:	46d9      	mov	r9, fp
 800a460:	46e2      	mov	sl, ip
 800a462:	eb19 0309 	adds.w	r3, r9, r9
 800a466:	eb4a 040a 	adc.w	r4, sl, sl
 800a46a:	4699      	mov	r9, r3
 800a46c:	46a2      	mov	sl, r4
 800a46e:	eb19 090b 	adds.w	r9, r9, fp
 800a472:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a476:	f04f 0100 	mov.w	r1, #0
 800a47a:	f04f 0200 	mov.w	r2, #0
 800a47e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a482:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a486:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a48a:	4689      	mov	r9, r1
 800a48c:	4692      	mov	sl, r2
 800a48e:	eb1b 0509 	adds.w	r5, fp, r9
 800a492:	eb4c 060a 	adc.w	r6, ip, sl
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	4619      	mov	r1, r3
 800a49c:	f04f 0200 	mov.w	r2, #0
 800a4a0:	f04f 0300 	mov.w	r3, #0
 800a4a4:	f04f 0400 	mov.w	r4, #0
 800a4a8:	0094      	lsls	r4, r2, #2
 800a4aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a4ae:	008b      	lsls	r3, r1, #2
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	4623      	mov	r3, r4
 800a4b4:	4628      	mov	r0, r5
 800a4b6:	4631      	mov	r1, r6
 800a4b8:	f7f5 ff02 	bl	80002c0 <__aeabi_uldivmod>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	460c      	mov	r4, r1
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	4b79      	ldr	r3, [pc, #484]	; (800a6a8 <UART_SetConfig+0x72c>)
 800a4c4:	fba3 1302 	umull	r1, r3, r3, r2
 800a4c8:	095b      	lsrs	r3, r3, #5
 800a4ca:	2164      	movs	r1, #100	; 0x64
 800a4cc:	fb01 f303 	mul.w	r3, r1, r3
 800a4d0:	1ad3      	subs	r3, r2, r3
 800a4d2:	011b      	lsls	r3, r3, #4
 800a4d4:	3332      	adds	r3, #50	; 0x32
 800a4d6:	4a74      	ldr	r2, [pc, #464]	; (800a6a8 <UART_SetConfig+0x72c>)
 800a4d8:	fba2 2303 	umull	r2, r3, r2, r3
 800a4dc:	095b      	lsrs	r3, r3, #5
 800a4de:	f003 020f 	and.w	r2, r3, #15
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4442      	add	r2, r8
 800a4e8:	609a      	str	r2, [r3, #8]
 800a4ea:	e0d0      	b.n	800a68e <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 800a4ec:	f7fd fa86 	bl	80079fc <HAL_RCC_GetPCLK1Freq>
 800a4f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	469a      	mov	sl, r3
 800a4f6:	f04f 0b00 	mov.w	fp, #0
 800a4fa:	46d0      	mov	r8, sl
 800a4fc:	46d9      	mov	r9, fp
 800a4fe:	eb18 0308 	adds.w	r3, r8, r8
 800a502:	eb49 0409 	adc.w	r4, r9, r9
 800a506:	4698      	mov	r8, r3
 800a508:	46a1      	mov	r9, r4
 800a50a:	eb18 080a 	adds.w	r8, r8, sl
 800a50e:	eb49 090b 	adc.w	r9, r9, fp
 800a512:	f04f 0100 	mov.w	r1, #0
 800a516:	f04f 0200 	mov.w	r2, #0
 800a51a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a51e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a522:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a526:	4688      	mov	r8, r1
 800a528:	4691      	mov	r9, r2
 800a52a:	eb1a 0508 	adds.w	r5, sl, r8
 800a52e:	eb4b 0609 	adc.w	r6, fp, r9
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	4619      	mov	r1, r3
 800a538:	f04f 0200 	mov.w	r2, #0
 800a53c:	f04f 0300 	mov.w	r3, #0
 800a540:	f04f 0400 	mov.w	r4, #0
 800a544:	0094      	lsls	r4, r2, #2
 800a546:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a54a:	008b      	lsls	r3, r1, #2
 800a54c:	461a      	mov	r2, r3
 800a54e:	4623      	mov	r3, r4
 800a550:	4628      	mov	r0, r5
 800a552:	4631      	mov	r1, r6
 800a554:	f7f5 feb4 	bl	80002c0 <__aeabi_uldivmod>
 800a558:	4603      	mov	r3, r0
 800a55a:	460c      	mov	r4, r1
 800a55c:	461a      	mov	r2, r3
 800a55e:	4b52      	ldr	r3, [pc, #328]	; (800a6a8 <UART_SetConfig+0x72c>)
 800a560:	fba3 2302 	umull	r2, r3, r3, r2
 800a564:	095b      	lsrs	r3, r3, #5
 800a566:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	469b      	mov	fp, r3
 800a56e:	f04f 0c00 	mov.w	ip, #0
 800a572:	46d9      	mov	r9, fp
 800a574:	46e2      	mov	sl, ip
 800a576:	eb19 0309 	adds.w	r3, r9, r9
 800a57a:	eb4a 040a 	adc.w	r4, sl, sl
 800a57e:	4699      	mov	r9, r3
 800a580:	46a2      	mov	sl, r4
 800a582:	eb19 090b 	adds.w	r9, r9, fp
 800a586:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a58a:	f04f 0100 	mov.w	r1, #0
 800a58e:	f04f 0200 	mov.w	r2, #0
 800a592:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a596:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a59a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a59e:	4689      	mov	r9, r1
 800a5a0:	4692      	mov	sl, r2
 800a5a2:	eb1b 0509 	adds.w	r5, fp, r9
 800a5a6:	eb4c 060a 	adc.w	r6, ip, sl
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	f04f 0200 	mov.w	r2, #0
 800a5b4:	f04f 0300 	mov.w	r3, #0
 800a5b8:	f04f 0400 	mov.w	r4, #0
 800a5bc:	0094      	lsls	r4, r2, #2
 800a5be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a5c2:	008b      	lsls	r3, r1, #2
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	4623      	mov	r3, r4
 800a5c8:	4628      	mov	r0, r5
 800a5ca:	4631      	mov	r1, r6
 800a5cc:	f7f5 fe78 	bl	80002c0 <__aeabi_uldivmod>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	460c      	mov	r4, r1
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	4b34      	ldr	r3, [pc, #208]	; (800a6a8 <UART_SetConfig+0x72c>)
 800a5d8:	fba3 1302 	umull	r1, r3, r3, r2
 800a5dc:	095b      	lsrs	r3, r3, #5
 800a5de:	2164      	movs	r1, #100	; 0x64
 800a5e0:	fb01 f303 	mul.w	r3, r1, r3
 800a5e4:	1ad3      	subs	r3, r2, r3
 800a5e6:	011b      	lsls	r3, r3, #4
 800a5e8:	3332      	adds	r3, #50	; 0x32
 800a5ea:	4a2f      	ldr	r2, [pc, #188]	; (800a6a8 <UART_SetConfig+0x72c>)
 800a5ec:	fba2 2303 	umull	r2, r3, r2, r3
 800a5f0:	095b      	lsrs	r3, r3, #5
 800a5f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5f6:	4498      	add	r8, r3
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	469b      	mov	fp, r3
 800a5fc:	f04f 0c00 	mov.w	ip, #0
 800a600:	46d9      	mov	r9, fp
 800a602:	46e2      	mov	sl, ip
 800a604:	eb19 0309 	adds.w	r3, r9, r9
 800a608:	eb4a 040a 	adc.w	r4, sl, sl
 800a60c:	4699      	mov	r9, r3
 800a60e:	46a2      	mov	sl, r4
 800a610:	eb19 090b 	adds.w	r9, r9, fp
 800a614:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a618:	f04f 0100 	mov.w	r1, #0
 800a61c:	f04f 0200 	mov.w	r2, #0
 800a620:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a624:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a628:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a62c:	4689      	mov	r9, r1
 800a62e:	4692      	mov	sl, r2
 800a630:	eb1b 0509 	adds.w	r5, fp, r9
 800a634:	eb4c 060a 	adc.w	r6, ip, sl
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	4619      	mov	r1, r3
 800a63e:	f04f 0200 	mov.w	r2, #0
 800a642:	f04f 0300 	mov.w	r3, #0
 800a646:	f04f 0400 	mov.w	r4, #0
 800a64a:	0094      	lsls	r4, r2, #2
 800a64c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a650:	008b      	lsls	r3, r1, #2
 800a652:	461a      	mov	r2, r3
 800a654:	4623      	mov	r3, r4
 800a656:	4628      	mov	r0, r5
 800a658:	4631      	mov	r1, r6
 800a65a:	f7f5 fe31 	bl	80002c0 <__aeabi_uldivmod>
 800a65e:	4603      	mov	r3, r0
 800a660:	460c      	mov	r4, r1
 800a662:	461a      	mov	r2, r3
 800a664:	4b10      	ldr	r3, [pc, #64]	; (800a6a8 <UART_SetConfig+0x72c>)
 800a666:	fba3 1302 	umull	r1, r3, r3, r2
 800a66a:	095b      	lsrs	r3, r3, #5
 800a66c:	2164      	movs	r1, #100	; 0x64
 800a66e:	fb01 f303 	mul.w	r3, r1, r3
 800a672:	1ad3      	subs	r3, r2, r3
 800a674:	011b      	lsls	r3, r3, #4
 800a676:	3332      	adds	r3, #50	; 0x32
 800a678:	4a0b      	ldr	r2, [pc, #44]	; (800a6a8 <UART_SetConfig+0x72c>)
 800a67a:	fba2 2303 	umull	r2, r3, r2, r3
 800a67e:	095b      	lsrs	r3, r3, #5
 800a680:	f003 020f 	and.w	r2, r3, #15
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4442      	add	r2, r8
 800a68a:	609a      	str	r2, [r3, #8]
}
 800a68c:	e7ff      	b.n	800a68e <UART_SetConfig+0x712>
 800a68e:	bf00      	nop
 800a690:	3714      	adds	r7, #20
 800a692:	46bd      	mov	sp, r7
 800a694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a698:	40011000 	.word	0x40011000
 800a69c:	40011400 	.word	0x40011400
 800a6a0:	40011800 	.word	0x40011800
 800a6a4:	40011c00 	.word	0x40011c00
 800a6a8:	51eb851f 	.word	0x51eb851f

0800a6ac <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6c4:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 800a6c6:	68fa      	ldr	r2, [r7, #12]
 800a6c8:	4b2f      	ldr	r3, [pc, #188]	; (800a788 <FSMC_NORSRAM_Init+0xdc>)
 800a6ca:	4013      	ands	r3, r2
 800a6cc:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a6d6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800a6dc:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800a6e2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800a6e8:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 800a6ee:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800a6f4:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800a6fa:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800a700:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800a706:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 800a70c:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 800a712:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 800a718:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 800a71e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a720:	68fa      	ldr	r2, [r7, #12]
 800a722:	4313      	orrs	r3, r2
 800a724:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	2b08      	cmp	r3, #8
 800a72c:	d103      	bne.n	800a736 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a734:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	68f9      	ldr	r1, [r7, #12]
 800a73e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a74a:	d10a      	bne.n	800a762 <FSMC_NORSRAM_Init+0xb6>
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d006      	beq.n	800a762 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a75c:	431a      	orrs	r2, r3
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d006      	beq.n	800a778 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a772:	431a      	orrs	r2, r3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3714      	adds	r7, #20
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	ffc00480 	.word	0xffc00480

0800a78c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b087      	sub	sp, #28
 800a790:	af00      	add	r7, sp, #0
 800a792:	60f8      	str	r0, [r7, #12]
 800a794:	60b9      	str	r1, [r7, #8]
 800a796:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800a798:	2300      	movs	r3, #0
 800a79a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	1c5a      	adds	r2, r3, #1
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7a6:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800a7ae:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a7ba:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	689b      	ldr	r3, [r3, #8]
 800a7c0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800a7c2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800a7ca:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	691b      	ldr	r3, [r3, #16]
 800a7d0:	3b01      	subs	r3, #1
 800a7d2:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a7d4:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	695b      	ldr	r3, [r3, #20]
 800a7da:	3b02      	subs	r3, #2
 800a7dc:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800a7de:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	697a      	ldr	r2, [r7, #20]
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	1c5a      	adds	r2, r3, #1
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	6979      	ldr	r1, [r7, #20]
 800a7f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a800:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a804:	d10e      	bne.n	800a824 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a80e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	691b      	ldr	r3, [r3, #16]
 800a814:	3b01      	subs	r3, #1
 800a816:	051b      	lsls	r3, r3, #20
 800a818:	697a      	ldr	r2, [r7, #20]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	697a      	ldr	r2, [r7, #20]
 800a822:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800a824:	2300      	movs	r3, #0
}
 800a826:	4618      	mov	r0, r3
 800a828:	371c      	adds	r7, #28
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr
	...

0800a834 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800a834:	b480      	push	{r7}
 800a836:	b087      	sub	sp, #28
 800a838:	af00      	add	r7, sp, #0
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	60b9      	str	r1, [r7, #8]
 800a83e:	607a      	str	r2, [r7, #4]
 800a840:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800a842:	2300      	movs	r3, #0
 800a844:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a84c:	d122      	bne.n	800a894 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a856:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800a858:	697a      	ldr	r2, [r7, #20]
 800a85a:	4b15      	ldr	r3, [pc, #84]	; (800a8b0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800a85c:	4013      	ands	r3, r2
 800a85e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a86a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800a872:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800a87a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a880:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a882:	697a      	ldr	r2, [r7, #20]
 800a884:	4313      	orrs	r3, r2
 800a886:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	6979      	ldr	r1, [r7, #20]
 800a88e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a892:	e005      	b.n	800a8a0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a89c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800a8a0:	2300      	movs	r3, #0
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	371c      	adds	r7, #28
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr
 800a8ae:	bf00      	nop
 800a8b0:	cff00000 	.word	0xcff00000

0800a8b4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a8b4:	b084      	sub	sp, #16
 800a8b6:	b480      	push	{r7}
 800a8b8:	b085      	sub	sp, #20
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
 800a8be:	f107 001c 	add.w	r0, r7, #28
 800a8c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a8ca:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a8cc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a8ce:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a8d2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a8d6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a8da:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a8de:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a8e0:	68fa      	ldr	r2, [r7, #12]
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a8ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	431a      	orrs	r2, r3
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a8fa:	2300      	movs	r3, #0
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3714      	adds	r7, #20
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	b004      	add	sp, #16
 800a908:	4770      	bx	lr

0800a90a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a90a:	b480      	push	{r7}
 800a90c:	b083      	sub	sp, #12
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a918:	4618      	mov	r0, r3
 800a91a:	370c      	adds	r7, #12
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	370c      	adds	r7, #12
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr

0800a946 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a946:	b580      	push	{r7, lr}
 800a948:	b082      	sub	sp, #8
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2203      	movs	r2, #3
 800a952:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a954:	2002      	movs	r0, #2
 800a956:	f7f9 f8ef 	bl	8003b38 <HAL_Delay>
  
  return HAL_OK;
 800a95a:	2300      	movs	r3, #0
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3708      	adds	r7, #8
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f003 0303 	and.w	r3, r3, #3
}
 800a974:	4618      	mov	r0, r3
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a980:	b480      	push	{r7}
 800a982:	b085      	sub	sp, #20
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a98a:	2300      	movs	r3, #0
 800a98c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a99e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a9a4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a9aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a9ac:	68fa      	ldr	r2, [r7, #12]
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	68db      	ldr	r3, [r3, #12]
 800a9b6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a9ba:	f023 030f 	bic.w	r3, r3, #15
 800a9be:	68fa      	ldr	r2, [r7, #12]
 800a9c0:	431a      	orrs	r2, r3
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3714      	adds	r7, #20
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	691b      	ldr	r3, [r3, #16]
 800a9e0:	b2db      	uxtb	r3, r3
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	370c      	adds	r7, #12
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr

0800a9ee <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a9ee:	b480      	push	{r7}
 800a9f0:	b085      	sub	sp, #20
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
 800a9f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	3314      	adds	r3, #20
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	4413      	add	r3, r2
 800aa02:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
}  
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3714      	adds	r7, #20
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b085      	sub	sp, #20
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	685a      	ldr	r2, [r3, #4]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aa3a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800aa40:	431a      	orrs	r2, r3
                       Data->DPSM);
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800aa46:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa52:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	431a      	orrs	r2, r3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800aa5e:	2300      	movs	r3, #0

}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3714      	adds	r7, #20
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b088      	sub	sp, #32
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800aa7a:	2310      	movs	r3, #16
 800aa7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa7e:	2340      	movs	r3, #64	; 0x40
 800aa80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa82:	2300      	movs	r3, #0
 800aa84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa8c:	f107 0308 	add.w	r3, r7, #8
 800aa90:	4619      	mov	r1, r3
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f7ff ff74 	bl	800a980 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800aa98:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa9c:	2110      	movs	r1, #16
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 fa40 	bl	800af24 <SDMMC_GetCmdResp1>
 800aaa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aaa6:	69fb      	ldr	r3, [r7, #28]
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3720      	adds	r7, #32
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b088      	sub	sp, #32
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800aabe:	2311      	movs	r3, #17
 800aac0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aac2:	2340      	movs	r3, #64	; 0x40
 800aac4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aac6:	2300      	movs	r3, #0
 800aac8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aaca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aace:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aad0:	f107 0308 	add.w	r3, r7, #8
 800aad4:	4619      	mov	r1, r3
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f7ff ff52 	bl	800a980 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800aadc:	f241 3288 	movw	r2, #5000	; 0x1388
 800aae0:	2111      	movs	r1, #17
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f000 fa1e 	bl	800af24 <SDMMC_GetCmdResp1>
 800aae8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aaea:	69fb      	ldr	r3, [r7, #28]
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3720      	adds	r7, #32
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b088      	sub	sp, #32
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ab02:	2312      	movs	r3, #18
 800ab04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab06:	2340      	movs	r3, #64	; 0x40
 800ab08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab14:	f107 0308 	add.w	r3, r7, #8
 800ab18:	4619      	mov	r1, r3
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f7ff ff30 	bl	800a980 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ab20:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab24:	2112      	movs	r1, #18
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 f9fc 	bl	800af24 <SDMMC_GetCmdResp1>
 800ab2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab2e:	69fb      	ldr	r3, [r7, #28]
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3720      	adds	r7, #32
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b088      	sub	sp, #32
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ab46:	2318      	movs	r3, #24
 800ab48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab4a:	2340      	movs	r3, #64	; 0x40
 800ab4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab58:	f107 0308 	add.w	r3, r7, #8
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f7ff ff0e 	bl	800a980 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ab64:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab68:	2118      	movs	r1, #24
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 f9da 	bl	800af24 <SDMMC_GetCmdResp1>
 800ab70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab72:	69fb      	ldr	r3, [r7, #28]
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3720      	adds	r7, #32
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b088      	sub	sp, #32
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ab8a:	2319      	movs	r3, #25
 800ab8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab8e:	2340      	movs	r3, #64	; 0x40
 800ab90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab92:	2300      	movs	r3, #0
 800ab94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab9c:	f107 0308 	add.w	r3, r7, #8
 800aba0:	4619      	mov	r1, r3
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f7ff feec 	bl	800a980 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800aba8:	f241 3288 	movw	r2, #5000	; 0x1388
 800abac:	2119      	movs	r1, #25
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 f9b8 	bl	800af24 <SDMMC_GetCmdResp1>
 800abb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abb6:	69fb      	ldr	r3, [r7, #28]
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3720      	adds	r7, #32
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b088      	sub	sp, #32
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800abc8:	2300      	movs	r3, #0
 800abca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800abcc:	230c      	movs	r3, #12
 800abce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800abd0:	2340      	movs	r3, #64	; 0x40
 800abd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800abd4:	2300      	movs	r3, #0
 800abd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800abd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abdc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800abde:	f107 0308 	add.w	r3, r7, #8
 800abe2:	4619      	mov	r1, r3
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f7ff fecb 	bl	800a980 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800abea:	4a05      	ldr	r2, [pc, #20]	; (800ac00 <SDMMC_CmdStopTransfer+0x40>)
 800abec:	210c      	movs	r1, #12
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 f998 	bl	800af24 <SDMMC_GetCmdResp1>
 800abf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abf6:	69fb      	ldr	r3, [r7, #28]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3720      	adds	r7, #32
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}
 800ac00:	05f5e100 	.word	0x05f5e100

0800ac04 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b08a      	sub	sp, #40	; 0x28
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ac14:	2307      	movs	r3, #7
 800ac16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac18:	2340      	movs	r3, #64	; 0x40
 800ac1a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac24:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac26:	f107 0310 	add.w	r3, r7, #16
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	f7ff fea7 	bl	800a980 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800ac32:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac36:	2107      	movs	r1, #7
 800ac38:	68f8      	ldr	r0, [r7, #12]
 800ac3a:	f000 f973 	bl	800af24 <SDMMC_GetCmdResp1>
 800ac3e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ac40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3728      	adds	r7, #40	; 0x28
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b088      	sub	sp, #32
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ac52:	2300      	movs	r3, #0
 800ac54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ac56:	2300      	movs	r3, #0
 800ac58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac66:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac68:	f107 0308 	add.w	r3, r7, #8
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f7ff fe86 	bl	800a980 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 f92d 	bl	800aed4 <SDMMC_GetCmdError>
 800ac7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac7c:	69fb      	ldr	r3, [r7, #28]
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3720      	adds	r7, #32
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}

0800ac86 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b088      	sub	sp, #32
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ac8e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ac92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ac94:	2308      	movs	r3, #8
 800ac96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac98:	2340      	movs	r3, #64	; 0x40
 800ac9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aca4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aca6:	f107 0308 	add.w	r3, r7, #8
 800acaa:	4619      	mov	r1, r3
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f7ff fe67 	bl	800a980 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 fb16 	bl	800b2e4 <SDMMC_GetCmdResp7>
 800acb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acba:	69fb      	ldr	r3, [r7, #28]
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3720      	adds	r7, #32
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b088      	sub	sp, #32
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800acd2:	2337      	movs	r3, #55	; 0x37
 800acd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800acd6:	2340      	movs	r3, #64	; 0x40
 800acd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800acda:	2300      	movs	r3, #0
 800acdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800acde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ace2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ace4:	f107 0308 	add.w	r3, r7, #8
 800ace8:	4619      	mov	r1, r3
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f7ff fe48 	bl	800a980 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800acf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800acf4:	2137      	movs	r1, #55	; 0x37
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 f914 	bl	800af24 <SDMMC_GetCmdResp1>
 800acfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acfe:	69fb      	ldr	r3, [r7, #28]
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3720      	adds	r7, #32
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b088      	sub	sp, #32
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ad1e:	2329      	movs	r3, #41	; 0x29
 800ad20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad22:	2340      	movs	r3, #64	; 0x40
 800ad24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad26:	2300      	movs	r3, #0
 800ad28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad30:	f107 0308 	add.w	r3, r7, #8
 800ad34:	4619      	mov	r1, r3
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f7ff fe22 	bl	800a980 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 fa23 	bl	800b188 <SDMMC_GetCmdResp3>
 800ad42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad44:	69fb      	ldr	r3, [r7, #28]
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3720      	adds	r7, #32
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b088      	sub	sp, #32
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
 800ad56:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ad5c:	2306      	movs	r3, #6
 800ad5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad60:	2340      	movs	r3, #64	; 0x40
 800ad62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad64:	2300      	movs	r3, #0
 800ad66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad6c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad6e:	f107 0308 	add.w	r3, r7, #8
 800ad72:	4619      	mov	r1, r3
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f7ff fe03 	bl	800a980 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800ad7a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad7e:	2106      	movs	r1, #6
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f8cf 	bl	800af24 <SDMMC_GetCmdResp1>
 800ad86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad88:	69fb      	ldr	r3, [r7, #28]
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3720      	adds	r7, #32
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b088      	sub	sp, #32
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ad9e:	2333      	movs	r3, #51	; 0x33
 800ada0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ada2:	2340      	movs	r3, #64	; 0x40
 800ada4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ada6:	2300      	movs	r3, #0
 800ada8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800adaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800adb0:	f107 0308 	add.w	r3, r7, #8
 800adb4:	4619      	mov	r1, r3
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f7ff fde2 	bl	800a980 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800adbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800adc0:	2133      	movs	r1, #51	; 0x33
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 f8ae 	bl	800af24 <SDMMC_GetCmdResp1>
 800adc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adca:	69fb      	ldr	r3, [r7, #28]
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3720      	adds	r7, #32
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b088      	sub	sp, #32
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800addc:	2300      	movs	r3, #0
 800adde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ade0:	2302      	movs	r3, #2
 800ade2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ade4:	23c0      	movs	r3, #192	; 0xc0
 800ade6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ade8:	2300      	movs	r3, #0
 800adea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800adec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adf0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800adf2:	f107 0308 	add.w	r3, r7, #8
 800adf6:	4619      	mov	r1, r3
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f7ff fdc1 	bl	800a980 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 f97c 	bl	800b0fc <SDMMC_GetCmdResp2>
 800ae04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae06:	69fb      	ldr	r3, [r7, #28]
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3720      	adds	r7, #32
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b088      	sub	sp, #32
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ae1e:	2309      	movs	r3, #9
 800ae20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ae22:	23c0      	movs	r3, #192	; 0xc0
 800ae24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae26:	2300      	movs	r3, #0
 800ae28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae30:	f107 0308 	add.w	r3, r7, #8
 800ae34:	4619      	mov	r1, r3
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f7ff fda2 	bl	800a980 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 f95d 	bl	800b0fc <SDMMC_GetCmdResp2>
 800ae42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae44:	69fb      	ldr	r3, [r7, #28]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3720      	adds	r7, #32
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800ae4e:	b580      	push	{r7, lr}
 800ae50:	b088      	sub	sp, #32
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
 800ae56:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ae5c:	2303      	movs	r3, #3
 800ae5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae60:	2340      	movs	r3, #64	; 0x40
 800ae62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae64:	2300      	movs	r3, #0
 800ae66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae6c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae6e:	f107 0308 	add.w	r3, r7, #8
 800ae72:	4619      	mov	r1, r3
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f7ff fd83 	bl	800a980 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ae7a:	683a      	ldr	r2, [r7, #0]
 800ae7c:	2103      	movs	r1, #3
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 f9bc 	bl	800b1fc <SDMMC_GetCmdResp6>
 800ae84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae86:	69fb      	ldr	r3, [r7, #28]
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3720      	adds	r7, #32
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b088      	sub	sp, #32
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ae9e:	230d      	movs	r3, #13
 800aea0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aea2:	2340      	movs	r3, #64	; 0x40
 800aea4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aea6:	2300      	movs	r3, #0
 800aea8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aeaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aeb0:	f107 0308 	add.w	r3, r7, #8
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f7ff fd62 	bl	800a980 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800aebc:	f241 3288 	movw	r2, #5000	; 0x1388
 800aec0:	210d      	movs	r1, #13
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 f82e 	bl	800af24 <SDMMC_GetCmdResp1>
 800aec8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aeca:	69fb      	ldr	r3, [r7, #28]
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3720      	adds	r7, #32
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800aed4:	b490      	push	{r4, r7}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aedc:	4b0f      	ldr	r3, [pc, #60]	; (800af1c <SDMMC_GetCmdError+0x48>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a0f      	ldr	r2, [pc, #60]	; (800af20 <SDMMC_GetCmdError+0x4c>)
 800aee2:	fba2 2303 	umull	r2, r3, r2, r3
 800aee6:	0a5b      	lsrs	r3, r3, #9
 800aee8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aeec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800aef0:	4623      	mov	r3, r4
 800aef2:	1e5c      	subs	r4, r3, #1
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d102      	bne.n	800aefe <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aef8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aefc:	e009      	b.n	800af12 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af06:	2b00      	cmp	r3, #0
 800af08:	d0f2      	beq.n	800aef0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	22c5      	movs	r2, #197	; 0xc5
 800af0e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	3708      	adds	r7, #8
 800af16:	46bd      	mov	sp, r7
 800af18:	bc90      	pop	{r4, r7}
 800af1a:	4770      	bx	lr
 800af1c:	20000000 	.word	0x20000000
 800af20:	10624dd3 	.word	0x10624dd3

0800af24 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800af24:	b590      	push	{r4, r7, lr}
 800af26:	b087      	sub	sp, #28
 800af28:	af00      	add	r7, sp, #0
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	460b      	mov	r3, r1
 800af2e:	607a      	str	r2, [r7, #4]
 800af30:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800af32:	4b6f      	ldr	r3, [pc, #444]	; (800b0f0 <SDMMC_GetCmdResp1+0x1cc>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4a6f      	ldr	r2, [pc, #444]	; (800b0f4 <SDMMC_GetCmdResp1+0x1d0>)
 800af38:	fba2 2303 	umull	r2, r3, r2, r3
 800af3c:	0a5b      	lsrs	r3, r3, #9
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800af44:	4623      	mov	r3, r4
 800af46:	1e5c      	subs	r4, r3, #1
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d102      	bne.n	800af52 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af50:	e0c9      	b.n	800b0e6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af56:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d0f0      	beq.n	800af44 <SDMMC_GetCmdResp1+0x20>
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d1eb      	bne.n	800af44 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af70:	f003 0304 	and.w	r3, r3, #4
 800af74:	2b00      	cmp	r3, #0
 800af76:	d004      	beq.n	800af82 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2204      	movs	r2, #4
 800af7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800af7e:	2304      	movs	r3, #4
 800af80:	e0b1      	b.n	800b0e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af86:	f003 0301 	and.w	r3, r3, #1
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d004      	beq.n	800af98 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2201      	movs	r2, #1
 800af92:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800af94:	2301      	movs	r3, #1
 800af96:	e0a6      	b.n	800b0e6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	22c5      	movs	r2, #197	; 0xc5
 800af9c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f7ff fd18 	bl	800a9d4 <SDIO_GetCommandResponse>
 800afa4:	4603      	mov	r3, r0
 800afa6:	461a      	mov	r2, r3
 800afa8:	7afb      	ldrb	r3, [r7, #11]
 800afaa:	4293      	cmp	r3, r2
 800afac:	d001      	beq.n	800afb2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800afae:	2301      	movs	r3, #1
 800afb0:	e099      	b.n	800b0e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800afb2:	2100      	movs	r1, #0
 800afb4:	68f8      	ldr	r0, [r7, #12]
 800afb6:	f7ff fd1a 	bl	800a9ee <SDIO_GetResponse>
 800afba:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800afbc:	693a      	ldr	r2, [r7, #16]
 800afbe:	4b4e      	ldr	r3, [pc, #312]	; (800b0f8 <SDMMC_GetCmdResp1+0x1d4>)
 800afc0:	4013      	ands	r3, r2
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d101      	bne.n	800afca <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800afc6:	2300      	movs	r3, #0
 800afc8:	e08d      	b.n	800b0e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	da02      	bge.n	800afd6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800afd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800afd4:	e087      	b.n	800b0e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d001      	beq.n	800afe4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800afe0:	2340      	movs	r3, #64	; 0x40
 800afe2:	e080      	b.n	800b0e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800afea:	2b00      	cmp	r3, #0
 800afec:	d001      	beq.n	800aff2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800afee:	2380      	movs	r3, #128	; 0x80
 800aff0:	e079      	b.n	800b0e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d002      	beq.n	800b002 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800affc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b000:	e071      	b.n	800b0e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d002      	beq.n	800b012 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b00c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b010:	e069      	b.n	800b0e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d002      	beq.n	800b022 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b01c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b020:	e061      	b.n	800b0e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d002      	beq.n	800b032 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b02c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b030:	e059      	b.n	800b0e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d002      	beq.n	800b042 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b03c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b040:	e051      	b.n	800b0e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d002      	beq.n	800b052 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b04c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b050:	e049      	b.n	800b0e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d002      	beq.n	800b062 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b05c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b060:	e041      	b.n	800b0e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d002      	beq.n	800b072 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b06c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b070:	e039      	b.n	800b0e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d002      	beq.n	800b082 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b07c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b080:	e031      	b.n	800b0e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d002      	beq.n	800b092 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b08c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b090:	e029      	b.n	800b0e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d002      	beq.n	800b0a2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b09c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b0a0:	e021      	b.n	800b0e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d002      	beq.n	800b0b2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b0ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b0b0:	e019      	b.n	800b0e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d002      	beq.n	800b0c2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b0bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b0c0:	e011      	b.n	800b0e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d002      	beq.n	800b0d2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b0cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b0d0:	e009      	b.n	800b0e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	f003 0308 	and.w	r3, r3, #8
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d002      	beq.n	800b0e2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b0dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b0e0:	e001      	b.n	800b0e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b0e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	371c      	adds	r7, #28
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd90      	pop	{r4, r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	20000000 	.word	0x20000000
 800b0f4:	10624dd3 	.word	0x10624dd3
 800b0f8:	fdffe008 	.word	0xfdffe008

0800b0fc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b0fc:	b490      	push	{r4, r7}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b104:	4b1e      	ldr	r3, [pc, #120]	; (800b180 <SDMMC_GetCmdResp2+0x84>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a1e      	ldr	r2, [pc, #120]	; (800b184 <SDMMC_GetCmdResp2+0x88>)
 800b10a:	fba2 2303 	umull	r2, r3, r2, r3
 800b10e:	0a5b      	lsrs	r3, r3, #9
 800b110:	f241 3288 	movw	r2, #5000	; 0x1388
 800b114:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b118:	4623      	mov	r3, r4
 800b11a:	1e5c      	subs	r4, r3, #1
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d102      	bne.n	800b126 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b120:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b124:	e026      	b.n	800b174 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b12a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b132:	2b00      	cmp	r3, #0
 800b134:	d0f0      	beq.n	800b118 <SDMMC_GetCmdResp2+0x1c>
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d1eb      	bne.n	800b118 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b144:	f003 0304 	and.w	r3, r3, #4
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d004      	beq.n	800b156 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2204      	movs	r2, #4
 800b150:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b152:	2304      	movs	r3, #4
 800b154:	e00e      	b.n	800b174 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b15a:	f003 0301 	and.w	r3, r3, #1
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d004      	beq.n	800b16c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2201      	movs	r2, #1
 800b166:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b168:	2301      	movs	r3, #1
 800b16a:	e003      	b.n	800b174 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	22c5      	movs	r2, #197	; 0xc5
 800b170:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b172:	2300      	movs	r3, #0
}
 800b174:	4618      	mov	r0, r3
 800b176:	3710      	adds	r7, #16
 800b178:	46bd      	mov	sp, r7
 800b17a:	bc90      	pop	{r4, r7}
 800b17c:	4770      	bx	lr
 800b17e:	bf00      	nop
 800b180:	20000000 	.word	0x20000000
 800b184:	10624dd3 	.word	0x10624dd3

0800b188 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b188:	b490      	push	{r4, r7}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b190:	4b18      	ldr	r3, [pc, #96]	; (800b1f4 <SDMMC_GetCmdResp3+0x6c>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4a18      	ldr	r2, [pc, #96]	; (800b1f8 <SDMMC_GetCmdResp3+0x70>)
 800b196:	fba2 2303 	umull	r2, r3, r2, r3
 800b19a:	0a5b      	lsrs	r3, r3, #9
 800b19c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1a0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b1a4:	4623      	mov	r3, r4
 800b1a6:	1e5c      	subs	r4, r3, #1
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d102      	bne.n	800b1b2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1b0:	e01b      	b.n	800b1ea <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1b6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d0f0      	beq.n	800b1a4 <SDMMC_GetCmdResp3+0x1c>
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d1eb      	bne.n	800b1a4 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1d0:	f003 0304 	and.w	r3, r3, #4
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d004      	beq.n	800b1e2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2204      	movs	r2, #4
 800b1dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b1de:	2304      	movs	r3, #4
 800b1e0:	e003      	b.n	800b1ea <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	22c5      	movs	r2, #197	; 0xc5
 800b1e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b1e8:	2300      	movs	r3, #0
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3710      	adds	r7, #16
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bc90      	pop	{r4, r7}
 800b1f2:	4770      	bx	lr
 800b1f4:	20000000 	.word	0x20000000
 800b1f8:	10624dd3 	.word	0x10624dd3

0800b1fc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b1fc:	b590      	push	{r4, r7, lr}
 800b1fe:	b087      	sub	sp, #28
 800b200:	af00      	add	r7, sp, #0
 800b202:	60f8      	str	r0, [r7, #12]
 800b204:	460b      	mov	r3, r1
 800b206:	607a      	str	r2, [r7, #4]
 800b208:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b20a:	4b34      	ldr	r3, [pc, #208]	; (800b2dc <SDMMC_GetCmdResp6+0xe0>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4a34      	ldr	r2, [pc, #208]	; (800b2e0 <SDMMC_GetCmdResp6+0xe4>)
 800b210:	fba2 2303 	umull	r2, r3, r2, r3
 800b214:	0a5b      	lsrs	r3, r3, #9
 800b216:	f241 3288 	movw	r2, #5000	; 0x1388
 800b21a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b21e:	4623      	mov	r3, r4
 800b220:	1e5c      	subs	r4, r3, #1
 800b222:	2b00      	cmp	r3, #0
 800b224:	d102      	bne.n	800b22c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b226:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b22a:	e052      	b.n	800b2d2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b230:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d0f0      	beq.n	800b21e <SDMMC_GetCmdResp6+0x22>
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b242:	2b00      	cmp	r3, #0
 800b244:	d1eb      	bne.n	800b21e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b24a:	f003 0304 	and.w	r3, r3, #4
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d004      	beq.n	800b25c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2204      	movs	r2, #4
 800b256:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b258:	2304      	movs	r3, #4
 800b25a:	e03a      	b.n	800b2d2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b260:	f003 0301 	and.w	r3, r3, #1
 800b264:	2b00      	cmp	r3, #0
 800b266:	d004      	beq.n	800b272 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2201      	movs	r2, #1
 800b26c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b26e:	2301      	movs	r3, #1
 800b270:	e02f      	b.n	800b2d2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b272:	68f8      	ldr	r0, [r7, #12]
 800b274:	f7ff fbae 	bl	800a9d4 <SDIO_GetCommandResponse>
 800b278:	4603      	mov	r3, r0
 800b27a:	461a      	mov	r2, r3
 800b27c:	7afb      	ldrb	r3, [r7, #11]
 800b27e:	4293      	cmp	r3, r2
 800b280:	d001      	beq.n	800b286 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b282:	2301      	movs	r3, #1
 800b284:	e025      	b.n	800b2d2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	22c5      	movs	r2, #197	; 0xc5
 800b28a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b28c:	2100      	movs	r1, #0
 800b28e:	68f8      	ldr	r0, [r7, #12]
 800b290:	f7ff fbad 	bl	800a9ee <SDIO_GetResponse>
 800b294:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d106      	bne.n	800b2ae <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	0c1b      	lsrs	r3, r3, #16
 800b2a4:	b29a      	uxth	r2, r3
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	e011      	b.n	800b2d2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d002      	beq.n	800b2be <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b2b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b2bc:	e009      	b.n	800b2d2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d002      	beq.n	800b2ce <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b2c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2cc:	e001      	b.n	800b2d2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b2ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	371c      	adds	r7, #28
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd90      	pop	{r4, r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	20000000 	.word	0x20000000
 800b2e0:	10624dd3 	.word	0x10624dd3

0800b2e4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b2e4:	b490      	push	{r4, r7}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b2ec:	4b21      	ldr	r3, [pc, #132]	; (800b374 <SDMMC_GetCmdResp7+0x90>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4a21      	ldr	r2, [pc, #132]	; (800b378 <SDMMC_GetCmdResp7+0x94>)
 800b2f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b2f6:	0a5b      	lsrs	r3, r3, #9
 800b2f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2fc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b300:	4623      	mov	r3, r4
 800b302:	1e5c      	subs	r4, r3, #1
 800b304:	2b00      	cmp	r3, #0
 800b306:	d102      	bne.n	800b30e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b308:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b30c:	e02c      	b.n	800b368 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b312:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d0f0      	beq.n	800b300 <SDMMC_GetCmdResp7+0x1c>
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b324:	2b00      	cmp	r3, #0
 800b326:	d1eb      	bne.n	800b300 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b32c:	f003 0304 	and.w	r3, r3, #4
 800b330:	2b00      	cmp	r3, #0
 800b332:	d004      	beq.n	800b33e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2204      	movs	r2, #4
 800b338:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b33a:	2304      	movs	r3, #4
 800b33c:	e014      	b.n	800b368 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b342:	f003 0301 	and.w	r3, r3, #1
 800b346:	2b00      	cmp	r3, #0
 800b348:	d004      	beq.n	800b354 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2201      	movs	r2, #1
 800b34e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b350:	2301      	movs	r3, #1
 800b352:	e009      	b.n	800b368 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d002      	beq.n	800b366 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2240      	movs	r2, #64	; 0x40
 800b364:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b366:	2300      	movs	r3, #0
  
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3710      	adds	r7, #16
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bc90      	pop	{r4, r7}
 800b370:	4770      	bx	lr
 800b372:	bf00      	nop
 800b374:	20000000 	.word	0x20000000
 800b378:	10624dd3 	.word	0x10624dd3

0800b37c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b37c:	b084      	sub	sp, #16
 800b37e:	b580      	push	{r7, lr}
 800b380:	b084      	sub	sp, #16
 800b382:	af00      	add	r7, sp, #0
 800b384:	6078      	str	r0, [r7, #4]
 800b386:	f107 001c 	add.w	r0, r7, #28
 800b38a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b390:	2b01      	cmp	r3, #1
 800b392:	d122      	bne.n	800b3da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b398:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	68db      	ldr	r3, [r3, #12]
 800b3a4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b3a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	68db      	ldr	r3, [r3, #12]
 800b3b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b3bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d105      	bne.n	800b3ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	68db      	ldr	r3, [r3, #12]
 800b3c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 f94a 	bl	800b668 <USB_CoreReset>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	73fb      	strb	r3, [r7, #15]
 800b3d8:	e01a      	b.n	800b410 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	68db      	ldr	r3, [r3, #12]
 800b3de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 f93e 	bl	800b668 <USB_CoreReset>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b3f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d106      	bne.n	800b404 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	639a      	str	r2, [r3, #56]	; 0x38
 800b402:	e005      	b.n	800b410 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b408:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b412:	2b01      	cmp	r3, #1
 800b414:	d10b      	bne.n	800b42e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	689b      	ldr	r3, [r3, #8]
 800b41a:	f043 0206 	orr.w	r2, r3, #6
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	f043 0220 	orr.w	r2, r3, #32
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b42e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b430:	4618      	mov	r0, r3
 800b432:	3710      	adds	r7, #16
 800b434:	46bd      	mov	sp, r7
 800b436:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b43a:	b004      	add	sp, #16
 800b43c:	4770      	bx	lr

0800b43e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b43e:	b480      	push	{r7}
 800b440:	b083      	sub	sp, #12
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	689b      	ldr	r3, [r3, #8]
 800b44a:	f043 0201 	orr.w	r2, r3, #1
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b452:	2300      	movs	r3, #0
}
 800b454:	4618      	mov	r0, r3
 800b456:	370c      	adds	r7, #12
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr

0800b460 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b460:	b480      	push	{r7}
 800b462:	b083      	sub	sp, #12
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	689b      	ldr	r3, [r3, #8]
 800b46c:	f023 0201 	bic.w	r2, r3, #1
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b474:	2300      	movs	r3, #0
}
 800b476:	4618      	mov	r0, r3
 800b478:	370c      	adds	r7, #12
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr

0800b482 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b482:	b580      	push	{r7, lr}
 800b484:	b082      	sub	sp, #8
 800b486:	af00      	add	r7, sp, #0
 800b488:	6078      	str	r0, [r7, #4]
 800b48a:	460b      	mov	r3, r1
 800b48c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b49a:	78fb      	ldrb	r3, [r7, #3]
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d106      	bne.n	800b4ae <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	68db      	ldr	r3, [r3, #12]
 800b4a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	60da      	str	r2, [r3, #12]
 800b4ac:	e00b      	b.n	800b4c6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b4ae:	78fb      	ldrb	r3, [r7, #3]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d106      	bne.n	800b4c2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	68db      	ldr	r3, [r3, #12]
 800b4b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	60da      	str	r2, [r3, #12]
 800b4c0:	e001      	b.n	800b4c6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	e003      	b.n	800b4ce <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b4c6:	2032      	movs	r0, #50	; 0x32
 800b4c8:	f7f8 fb36 	bl	8003b38 <HAL_Delay>

  return HAL_OK;
 800b4cc:	2300      	movs	r3, #0
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3708      	adds	r7, #8
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
	...

0800b4d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b085      	sub	sp, #20
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	019b      	lsls	r3, r3, #6
 800b4ea:	f043 0220 	orr.w	r2, r3, #32
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	60fb      	str	r3, [r7, #12]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	4a09      	ldr	r2, [pc, #36]	; (800b520 <USB_FlushTxFifo+0x48>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d901      	bls.n	800b504 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b500:	2303      	movs	r3, #3
 800b502:	e006      	b.n	800b512 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	691b      	ldr	r3, [r3, #16]
 800b508:	f003 0320 	and.w	r3, r3, #32
 800b50c:	2b20      	cmp	r3, #32
 800b50e:	d0f0      	beq.n	800b4f2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b510:	2300      	movs	r3, #0
}
 800b512:	4618      	mov	r0, r3
 800b514:	3714      	adds	r7, #20
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr
 800b51e:	bf00      	nop
 800b520:	00030d40 	.word	0x00030d40

0800b524 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b524:	b480      	push	{r7}
 800b526:	b085      	sub	sp, #20
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b52c:	2300      	movs	r3, #0
 800b52e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2210      	movs	r2, #16
 800b534:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	3301      	adds	r3, #1
 800b53a:	60fb      	str	r3, [r7, #12]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	4a09      	ldr	r2, [pc, #36]	; (800b564 <USB_FlushRxFifo+0x40>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d901      	bls.n	800b548 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b544:	2303      	movs	r3, #3
 800b546:	e006      	b.n	800b556 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	691b      	ldr	r3, [r3, #16]
 800b54c:	f003 0310 	and.w	r3, r3, #16
 800b550:	2b10      	cmp	r3, #16
 800b552:	d0f0      	beq.n	800b536 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b554:	2300      	movs	r3, #0
}
 800b556:	4618      	mov	r0, r3
 800b558:	3714      	adds	r7, #20
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr
 800b562:	bf00      	nop
 800b564:	00030d40 	.word	0x00030d40

0800b568 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b568:	b480      	push	{r7}
 800b56a:	b089      	sub	sp, #36	; 0x24
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	60f8      	str	r0, [r7, #12]
 800b570:	60b9      	str	r1, [r7, #8]
 800b572:	4611      	mov	r1, r2
 800b574:	461a      	mov	r2, r3
 800b576:	460b      	mov	r3, r1
 800b578:	71fb      	strb	r3, [r7, #7]
 800b57a:	4613      	mov	r3, r2
 800b57c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b586:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d11a      	bne.n	800b5c4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b58e:	88bb      	ldrh	r3, [r7, #4]
 800b590:	3303      	adds	r3, #3
 800b592:	089b      	lsrs	r3, r3, #2
 800b594:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b596:	2300      	movs	r3, #0
 800b598:	61bb      	str	r3, [r7, #24]
 800b59a:	e00f      	b.n	800b5bc <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b59c:	79fb      	ldrb	r3, [r7, #7]
 800b59e:	031a      	lsls	r2, r3, #12
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	4413      	add	r3, r2
 800b5a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5a8:	461a      	mov	r2, r3
 800b5aa:	69fb      	ldr	r3, [r7, #28]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	3304      	adds	r3, #4
 800b5b4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b5b6:	69bb      	ldr	r3, [r7, #24]
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	61bb      	str	r3, [r7, #24]
 800b5bc:	69ba      	ldr	r2, [r7, #24]
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d3eb      	bcc.n	800b59c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b5c4:	2300      	movs	r3, #0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3724      	adds	r7, #36	; 0x24
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr

0800b5d2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b5d2:	b480      	push	{r7}
 800b5d4:	b089      	sub	sp, #36	; 0x24
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	60f8      	str	r0, [r7, #12]
 800b5da:	60b9      	str	r1, [r7, #8]
 800b5dc:	4613      	mov	r3, r2
 800b5de:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b5e8:	88fb      	ldrh	r3, [r7, #6]
 800b5ea:	3303      	adds	r3, #3
 800b5ec:	089b      	lsrs	r3, r3, #2
 800b5ee:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	61bb      	str	r3, [r7, #24]
 800b5f4:	e00b      	b.n	800b60e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5fc:	681a      	ldr	r2, [r3, #0]
 800b5fe:	69fb      	ldr	r3, [r7, #28]
 800b600:	601a      	str	r2, [r3, #0]
    pDest++;
 800b602:	69fb      	ldr	r3, [r7, #28]
 800b604:	3304      	adds	r3, #4
 800b606:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b608:	69bb      	ldr	r3, [r7, #24]
 800b60a:	3301      	adds	r3, #1
 800b60c:	61bb      	str	r3, [r7, #24]
 800b60e:	69ba      	ldr	r2, [r7, #24]
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	429a      	cmp	r2, r3
 800b614:	d3ef      	bcc.n	800b5f6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b616:	69fb      	ldr	r3, [r7, #28]
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3724      	adds	r7, #36	; 0x24
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b624:	b480      	push	{r7}
 800b626:	b085      	sub	sp, #20
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	695b      	ldr	r3, [r3, #20]
 800b630:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	699b      	ldr	r3, [r3, #24]
 800b636:	68fa      	ldr	r2, [r7, #12]
 800b638:	4013      	ands	r3, r2
 800b63a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b63c:	68fb      	ldr	r3, [r7, #12]
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3714      	adds	r7, #20
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr

0800b64a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b64a:	b480      	push	{r7}
 800b64c:	b083      	sub	sp, #12
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	695b      	ldr	r3, [r3, #20]
 800b656:	f003 0301 	and.w	r3, r3, #1
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	370c      	adds	r7, #12
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr
	...

0800b668 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b670:	2300      	movs	r3, #0
 800b672:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	3301      	adds	r3, #1
 800b678:	60fb      	str	r3, [r7, #12]
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	4a13      	ldr	r2, [pc, #76]	; (800b6cc <USB_CoreReset+0x64>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d901      	bls.n	800b686 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b682:	2303      	movs	r3, #3
 800b684:	e01b      	b.n	800b6be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	691b      	ldr	r3, [r3, #16]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	daf2      	bge.n	800b674 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b68e:	2300      	movs	r3, #0
 800b690:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	691b      	ldr	r3, [r3, #16]
 800b696:	f043 0201 	orr.w	r2, r3, #1
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	60fb      	str	r3, [r7, #12]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	4a09      	ldr	r2, [pc, #36]	; (800b6cc <USB_CoreReset+0x64>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d901      	bls.n	800b6b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b6ac:	2303      	movs	r3, #3
 800b6ae:	e006      	b.n	800b6be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	691b      	ldr	r3, [r3, #16]
 800b6b4:	f003 0301 	and.w	r3, r3, #1
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d0f0      	beq.n	800b69e <USB_CoreReset+0x36>

  return HAL_OK;
 800b6bc:	2300      	movs	r3, #0
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3714      	adds	r7, #20
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr
 800b6ca:	bf00      	nop
 800b6cc:	00030d40 	.word	0x00030d40

0800b6d0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b6d0:	b084      	sub	sp, #16
 800b6d2:	b580      	push	{r7, lr}
 800b6d4:	b084      	sub	sp, #16
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
 800b6da:	f107 001c 	add.w	r0, r7, #28
 800b6de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6f6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b702:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b70e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b712:	2b00      	cmp	r3, #0
 800b714:	d018      	beq.n	800b748 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d10a      	bne.n	800b732 <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	68ba      	ldr	r2, [r7, #8]
 800b726:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b72a:	f043 0304 	orr.w	r3, r3, #4
 800b72e:	6013      	str	r3, [r2, #0]
 800b730:	e014      	b.n	800b75c <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	68ba      	ldr	r2, [r7, #8]
 800b73c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b740:	f023 0304 	bic.w	r3, r3, #4
 800b744:	6013      	str	r3, [r2, #0]
 800b746:	e009      	b.n	800b75c <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	68ba      	ldr	r2, [r7, #8]
 800b752:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b756:	f023 0304 	bic.w	r3, r3, #4
 800b75a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800b75c:	2110      	movs	r1, #16
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f7ff feba 	bl	800b4d8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f7ff fedd 	bl	800b524 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b76a:	2300      	movs	r3, #0
 800b76c:	60fb      	str	r3, [r7, #12]
 800b76e:	e015      	b.n	800b79c <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	015a      	lsls	r2, r3, #5
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	4413      	add	r3, r2
 800b778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b77c:	461a      	mov	r2, r3
 800b77e:	f04f 33ff 	mov.w	r3, #4294967295
 800b782:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	015a      	lsls	r2, r3, #5
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	4413      	add	r3, r2
 800b78c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b790:	461a      	mov	r2, r3
 800b792:	2300      	movs	r3, #0
 800b794:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	3301      	adds	r3, #1
 800b79a:	60fb      	str	r3, [r7, #12]
 800b79c:	6a3b      	ldr	r3, [r7, #32]
 800b79e:	68fa      	ldr	r2, [r7, #12]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d3e5      	bcc.n	800b770 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800b7a4:	2101      	movs	r1, #1
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f000 f8ac 	bl	800b904 <USB_DriveVbus>

  HAL_Delay(200U);
 800b7ac:	20c8      	movs	r0, #200	; 0xc8
 800b7ae:	f7f8 f9c3 	bl	8003b38 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b7be:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d00b      	beq.n	800b7e4 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7d2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	4a14      	ldr	r2, [pc, #80]	; (800b828 <USB_HostInit+0x158>)
 800b7d8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4a13      	ldr	r2, [pc, #76]	; (800b82c <USB_HostInit+0x15c>)
 800b7de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800b7e2:	e009      	b.n	800b7f8 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2280      	movs	r2, #128	; 0x80
 800b7e8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	4a10      	ldr	r2, [pc, #64]	; (800b830 <USB_HostInit+0x160>)
 800b7ee:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	4a10      	ldr	r2, [pc, #64]	; (800b834 <USB_HostInit+0x164>)
 800b7f4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d105      	bne.n	800b80a <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	699b      	ldr	r3, [r3, #24]
 800b802:	f043 0210 	orr.w	r2, r3, #16
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	699a      	ldr	r2, [r3, #24]
 800b80e:	4b0a      	ldr	r3, [pc, #40]	; (800b838 <USB_HostInit+0x168>)
 800b810:	4313      	orrs	r3, r2
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800b816:	2300      	movs	r3, #0
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3710      	adds	r7, #16
 800b81c:	46bd      	mov	sp, r7
 800b81e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b822:	b004      	add	sp, #16
 800b824:	4770      	bx	lr
 800b826:	bf00      	nop
 800b828:	01000200 	.word	0x01000200
 800b82c:	00e00300 	.word	0x00e00300
 800b830:	00600080 	.word	0x00600080
 800b834:	004000e0 	.word	0x004000e0
 800b838:	a3200008 	.word	0xa3200008

0800b83c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b085      	sub	sp, #20
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	460b      	mov	r3, r1
 800b846:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	68fa      	ldr	r2, [r7, #12]
 800b856:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b85a:	f023 0303 	bic.w	r3, r3, #3
 800b85e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b866:	681a      	ldr	r2, [r3, #0]
 800b868:	78fb      	ldrb	r3, [r7, #3]
 800b86a:	f003 0303 	and.w	r3, r3, #3
 800b86e:	68f9      	ldr	r1, [r7, #12]
 800b870:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b874:	4313      	orrs	r3, r2
 800b876:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b878:	78fb      	ldrb	r3, [r7, #3]
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	d107      	bne.n	800b88e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b884:	461a      	mov	r2, r3
 800b886:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b88a:	6053      	str	r3, [r2, #4]
 800b88c:	e009      	b.n	800b8a2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800b88e:	78fb      	ldrb	r3, [r7, #3]
 800b890:	2b02      	cmp	r3, #2
 800b892:	d106      	bne.n	800b8a2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b89a:	461a      	mov	r2, r3
 800b89c:	f241 7370 	movw	r3, #6000	; 0x1770
 800b8a0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800b8a2:	2300      	movs	r3, #0
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3714      	adds	r7, #20
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b8d0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	68fa      	ldr	r2, [r7, #12]
 800b8d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b8da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8de:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b8e0:	2064      	movs	r0, #100	; 0x64
 800b8e2:	f7f8 f929 	bl	8003b38 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	68fa      	ldr	r2, [r7, #12]
 800b8ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b8ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8f2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b8f4:	200a      	movs	r0, #10
 800b8f6:	f7f8 f91f 	bl	8003b38 <HAL_Delay>

  return HAL_OK;
 800b8fa:	2300      	movs	r3, #0
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3710      	adds	r7, #16
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b904:	b480      	push	{r7}
 800b906:	b085      	sub	sp, #20
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	460b      	mov	r3, r1
 800b90e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b914:	2300      	movs	r3, #0
 800b916:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b928:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b930:	2b00      	cmp	r3, #0
 800b932:	d109      	bne.n	800b948 <USB_DriveVbus+0x44>
 800b934:	78fb      	ldrb	r3, [r7, #3]
 800b936:	2b01      	cmp	r3, #1
 800b938:	d106      	bne.n	800b948 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	68fa      	ldr	r2, [r7, #12]
 800b93e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b942:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b946:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b94e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b952:	d109      	bne.n	800b968 <USB_DriveVbus+0x64>
 800b954:	78fb      	ldrb	r3, [r7, #3]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d106      	bne.n	800b968 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	68fa      	ldr	r2, [r7, #12]
 800b95e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b962:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b966:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b968:	2300      	movs	r3, #0
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3714      	adds	r7, #20
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr

0800b976 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b976:	b480      	push	{r7}
 800b978:	b085      	sub	sp, #20
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b982:	2300      	movs	r3, #0
 800b984:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	0c5b      	lsrs	r3, r3, #17
 800b994:	f003 0303 	and.w	r3, r3, #3
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3714      	adds	r7, #20
 800b99c:	46bd      	mov	sp, r7
 800b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a2:	4770      	bx	lr

0800b9a4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b085      	sub	sp, #20
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	b29b      	uxth	r3, r3
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3714      	adds	r7, #20
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c4:	4770      	bx	lr
	...

0800b9c8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b087      	sub	sp, #28
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	4608      	mov	r0, r1
 800b9d2:	4611      	mov	r1, r2
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	70fb      	strb	r3, [r7, #3]
 800b9da:	460b      	mov	r3, r1
 800b9dc:	70bb      	strb	r3, [r7, #2]
 800b9de:	4613      	mov	r3, r2
 800b9e0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800b9ea:	78fb      	ldrb	r3, [r7, #3]
 800b9ec:	015a      	lsls	r2, r3, #5
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	4413      	add	r3, r2
 800b9f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b9fc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b9fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ba02:	2b03      	cmp	r3, #3
 800ba04:	d87e      	bhi.n	800bb04 <USB_HC_Init+0x13c>
 800ba06:	a201      	add	r2, pc, #4	; (adr r2, 800ba0c <USB_HC_Init+0x44>)
 800ba08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba0c:	0800ba1d 	.word	0x0800ba1d
 800ba10:	0800bac7 	.word	0x0800bac7
 800ba14:	0800ba1d 	.word	0x0800ba1d
 800ba18:	0800ba89 	.word	0x0800ba89
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ba1c:	78fb      	ldrb	r3, [r7, #3]
 800ba1e:	015a      	lsls	r2, r3, #5
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	4413      	add	r3, r2
 800ba24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba28:	461a      	mov	r2, r3
 800ba2a:	f240 439d 	movw	r3, #1181	; 0x49d
 800ba2e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800ba30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	da10      	bge.n	800ba5a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ba38:	78fb      	ldrb	r3, [r7, #3]
 800ba3a:	015a      	lsls	r2, r3, #5
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	4413      	add	r3, r2
 800ba40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba44:	68db      	ldr	r3, [r3, #12]
 800ba46:	78fa      	ldrb	r2, [r7, #3]
 800ba48:	0151      	lsls	r1, r2, #5
 800ba4a:	68ba      	ldr	r2, [r7, #8]
 800ba4c:	440a      	add	r2, r1
 800ba4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ba52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba56:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800ba58:	e057      	b.n	800bb0a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d051      	beq.n	800bb0a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800ba66:	78fb      	ldrb	r3, [r7, #3]
 800ba68:	015a      	lsls	r2, r3, #5
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	78fa      	ldrb	r2, [r7, #3]
 800ba76:	0151      	lsls	r1, r2, #5
 800ba78:	68ba      	ldr	r2, [r7, #8]
 800ba7a:	440a      	add	r2, r1
 800ba7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ba80:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ba84:	60d3      	str	r3, [r2, #12]
      break;
 800ba86:	e040      	b.n	800bb0a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ba88:	78fb      	ldrb	r3, [r7, #3]
 800ba8a:	015a      	lsls	r2, r3, #5
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	4413      	add	r3, r2
 800ba90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba94:	461a      	mov	r2, r3
 800ba96:	f240 639d 	movw	r3, #1693	; 0x69d
 800ba9a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ba9c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	da34      	bge.n	800bb0e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800baa4:	78fb      	ldrb	r3, [r7, #3]
 800baa6:	015a      	lsls	r2, r3, #5
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	4413      	add	r3, r2
 800baac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bab0:	68db      	ldr	r3, [r3, #12]
 800bab2:	78fa      	ldrb	r2, [r7, #3]
 800bab4:	0151      	lsls	r1, r2, #5
 800bab6:	68ba      	ldr	r2, [r7, #8]
 800bab8:	440a      	add	r2, r1
 800baba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800babe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bac2:	60d3      	str	r3, [r2, #12]
      }

      break;
 800bac4:	e023      	b.n	800bb0e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bac6:	78fb      	ldrb	r3, [r7, #3]
 800bac8:	015a      	lsls	r2, r3, #5
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	4413      	add	r3, r2
 800bace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bad2:	461a      	mov	r2, r3
 800bad4:	f240 2325 	movw	r3, #549	; 0x225
 800bad8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800bada:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	da17      	bge.n	800bb12 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800bae2:	78fb      	ldrb	r3, [r7, #3]
 800bae4:	015a      	lsls	r2, r3, #5
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	4413      	add	r3, r2
 800baea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800baee:	68db      	ldr	r3, [r3, #12]
 800baf0:	78fa      	ldrb	r2, [r7, #3]
 800baf2:	0151      	lsls	r1, r2, #5
 800baf4:	68ba      	ldr	r2, [r7, #8]
 800baf6:	440a      	add	r2, r1
 800baf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bafc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800bb00:	60d3      	str	r3, [r2, #12]
      }
      break;
 800bb02:	e006      	b.n	800bb12 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800bb04:	2301      	movs	r3, #1
 800bb06:	75fb      	strb	r3, [r7, #23]
      break;
 800bb08:	e004      	b.n	800bb14 <USB_HC_Init+0x14c>
      break;
 800bb0a:	bf00      	nop
 800bb0c:	e002      	b.n	800bb14 <USB_HC_Init+0x14c>
      break;
 800bb0e:	bf00      	nop
 800bb10:	e000      	b.n	800bb14 <USB_HC_Init+0x14c>
      break;
 800bb12:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb1a:	699a      	ldr	r2, [r3, #24]
 800bb1c:	78fb      	ldrb	r3, [r7, #3]
 800bb1e:	f003 030f 	and.w	r3, r3, #15
 800bb22:	2101      	movs	r1, #1
 800bb24:	fa01 f303 	lsl.w	r3, r1, r3
 800bb28:	68b9      	ldr	r1, [r7, #8]
 800bb2a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	699b      	ldr	r3, [r3, #24]
 800bb36:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800bb3e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	da03      	bge.n	800bb4e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800bb46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb4a:	613b      	str	r3, [r7, #16]
 800bb4c:	e001      	b.n	800bb52 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800bb52:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bb56:	2b02      	cmp	r3, #2
 800bb58:	d103      	bne.n	800bb62 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800bb5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bb5e:	60fb      	str	r3, [r7, #12]
 800bb60:	e001      	b.n	800bb66 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800bb62:	2300      	movs	r3, #0
 800bb64:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bb66:	787b      	ldrb	r3, [r7, #1]
 800bb68:	059b      	lsls	r3, r3, #22
 800bb6a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bb6e:	78bb      	ldrb	r3, [r7, #2]
 800bb70:	02db      	lsls	r3, r3, #11
 800bb72:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bb76:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800bb78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bb7c:	049b      	lsls	r3, r3, #18
 800bb7e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bb82:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bb84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bb86:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800bb8a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bb90:	78fb      	ldrb	r3, [r7, #3]
 800bb92:	0159      	lsls	r1, r3, #5
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	440b      	add	r3, r1
 800bb98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb9c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bba2:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800bba4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bba8:	2b03      	cmp	r3, #3
 800bbaa:	d10f      	bne.n	800bbcc <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800bbac:	78fb      	ldrb	r3, [r7, #3]
 800bbae:	015a      	lsls	r2, r3, #5
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	4413      	add	r3, r2
 800bbb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	78fa      	ldrb	r2, [r7, #3]
 800bbbc:	0151      	lsls	r1, r2, #5
 800bbbe:	68ba      	ldr	r2, [r7, #8]
 800bbc0:	440a      	add	r2, r1
 800bbc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bbc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bbca:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800bbcc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	371c      	adds	r7, #28
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr
 800bbda:	bf00      	nop

0800bbdc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b08c      	sub	sp, #48	; 0x30
 800bbe0:	af02      	add	r7, sp, #8
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	4613      	mov	r3, r2
 800bbe8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	785b      	ldrb	r3, [r3, #1]
 800bbf2:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800bbf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bbf8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d028      	beq.n	800bc58 <USB_HC_StartXfer+0x7c>
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	791b      	ldrb	r3, [r3, #4]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d124      	bne.n	800bc58 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800bc0e:	79fb      	ldrb	r3, [r7, #7]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d10b      	bne.n	800bc2c <USB_HC_StartXfer+0x50>
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	795b      	ldrb	r3, [r3, #5]
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d107      	bne.n	800bc2c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	785b      	ldrb	r3, [r3, #1]
 800bc20:	4619      	mov	r1, r3
 800bc22:	68f8      	ldr	r0, [r7, #12]
 800bc24:	f000 fa30 	bl	800c088 <USB_DoPing>
      return HAL_OK;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	e114      	b.n	800be56 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800bc2c:	79fb      	ldrb	r3, [r7, #7]
 800bc2e:	2b01      	cmp	r3, #1
 800bc30:	d112      	bne.n	800bc58 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800bc32:	69fb      	ldr	r3, [r7, #28]
 800bc34:	015a      	lsls	r2, r3, #5
 800bc36:	6a3b      	ldr	r3, [r7, #32]
 800bc38:	4413      	add	r3, r2
 800bc3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc3e:	68db      	ldr	r3, [r3, #12]
 800bc40:	69fa      	ldr	r2, [r7, #28]
 800bc42:	0151      	lsls	r1, r2, #5
 800bc44:	6a3a      	ldr	r2, [r7, #32]
 800bc46:	440a      	add	r2, r1
 800bc48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc4c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800bc50:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	2200      	movs	r2, #0
 800bc56:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	691b      	ldr	r3, [r3, #16]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d018      	beq.n	800bc92 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	691b      	ldr	r3, [r3, #16]
 800bc64:	68ba      	ldr	r2, [r7, #8]
 800bc66:	8912      	ldrh	r2, [r2, #8]
 800bc68:	4413      	add	r3, r2
 800bc6a:	3b01      	subs	r3, #1
 800bc6c:	68ba      	ldr	r2, [r7, #8]
 800bc6e:	8912      	ldrh	r2, [r2, #8]
 800bc70:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc74:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800bc76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bc78:	8b7b      	ldrh	r3, [r7, #26]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d90b      	bls.n	800bc96 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800bc7e:	8b7b      	ldrh	r3, [r7, #26]
 800bc80:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800bc82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bc84:	68ba      	ldr	r2, [r7, #8]
 800bc86:	8912      	ldrh	r2, [r2, #8]
 800bc88:	fb02 f203 	mul.w	r2, r2, r3
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	611a      	str	r2, [r3, #16]
 800bc90:	e001      	b.n	800bc96 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800bc92:	2301      	movs	r3, #1
 800bc94:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	78db      	ldrb	r3, [r3, #3]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d006      	beq.n	800bcac <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800bc9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bca0:	68ba      	ldr	r2, [r7, #8]
 800bca2:	8912      	ldrh	r2, [r2, #8]
 800bca4:	fb02 f203 	mul.w	r2, r2, r3
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	691b      	ldr	r3, [r3, #16]
 800bcb0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bcb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bcb6:	04d9      	lsls	r1, r3, #19
 800bcb8:	4b69      	ldr	r3, [pc, #420]	; (800be60 <USB_HC_StartXfer+0x284>)
 800bcba:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bcbc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	7a9b      	ldrb	r3, [r3, #10]
 800bcc2:	075b      	lsls	r3, r3, #29
 800bcc4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bcc8:	69f9      	ldr	r1, [r7, #28]
 800bcca:	0148      	lsls	r0, r1, #5
 800bccc:	6a39      	ldr	r1, [r7, #32]
 800bcce:	4401      	add	r1, r0
 800bcd0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bcd4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bcd6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800bcd8:	79fb      	ldrb	r3, [r7, #7]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d009      	beq.n	800bcf2 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	68d9      	ldr	r1, [r3, #12]
 800bce2:	69fb      	ldr	r3, [r7, #28]
 800bce4:	015a      	lsls	r2, r3, #5
 800bce6:	6a3b      	ldr	r3, [r7, #32]
 800bce8:	4413      	add	r3, r2
 800bcea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcee:	460a      	mov	r2, r1
 800bcf0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800bcf2:	6a3b      	ldr	r3, [r7, #32]
 800bcf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bcf8:	689b      	ldr	r3, [r3, #8]
 800bcfa:	f003 0301 	and.w	r3, r3, #1
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	bf0c      	ite	eq
 800bd02:	2301      	moveq	r3, #1
 800bd04:	2300      	movne	r3, #0
 800bd06:	b2db      	uxtb	r3, r3
 800bd08:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800bd0a:	69fb      	ldr	r3, [r7, #28]
 800bd0c:	015a      	lsls	r2, r3, #5
 800bd0e:	6a3b      	ldr	r3, [r7, #32]
 800bd10:	4413      	add	r3, r2
 800bd12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	69fa      	ldr	r2, [r7, #28]
 800bd1a:	0151      	lsls	r1, r2, #5
 800bd1c:	6a3a      	ldr	r2, [r7, #32]
 800bd1e:	440a      	add	r2, r1
 800bd20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bd24:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bd28:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800bd2a:	69fb      	ldr	r3, [r7, #28]
 800bd2c:	015a      	lsls	r2, r3, #5
 800bd2e:	6a3b      	ldr	r3, [r7, #32]
 800bd30:	4413      	add	r3, r2
 800bd32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	7e7b      	ldrb	r3, [r7, #25]
 800bd3a:	075b      	lsls	r3, r3, #29
 800bd3c:	69f9      	ldr	r1, [r7, #28]
 800bd3e:	0148      	lsls	r0, r1, #5
 800bd40:	6a39      	ldr	r1, [r7, #32]
 800bd42:	4401      	add	r1, r0
 800bd44:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800bd4c:	69fb      	ldr	r3, [r7, #28]
 800bd4e:	015a      	lsls	r2, r3, #5
 800bd50:	6a3b      	ldr	r3, [r7, #32]
 800bd52:	4413      	add	r3, r2
 800bd54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4a42      	ldr	r2, [pc, #264]	; (800be64 <USB_HC_StartXfer+0x288>)
 800bd5c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bd5e:	4b41      	ldr	r3, [pc, #260]	; (800be64 <USB_HC_StartXfer+0x288>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bd66:	4a3f      	ldr	r2, [pc, #252]	; (800be64 <USB_HC_StartXfer+0x288>)
 800bd68:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	78db      	ldrb	r3, [r3, #3]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d006      	beq.n	800bd80 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800bd72:	4b3c      	ldr	r3, [pc, #240]	; (800be64 <USB_HC_StartXfer+0x288>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd7a:	4a3a      	ldr	r2, [pc, #232]	; (800be64 <USB_HC_StartXfer+0x288>)
 800bd7c:	6013      	str	r3, [r2, #0]
 800bd7e:	e005      	b.n	800bd8c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800bd80:	4b38      	ldr	r3, [pc, #224]	; (800be64 <USB_HC_StartXfer+0x288>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bd88:	4a36      	ldr	r2, [pc, #216]	; (800be64 <USB_HC_StartXfer+0x288>)
 800bd8a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800bd8c:	4b35      	ldr	r3, [pc, #212]	; (800be64 <USB_HC_StartXfer+0x288>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bd94:	4a33      	ldr	r2, [pc, #204]	; (800be64 <USB_HC_StartXfer+0x288>)
 800bd96:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	015a      	lsls	r2, r3, #5
 800bd9c:	6a3b      	ldr	r3, [r7, #32]
 800bd9e:	4413      	add	r3, r2
 800bda0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bda4:	461a      	mov	r2, r3
 800bda6:	4b2f      	ldr	r3, [pc, #188]	; (800be64 <USB_HC_StartXfer+0x288>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800bdac:	79fb      	ldrb	r3, [r7, #7]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d001      	beq.n	800bdb6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	e04f      	b.n	800be56 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	78db      	ldrb	r3, [r3, #3]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d14a      	bne.n	800be54 <USB_HC_StartXfer+0x278>
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	691b      	ldr	r3, [r3, #16]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d046      	beq.n	800be54 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	79db      	ldrb	r3, [r3, #7]
 800bdca:	2b03      	cmp	r3, #3
 800bdcc:	d830      	bhi.n	800be30 <USB_HC_StartXfer+0x254>
 800bdce:	a201      	add	r2, pc, #4	; (adr r2, 800bdd4 <USB_HC_StartXfer+0x1f8>)
 800bdd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd4:	0800bde5 	.word	0x0800bde5
 800bdd8:	0800be09 	.word	0x0800be09
 800bddc:	0800bde5 	.word	0x0800bde5
 800bde0:	0800be09 	.word	0x0800be09
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	691b      	ldr	r3, [r3, #16]
 800bde8:	3303      	adds	r3, #3
 800bdea:	089b      	lsrs	r3, r3, #2
 800bdec:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800bdee:	8afa      	ldrh	r2, [r7, #22]
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf4:	b29b      	uxth	r3, r3
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d91c      	bls.n	800be34 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	699b      	ldr	r3, [r3, #24]
 800bdfe:	f043 0220 	orr.w	r2, r3, #32
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	619a      	str	r2, [r3, #24]
        }
        break;
 800be06:	e015      	b.n	800be34 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	691b      	ldr	r3, [r3, #16]
 800be0c:	3303      	adds	r3, #3
 800be0e:	089b      	lsrs	r3, r3, #2
 800be10:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800be12:	8afa      	ldrh	r2, [r7, #22]
 800be14:	6a3b      	ldr	r3, [r7, #32]
 800be16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be1a:	691b      	ldr	r3, [r3, #16]
 800be1c:	b29b      	uxth	r3, r3
 800be1e:	429a      	cmp	r2, r3
 800be20:	d90a      	bls.n	800be38 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	699b      	ldr	r3, [r3, #24]
 800be26:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	619a      	str	r2, [r3, #24]
        }
        break;
 800be2e:	e003      	b.n	800be38 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800be30:	bf00      	nop
 800be32:	e002      	b.n	800be3a <USB_HC_StartXfer+0x25e>
        break;
 800be34:	bf00      	nop
 800be36:	e000      	b.n	800be3a <USB_HC_StartXfer+0x25e>
        break;
 800be38:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	68d9      	ldr	r1, [r3, #12]
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	785a      	ldrb	r2, [r3, #1]
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	691b      	ldr	r3, [r3, #16]
 800be46:	b298      	uxth	r0, r3
 800be48:	2300      	movs	r3, #0
 800be4a:	9300      	str	r3, [sp, #0]
 800be4c:	4603      	mov	r3, r0
 800be4e:	68f8      	ldr	r0, [r7, #12]
 800be50:	f7ff fb8a 	bl	800b568 <USB_WritePacket>
  }

  return HAL_OK;
 800be54:	2300      	movs	r3, #0
}
 800be56:	4618      	mov	r0, r3
 800be58:	3728      	adds	r7, #40	; 0x28
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
 800be5e:	bf00      	nop
 800be60:	1ff80000 	.word	0x1ff80000
 800be64:	20000230 	.word	0x20000230

0800be68 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800be68:	b480      	push	{r7}
 800be6a:	b085      	sub	sp, #20
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be7a:	695b      	ldr	r3, [r3, #20]
 800be7c:	b29b      	uxth	r3, r3
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3714      	adds	r7, #20
 800be82:	46bd      	mov	sp, r7
 800be84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be88:	4770      	bx	lr

0800be8a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800be8a:	b480      	push	{r7}
 800be8c:	b087      	sub	sp, #28
 800be8e:	af00      	add	r7, sp, #0
 800be90:	6078      	str	r0, [r7, #4]
 800be92:	460b      	mov	r3, r1
 800be94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800be9a:	78fb      	ldrb	r3, [r7, #3]
 800be9c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800be9e:	2300      	movs	r3, #0
 800bea0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	015a      	lsls	r2, r3, #5
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	4413      	add	r3, r2
 800beaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	0c9b      	lsrs	r3, r3, #18
 800beb2:	f003 0303 	and.w	r3, r3, #3
 800beb6:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d002      	beq.n	800bec4 <USB_HC_Halt+0x3a>
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	2b02      	cmp	r3, #2
 800bec2:	d16c      	bne.n	800bf9e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	015a      	lsls	r2, r3, #5
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	4413      	add	r3, r2
 800becc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	68fa      	ldr	r2, [r7, #12]
 800bed4:	0151      	lsls	r1, r2, #5
 800bed6:	693a      	ldr	r2, [r7, #16]
 800bed8:	440a      	add	r2, r1
 800beda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bede:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bee2:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800beec:	2b00      	cmp	r3, #0
 800beee:	d143      	bne.n	800bf78 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	015a      	lsls	r2, r3, #5
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	4413      	add	r3, r2
 800bef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	68fa      	ldr	r2, [r7, #12]
 800bf00:	0151      	lsls	r1, r2, #5
 800bf02:	693a      	ldr	r2, [r7, #16]
 800bf04:	440a      	add	r2, r1
 800bf06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bf0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf0e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	015a      	lsls	r2, r3, #5
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	4413      	add	r3, r2
 800bf18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	68fa      	ldr	r2, [r7, #12]
 800bf20:	0151      	lsls	r1, r2, #5
 800bf22:	693a      	ldr	r2, [r7, #16]
 800bf24:	440a      	add	r2, r1
 800bf26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bf2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bf2e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	015a      	lsls	r2, r3, #5
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	4413      	add	r3, r2
 800bf38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	68fa      	ldr	r2, [r7, #12]
 800bf40:	0151      	lsls	r1, r2, #5
 800bf42:	693a      	ldr	r2, [r7, #16]
 800bf44:	440a      	add	r2, r1
 800bf46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bf4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bf4e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	3301      	adds	r3, #1
 800bf54:	617b      	str	r3, [r7, #20]
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bf5c:	d81d      	bhi.n	800bf9a <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	015a      	lsls	r2, r3, #5
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	4413      	add	r3, r2
 800bf66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf74:	d0ec      	beq.n	800bf50 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bf76:	e080      	b.n	800c07a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	015a      	lsls	r2, r3, #5
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	4413      	add	r3, r2
 800bf80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	68fa      	ldr	r2, [r7, #12]
 800bf88:	0151      	lsls	r1, r2, #5
 800bf8a:	693a      	ldr	r2, [r7, #16]
 800bf8c:	440a      	add	r2, r1
 800bf8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bf92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bf96:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bf98:	e06f      	b.n	800c07a <USB_HC_Halt+0x1f0>
          break;
 800bf9a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bf9c:	e06d      	b.n	800c07a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	015a      	lsls	r2, r3, #5
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	4413      	add	r3, r2
 800bfa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	0151      	lsls	r1, r2, #5
 800bfb0:	693a      	ldr	r2, [r7, #16]
 800bfb2:	440a      	add	r2, r1
 800bfb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bfb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bfbc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bfc4:	691b      	ldr	r3, [r3, #16]
 800bfc6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d143      	bne.n	800c056 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	015a      	lsls	r2, r3, #5
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	4413      	add	r3, r2
 800bfd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	68fa      	ldr	r2, [r7, #12]
 800bfde:	0151      	lsls	r1, r2, #5
 800bfe0:	693a      	ldr	r2, [r7, #16]
 800bfe2:	440a      	add	r2, r1
 800bfe4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bfe8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bfec:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	015a      	lsls	r2, r3, #5
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	4413      	add	r3, r2
 800bff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	68fa      	ldr	r2, [r7, #12]
 800bffe:	0151      	lsls	r1, r2, #5
 800c000:	693a      	ldr	r2, [r7, #16]
 800c002:	440a      	add	r2, r1
 800c004:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c008:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c00c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	015a      	lsls	r2, r3, #5
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	4413      	add	r3, r2
 800c016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	68fa      	ldr	r2, [r7, #12]
 800c01e:	0151      	lsls	r1, r2, #5
 800c020:	693a      	ldr	r2, [r7, #16]
 800c022:	440a      	add	r2, r1
 800c024:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c028:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c02c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	3301      	adds	r3, #1
 800c032:	617b      	str	r3, [r7, #20]
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c03a:	d81d      	bhi.n	800c078 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	015a      	lsls	r2, r3, #5
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	4413      	add	r3, r2
 800c044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c04e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c052:	d0ec      	beq.n	800c02e <USB_HC_Halt+0x1a4>
 800c054:	e011      	b.n	800c07a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	015a      	lsls	r2, r3, #5
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	4413      	add	r3, r2
 800c05e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	68fa      	ldr	r2, [r7, #12]
 800c066:	0151      	lsls	r1, r2, #5
 800c068:	693a      	ldr	r2, [r7, #16]
 800c06a:	440a      	add	r2, r1
 800c06c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c070:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c074:	6013      	str	r3, [r2, #0]
 800c076:	e000      	b.n	800c07a <USB_HC_Halt+0x1f0>
          break;
 800c078:	bf00      	nop
    }
  }

  return HAL_OK;
 800c07a:	2300      	movs	r3, #0
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	371c      	adds	r7, #28
 800c080:	46bd      	mov	sp, r7
 800c082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c086:	4770      	bx	lr

0800c088 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c088:	b480      	push	{r7}
 800c08a:	b087      	sub	sp, #28
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	460b      	mov	r3, r1
 800c092:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c098:	78fb      	ldrb	r3, [r7, #3]
 800c09a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c09c:	2301      	movs	r3, #1
 800c09e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	04da      	lsls	r2, r3, #19
 800c0a4:	4b15      	ldr	r3, [pc, #84]	; (800c0fc <USB_DoPing+0x74>)
 800c0a6:	4013      	ands	r3, r2
 800c0a8:	693a      	ldr	r2, [r7, #16]
 800c0aa:	0151      	lsls	r1, r2, #5
 800c0ac:	697a      	ldr	r2, [r7, #20]
 800c0ae:	440a      	add	r2, r1
 800c0b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c0b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c0b8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	015a      	lsls	r2, r3, #5
 800c0be:	697b      	ldr	r3, [r7, #20]
 800c0c0:	4413      	add	r3, r2
 800c0c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c0d0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c0d8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	015a      	lsls	r2, r3, #5
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	4413      	add	r3, r2
 800c0e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c0ec:	2300      	movs	r3, #0
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	371c      	adds	r7, #28
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f8:	4770      	bx	lr
 800c0fa:	bf00      	nop
 800c0fc:	1ff80000 	.word	0x1ff80000

0800c100 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b086      	sub	sp, #24
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c10c:	2300      	movs	r3, #0
 800c10e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f7ff f9a5 	bl	800b460 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800c116:	2110      	movs	r1, #16
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f7ff f9dd 	bl	800b4d8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f7ff fa00 	bl	800b524 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c124:	2300      	movs	r3, #0
 800c126:	613b      	str	r3, [r7, #16]
 800c128:	e01f      	b.n	800c16a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	015a      	lsls	r2, r3, #5
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	4413      	add	r3, r2
 800c132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c140:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c148:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c150:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	015a      	lsls	r2, r3, #5
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	4413      	add	r3, r2
 800c15a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c15e:	461a      	mov	r2, r3
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	3301      	adds	r3, #1
 800c168:	613b      	str	r3, [r7, #16]
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	2b0f      	cmp	r3, #15
 800c16e:	d9dc      	bls.n	800c12a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c170:	2300      	movs	r3, #0
 800c172:	613b      	str	r3, [r7, #16]
 800c174:	e034      	b.n	800c1e0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	015a      	lsls	r2, r3, #5
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	4413      	add	r3, r2
 800c17e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c18c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c194:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c19c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	015a      	lsls	r2, r3, #5
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	4413      	add	r3, r2
 800c1a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	617b      	str	r3, [r7, #20]
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c1bc:	d80c      	bhi.n	800c1d8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	015a      	lsls	r2, r3, #5
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1d4:	d0ec      	beq.n	800c1b0 <USB_StopHost+0xb0>
 800c1d6:	e000      	b.n	800c1da <USB_StopHost+0xda>
        break;
 800c1d8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	3301      	adds	r3, #1
 800c1de:	613b      	str	r3, [r7, #16]
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	2b0f      	cmp	r3, #15
 800c1e4:	d9c7      	bls.n	800c176 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c1f2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f04f 32ff 	mov.w	r2, #4294967295
 800c1fa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f7ff f91e 	bl	800b43e <USB_EnableGlobalInt>

  return HAL_OK;
 800c202:	2300      	movs	r3, #0
}
 800c204:	4618      	mov	r0, r3
 800c206:	3718      	adds	r7, #24
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800c20c:	b590      	push	{r4, r7, lr}
 800c20e:	b089      	sub	sp, #36	; 0x24
 800c210:	af04      	add	r7, sp, #16
 800c212:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800c214:	2301      	movs	r3, #1
 800c216:	2202      	movs	r2, #2
 800c218:	2102      	movs	r1, #2
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 fcb4 	bl	800cb88 <USBH_FindInterface>
 800c220:	4603      	mov	r3, r0
 800c222:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c224:	7bfb      	ldrb	r3, [r7, #15]
 800c226:	2bff      	cmp	r3, #255	; 0xff
 800c228:	d002      	beq.n	800c230 <USBH_CDC_InterfaceInit+0x24>
 800c22a:	7bfb      	ldrb	r3, [r7, #15]
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	d901      	bls.n	800c234 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c230:	2302      	movs	r3, #2
 800c232:	e13d      	b.n	800c4b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800c234:	7bfb      	ldrb	r3, [r7, #15]
 800c236:	4619      	mov	r1, r3
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 fc89 	bl	800cb50 <USBH_SelectInterface>
 800c23e:	4603      	mov	r3, r0
 800c240:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800c242:	7bbb      	ldrb	r3, [r7, #14]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d001      	beq.n	800c24c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800c248:	2302      	movs	r3, #2
 800c24a:	e131      	b.n	800c4b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800c252:	2050      	movs	r0, #80	; 0x50
 800c254:	f007 ff9e 	bl	8014194 <malloc>
 800c258:	4603      	mov	r3, r0
 800c25a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c262:	69db      	ldr	r3, [r3, #28]
 800c264:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d101      	bne.n	800c270 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800c26c:	2302      	movs	r3, #2
 800c26e:	e11f      	b.n	800c4b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800c270:	2250      	movs	r2, #80	; 0x50
 800c272:	2100      	movs	r1, #0
 800c274:	68b8      	ldr	r0, [r7, #8]
 800c276:	f007 ffa8 	bl	80141ca <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c27a:	7bfb      	ldrb	r3, [r7, #15]
 800c27c:	687a      	ldr	r2, [r7, #4]
 800c27e:	211a      	movs	r1, #26
 800c280:	fb01 f303 	mul.w	r3, r1, r3
 800c284:	4413      	add	r3, r2
 800c286:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	b25b      	sxtb	r3, r3
 800c28e:	2b00      	cmp	r3, #0
 800c290:	da15      	bge.n	800c2be <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c292:	7bfb      	ldrb	r3, [r7, #15]
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	211a      	movs	r1, #26
 800c298:	fb01 f303 	mul.w	r3, r1, r3
 800c29c:	4413      	add	r3, r2
 800c29e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c2a2:	781a      	ldrb	r2, [r3, #0]
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c2a8:	7bfb      	ldrb	r3, [r7, #15]
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	211a      	movs	r1, #26
 800c2ae:	fb01 f303 	mul.w	r3, r1, r3
 800c2b2:	4413      	add	r3, r2
 800c2b4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c2b8:	881a      	ldrh	r2, [r3, #0]
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	785b      	ldrb	r3, [r3, #1]
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f002 f890 	bl	800e3ea <USBH_AllocPipe>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	461a      	mov	r2, r3
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	7819      	ldrb	r1, [r3, #0]
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	7858      	ldrb	r0, [r3, #1]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c2e6:	68ba      	ldr	r2, [r7, #8]
 800c2e8:	8952      	ldrh	r2, [r2, #10]
 800c2ea:	9202      	str	r2, [sp, #8]
 800c2ec:	2203      	movs	r2, #3
 800c2ee:	9201      	str	r2, [sp, #4]
 800c2f0:	9300      	str	r3, [sp, #0]
 800c2f2:	4623      	mov	r3, r4
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f002 f848 	bl	800e38c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	2200      	movs	r2, #0
 800c302:	4619      	mov	r1, r3
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f007 fe95 	bl	8014034 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800c30a:	2300      	movs	r3, #0
 800c30c:	2200      	movs	r2, #0
 800c30e:	210a      	movs	r1, #10
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 fc39 	bl	800cb88 <USBH_FindInterface>
 800c316:	4603      	mov	r3, r0
 800c318:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c31a:	7bfb      	ldrb	r3, [r7, #15]
 800c31c:	2bff      	cmp	r3, #255	; 0xff
 800c31e:	d002      	beq.n	800c326 <USBH_CDC_InterfaceInit+0x11a>
 800c320:	7bfb      	ldrb	r3, [r7, #15]
 800c322:	2b01      	cmp	r3, #1
 800c324:	d901      	bls.n	800c32a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c326:	2302      	movs	r3, #2
 800c328:	e0c2      	b.n	800c4b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c32a:	7bfb      	ldrb	r3, [r7, #15]
 800c32c:	687a      	ldr	r2, [r7, #4]
 800c32e:	211a      	movs	r1, #26
 800c330:	fb01 f303 	mul.w	r3, r1, r3
 800c334:	4413      	add	r3, r2
 800c336:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	b25b      	sxtb	r3, r3
 800c33e:	2b00      	cmp	r3, #0
 800c340:	da16      	bge.n	800c370 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c342:	7bfb      	ldrb	r3, [r7, #15]
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	211a      	movs	r1, #26
 800c348:	fb01 f303 	mul.w	r3, r1, r3
 800c34c:	4413      	add	r3, r2
 800c34e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c352:	781a      	ldrb	r2, [r3, #0]
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c358:	7bfb      	ldrb	r3, [r7, #15]
 800c35a:	687a      	ldr	r2, [r7, #4]
 800c35c:	211a      	movs	r1, #26
 800c35e:	fb01 f303 	mul.w	r3, r1, r3
 800c362:	4413      	add	r3, r2
 800c364:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c368:	881a      	ldrh	r2, [r3, #0]
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	835a      	strh	r2, [r3, #26]
 800c36e:	e015      	b.n	800c39c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c370:	7bfb      	ldrb	r3, [r7, #15]
 800c372:	687a      	ldr	r2, [r7, #4]
 800c374:	211a      	movs	r1, #26
 800c376:	fb01 f303 	mul.w	r3, r1, r3
 800c37a:	4413      	add	r3, r2
 800c37c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c380:	781a      	ldrb	r2, [r3, #0]
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c386:	7bfb      	ldrb	r3, [r7, #15]
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	211a      	movs	r1, #26
 800c38c:	fb01 f303 	mul.w	r3, r1, r3
 800c390:	4413      	add	r3, r2
 800c392:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c396:	881a      	ldrh	r2, [r3, #0]
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800c39c:	7bfb      	ldrb	r3, [r7, #15]
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	211a      	movs	r1, #26
 800c3a2:	fb01 f303 	mul.w	r3, r1, r3
 800c3a6:	4413      	add	r3, r2
 800c3a8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	b25b      	sxtb	r3, r3
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	da16      	bge.n	800c3e2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c3b4:	7bfb      	ldrb	r3, [r7, #15]
 800c3b6:	687a      	ldr	r2, [r7, #4]
 800c3b8:	211a      	movs	r1, #26
 800c3ba:	fb01 f303 	mul.w	r3, r1, r3
 800c3be:	4413      	add	r3, r2
 800c3c0:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c3c4:	781a      	ldrb	r2, [r3, #0]
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c3ca:	7bfb      	ldrb	r3, [r7, #15]
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	211a      	movs	r1, #26
 800c3d0:	fb01 f303 	mul.w	r3, r1, r3
 800c3d4:	4413      	add	r3, r2
 800c3d6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800c3da:	881a      	ldrh	r2, [r3, #0]
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	835a      	strh	r2, [r3, #26]
 800c3e0:	e015      	b.n	800c40e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c3e2:	7bfb      	ldrb	r3, [r7, #15]
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	211a      	movs	r1, #26
 800c3e8:	fb01 f303 	mul.w	r3, r1, r3
 800c3ec:	4413      	add	r3, r2
 800c3ee:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c3f2:	781a      	ldrb	r2, [r3, #0]
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c3f8:	7bfb      	ldrb	r3, [r7, #15]
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	211a      	movs	r1, #26
 800c3fe:	fb01 f303 	mul.w	r3, r1, r3
 800c402:	4413      	add	r3, r2
 800c404:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800c408:	881a      	ldrh	r2, [r3, #0]
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	7b9b      	ldrb	r3, [r3, #14]
 800c412:	4619      	mov	r1, r3
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f001 ffe8 	bl	800e3ea <USBH_AllocPipe>
 800c41a:	4603      	mov	r3, r0
 800c41c:	461a      	mov	r2, r3
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	7bdb      	ldrb	r3, [r3, #15]
 800c426:	4619      	mov	r1, r3
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f001 ffde 	bl	800e3ea <USBH_AllocPipe>
 800c42e:	4603      	mov	r3, r0
 800c430:	461a      	mov	r2, r3
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	7b59      	ldrb	r1, [r3, #13]
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	7b98      	ldrb	r0, [r3, #14]
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c44a:	68ba      	ldr	r2, [r7, #8]
 800c44c:	8b12      	ldrh	r2, [r2, #24]
 800c44e:	9202      	str	r2, [sp, #8]
 800c450:	2202      	movs	r2, #2
 800c452:	9201      	str	r2, [sp, #4]
 800c454:	9300      	str	r3, [sp, #0]
 800c456:	4623      	mov	r3, r4
 800c458:	4602      	mov	r2, r0
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f001 ff96 	bl	800e38c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	7b19      	ldrb	r1, [r3, #12]
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	7bd8      	ldrb	r0, [r3, #15]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c474:	68ba      	ldr	r2, [r7, #8]
 800c476:	8b52      	ldrh	r2, [r2, #26]
 800c478:	9202      	str	r2, [sp, #8]
 800c47a:	2202      	movs	r2, #2
 800c47c:	9201      	str	r2, [sp, #4]
 800c47e:	9300      	str	r3, [sp, #0]
 800c480:	4623      	mov	r3, r4
 800c482:	4602      	mov	r2, r0
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f001 ff81 	bl	800e38c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	2200      	movs	r2, #0
 800c48e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	7b5b      	ldrb	r3, [r3, #13]
 800c496:	2200      	movs	r2, #0
 800c498:	4619      	mov	r1, r3
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f007 fdca 	bl	8014034 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	7b1b      	ldrb	r3, [r3, #12]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f007 fdc3 	bl	8014034 <USBH_LL_SetToggle>

  return USBH_OK;
 800c4ae:	2300      	movs	r3, #0
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3714      	adds	r7, #20
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd90      	pop	{r4, r7, pc}

0800c4b8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c4c6:	69db      	ldr	r3, [r3, #28]
 800c4c8:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d00e      	beq.n	800c4f0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f001 ff76 	bl	800e3ca <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f001 ffa1 	bl	800e42c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	7b1b      	ldrb	r3, [r3, #12]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d00e      	beq.n	800c516 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	7b1b      	ldrb	r3, [r3, #12]
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f001 ff63 	bl	800e3ca <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	7b1b      	ldrb	r3, [r3, #12]
 800c508:	4619      	mov	r1, r3
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f001 ff8e 	bl	800e42c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	2200      	movs	r2, #0
 800c514:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	7b5b      	ldrb	r3, [r3, #13]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d00e      	beq.n	800c53c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	7b5b      	ldrb	r3, [r3, #13]
 800c522:	4619      	mov	r1, r3
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f001 ff50 	bl	800e3ca <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	7b5b      	ldrb	r3, [r3, #13]
 800c52e:	4619      	mov	r1, r3
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f001 ff7b 	bl	800e42c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	2200      	movs	r2, #0
 800c53a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c542:	69db      	ldr	r3, [r3, #28]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d00b      	beq.n	800c560 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c54e:	69db      	ldr	r3, [r3, #28]
 800c550:	4618      	mov	r0, r3
 800c552:	f007 fe27 	bl	80141a4 <free>
    phost->pActiveClass->pData = 0U;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c55c:	2200      	movs	r2, #0
 800c55e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c560:	2300      	movs	r3, #0
}
 800c562:	4618      	mov	r0, r3
 800c564:	3710      	adds	r7, #16
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b084      	sub	sp, #16
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c578:	69db      	ldr	r3, [r3, #28]
 800c57a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	3340      	adds	r3, #64	; 0x40
 800c580:	4619      	mov	r1, r3
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f000 f8b1 	bl	800c6ea <GetLineCoding>
 800c588:	4603      	mov	r3, r0
 800c58a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800c58c:	7afb      	ldrb	r3, [r7, #11]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d105      	bne.n	800c59e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c598:	2102      	movs	r1, #2
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800c59e:	7afb      	ldrb	r3, [r7, #11]
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3710      	adds	r7, #16
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}

0800c5a8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b084      	sub	sp, #16
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c5be:	69db      	ldr	r3, [r3, #28]
 800c5c0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c5c8:	2b04      	cmp	r3, #4
 800c5ca:	d877      	bhi.n	800c6bc <USBH_CDC_Process+0x114>
 800c5cc:	a201      	add	r2, pc, #4	; (adr r2, 800c5d4 <USBH_CDC_Process+0x2c>)
 800c5ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5d2:	bf00      	nop
 800c5d4:	0800c5e9 	.word	0x0800c5e9
 800c5d8:	0800c5ef 	.word	0x0800c5ef
 800c5dc:	0800c61f 	.word	0x0800c61f
 800c5e0:	0800c693 	.word	0x0800c693
 800c5e4:	0800c6a1 	.word	0x0800c6a1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	73fb      	strb	r3, [r7, #15]
      break;
 800c5ec:	e06d      	b.n	800c6ca <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f000 f897 	bl	800c728 <SetLineCoding>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c5fe:	7bbb      	ldrb	r3, [r7, #14]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d104      	bne.n	800c60e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	2202      	movs	r2, #2
 800c608:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c60c:	e058      	b.n	800c6c0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800c60e:	7bbb      	ldrb	r3, [r7, #14]
 800c610:	2b01      	cmp	r3, #1
 800c612:	d055      	beq.n	800c6c0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	2204      	movs	r2, #4
 800c618:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c61c:	e050      	b.n	800c6c0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	3340      	adds	r3, #64	; 0x40
 800c622:	4619      	mov	r1, r3
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f000 f860 	bl	800c6ea <GetLineCoding>
 800c62a:	4603      	mov	r3, r0
 800c62c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c62e:	7bbb      	ldrb	r3, [r7, #14]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d126      	bne.n	800c682 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	2200      	movs	r2, #0
 800c638:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c646:	791b      	ldrb	r3, [r3, #4]
 800c648:	429a      	cmp	r2, r3
 800c64a:	d13b      	bne.n	800c6c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c656:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c658:	429a      	cmp	r2, r3
 800c65a:	d133      	bne.n	800c6c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c666:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c668:	429a      	cmp	r2, r3
 800c66a:	d12b      	bne.n	800c6c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c674:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c676:	429a      	cmp	r2, r3
 800c678:	d124      	bne.n	800c6c4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f000 f984 	bl	800c988 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c680:	e020      	b.n	800c6c4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800c682:	7bbb      	ldrb	r3, [r7, #14]
 800c684:	2b01      	cmp	r3, #1
 800c686:	d01d      	beq.n	800c6c4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	2204      	movs	r2, #4
 800c68c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c690:	e018      	b.n	800c6c4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f000 f867 	bl	800c766 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f000 f8f8 	bl	800c88e <CDC_ProcessReception>
      break;
 800c69e:	e014      	b.n	800c6ca <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f001 f94f 	bl	800d946 <USBH_ClrFeature>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c6ac:	7bbb      	ldrb	r3, [r7, #14]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d10a      	bne.n	800c6c8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800c6ba:	e005      	b.n	800c6c8 <USBH_CDC_Process+0x120>

    default:
      break;
 800c6bc:	bf00      	nop
 800c6be:	e004      	b.n	800c6ca <USBH_CDC_Process+0x122>
      break;
 800c6c0:	bf00      	nop
 800c6c2:	e002      	b.n	800c6ca <USBH_CDC_Process+0x122>
      break;
 800c6c4:	bf00      	nop
 800c6c6:	e000      	b.n	800c6ca <USBH_CDC_Process+0x122>
      break;
 800c6c8:	bf00      	nop

  }

  return status;
 800c6ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3710      	adds	r7, #16
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}

0800c6d4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b083      	sub	sp, #12
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c6dc:	2300      	movs	r3, #0
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	370c      	adds	r7, #12
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr

0800c6ea <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c6ea:	b580      	push	{r7, lr}
 800c6ec:	b082      	sub	sp, #8
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
 800c6f2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	22a1      	movs	r2, #161	; 0xa1
 800c6f8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2221      	movs	r2, #33	; 0x21
 800c6fe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2200      	movs	r2, #0
 800c704:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2200      	movs	r2, #0
 800c70a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2207      	movs	r2, #7
 800c710:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	2207      	movs	r2, #7
 800c716:	4619      	mov	r1, r3
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f001 faf4 	bl	800dd06 <USBH_CtlReq>
 800c71e:	4603      	mov	r3, r0
}
 800c720:	4618      	mov	r0, r3
 800c722:	3708      	adds	r7, #8
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b082      	sub	sp, #8
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2221      	movs	r2, #33	; 0x21
 800c736:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2220      	movs	r2, #32
 800c73c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2200      	movs	r2, #0
 800c742:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2200      	movs	r2, #0
 800c748:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2207      	movs	r2, #7
 800c74e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	2207      	movs	r2, #7
 800c754:	4619      	mov	r1, r3
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f001 fad5 	bl	800dd06 <USBH_CtlReq>
 800c75c:	4603      	mov	r3, r0
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3708      	adds	r7, #8
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}

0800c766 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800c766:	b580      	push	{r7, lr}
 800c768:	b086      	sub	sp, #24
 800c76a:	af02      	add	r7, sp, #8
 800c76c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c774:	69db      	ldr	r3, [r3, #28]
 800c776:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c778:	2300      	movs	r3, #0
 800c77a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800c782:	2b01      	cmp	r3, #1
 800c784:	d002      	beq.n	800c78c <CDC_ProcessTransmission+0x26>
 800c786:	2b02      	cmp	r3, #2
 800c788:	d025      	beq.n	800c7d6 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800c78a:	e07c      	b.n	800c886 <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c790:	68fa      	ldr	r2, [r7, #12]
 800c792:	8b12      	ldrh	r2, [r2, #24]
 800c794:	4293      	cmp	r3, r2
 800c796:	d90c      	bls.n	800c7b2 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	69d9      	ldr	r1, [r3, #28]
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	8b1a      	ldrh	r2, [r3, #24]
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	7b58      	ldrb	r0, [r3, #13]
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	9300      	str	r3, [sp, #0]
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f001 fdab 	bl	800e306 <USBH_BulkSendData>
 800c7b0:	e00c      	b.n	800c7cc <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800c7ba:	b29a      	uxth	r2, r3
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	7b58      	ldrb	r0, [r3, #13]
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	9300      	str	r3, [sp, #0]
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f001 fd9d 	bl	800e306 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2202      	movs	r2, #2
 800c7d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800c7d4:	e057      	b.n	800c886 <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	7b5b      	ldrb	r3, [r3, #13]
 800c7da:	4619      	mov	r1, r3
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f007 fbff 	bl	8013fe0 <USBH_LL_GetURBState>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800c7e6:	7afb      	ldrb	r3, [r7, #11]
 800c7e8:	2b01      	cmp	r3, #1
 800c7ea:	d136      	bne.n	800c85a <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f0:	68fa      	ldr	r2, [r7, #12]
 800c7f2:	8b12      	ldrh	r2, [r2, #24]
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d90e      	bls.n	800c816 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7fc:	68fa      	ldr	r2, [r7, #12]
 800c7fe:	8b12      	ldrh	r2, [r2, #24]
 800c800:	1a9a      	subs	r2, r3, r2
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	69db      	ldr	r3, [r3, #28]
 800c80a:	68fa      	ldr	r2, [r7, #12]
 800c80c:	8b12      	ldrh	r2, [r2, #24]
 800c80e:	441a      	add	r2, r3
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	61da      	str	r2, [r3, #28]
 800c814:	e002      	b.n	800c81c <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	2200      	movs	r2, #0
 800c81a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c820:	2b00      	cmp	r3, #0
 800c822:	d004      	beq.n	800c82e <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	2201      	movs	r2, #1
 800c828:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800c82c:	e006      	b.n	800c83c <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	2200      	movs	r2, #0
 800c832:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 f892 	bl	800c960 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2204      	movs	r2, #4
 800c840:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c850:	2300      	movs	r3, #0
 800c852:	2200      	movs	r2, #0
 800c854:	f004 fbce 	bl	8010ff4 <osMessageQueuePut>
      break;
 800c858:	e014      	b.n	800c884 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 800c85a:	7afb      	ldrb	r3, [r7, #11]
 800c85c:	2b02      	cmp	r3, #2
 800c85e:	d111      	bne.n	800c884 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2201      	movs	r2, #1
 800c864:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2204      	movs	r2, #4
 800c86c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c87c:	2300      	movs	r3, #0
 800c87e:	2200      	movs	r2, #0
 800c880:	f004 fbb8 	bl	8010ff4 <osMessageQueuePut>
      break;
 800c884:	bf00      	nop
  }
}
 800c886:	bf00      	nop
 800c888:	3710      	adds	r7, #16
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}

0800c88e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800c88e:	b580      	push	{r7, lr}
 800c890:	b086      	sub	sp, #24
 800c892:	af00      	add	r7, sp, #0
 800c894:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c89c:	69db      	ldr	r3, [r3, #28]
 800c89e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800c8aa:	2b03      	cmp	r3, #3
 800c8ac:	d002      	beq.n	800c8b4 <CDC_ProcessReception+0x26>
 800c8ae:	2b04      	cmp	r3, #4
 800c8b0:	d00e      	beq.n	800c8d0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800c8b2:	e051      	b.n	800c958 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	6a19      	ldr	r1, [r3, #32]
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	8b5a      	ldrh	r2, [r3, #26]
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	7b1b      	ldrb	r3, [r3, #12]
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f001 fd45 	bl	800e350 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	2204      	movs	r2, #4
 800c8ca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800c8ce:	e043      	b.n	800c958 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	7b1b      	ldrb	r3, [r3, #12]
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f007 fb82 	bl	8013fe0 <USBH_LL_GetURBState>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800c8e0:	7cfb      	ldrb	r3, [r7, #19]
 800c8e2:	2b01      	cmp	r3, #1
 800c8e4:	d137      	bne.n	800c956 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	7b1b      	ldrb	r3, [r3, #12]
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f007 fae5 	bl	8013ebc <USBH_LL_GetLastXferSize>
 800c8f2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8f8:	68fa      	ldr	r2, [r7, #12]
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d016      	beq.n	800c92c <CDC_ProcessReception+0x9e>
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	8b5b      	ldrh	r3, [r3, #26]
 800c902:	461a      	mov	r2, r3
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	4293      	cmp	r3, r2
 800c908:	d910      	bls.n	800c92c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	1ad2      	subs	r2, r2, r3
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	6a1a      	ldr	r2, [r3, #32]
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	441a      	add	r2, r3
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	2203      	movs	r2, #3
 800c926:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800c92a:	e006      	b.n	800c93a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	2200      	movs	r2, #0
 800c930:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f000 f81d 	bl	800c974 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2204      	movs	r2, #4
 800c93e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c94e:	2300      	movs	r3, #0
 800c950:	2200      	movs	r2, #0
 800c952:	f004 fb4f 	bl	8010ff4 <osMessageQueuePut>
      break;
 800c956:	bf00      	nop
  }
}
 800c958:	bf00      	nop
 800c95a:	3718      	adds	r7, #24
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}

0800c960 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800c960:	b480      	push	{r7}
 800c962:	b083      	sub	sp, #12
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c968:	bf00      	nop
 800c96a:	370c      	adds	r7, #12
 800c96c:	46bd      	mov	sp, r7
 800c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c972:	4770      	bx	lr

0800c974 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800c974:	b480      	push	{r7}
 800c976:	b083      	sub	sp, #12
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c97c:	bf00      	nop
 800c97e:	370c      	adds	r7, #12
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr

0800c988 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800c988:	b480      	push	{r7}
 800c98a:	b083      	sub	sp, #12
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c990:	bf00      	nop
 800c992:	370c      	adds	r7, #12
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr

0800c99c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b084      	sub	sp, #16
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	60f8      	str	r0, [r7, #12]
 800c9a4:	60b9      	str	r1, [r7, #8]
 800c9a6:	4613      	mov	r3, r2
 800c9a8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d101      	bne.n	800c9b4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c9b0:	2302      	movs	r3, #2
 800c9b2:	e044      	b.n	800ca3e <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	79fa      	ldrb	r2, [r7, #7]
 800c9b8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800c9cc:	68f8      	ldr	r0, [r7, #12]
 800c9ce:	f000 f841 	bl	800ca54 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d003      	beq.n	800ca00 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	68ba      	ldr	r2, [r7, #8]
 800c9fc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800ca00:	2200      	movs	r2, #0
 800ca02:	2104      	movs	r1, #4
 800ca04:	2010      	movs	r0, #16
 800ca06:	f004 fa6f 	bl	8010ee8 <osMessageQueueNew>
 800ca0a:	4602      	mov	r2, r0
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800ca12:	4b0d      	ldr	r3, [pc, #52]	; (800ca48 <USBH_Init+0xac>)
 800ca14:	4a0d      	ldr	r2, [pc, #52]	; (800ca4c <USBH_Init+0xb0>)
 800ca16:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800ca18:	4b0b      	ldr	r3, [pc, #44]	; (800ca48 <USBH_Init+0xac>)
 800ca1a:	2280      	movs	r2, #128	; 0x80
 800ca1c:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800ca1e:	4b0a      	ldr	r3, [pc, #40]	; (800ca48 <USBH_Init+0xac>)
 800ca20:	2218      	movs	r2, #24
 800ca22:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800ca24:	4a08      	ldr	r2, [pc, #32]	; (800ca48 <USBH_Init+0xac>)
 800ca26:	68f9      	ldr	r1, [r7, #12]
 800ca28:	4809      	ldr	r0, [pc, #36]	; (800ca50 <USBH_Init+0xb4>)
 800ca2a:	f004 f989 	bl	8010d40 <osThreadNew>
 800ca2e:	4602      	mov	r2, r0
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800ca36:	68f8      	ldr	r0, [r7, #12]
 800ca38:	f007 f98e 	bl	8013d58 <USBH_LL_Init>

  return USBH_OK;
 800ca3c:	2300      	movs	r3, #0
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3710      	adds	r7, #16
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}
 800ca46:	bf00      	nop
 800ca48:	2003dd48 	.word	0x2003dd48
 800ca4c:	08014a88 	.word	0x08014a88
 800ca50:	0800d6bd 	.word	0x0800d6bd

0800ca54 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b085      	sub	sp, #20
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ca60:	2300      	movs	r3, #0
 800ca62:	60fb      	str	r3, [r7, #12]
 800ca64:	e009      	b.n	800ca7a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	33e0      	adds	r3, #224	; 0xe0
 800ca6c:	009b      	lsls	r3, r3, #2
 800ca6e:	4413      	add	r3, r2
 800ca70:	2200      	movs	r2, #0
 800ca72:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	3301      	adds	r3, #1
 800ca78:	60fb      	str	r3, [r7, #12]
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	2b0e      	cmp	r3, #14
 800ca7e:	d9f2      	bls.n	800ca66 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ca80:	2300      	movs	r3, #0
 800ca82:	60fb      	str	r3, [r7, #12]
 800ca84:	e009      	b.n	800ca9a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ca86:	687a      	ldr	r2, [r7, #4]
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	4413      	add	r3, r2
 800ca8c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ca90:	2200      	movs	r2, #0
 800ca92:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	3301      	adds	r3, #1
 800ca98:	60fb      	str	r3, [r7, #12]
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800caa0:	d3f1      	bcc.n	800ca86 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2200      	movs	r2, #0
 800caa6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2200      	movs	r2, #0
 800caac:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2201      	movs	r2, #1
 800cab2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2200      	movs	r2, #0
 800cab8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2201      	movs	r2, #1
 800cac0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2240      	movs	r2, #64	; 0x40
 800cac6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2200      	movs	r2, #0
 800cad2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2201      	movs	r2, #1
 800cada:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2200      	movs	r2, #0
 800cae2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2200      	movs	r2, #0
 800caea:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800caee:	2300      	movs	r3, #0
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	3714      	adds	r7, #20
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b085      	sub	sp, #20
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800cb06:	2300      	movs	r3, #0
 800cb08:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d016      	beq.n	800cb3e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d10e      	bne.n	800cb38 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800cb20:	1c59      	adds	r1, r3, #1
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	33de      	adds	r3, #222	; 0xde
 800cb2c:	6839      	ldr	r1, [r7, #0]
 800cb2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800cb32:	2300      	movs	r3, #0
 800cb34:	73fb      	strb	r3, [r7, #15]
 800cb36:	e004      	b.n	800cb42 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800cb38:	2302      	movs	r3, #2
 800cb3a:	73fb      	strb	r3, [r7, #15]
 800cb3c:	e001      	b.n	800cb42 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800cb3e:	2302      	movs	r3, #2
 800cb40:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cb42:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3714      	adds	r7, #20
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr

0800cb50 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b085      	sub	sp, #20
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	460b      	mov	r3, r1
 800cb5a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800cb66:	78fa      	ldrb	r2, [r7, #3]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d204      	bcs.n	800cb76 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	78fa      	ldrb	r2, [r7, #3]
 800cb70:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800cb74:	e001      	b.n	800cb7a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800cb76:	2302      	movs	r3, #2
 800cb78:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cb7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3714      	adds	r7, #20
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr

0800cb88 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b087      	sub	sp, #28
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	4608      	mov	r0, r1
 800cb92:	4611      	mov	r1, r2
 800cb94:	461a      	mov	r2, r3
 800cb96:	4603      	mov	r3, r0
 800cb98:	70fb      	strb	r3, [r7, #3]
 800cb9a:	460b      	mov	r3, r1
 800cb9c:	70bb      	strb	r3, [r7, #2]
 800cb9e:	4613      	mov	r3, r2
 800cba0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800cba2:	2300      	movs	r3, #0
 800cba4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800cba6:	2300      	movs	r3, #0
 800cba8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800cbb0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cbb2:	e025      	b.n	800cc00 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800cbb4:	7dfb      	ldrb	r3, [r7, #23]
 800cbb6:	221a      	movs	r2, #26
 800cbb8:	fb02 f303 	mul.w	r3, r2, r3
 800cbbc:	3308      	adds	r3, #8
 800cbbe:	68fa      	ldr	r2, [r7, #12]
 800cbc0:	4413      	add	r3, r2
 800cbc2:	3302      	adds	r3, #2
 800cbc4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	795b      	ldrb	r3, [r3, #5]
 800cbca:	78fa      	ldrb	r2, [r7, #3]
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d002      	beq.n	800cbd6 <USBH_FindInterface+0x4e>
 800cbd0:	78fb      	ldrb	r3, [r7, #3]
 800cbd2:	2bff      	cmp	r3, #255	; 0xff
 800cbd4:	d111      	bne.n	800cbfa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800cbda:	78ba      	ldrb	r2, [r7, #2]
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d002      	beq.n	800cbe6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cbe0:	78bb      	ldrb	r3, [r7, #2]
 800cbe2:	2bff      	cmp	r3, #255	; 0xff
 800cbe4:	d109      	bne.n	800cbfa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cbea:	787a      	ldrb	r2, [r7, #1]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d002      	beq.n	800cbf6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cbf0:	787b      	ldrb	r3, [r7, #1]
 800cbf2:	2bff      	cmp	r3, #255	; 0xff
 800cbf4:	d101      	bne.n	800cbfa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800cbf6:	7dfb      	ldrb	r3, [r7, #23]
 800cbf8:	e006      	b.n	800cc08 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800cbfa:	7dfb      	ldrb	r3, [r7, #23]
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cc00:	7dfb      	ldrb	r3, [r7, #23]
 800cc02:	2b01      	cmp	r3, #1
 800cc04:	d9d6      	bls.n	800cbb4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800cc06:	23ff      	movs	r3, #255	; 0xff
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	371c      	adds	r7, #28
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr

0800cc14 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b082      	sub	sp, #8
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f007 f8d7 	bl	8013dd0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800cc22:	2101      	movs	r1, #1
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f007 f9ee 	bl	8014006 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800cc2a:	2300      	movs	r3, #0
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3708      	adds	r7, #8
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}

0800cc34 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b088      	sub	sp, #32
 800cc38:	af04      	add	r7, sp, #16
 800cc3a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800cc3c:	2302      	movs	r3, #2
 800cc3e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800cc40:	2300      	movs	r3, #0
 800cc42:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800cc4a:	b2db      	uxtb	r3, r3
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d102      	bne.n	800cc56 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2203      	movs	r2, #3
 800cc54:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	2b0b      	cmp	r3, #11
 800cc5e:	f200 823c 	bhi.w	800d0da <USBH_Process+0x4a6>
 800cc62:	a201      	add	r2, pc, #4	; (adr r2, 800cc68 <USBH_Process+0x34>)
 800cc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc68:	0800cc99 	.word	0x0800cc99
 800cc6c:	0800cce7 	.word	0x0800cce7
 800cc70:	0800cd6b 	.word	0x0800cd6b
 800cc74:	0800d059 	.word	0x0800d059
 800cc78:	0800d0db 	.word	0x0800d0db
 800cc7c:	0800ce2b 	.word	0x0800ce2b
 800cc80:	0800cfe3 	.word	0x0800cfe3
 800cc84:	0800ce7d 	.word	0x0800ce7d
 800cc88:	0800ceb9 	.word	0x0800ceb9
 800cc8c:	0800cef3 	.word	0x0800cef3
 800cc90:	0800cf3b 	.word	0x0800cf3b
 800cc94:	0800d041 	.word	0x0800d041
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	f000 821c 	beq.w	800d0de <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2201      	movs	r2, #1
 800ccaa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ccac:	20c8      	movs	r0, #200	; 0xc8
 800ccae:	f007 f9f4 	bl	801409a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f007 f8e7 	bl	8013e86 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2201      	movs	r2, #1
 800cccc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ccdc:	2300      	movs	r3, #0
 800ccde:	2200      	movs	r2, #0
 800cce0:	f004 f988 	bl	8010ff4 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800cce4:	e1fb      	b.n	800d0de <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d107      	bne.n	800cd00 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2202      	movs	r2, #2
 800ccfc:	701a      	strb	r2, [r3, #0]
 800ccfe:	e025      	b.n	800cd4c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cd06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cd0a:	d914      	bls.n	800cd36 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800cd12:	3301      	adds	r3, #1
 800cd14:	b2da      	uxtb	r2, r3
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800cd22:	2b03      	cmp	r3, #3
 800cd24:	d903      	bls.n	800cd2e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	220d      	movs	r2, #13
 800cd2a:	701a      	strb	r2, [r3, #0]
 800cd2c:	e00e      	b.n	800cd4c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2200      	movs	r2, #0
 800cd32:	701a      	strb	r2, [r3, #0]
 800cd34:	e00a      	b.n	800cd4c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cd3c:	f103 020a 	add.w	r2, r3, #10
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800cd46:	200a      	movs	r0, #10
 800cd48:	f007 f9a7 	bl	801409a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2201      	movs	r2, #1
 800cd50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cd60:	2300      	movs	r3, #0
 800cd62:	2200      	movs	r2, #0
 800cd64:	f004 f946 	bl	8010ff4 <osMessageQueuePut>
#endif
#endif
      break;
 800cd68:	e1c0      	b.n	800d0ec <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d005      	beq.n	800cd80 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cd7a:	2104      	movs	r1, #4
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800cd80:	2064      	movs	r0, #100	; 0x64
 800cd82:	f007 f98a 	bl	801409a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f007 f858 	bl	8013e3c <USBH_LL_GetSpeed>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	461a      	mov	r2, r3
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2205      	movs	r2, #5
 800cd9a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800cd9c:	2100      	movs	r1, #0
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f001 fb23 	bl	800e3ea <USBH_AllocPipe>
 800cda4:	4603      	mov	r3, r0
 800cda6:	461a      	mov	r2, r3
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800cdac:	2180      	movs	r1, #128	; 0x80
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f001 fb1b 	bl	800e3ea <USBH_AllocPipe>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	461a      	mov	r2, r3
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	7919      	ldrb	r1, [r3, #4]
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cdcc:	687a      	ldr	r2, [r7, #4]
 800cdce:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cdd0:	b292      	uxth	r2, r2
 800cdd2:	9202      	str	r2, [sp, #8]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	9201      	str	r2, [sp, #4]
 800cdd8:	9300      	str	r3, [sp, #0]
 800cdda:	4603      	mov	r3, r0
 800cddc:	2280      	movs	r2, #128	; 0x80
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f001 fad4 	bl	800e38c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	7959      	ldrb	r1, [r3, #5]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cdf4:	687a      	ldr	r2, [r7, #4]
 800cdf6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cdf8:	b292      	uxth	r2, r2
 800cdfa:	9202      	str	r2, [sp, #8]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	9201      	str	r2, [sp, #4]
 800ce00:	9300      	str	r3, [sp, #0]
 800ce02:	4603      	mov	r3, r0
 800ce04:	2200      	movs	r2, #0
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f001 fac0 	bl	800e38c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2201      	movs	r2, #1
 800ce10:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce20:	2300      	movs	r3, #0
 800ce22:	2200      	movs	r2, #0
 800ce24:	f004 f8e6 	bl	8010ff4 <osMessageQueuePut>
#endif
#endif
      break;
 800ce28:	e160      	b.n	800d0ec <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f000 f964 	bl	800d0f8 <USBH_HandleEnum>
 800ce30:	4603      	mov	r3, r0
 800ce32:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ce34:	7bbb      	ldrb	r3, [r7, #14]
 800ce36:	b2db      	uxtb	r3, r3
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	f040 8152 	bne.w	800d0e2 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2200      	movs	r2, #0
 800ce42:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	d103      	bne.n	800ce58 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2208      	movs	r2, #8
 800ce54:	701a      	strb	r2, [r3, #0]
 800ce56:	e002      	b.n	800ce5e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2207      	movs	r2, #7
 800ce5c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2205      	movs	r2, #5
 800ce62:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce72:	2300      	movs	r3, #0
 800ce74:	2200      	movs	r2, #0
 800ce76:	f004 f8bd 	bl	8010ff4 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800ce7a:	e132      	b.n	800d0e2 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	f000 812f 	beq.w	800d0e6 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ce8e:	2101      	movs	r1, #1
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2208      	movs	r2, #8
 800ce98:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2205      	movs	r2, #5
 800ce9e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ceae:	2300      	movs	r3, #0
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	f004 f89f 	bl	8010ff4 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800ceb6:	e116      	b.n	800d0e6 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800cebe:	b29b      	uxth	r3, r3
 800cec0:	4619      	mov	r1, r3
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f000 fcf8 	bl	800d8b8 <USBH_SetCfg>
 800cec8:	4603      	mov	r3, r0
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d102      	bne.n	800ced4 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2209      	movs	r2, #9
 800ced2:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2201      	movs	r2, #1
 800ced8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cee8:	2300      	movs	r3, #0
 800ceea:	2200      	movs	r2, #0
 800ceec:	f004 f882 	bl	8010ff4 <osMessageQueuePut>
#endif
#endif
      break;
 800cef0:	e0fc      	b.n	800d0ec <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800cef8:	f003 0320 	and.w	r3, r3, #32
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d00a      	beq.n	800cf16 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800cf00:	2101      	movs	r1, #1
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f000 fcfb 	bl	800d8fe <USBH_SetFeature>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d106      	bne.n	800cf1c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	220a      	movs	r2, #10
 800cf12:	701a      	strb	r2, [r3, #0]
 800cf14:	e002      	b.n	800cf1c <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	220a      	movs	r2, #10
 800cf1a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2201      	movs	r2, #1
 800cf20:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cf30:	2300      	movs	r3, #0
 800cf32:	2200      	movs	r2, #0
 800cf34:	f004 f85e 	bl	8010ff4 <osMessageQueuePut>
#endif
#endif
      break;
 800cf38:	e0d8      	b.n	800d0ec <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d03f      	beq.n	800cfc4 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2200      	movs	r2, #0
 800cf48:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	73fb      	strb	r3, [r7, #15]
 800cf50:	e016      	b.n	800cf80 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800cf52:	7bfa      	ldrb	r2, [r7, #15]
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	32de      	adds	r2, #222	; 0xde
 800cf58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf5c:	791a      	ldrb	r2, [r3, #4]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d108      	bne.n	800cf7a <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800cf68:	7bfa      	ldrb	r2, [r7, #15]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	32de      	adds	r2, #222	; 0xde
 800cf6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800cf78:	e005      	b.n	800cf86 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cf7a:	7bfb      	ldrb	r3, [r7, #15]
 800cf7c:	3301      	adds	r3, #1
 800cf7e:	73fb      	strb	r3, [r7, #15]
 800cf80:	7bfb      	ldrb	r3, [r7, #15]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d0e5      	beq.n	800cf52 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d016      	beq.n	800cfbe <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cf96:	689b      	ldr	r3, [r3, #8]
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	4798      	blx	r3
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d109      	bne.n	800cfb6 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2206      	movs	r2, #6
 800cfa6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cfae:	2103      	movs	r1, #3
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	4798      	blx	r3
 800cfb4:	e006      	b.n	800cfc4 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	220d      	movs	r2, #13
 800cfba:	701a      	strb	r2, [r3, #0]
 800cfbc:	e002      	b.n	800cfc4 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	220d      	movs	r2, #13
 800cfc2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2205      	movs	r2, #5
 800cfc8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cfd8:	2300      	movs	r3, #0
 800cfda:	2200      	movs	r2, #0
 800cfdc:	f004 f80a 	bl	8010ff4 <osMessageQueuePut>
#endif
#endif
      break;
 800cfe0:	e084      	b.n	800d0ec <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d017      	beq.n	800d01c <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cff2:	691b      	ldr	r3, [r3, #16]
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	4798      	blx	r3
 800cff8:	4603      	mov	r3, r0
 800cffa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cffc:	7bbb      	ldrb	r3, [r7, #14]
 800cffe:	b2db      	uxtb	r3, r3
 800d000:	2b00      	cmp	r3, #0
 800d002:	d103      	bne.n	800d00c <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	220b      	movs	r2, #11
 800d008:	701a      	strb	r2, [r3, #0]
 800d00a:	e00a      	b.n	800d022 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800d00c:	7bbb      	ldrb	r3, [r7, #14]
 800d00e:	b2db      	uxtb	r3, r3
 800d010:	2b02      	cmp	r3, #2
 800d012:	d106      	bne.n	800d022 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	220d      	movs	r2, #13
 800d018:	701a      	strb	r2, [r3, #0]
 800d01a:	e002      	b.n	800d022 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	220d      	movs	r2, #13
 800d020:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2205      	movs	r2, #5
 800d026:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d036:	2300      	movs	r3, #0
 800d038:	2200      	movs	r2, #0
 800d03a:	f003 ffdb 	bl	8010ff4 <osMessageQueuePut>
#endif
#endif
      break;
 800d03e:	e055      	b.n	800d0ec <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d046:	2b00      	cmp	r3, #0
 800d048:	d04f      	beq.n	800d0ea <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d050:	695b      	ldr	r3, [r3, #20]
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	4798      	blx	r3
      }
      break;
 800d056:	e048      	b.n	800d0ea <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2200      	movs	r2, #0
 800d05c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f7ff fcf7 	bl	800ca54 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d009      	beq.n	800d084 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d076:	68db      	ldr	r3, [r3, #12]
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2200      	movs	r2, #0
 800d080:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d005      	beq.n	800d09a <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d094:	2105      	movs	r1, #5
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800d0a0:	b2db      	uxtb	r3, r3
 800d0a2:	2b01      	cmp	r3, #1
 800d0a4:	d107      	bne.n	800d0b6 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f7ff fdb0 	bl	800cc14 <USBH_Start>
 800d0b4:	e002      	b.n	800d0bc <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f006 fe8a 	bl	8013dd0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2201      	movs	r2, #1
 800d0c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	f003 ff8e 	bl	8010ff4 <osMessageQueuePut>
#endif
#endif
      break;
 800d0d8:	e008      	b.n	800d0ec <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800d0da:	bf00      	nop
 800d0dc:	e006      	b.n	800d0ec <USBH_Process+0x4b8>
      break;
 800d0de:	bf00      	nop
 800d0e0:	e004      	b.n	800d0ec <USBH_Process+0x4b8>
      break;
 800d0e2:	bf00      	nop
 800d0e4:	e002      	b.n	800d0ec <USBH_Process+0x4b8>
    break;
 800d0e6:	bf00      	nop
 800d0e8:	e000      	b.n	800d0ec <USBH_Process+0x4b8>
      break;
 800d0ea:	bf00      	nop
  }
  return USBH_OK;
 800d0ec:	2300      	movs	r3, #0
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3710      	adds	r7, #16
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	bf00      	nop

0800d0f8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b088      	sub	sp, #32
 800d0fc:	af04      	add	r7, sp, #16
 800d0fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d100:	2301      	movs	r3, #1
 800d102:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d104:	2301      	movs	r3, #1
 800d106:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	785b      	ldrb	r3, [r3, #1]
 800d10c:	2b07      	cmp	r3, #7
 800d10e:	f200 8208 	bhi.w	800d522 <USBH_HandleEnum+0x42a>
 800d112:	a201      	add	r2, pc, #4	; (adr r2, 800d118 <USBH_HandleEnum+0x20>)
 800d114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d118:	0800d139 	.word	0x0800d139
 800d11c:	0800d1f7 	.word	0x0800d1f7
 800d120:	0800d261 	.word	0x0800d261
 800d124:	0800d2ef 	.word	0x0800d2ef
 800d128:	0800d359 	.word	0x0800d359
 800d12c:	0800d3c9 	.word	0x0800d3c9
 800d130:	0800d465 	.word	0x0800d465
 800d134:	0800d4e3 	.word	0x0800d4e3
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d138:	2108      	movs	r1, #8
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f000 faec 	bl	800d718 <USBH_Get_DevDesc>
 800d140:	4603      	mov	r3, r0
 800d142:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d144:	7bbb      	ldrb	r3, [r7, #14]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d130      	bne.n	800d1ac <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2201      	movs	r2, #1
 800d158:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	7919      	ldrb	r1, [r3, #4]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d16a:	687a      	ldr	r2, [r7, #4]
 800d16c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d16e:	b292      	uxth	r2, r2
 800d170:	9202      	str	r2, [sp, #8]
 800d172:	2200      	movs	r2, #0
 800d174:	9201      	str	r2, [sp, #4]
 800d176:	9300      	str	r3, [sp, #0]
 800d178:	4603      	mov	r3, r0
 800d17a:	2280      	movs	r2, #128	; 0x80
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f001 f905 	bl	800e38c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	7959      	ldrb	r1, [r3, #5]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d192:	687a      	ldr	r2, [r7, #4]
 800d194:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d196:	b292      	uxth	r2, r2
 800d198:	9202      	str	r2, [sp, #8]
 800d19a:	2200      	movs	r2, #0
 800d19c:	9201      	str	r2, [sp, #4]
 800d19e:	9300      	str	r3, [sp, #0]
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f001 f8f1 	bl	800e38c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d1aa:	e1bc      	b.n	800d526 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d1ac:	7bbb      	ldrb	r3, [r7, #14]
 800d1ae:	2b03      	cmp	r3, #3
 800d1b0:	f040 81b9 	bne.w	800d526 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	b2da      	uxtb	r2, r3
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d1ca:	2b03      	cmp	r3, #3
 800d1cc:	d903      	bls.n	800d1d6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	220d      	movs	r2, #13
 800d1d2:	701a      	strb	r2, [r3, #0]
      break;
 800d1d4:	e1a7      	b.n	800d526 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	795b      	ldrb	r3, [r3, #5]
 800d1da:	4619      	mov	r1, r3
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f001 f925 	bl	800e42c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	791b      	ldrb	r3, [r3, #4]
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f001 f91f 	bl	800e42c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	701a      	strb	r2, [r3, #0]
      break;
 800d1f4:	e197      	b.n	800d526 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d1f6:	2112      	movs	r1, #18
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f000 fa8d 	bl	800d718 <USBH_Get_DevDesc>
 800d1fe:	4603      	mov	r3, r0
 800d200:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d202:	7bbb      	ldrb	r3, [r7, #14]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d103      	bne.n	800d210 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2202      	movs	r2, #2
 800d20c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d20e:	e18c      	b.n	800d52a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d210:	7bbb      	ldrb	r3, [r7, #14]
 800d212:	2b03      	cmp	r3, #3
 800d214:	f040 8189 	bne.w	800d52a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d21e:	3301      	adds	r3, #1
 800d220:	b2da      	uxtb	r2, r3
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d22e:	2b03      	cmp	r3, #3
 800d230:	d903      	bls.n	800d23a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	220d      	movs	r2, #13
 800d236:	701a      	strb	r2, [r3, #0]
      break;
 800d238:	e177      	b.n	800d52a <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	795b      	ldrb	r3, [r3, #5]
 800d23e:	4619      	mov	r1, r3
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f001 f8f3 	bl	800e42c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	791b      	ldrb	r3, [r3, #4]
 800d24a:	4619      	mov	r1, r3
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f001 f8ed 	bl	800e42c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2200      	movs	r2, #0
 800d256:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2200      	movs	r2, #0
 800d25c:	701a      	strb	r2, [r3, #0]
      break;
 800d25e:	e164      	b.n	800d52a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d260:	2101      	movs	r1, #1
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f000 fb04 	bl	800d870 <USBH_SetAddress>
 800d268:	4603      	mov	r3, r0
 800d26a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d26c:	7bbb      	ldrb	r3, [r7, #14]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d132      	bne.n	800d2d8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800d272:	2002      	movs	r0, #2
 800d274:	f006 ff11 	bl	801409a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2201      	movs	r2, #1
 800d27c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2203      	movs	r2, #3
 800d284:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	7919      	ldrb	r1, [r3, #4]
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d296:	687a      	ldr	r2, [r7, #4]
 800d298:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d29a:	b292      	uxth	r2, r2
 800d29c:	9202      	str	r2, [sp, #8]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	9201      	str	r2, [sp, #4]
 800d2a2:	9300      	str	r3, [sp, #0]
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	2280      	movs	r2, #128	; 0x80
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f001 f86f 	bl	800e38c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	7959      	ldrb	r1, [r3, #5]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d2c2:	b292      	uxth	r2, r2
 800d2c4:	9202      	str	r2, [sp, #8]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	9201      	str	r2, [sp, #4]
 800d2ca:	9300      	str	r3, [sp, #0]
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f001 f85b 	bl	800e38c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d2d6:	e12a      	b.n	800d52e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d2d8:	7bbb      	ldrb	r3, [r7, #14]
 800d2da:	2b03      	cmp	r3, #3
 800d2dc:	f040 8127 	bne.w	800d52e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	220d      	movs	r2, #13
 800d2e4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	705a      	strb	r2, [r3, #1]
      break;
 800d2ec:	e11f      	b.n	800d52e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d2ee:	2109      	movs	r1, #9
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f000 fa39 	bl	800d768 <USBH_Get_CfgDesc>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d2fa:	7bbb      	ldrb	r3, [r7, #14]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d103      	bne.n	800d308 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2204      	movs	r2, #4
 800d304:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d306:	e114      	b.n	800d532 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d308:	7bbb      	ldrb	r3, [r7, #14]
 800d30a:	2b03      	cmp	r3, #3
 800d30c:	f040 8111 	bne.w	800d532 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d316:	3301      	adds	r3, #1
 800d318:	b2da      	uxtb	r2, r3
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d326:	2b03      	cmp	r3, #3
 800d328:	d903      	bls.n	800d332 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	220d      	movs	r2, #13
 800d32e:	701a      	strb	r2, [r3, #0]
      break;
 800d330:	e0ff      	b.n	800d532 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	795b      	ldrb	r3, [r3, #5]
 800d336:	4619      	mov	r1, r3
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f001 f877 	bl	800e42c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	791b      	ldrb	r3, [r3, #4]
 800d342:	4619      	mov	r1, r3
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f001 f871 	bl	800e42c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2200      	movs	r2, #0
 800d34e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2200      	movs	r2, #0
 800d354:	701a      	strb	r2, [r3, #0]
      break;
 800d356:	e0ec      	b.n	800d532 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800d35e:	4619      	mov	r1, r3
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	f000 fa01 	bl	800d768 <USBH_Get_CfgDesc>
 800d366:	4603      	mov	r3, r0
 800d368:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d36a:	7bbb      	ldrb	r3, [r7, #14]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d103      	bne.n	800d378 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2205      	movs	r2, #5
 800d374:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d376:	e0de      	b.n	800d536 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d378:	7bbb      	ldrb	r3, [r7, #14]
 800d37a:	2b03      	cmp	r3, #3
 800d37c:	f040 80db 	bne.w	800d536 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d386:	3301      	adds	r3, #1
 800d388:	b2da      	uxtb	r2, r3
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d396:	2b03      	cmp	r3, #3
 800d398:	d903      	bls.n	800d3a2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	220d      	movs	r2, #13
 800d39e:	701a      	strb	r2, [r3, #0]
      break;
 800d3a0:	e0c9      	b.n	800d536 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	795b      	ldrb	r3, [r3, #5]
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f001 f83f 	bl	800e42c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	791b      	ldrb	r3, [r3, #4]
 800d3b2:	4619      	mov	r1, r3
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f001 f839 	bl	800e42c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2200      	movs	r2, #0
 800d3be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	701a      	strb	r2, [r3, #0]
      break;
 800d3c6:	e0b6      	b.n	800d536 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d036      	beq.n	800d440 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d3de:	23ff      	movs	r3, #255	; 0xff
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f000 f9e5 	bl	800d7b0 <USBH_Get_StringDesc>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d3ea:	7bbb      	ldrb	r3, [r7, #14]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d111      	bne.n	800d414 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2206      	movs	r2, #6
 800d3f4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2205      	movs	r2, #5
 800d3fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d40a:	2300      	movs	r3, #0
 800d40c:	2200      	movs	r2, #0
 800d40e:	f003 fdf1 	bl	8010ff4 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d412:	e092      	b.n	800d53a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d414:	7bbb      	ldrb	r3, [r7, #14]
 800d416:	2b03      	cmp	r3, #3
 800d418:	f040 808f 	bne.w	800d53a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2206      	movs	r2, #6
 800d420:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2205      	movs	r2, #5
 800d426:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d436:	2300      	movs	r3, #0
 800d438:	2200      	movs	r2, #0
 800d43a:	f003 fddb 	bl	8010ff4 <osMessageQueuePut>
      break;
 800d43e:	e07c      	b.n	800d53a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2206      	movs	r2, #6
 800d444:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2205      	movs	r2, #5
 800d44a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d45a:	2300      	movs	r3, #0
 800d45c:	2200      	movs	r2, #0
 800d45e:	f003 fdc9 	bl	8010ff4 <osMessageQueuePut>
      break;
 800d462:	e06a      	b.n	800d53a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d027      	beq.n	800d4be <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d47a:	23ff      	movs	r3, #255	; 0xff
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f000 f997 	bl	800d7b0 <USBH_Get_StringDesc>
 800d482:	4603      	mov	r3, r0
 800d484:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d486:	7bbb      	ldrb	r3, [r7, #14]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d103      	bne.n	800d494 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2207      	movs	r2, #7
 800d490:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d492:	e054      	b.n	800d53e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d494:	7bbb      	ldrb	r3, [r7, #14]
 800d496:	2b03      	cmp	r3, #3
 800d498:	d151      	bne.n	800d53e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2207      	movs	r2, #7
 800d49e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2205      	movs	r2, #5
 800d4a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	f003 fd9c 	bl	8010ff4 <osMessageQueuePut>
      break;
 800d4bc:	e03f      	b.n	800d53e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2207      	movs	r2, #7
 800d4c2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2205      	movs	r2, #5
 800d4c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d4d8:	2300      	movs	r3, #0
 800d4da:	2200      	movs	r2, #0
 800d4dc:	f003 fd8a 	bl	8010ff4 <osMessageQueuePut>
      break;
 800d4e0:	e02d      	b.n	800d53e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d017      	beq.n	800d51c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d4f8:	23ff      	movs	r3, #255	; 0xff
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f000 f958 	bl	800d7b0 <USBH_Get_StringDesc>
 800d500:	4603      	mov	r3, r0
 800d502:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d504:	7bbb      	ldrb	r3, [r7, #14]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d102      	bne.n	800d510 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d50a:	2300      	movs	r3, #0
 800d50c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d50e:	e018      	b.n	800d542 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d510:	7bbb      	ldrb	r3, [r7, #14]
 800d512:	2b03      	cmp	r3, #3
 800d514:	d115      	bne.n	800d542 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800d516:	2300      	movs	r3, #0
 800d518:	73fb      	strb	r3, [r7, #15]
      break;
 800d51a:	e012      	b.n	800d542 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800d51c:	2300      	movs	r3, #0
 800d51e:	73fb      	strb	r3, [r7, #15]
      break;
 800d520:	e00f      	b.n	800d542 <USBH_HandleEnum+0x44a>

    default:
      break;
 800d522:	bf00      	nop
 800d524:	e00e      	b.n	800d544 <USBH_HandleEnum+0x44c>
      break;
 800d526:	bf00      	nop
 800d528:	e00c      	b.n	800d544 <USBH_HandleEnum+0x44c>
      break;
 800d52a:	bf00      	nop
 800d52c:	e00a      	b.n	800d544 <USBH_HandleEnum+0x44c>
      break;
 800d52e:	bf00      	nop
 800d530:	e008      	b.n	800d544 <USBH_HandleEnum+0x44c>
      break;
 800d532:	bf00      	nop
 800d534:	e006      	b.n	800d544 <USBH_HandleEnum+0x44c>
      break;
 800d536:	bf00      	nop
 800d538:	e004      	b.n	800d544 <USBH_HandleEnum+0x44c>
      break;
 800d53a:	bf00      	nop
 800d53c:	e002      	b.n	800d544 <USBH_HandleEnum+0x44c>
      break;
 800d53e:	bf00      	nop
 800d540:	e000      	b.n	800d544 <USBH_HandleEnum+0x44c>
      break;
 800d542:	bf00      	nop
  }
  return Status;
 800d544:	7bfb      	ldrb	r3, [r7, #15]
}
 800d546:	4618      	mov	r0, r3
 800d548:	3710      	adds	r7, #16
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}
 800d54e:	bf00      	nop

0800d550 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d550:	b480      	push	{r7}
 800d552:	b083      	sub	sp, #12
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	683a      	ldr	r2, [r7, #0]
 800d55e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d562:	bf00      	nop
 800d564:	370c      	adds	r7, #12
 800d566:	46bd      	mov	sp, r7
 800d568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56c:	4770      	bx	lr

0800d56e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d56e:	b580      	push	{r7, lr}
 800d570:	b082      	sub	sp, #8
 800d572:	af00      	add	r7, sp, #0
 800d574:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d57c:	1c5a      	adds	r2, r3, #1
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f000 f804 	bl	800d592 <USBH_HandleSof>
}
 800d58a:	bf00      	nop
 800d58c:	3708      	adds	r7, #8
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}

0800d592 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d592:	b580      	push	{r7, lr}
 800d594:	b082      	sub	sp, #8
 800d596:	af00      	add	r7, sp, #0
 800d598:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	781b      	ldrb	r3, [r3, #0]
 800d59e:	b2db      	uxtb	r3, r3
 800d5a0:	2b0b      	cmp	r3, #11
 800d5a2:	d10a      	bne.n	800d5ba <USBH_HandleSof+0x28>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d005      	beq.n	800d5ba <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d5b4:	699b      	ldr	r3, [r3, #24]
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	4798      	blx	r3
  }
}
 800d5ba:	bf00      	nop
 800d5bc:	3708      	adds	r7, #8
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}

0800d5c2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d5c2:	b580      	push	{r7, lr}
 800d5c4:	b082      	sub	sp, #8
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2201      	movs	r2, #1
 800d5ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	f003 fd03 	bl	8010ff4 <osMessageQueuePut>
#endif
#endif

  return;
 800d5ee:	bf00      	nop
}
 800d5f0:	3708      	adds	r7, #8
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}

0800d5f6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d5f6:	b480      	push	{r7}
 800d5f8:	b083      	sub	sp, #12
 800d5fa:	af00      	add	r7, sp, #0
 800d5fc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2200      	movs	r2, #0
 800d602:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d606:	bf00      	nop
}
 800d608:	370c      	adds	r7, #12
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr

0800d612 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d612:	b580      	push	{r7, lr}
 800d614:	b082      	sub	sp, #8
 800d616:	af00      	add	r7, sp, #0
 800d618:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2201      	movs	r2, #1
 800d61e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2200      	movs	r2, #0
 800d626:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2200      	movs	r2, #0
 800d62e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2201      	movs	r2, #1
 800d636:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d646:	2300      	movs	r3, #0
 800d648:	2200      	movs	r2, #0
 800d64a:	f003 fcd3 	bl	8010ff4 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800d64e:	2300      	movs	r3, #0
}
 800d650:	4618      	mov	r0, r3
 800d652:	3708      	adds	r7, #8
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}

0800d658 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b082      	sub	sp, #8
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2201      	movs	r2, #1
 800d664:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2200      	movs	r2, #0
 800d66c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2200      	movs	r2, #0
 800d674:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f006 fbc4 	bl	8013e06 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	791b      	ldrb	r3, [r3, #4]
 800d682:	4619      	mov	r1, r3
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f000 fed1 	bl	800e42c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	795b      	ldrb	r3, [r3, #5]
 800d68e:	4619      	mov	r1, r3
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f000 fecb 	bl	800e42c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2201      	movs	r2, #1
 800d69a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	f003 fca1 	bl	8010ff4 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800d6b2:	2300      	movs	r3, #0
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3708      	adds	r7, #8
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d6d0:	f04f 33ff 	mov.w	r3, #4294967295
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	f003 fd01 	bl	80110dc <osMessageQueueGet>
 800d6da:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d1f0      	bne.n	800d6c4 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f7ff faa6 	bl	800cc34 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d6e8:	e7ec      	b.n	800d6c4 <USBH_Process_OS+0x8>

0800d6ea <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800d6ea:	b580      	push	{r7, lr}
 800d6ec:	b082      	sub	sp, #8
 800d6ee:	af00      	add	r7, sp, #0
 800d6f0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d706:	2300      	movs	r3, #0
 800d708:	2200      	movs	r2, #0
 800d70a:	f003 fc73 	bl	8010ff4 <osMessageQueuePut>
#endif

  return USBH_OK;
 800d70e:	2300      	movs	r3, #0
}
 800d710:	4618      	mov	r0, r3
 800d712:	3708      	adds	r7, #8
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}

0800d718 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b086      	sub	sp, #24
 800d71c:	af02      	add	r7, sp, #8
 800d71e:	6078      	str	r0, [r7, #4]
 800d720:	460b      	mov	r3, r1
 800d722:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d72a:	78fb      	ldrb	r3, [r7, #3]
 800d72c:	b29b      	uxth	r3, r3
 800d72e:	9300      	str	r3, [sp, #0]
 800d730:	4613      	mov	r3, r2
 800d732:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d736:	2100      	movs	r1, #0
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f000 f864 	bl	800d806 <USBH_GetDescriptor>
 800d73e:	4603      	mov	r3, r0
 800d740:	73fb      	strb	r3, [r7, #15]
 800d742:	7bfb      	ldrb	r3, [r7, #15]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d10a      	bne.n	800d75e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d754:	78fa      	ldrb	r2, [r7, #3]
 800d756:	b292      	uxth	r2, r2
 800d758:	4619      	mov	r1, r3
 800d75a:	f000 f918 	bl	800d98e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800d75e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d760:	4618      	mov	r0, r3
 800d762:	3710      	adds	r7, #16
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b086      	sub	sp, #24
 800d76c:	af02      	add	r7, sp, #8
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	460b      	mov	r3, r1
 800d772:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	331c      	adds	r3, #28
 800d778:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d77a:	887b      	ldrh	r3, [r7, #2]
 800d77c:	9300      	str	r3, [sp, #0]
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d784:	2100      	movs	r1, #0
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f000 f83d 	bl	800d806 <USBH_GetDescriptor>
 800d78c:	4603      	mov	r3, r0
 800d78e:	72fb      	strb	r3, [r7, #11]
 800d790:	7afb      	ldrb	r3, [r7, #11]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d107      	bne.n	800d7a6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d79c:	887a      	ldrh	r2, [r7, #2]
 800d79e:	68f9      	ldr	r1, [r7, #12]
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f000 f964 	bl	800da6e <USBH_ParseCfgDesc>
  }

  return status;
 800d7a6:	7afb      	ldrb	r3, [r7, #11]
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3710      	adds	r7, #16
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b088      	sub	sp, #32
 800d7b4:	af02      	add	r7, sp, #8
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	607a      	str	r2, [r7, #4]
 800d7ba:	461a      	mov	r2, r3
 800d7bc:	460b      	mov	r3, r1
 800d7be:	72fb      	strb	r3, [r7, #11]
 800d7c0:	4613      	mov	r3, r2
 800d7c2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800d7c4:	7afb      	ldrb	r3, [r7, #11]
 800d7c6:	b29b      	uxth	r3, r3
 800d7c8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d7cc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d7d4:	893b      	ldrh	r3, [r7, #8]
 800d7d6:	9300      	str	r3, [sp, #0]
 800d7d8:	460b      	mov	r3, r1
 800d7da:	2100      	movs	r1, #0
 800d7dc:	68f8      	ldr	r0, [r7, #12]
 800d7de:	f000 f812 	bl	800d806 <USBH_GetDescriptor>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	75fb      	strb	r3, [r7, #23]
 800d7e6:	7dfb      	ldrb	r3, [r7, #23]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d107      	bne.n	800d7fc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d7f2:	893a      	ldrh	r2, [r7, #8]
 800d7f4:	6879      	ldr	r1, [r7, #4]
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f000 fa37 	bl	800dc6a <USBH_ParseStringDesc>
  }

  return status;
 800d7fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3718      	adds	r7, #24
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}

0800d806 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800d806:	b580      	push	{r7, lr}
 800d808:	b084      	sub	sp, #16
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	60f8      	str	r0, [r7, #12]
 800d80e:	607b      	str	r3, [r7, #4]
 800d810:	460b      	mov	r3, r1
 800d812:	72fb      	strb	r3, [r7, #11]
 800d814:	4613      	mov	r3, r2
 800d816:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	789b      	ldrb	r3, [r3, #2]
 800d81c:	2b01      	cmp	r3, #1
 800d81e:	d11c      	bne.n	800d85a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d820:	7afb      	ldrb	r3, [r7, #11]
 800d822:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d826:	b2da      	uxtb	r2, r3
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	2206      	movs	r2, #6
 800d830:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	893a      	ldrh	r2, [r7, #8]
 800d836:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d838:	893b      	ldrh	r3, [r7, #8]
 800d83a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d83e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d842:	d104      	bne.n	800d84e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	f240 4209 	movw	r2, #1033	; 0x409
 800d84a:	829a      	strh	r2, [r3, #20]
 800d84c:	e002      	b.n	800d854 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	2200      	movs	r2, #0
 800d852:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	8b3a      	ldrh	r2, [r7, #24]
 800d858:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d85a:	8b3b      	ldrh	r3, [r7, #24]
 800d85c:	461a      	mov	r2, r3
 800d85e:	6879      	ldr	r1, [r7, #4]
 800d860:	68f8      	ldr	r0, [r7, #12]
 800d862:	f000 fa50 	bl	800dd06 <USBH_CtlReq>
 800d866:	4603      	mov	r3, r0
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3710      	adds	r7, #16
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}

0800d870 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b082      	sub	sp, #8
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	460b      	mov	r3, r1
 800d87a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	789b      	ldrb	r3, [r3, #2]
 800d880:	2b01      	cmp	r3, #1
 800d882:	d10f      	bne.n	800d8a4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2200      	movs	r2, #0
 800d888:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2205      	movs	r2, #5
 800d88e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d890:	78fb      	ldrb	r3, [r7, #3]
 800d892:	b29a      	uxth	r2, r3
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2200      	movs	r2, #0
 800d89c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	2100      	movs	r1, #0
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f000 fa2c 	bl	800dd06 <USBH_CtlReq>
 800d8ae:	4603      	mov	r3, r0
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3708      	adds	r7, #8
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b082      	sub	sp, #8
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	460b      	mov	r3, r1
 800d8c2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	789b      	ldrb	r3, [r3, #2]
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	d10e      	bne.n	800d8ea <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2209      	movs	r2, #9
 800d8d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	887a      	ldrh	r2, [r7, #2]
 800d8dc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	2100      	movs	r1, #0
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f000 fa09 	bl	800dd06 <USBH_CtlReq>
 800d8f4:	4603      	mov	r3, r0
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3708      	adds	r7, #8
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}

0800d8fe <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d8fe:	b580      	push	{r7, lr}
 800d900:	b082      	sub	sp, #8
 800d902:	af00      	add	r7, sp, #0
 800d904:	6078      	str	r0, [r7, #4]
 800d906:	460b      	mov	r3, r1
 800d908:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	789b      	ldrb	r3, [r3, #2]
 800d90e:	2b01      	cmp	r3, #1
 800d910:	d10f      	bne.n	800d932 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2200      	movs	r2, #0
 800d916:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2203      	movs	r2, #3
 800d91c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d91e:	78fb      	ldrb	r3, [r7, #3]
 800d920:	b29a      	uxth	r2, r3
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2200      	movs	r2, #0
 800d92a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2200      	movs	r2, #0
 800d930:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d932:	2200      	movs	r2, #0
 800d934:	2100      	movs	r1, #0
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f000 f9e5 	bl	800dd06 <USBH_CtlReq>
 800d93c:	4603      	mov	r3, r0
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3708      	adds	r7, #8
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}

0800d946 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d946:	b580      	push	{r7, lr}
 800d948:	b082      	sub	sp, #8
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
 800d94e:	460b      	mov	r3, r1
 800d950:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	789b      	ldrb	r3, [r3, #2]
 800d956:	2b01      	cmp	r3, #1
 800d958:	d10f      	bne.n	800d97a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2202      	movs	r2, #2
 800d95e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2201      	movs	r2, #1
 800d964:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2200      	movs	r2, #0
 800d96a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d96c:	78fb      	ldrb	r3, [r7, #3]
 800d96e:	b29a      	uxth	r2, r3
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2200      	movs	r2, #0
 800d978:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800d97a:	2200      	movs	r2, #0
 800d97c:	2100      	movs	r1, #0
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f000 f9c1 	bl	800dd06 <USBH_CtlReq>
 800d984:	4603      	mov	r3, r0
}
 800d986:	4618      	mov	r0, r3
 800d988:	3708      	adds	r7, #8
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}

0800d98e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800d98e:	b480      	push	{r7}
 800d990:	b085      	sub	sp, #20
 800d992:	af00      	add	r7, sp, #0
 800d994:	60f8      	str	r0, [r7, #12]
 800d996:	60b9      	str	r1, [r7, #8]
 800d998:	4613      	mov	r3, r2
 800d99a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	781a      	ldrb	r2, [r3, #0]
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	785a      	ldrb	r2, [r3, #1]
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	3302      	adds	r3, #2
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	b29a      	uxth	r2, r3
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	3303      	adds	r3, #3
 800d9b8:	781b      	ldrb	r3, [r3, #0]
 800d9ba:	b29b      	uxth	r3, r3
 800d9bc:	021b      	lsls	r3, r3, #8
 800d9be:	b29b      	uxth	r3, r3
 800d9c0:	4313      	orrs	r3, r2
 800d9c2:	b29a      	uxth	r2, r3
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	791a      	ldrb	r2, [r3, #4]
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	795a      	ldrb	r2, [r3, #5]
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	799a      	ldrb	r2, [r3, #6]
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	79da      	ldrb	r2, [r3, #7]
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800d9e8:	88fb      	ldrh	r3, [r7, #6]
 800d9ea:	2b08      	cmp	r3, #8
 800d9ec:	d939      	bls.n	800da62 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	3308      	adds	r3, #8
 800d9f2:	781b      	ldrb	r3, [r3, #0]
 800d9f4:	b29a      	uxth	r2, r3
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	3309      	adds	r3, #9
 800d9fa:	781b      	ldrb	r3, [r3, #0]
 800d9fc:	b29b      	uxth	r3, r3
 800d9fe:	021b      	lsls	r3, r3, #8
 800da00:	b29b      	uxth	r3, r3
 800da02:	4313      	orrs	r3, r2
 800da04:	b29a      	uxth	r2, r3
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	330a      	adds	r3, #10
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	b29a      	uxth	r2, r3
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	330b      	adds	r3, #11
 800da16:	781b      	ldrb	r3, [r3, #0]
 800da18:	b29b      	uxth	r3, r3
 800da1a:	021b      	lsls	r3, r3, #8
 800da1c:	b29b      	uxth	r3, r3
 800da1e:	4313      	orrs	r3, r2
 800da20:	b29a      	uxth	r2, r3
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	330c      	adds	r3, #12
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	b29a      	uxth	r2, r3
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	330d      	adds	r3, #13
 800da32:	781b      	ldrb	r3, [r3, #0]
 800da34:	b29b      	uxth	r3, r3
 800da36:	021b      	lsls	r3, r3, #8
 800da38:	b29b      	uxth	r3, r3
 800da3a:	4313      	orrs	r3, r2
 800da3c:	b29a      	uxth	r2, r3
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	7b9a      	ldrb	r2, [r3, #14]
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	7bda      	ldrb	r2, [r3, #15]
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	7c1a      	ldrb	r2, [r3, #16]
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	7c5a      	ldrb	r2, [r3, #17]
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	745a      	strb	r2, [r3, #17]
  }
}
 800da62:	bf00      	nop
 800da64:	3714      	adds	r7, #20
 800da66:	46bd      	mov	sp, r7
 800da68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6c:	4770      	bx	lr

0800da6e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800da6e:	b580      	push	{r7, lr}
 800da70:	b08a      	sub	sp, #40	; 0x28
 800da72:	af00      	add	r7, sp, #0
 800da74:	60f8      	str	r0, [r7, #12]
 800da76:	60b9      	str	r1, [r7, #8]
 800da78:	4613      	mov	r3, r2
 800da7a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800da80:	2300      	movs	r3, #0
 800da82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800da86:	2300      	movs	r3, #0
 800da88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	781a      	ldrb	r2, [r3, #0]
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	785a      	ldrb	r2, [r3, #1]
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	3302      	adds	r3, #2
 800daa4:	781b      	ldrb	r3, [r3, #0]
 800daa6:	b29a      	uxth	r2, r3
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	3303      	adds	r3, #3
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	b29b      	uxth	r3, r3
 800dab0:	021b      	lsls	r3, r3, #8
 800dab2:	b29b      	uxth	r3, r3
 800dab4:	4313      	orrs	r3, r2
 800dab6:	b29a      	uxth	r2, r3
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	791a      	ldrb	r2, [r3, #4]
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	795a      	ldrb	r2, [r3, #5]
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	799a      	ldrb	r2, [r3, #6]
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	79da      	ldrb	r2, [r3, #7]
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	7a1a      	ldrb	r2, [r3, #8]
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800dae4:	88fb      	ldrh	r3, [r7, #6]
 800dae6:	2b09      	cmp	r3, #9
 800dae8:	d95f      	bls.n	800dbaa <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800daea:	2309      	movs	r3, #9
 800daec:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800daee:	2300      	movs	r3, #0
 800daf0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800daf2:	e051      	b.n	800db98 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800daf4:	f107 0316 	add.w	r3, r7, #22
 800daf8:	4619      	mov	r1, r3
 800dafa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dafc:	f000 f8e8 	bl	800dcd0 <USBH_GetNextDesc>
 800db00:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800db02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db04:	785b      	ldrb	r3, [r3, #1]
 800db06:	2b04      	cmp	r3, #4
 800db08:	d146      	bne.n	800db98 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800db0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800db0e:	221a      	movs	r2, #26
 800db10:	fb02 f303 	mul.w	r3, r2, r3
 800db14:	3308      	adds	r3, #8
 800db16:	68fa      	ldr	r2, [r7, #12]
 800db18:	4413      	add	r3, r2
 800db1a:	3302      	adds	r3, #2
 800db1c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800db1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800db20:	69f8      	ldr	r0, [r7, #28]
 800db22:	f000 f846 	bl	800dbb2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800db26:	2300      	movs	r3, #0
 800db28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800db2c:	2300      	movs	r3, #0
 800db2e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800db30:	e022      	b.n	800db78 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800db32:	f107 0316 	add.w	r3, r7, #22
 800db36:	4619      	mov	r1, r3
 800db38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db3a:	f000 f8c9 	bl	800dcd0 <USBH_GetNextDesc>
 800db3e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800db40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db42:	785b      	ldrb	r3, [r3, #1]
 800db44:	2b05      	cmp	r3, #5
 800db46:	d117      	bne.n	800db78 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800db48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800db4c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800db50:	3201      	adds	r2, #1
 800db52:	00d2      	lsls	r2, r2, #3
 800db54:	211a      	movs	r1, #26
 800db56:	fb01 f303 	mul.w	r3, r1, r3
 800db5a:	4413      	add	r3, r2
 800db5c:	3308      	adds	r3, #8
 800db5e:	68fa      	ldr	r2, [r7, #12]
 800db60:	4413      	add	r3, r2
 800db62:	3304      	adds	r3, #4
 800db64:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800db66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800db68:	69b8      	ldr	r0, [r7, #24]
 800db6a:	f000 f851 	bl	800dc10 <USBH_ParseEPDesc>
            ep_ix++;
 800db6e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800db72:	3301      	adds	r3, #1
 800db74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800db78:	69fb      	ldr	r3, [r7, #28]
 800db7a:	791b      	ldrb	r3, [r3, #4]
 800db7c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800db80:	429a      	cmp	r2, r3
 800db82:	d204      	bcs.n	800db8e <USBH_ParseCfgDesc+0x120>
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	885a      	ldrh	r2, [r3, #2]
 800db88:	8afb      	ldrh	r3, [r7, #22]
 800db8a:	429a      	cmp	r2, r3
 800db8c:	d8d1      	bhi.n	800db32 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800db8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800db92:	3301      	adds	r3, #1
 800db94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800db98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800db9c:	2b01      	cmp	r3, #1
 800db9e:	d804      	bhi.n	800dbaa <USBH_ParseCfgDesc+0x13c>
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	885a      	ldrh	r2, [r3, #2]
 800dba4:	8afb      	ldrh	r3, [r7, #22]
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d8a4      	bhi.n	800daf4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800dbaa:	bf00      	nop
 800dbac:	3728      	adds	r7, #40	; 0x28
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}

0800dbb2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800dbb2:	b480      	push	{r7}
 800dbb4:	b083      	sub	sp, #12
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	6078      	str	r0, [r7, #4]
 800dbba:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	781a      	ldrb	r2, [r3, #0]
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	785a      	ldrb	r2, [r3, #1]
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	789a      	ldrb	r2, [r3, #2]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	78da      	ldrb	r2, [r3, #3]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	791a      	ldrb	r2, [r3, #4]
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	795a      	ldrb	r2, [r3, #5]
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	799a      	ldrb	r2, [r3, #6]
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	79da      	ldrb	r2, [r3, #7]
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	7a1a      	ldrb	r2, [r3, #8]
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	721a      	strb	r2, [r3, #8]
}
 800dc04:	bf00      	nop
 800dc06:	370c      	adds	r7, #12
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0e:	4770      	bx	lr

0800dc10 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800dc10:	b480      	push	{r7}
 800dc12:	b083      	sub	sp, #12
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	781a      	ldrb	r2, [r3, #0]
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	785a      	ldrb	r2, [r3, #1]
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	789a      	ldrb	r2, [r3, #2]
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	78da      	ldrb	r2, [r3, #3]
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	3304      	adds	r3, #4
 800dc3e:	781b      	ldrb	r3, [r3, #0]
 800dc40:	b29a      	uxth	r2, r3
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	3305      	adds	r3, #5
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	b29b      	uxth	r3, r3
 800dc4a:	021b      	lsls	r3, r3, #8
 800dc4c:	b29b      	uxth	r3, r3
 800dc4e:	4313      	orrs	r3, r2
 800dc50:	b29a      	uxth	r2, r3
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	799a      	ldrb	r2, [r3, #6]
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	719a      	strb	r2, [r3, #6]
}
 800dc5e:	bf00      	nop
 800dc60:	370c      	adds	r7, #12
 800dc62:	46bd      	mov	sp, r7
 800dc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc68:	4770      	bx	lr

0800dc6a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800dc6a:	b480      	push	{r7}
 800dc6c:	b087      	sub	sp, #28
 800dc6e:	af00      	add	r7, sp, #0
 800dc70:	60f8      	str	r0, [r7, #12]
 800dc72:	60b9      	str	r1, [r7, #8]
 800dc74:	4613      	mov	r3, r2
 800dc76:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	3301      	adds	r3, #1
 800dc7c:	781b      	ldrb	r3, [r3, #0]
 800dc7e:	2b03      	cmp	r3, #3
 800dc80:	d120      	bne.n	800dcc4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	1e9a      	subs	r2, r3, #2
 800dc88:	88fb      	ldrh	r3, [r7, #6]
 800dc8a:	4293      	cmp	r3, r2
 800dc8c:	bf28      	it	cs
 800dc8e:	4613      	movcs	r3, r2
 800dc90:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	3302      	adds	r3, #2
 800dc96:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800dc98:	2300      	movs	r3, #0
 800dc9a:	82fb      	strh	r3, [r7, #22]
 800dc9c:	e00b      	b.n	800dcb6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800dc9e:	8afb      	ldrh	r3, [r7, #22]
 800dca0:	68fa      	ldr	r2, [r7, #12]
 800dca2:	4413      	add	r3, r2
 800dca4:	781a      	ldrb	r2, [r3, #0]
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	701a      	strb	r2, [r3, #0]
      pdest++;
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	3301      	adds	r3, #1
 800dcae:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800dcb0:	8afb      	ldrh	r3, [r7, #22]
 800dcb2:	3302      	adds	r3, #2
 800dcb4:	82fb      	strh	r3, [r7, #22]
 800dcb6:	8afa      	ldrh	r2, [r7, #22]
 800dcb8:	8abb      	ldrh	r3, [r7, #20]
 800dcba:	429a      	cmp	r2, r3
 800dcbc:	d3ef      	bcc.n	800dc9e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	701a      	strb	r2, [r3, #0]
  }
}
 800dcc4:	bf00      	nop
 800dcc6:	371c      	adds	r7, #28
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcce:	4770      	bx	lr

0800dcd0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b085      	sub	sp, #20
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	881a      	ldrh	r2, [r3, #0]
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	4413      	add	r3, r2
 800dce6:	b29a      	uxth	r2, r3
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	781b      	ldrb	r3, [r3, #0]
 800dcf0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	4413      	add	r3, r2
 800dcf6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800dcf8:	68fb      	ldr	r3, [r7, #12]
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3714      	adds	r7, #20
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd04:	4770      	bx	lr

0800dd06 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800dd06:	b580      	push	{r7, lr}
 800dd08:	b086      	sub	sp, #24
 800dd0a:	af00      	add	r7, sp, #0
 800dd0c:	60f8      	str	r0, [r7, #12]
 800dd0e:	60b9      	str	r1, [r7, #8]
 800dd10:	4613      	mov	r3, r2
 800dd12:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800dd14:	2301      	movs	r3, #1
 800dd16:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	789b      	ldrb	r3, [r3, #2]
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d002      	beq.n	800dd26 <USBH_CtlReq+0x20>
 800dd20:	2b02      	cmp	r3, #2
 800dd22:	d01d      	beq.n	800dd60 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800dd24:	e043      	b.n	800ddae <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	68ba      	ldr	r2, [r7, #8]
 800dd2a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	88fa      	ldrh	r2, [r7, #6]
 800dd30:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	2201      	movs	r2, #1
 800dd36:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	2202      	movs	r2, #2
 800dd3c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800dd3e:	2301      	movs	r3, #1
 800dd40:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	2203      	movs	r2, #3
 800dd46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dd56:	2300      	movs	r3, #0
 800dd58:	2200      	movs	r2, #0
 800dd5a:	f003 f94b 	bl	8010ff4 <osMessageQueuePut>
      break;
 800dd5e:	e026      	b.n	800ddae <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800dd60:	68f8      	ldr	r0, [r7, #12]
 800dd62:	f000 f829 	bl	800ddb8 <USBH_HandleControl>
 800dd66:	4603      	mov	r3, r0
 800dd68:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800dd6a:	7dfb      	ldrb	r3, [r7, #23]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d002      	beq.n	800dd76 <USBH_CtlReq+0x70>
 800dd70:	7dfb      	ldrb	r3, [r7, #23]
 800dd72:	2b03      	cmp	r3, #3
 800dd74:	d106      	bne.n	800dd84 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	2201      	movs	r2, #1
 800dd7a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	761a      	strb	r2, [r3, #24]
 800dd82:	e005      	b.n	800dd90 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800dd84:	7dfb      	ldrb	r3, [r7, #23]
 800dd86:	2b02      	cmp	r3, #2
 800dd88:	d102      	bne.n	800dd90 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	2201      	movs	r2, #1
 800dd8e:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	2203      	movs	r2, #3
 800dd94:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dda4:	2300      	movs	r3, #0
 800dda6:	2200      	movs	r2, #0
 800dda8:	f003 f924 	bl	8010ff4 <osMessageQueuePut>
      break;
 800ddac:	bf00      	nop
  }
  return status;
 800ddae:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3718      	adds	r7, #24
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}

0800ddb8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b086      	sub	sp, #24
 800ddbc:	af02      	add	r7, sp, #8
 800ddbe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	7e1b      	ldrb	r3, [r3, #24]
 800ddcc:	3b01      	subs	r3, #1
 800ddce:	2b0a      	cmp	r3, #10
 800ddd0:	f200 822b 	bhi.w	800e22a <USBH_HandleControl+0x472>
 800ddd4:	a201      	add	r2, pc, #4	; (adr r2, 800dddc <USBH_HandleControl+0x24>)
 800ddd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddda:	bf00      	nop
 800dddc:	0800de09 	.word	0x0800de09
 800dde0:	0800de23 	.word	0x0800de23
 800dde4:	0800dec5 	.word	0x0800dec5
 800dde8:	0800deeb 	.word	0x0800deeb
 800ddec:	0800df77 	.word	0x0800df77
 800ddf0:	0800dfa3 	.word	0x0800dfa3
 800ddf4:	0800e065 	.word	0x0800e065
 800ddf8:	0800e087 	.word	0x0800e087
 800ddfc:	0800e119 	.word	0x0800e119
 800de00:	0800e141 	.word	0x0800e141
 800de04:	0800e1d3 	.word	0x0800e1d3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f103 0110 	add.w	r1, r3, #16
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	795b      	ldrb	r3, [r3, #5]
 800de12:	461a      	mov	r2, r3
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f000 fa19 	bl	800e24c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2202      	movs	r2, #2
 800de1e:	761a      	strb	r2, [r3, #24]
      break;
 800de20:	e20e      	b.n	800e240 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	795b      	ldrb	r3, [r3, #5]
 800de26:	4619      	mov	r1, r3
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f006 f8d9 	bl	8013fe0 <USBH_LL_GetURBState>
 800de2e:	4603      	mov	r3, r0
 800de30:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800de32:	7bbb      	ldrb	r3, [r7, #14]
 800de34:	2b01      	cmp	r3, #1
 800de36:	d12c      	bne.n	800de92 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	7c1b      	ldrb	r3, [r3, #16]
 800de3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800de40:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	8adb      	ldrh	r3, [r3, #22]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d00a      	beq.n	800de60 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800de4a:	7b7b      	ldrb	r3, [r7, #13]
 800de4c:	2b80      	cmp	r3, #128	; 0x80
 800de4e:	d103      	bne.n	800de58 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2203      	movs	r2, #3
 800de54:	761a      	strb	r2, [r3, #24]
 800de56:	e00d      	b.n	800de74 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2205      	movs	r2, #5
 800de5c:	761a      	strb	r2, [r3, #24]
 800de5e:	e009      	b.n	800de74 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800de60:	7b7b      	ldrb	r3, [r7, #13]
 800de62:	2b80      	cmp	r3, #128	; 0x80
 800de64:	d103      	bne.n	800de6e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2209      	movs	r2, #9
 800de6a:	761a      	strb	r2, [r3, #24]
 800de6c:	e002      	b.n	800de74 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2207      	movs	r2, #7
 800de72:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2203      	movs	r2, #3
 800de78:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800de88:	2300      	movs	r3, #0
 800de8a:	2200      	movs	r2, #0
 800de8c:	f003 f8b2 	bl	8010ff4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800de90:	e1cd      	b.n	800e22e <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800de92:	7bbb      	ldrb	r3, [r7, #14]
 800de94:	2b04      	cmp	r3, #4
 800de96:	d003      	beq.n	800dea0 <USBH_HandleControl+0xe8>
 800de98:	7bbb      	ldrb	r3, [r7, #14]
 800de9a:	2b02      	cmp	r3, #2
 800de9c:	f040 81c7 	bne.w	800e22e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	220b      	movs	r2, #11
 800dea4:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2203      	movs	r2, #3
 800deaa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800deba:	2300      	movs	r3, #0
 800debc:	2200      	movs	r2, #0
 800debe:	f003 f899 	bl	8010ff4 <osMessageQueuePut>
      break;
 800dec2:	e1b4      	b.n	800e22e <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800deca:	b29a      	uxth	r2, r3
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6899      	ldr	r1, [r3, #8]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	899a      	ldrh	r2, [r3, #12]
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	791b      	ldrb	r3, [r3, #4]
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	f000 f9f4 	bl	800e2ca <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2204      	movs	r2, #4
 800dee6:	761a      	strb	r2, [r3, #24]
      break;
 800dee8:	e1aa      	b.n	800e240 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	791b      	ldrb	r3, [r3, #4]
 800deee:	4619      	mov	r1, r3
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f006 f875 	bl	8013fe0 <USBH_LL_GetURBState>
 800def6:	4603      	mov	r3, r0
 800def8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800defa:	7bbb      	ldrb	r3, [r7, #14]
 800defc:	2b01      	cmp	r3, #1
 800defe:	d110      	bne.n	800df22 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2209      	movs	r2, #9
 800df04:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2203      	movs	r2, #3
 800df0a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800df1a:	2300      	movs	r3, #0
 800df1c:	2200      	movs	r2, #0
 800df1e:	f003 f869 	bl	8010ff4 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800df22:	7bbb      	ldrb	r3, [r7, #14]
 800df24:	2b05      	cmp	r3, #5
 800df26:	d110      	bne.n	800df4a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800df28:	2303      	movs	r3, #3
 800df2a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2203      	movs	r2, #3
 800df30:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800df40:	2300      	movs	r3, #0
 800df42:	2200      	movs	r2, #0
 800df44:	f003 f856 	bl	8010ff4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800df48:	e173      	b.n	800e232 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800df4a:	7bbb      	ldrb	r3, [r7, #14]
 800df4c:	2b04      	cmp	r3, #4
 800df4e:	f040 8170 	bne.w	800e232 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	220b      	movs	r2, #11
 800df56:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2203      	movs	r2, #3
 800df5c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800df6c:	2300      	movs	r3, #0
 800df6e:	2200      	movs	r2, #0
 800df70:	f003 f840 	bl	8010ff4 <osMessageQueuePut>
      break;
 800df74:	e15d      	b.n	800e232 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6899      	ldr	r1, [r3, #8]
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	899a      	ldrh	r2, [r3, #12]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	7958      	ldrb	r0, [r3, #5]
 800df82:	2301      	movs	r3, #1
 800df84:	9300      	str	r3, [sp, #0]
 800df86:	4603      	mov	r3, r0
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f000 f979 	bl	800e280 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800df94:	b29a      	uxth	r2, r3
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	2206      	movs	r2, #6
 800df9e:	761a      	strb	r2, [r3, #24]
      break;
 800dfa0:	e14e      	b.n	800e240 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	795b      	ldrb	r3, [r3, #5]
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f006 f819 	bl	8013fe0 <USBH_LL_GetURBState>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800dfb2:	7bbb      	ldrb	r3, [r7, #14]
 800dfb4:	2b01      	cmp	r3, #1
 800dfb6:	d111      	bne.n	800dfdc <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2207      	movs	r2, #7
 800dfbc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2203      	movs	r2, #3
 800dfc2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	f003 f80d 	bl	8010ff4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800dfda:	e12c      	b.n	800e236 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800dfdc:	7bbb      	ldrb	r3, [r7, #14]
 800dfde:	2b05      	cmp	r3, #5
 800dfe0:	d113      	bne.n	800e00a <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	220c      	movs	r2, #12
 800dfe6:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800dfe8:	2303      	movs	r3, #3
 800dfea:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2203      	movs	r2, #3
 800dff0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e000:	2300      	movs	r3, #0
 800e002:	2200      	movs	r2, #0
 800e004:	f002 fff6 	bl	8010ff4 <osMessageQueuePut>
      break;
 800e008:	e115      	b.n	800e236 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e00a:	7bbb      	ldrb	r3, [r7, #14]
 800e00c:	2b02      	cmp	r3, #2
 800e00e:	d111      	bne.n	800e034 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2205      	movs	r2, #5
 800e014:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2203      	movs	r2, #3
 800e01a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e02a:	2300      	movs	r3, #0
 800e02c:	2200      	movs	r2, #0
 800e02e:	f002 ffe1 	bl	8010ff4 <osMessageQueuePut>
      break;
 800e032:	e100      	b.n	800e236 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800e034:	7bbb      	ldrb	r3, [r7, #14]
 800e036:	2b04      	cmp	r3, #4
 800e038:	f040 80fd 	bne.w	800e236 <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	220b      	movs	r2, #11
 800e040:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e042:	2302      	movs	r3, #2
 800e044:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	2203      	movs	r2, #3
 800e04a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e05a:	2300      	movs	r3, #0
 800e05c:	2200      	movs	r2, #0
 800e05e:	f002 ffc9 	bl	8010ff4 <osMessageQueuePut>
      break;
 800e062:	e0e8      	b.n	800e236 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	791b      	ldrb	r3, [r3, #4]
 800e068:	2200      	movs	r2, #0
 800e06a:	2100      	movs	r1, #0
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	f000 f92c 	bl	800e2ca <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e078:	b29a      	uxth	r2, r3
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2208      	movs	r2, #8
 800e082:	761a      	strb	r2, [r3, #24]

      break;
 800e084:	e0dc      	b.n	800e240 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	791b      	ldrb	r3, [r3, #4]
 800e08a:	4619      	mov	r1, r3
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f005 ffa7 	bl	8013fe0 <USBH_LL_GetURBState>
 800e092:	4603      	mov	r3, r0
 800e094:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e096:	7bbb      	ldrb	r3, [r7, #14]
 800e098:	2b01      	cmp	r3, #1
 800e09a:	d113      	bne.n	800e0c4 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	220d      	movs	r2, #13
 800e0a0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2203      	movs	r2, #3
 800e0aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	2200      	movs	r2, #0
 800e0be:	f002 ff99 	bl	8010ff4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e0c2:	e0ba      	b.n	800e23a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800e0c4:	7bbb      	ldrb	r3, [r7, #14]
 800e0c6:	2b04      	cmp	r3, #4
 800e0c8:	d111      	bne.n	800e0ee <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	220b      	movs	r2, #11
 800e0ce:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2203      	movs	r2, #3
 800e0d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	f002 ff84 	bl	8010ff4 <osMessageQueuePut>
      break;
 800e0ec:	e0a5      	b.n	800e23a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800e0ee:	7bbb      	ldrb	r3, [r7, #14]
 800e0f0:	2b05      	cmp	r3, #5
 800e0f2:	f040 80a2 	bne.w	800e23a <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800e0f6:	2303      	movs	r3, #3
 800e0f8:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2203      	movs	r2, #3
 800e0fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e10e:	2300      	movs	r3, #0
 800e110:	2200      	movs	r2, #0
 800e112:	f002 ff6f 	bl	8010ff4 <osMessageQueuePut>
      break;
 800e116:	e090      	b.n	800e23a <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	795a      	ldrb	r2, [r3, #5]
 800e11c:	2301      	movs	r3, #1
 800e11e:	9300      	str	r3, [sp, #0]
 800e120:	4613      	mov	r3, r2
 800e122:	2200      	movs	r2, #0
 800e124:	2100      	movs	r1, #0
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	f000 f8aa 	bl	800e280 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e132:	b29a      	uxth	r2, r3
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	220a      	movs	r2, #10
 800e13c:	761a      	strb	r2, [r3, #24]
      break;
 800e13e:	e07f      	b.n	800e240 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	795b      	ldrb	r3, [r3, #5]
 800e144:	4619      	mov	r1, r3
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f005 ff4a 	bl	8013fe0 <USBH_LL_GetURBState>
 800e14c:	4603      	mov	r3, r0
 800e14e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e150:	7bbb      	ldrb	r3, [r7, #14]
 800e152:	2b01      	cmp	r3, #1
 800e154:	d113      	bne.n	800e17e <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800e156:	2300      	movs	r3, #0
 800e158:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	220d      	movs	r2, #13
 800e15e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2203      	movs	r2, #3
 800e164:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e174:	2300      	movs	r3, #0
 800e176:	2200      	movs	r2, #0
 800e178:	f002 ff3c 	bl	8010ff4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e17c:	e05f      	b.n	800e23e <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e17e:	7bbb      	ldrb	r3, [r7, #14]
 800e180:	2b02      	cmp	r3, #2
 800e182:	d111      	bne.n	800e1a8 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2209      	movs	r2, #9
 800e188:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2203      	movs	r2, #3
 800e18e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e19e:	2300      	movs	r3, #0
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	f002 ff27 	bl	8010ff4 <osMessageQueuePut>
      break;
 800e1a6:	e04a      	b.n	800e23e <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800e1a8:	7bbb      	ldrb	r3, [r7, #14]
 800e1aa:	2b04      	cmp	r3, #4
 800e1ac:	d147      	bne.n	800e23e <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	220b      	movs	r2, #11
 800e1b2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2203      	movs	r2, #3
 800e1b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	f002 ff12 	bl	8010ff4 <osMessageQueuePut>
      break;
 800e1d0:	e035      	b.n	800e23e <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	7e5b      	ldrb	r3, [r3, #25]
 800e1d6:	3301      	adds	r3, #1
 800e1d8:	b2da      	uxtb	r2, r3
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	765a      	strb	r2, [r3, #25]
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	7e5b      	ldrb	r3, [r3, #25]
 800e1e2:	2b02      	cmp	r3, #2
 800e1e4:	d806      	bhi.n	800e1f4 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2201      	movs	r2, #1
 800e1ea:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2201      	movs	r2, #1
 800e1f0:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e1f2:	e025      	b.n	800e240 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e1fa:	2106      	movs	r1, #6
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2200      	movs	r2, #0
 800e204:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	795b      	ldrb	r3, [r3, #5]
 800e20a:	4619      	mov	r1, r3
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f000 f90d 	bl	800e42c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	791b      	ldrb	r3, [r3, #4]
 800e216:	4619      	mov	r1, r3
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f000 f907 	bl	800e42c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2200      	movs	r2, #0
 800e222:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e224:	2302      	movs	r3, #2
 800e226:	73fb      	strb	r3, [r7, #15]
      break;
 800e228:	e00a      	b.n	800e240 <USBH_HandleControl+0x488>

    default:
      break;
 800e22a:	bf00      	nop
 800e22c:	e008      	b.n	800e240 <USBH_HandleControl+0x488>
      break;
 800e22e:	bf00      	nop
 800e230:	e006      	b.n	800e240 <USBH_HandleControl+0x488>
      break;
 800e232:	bf00      	nop
 800e234:	e004      	b.n	800e240 <USBH_HandleControl+0x488>
      break;
 800e236:	bf00      	nop
 800e238:	e002      	b.n	800e240 <USBH_HandleControl+0x488>
      break;
 800e23a:	bf00      	nop
 800e23c:	e000      	b.n	800e240 <USBH_HandleControl+0x488>
      break;
 800e23e:	bf00      	nop
  }

  return status;
 800e240:	7bfb      	ldrb	r3, [r7, #15]
}
 800e242:	4618      	mov	r0, r3
 800e244:	3710      	adds	r7, #16
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}
 800e24a:	bf00      	nop

0800e24c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b088      	sub	sp, #32
 800e250:	af04      	add	r7, sp, #16
 800e252:	60f8      	str	r0, [r7, #12]
 800e254:	60b9      	str	r1, [r7, #8]
 800e256:	4613      	mov	r3, r2
 800e258:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e25a:	79f9      	ldrb	r1, [r7, #7]
 800e25c:	2300      	movs	r3, #0
 800e25e:	9303      	str	r3, [sp, #12]
 800e260:	2308      	movs	r3, #8
 800e262:	9302      	str	r3, [sp, #8]
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	9301      	str	r3, [sp, #4]
 800e268:	2300      	movs	r3, #0
 800e26a:	9300      	str	r3, [sp, #0]
 800e26c:	2300      	movs	r3, #0
 800e26e:	2200      	movs	r2, #0
 800e270:	68f8      	ldr	r0, [r7, #12]
 800e272:	f005 fe84 	bl	8013f7e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800e276:	2300      	movs	r3, #0
}
 800e278:	4618      	mov	r0, r3
 800e27a:	3710      	adds	r7, #16
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}

0800e280 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b088      	sub	sp, #32
 800e284:	af04      	add	r7, sp, #16
 800e286:	60f8      	str	r0, [r7, #12]
 800e288:	60b9      	str	r1, [r7, #8]
 800e28a:	4611      	mov	r1, r2
 800e28c:	461a      	mov	r2, r3
 800e28e:	460b      	mov	r3, r1
 800e290:	80fb      	strh	r3, [r7, #6]
 800e292:	4613      	mov	r3, r2
 800e294:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d001      	beq.n	800e2a4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e2a4:	7979      	ldrb	r1, [r7, #5]
 800e2a6:	7e3b      	ldrb	r3, [r7, #24]
 800e2a8:	9303      	str	r3, [sp, #12]
 800e2aa:	88fb      	ldrh	r3, [r7, #6]
 800e2ac:	9302      	str	r3, [sp, #8]
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	9301      	str	r3, [sp, #4]
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	9300      	str	r3, [sp, #0]
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	68f8      	ldr	r0, [r7, #12]
 800e2bc:	f005 fe5f 	bl	8013f7e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e2c0:	2300      	movs	r3, #0
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3710      	adds	r7, #16
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}

0800e2ca <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e2ca:	b580      	push	{r7, lr}
 800e2cc:	b088      	sub	sp, #32
 800e2ce:	af04      	add	r7, sp, #16
 800e2d0:	60f8      	str	r0, [r7, #12]
 800e2d2:	60b9      	str	r1, [r7, #8]
 800e2d4:	4611      	mov	r1, r2
 800e2d6:	461a      	mov	r2, r3
 800e2d8:	460b      	mov	r3, r1
 800e2da:	80fb      	strh	r3, [r7, #6]
 800e2dc:	4613      	mov	r3, r2
 800e2de:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e2e0:	7979      	ldrb	r1, [r7, #5]
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	9303      	str	r3, [sp, #12]
 800e2e6:	88fb      	ldrh	r3, [r7, #6]
 800e2e8:	9302      	str	r3, [sp, #8]
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	9301      	str	r3, [sp, #4]
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	9300      	str	r3, [sp, #0]
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	2201      	movs	r2, #1
 800e2f6:	68f8      	ldr	r0, [r7, #12]
 800e2f8:	f005 fe41 	bl	8013f7e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e2fc:	2300      	movs	r3, #0

}
 800e2fe:	4618      	mov	r0, r3
 800e300:	3710      	adds	r7, #16
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}

0800e306 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e306:	b580      	push	{r7, lr}
 800e308:	b088      	sub	sp, #32
 800e30a:	af04      	add	r7, sp, #16
 800e30c:	60f8      	str	r0, [r7, #12]
 800e30e:	60b9      	str	r1, [r7, #8]
 800e310:	4611      	mov	r1, r2
 800e312:	461a      	mov	r2, r3
 800e314:	460b      	mov	r3, r1
 800e316:	80fb      	strh	r3, [r7, #6]
 800e318:	4613      	mov	r3, r2
 800e31a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e322:	2b00      	cmp	r3, #0
 800e324:	d001      	beq.n	800e32a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e326:	2300      	movs	r3, #0
 800e328:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e32a:	7979      	ldrb	r1, [r7, #5]
 800e32c:	7e3b      	ldrb	r3, [r7, #24]
 800e32e:	9303      	str	r3, [sp, #12]
 800e330:	88fb      	ldrh	r3, [r7, #6]
 800e332:	9302      	str	r3, [sp, #8]
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	9301      	str	r3, [sp, #4]
 800e338:	2301      	movs	r3, #1
 800e33a:	9300      	str	r3, [sp, #0]
 800e33c:	2302      	movs	r3, #2
 800e33e:	2200      	movs	r2, #0
 800e340:	68f8      	ldr	r0, [r7, #12]
 800e342:	f005 fe1c 	bl	8013f7e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e346:	2300      	movs	r3, #0
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3710      	adds	r7, #16
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}

0800e350 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b088      	sub	sp, #32
 800e354:	af04      	add	r7, sp, #16
 800e356:	60f8      	str	r0, [r7, #12]
 800e358:	60b9      	str	r1, [r7, #8]
 800e35a:	4611      	mov	r1, r2
 800e35c:	461a      	mov	r2, r3
 800e35e:	460b      	mov	r3, r1
 800e360:	80fb      	strh	r3, [r7, #6]
 800e362:	4613      	mov	r3, r2
 800e364:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e366:	7979      	ldrb	r1, [r7, #5]
 800e368:	2300      	movs	r3, #0
 800e36a:	9303      	str	r3, [sp, #12]
 800e36c:	88fb      	ldrh	r3, [r7, #6]
 800e36e:	9302      	str	r3, [sp, #8]
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	9301      	str	r3, [sp, #4]
 800e374:	2301      	movs	r3, #1
 800e376:	9300      	str	r3, [sp, #0]
 800e378:	2302      	movs	r3, #2
 800e37a:	2201      	movs	r2, #1
 800e37c:	68f8      	ldr	r0, [r7, #12]
 800e37e:	f005 fdfe 	bl	8013f7e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e382:	2300      	movs	r3, #0
}
 800e384:	4618      	mov	r0, r3
 800e386:	3710      	adds	r7, #16
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}

0800e38c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b086      	sub	sp, #24
 800e390:	af04      	add	r7, sp, #16
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	4608      	mov	r0, r1
 800e396:	4611      	mov	r1, r2
 800e398:	461a      	mov	r2, r3
 800e39a:	4603      	mov	r3, r0
 800e39c:	70fb      	strb	r3, [r7, #3]
 800e39e:	460b      	mov	r3, r1
 800e3a0:	70bb      	strb	r3, [r7, #2]
 800e3a2:	4613      	mov	r3, r2
 800e3a4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e3a6:	7878      	ldrb	r0, [r7, #1]
 800e3a8:	78ba      	ldrb	r2, [r7, #2]
 800e3aa:	78f9      	ldrb	r1, [r7, #3]
 800e3ac:	8b3b      	ldrh	r3, [r7, #24]
 800e3ae:	9302      	str	r3, [sp, #8]
 800e3b0:	7d3b      	ldrb	r3, [r7, #20]
 800e3b2:	9301      	str	r3, [sp, #4]
 800e3b4:	7c3b      	ldrb	r3, [r7, #16]
 800e3b6:	9300      	str	r3, [sp, #0]
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f005 fd91 	bl	8013ee2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800e3c0:	2300      	movs	r3, #0
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	3708      	adds	r7, #8
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}

0800e3ca <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e3ca:	b580      	push	{r7, lr}
 800e3cc:	b082      	sub	sp, #8
 800e3ce:	af00      	add	r7, sp, #0
 800e3d0:	6078      	str	r0, [r7, #4]
 800e3d2:	460b      	mov	r3, r1
 800e3d4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800e3d6:	78fb      	ldrb	r3, [r7, #3]
 800e3d8:	4619      	mov	r1, r3
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f005 fdb0 	bl	8013f40 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e3e0:	2300      	movs	r3, #0
}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	3708      	adds	r7, #8
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}

0800e3ea <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e3ea:	b580      	push	{r7, lr}
 800e3ec:	b084      	sub	sp, #16
 800e3ee:	af00      	add	r7, sp, #0
 800e3f0:	6078      	str	r0, [r7, #4]
 800e3f2:	460b      	mov	r3, r1
 800e3f4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f000 f836 	bl	800e468 <USBH_GetFreePipe>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e400:	89fb      	ldrh	r3, [r7, #14]
 800e402:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e406:	4293      	cmp	r3, r2
 800e408:	d00a      	beq.n	800e420 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800e40a:	78fa      	ldrb	r2, [r7, #3]
 800e40c:	89fb      	ldrh	r3, [r7, #14]
 800e40e:	f003 030f 	and.w	r3, r3, #15
 800e412:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e416:	6879      	ldr	r1, [r7, #4]
 800e418:	33e0      	adds	r3, #224	; 0xe0
 800e41a:	009b      	lsls	r3, r3, #2
 800e41c:	440b      	add	r3, r1
 800e41e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e420:	89fb      	ldrh	r3, [r7, #14]
 800e422:	b2db      	uxtb	r3, r3
}
 800e424:	4618      	mov	r0, r3
 800e426:	3710      	adds	r7, #16
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}

0800e42c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e42c:	b480      	push	{r7}
 800e42e:	b083      	sub	sp, #12
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
 800e434:	460b      	mov	r3, r1
 800e436:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800e438:	78fb      	ldrb	r3, [r7, #3]
 800e43a:	2b0a      	cmp	r3, #10
 800e43c:	d80d      	bhi.n	800e45a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e43e:	78fb      	ldrb	r3, [r7, #3]
 800e440:	687a      	ldr	r2, [r7, #4]
 800e442:	33e0      	adds	r3, #224	; 0xe0
 800e444:	009b      	lsls	r3, r3, #2
 800e446:	4413      	add	r3, r2
 800e448:	685a      	ldr	r2, [r3, #4]
 800e44a:	78fb      	ldrb	r3, [r7, #3]
 800e44c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e450:	6879      	ldr	r1, [r7, #4]
 800e452:	33e0      	adds	r3, #224	; 0xe0
 800e454:	009b      	lsls	r3, r3, #2
 800e456:	440b      	add	r3, r1
 800e458:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e45a:	2300      	movs	r3, #0
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	370c      	adds	r7, #12
 800e460:	46bd      	mov	sp, r7
 800e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e466:	4770      	bx	lr

0800e468 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e468:	b480      	push	{r7}
 800e46a:	b085      	sub	sp, #20
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e470:	2300      	movs	r3, #0
 800e472:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800e474:	2300      	movs	r3, #0
 800e476:	73fb      	strb	r3, [r7, #15]
 800e478:	e00f      	b.n	800e49a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e47a:	7bfb      	ldrb	r3, [r7, #15]
 800e47c:	687a      	ldr	r2, [r7, #4]
 800e47e:	33e0      	adds	r3, #224	; 0xe0
 800e480:	009b      	lsls	r3, r3, #2
 800e482:	4413      	add	r3, r2
 800e484:	685b      	ldr	r3, [r3, #4]
 800e486:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d102      	bne.n	800e494 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e48e:	7bfb      	ldrb	r3, [r7, #15]
 800e490:	b29b      	uxth	r3, r3
 800e492:	e007      	b.n	800e4a4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800e494:	7bfb      	ldrb	r3, [r7, #15]
 800e496:	3301      	adds	r3, #1
 800e498:	73fb      	strb	r3, [r7, #15]
 800e49a:	7bfb      	ldrb	r3, [r7, #15]
 800e49c:	2b0a      	cmp	r3, #10
 800e49e:	d9ec      	bls.n	800e47a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e4a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	3714      	adds	r7, #20
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ae:	4770      	bx	lr

0800e4b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b084      	sub	sp, #16
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e4ba:	79fb      	ldrb	r3, [r7, #7]
 800e4bc:	4a08      	ldr	r2, [pc, #32]	; (800e4e0 <disk_status+0x30>)
 800e4be:	009b      	lsls	r3, r3, #2
 800e4c0:	4413      	add	r3, r2
 800e4c2:	685b      	ldr	r3, [r3, #4]
 800e4c4:	685b      	ldr	r3, [r3, #4]
 800e4c6:	79fa      	ldrb	r2, [r7, #7]
 800e4c8:	4905      	ldr	r1, [pc, #20]	; (800e4e0 <disk_status+0x30>)
 800e4ca:	440a      	add	r2, r1
 800e4cc:	7b12      	ldrb	r2, [r2, #12]
 800e4ce:	4610      	mov	r0, r2
 800e4d0:	4798      	blx	r3
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e4d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3710      	adds	r7, #16
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}
 800e4e0:	20000260 	.word	0x20000260

0800e4e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b084      	sub	sp, #16
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e4f2:	79fb      	ldrb	r3, [r7, #7]
 800e4f4:	4a0d      	ldr	r2, [pc, #52]	; (800e52c <disk_initialize+0x48>)
 800e4f6:	5cd3      	ldrb	r3, [r2, r3]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d111      	bne.n	800e520 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e4fc:	79fb      	ldrb	r3, [r7, #7]
 800e4fe:	4a0b      	ldr	r2, [pc, #44]	; (800e52c <disk_initialize+0x48>)
 800e500:	2101      	movs	r1, #1
 800e502:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e504:	79fb      	ldrb	r3, [r7, #7]
 800e506:	4a09      	ldr	r2, [pc, #36]	; (800e52c <disk_initialize+0x48>)
 800e508:	009b      	lsls	r3, r3, #2
 800e50a:	4413      	add	r3, r2
 800e50c:	685b      	ldr	r3, [r3, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	79fa      	ldrb	r2, [r7, #7]
 800e512:	4906      	ldr	r1, [pc, #24]	; (800e52c <disk_initialize+0x48>)
 800e514:	440a      	add	r2, r1
 800e516:	7b12      	ldrb	r2, [r2, #12]
 800e518:	4610      	mov	r0, r2
 800e51a:	4798      	blx	r3
 800e51c:	4603      	mov	r3, r0
 800e51e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e520:	7bfb      	ldrb	r3, [r7, #15]
}
 800e522:	4618      	mov	r0, r3
 800e524:	3710      	adds	r7, #16
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}
 800e52a:	bf00      	nop
 800e52c:	20000260 	.word	0x20000260

0800e530 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e530:	b590      	push	{r4, r7, lr}
 800e532:	b087      	sub	sp, #28
 800e534:	af00      	add	r7, sp, #0
 800e536:	60b9      	str	r1, [r7, #8]
 800e538:	607a      	str	r2, [r7, #4]
 800e53a:	603b      	str	r3, [r7, #0]
 800e53c:	4603      	mov	r3, r0
 800e53e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e540:	7bfb      	ldrb	r3, [r7, #15]
 800e542:	4a0a      	ldr	r2, [pc, #40]	; (800e56c <disk_read+0x3c>)
 800e544:	009b      	lsls	r3, r3, #2
 800e546:	4413      	add	r3, r2
 800e548:	685b      	ldr	r3, [r3, #4]
 800e54a:	689c      	ldr	r4, [r3, #8]
 800e54c:	7bfb      	ldrb	r3, [r7, #15]
 800e54e:	4a07      	ldr	r2, [pc, #28]	; (800e56c <disk_read+0x3c>)
 800e550:	4413      	add	r3, r2
 800e552:	7b18      	ldrb	r0, [r3, #12]
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	687a      	ldr	r2, [r7, #4]
 800e558:	68b9      	ldr	r1, [r7, #8]
 800e55a:	47a0      	blx	r4
 800e55c:	4603      	mov	r3, r0
 800e55e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e560:	7dfb      	ldrb	r3, [r7, #23]
}
 800e562:	4618      	mov	r0, r3
 800e564:	371c      	adds	r7, #28
 800e566:	46bd      	mov	sp, r7
 800e568:	bd90      	pop	{r4, r7, pc}
 800e56a:	bf00      	nop
 800e56c:	20000260 	.word	0x20000260

0800e570 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e570:	b590      	push	{r4, r7, lr}
 800e572:	b087      	sub	sp, #28
 800e574:	af00      	add	r7, sp, #0
 800e576:	60b9      	str	r1, [r7, #8]
 800e578:	607a      	str	r2, [r7, #4]
 800e57a:	603b      	str	r3, [r7, #0]
 800e57c:	4603      	mov	r3, r0
 800e57e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e580:	7bfb      	ldrb	r3, [r7, #15]
 800e582:	4a0a      	ldr	r2, [pc, #40]	; (800e5ac <disk_write+0x3c>)
 800e584:	009b      	lsls	r3, r3, #2
 800e586:	4413      	add	r3, r2
 800e588:	685b      	ldr	r3, [r3, #4]
 800e58a:	68dc      	ldr	r4, [r3, #12]
 800e58c:	7bfb      	ldrb	r3, [r7, #15]
 800e58e:	4a07      	ldr	r2, [pc, #28]	; (800e5ac <disk_write+0x3c>)
 800e590:	4413      	add	r3, r2
 800e592:	7b18      	ldrb	r0, [r3, #12]
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	687a      	ldr	r2, [r7, #4]
 800e598:	68b9      	ldr	r1, [r7, #8]
 800e59a:	47a0      	blx	r4
 800e59c:	4603      	mov	r3, r0
 800e59e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e5a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	371c      	adds	r7, #28
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd90      	pop	{r4, r7, pc}
 800e5aa:	bf00      	nop
 800e5ac:	20000260 	.word	0x20000260

0800e5b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b084      	sub	sp, #16
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	603a      	str	r2, [r7, #0]
 800e5ba:	71fb      	strb	r3, [r7, #7]
 800e5bc:	460b      	mov	r3, r1
 800e5be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e5c0:	79fb      	ldrb	r3, [r7, #7]
 800e5c2:	4a09      	ldr	r2, [pc, #36]	; (800e5e8 <disk_ioctl+0x38>)
 800e5c4:	009b      	lsls	r3, r3, #2
 800e5c6:	4413      	add	r3, r2
 800e5c8:	685b      	ldr	r3, [r3, #4]
 800e5ca:	691b      	ldr	r3, [r3, #16]
 800e5cc:	79fa      	ldrb	r2, [r7, #7]
 800e5ce:	4906      	ldr	r1, [pc, #24]	; (800e5e8 <disk_ioctl+0x38>)
 800e5d0:	440a      	add	r2, r1
 800e5d2:	7b10      	ldrb	r0, [r2, #12]
 800e5d4:	79b9      	ldrb	r1, [r7, #6]
 800e5d6:	683a      	ldr	r2, [r7, #0]
 800e5d8:	4798      	blx	r3
 800e5da:	4603      	mov	r3, r0
 800e5dc:	73fb      	strb	r3, [r7, #15]
  return res;
 800e5de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3710      	adds	r7, #16
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}
 800e5e8:	20000260 	.word	0x20000260

0800e5ec <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 800e5ec:	b480      	push	{r7}
 800e5ee:	af00      	add	r7, sp, #0
  return 0;
 800e5f0:	2300      	movs	r3, #0
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fa:	4770      	bx	lr

0800e5fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e5fc:	b480      	push	{r7}
 800e5fe:	b085      	sub	sp, #20
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	3301      	adds	r3, #1
 800e608:	781b      	ldrb	r3, [r3, #0]
 800e60a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e60c:	89fb      	ldrh	r3, [r7, #14]
 800e60e:	021b      	lsls	r3, r3, #8
 800e610:	b21a      	sxth	r2, r3
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	781b      	ldrb	r3, [r3, #0]
 800e616:	b21b      	sxth	r3, r3
 800e618:	4313      	orrs	r3, r2
 800e61a:	b21b      	sxth	r3, r3
 800e61c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e61e:	89fb      	ldrh	r3, [r7, #14]
}
 800e620:	4618      	mov	r0, r3
 800e622:	3714      	adds	r7, #20
 800e624:	46bd      	mov	sp, r7
 800e626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62a:	4770      	bx	lr

0800e62c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e62c:	b480      	push	{r7}
 800e62e:	b085      	sub	sp, #20
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	3303      	adds	r3, #3
 800e638:	781b      	ldrb	r3, [r3, #0]
 800e63a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	021b      	lsls	r3, r3, #8
 800e640:	687a      	ldr	r2, [r7, #4]
 800e642:	3202      	adds	r2, #2
 800e644:	7812      	ldrb	r2, [r2, #0]
 800e646:	4313      	orrs	r3, r2
 800e648:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	021b      	lsls	r3, r3, #8
 800e64e:	687a      	ldr	r2, [r7, #4]
 800e650:	3201      	adds	r2, #1
 800e652:	7812      	ldrb	r2, [r2, #0]
 800e654:	4313      	orrs	r3, r2
 800e656:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	021b      	lsls	r3, r3, #8
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	7812      	ldrb	r2, [r2, #0]
 800e660:	4313      	orrs	r3, r2
 800e662:	60fb      	str	r3, [r7, #12]
	return rv;
 800e664:	68fb      	ldr	r3, [r7, #12]
}
 800e666:	4618      	mov	r0, r3
 800e668:	3714      	adds	r7, #20
 800e66a:	46bd      	mov	sp, r7
 800e66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e670:	4770      	bx	lr

0800e672 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e672:	b480      	push	{r7}
 800e674:	b083      	sub	sp, #12
 800e676:	af00      	add	r7, sp, #0
 800e678:	6078      	str	r0, [r7, #4]
 800e67a:	460b      	mov	r3, r1
 800e67c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	1c5a      	adds	r2, r3, #1
 800e682:	607a      	str	r2, [r7, #4]
 800e684:	887a      	ldrh	r2, [r7, #2]
 800e686:	b2d2      	uxtb	r2, r2
 800e688:	701a      	strb	r2, [r3, #0]
 800e68a:	887b      	ldrh	r3, [r7, #2]
 800e68c:	0a1b      	lsrs	r3, r3, #8
 800e68e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	1c5a      	adds	r2, r3, #1
 800e694:	607a      	str	r2, [r7, #4]
 800e696:	887a      	ldrh	r2, [r7, #2]
 800e698:	b2d2      	uxtb	r2, r2
 800e69a:	701a      	strb	r2, [r3, #0]
}
 800e69c:	bf00      	nop
 800e69e:	370c      	adds	r7, #12
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr

0800e6a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b083      	sub	sp, #12
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	1c5a      	adds	r2, r3, #1
 800e6b6:	607a      	str	r2, [r7, #4]
 800e6b8:	683a      	ldr	r2, [r7, #0]
 800e6ba:	b2d2      	uxtb	r2, r2
 800e6bc:	701a      	strb	r2, [r3, #0]
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	0a1b      	lsrs	r3, r3, #8
 800e6c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	1c5a      	adds	r2, r3, #1
 800e6c8:	607a      	str	r2, [r7, #4]
 800e6ca:	683a      	ldr	r2, [r7, #0]
 800e6cc:	b2d2      	uxtb	r2, r2
 800e6ce:	701a      	strb	r2, [r3, #0]
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	0a1b      	lsrs	r3, r3, #8
 800e6d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	1c5a      	adds	r2, r3, #1
 800e6da:	607a      	str	r2, [r7, #4]
 800e6dc:	683a      	ldr	r2, [r7, #0]
 800e6de:	b2d2      	uxtb	r2, r2
 800e6e0:	701a      	strb	r2, [r3, #0]
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	0a1b      	lsrs	r3, r3, #8
 800e6e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	1c5a      	adds	r2, r3, #1
 800e6ec:	607a      	str	r2, [r7, #4]
 800e6ee:	683a      	ldr	r2, [r7, #0]
 800e6f0:	b2d2      	uxtb	r2, r2
 800e6f2:	701a      	strb	r2, [r3, #0]
}
 800e6f4:	bf00      	nop
 800e6f6:	370c      	adds	r7, #12
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fe:	4770      	bx	lr

0800e700 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e700:	b480      	push	{r7}
 800e702:	b087      	sub	sp, #28
 800e704:	af00      	add	r7, sp, #0
 800e706:	60f8      	str	r0, [r7, #12]
 800e708:	60b9      	str	r1, [r7, #8]
 800e70a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e710:	68bb      	ldr	r3, [r7, #8]
 800e712:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d00d      	beq.n	800e736 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e71a:	693a      	ldr	r2, [r7, #16]
 800e71c:	1c53      	adds	r3, r2, #1
 800e71e:	613b      	str	r3, [r7, #16]
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	1c59      	adds	r1, r3, #1
 800e724:	6179      	str	r1, [r7, #20]
 800e726:	7812      	ldrb	r2, [r2, #0]
 800e728:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	3b01      	subs	r3, #1
 800e72e:	607b      	str	r3, [r7, #4]
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d1f1      	bne.n	800e71a <mem_cpy+0x1a>
	}
}
 800e736:	bf00      	nop
 800e738:	371c      	adds	r7, #28
 800e73a:	46bd      	mov	sp, r7
 800e73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e740:	4770      	bx	lr

0800e742 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e742:	b480      	push	{r7}
 800e744:	b087      	sub	sp, #28
 800e746:	af00      	add	r7, sp, #0
 800e748:	60f8      	str	r0, [r7, #12]
 800e74a:	60b9      	str	r1, [r7, #8]
 800e74c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	1c5a      	adds	r2, r3, #1
 800e756:	617a      	str	r2, [r7, #20]
 800e758:	68ba      	ldr	r2, [r7, #8]
 800e75a:	b2d2      	uxtb	r2, r2
 800e75c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	3b01      	subs	r3, #1
 800e762:	607b      	str	r3, [r7, #4]
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d1f3      	bne.n	800e752 <mem_set+0x10>
}
 800e76a:	bf00      	nop
 800e76c:	371c      	adds	r7, #28
 800e76e:	46bd      	mov	sp, r7
 800e770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e774:	4770      	bx	lr

0800e776 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e776:	b480      	push	{r7}
 800e778:	b089      	sub	sp, #36	; 0x24
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	60f8      	str	r0, [r7, #12]
 800e77e:	60b9      	str	r1, [r7, #8]
 800e780:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	61fb      	str	r3, [r7, #28]
 800e786:	68bb      	ldr	r3, [r7, #8]
 800e788:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e78a:	2300      	movs	r3, #0
 800e78c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e78e:	69fb      	ldr	r3, [r7, #28]
 800e790:	1c5a      	adds	r2, r3, #1
 800e792:	61fa      	str	r2, [r7, #28]
 800e794:	781b      	ldrb	r3, [r3, #0]
 800e796:	4619      	mov	r1, r3
 800e798:	69bb      	ldr	r3, [r7, #24]
 800e79a:	1c5a      	adds	r2, r3, #1
 800e79c:	61ba      	str	r2, [r7, #24]
 800e79e:	781b      	ldrb	r3, [r3, #0]
 800e7a0:	1acb      	subs	r3, r1, r3
 800e7a2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	3b01      	subs	r3, #1
 800e7a8:	607b      	str	r3, [r7, #4]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d002      	beq.n	800e7b6 <mem_cmp+0x40>
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d0eb      	beq.n	800e78e <mem_cmp+0x18>

	return r;
 800e7b6:	697b      	ldr	r3, [r7, #20]
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	3724      	adds	r7, #36	; 0x24
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c2:	4770      	bx	lr

0800e7c4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e7c4:	b480      	push	{r7}
 800e7c6:	b083      	sub	sp, #12
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e7ce:	e002      	b.n	800e7d6 <chk_chr+0x12>
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	3301      	adds	r3, #1
 800e7d4:	607b      	str	r3, [r7, #4]
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	781b      	ldrb	r3, [r3, #0]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d005      	beq.n	800e7ea <chk_chr+0x26>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	781b      	ldrb	r3, [r3, #0]
 800e7e2:	461a      	mov	r2, r3
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	4293      	cmp	r3, r2
 800e7e8:	d1f2      	bne.n	800e7d0 <chk_chr+0xc>
	return *str;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	781b      	ldrb	r3, [r3, #0]
}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	370c      	adds	r7, #12
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f8:	4770      	bx	lr
	...

0800e7fc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e7fc:	b480      	push	{r7}
 800e7fe:	b085      	sub	sp, #20
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
 800e804:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e806:	2300      	movs	r3, #0
 800e808:	60bb      	str	r3, [r7, #8]
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	60fb      	str	r3, [r7, #12]
 800e80e:	e029      	b.n	800e864 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e810:	4a27      	ldr	r2, [pc, #156]	; (800e8b0 <chk_lock+0xb4>)
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	011b      	lsls	r3, r3, #4
 800e816:	4413      	add	r3, r2
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d01d      	beq.n	800e85a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e81e:	4a24      	ldr	r2, [pc, #144]	; (800e8b0 <chk_lock+0xb4>)
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	011b      	lsls	r3, r3, #4
 800e824:	4413      	add	r3, r2
 800e826:	681a      	ldr	r2, [r3, #0]
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	429a      	cmp	r2, r3
 800e82e:	d116      	bne.n	800e85e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e830:	4a1f      	ldr	r2, [pc, #124]	; (800e8b0 <chk_lock+0xb4>)
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	011b      	lsls	r3, r3, #4
 800e836:	4413      	add	r3, r2
 800e838:	3304      	adds	r3, #4
 800e83a:	681a      	ldr	r2, [r3, #0]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e840:	429a      	cmp	r2, r3
 800e842:	d10c      	bne.n	800e85e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e844:	4a1a      	ldr	r2, [pc, #104]	; (800e8b0 <chk_lock+0xb4>)
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	011b      	lsls	r3, r3, #4
 800e84a:	4413      	add	r3, r2
 800e84c:	3308      	adds	r3, #8
 800e84e:	681a      	ldr	r2, [r3, #0]
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e854:	429a      	cmp	r2, r3
 800e856:	d102      	bne.n	800e85e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e858:	e007      	b.n	800e86a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e85a:	2301      	movs	r3, #1
 800e85c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	3301      	adds	r3, #1
 800e862:	60fb      	str	r3, [r7, #12]
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	2b01      	cmp	r3, #1
 800e868:	d9d2      	bls.n	800e810 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	2b02      	cmp	r3, #2
 800e86e:	d109      	bne.n	800e884 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d102      	bne.n	800e87c <chk_lock+0x80>
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	2b02      	cmp	r3, #2
 800e87a:	d101      	bne.n	800e880 <chk_lock+0x84>
 800e87c:	2300      	movs	r3, #0
 800e87e:	e010      	b.n	800e8a2 <chk_lock+0xa6>
 800e880:	2312      	movs	r3, #18
 800e882:	e00e      	b.n	800e8a2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d108      	bne.n	800e89c <chk_lock+0xa0>
 800e88a:	4a09      	ldr	r2, [pc, #36]	; (800e8b0 <chk_lock+0xb4>)
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	011b      	lsls	r3, r3, #4
 800e890:	4413      	add	r3, r2
 800e892:	330c      	adds	r3, #12
 800e894:	881b      	ldrh	r3, [r3, #0]
 800e896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e89a:	d101      	bne.n	800e8a0 <chk_lock+0xa4>
 800e89c:	2310      	movs	r3, #16
 800e89e:	e000      	b.n	800e8a2 <chk_lock+0xa6>
 800e8a0:	2300      	movs	r3, #0
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	3714      	adds	r7, #20
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ac:	4770      	bx	lr
 800e8ae:	bf00      	nop
 800e8b0:	20000240 	.word	0x20000240

0800e8b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	b083      	sub	sp, #12
 800e8b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	607b      	str	r3, [r7, #4]
 800e8be:	e002      	b.n	800e8c6 <enq_lock+0x12>
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	3301      	adds	r3, #1
 800e8c4:	607b      	str	r3, [r7, #4]
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2b01      	cmp	r3, #1
 800e8ca:	d806      	bhi.n	800e8da <enq_lock+0x26>
 800e8cc:	4a09      	ldr	r2, [pc, #36]	; (800e8f4 <enq_lock+0x40>)
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	011b      	lsls	r3, r3, #4
 800e8d2:	4413      	add	r3, r2
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d1f2      	bne.n	800e8c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2b02      	cmp	r3, #2
 800e8de:	bf14      	ite	ne
 800e8e0:	2301      	movne	r3, #1
 800e8e2:	2300      	moveq	r3, #0
 800e8e4:	b2db      	uxtb	r3, r3
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	370c      	adds	r7, #12
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f0:	4770      	bx	lr
 800e8f2:	bf00      	nop
 800e8f4:	20000240 	.word	0x20000240

0800e8f8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b085      	sub	sp, #20
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e902:	2300      	movs	r3, #0
 800e904:	60fb      	str	r3, [r7, #12]
 800e906:	e01f      	b.n	800e948 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e908:	4a41      	ldr	r2, [pc, #260]	; (800ea10 <inc_lock+0x118>)
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	011b      	lsls	r3, r3, #4
 800e90e:	4413      	add	r3, r2
 800e910:	681a      	ldr	r2, [r3, #0]
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	429a      	cmp	r2, r3
 800e918:	d113      	bne.n	800e942 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e91a:	4a3d      	ldr	r2, [pc, #244]	; (800ea10 <inc_lock+0x118>)
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	011b      	lsls	r3, r3, #4
 800e920:	4413      	add	r3, r2
 800e922:	3304      	adds	r3, #4
 800e924:	681a      	ldr	r2, [r3, #0]
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e92a:	429a      	cmp	r2, r3
 800e92c:	d109      	bne.n	800e942 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e92e:	4a38      	ldr	r2, [pc, #224]	; (800ea10 <inc_lock+0x118>)
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	011b      	lsls	r3, r3, #4
 800e934:	4413      	add	r3, r2
 800e936:	3308      	adds	r3, #8
 800e938:	681a      	ldr	r2, [r3, #0]
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e93e:	429a      	cmp	r2, r3
 800e940:	d006      	beq.n	800e950 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	3301      	adds	r3, #1
 800e946:	60fb      	str	r3, [r7, #12]
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	2b01      	cmp	r3, #1
 800e94c:	d9dc      	bls.n	800e908 <inc_lock+0x10>
 800e94e:	e000      	b.n	800e952 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e950:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	2b02      	cmp	r3, #2
 800e956:	d132      	bne.n	800e9be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e958:	2300      	movs	r3, #0
 800e95a:	60fb      	str	r3, [r7, #12]
 800e95c:	e002      	b.n	800e964 <inc_lock+0x6c>
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	3301      	adds	r3, #1
 800e962:	60fb      	str	r3, [r7, #12]
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	2b01      	cmp	r3, #1
 800e968:	d806      	bhi.n	800e978 <inc_lock+0x80>
 800e96a:	4a29      	ldr	r2, [pc, #164]	; (800ea10 <inc_lock+0x118>)
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	011b      	lsls	r3, r3, #4
 800e970:	4413      	add	r3, r2
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d1f2      	bne.n	800e95e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	2b02      	cmp	r3, #2
 800e97c:	d101      	bne.n	800e982 <inc_lock+0x8a>
 800e97e:	2300      	movs	r3, #0
 800e980:	e040      	b.n	800ea04 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681a      	ldr	r2, [r3, #0]
 800e986:	4922      	ldr	r1, [pc, #136]	; (800ea10 <inc_lock+0x118>)
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	011b      	lsls	r3, r3, #4
 800e98c:	440b      	add	r3, r1
 800e98e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	689a      	ldr	r2, [r3, #8]
 800e994:	491e      	ldr	r1, [pc, #120]	; (800ea10 <inc_lock+0x118>)
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	011b      	lsls	r3, r3, #4
 800e99a:	440b      	add	r3, r1
 800e99c:	3304      	adds	r3, #4
 800e99e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	695a      	ldr	r2, [r3, #20]
 800e9a4:	491a      	ldr	r1, [pc, #104]	; (800ea10 <inc_lock+0x118>)
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	011b      	lsls	r3, r3, #4
 800e9aa:	440b      	add	r3, r1
 800e9ac:	3308      	adds	r3, #8
 800e9ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e9b0:	4a17      	ldr	r2, [pc, #92]	; (800ea10 <inc_lock+0x118>)
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	011b      	lsls	r3, r3, #4
 800e9b6:	4413      	add	r3, r2
 800e9b8:	330c      	adds	r3, #12
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d009      	beq.n	800e9d8 <inc_lock+0xe0>
 800e9c4:	4a12      	ldr	r2, [pc, #72]	; (800ea10 <inc_lock+0x118>)
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	011b      	lsls	r3, r3, #4
 800e9ca:	4413      	add	r3, r2
 800e9cc:	330c      	adds	r3, #12
 800e9ce:	881b      	ldrh	r3, [r3, #0]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d001      	beq.n	800e9d8 <inc_lock+0xe0>
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	e015      	b.n	800ea04 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d108      	bne.n	800e9f0 <inc_lock+0xf8>
 800e9de:	4a0c      	ldr	r2, [pc, #48]	; (800ea10 <inc_lock+0x118>)
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	011b      	lsls	r3, r3, #4
 800e9e4:	4413      	add	r3, r2
 800e9e6:	330c      	adds	r3, #12
 800e9e8:	881b      	ldrh	r3, [r3, #0]
 800e9ea:	3301      	adds	r3, #1
 800e9ec:	b29a      	uxth	r2, r3
 800e9ee:	e001      	b.n	800e9f4 <inc_lock+0xfc>
 800e9f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e9f4:	4906      	ldr	r1, [pc, #24]	; (800ea10 <inc_lock+0x118>)
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	011b      	lsls	r3, r3, #4
 800e9fa:	440b      	add	r3, r1
 800e9fc:	330c      	adds	r3, #12
 800e9fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	3301      	adds	r3, #1
}
 800ea04:	4618      	mov	r0, r3
 800ea06:	3714      	adds	r7, #20
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0e:	4770      	bx	lr
 800ea10:	20000240 	.word	0x20000240

0800ea14 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ea14:	b480      	push	{r7}
 800ea16:	b085      	sub	sp, #20
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	3b01      	subs	r3, #1
 800ea20:	607b      	str	r3, [r7, #4]
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2b01      	cmp	r3, #1
 800ea26:	d825      	bhi.n	800ea74 <dec_lock+0x60>
		n = Files[i].ctr;
 800ea28:	4a17      	ldr	r2, [pc, #92]	; (800ea88 <dec_lock+0x74>)
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	011b      	lsls	r3, r3, #4
 800ea2e:	4413      	add	r3, r2
 800ea30:	330c      	adds	r3, #12
 800ea32:	881b      	ldrh	r3, [r3, #0]
 800ea34:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ea36:	89fb      	ldrh	r3, [r7, #14]
 800ea38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea3c:	d101      	bne.n	800ea42 <dec_lock+0x2e>
 800ea3e:	2300      	movs	r3, #0
 800ea40:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ea42:	89fb      	ldrh	r3, [r7, #14]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d002      	beq.n	800ea4e <dec_lock+0x3a>
 800ea48:	89fb      	ldrh	r3, [r7, #14]
 800ea4a:	3b01      	subs	r3, #1
 800ea4c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ea4e:	4a0e      	ldr	r2, [pc, #56]	; (800ea88 <dec_lock+0x74>)
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	011b      	lsls	r3, r3, #4
 800ea54:	4413      	add	r3, r2
 800ea56:	330c      	adds	r3, #12
 800ea58:	89fa      	ldrh	r2, [r7, #14]
 800ea5a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ea5c:	89fb      	ldrh	r3, [r7, #14]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d105      	bne.n	800ea6e <dec_lock+0x5a>
 800ea62:	4a09      	ldr	r2, [pc, #36]	; (800ea88 <dec_lock+0x74>)
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	011b      	lsls	r3, r3, #4
 800ea68:	4413      	add	r3, r2
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	737b      	strb	r3, [r7, #13]
 800ea72:	e001      	b.n	800ea78 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ea74:	2302      	movs	r3, #2
 800ea76:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ea78:	7b7b      	ldrb	r3, [r7, #13]
}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	3714      	adds	r7, #20
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea84:	4770      	bx	lr
 800ea86:	bf00      	nop
 800ea88:	20000240 	.word	0x20000240

0800ea8c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	b085      	sub	sp, #20
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ea94:	2300      	movs	r3, #0
 800ea96:	60fb      	str	r3, [r7, #12]
 800ea98:	e010      	b.n	800eabc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ea9a:	4a0d      	ldr	r2, [pc, #52]	; (800ead0 <clear_lock+0x44>)
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	011b      	lsls	r3, r3, #4
 800eaa0:	4413      	add	r3, r2
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	687a      	ldr	r2, [r7, #4]
 800eaa6:	429a      	cmp	r2, r3
 800eaa8:	d105      	bne.n	800eab6 <clear_lock+0x2a>
 800eaaa:	4a09      	ldr	r2, [pc, #36]	; (800ead0 <clear_lock+0x44>)
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	011b      	lsls	r3, r3, #4
 800eab0:	4413      	add	r3, r2
 800eab2:	2200      	movs	r2, #0
 800eab4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	3301      	adds	r3, #1
 800eaba:	60fb      	str	r3, [r7, #12]
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	2b01      	cmp	r3, #1
 800eac0:	d9eb      	bls.n	800ea9a <clear_lock+0xe>
	}
}
 800eac2:	bf00      	nop
 800eac4:	3714      	adds	r7, #20
 800eac6:	46bd      	mov	sp, r7
 800eac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eacc:	4770      	bx	lr
 800eace:	bf00      	nop
 800ead0:	20000240 	.word	0x20000240

0800ead4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b086      	sub	sp, #24
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800eadc:	2300      	movs	r3, #0
 800eade:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	78db      	ldrb	r3, [r3, #3]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d034      	beq.n	800eb52 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	7858      	ldrb	r0, [r3, #1]
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eaf8:	2301      	movs	r3, #1
 800eafa:	697a      	ldr	r2, [r7, #20]
 800eafc:	f7ff fd38 	bl	800e570 <disk_write>
 800eb00:	4603      	mov	r3, r0
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d002      	beq.n	800eb0c <sync_window+0x38>
			res = FR_DISK_ERR;
 800eb06:	2301      	movs	r3, #1
 800eb08:	73fb      	strb	r3, [r7, #15]
 800eb0a:	e022      	b.n	800eb52 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6a1b      	ldr	r3, [r3, #32]
 800eb16:	697a      	ldr	r2, [r7, #20]
 800eb18:	1ad2      	subs	r2, r2, r3
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	699b      	ldr	r3, [r3, #24]
 800eb1e:	429a      	cmp	r2, r3
 800eb20:	d217      	bcs.n	800eb52 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	789b      	ldrb	r3, [r3, #2]
 800eb26:	613b      	str	r3, [r7, #16]
 800eb28:	e010      	b.n	800eb4c <sync_window+0x78>
					wsect += fs->fsize;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	699b      	ldr	r3, [r3, #24]
 800eb2e:	697a      	ldr	r2, [r7, #20]
 800eb30:	4413      	add	r3, r2
 800eb32:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	7858      	ldrb	r0, [r3, #1]
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eb3e:	2301      	movs	r3, #1
 800eb40:	697a      	ldr	r2, [r7, #20]
 800eb42:	f7ff fd15 	bl	800e570 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800eb46:	693b      	ldr	r3, [r7, #16]
 800eb48:	3b01      	subs	r3, #1
 800eb4a:	613b      	str	r3, [r7, #16]
 800eb4c:	693b      	ldr	r3, [r7, #16]
 800eb4e:	2b01      	cmp	r3, #1
 800eb50:	d8eb      	bhi.n	800eb2a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800eb52:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3718      	adds	r7, #24
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}

0800eb5c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b084      	sub	sp, #16
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800eb66:	2300      	movs	r3, #0
 800eb68:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb6e:	683a      	ldr	r2, [r7, #0]
 800eb70:	429a      	cmp	r2, r3
 800eb72:	d01b      	beq.n	800ebac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f7ff ffad 	bl	800ead4 <sync_window>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800eb7e:	7bfb      	ldrb	r3, [r7, #15]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d113      	bne.n	800ebac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	7858      	ldrb	r0, [r3, #1]
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eb8e:	2301      	movs	r3, #1
 800eb90:	683a      	ldr	r2, [r7, #0]
 800eb92:	f7ff fccd 	bl	800e530 <disk_read>
 800eb96:	4603      	mov	r3, r0
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d004      	beq.n	800eba6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800eb9c:	f04f 33ff 	mov.w	r3, #4294967295
 800eba0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800eba2:	2301      	movs	r3, #1
 800eba4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	683a      	ldr	r2, [r7, #0]
 800ebaa:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800ebac:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebae:	4618      	mov	r0, r3
 800ebb0:	3710      	adds	r7, #16
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd80      	pop	{r7, pc}
	...

0800ebb8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b084      	sub	sp, #16
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f7ff ff87 	bl	800ead4 <sync_window>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ebca:	7bfb      	ldrb	r3, [r7, #15]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d158      	bne.n	800ec82 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	781b      	ldrb	r3, [r3, #0]
 800ebd4:	2b03      	cmp	r3, #3
 800ebd6:	d148      	bne.n	800ec6a <sync_fs+0xb2>
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	791b      	ldrb	r3, [r3, #4]
 800ebdc:	2b01      	cmp	r3, #1
 800ebde:	d144      	bne.n	800ec6a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	3330      	adds	r3, #48	; 0x30
 800ebe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ebe8:	2100      	movs	r1, #0
 800ebea:	4618      	mov	r0, r3
 800ebec:	f7ff fda9 	bl	800e742 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	3330      	adds	r3, #48	; 0x30
 800ebf4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ebf8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f7ff fd38 	bl	800e672 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	3330      	adds	r3, #48	; 0x30
 800ec06:	4921      	ldr	r1, [pc, #132]	; (800ec8c <sync_fs+0xd4>)
 800ec08:	4618      	mov	r0, r3
 800ec0a:	f7ff fd4d 	bl	800e6a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	3330      	adds	r3, #48	; 0x30
 800ec12:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ec16:	491e      	ldr	r1, [pc, #120]	; (800ec90 <sync_fs+0xd8>)
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f7ff fd45 	bl	800e6a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	3330      	adds	r3, #48	; 0x30
 800ec22:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	691b      	ldr	r3, [r3, #16]
 800ec2a:	4619      	mov	r1, r3
 800ec2c:	4610      	mov	r0, r2
 800ec2e:	f7ff fd3b 	bl	800e6a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	3330      	adds	r3, #48	; 0x30
 800ec36:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	68db      	ldr	r3, [r3, #12]
 800ec3e:	4619      	mov	r1, r3
 800ec40:	4610      	mov	r0, r2
 800ec42:	f7ff fd31 	bl	800e6a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	69db      	ldr	r3, [r3, #28]
 800ec4a:	1c5a      	adds	r2, r3, #1
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	7858      	ldrb	r0, [r3, #1]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec5e:	2301      	movs	r3, #1
 800ec60:	f7ff fc86 	bl	800e570 <disk_write>
			fs->fsi_flag = 0;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2200      	movs	r2, #0
 800ec68:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	785b      	ldrb	r3, [r3, #1]
 800ec6e:	2200      	movs	r2, #0
 800ec70:	2100      	movs	r1, #0
 800ec72:	4618      	mov	r0, r3
 800ec74:	f7ff fc9c 	bl	800e5b0 <disk_ioctl>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d001      	beq.n	800ec82 <sync_fs+0xca>
 800ec7e:	2301      	movs	r3, #1
 800ec80:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ec82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec84:	4618      	mov	r0, r3
 800ec86:	3710      	adds	r7, #16
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}
 800ec8c:	41615252 	.word	0x41615252
 800ec90:	61417272 	.word	0x61417272

0800ec94 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ec94:	b480      	push	{r7}
 800ec96:	b083      	sub	sp, #12
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	3b02      	subs	r3, #2
 800eca2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	695b      	ldr	r3, [r3, #20]
 800eca8:	3b02      	subs	r3, #2
 800ecaa:	683a      	ldr	r2, [r7, #0]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d301      	bcc.n	800ecb4 <clust2sect+0x20>
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	e008      	b.n	800ecc6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	895b      	ldrh	r3, [r3, #10]
 800ecb8:	461a      	mov	r2, r3
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	fb03 f202 	mul.w	r2, r3, r2
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecc4:	4413      	add	r3, r2
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	370c      	adds	r7, #12
 800ecca:	46bd      	mov	sp, r7
 800eccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd0:	4770      	bx	lr

0800ecd2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ecd2:	b580      	push	{r7, lr}
 800ecd4:	b086      	sub	sp, #24
 800ecd6:	af00      	add	r7, sp, #0
 800ecd8:	6078      	str	r0, [r7, #4]
 800ecda:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	2b01      	cmp	r3, #1
 800ece6:	d904      	bls.n	800ecf2 <get_fat+0x20>
 800ece8:	693b      	ldr	r3, [r7, #16]
 800ecea:	695b      	ldr	r3, [r3, #20]
 800ecec:	683a      	ldr	r2, [r7, #0]
 800ecee:	429a      	cmp	r2, r3
 800ecf0:	d302      	bcc.n	800ecf8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	617b      	str	r3, [r7, #20]
 800ecf6:	e08c      	b.n	800ee12 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ecf8:	f04f 33ff 	mov.w	r3, #4294967295
 800ecfc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ecfe:	693b      	ldr	r3, [r7, #16]
 800ed00:	781b      	ldrb	r3, [r3, #0]
 800ed02:	2b02      	cmp	r3, #2
 800ed04:	d045      	beq.n	800ed92 <get_fat+0xc0>
 800ed06:	2b03      	cmp	r3, #3
 800ed08:	d05d      	beq.n	800edc6 <get_fat+0xf4>
 800ed0a:	2b01      	cmp	r3, #1
 800ed0c:	d177      	bne.n	800edfe <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	60fb      	str	r3, [r7, #12]
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	085b      	lsrs	r3, r3, #1
 800ed16:	68fa      	ldr	r2, [r7, #12]
 800ed18:	4413      	add	r3, r2
 800ed1a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ed1c:	693b      	ldr	r3, [r7, #16]
 800ed1e:	6a1a      	ldr	r2, [r3, #32]
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	0a5b      	lsrs	r3, r3, #9
 800ed24:	4413      	add	r3, r2
 800ed26:	4619      	mov	r1, r3
 800ed28:	6938      	ldr	r0, [r7, #16]
 800ed2a:	f7ff ff17 	bl	800eb5c <move_window>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d167      	bne.n	800ee04 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	1c5a      	adds	r2, r3, #1
 800ed38:	60fa      	str	r2, [r7, #12]
 800ed3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed3e:	693a      	ldr	r2, [r7, #16]
 800ed40:	4413      	add	r3, r2
 800ed42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ed46:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ed48:	693b      	ldr	r3, [r7, #16]
 800ed4a:	6a1a      	ldr	r2, [r3, #32]
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	0a5b      	lsrs	r3, r3, #9
 800ed50:	4413      	add	r3, r2
 800ed52:	4619      	mov	r1, r3
 800ed54:	6938      	ldr	r0, [r7, #16]
 800ed56:	f7ff ff01 	bl	800eb5c <move_window>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d153      	bne.n	800ee08 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed66:	693a      	ldr	r2, [r7, #16]
 800ed68:	4413      	add	r3, r2
 800ed6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ed6e:	021b      	lsls	r3, r3, #8
 800ed70:	461a      	mov	r2, r3
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	4313      	orrs	r3, r2
 800ed76:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	f003 0301 	and.w	r3, r3, #1
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d002      	beq.n	800ed88 <get_fat+0xb6>
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	091b      	lsrs	r3, r3, #4
 800ed86:	e002      	b.n	800ed8e <get_fat+0xbc>
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ed8e:	617b      	str	r3, [r7, #20]
			break;
 800ed90:	e03f      	b.n	800ee12 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ed92:	693b      	ldr	r3, [r7, #16]
 800ed94:	6a1a      	ldr	r2, [r3, #32]
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	0a1b      	lsrs	r3, r3, #8
 800ed9a:	4413      	add	r3, r2
 800ed9c:	4619      	mov	r1, r3
 800ed9e:	6938      	ldr	r0, [r7, #16]
 800eda0:	f7ff fedc 	bl	800eb5c <move_window>
 800eda4:	4603      	mov	r3, r0
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d130      	bne.n	800ee0c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800edaa:	693b      	ldr	r3, [r7, #16]
 800edac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	005b      	lsls	r3, r3, #1
 800edb4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800edb8:	4413      	add	r3, r2
 800edba:	4618      	mov	r0, r3
 800edbc:	f7ff fc1e 	bl	800e5fc <ld_word>
 800edc0:	4603      	mov	r3, r0
 800edc2:	617b      	str	r3, [r7, #20]
			break;
 800edc4:	e025      	b.n	800ee12 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800edc6:	693b      	ldr	r3, [r7, #16]
 800edc8:	6a1a      	ldr	r2, [r3, #32]
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	09db      	lsrs	r3, r3, #7
 800edce:	4413      	add	r3, r2
 800edd0:	4619      	mov	r1, r3
 800edd2:	6938      	ldr	r0, [r7, #16]
 800edd4:	f7ff fec2 	bl	800eb5c <move_window>
 800edd8:	4603      	mov	r3, r0
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d118      	bne.n	800ee10 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800edde:	693b      	ldr	r3, [r7, #16]
 800ede0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	009b      	lsls	r3, r3, #2
 800ede8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800edec:	4413      	add	r3, r2
 800edee:	4618      	mov	r0, r3
 800edf0:	f7ff fc1c 	bl	800e62c <ld_dword>
 800edf4:	4603      	mov	r3, r0
 800edf6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800edfa:	617b      	str	r3, [r7, #20]
			break;
 800edfc:	e009      	b.n	800ee12 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800edfe:	2301      	movs	r3, #1
 800ee00:	617b      	str	r3, [r7, #20]
 800ee02:	e006      	b.n	800ee12 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ee04:	bf00      	nop
 800ee06:	e004      	b.n	800ee12 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ee08:	bf00      	nop
 800ee0a:	e002      	b.n	800ee12 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ee0c:	bf00      	nop
 800ee0e:	e000      	b.n	800ee12 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ee10:	bf00      	nop
		}
	}

	return val;
 800ee12:	697b      	ldr	r3, [r7, #20]
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3718      	adds	r7, #24
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}

0800ee1c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ee1c:	b590      	push	{r4, r7, lr}
 800ee1e:	b089      	sub	sp, #36	; 0x24
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	60f8      	str	r0, [r7, #12]
 800ee24:	60b9      	str	r1, [r7, #8]
 800ee26:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ee28:	2302      	movs	r3, #2
 800ee2a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	2b01      	cmp	r3, #1
 800ee30:	f240 80d6 	bls.w	800efe0 <put_fat+0x1c4>
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	695b      	ldr	r3, [r3, #20]
 800ee38:	68ba      	ldr	r2, [r7, #8]
 800ee3a:	429a      	cmp	r2, r3
 800ee3c:	f080 80d0 	bcs.w	800efe0 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	2b02      	cmp	r3, #2
 800ee46:	d073      	beq.n	800ef30 <put_fat+0x114>
 800ee48:	2b03      	cmp	r3, #3
 800ee4a:	f000 8091 	beq.w	800ef70 <put_fat+0x154>
 800ee4e:	2b01      	cmp	r3, #1
 800ee50:	f040 80c6 	bne.w	800efe0 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	61bb      	str	r3, [r7, #24]
 800ee58:	69bb      	ldr	r3, [r7, #24]
 800ee5a:	085b      	lsrs	r3, r3, #1
 800ee5c:	69ba      	ldr	r2, [r7, #24]
 800ee5e:	4413      	add	r3, r2
 800ee60:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	6a1a      	ldr	r2, [r3, #32]
 800ee66:	69bb      	ldr	r3, [r7, #24]
 800ee68:	0a5b      	lsrs	r3, r3, #9
 800ee6a:	4413      	add	r3, r2
 800ee6c:	4619      	mov	r1, r3
 800ee6e:	68f8      	ldr	r0, [r7, #12]
 800ee70:	f7ff fe74 	bl	800eb5c <move_window>
 800ee74:	4603      	mov	r3, r0
 800ee76:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ee78:	7ffb      	ldrb	r3, [r7, #31]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	f040 80a9 	bne.w	800efd2 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ee86:	69bb      	ldr	r3, [r7, #24]
 800ee88:	1c59      	adds	r1, r3, #1
 800ee8a:	61b9      	str	r1, [r7, #24]
 800ee8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee90:	4413      	add	r3, r2
 800ee92:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	f003 0301 	and.w	r3, r3, #1
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d00d      	beq.n	800eeba <put_fat+0x9e>
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	781b      	ldrb	r3, [r3, #0]
 800eea2:	b25b      	sxtb	r3, r3
 800eea4:	f003 030f 	and.w	r3, r3, #15
 800eea8:	b25a      	sxtb	r2, r3
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	b2db      	uxtb	r3, r3
 800eeae:	011b      	lsls	r3, r3, #4
 800eeb0:	b25b      	sxtb	r3, r3
 800eeb2:	4313      	orrs	r3, r2
 800eeb4:	b25b      	sxtb	r3, r3
 800eeb6:	b2db      	uxtb	r3, r3
 800eeb8:	e001      	b.n	800eebe <put_fat+0xa2>
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	b2db      	uxtb	r3, r3
 800eebe:	697a      	ldr	r2, [r7, #20]
 800eec0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	2201      	movs	r2, #1
 800eec6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	6a1a      	ldr	r2, [r3, #32]
 800eecc:	69bb      	ldr	r3, [r7, #24]
 800eece:	0a5b      	lsrs	r3, r3, #9
 800eed0:	4413      	add	r3, r2
 800eed2:	4619      	mov	r1, r3
 800eed4:	68f8      	ldr	r0, [r7, #12]
 800eed6:	f7ff fe41 	bl	800eb5c <move_window>
 800eeda:	4603      	mov	r3, r0
 800eedc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eede:	7ffb      	ldrb	r3, [r7, #31]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d178      	bne.n	800efd6 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eeea:	69bb      	ldr	r3, [r7, #24]
 800eeec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eef0:	4413      	add	r3, r2
 800eef2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800eef4:	68bb      	ldr	r3, [r7, #8]
 800eef6:	f003 0301 	and.w	r3, r3, #1
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d003      	beq.n	800ef06 <put_fat+0xea>
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	091b      	lsrs	r3, r3, #4
 800ef02:	b2db      	uxtb	r3, r3
 800ef04:	e00e      	b.n	800ef24 <put_fat+0x108>
 800ef06:	697b      	ldr	r3, [r7, #20]
 800ef08:	781b      	ldrb	r3, [r3, #0]
 800ef0a:	b25b      	sxtb	r3, r3
 800ef0c:	f023 030f 	bic.w	r3, r3, #15
 800ef10:	b25a      	sxtb	r2, r3
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	0a1b      	lsrs	r3, r3, #8
 800ef16:	b25b      	sxtb	r3, r3
 800ef18:	f003 030f 	and.w	r3, r3, #15
 800ef1c:	b25b      	sxtb	r3, r3
 800ef1e:	4313      	orrs	r3, r2
 800ef20:	b25b      	sxtb	r3, r3
 800ef22:	b2db      	uxtb	r3, r3
 800ef24:	697a      	ldr	r2, [r7, #20]
 800ef26:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	70da      	strb	r2, [r3, #3]
			break;
 800ef2e:	e057      	b.n	800efe0 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	6a1a      	ldr	r2, [r3, #32]
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	0a1b      	lsrs	r3, r3, #8
 800ef38:	4413      	add	r3, r2
 800ef3a:	4619      	mov	r1, r3
 800ef3c:	68f8      	ldr	r0, [r7, #12]
 800ef3e:	f7ff fe0d 	bl	800eb5c <move_window>
 800ef42:	4603      	mov	r3, r0
 800ef44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ef46:	7ffb      	ldrb	r3, [r7, #31]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d146      	bne.n	800efda <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	005b      	lsls	r3, r3, #1
 800ef56:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ef5a:	4413      	add	r3, r2
 800ef5c:	687a      	ldr	r2, [r7, #4]
 800ef5e:	b292      	uxth	r2, r2
 800ef60:	4611      	mov	r1, r2
 800ef62:	4618      	mov	r0, r3
 800ef64:	f7ff fb85 	bl	800e672 <st_word>
			fs->wflag = 1;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	2201      	movs	r2, #1
 800ef6c:	70da      	strb	r2, [r3, #3]
			break;
 800ef6e:	e037      	b.n	800efe0 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	6a1a      	ldr	r2, [r3, #32]
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	09db      	lsrs	r3, r3, #7
 800ef78:	4413      	add	r3, r2
 800ef7a:	4619      	mov	r1, r3
 800ef7c:	68f8      	ldr	r0, [r7, #12]
 800ef7e:	f7ff fded 	bl	800eb5c <move_window>
 800ef82:	4603      	mov	r3, r0
 800ef84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ef86:	7ffb      	ldrb	r3, [r7, #31]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d128      	bne.n	800efde <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	009b      	lsls	r3, r3, #2
 800ef9c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800efa0:	4413      	add	r3, r2
 800efa2:	4618      	mov	r0, r3
 800efa4:	f7ff fb42 	bl	800e62c <ld_dword>
 800efa8:	4603      	mov	r3, r0
 800efaa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800efae:	4323      	orrs	r3, r4
 800efb0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	009b      	lsls	r3, r3, #2
 800efbc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800efc0:	4413      	add	r3, r2
 800efc2:	6879      	ldr	r1, [r7, #4]
 800efc4:	4618      	mov	r0, r3
 800efc6:	f7ff fb6f 	bl	800e6a8 <st_dword>
			fs->wflag = 1;
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	2201      	movs	r2, #1
 800efce:	70da      	strb	r2, [r3, #3]
			break;
 800efd0:	e006      	b.n	800efe0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800efd2:	bf00      	nop
 800efd4:	e004      	b.n	800efe0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800efd6:	bf00      	nop
 800efd8:	e002      	b.n	800efe0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800efda:	bf00      	nop
 800efdc:	e000      	b.n	800efe0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800efde:	bf00      	nop
		}
	}
	return res;
 800efe0:	7ffb      	ldrb	r3, [r7, #31]
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	3724      	adds	r7, #36	; 0x24
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd90      	pop	{r4, r7, pc}

0800efea <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800efea:	b580      	push	{r7, lr}
 800efec:	b088      	sub	sp, #32
 800efee:	af00      	add	r7, sp, #0
 800eff0:	60f8      	str	r0, [r7, #12]
 800eff2:	60b9      	str	r1, [r7, #8]
 800eff4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800eff6:	2300      	movs	r3, #0
 800eff8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	2b01      	cmp	r3, #1
 800f004:	d904      	bls.n	800f010 <remove_chain+0x26>
 800f006:	69bb      	ldr	r3, [r7, #24]
 800f008:	695b      	ldr	r3, [r3, #20]
 800f00a:	68ba      	ldr	r2, [r7, #8]
 800f00c:	429a      	cmp	r2, r3
 800f00e:	d301      	bcc.n	800f014 <remove_chain+0x2a>
 800f010:	2302      	movs	r3, #2
 800f012:	e04b      	b.n	800f0ac <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d00c      	beq.n	800f034 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f01a:	f04f 32ff 	mov.w	r2, #4294967295
 800f01e:	6879      	ldr	r1, [r7, #4]
 800f020:	69b8      	ldr	r0, [r7, #24]
 800f022:	f7ff fefb 	bl	800ee1c <put_fat>
 800f026:	4603      	mov	r3, r0
 800f028:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f02a:	7ffb      	ldrb	r3, [r7, #31]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d001      	beq.n	800f034 <remove_chain+0x4a>
 800f030:	7ffb      	ldrb	r3, [r7, #31]
 800f032:	e03b      	b.n	800f0ac <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f034:	68b9      	ldr	r1, [r7, #8]
 800f036:	68f8      	ldr	r0, [r7, #12]
 800f038:	f7ff fe4b 	bl	800ecd2 <get_fat>
 800f03c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d031      	beq.n	800f0a8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f044:	697b      	ldr	r3, [r7, #20]
 800f046:	2b01      	cmp	r3, #1
 800f048:	d101      	bne.n	800f04e <remove_chain+0x64>
 800f04a:	2302      	movs	r3, #2
 800f04c:	e02e      	b.n	800f0ac <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f054:	d101      	bne.n	800f05a <remove_chain+0x70>
 800f056:	2301      	movs	r3, #1
 800f058:	e028      	b.n	800f0ac <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f05a:	2200      	movs	r2, #0
 800f05c:	68b9      	ldr	r1, [r7, #8]
 800f05e:	69b8      	ldr	r0, [r7, #24]
 800f060:	f7ff fedc 	bl	800ee1c <put_fat>
 800f064:	4603      	mov	r3, r0
 800f066:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f068:	7ffb      	ldrb	r3, [r7, #31]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d001      	beq.n	800f072 <remove_chain+0x88>
 800f06e:	7ffb      	ldrb	r3, [r7, #31]
 800f070:	e01c      	b.n	800f0ac <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f072:	69bb      	ldr	r3, [r7, #24]
 800f074:	691a      	ldr	r2, [r3, #16]
 800f076:	69bb      	ldr	r3, [r7, #24]
 800f078:	695b      	ldr	r3, [r3, #20]
 800f07a:	3b02      	subs	r3, #2
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d20b      	bcs.n	800f098 <remove_chain+0xae>
			fs->free_clst++;
 800f080:	69bb      	ldr	r3, [r7, #24]
 800f082:	691b      	ldr	r3, [r3, #16]
 800f084:	1c5a      	adds	r2, r3, #1
 800f086:	69bb      	ldr	r3, [r7, #24]
 800f088:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800f08a:	69bb      	ldr	r3, [r7, #24]
 800f08c:	791b      	ldrb	r3, [r3, #4]
 800f08e:	f043 0301 	orr.w	r3, r3, #1
 800f092:	b2da      	uxtb	r2, r3
 800f094:	69bb      	ldr	r3, [r7, #24]
 800f096:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f09c:	69bb      	ldr	r3, [r7, #24]
 800f09e:	695b      	ldr	r3, [r3, #20]
 800f0a0:	68ba      	ldr	r2, [r7, #8]
 800f0a2:	429a      	cmp	r2, r3
 800f0a4:	d3c6      	bcc.n	800f034 <remove_chain+0x4a>
 800f0a6:	e000      	b.n	800f0aa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f0a8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f0aa:	2300      	movs	r3, #0
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	3720      	adds	r7, #32
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}

0800f0b4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b088      	sub	sp, #32
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d10d      	bne.n	800f0e6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f0ca:	693b      	ldr	r3, [r7, #16]
 800f0cc:	68db      	ldr	r3, [r3, #12]
 800f0ce:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f0d0:	69bb      	ldr	r3, [r7, #24]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d004      	beq.n	800f0e0 <create_chain+0x2c>
 800f0d6:	693b      	ldr	r3, [r7, #16]
 800f0d8:	695b      	ldr	r3, [r3, #20]
 800f0da:	69ba      	ldr	r2, [r7, #24]
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	d31b      	bcc.n	800f118 <create_chain+0x64>
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	61bb      	str	r3, [r7, #24]
 800f0e4:	e018      	b.n	800f118 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f0e6:	6839      	ldr	r1, [r7, #0]
 800f0e8:	6878      	ldr	r0, [r7, #4]
 800f0ea:	f7ff fdf2 	bl	800ecd2 <get_fat>
 800f0ee:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	2b01      	cmp	r3, #1
 800f0f4:	d801      	bhi.n	800f0fa <create_chain+0x46>
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	e070      	b.n	800f1dc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f100:	d101      	bne.n	800f106 <create_chain+0x52>
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	e06a      	b.n	800f1dc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f106:	693b      	ldr	r3, [r7, #16]
 800f108:	695b      	ldr	r3, [r3, #20]
 800f10a:	68fa      	ldr	r2, [r7, #12]
 800f10c:	429a      	cmp	r2, r3
 800f10e:	d201      	bcs.n	800f114 <create_chain+0x60>
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	e063      	b.n	800f1dc <create_chain+0x128>
		scl = clst;
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f118:	69bb      	ldr	r3, [r7, #24]
 800f11a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f11c:	69fb      	ldr	r3, [r7, #28]
 800f11e:	3301      	adds	r3, #1
 800f120:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f122:	693b      	ldr	r3, [r7, #16]
 800f124:	695b      	ldr	r3, [r3, #20]
 800f126:	69fa      	ldr	r2, [r7, #28]
 800f128:	429a      	cmp	r2, r3
 800f12a:	d307      	bcc.n	800f13c <create_chain+0x88>
				ncl = 2;
 800f12c:	2302      	movs	r3, #2
 800f12e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f130:	69fa      	ldr	r2, [r7, #28]
 800f132:	69bb      	ldr	r3, [r7, #24]
 800f134:	429a      	cmp	r2, r3
 800f136:	d901      	bls.n	800f13c <create_chain+0x88>
 800f138:	2300      	movs	r3, #0
 800f13a:	e04f      	b.n	800f1dc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f13c:	69f9      	ldr	r1, [r7, #28]
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f7ff fdc7 	bl	800ecd2 <get_fat>
 800f144:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d00e      	beq.n	800f16a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	2b01      	cmp	r3, #1
 800f150:	d003      	beq.n	800f15a <create_chain+0xa6>
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f158:	d101      	bne.n	800f15e <create_chain+0xaa>
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	e03e      	b.n	800f1dc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f15e:	69fa      	ldr	r2, [r7, #28]
 800f160:	69bb      	ldr	r3, [r7, #24]
 800f162:	429a      	cmp	r2, r3
 800f164:	d1da      	bne.n	800f11c <create_chain+0x68>
 800f166:	2300      	movs	r3, #0
 800f168:	e038      	b.n	800f1dc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f16a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f16c:	f04f 32ff 	mov.w	r2, #4294967295
 800f170:	69f9      	ldr	r1, [r7, #28]
 800f172:	6938      	ldr	r0, [r7, #16]
 800f174:	f7ff fe52 	bl	800ee1c <put_fat>
 800f178:	4603      	mov	r3, r0
 800f17a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f17c:	7dfb      	ldrb	r3, [r7, #23]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d109      	bne.n	800f196 <create_chain+0xe2>
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d006      	beq.n	800f196 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f188:	69fa      	ldr	r2, [r7, #28]
 800f18a:	6839      	ldr	r1, [r7, #0]
 800f18c:	6938      	ldr	r0, [r7, #16]
 800f18e:	f7ff fe45 	bl	800ee1c <put_fat>
 800f192:	4603      	mov	r3, r0
 800f194:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f196:	7dfb      	ldrb	r3, [r7, #23]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d116      	bne.n	800f1ca <create_chain+0x116>
		fs->last_clst = ncl;
 800f19c:	693b      	ldr	r3, [r7, #16]
 800f19e:	69fa      	ldr	r2, [r7, #28]
 800f1a0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f1a2:	693b      	ldr	r3, [r7, #16]
 800f1a4:	691a      	ldr	r2, [r3, #16]
 800f1a6:	693b      	ldr	r3, [r7, #16]
 800f1a8:	695b      	ldr	r3, [r3, #20]
 800f1aa:	3b02      	subs	r3, #2
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	d804      	bhi.n	800f1ba <create_chain+0x106>
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	691b      	ldr	r3, [r3, #16]
 800f1b4:	1e5a      	subs	r2, r3, #1
 800f1b6:	693b      	ldr	r3, [r7, #16]
 800f1b8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800f1ba:	693b      	ldr	r3, [r7, #16]
 800f1bc:	791b      	ldrb	r3, [r3, #4]
 800f1be:	f043 0301 	orr.w	r3, r3, #1
 800f1c2:	b2da      	uxtb	r2, r3
 800f1c4:	693b      	ldr	r3, [r7, #16]
 800f1c6:	711a      	strb	r2, [r3, #4]
 800f1c8:	e007      	b.n	800f1da <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f1ca:	7dfb      	ldrb	r3, [r7, #23]
 800f1cc:	2b01      	cmp	r3, #1
 800f1ce:	d102      	bne.n	800f1d6 <create_chain+0x122>
 800f1d0:	f04f 33ff 	mov.w	r3, #4294967295
 800f1d4:	e000      	b.n	800f1d8 <create_chain+0x124>
 800f1d6:	2301      	movs	r3, #1
 800f1d8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f1da:	69fb      	ldr	r3, [r7, #28]
}
 800f1dc:	4618      	mov	r0, r3
 800f1de:	3720      	adds	r7, #32
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	bd80      	pop	{r7, pc}

0800f1e4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f1e4:	b480      	push	{r7}
 800f1e6:	b087      	sub	sp, #28
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
 800f1ec:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1f8:	3304      	adds	r3, #4
 800f1fa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	0a5b      	lsrs	r3, r3, #9
 800f200:	68fa      	ldr	r2, [r7, #12]
 800f202:	8952      	ldrh	r2, [r2, #10]
 800f204:	fbb3 f3f2 	udiv	r3, r3, r2
 800f208:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f20a:	693b      	ldr	r3, [r7, #16]
 800f20c:	1d1a      	adds	r2, r3, #4
 800f20e:	613a      	str	r2, [r7, #16]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d101      	bne.n	800f21e <clmt_clust+0x3a>
 800f21a:	2300      	movs	r3, #0
 800f21c:	e010      	b.n	800f240 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f21e:	697a      	ldr	r2, [r7, #20]
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	429a      	cmp	r2, r3
 800f224:	d307      	bcc.n	800f236 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f226:	697a      	ldr	r2, [r7, #20]
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	1ad3      	subs	r3, r2, r3
 800f22c:	617b      	str	r3, [r7, #20]
 800f22e:	693b      	ldr	r3, [r7, #16]
 800f230:	3304      	adds	r3, #4
 800f232:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f234:	e7e9      	b.n	800f20a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f236:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f238:	693b      	ldr	r3, [r7, #16]
 800f23a:	681a      	ldr	r2, [r3, #0]
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	4413      	add	r3, r2
}
 800f240:	4618      	mov	r0, r3
 800f242:	371c      	adds	r7, #28
 800f244:	46bd      	mov	sp, r7
 800f246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24a:	4770      	bx	lr

0800f24c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b086      	sub	sp, #24
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
 800f254:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f262:	d204      	bcs.n	800f26e <dir_sdi+0x22>
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	f003 031f 	and.w	r3, r3, #31
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d001      	beq.n	800f272 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f26e:	2302      	movs	r3, #2
 800f270:	e063      	b.n	800f33a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	683a      	ldr	r2, [r7, #0]
 800f276:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	689b      	ldr	r3, [r3, #8]
 800f27c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d106      	bne.n	800f292 <dir_sdi+0x46>
 800f284:	693b      	ldr	r3, [r7, #16]
 800f286:	781b      	ldrb	r3, [r3, #0]
 800f288:	2b02      	cmp	r3, #2
 800f28a:	d902      	bls.n	800f292 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f28c:	693b      	ldr	r3, [r7, #16]
 800f28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f290:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d10c      	bne.n	800f2b2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	095b      	lsrs	r3, r3, #5
 800f29c:	693a      	ldr	r2, [r7, #16]
 800f29e:	8912      	ldrh	r2, [r2, #8]
 800f2a0:	4293      	cmp	r3, r2
 800f2a2:	d301      	bcc.n	800f2a8 <dir_sdi+0x5c>
 800f2a4:	2302      	movs	r3, #2
 800f2a6:	e048      	b.n	800f33a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f2a8:	693b      	ldr	r3, [r7, #16]
 800f2aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	61da      	str	r2, [r3, #28]
 800f2b0:	e029      	b.n	800f306 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f2b2:	693b      	ldr	r3, [r7, #16]
 800f2b4:	895b      	ldrh	r3, [r3, #10]
 800f2b6:	025b      	lsls	r3, r3, #9
 800f2b8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f2ba:	e019      	b.n	800f2f0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	6979      	ldr	r1, [r7, #20]
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f7ff fd06 	bl	800ecd2 <get_fat>
 800f2c6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2ce:	d101      	bne.n	800f2d4 <dir_sdi+0x88>
 800f2d0:	2301      	movs	r3, #1
 800f2d2:	e032      	b.n	800f33a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f2d4:	697b      	ldr	r3, [r7, #20]
 800f2d6:	2b01      	cmp	r3, #1
 800f2d8:	d904      	bls.n	800f2e4 <dir_sdi+0x98>
 800f2da:	693b      	ldr	r3, [r7, #16]
 800f2dc:	695b      	ldr	r3, [r3, #20]
 800f2de:	697a      	ldr	r2, [r7, #20]
 800f2e0:	429a      	cmp	r2, r3
 800f2e2:	d301      	bcc.n	800f2e8 <dir_sdi+0x9c>
 800f2e4:	2302      	movs	r3, #2
 800f2e6:	e028      	b.n	800f33a <dir_sdi+0xee>
			ofs -= csz;
 800f2e8:	683a      	ldr	r2, [r7, #0]
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	1ad3      	subs	r3, r2, r3
 800f2ee:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f2f0:	683a      	ldr	r2, [r7, #0]
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	429a      	cmp	r2, r3
 800f2f6:	d2e1      	bcs.n	800f2bc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f2f8:	6979      	ldr	r1, [r7, #20]
 800f2fa:	6938      	ldr	r0, [r7, #16]
 800f2fc:	f7ff fcca 	bl	800ec94 <clust2sect>
 800f300:	4602      	mov	r2, r0
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	697a      	ldr	r2, [r7, #20]
 800f30a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	69db      	ldr	r3, [r3, #28]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d101      	bne.n	800f318 <dir_sdi+0xcc>
 800f314:	2302      	movs	r3, #2
 800f316:	e010      	b.n	800f33a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	69da      	ldr	r2, [r3, #28]
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	0a5b      	lsrs	r3, r3, #9
 800f320:	441a      	add	r2, r3
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f332:	441a      	add	r2, r3
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f338:	2300      	movs	r3, #0
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3718      	adds	r7, #24
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}

0800f342 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f342:	b580      	push	{r7, lr}
 800f344:	b086      	sub	sp, #24
 800f346:	af00      	add	r7, sp, #0
 800f348:	6078      	str	r0, [r7, #4]
 800f34a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	695b      	ldr	r3, [r3, #20]
 800f356:	3320      	adds	r3, #32
 800f358:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	69db      	ldr	r3, [r3, #28]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d003      	beq.n	800f36a <dir_next+0x28>
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f368:	d301      	bcc.n	800f36e <dir_next+0x2c>
 800f36a:	2304      	movs	r3, #4
 800f36c:	e0aa      	b.n	800f4c4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f374:	2b00      	cmp	r3, #0
 800f376:	f040 8098 	bne.w	800f4aa <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	69db      	ldr	r3, [r3, #28]
 800f37e:	1c5a      	adds	r2, r3, #1
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	699b      	ldr	r3, [r3, #24]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d10b      	bne.n	800f3a4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	095b      	lsrs	r3, r3, #5
 800f390:	68fa      	ldr	r2, [r7, #12]
 800f392:	8912      	ldrh	r2, [r2, #8]
 800f394:	4293      	cmp	r3, r2
 800f396:	f0c0 8088 	bcc.w	800f4aa <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	2200      	movs	r2, #0
 800f39e:	61da      	str	r2, [r3, #28]
 800f3a0:	2304      	movs	r3, #4
 800f3a2:	e08f      	b.n	800f4c4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	0a5b      	lsrs	r3, r3, #9
 800f3a8:	68fa      	ldr	r2, [r7, #12]
 800f3aa:	8952      	ldrh	r2, [r2, #10]
 800f3ac:	3a01      	subs	r2, #1
 800f3ae:	4013      	ands	r3, r2
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d17a      	bne.n	800f4aa <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f3b4:	687a      	ldr	r2, [r7, #4]
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	699b      	ldr	r3, [r3, #24]
 800f3ba:	4619      	mov	r1, r3
 800f3bc:	4610      	mov	r0, r2
 800f3be:	f7ff fc88 	bl	800ecd2 <get_fat>
 800f3c2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	2b01      	cmp	r3, #1
 800f3c8:	d801      	bhi.n	800f3ce <dir_next+0x8c>
 800f3ca:	2302      	movs	r3, #2
 800f3cc:	e07a      	b.n	800f4c4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f3ce:	697b      	ldr	r3, [r7, #20]
 800f3d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3d4:	d101      	bne.n	800f3da <dir_next+0x98>
 800f3d6:	2301      	movs	r3, #1
 800f3d8:	e074      	b.n	800f4c4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	695b      	ldr	r3, [r3, #20]
 800f3de:	697a      	ldr	r2, [r7, #20]
 800f3e0:	429a      	cmp	r2, r3
 800f3e2:	d358      	bcc.n	800f496 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d104      	bne.n	800f3f4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	61da      	str	r2, [r3, #28]
 800f3f0:	2304      	movs	r3, #4
 800f3f2:	e067      	b.n	800f4c4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f3f4:	687a      	ldr	r2, [r7, #4]
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	699b      	ldr	r3, [r3, #24]
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	4610      	mov	r0, r2
 800f3fe:	f7ff fe59 	bl	800f0b4 <create_chain>
 800f402:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f404:	697b      	ldr	r3, [r7, #20]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d101      	bne.n	800f40e <dir_next+0xcc>
 800f40a:	2307      	movs	r3, #7
 800f40c:	e05a      	b.n	800f4c4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	2b01      	cmp	r3, #1
 800f412:	d101      	bne.n	800f418 <dir_next+0xd6>
 800f414:	2302      	movs	r3, #2
 800f416:	e055      	b.n	800f4c4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f41e:	d101      	bne.n	800f424 <dir_next+0xe2>
 800f420:	2301      	movs	r3, #1
 800f422:	e04f      	b.n	800f4c4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f424:	68f8      	ldr	r0, [r7, #12]
 800f426:	f7ff fb55 	bl	800ead4 <sync_window>
 800f42a:	4603      	mov	r3, r0
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d001      	beq.n	800f434 <dir_next+0xf2>
 800f430:	2301      	movs	r3, #1
 800f432:	e047      	b.n	800f4c4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	3330      	adds	r3, #48	; 0x30
 800f438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f43c:	2100      	movs	r1, #0
 800f43e:	4618      	mov	r0, r3
 800f440:	f7ff f97f 	bl	800e742 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f444:	2300      	movs	r3, #0
 800f446:	613b      	str	r3, [r7, #16]
 800f448:	6979      	ldr	r1, [r7, #20]
 800f44a:	68f8      	ldr	r0, [r7, #12]
 800f44c:	f7ff fc22 	bl	800ec94 <clust2sect>
 800f450:	4602      	mov	r2, r0
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	62da      	str	r2, [r3, #44]	; 0x2c
 800f456:	e012      	b.n	800f47e <dir_next+0x13c>
						fs->wflag = 1;
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	2201      	movs	r2, #1
 800f45c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f45e:	68f8      	ldr	r0, [r7, #12]
 800f460:	f7ff fb38 	bl	800ead4 <sync_window>
 800f464:	4603      	mov	r3, r0
 800f466:	2b00      	cmp	r3, #0
 800f468:	d001      	beq.n	800f46e <dir_next+0x12c>
 800f46a:	2301      	movs	r3, #1
 800f46c:	e02a      	b.n	800f4c4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f46e:	693b      	ldr	r3, [r7, #16]
 800f470:	3301      	adds	r3, #1
 800f472:	613b      	str	r3, [r7, #16]
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f478:	1c5a      	adds	r2, r3, #1
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	62da      	str	r2, [r3, #44]	; 0x2c
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	895b      	ldrh	r3, [r3, #10]
 800f482:	461a      	mov	r2, r3
 800f484:	693b      	ldr	r3, [r7, #16]
 800f486:	4293      	cmp	r3, r2
 800f488:	d3e6      	bcc.n	800f458 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f48e:	693b      	ldr	r3, [r7, #16]
 800f490:	1ad2      	subs	r2, r2, r3
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	697a      	ldr	r2, [r7, #20]
 800f49a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f49c:	6979      	ldr	r1, [r7, #20]
 800f49e:	68f8      	ldr	r0, [r7, #12]
 800f4a0:	f7ff fbf8 	bl	800ec94 <clust2sect>
 800f4a4:	4602      	mov	r2, r0
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	68ba      	ldr	r2, [r7, #8]
 800f4ae:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4bc:	441a      	add	r2, r3
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f4c2:	2300      	movs	r3, #0
}
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	3718      	adds	r7, #24
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}

0800f4cc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b086      	sub	sp, #24
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
 800f4d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f4dc:	2100      	movs	r1, #0
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f7ff feb4 	bl	800f24c <dir_sdi>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f4e8:	7dfb      	ldrb	r3, [r7, #23]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d12b      	bne.n	800f546 <dir_alloc+0x7a>
		n = 0;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	69db      	ldr	r3, [r3, #28]
 800f4f6:	4619      	mov	r1, r3
 800f4f8:	68f8      	ldr	r0, [r7, #12]
 800f4fa:	f7ff fb2f 	bl	800eb5c <move_window>
 800f4fe:	4603      	mov	r3, r0
 800f500:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f502:	7dfb      	ldrb	r3, [r7, #23]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d11d      	bne.n	800f544 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	6a1b      	ldr	r3, [r3, #32]
 800f50c:	781b      	ldrb	r3, [r3, #0]
 800f50e:	2be5      	cmp	r3, #229	; 0xe5
 800f510:	d004      	beq.n	800f51c <dir_alloc+0x50>
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	6a1b      	ldr	r3, [r3, #32]
 800f516:	781b      	ldrb	r3, [r3, #0]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d107      	bne.n	800f52c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f51c:	693b      	ldr	r3, [r7, #16]
 800f51e:	3301      	adds	r3, #1
 800f520:	613b      	str	r3, [r7, #16]
 800f522:	693a      	ldr	r2, [r7, #16]
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	429a      	cmp	r2, r3
 800f528:	d102      	bne.n	800f530 <dir_alloc+0x64>
 800f52a:	e00c      	b.n	800f546 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f52c:	2300      	movs	r3, #0
 800f52e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f530:	2101      	movs	r1, #1
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	f7ff ff05 	bl	800f342 <dir_next>
 800f538:	4603      	mov	r3, r0
 800f53a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f53c:	7dfb      	ldrb	r3, [r7, #23]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d0d7      	beq.n	800f4f2 <dir_alloc+0x26>
 800f542:	e000      	b.n	800f546 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f544:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f546:	7dfb      	ldrb	r3, [r7, #23]
 800f548:	2b04      	cmp	r3, #4
 800f54a:	d101      	bne.n	800f550 <dir_alloc+0x84>
 800f54c:	2307      	movs	r3, #7
 800f54e:	75fb      	strb	r3, [r7, #23]
	return res;
 800f550:	7dfb      	ldrb	r3, [r7, #23]
}
 800f552:	4618      	mov	r0, r3
 800f554:	3718      	adds	r7, #24
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}

0800f55a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f55a:	b580      	push	{r7, lr}
 800f55c:	b084      	sub	sp, #16
 800f55e:	af00      	add	r7, sp, #0
 800f560:	6078      	str	r0, [r7, #4]
 800f562:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	331a      	adds	r3, #26
 800f568:	4618      	mov	r0, r3
 800f56a:	f7ff f847 	bl	800e5fc <ld_word>
 800f56e:	4603      	mov	r3, r0
 800f570:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	2b03      	cmp	r3, #3
 800f578:	d109      	bne.n	800f58e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	3314      	adds	r3, #20
 800f57e:	4618      	mov	r0, r3
 800f580:	f7ff f83c 	bl	800e5fc <ld_word>
 800f584:	4603      	mov	r3, r0
 800f586:	041b      	lsls	r3, r3, #16
 800f588:	68fa      	ldr	r2, [r7, #12]
 800f58a:	4313      	orrs	r3, r2
 800f58c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f58e:	68fb      	ldr	r3, [r7, #12]
}
 800f590:	4618      	mov	r0, r3
 800f592:	3710      	adds	r7, #16
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}

0800f598 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b084      	sub	sp, #16
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	60f8      	str	r0, [r7, #12]
 800f5a0:	60b9      	str	r1, [r7, #8]
 800f5a2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f5a4:	68bb      	ldr	r3, [r7, #8]
 800f5a6:	331a      	adds	r3, #26
 800f5a8:	687a      	ldr	r2, [r7, #4]
 800f5aa:	b292      	uxth	r2, r2
 800f5ac:	4611      	mov	r1, r2
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7ff f85f 	bl	800e672 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	2b03      	cmp	r3, #3
 800f5ba:	d109      	bne.n	800f5d0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f5bc:	68bb      	ldr	r3, [r7, #8]
 800f5be:	f103 0214 	add.w	r2, r3, #20
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	0c1b      	lsrs	r3, r3, #16
 800f5c6:	b29b      	uxth	r3, r3
 800f5c8:	4619      	mov	r1, r3
 800f5ca:	4610      	mov	r0, r2
 800f5cc:	f7ff f851 	bl	800e672 <st_word>
	}
}
 800f5d0:	bf00      	nop
 800f5d2:	3710      	adds	r7, #16
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}

0800f5d8 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b086      	sub	sp, #24
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
 800f5e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f5e2:	2304      	movs	r3, #4
 800f5e4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800f5ec:	e03c      	b.n	800f668 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	69db      	ldr	r3, [r3, #28]
 800f5f2:	4619      	mov	r1, r3
 800f5f4:	6938      	ldr	r0, [r7, #16]
 800f5f6:	f7ff fab1 	bl	800eb5c <move_window>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f5fe:	7dfb      	ldrb	r3, [r7, #23]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d136      	bne.n	800f672 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6a1b      	ldr	r3, [r3, #32]
 800f608:	781b      	ldrb	r3, [r3, #0]
 800f60a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800f60c:	7bfb      	ldrb	r3, [r7, #15]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d102      	bne.n	800f618 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f612:	2304      	movs	r3, #4
 800f614:	75fb      	strb	r3, [r7, #23]
 800f616:	e031      	b.n	800f67c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	6a1b      	ldr	r3, [r3, #32]
 800f61c:	330b      	adds	r3, #11
 800f61e:	781b      	ldrb	r3, [r3, #0]
 800f620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f624:	73bb      	strb	r3, [r7, #14]
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	7bba      	ldrb	r2, [r7, #14]
 800f62a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800f62c:	7bfb      	ldrb	r3, [r7, #15]
 800f62e:	2be5      	cmp	r3, #229	; 0xe5
 800f630:	d011      	beq.n	800f656 <dir_read+0x7e>
 800f632:	7bfb      	ldrb	r3, [r7, #15]
 800f634:	2b2e      	cmp	r3, #46	; 0x2e
 800f636:	d00e      	beq.n	800f656 <dir_read+0x7e>
 800f638:	7bbb      	ldrb	r3, [r7, #14]
 800f63a:	2b0f      	cmp	r3, #15
 800f63c:	d00b      	beq.n	800f656 <dir_read+0x7e>
 800f63e:	7bbb      	ldrb	r3, [r7, #14]
 800f640:	f023 0320 	bic.w	r3, r3, #32
 800f644:	2b08      	cmp	r3, #8
 800f646:	bf0c      	ite	eq
 800f648:	2301      	moveq	r3, #1
 800f64a:	2300      	movne	r3, #0
 800f64c:	b2db      	uxtb	r3, r3
 800f64e:	461a      	mov	r2, r3
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	4293      	cmp	r3, r2
 800f654:	d00f      	beq.n	800f676 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f656:	2100      	movs	r1, #0
 800f658:	6878      	ldr	r0, [r7, #4]
 800f65a:	f7ff fe72 	bl	800f342 <dir_next>
 800f65e:	4603      	mov	r3, r0
 800f660:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f662:	7dfb      	ldrb	r3, [r7, #23]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d108      	bne.n	800f67a <dir_read+0xa2>
	while (dp->sect) {
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	69db      	ldr	r3, [r3, #28]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d1be      	bne.n	800f5ee <dir_read+0x16>
 800f670:	e004      	b.n	800f67c <dir_read+0xa4>
		if (res != FR_OK) break;
 800f672:	bf00      	nop
 800f674:	e002      	b.n	800f67c <dir_read+0xa4>
				break;
 800f676:	bf00      	nop
 800f678:	e000      	b.n	800f67c <dir_read+0xa4>
		if (res != FR_OK) break;
 800f67a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f67c:	7dfb      	ldrb	r3, [r7, #23]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d002      	beq.n	800f688 <dir_read+0xb0>
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2200      	movs	r2, #0
 800f686:	61da      	str	r2, [r3, #28]
	return res;
 800f688:	7dfb      	ldrb	r3, [r7, #23]
}
 800f68a:	4618      	mov	r0, r3
 800f68c:	3718      	adds	r7, #24
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}

0800f692 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f692:	b580      	push	{r7, lr}
 800f694:	b086      	sub	sp, #24
 800f696:	af00      	add	r7, sp, #0
 800f698:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f6a0:	2100      	movs	r1, #0
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f7ff fdd2 	bl	800f24c <dir_sdi>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f6ac:	7dfb      	ldrb	r3, [r7, #23]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d001      	beq.n	800f6b6 <dir_find+0x24>
 800f6b2:	7dfb      	ldrb	r3, [r7, #23]
 800f6b4:	e03e      	b.n	800f734 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	69db      	ldr	r3, [r3, #28]
 800f6ba:	4619      	mov	r1, r3
 800f6bc:	6938      	ldr	r0, [r7, #16]
 800f6be:	f7ff fa4d 	bl	800eb5c <move_window>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f6c6:	7dfb      	ldrb	r3, [r7, #23]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d12f      	bne.n	800f72c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	6a1b      	ldr	r3, [r3, #32]
 800f6d0:	781b      	ldrb	r3, [r3, #0]
 800f6d2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f6d4:	7bfb      	ldrb	r3, [r7, #15]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d102      	bne.n	800f6e0 <dir_find+0x4e>
 800f6da:	2304      	movs	r3, #4
 800f6dc:	75fb      	strb	r3, [r7, #23]
 800f6de:	e028      	b.n	800f732 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6a1b      	ldr	r3, [r3, #32]
 800f6e4:	330b      	adds	r3, #11
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f6ec:	b2da      	uxtb	r2, r3
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	6a1b      	ldr	r3, [r3, #32]
 800f6f6:	330b      	adds	r3, #11
 800f6f8:	781b      	ldrb	r3, [r3, #0]
 800f6fa:	f003 0308 	and.w	r3, r3, #8
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d10a      	bne.n	800f718 <dir_find+0x86>
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	6a18      	ldr	r0, [r3, #32]
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	3324      	adds	r3, #36	; 0x24
 800f70a:	220b      	movs	r2, #11
 800f70c:	4619      	mov	r1, r3
 800f70e:	f7ff f832 	bl	800e776 <mem_cmp>
 800f712:	4603      	mov	r3, r0
 800f714:	2b00      	cmp	r3, #0
 800f716:	d00b      	beq.n	800f730 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f718:	2100      	movs	r1, #0
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f7ff fe11 	bl	800f342 <dir_next>
 800f720:	4603      	mov	r3, r0
 800f722:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f724:	7dfb      	ldrb	r3, [r7, #23]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d0c5      	beq.n	800f6b6 <dir_find+0x24>
 800f72a:	e002      	b.n	800f732 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f72c:	bf00      	nop
 800f72e:	e000      	b.n	800f732 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f730:	bf00      	nop

	return res;
 800f732:	7dfb      	ldrb	r3, [r7, #23]
}
 800f734:	4618      	mov	r0, r3
 800f736:	3718      	adds	r7, #24
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}

0800f73c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b084      	sub	sp, #16
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f74a:	2101      	movs	r1, #1
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f7ff febd 	bl	800f4cc <dir_alloc>
 800f752:	4603      	mov	r3, r0
 800f754:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f756:	7bfb      	ldrb	r3, [r7, #15]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d11c      	bne.n	800f796 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	69db      	ldr	r3, [r3, #28]
 800f760:	4619      	mov	r1, r3
 800f762:	68b8      	ldr	r0, [r7, #8]
 800f764:	f7ff f9fa 	bl	800eb5c <move_window>
 800f768:	4603      	mov	r3, r0
 800f76a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f76c:	7bfb      	ldrb	r3, [r7, #15]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d111      	bne.n	800f796 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6a1b      	ldr	r3, [r3, #32]
 800f776:	2220      	movs	r2, #32
 800f778:	2100      	movs	r1, #0
 800f77a:	4618      	mov	r0, r3
 800f77c:	f7fe ffe1 	bl	800e742 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	6a18      	ldr	r0, [r3, #32]
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	3324      	adds	r3, #36	; 0x24
 800f788:	220b      	movs	r2, #11
 800f78a:	4619      	mov	r1, r3
 800f78c:	f7fe ffb8 	bl	800e700 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f790:	68bb      	ldr	r3, [r7, #8]
 800f792:	2201      	movs	r2, #1
 800f794:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f796:	7bfb      	ldrb	r3, [r7, #15]
}
 800f798:	4618      	mov	r0, r3
 800f79a:	3710      	adds	r7, #16
 800f79c:	46bd      	mov	sp, r7
 800f79e:	bd80      	pop	{r7, pc}

0800f7a0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b086      	sub	sp, #24
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
 800f7a8:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800f7aa:	683b      	ldr	r3, [r7, #0]
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	69db      	ldr	r3, [r3, #28]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d04e      	beq.n	800f856 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	613b      	str	r3, [r7, #16]
 800f7bc:	693b      	ldr	r3, [r7, #16]
 800f7be:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800f7c0:	e021      	b.n	800f806 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	6a1a      	ldr	r2, [r3, #32]
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	1c59      	adds	r1, r3, #1
 800f7ca:	6179      	str	r1, [r7, #20]
 800f7cc:	4413      	add	r3, r2
 800f7ce:	781b      	ldrb	r3, [r3, #0]
 800f7d0:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800f7d2:	7bfb      	ldrb	r3, [r7, #15]
 800f7d4:	2b20      	cmp	r3, #32
 800f7d6:	d100      	bne.n	800f7da <get_fileinfo+0x3a>
 800f7d8:	e015      	b.n	800f806 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800f7da:	7bfb      	ldrb	r3, [r7, #15]
 800f7dc:	2b05      	cmp	r3, #5
 800f7de:	d101      	bne.n	800f7e4 <get_fileinfo+0x44>
 800f7e0:	23e5      	movs	r3, #229	; 0xe5
 800f7e2:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	2b09      	cmp	r3, #9
 800f7e8:	d106      	bne.n	800f7f8 <get_fileinfo+0x58>
 800f7ea:	693b      	ldr	r3, [r7, #16]
 800f7ec:	1c5a      	adds	r2, r3, #1
 800f7ee:	613a      	str	r2, [r7, #16]
 800f7f0:	683a      	ldr	r2, [r7, #0]
 800f7f2:	4413      	add	r3, r2
 800f7f4:	222e      	movs	r2, #46	; 0x2e
 800f7f6:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800f7f8:	693b      	ldr	r3, [r7, #16]
 800f7fa:	1c5a      	adds	r2, r3, #1
 800f7fc:	613a      	str	r2, [r7, #16]
 800f7fe:	683a      	ldr	r2, [r7, #0]
 800f800:	4413      	add	r3, r2
 800f802:	7bfa      	ldrb	r2, [r7, #15]
 800f804:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	2b0a      	cmp	r3, #10
 800f80a:	d9da      	bls.n	800f7c2 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800f80c:	683a      	ldr	r2, [r7, #0]
 800f80e:	693b      	ldr	r3, [r7, #16]
 800f810:	4413      	add	r3, r2
 800f812:	3309      	adds	r3, #9
 800f814:	2200      	movs	r2, #0
 800f816:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	6a1b      	ldr	r3, [r3, #32]
 800f81c:	7ada      	ldrb	r2, [r3, #11]
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	6a1b      	ldr	r3, [r3, #32]
 800f826:	331c      	adds	r3, #28
 800f828:	4618      	mov	r0, r3
 800f82a:	f7fe feff 	bl	800e62c <ld_dword>
 800f82e:	4602      	mov	r2, r0
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	6a1b      	ldr	r3, [r3, #32]
 800f838:	3316      	adds	r3, #22
 800f83a:	4618      	mov	r0, r3
 800f83c:	f7fe fef6 	bl	800e62c <ld_dword>
 800f840:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	b29a      	uxth	r2, r3
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	80da      	strh	r2, [r3, #6]
 800f84a:	68bb      	ldr	r3, [r7, #8]
 800f84c:	0c1b      	lsrs	r3, r3, #16
 800f84e:	b29a      	uxth	r2, r3
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	809a      	strh	r2, [r3, #4]
 800f854:	e000      	b.n	800f858 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f856:	bf00      	nop
}
 800f858:	3718      	adds	r7, #24
 800f85a:	46bd      	mov	sp, r7
 800f85c:	bd80      	pop	{r7, pc}
	...

0800f860 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b088      	sub	sp, #32
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
 800f868:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	60fb      	str	r3, [r7, #12]
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	3324      	adds	r3, #36	; 0x24
 800f874:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f876:	220b      	movs	r2, #11
 800f878:	2120      	movs	r1, #32
 800f87a:	68b8      	ldr	r0, [r7, #8]
 800f87c:	f7fe ff61 	bl	800e742 <mem_set>
	si = i = 0; ni = 8;
 800f880:	2300      	movs	r3, #0
 800f882:	613b      	str	r3, [r7, #16]
 800f884:	693b      	ldr	r3, [r7, #16]
 800f886:	617b      	str	r3, [r7, #20]
 800f888:	2308      	movs	r3, #8
 800f88a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	1c5a      	adds	r2, r3, #1
 800f890:	617a      	str	r2, [r7, #20]
 800f892:	68fa      	ldr	r2, [r7, #12]
 800f894:	4413      	add	r3, r2
 800f896:	781b      	ldrb	r3, [r3, #0]
 800f898:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f89a:	7ffb      	ldrb	r3, [r7, #31]
 800f89c:	2b20      	cmp	r3, #32
 800f89e:	d94e      	bls.n	800f93e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f8a0:	7ffb      	ldrb	r3, [r7, #31]
 800f8a2:	2b2f      	cmp	r3, #47	; 0x2f
 800f8a4:	d006      	beq.n	800f8b4 <create_name+0x54>
 800f8a6:	7ffb      	ldrb	r3, [r7, #31]
 800f8a8:	2b5c      	cmp	r3, #92	; 0x5c
 800f8aa:	d110      	bne.n	800f8ce <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f8ac:	e002      	b.n	800f8b4 <create_name+0x54>
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	3301      	adds	r3, #1
 800f8b2:	617b      	str	r3, [r7, #20]
 800f8b4:	68fa      	ldr	r2, [r7, #12]
 800f8b6:	697b      	ldr	r3, [r7, #20]
 800f8b8:	4413      	add	r3, r2
 800f8ba:	781b      	ldrb	r3, [r3, #0]
 800f8bc:	2b2f      	cmp	r3, #47	; 0x2f
 800f8be:	d0f6      	beq.n	800f8ae <create_name+0x4e>
 800f8c0:	68fa      	ldr	r2, [r7, #12]
 800f8c2:	697b      	ldr	r3, [r7, #20]
 800f8c4:	4413      	add	r3, r2
 800f8c6:	781b      	ldrb	r3, [r3, #0]
 800f8c8:	2b5c      	cmp	r3, #92	; 0x5c
 800f8ca:	d0f0      	beq.n	800f8ae <create_name+0x4e>
			break;
 800f8cc:	e038      	b.n	800f940 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f8ce:	7ffb      	ldrb	r3, [r7, #31]
 800f8d0:	2b2e      	cmp	r3, #46	; 0x2e
 800f8d2:	d003      	beq.n	800f8dc <create_name+0x7c>
 800f8d4:	693a      	ldr	r2, [r7, #16]
 800f8d6:	69bb      	ldr	r3, [r7, #24]
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d30c      	bcc.n	800f8f6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f8dc:	69bb      	ldr	r3, [r7, #24]
 800f8de:	2b0b      	cmp	r3, #11
 800f8e0:	d002      	beq.n	800f8e8 <create_name+0x88>
 800f8e2:	7ffb      	ldrb	r3, [r7, #31]
 800f8e4:	2b2e      	cmp	r3, #46	; 0x2e
 800f8e6:	d001      	beq.n	800f8ec <create_name+0x8c>
 800f8e8:	2306      	movs	r3, #6
 800f8ea:	e044      	b.n	800f976 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f8ec:	2308      	movs	r3, #8
 800f8ee:	613b      	str	r3, [r7, #16]
 800f8f0:	230b      	movs	r3, #11
 800f8f2:	61bb      	str	r3, [r7, #24]
			continue;
 800f8f4:	e022      	b.n	800f93c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f8f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	da04      	bge.n	800f908 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f8fe:	7ffb      	ldrb	r3, [r7, #31]
 800f900:	3b80      	subs	r3, #128	; 0x80
 800f902:	4a1f      	ldr	r2, [pc, #124]	; (800f980 <create_name+0x120>)
 800f904:	5cd3      	ldrb	r3, [r2, r3]
 800f906:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f908:	7ffb      	ldrb	r3, [r7, #31]
 800f90a:	4619      	mov	r1, r3
 800f90c:	481d      	ldr	r0, [pc, #116]	; (800f984 <create_name+0x124>)
 800f90e:	f7fe ff59 	bl	800e7c4 <chk_chr>
 800f912:	4603      	mov	r3, r0
 800f914:	2b00      	cmp	r3, #0
 800f916:	d001      	beq.n	800f91c <create_name+0xbc>
 800f918:	2306      	movs	r3, #6
 800f91a:	e02c      	b.n	800f976 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f91c:	7ffb      	ldrb	r3, [r7, #31]
 800f91e:	2b60      	cmp	r3, #96	; 0x60
 800f920:	d905      	bls.n	800f92e <create_name+0xce>
 800f922:	7ffb      	ldrb	r3, [r7, #31]
 800f924:	2b7a      	cmp	r3, #122	; 0x7a
 800f926:	d802      	bhi.n	800f92e <create_name+0xce>
 800f928:	7ffb      	ldrb	r3, [r7, #31]
 800f92a:	3b20      	subs	r3, #32
 800f92c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800f92e:	693b      	ldr	r3, [r7, #16]
 800f930:	1c5a      	adds	r2, r3, #1
 800f932:	613a      	str	r2, [r7, #16]
 800f934:	68ba      	ldr	r2, [r7, #8]
 800f936:	4413      	add	r3, r2
 800f938:	7ffa      	ldrb	r2, [r7, #31]
 800f93a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f93c:	e7a6      	b.n	800f88c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f93e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f940:	68fa      	ldr	r2, [r7, #12]
 800f942:	697b      	ldr	r3, [r7, #20]
 800f944:	441a      	add	r2, r3
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f94a:	693b      	ldr	r3, [r7, #16]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d101      	bne.n	800f954 <create_name+0xf4>
 800f950:	2306      	movs	r3, #6
 800f952:	e010      	b.n	800f976 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f954:	68bb      	ldr	r3, [r7, #8]
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	2be5      	cmp	r3, #229	; 0xe5
 800f95a:	d102      	bne.n	800f962 <create_name+0x102>
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	2205      	movs	r2, #5
 800f960:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f962:	7ffb      	ldrb	r3, [r7, #31]
 800f964:	2b20      	cmp	r3, #32
 800f966:	d801      	bhi.n	800f96c <create_name+0x10c>
 800f968:	2204      	movs	r2, #4
 800f96a:	e000      	b.n	800f96e <create_name+0x10e>
 800f96c:	2200      	movs	r2, #0
 800f96e:	68bb      	ldr	r3, [r7, #8]
 800f970:	330b      	adds	r3, #11
 800f972:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f974:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f976:	4618      	mov	r0, r3
 800f978:	3720      	adds	r7, #32
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}
 800f97e:	bf00      	nop
 800f980:	080176b0 	.word	0x080176b0
 800f984:	08014a94 	.word	0x08014a94

0800f988 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b086      	sub	sp, #24
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
 800f990:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f996:	693b      	ldr	r3, [r7, #16]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f99c:	e002      	b.n	800f9a4 <follow_path+0x1c>
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	3301      	adds	r3, #1
 800f9a2:	603b      	str	r3, [r7, #0]
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	781b      	ldrb	r3, [r3, #0]
 800f9a8:	2b2f      	cmp	r3, #47	; 0x2f
 800f9aa:	d0f8      	beq.n	800f99e <follow_path+0x16>
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	781b      	ldrb	r3, [r3, #0]
 800f9b0:	2b5c      	cmp	r3, #92	; 0x5c
 800f9b2:	d0f4      	beq.n	800f99e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f9b4:	693b      	ldr	r3, [r7, #16]
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	781b      	ldrb	r3, [r3, #0]
 800f9be:	2b1f      	cmp	r3, #31
 800f9c0:	d80a      	bhi.n	800f9d8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	2280      	movs	r2, #128	; 0x80
 800f9c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f9ca:	2100      	movs	r1, #0
 800f9cc:	6878      	ldr	r0, [r7, #4]
 800f9ce:	f7ff fc3d 	bl	800f24c <dir_sdi>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	75fb      	strb	r3, [r7, #23]
 800f9d6:	e043      	b.n	800fa60 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f9d8:	463b      	mov	r3, r7
 800f9da:	4619      	mov	r1, r3
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f7ff ff3f 	bl	800f860 <create_name>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f9e6:	7dfb      	ldrb	r3, [r7, #23]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d134      	bne.n	800fa56 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f7ff fe50 	bl	800f692 <dir_find>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f9fc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f9fe:	7dfb      	ldrb	r3, [r7, #23]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d00a      	beq.n	800fa1a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fa04:	7dfb      	ldrb	r3, [r7, #23]
 800fa06:	2b04      	cmp	r3, #4
 800fa08:	d127      	bne.n	800fa5a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fa0a:	7afb      	ldrb	r3, [r7, #11]
 800fa0c:	f003 0304 	and.w	r3, r3, #4
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d122      	bne.n	800fa5a <follow_path+0xd2>
 800fa14:	2305      	movs	r3, #5
 800fa16:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800fa18:	e01f      	b.n	800fa5a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fa1a:	7afb      	ldrb	r3, [r7, #11]
 800fa1c:	f003 0304 	and.w	r3, r3, #4
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d11c      	bne.n	800fa5e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fa24:	693b      	ldr	r3, [r7, #16]
 800fa26:	799b      	ldrb	r3, [r3, #6]
 800fa28:	f003 0310 	and.w	r3, r3, #16
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d102      	bne.n	800fa36 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800fa30:	2305      	movs	r3, #5
 800fa32:	75fb      	strb	r3, [r7, #23]
 800fa34:	e014      	b.n	800fa60 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	695b      	ldr	r3, [r3, #20]
 800fa40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa44:	4413      	add	r3, r2
 800fa46:	4619      	mov	r1, r3
 800fa48:	68f8      	ldr	r0, [r7, #12]
 800fa4a:	f7ff fd86 	bl	800f55a <ld_clust>
 800fa4e:	4602      	mov	r2, r0
 800fa50:	693b      	ldr	r3, [r7, #16]
 800fa52:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fa54:	e7c0      	b.n	800f9d8 <follow_path+0x50>
			if (res != FR_OK) break;
 800fa56:	bf00      	nop
 800fa58:	e002      	b.n	800fa60 <follow_path+0xd8>
				break;
 800fa5a:	bf00      	nop
 800fa5c:	e000      	b.n	800fa60 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fa5e:	bf00      	nop
			}
		}
	}

	return res;
 800fa60:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa62:	4618      	mov	r0, r3
 800fa64:	3718      	adds	r7, #24
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}

0800fa6a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fa6a:	b480      	push	{r7}
 800fa6c:	b087      	sub	sp, #28
 800fa6e:	af00      	add	r7, sp, #0
 800fa70:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fa72:	f04f 33ff 	mov.w	r3, #4294967295
 800fa76:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d031      	beq.n	800fae4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	617b      	str	r3, [r7, #20]
 800fa86:	e002      	b.n	800fa8e <get_ldnumber+0x24>
 800fa88:	697b      	ldr	r3, [r7, #20]
 800fa8a:	3301      	adds	r3, #1
 800fa8c:	617b      	str	r3, [r7, #20]
 800fa8e:	697b      	ldr	r3, [r7, #20]
 800fa90:	781b      	ldrb	r3, [r3, #0]
 800fa92:	2b20      	cmp	r3, #32
 800fa94:	d903      	bls.n	800fa9e <get_ldnumber+0x34>
 800fa96:	697b      	ldr	r3, [r7, #20]
 800fa98:	781b      	ldrb	r3, [r3, #0]
 800fa9a:	2b3a      	cmp	r3, #58	; 0x3a
 800fa9c:	d1f4      	bne.n	800fa88 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fa9e:	697b      	ldr	r3, [r7, #20]
 800faa0:	781b      	ldrb	r3, [r3, #0]
 800faa2:	2b3a      	cmp	r3, #58	; 0x3a
 800faa4:	d11c      	bne.n	800fae0 <get_ldnumber+0x76>
			tp = *path;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	1c5a      	adds	r2, r3, #1
 800fab0:	60fa      	str	r2, [r7, #12]
 800fab2:	781b      	ldrb	r3, [r3, #0]
 800fab4:	3b30      	subs	r3, #48	; 0x30
 800fab6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fab8:	68bb      	ldr	r3, [r7, #8]
 800faba:	2b09      	cmp	r3, #9
 800fabc:	d80e      	bhi.n	800fadc <get_ldnumber+0x72>
 800fabe:	68fa      	ldr	r2, [r7, #12]
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	429a      	cmp	r2, r3
 800fac4:	d10a      	bne.n	800fadc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fac6:	68bb      	ldr	r3, [r7, #8]
 800fac8:	2b01      	cmp	r3, #1
 800faca:	d807      	bhi.n	800fadc <get_ldnumber+0x72>
					vol = (int)i;
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fad0:	697b      	ldr	r3, [r7, #20]
 800fad2:	3301      	adds	r3, #1
 800fad4:	617b      	str	r3, [r7, #20]
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	697a      	ldr	r2, [r7, #20]
 800fada:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fadc:	693b      	ldr	r3, [r7, #16]
 800fade:	e002      	b.n	800fae6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fae0:	2300      	movs	r3, #0
 800fae2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fae4:	693b      	ldr	r3, [r7, #16]
}
 800fae6:	4618      	mov	r0, r3
 800fae8:	371c      	adds	r7, #28
 800faea:	46bd      	mov	sp, r7
 800faec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf0:	4770      	bx	lr
	...

0800faf4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b082      	sub	sp, #8
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
 800fafc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	2200      	movs	r2, #0
 800fb02:	70da      	strb	r2, [r3, #3]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f04f 32ff 	mov.w	r2, #4294967295
 800fb0a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fb0c:	6839      	ldr	r1, [r7, #0]
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f7ff f824 	bl	800eb5c <move_window>
 800fb14:	4603      	mov	r3, r0
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d001      	beq.n	800fb1e <check_fs+0x2a>
 800fb1a:	2304      	movs	r3, #4
 800fb1c:	e038      	b.n	800fb90 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	3330      	adds	r3, #48	; 0x30
 800fb22:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fb26:	4618      	mov	r0, r3
 800fb28:	f7fe fd68 	bl	800e5fc <ld_word>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	461a      	mov	r2, r3
 800fb30:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d001      	beq.n	800fb3c <check_fs+0x48>
 800fb38:	2303      	movs	r3, #3
 800fb3a:	e029      	b.n	800fb90 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fb42:	2be9      	cmp	r3, #233	; 0xe9
 800fb44:	d009      	beq.n	800fb5a <check_fs+0x66>
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fb4c:	2beb      	cmp	r3, #235	; 0xeb
 800fb4e:	d11e      	bne.n	800fb8e <check_fs+0x9a>
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800fb56:	2b90      	cmp	r3, #144	; 0x90
 800fb58:	d119      	bne.n	800fb8e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	3330      	adds	r3, #48	; 0x30
 800fb5e:	3336      	adds	r3, #54	; 0x36
 800fb60:	4618      	mov	r0, r3
 800fb62:	f7fe fd63 	bl	800e62c <ld_dword>
 800fb66:	4603      	mov	r3, r0
 800fb68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fb6c:	4a0a      	ldr	r2, [pc, #40]	; (800fb98 <check_fs+0xa4>)
 800fb6e:	4293      	cmp	r3, r2
 800fb70:	d101      	bne.n	800fb76 <check_fs+0x82>
 800fb72:	2300      	movs	r3, #0
 800fb74:	e00c      	b.n	800fb90 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	3330      	adds	r3, #48	; 0x30
 800fb7a:	3352      	adds	r3, #82	; 0x52
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f7fe fd55 	bl	800e62c <ld_dword>
 800fb82:	4602      	mov	r2, r0
 800fb84:	4b05      	ldr	r3, [pc, #20]	; (800fb9c <check_fs+0xa8>)
 800fb86:	429a      	cmp	r2, r3
 800fb88:	d101      	bne.n	800fb8e <check_fs+0x9a>
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	e000      	b.n	800fb90 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fb8e:	2302      	movs	r3, #2
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	3708      	adds	r7, #8
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}
 800fb98:	00544146 	.word	0x00544146
 800fb9c:	33544146 	.word	0x33544146

0800fba0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b096      	sub	sp, #88	; 0x58
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	60f8      	str	r0, [r7, #12]
 800fba8:	60b9      	str	r1, [r7, #8]
 800fbaa:	4613      	mov	r3, r2
 800fbac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fbae:	68bb      	ldr	r3, [r7, #8]
 800fbb0:	2200      	movs	r2, #0
 800fbb2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fbb4:	68f8      	ldr	r0, [r7, #12]
 800fbb6:	f7ff ff58 	bl	800fa6a <get_ldnumber>
 800fbba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fbbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	da01      	bge.n	800fbc6 <find_volume+0x26>
 800fbc2:	230b      	movs	r3, #11
 800fbc4:	e22e      	b.n	8010024 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fbc6:	4aa8      	ldr	r2, [pc, #672]	; (800fe68 <find_volume+0x2c8>)
 800fbc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d101      	bne.n	800fbda <find_volume+0x3a>
 800fbd6:	230c      	movs	r3, #12
 800fbd8:	e224      	b.n	8010024 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fbda:	68bb      	ldr	r3, [r7, #8]
 800fbdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fbde:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fbe0:	79fb      	ldrb	r3, [r7, #7]
 800fbe2:	f023 0301 	bic.w	r3, r3, #1
 800fbe6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d01a      	beq.n	800fc26 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf2:	785b      	ldrb	r3, [r3, #1]
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f7fe fc5b 	bl	800e4b0 <disk_status>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fc00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc04:	f003 0301 	and.w	r3, r3, #1
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d10c      	bne.n	800fc26 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fc0c:	79fb      	ldrb	r3, [r7, #7]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d007      	beq.n	800fc22 <find_volume+0x82>
 800fc12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc16:	f003 0304 	and.w	r3, r3, #4
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d001      	beq.n	800fc22 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fc1e:	230a      	movs	r3, #10
 800fc20:	e200      	b.n	8010024 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800fc22:	2300      	movs	r3, #0
 800fc24:	e1fe      	b.n	8010024 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fc26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc28:	2200      	movs	r2, #0
 800fc2a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fc2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc2e:	b2da      	uxtb	r2, r3
 800fc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc32:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc36:	785b      	ldrb	r3, [r3, #1]
 800fc38:	4618      	mov	r0, r3
 800fc3a:	f7fe fc53 	bl	800e4e4 <disk_initialize>
 800fc3e:	4603      	mov	r3, r0
 800fc40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fc44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc48:	f003 0301 	and.w	r3, r3, #1
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d001      	beq.n	800fc54 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fc50:	2303      	movs	r3, #3
 800fc52:	e1e7      	b.n	8010024 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fc54:	79fb      	ldrb	r3, [r7, #7]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d007      	beq.n	800fc6a <find_volume+0xca>
 800fc5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc5e:	f003 0304 	and.w	r3, r3, #4
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d001      	beq.n	800fc6a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fc66:	230a      	movs	r3, #10
 800fc68:	e1dc      	b.n	8010024 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fc6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fc70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fc72:	f7ff ff3f 	bl	800faf4 <check_fs>
 800fc76:	4603      	mov	r3, r0
 800fc78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fc7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc80:	2b02      	cmp	r3, #2
 800fc82:	d14b      	bne.n	800fd1c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fc84:	2300      	movs	r3, #0
 800fc86:	643b      	str	r3, [r7, #64]	; 0x40
 800fc88:	e01f      	b.n	800fcca <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc8c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fc90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc92:	011b      	lsls	r3, r3, #4
 800fc94:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fc98:	4413      	add	r3, r2
 800fc9a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc9e:	3304      	adds	r3, #4
 800fca0:	781b      	ldrb	r3, [r3, #0]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d006      	beq.n	800fcb4 <find_volume+0x114>
 800fca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca8:	3308      	adds	r3, #8
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f7fe fcbe 	bl	800e62c <ld_dword>
 800fcb0:	4602      	mov	r2, r0
 800fcb2:	e000      	b.n	800fcb6 <find_volume+0x116>
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcb8:	009b      	lsls	r3, r3, #2
 800fcba:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800fcbe:	440b      	add	r3, r1
 800fcc0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fcc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcc6:	3301      	adds	r3, #1
 800fcc8:	643b      	str	r3, [r7, #64]	; 0x40
 800fcca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fccc:	2b03      	cmp	r3, #3
 800fcce:	d9dc      	bls.n	800fc8a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fcd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d002      	beq.n	800fce0 <find_volume+0x140>
 800fcda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcdc:	3b01      	subs	r3, #1
 800fcde:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fce2:	009b      	lsls	r3, r3, #2
 800fce4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800fce8:	4413      	add	r3, r2
 800fcea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fcee:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fcf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d005      	beq.n	800fd02 <find_volume+0x162>
 800fcf6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fcf8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fcfa:	f7ff fefb 	bl	800faf4 <check_fs>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	e000      	b.n	800fd04 <find_volume+0x164>
 800fd02:	2303      	movs	r3, #3
 800fd04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fd08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fd0c:	2b01      	cmp	r3, #1
 800fd0e:	d905      	bls.n	800fd1c <find_volume+0x17c>
 800fd10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd12:	3301      	adds	r3, #1
 800fd14:	643b      	str	r3, [r7, #64]	; 0x40
 800fd16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd18:	2b03      	cmp	r3, #3
 800fd1a:	d9e1      	bls.n	800fce0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fd1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fd20:	2b04      	cmp	r3, #4
 800fd22:	d101      	bne.n	800fd28 <find_volume+0x188>
 800fd24:	2301      	movs	r3, #1
 800fd26:	e17d      	b.n	8010024 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fd28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fd2c:	2b01      	cmp	r3, #1
 800fd2e:	d901      	bls.n	800fd34 <find_volume+0x194>
 800fd30:	230d      	movs	r3, #13
 800fd32:	e177      	b.n	8010024 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd36:	3330      	adds	r3, #48	; 0x30
 800fd38:	330b      	adds	r3, #11
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f7fe fc5e 	bl	800e5fc <ld_word>
 800fd40:	4603      	mov	r3, r0
 800fd42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd46:	d001      	beq.n	800fd4c <find_volume+0x1ac>
 800fd48:	230d      	movs	r3, #13
 800fd4a:	e16b      	b.n	8010024 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fd4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd4e:	3330      	adds	r3, #48	; 0x30
 800fd50:	3316      	adds	r3, #22
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7fe fc52 	bl	800e5fc <ld_word>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fd5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d106      	bne.n	800fd70 <find_volume+0x1d0>
 800fd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd64:	3330      	adds	r3, #48	; 0x30
 800fd66:	3324      	adds	r3, #36	; 0x24
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f7fe fc5f 	bl	800e62c <ld_dword>
 800fd6e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800fd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fd74:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd78:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800fd7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd7e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd82:	789b      	ldrb	r3, [r3, #2]
 800fd84:	2b01      	cmp	r3, #1
 800fd86:	d005      	beq.n	800fd94 <find_volume+0x1f4>
 800fd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd8a:	789b      	ldrb	r3, [r3, #2]
 800fd8c:	2b02      	cmp	r3, #2
 800fd8e:	d001      	beq.n	800fd94 <find_volume+0x1f4>
 800fd90:	230d      	movs	r3, #13
 800fd92:	e147      	b.n	8010024 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd96:	789b      	ldrb	r3, [r3, #2]
 800fd98:	461a      	mov	r2, r3
 800fd9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd9c:	fb02 f303 	mul.w	r3, r2, r3
 800fda0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fda4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fda8:	b29a      	uxth	r2, r3
 800fdaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fdae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdb0:	895b      	ldrh	r3, [r3, #10]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d008      	beq.n	800fdc8 <find_volume+0x228>
 800fdb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdb8:	895b      	ldrh	r3, [r3, #10]
 800fdba:	461a      	mov	r2, r3
 800fdbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdbe:	895b      	ldrh	r3, [r3, #10]
 800fdc0:	3b01      	subs	r3, #1
 800fdc2:	4013      	ands	r3, r2
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d001      	beq.n	800fdcc <find_volume+0x22c>
 800fdc8:	230d      	movs	r3, #13
 800fdca:	e12b      	b.n	8010024 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdce:	3330      	adds	r3, #48	; 0x30
 800fdd0:	3311      	adds	r3, #17
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f7fe fc12 	bl	800e5fc <ld_word>
 800fdd8:	4603      	mov	r3, r0
 800fdda:	461a      	mov	r2, r3
 800fddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdde:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde2:	891b      	ldrh	r3, [r3, #8]
 800fde4:	f003 030f 	and.w	r3, r3, #15
 800fde8:	b29b      	uxth	r3, r3
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d001      	beq.n	800fdf2 <find_volume+0x252>
 800fdee:	230d      	movs	r3, #13
 800fdf0:	e118      	b.n	8010024 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf4:	3330      	adds	r3, #48	; 0x30
 800fdf6:	3313      	adds	r3, #19
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7fe fbff 	bl	800e5fc <ld_word>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fe02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d106      	bne.n	800fe16 <find_volume+0x276>
 800fe08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe0a:	3330      	adds	r3, #48	; 0x30
 800fe0c:	3320      	adds	r3, #32
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f7fe fc0c 	bl	800e62c <ld_dword>
 800fe14:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fe16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe18:	3330      	adds	r3, #48	; 0x30
 800fe1a:	330e      	adds	r3, #14
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f7fe fbed 	bl	800e5fc <ld_word>
 800fe22:	4603      	mov	r3, r0
 800fe24:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fe26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d101      	bne.n	800fe30 <find_volume+0x290>
 800fe2c:	230d      	movs	r3, #13
 800fe2e:	e0f9      	b.n	8010024 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fe30:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fe32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe34:	4413      	add	r3, r2
 800fe36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe38:	8912      	ldrh	r2, [r2, #8]
 800fe3a:	0912      	lsrs	r2, r2, #4
 800fe3c:	b292      	uxth	r2, r2
 800fe3e:	4413      	add	r3, r2
 800fe40:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fe42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fe44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d201      	bcs.n	800fe4e <find_volume+0x2ae>
 800fe4a:	230d      	movs	r3, #13
 800fe4c:	e0ea      	b.n	8010024 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fe4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fe50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe52:	1ad3      	subs	r3, r2, r3
 800fe54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe56:	8952      	ldrh	r2, [r2, #10]
 800fe58:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe5c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fe5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d103      	bne.n	800fe6c <find_volume+0x2cc>
 800fe64:	230d      	movs	r3, #13
 800fe66:	e0dd      	b.n	8010024 <find_volume+0x484>
 800fe68:	20000234 	.word	0x20000234
		fmt = FS_FAT32;
 800fe6c:	2303      	movs	r3, #3
 800fe6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fe72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe74:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fe78:	4293      	cmp	r3, r2
 800fe7a:	d802      	bhi.n	800fe82 <find_volume+0x2e2>
 800fe7c:	2302      	movs	r3, #2
 800fe7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fe82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe84:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fe88:	4293      	cmp	r3, r2
 800fe8a:	d802      	bhi.n	800fe92 <find_volume+0x2f2>
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fe92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe94:	1c9a      	adds	r2, r3, #2
 800fe96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe98:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800fe9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fe9e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fea0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fea4:	441a      	add	r2, r3
 800fea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea8:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800feaa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800feac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feae:	441a      	add	r2, r3
 800feb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb2:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800feb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800feb8:	2b03      	cmp	r3, #3
 800feba:	d11e      	bne.n	800fefa <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800febc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800febe:	3330      	adds	r3, #48	; 0x30
 800fec0:	332a      	adds	r3, #42	; 0x2a
 800fec2:	4618      	mov	r0, r3
 800fec4:	f7fe fb9a 	bl	800e5fc <ld_word>
 800fec8:	4603      	mov	r3, r0
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d001      	beq.n	800fed2 <find_volume+0x332>
 800fece:	230d      	movs	r3, #13
 800fed0:	e0a8      	b.n	8010024 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed4:	891b      	ldrh	r3, [r3, #8]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d001      	beq.n	800fede <find_volume+0x33e>
 800feda:	230d      	movs	r3, #13
 800fedc:	e0a2      	b.n	8010024 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fee0:	3330      	adds	r3, #48	; 0x30
 800fee2:	332c      	adds	r3, #44	; 0x2c
 800fee4:	4618      	mov	r0, r3
 800fee6:	f7fe fba1 	bl	800e62c <ld_dword>
 800feea:	4602      	mov	r2, r0
 800feec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feee:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef2:	695b      	ldr	r3, [r3, #20]
 800fef4:	009b      	lsls	r3, r3, #2
 800fef6:	647b      	str	r3, [r7, #68]	; 0x44
 800fef8:	e01f      	b.n	800ff3a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fefc:	891b      	ldrh	r3, [r3, #8]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d101      	bne.n	800ff06 <find_volume+0x366>
 800ff02:	230d      	movs	r3, #13
 800ff04:	e08e      	b.n	8010024 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ff06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff08:	6a1a      	ldr	r2, [r3, #32]
 800ff0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff0c:	441a      	add	r2, r3
 800ff0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff10:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ff12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ff16:	2b02      	cmp	r3, #2
 800ff18:	d103      	bne.n	800ff22 <find_volume+0x382>
 800ff1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff1c:	695b      	ldr	r3, [r3, #20]
 800ff1e:	005b      	lsls	r3, r3, #1
 800ff20:	e00a      	b.n	800ff38 <find_volume+0x398>
 800ff22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff24:	695a      	ldr	r2, [r3, #20]
 800ff26:	4613      	mov	r3, r2
 800ff28:	005b      	lsls	r3, r3, #1
 800ff2a:	4413      	add	r3, r2
 800ff2c:	085a      	lsrs	r2, r3, #1
 800ff2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff30:	695b      	ldr	r3, [r3, #20]
 800ff32:	f003 0301 	and.w	r3, r3, #1
 800ff36:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ff38:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ff3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff3c:	699a      	ldr	r2, [r3, #24]
 800ff3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff40:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ff44:	0a5b      	lsrs	r3, r3, #9
 800ff46:	429a      	cmp	r2, r3
 800ff48:	d201      	bcs.n	800ff4e <find_volume+0x3ae>
 800ff4a:	230d      	movs	r3, #13
 800ff4c:	e06a      	b.n	8010024 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ff4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff50:	f04f 32ff 	mov.w	r2, #4294967295
 800ff54:	611a      	str	r2, [r3, #16]
 800ff56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff58:	691a      	ldr	r2, [r3, #16]
 800ff5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff5c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800ff5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff60:	2280      	movs	r2, #128	; 0x80
 800ff62:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ff64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ff68:	2b03      	cmp	r3, #3
 800ff6a:	d149      	bne.n	8010000 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ff6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff6e:	3330      	adds	r3, #48	; 0x30
 800ff70:	3330      	adds	r3, #48	; 0x30
 800ff72:	4618      	mov	r0, r3
 800ff74:	f7fe fb42 	bl	800e5fc <ld_word>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	2b01      	cmp	r3, #1
 800ff7c:	d140      	bne.n	8010000 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ff7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff80:	3301      	adds	r3, #1
 800ff82:	4619      	mov	r1, r3
 800ff84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ff86:	f7fe fde9 	bl	800eb5c <move_window>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d137      	bne.n	8010000 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800ff90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff92:	2200      	movs	r2, #0
 800ff94:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ff96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff98:	3330      	adds	r3, #48	; 0x30
 800ff9a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f7fe fb2c 	bl	800e5fc <ld_word>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	461a      	mov	r2, r3
 800ffa8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ffac:	429a      	cmp	r2, r3
 800ffae:	d127      	bne.n	8010000 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ffb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffb2:	3330      	adds	r3, #48	; 0x30
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	f7fe fb39 	bl	800e62c <ld_dword>
 800ffba:	4602      	mov	r2, r0
 800ffbc:	4b1b      	ldr	r3, [pc, #108]	; (801002c <find_volume+0x48c>)
 800ffbe:	429a      	cmp	r2, r3
 800ffc0:	d11e      	bne.n	8010000 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ffc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffc4:	3330      	adds	r3, #48	; 0x30
 800ffc6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f7fe fb2e 	bl	800e62c <ld_dword>
 800ffd0:	4602      	mov	r2, r0
 800ffd2:	4b17      	ldr	r3, [pc, #92]	; (8010030 <find_volume+0x490>)
 800ffd4:	429a      	cmp	r2, r3
 800ffd6:	d113      	bne.n	8010000 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ffd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffda:	3330      	adds	r3, #48	; 0x30
 800ffdc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f7fe fb23 	bl	800e62c <ld_dword>
 800ffe6:	4602      	mov	r2, r0
 800ffe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffea:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ffec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffee:	3330      	adds	r3, #48	; 0x30
 800fff0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fff4:	4618      	mov	r0, r3
 800fff6:	f7fe fb19 	bl	800e62c <ld_dword>
 800fffa:	4602      	mov	r2, r0
 800fffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fffe:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010002:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010006:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010008:	4b0a      	ldr	r3, [pc, #40]	; (8010034 <find_volume+0x494>)
 801000a:	881b      	ldrh	r3, [r3, #0]
 801000c:	3301      	adds	r3, #1
 801000e:	b29a      	uxth	r2, r3
 8010010:	4b08      	ldr	r3, [pc, #32]	; (8010034 <find_volume+0x494>)
 8010012:	801a      	strh	r2, [r3, #0]
 8010014:	4b07      	ldr	r3, [pc, #28]	; (8010034 <find_volume+0x494>)
 8010016:	881a      	ldrh	r2, [r3, #0]
 8010018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801001a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801001c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801001e:	f7fe fd35 	bl	800ea8c <clear_lock>
#endif
	return FR_OK;
 8010022:	2300      	movs	r3, #0
}
 8010024:	4618      	mov	r0, r3
 8010026:	3758      	adds	r7, #88	; 0x58
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}
 801002c:	41615252 	.word	0x41615252
 8010030:	61417272 	.word	0x61417272
 8010034:	2000023c 	.word	0x2000023c

08010038 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b084      	sub	sp, #16
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010042:	2309      	movs	r3, #9
 8010044:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d01c      	beq.n	8010086 <validate+0x4e>
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d018      	beq.n	8010086 <validate+0x4e>
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	781b      	ldrb	r3, [r3, #0]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d013      	beq.n	8010086 <validate+0x4e>
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	889a      	ldrh	r2, [r3, #4]
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	88db      	ldrh	r3, [r3, #6]
 8010068:	429a      	cmp	r2, r3
 801006a:	d10c      	bne.n	8010086 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	785b      	ldrb	r3, [r3, #1]
 8010072:	4618      	mov	r0, r3
 8010074:	f7fe fa1c 	bl	800e4b0 <disk_status>
 8010078:	4603      	mov	r3, r0
 801007a:	f003 0301 	and.w	r3, r3, #1
 801007e:	2b00      	cmp	r3, #0
 8010080:	d101      	bne.n	8010086 <validate+0x4e>
			res = FR_OK;
 8010082:	2300      	movs	r3, #0
 8010084:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010086:	7bfb      	ldrb	r3, [r7, #15]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d102      	bne.n	8010092 <validate+0x5a>
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	e000      	b.n	8010094 <validate+0x5c>
 8010092:	2300      	movs	r3, #0
 8010094:	683a      	ldr	r2, [r7, #0]
 8010096:	6013      	str	r3, [r2, #0]
	return res;
 8010098:	7bfb      	ldrb	r3, [r7, #15]
}
 801009a:	4618      	mov	r0, r3
 801009c:	3710      	adds	r7, #16
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}
	...

080100a4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b088      	sub	sp, #32
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	60f8      	str	r0, [r7, #12]
 80100ac:	60b9      	str	r1, [r7, #8]
 80100ae:	4613      	mov	r3, r2
 80100b0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80100b2:	68bb      	ldr	r3, [r7, #8]
 80100b4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80100b6:	f107 0310 	add.w	r3, r7, #16
 80100ba:	4618      	mov	r0, r3
 80100bc:	f7ff fcd5 	bl	800fa6a <get_ldnumber>
 80100c0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80100c2:	69fb      	ldr	r3, [r7, #28]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	da01      	bge.n	80100cc <f_mount+0x28>
 80100c8:	230b      	movs	r3, #11
 80100ca:	e02b      	b.n	8010124 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80100cc:	4a17      	ldr	r2, [pc, #92]	; (801012c <f_mount+0x88>)
 80100ce:	69fb      	ldr	r3, [r7, #28]
 80100d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80100d4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80100d6:	69bb      	ldr	r3, [r7, #24]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d005      	beq.n	80100e8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80100dc:	69b8      	ldr	r0, [r7, #24]
 80100de:	f7fe fcd5 	bl	800ea8c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80100e2:	69bb      	ldr	r3, [r7, #24]
 80100e4:	2200      	movs	r2, #0
 80100e6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d002      	beq.n	80100f4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	2200      	movs	r2, #0
 80100f2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80100f4:	68fa      	ldr	r2, [r7, #12]
 80100f6:	490d      	ldr	r1, [pc, #52]	; (801012c <f_mount+0x88>)
 80100f8:	69fb      	ldr	r3, [r7, #28]
 80100fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d002      	beq.n	801010a <f_mount+0x66>
 8010104:	79fb      	ldrb	r3, [r7, #7]
 8010106:	2b01      	cmp	r3, #1
 8010108:	d001      	beq.n	801010e <f_mount+0x6a>
 801010a:	2300      	movs	r3, #0
 801010c:	e00a      	b.n	8010124 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801010e:	f107 010c 	add.w	r1, r7, #12
 8010112:	f107 0308 	add.w	r3, r7, #8
 8010116:	2200      	movs	r2, #0
 8010118:	4618      	mov	r0, r3
 801011a:	f7ff fd41 	bl	800fba0 <find_volume>
 801011e:	4603      	mov	r3, r0
 8010120:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010122:	7dfb      	ldrb	r3, [r7, #23]
}
 8010124:	4618      	mov	r0, r3
 8010126:	3720      	adds	r7, #32
 8010128:	46bd      	mov	sp, r7
 801012a:	bd80      	pop	{r7, pc}
 801012c:	20000234 	.word	0x20000234

08010130 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b098      	sub	sp, #96	; 0x60
 8010134:	af00      	add	r7, sp, #0
 8010136:	60f8      	str	r0, [r7, #12]
 8010138:	60b9      	str	r1, [r7, #8]
 801013a:	4613      	mov	r3, r2
 801013c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d101      	bne.n	8010148 <f_open+0x18>
 8010144:	2309      	movs	r3, #9
 8010146:	e1ad      	b.n	80104a4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010148:	79fb      	ldrb	r3, [r7, #7]
 801014a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801014e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010150:	79fa      	ldrb	r2, [r7, #7]
 8010152:	f107 0110 	add.w	r1, r7, #16
 8010156:	f107 0308 	add.w	r3, r7, #8
 801015a:	4618      	mov	r0, r3
 801015c:	f7ff fd20 	bl	800fba0 <find_volume>
 8010160:	4603      	mov	r3, r0
 8010162:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8010166:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801016a:	2b00      	cmp	r3, #0
 801016c:	f040 8191 	bne.w	8010492 <f_open+0x362>
		dj.obj.fs = fs;
 8010170:	693b      	ldr	r3, [r7, #16]
 8010172:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010174:	68ba      	ldr	r2, [r7, #8]
 8010176:	f107 0314 	add.w	r3, r7, #20
 801017a:	4611      	mov	r1, r2
 801017c:	4618      	mov	r0, r3
 801017e:	f7ff fc03 	bl	800f988 <follow_path>
 8010182:	4603      	mov	r3, r0
 8010184:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010188:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801018c:	2b00      	cmp	r3, #0
 801018e:	d11a      	bne.n	80101c6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010190:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010194:	b25b      	sxtb	r3, r3
 8010196:	2b00      	cmp	r3, #0
 8010198:	da03      	bge.n	80101a2 <f_open+0x72>
				res = FR_INVALID_NAME;
 801019a:	2306      	movs	r3, #6
 801019c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80101a0:	e011      	b.n	80101c6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80101a2:	79fb      	ldrb	r3, [r7, #7]
 80101a4:	f023 0301 	bic.w	r3, r3, #1
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	bf14      	ite	ne
 80101ac:	2301      	movne	r3, #1
 80101ae:	2300      	moveq	r3, #0
 80101b0:	b2db      	uxtb	r3, r3
 80101b2:	461a      	mov	r2, r3
 80101b4:	f107 0314 	add.w	r3, r7, #20
 80101b8:	4611      	mov	r1, r2
 80101ba:	4618      	mov	r0, r3
 80101bc:	f7fe fb1e 	bl	800e7fc <chk_lock>
 80101c0:	4603      	mov	r3, r0
 80101c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80101c6:	79fb      	ldrb	r3, [r7, #7]
 80101c8:	f003 031c 	and.w	r3, r3, #28
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d07f      	beq.n	80102d0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80101d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d017      	beq.n	8010208 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80101d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80101dc:	2b04      	cmp	r3, #4
 80101de:	d10e      	bne.n	80101fe <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80101e0:	f7fe fb68 	bl	800e8b4 <enq_lock>
 80101e4:	4603      	mov	r3, r0
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d006      	beq.n	80101f8 <f_open+0xc8>
 80101ea:	f107 0314 	add.w	r3, r7, #20
 80101ee:	4618      	mov	r0, r3
 80101f0:	f7ff faa4 	bl	800f73c <dir_register>
 80101f4:	4603      	mov	r3, r0
 80101f6:	e000      	b.n	80101fa <f_open+0xca>
 80101f8:	2312      	movs	r3, #18
 80101fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80101fe:	79fb      	ldrb	r3, [r7, #7]
 8010200:	f043 0308 	orr.w	r3, r3, #8
 8010204:	71fb      	strb	r3, [r7, #7]
 8010206:	e010      	b.n	801022a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010208:	7ebb      	ldrb	r3, [r7, #26]
 801020a:	f003 0311 	and.w	r3, r3, #17
 801020e:	2b00      	cmp	r3, #0
 8010210:	d003      	beq.n	801021a <f_open+0xea>
					res = FR_DENIED;
 8010212:	2307      	movs	r3, #7
 8010214:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010218:	e007      	b.n	801022a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801021a:	79fb      	ldrb	r3, [r7, #7]
 801021c:	f003 0304 	and.w	r3, r3, #4
 8010220:	2b00      	cmp	r3, #0
 8010222:	d002      	beq.n	801022a <f_open+0xfa>
 8010224:	2308      	movs	r3, #8
 8010226:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801022a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801022e:	2b00      	cmp	r3, #0
 8010230:	d168      	bne.n	8010304 <f_open+0x1d4>
 8010232:	79fb      	ldrb	r3, [r7, #7]
 8010234:	f003 0308 	and.w	r3, r3, #8
 8010238:	2b00      	cmp	r3, #0
 801023a:	d063      	beq.n	8010304 <f_open+0x1d4>
				dw = GET_FATTIME();
 801023c:	f7fe f9d6 	bl	800e5ec <get_fattime>
 8010240:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010244:	330e      	adds	r3, #14
 8010246:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010248:	4618      	mov	r0, r3
 801024a:	f7fe fa2d 	bl	800e6a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801024e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010250:	3316      	adds	r3, #22
 8010252:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010254:	4618      	mov	r0, r3
 8010256:	f7fe fa27 	bl	800e6a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801025a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801025c:	330b      	adds	r3, #11
 801025e:	2220      	movs	r2, #32
 8010260:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010262:	693b      	ldr	r3, [r7, #16]
 8010264:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010266:	4611      	mov	r1, r2
 8010268:	4618      	mov	r0, r3
 801026a:	f7ff f976 	bl	800f55a <ld_clust>
 801026e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010270:	693b      	ldr	r3, [r7, #16]
 8010272:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010274:	2200      	movs	r2, #0
 8010276:	4618      	mov	r0, r3
 8010278:	f7ff f98e 	bl	800f598 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801027c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801027e:	331c      	adds	r3, #28
 8010280:	2100      	movs	r1, #0
 8010282:	4618      	mov	r0, r3
 8010284:	f7fe fa10 	bl	800e6a8 <st_dword>
					fs->wflag = 1;
 8010288:	693b      	ldr	r3, [r7, #16]
 801028a:	2201      	movs	r2, #1
 801028c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801028e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010290:	2b00      	cmp	r3, #0
 8010292:	d037      	beq.n	8010304 <f_open+0x1d4>
						dw = fs->winsect;
 8010294:	693b      	ldr	r3, [r7, #16]
 8010296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010298:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801029a:	f107 0314 	add.w	r3, r7, #20
 801029e:	2200      	movs	r2, #0
 80102a0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80102a2:	4618      	mov	r0, r3
 80102a4:	f7fe fea1 	bl	800efea <remove_chain>
 80102a8:	4603      	mov	r3, r0
 80102aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80102ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d126      	bne.n	8010304 <f_open+0x1d4>
							res = move_window(fs, dw);
 80102b6:	693b      	ldr	r3, [r7, #16]
 80102b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80102ba:	4618      	mov	r0, r3
 80102bc:	f7fe fc4e 	bl	800eb5c <move_window>
 80102c0:	4603      	mov	r3, r0
 80102c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80102c6:	693b      	ldr	r3, [r7, #16]
 80102c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80102ca:	3a01      	subs	r2, #1
 80102cc:	60da      	str	r2, [r3, #12]
 80102ce:	e019      	b.n	8010304 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80102d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d115      	bne.n	8010304 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80102d8:	7ebb      	ldrb	r3, [r7, #26]
 80102da:	f003 0310 	and.w	r3, r3, #16
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d003      	beq.n	80102ea <f_open+0x1ba>
					res = FR_NO_FILE;
 80102e2:	2304      	movs	r3, #4
 80102e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80102e8:	e00c      	b.n	8010304 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80102ea:	79fb      	ldrb	r3, [r7, #7]
 80102ec:	f003 0302 	and.w	r3, r3, #2
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d007      	beq.n	8010304 <f_open+0x1d4>
 80102f4:	7ebb      	ldrb	r3, [r7, #26]
 80102f6:	f003 0301 	and.w	r3, r3, #1
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d002      	beq.n	8010304 <f_open+0x1d4>
						res = FR_DENIED;
 80102fe:	2307      	movs	r3, #7
 8010300:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010304:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010308:	2b00      	cmp	r3, #0
 801030a:	d128      	bne.n	801035e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801030c:	79fb      	ldrb	r3, [r7, #7]
 801030e:	f003 0308 	and.w	r3, r3, #8
 8010312:	2b00      	cmp	r3, #0
 8010314:	d003      	beq.n	801031e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8010316:	79fb      	ldrb	r3, [r7, #7]
 8010318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801031c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801031e:	693b      	ldr	r3, [r7, #16]
 8010320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010326:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801032c:	79fb      	ldrb	r3, [r7, #7]
 801032e:	f023 0301 	bic.w	r3, r3, #1
 8010332:	2b00      	cmp	r3, #0
 8010334:	bf14      	ite	ne
 8010336:	2301      	movne	r3, #1
 8010338:	2300      	moveq	r3, #0
 801033a:	b2db      	uxtb	r3, r3
 801033c:	461a      	mov	r2, r3
 801033e:	f107 0314 	add.w	r3, r7, #20
 8010342:	4611      	mov	r1, r2
 8010344:	4618      	mov	r0, r3
 8010346:	f7fe fad7 	bl	800e8f8 <inc_lock>
 801034a:	4602      	mov	r2, r0
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	691b      	ldr	r3, [r3, #16]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d102      	bne.n	801035e <f_open+0x22e>
 8010358:	2302      	movs	r3, #2
 801035a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801035e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010362:	2b00      	cmp	r3, #0
 8010364:	f040 8095 	bne.w	8010492 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010368:	693b      	ldr	r3, [r7, #16]
 801036a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801036c:	4611      	mov	r1, r2
 801036e:	4618      	mov	r0, r3
 8010370:	f7ff f8f3 	bl	800f55a <ld_clust>
 8010374:	4602      	mov	r2, r0
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801037a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801037c:	331c      	adds	r3, #28
 801037e:	4618      	mov	r0, r3
 8010380:	f7fe f954 	bl	800e62c <ld_dword>
 8010384:	4602      	mov	r2, r0
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	2200      	movs	r2, #0
 801038e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010390:	693a      	ldr	r2, [r7, #16]
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010396:	693b      	ldr	r3, [r7, #16]
 8010398:	88da      	ldrh	r2, [r3, #6]
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	79fa      	ldrb	r2, [r7, #7]
 80103a2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	2200      	movs	r2, #0
 80103a8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	2200      	movs	r2, #0
 80103ae:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	2200      	movs	r2, #0
 80103b4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	3330      	adds	r3, #48	; 0x30
 80103ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80103be:	2100      	movs	r1, #0
 80103c0:	4618      	mov	r0, r3
 80103c2:	f7fe f9be 	bl	800e742 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80103c6:	79fb      	ldrb	r3, [r7, #7]
 80103c8:	f003 0320 	and.w	r3, r3, #32
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d060      	beq.n	8010492 <f_open+0x362>
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	68db      	ldr	r3, [r3, #12]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d05c      	beq.n	8010492 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	68da      	ldr	r2, [r3, #12]
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80103e0:	693b      	ldr	r3, [r7, #16]
 80103e2:	895b      	ldrh	r3, [r3, #10]
 80103e4:	025b      	lsls	r3, r3, #9
 80103e6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	689b      	ldr	r3, [r3, #8]
 80103ec:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	68db      	ldr	r3, [r3, #12]
 80103f2:	657b      	str	r3, [r7, #84]	; 0x54
 80103f4:	e016      	b.n	8010424 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80103fa:	4618      	mov	r0, r3
 80103fc:	f7fe fc69 	bl	800ecd2 <get_fat>
 8010400:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8010402:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010404:	2b01      	cmp	r3, #1
 8010406:	d802      	bhi.n	801040e <f_open+0x2de>
 8010408:	2302      	movs	r3, #2
 801040a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801040e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010414:	d102      	bne.n	801041c <f_open+0x2ec>
 8010416:	2301      	movs	r3, #1
 8010418:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801041c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801041e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010420:	1ad3      	subs	r3, r2, r3
 8010422:	657b      	str	r3, [r7, #84]	; 0x54
 8010424:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010428:	2b00      	cmp	r3, #0
 801042a:	d103      	bne.n	8010434 <f_open+0x304>
 801042c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801042e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010430:	429a      	cmp	r2, r3
 8010432:	d8e0      	bhi.n	80103f6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010438:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801043a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801043e:	2b00      	cmp	r3, #0
 8010440:	d127      	bne.n	8010492 <f_open+0x362>
 8010442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010448:	2b00      	cmp	r3, #0
 801044a:	d022      	beq.n	8010492 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801044c:	693b      	ldr	r3, [r7, #16]
 801044e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010450:	4618      	mov	r0, r3
 8010452:	f7fe fc1f 	bl	800ec94 <clust2sect>
 8010456:	6478      	str	r0, [r7, #68]	; 0x44
 8010458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801045a:	2b00      	cmp	r3, #0
 801045c:	d103      	bne.n	8010466 <f_open+0x336>
						res = FR_INT_ERR;
 801045e:	2302      	movs	r3, #2
 8010460:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010464:	e015      	b.n	8010492 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010468:	0a5a      	lsrs	r2, r3, #9
 801046a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801046c:	441a      	add	r2, r3
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010472:	693b      	ldr	r3, [r7, #16]
 8010474:	7858      	ldrb	r0, [r3, #1]
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	6a1a      	ldr	r2, [r3, #32]
 8010480:	2301      	movs	r3, #1
 8010482:	f7fe f855 	bl	800e530 <disk_read>
 8010486:	4603      	mov	r3, r0
 8010488:	2b00      	cmp	r3, #0
 801048a:	d002      	beq.n	8010492 <f_open+0x362>
 801048c:	2301      	movs	r3, #1
 801048e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010492:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010496:	2b00      	cmp	r3, #0
 8010498:	d002      	beq.n	80104a0 <f_open+0x370>
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	2200      	movs	r2, #0
 801049e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80104a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	3760      	adds	r7, #96	; 0x60
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}

080104ac <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b08e      	sub	sp, #56	; 0x38
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	60f8      	str	r0, [r7, #12]
 80104b4:	60b9      	str	r1, [r7, #8]
 80104b6:	607a      	str	r2, [r7, #4]
 80104b8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80104ba:	68bb      	ldr	r3, [r7, #8]
 80104bc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	2200      	movs	r2, #0
 80104c2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	f107 0214 	add.w	r2, r7, #20
 80104ca:	4611      	mov	r1, r2
 80104cc:	4618      	mov	r0, r3
 80104ce:	f7ff fdb3 	bl	8010038 <validate>
 80104d2:	4603      	mov	r3, r0
 80104d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80104d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d107      	bne.n	80104f0 <f_read+0x44>
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	7d5b      	ldrb	r3, [r3, #21]
 80104e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80104e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d002      	beq.n	80104f6 <f_read+0x4a>
 80104f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104f4:	e115      	b.n	8010722 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	7d1b      	ldrb	r3, [r3, #20]
 80104fa:	f003 0301 	and.w	r3, r3, #1
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d101      	bne.n	8010506 <f_read+0x5a>
 8010502:	2307      	movs	r3, #7
 8010504:	e10d      	b.n	8010722 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	68da      	ldr	r2, [r3, #12]
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	699b      	ldr	r3, [r3, #24]
 801050e:	1ad3      	subs	r3, r2, r3
 8010510:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8010512:	687a      	ldr	r2, [r7, #4]
 8010514:	6a3b      	ldr	r3, [r7, #32]
 8010516:	429a      	cmp	r2, r3
 8010518:	f240 80fe 	bls.w	8010718 <f_read+0x26c>
 801051c:	6a3b      	ldr	r3, [r7, #32]
 801051e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010520:	e0fa      	b.n	8010718 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	699b      	ldr	r3, [r3, #24]
 8010526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801052a:	2b00      	cmp	r3, #0
 801052c:	f040 80c6 	bne.w	80106bc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	699b      	ldr	r3, [r3, #24]
 8010534:	0a5b      	lsrs	r3, r3, #9
 8010536:	697a      	ldr	r2, [r7, #20]
 8010538:	8952      	ldrh	r2, [r2, #10]
 801053a:	3a01      	subs	r2, #1
 801053c:	4013      	ands	r3, r2
 801053e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8010540:	69fb      	ldr	r3, [r7, #28]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d12f      	bne.n	80105a6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	699b      	ldr	r3, [r3, #24]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d103      	bne.n	8010556 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	689b      	ldr	r3, [r3, #8]
 8010552:	633b      	str	r3, [r7, #48]	; 0x30
 8010554:	e013      	b.n	801057e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801055a:	2b00      	cmp	r3, #0
 801055c:	d007      	beq.n	801056e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	699b      	ldr	r3, [r3, #24]
 8010562:	4619      	mov	r1, r3
 8010564:	68f8      	ldr	r0, [r7, #12]
 8010566:	f7fe fe3d 	bl	800f1e4 <clmt_clust>
 801056a:	6338      	str	r0, [r7, #48]	; 0x30
 801056c:	e007      	b.n	801057e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801056e:	68fa      	ldr	r2, [r7, #12]
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	69db      	ldr	r3, [r3, #28]
 8010574:	4619      	mov	r1, r3
 8010576:	4610      	mov	r0, r2
 8010578:	f7fe fbab 	bl	800ecd2 <get_fat>
 801057c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801057e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010580:	2b01      	cmp	r3, #1
 8010582:	d804      	bhi.n	801058e <f_read+0xe2>
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	2202      	movs	r2, #2
 8010588:	755a      	strb	r2, [r3, #21]
 801058a:	2302      	movs	r3, #2
 801058c:	e0c9      	b.n	8010722 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801058e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010594:	d104      	bne.n	80105a0 <f_read+0xf4>
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	2201      	movs	r2, #1
 801059a:	755a      	strb	r2, [r3, #21]
 801059c:	2301      	movs	r3, #1
 801059e:	e0c0      	b.n	8010722 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105a4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80105a6:	697a      	ldr	r2, [r7, #20]
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	69db      	ldr	r3, [r3, #28]
 80105ac:	4619      	mov	r1, r3
 80105ae:	4610      	mov	r0, r2
 80105b0:	f7fe fb70 	bl	800ec94 <clust2sect>
 80105b4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80105b6:	69bb      	ldr	r3, [r7, #24]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d104      	bne.n	80105c6 <f_read+0x11a>
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	2202      	movs	r2, #2
 80105c0:	755a      	strb	r2, [r3, #21]
 80105c2:	2302      	movs	r3, #2
 80105c4:	e0ad      	b.n	8010722 <f_read+0x276>
			sect += csect;
 80105c6:	69ba      	ldr	r2, [r7, #24]
 80105c8:	69fb      	ldr	r3, [r7, #28]
 80105ca:	4413      	add	r3, r2
 80105cc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	0a5b      	lsrs	r3, r3, #9
 80105d2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80105d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d039      	beq.n	801064e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80105da:	69fa      	ldr	r2, [r7, #28]
 80105dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105de:	4413      	add	r3, r2
 80105e0:	697a      	ldr	r2, [r7, #20]
 80105e2:	8952      	ldrh	r2, [r2, #10]
 80105e4:	4293      	cmp	r3, r2
 80105e6:	d905      	bls.n	80105f4 <f_read+0x148>
					cc = fs->csize - csect;
 80105e8:	697b      	ldr	r3, [r7, #20]
 80105ea:	895b      	ldrh	r3, [r3, #10]
 80105ec:	461a      	mov	r2, r3
 80105ee:	69fb      	ldr	r3, [r7, #28]
 80105f0:	1ad3      	subs	r3, r2, r3
 80105f2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80105f4:	697b      	ldr	r3, [r7, #20]
 80105f6:	7858      	ldrb	r0, [r3, #1]
 80105f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105fa:	69ba      	ldr	r2, [r7, #24]
 80105fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80105fe:	f7fd ff97 	bl	800e530 <disk_read>
 8010602:	4603      	mov	r3, r0
 8010604:	2b00      	cmp	r3, #0
 8010606:	d004      	beq.n	8010612 <f_read+0x166>
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	2201      	movs	r2, #1
 801060c:	755a      	strb	r2, [r3, #21]
 801060e:	2301      	movs	r3, #1
 8010610:	e087      	b.n	8010722 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	7d1b      	ldrb	r3, [r3, #20]
 8010616:	b25b      	sxtb	r3, r3
 8010618:	2b00      	cmp	r3, #0
 801061a:	da14      	bge.n	8010646 <f_read+0x19a>
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	6a1a      	ldr	r2, [r3, #32]
 8010620:	69bb      	ldr	r3, [r7, #24]
 8010622:	1ad3      	subs	r3, r2, r3
 8010624:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010626:	429a      	cmp	r2, r3
 8010628:	d90d      	bls.n	8010646 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	6a1a      	ldr	r2, [r3, #32]
 801062e:	69bb      	ldr	r3, [r7, #24]
 8010630:	1ad3      	subs	r3, r2, r3
 8010632:	025b      	lsls	r3, r3, #9
 8010634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010636:	18d0      	adds	r0, r2, r3
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	3330      	adds	r3, #48	; 0x30
 801063c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010640:	4619      	mov	r1, r3
 8010642:	f7fe f85d 	bl	800e700 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8010646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010648:	025b      	lsls	r3, r3, #9
 801064a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801064c:	e050      	b.n	80106f0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	6a1b      	ldr	r3, [r3, #32]
 8010652:	69ba      	ldr	r2, [r7, #24]
 8010654:	429a      	cmp	r2, r3
 8010656:	d02e      	beq.n	80106b6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	7d1b      	ldrb	r3, [r3, #20]
 801065c:	b25b      	sxtb	r3, r3
 801065e:	2b00      	cmp	r3, #0
 8010660:	da18      	bge.n	8010694 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010662:	697b      	ldr	r3, [r7, #20]
 8010664:	7858      	ldrb	r0, [r3, #1]
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	6a1a      	ldr	r2, [r3, #32]
 8010670:	2301      	movs	r3, #1
 8010672:	f7fd ff7d 	bl	800e570 <disk_write>
 8010676:	4603      	mov	r3, r0
 8010678:	2b00      	cmp	r3, #0
 801067a:	d004      	beq.n	8010686 <f_read+0x1da>
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	2201      	movs	r2, #1
 8010680:	755a      	strb	r2, [r3, #21]
 8010682:	2301      	movs	r3, #1
 8010684:	e04d      	b.n	8010722 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	7d1b      	ldrb	r3, [r3, #20]
 801068a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801068e:	b2da      	uxtb	r2, r3
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010694:	697b      	ldr	r3, [r7, #20]
 8010696:	7858      	ldrb	r0, [r3, #1]
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801069e:	2301      	movs	r3, #1
 80106a0:	69ba      	ldr	r2, [r7, #24]
 80106a2:	f7fd ff45 	bl	800e530 <disk_read>
 80106a6:	4603      	mov	r3, r0
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d004      	beq.n	80106b6 <f_read+0x20a>
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	2201      	movs	r2, #1
 80106b0:	755a      	strb	r2, [r3, #21]
 80106b2:	2301      	movs	r3, #1
 80106b4:	e035      	b.n	8010722 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	69ba      	ldr	r2, [r7, #24]
 80106ba:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	699b      	ldr	r3, [r3, #24]
 80106c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80106c4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80106c8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80106ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	429a      	cmp	r2, r3
 80106d0:	d901      	bls.n	80106d6 <f_read+0x22a>
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	699b      	ldr	r3, [r3, #24]
 80106e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80106e4:	4413      	add	r3, r2
 80106e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106e8:	4619      	mov	r1, r3
 80106ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80106ec:	f7fe f808 	bl	800e700 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80106f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106f4:	4413      	add	r3, r2
 80106f6:	627b      	str	r3, [r7, #36]	; 0x24
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	699a      	ldr	r2, [r3, #24]
 80106fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106fe:	441a      	add	r2, r3
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	619a      	str	r2, [r3, #24]
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	681a      	ldr	r2, [r3, #0]
 8010708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801070a:	441a      	add	r2, r3
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	601a      	str	r2, [r3, #0]
 8010710:	687a      	ldr	r2, [r7, #4]
 8010712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010714:	1ad3      	subs	r3, r2, r3
 8010716:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	2b00      	cmp	r3, #0
 801071c:	f47f af01 	bne.w	8010522 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010720:	2300      	movs	r3, #0
}
 8010722:	4618      	mov	r0, r3
 8010724:	3738      	adds	r7, #56	; 0x38
 8010726:	46bd      	mov	sp, r7
 8010728:	bd80      	pop	{r7, pc}

0801072a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801072a:	b580      	push	{r7, lr}
 801072c:	b086      	sub	sp, #24
 801072e:	af00      	add	r7, sp, #0
 8010730:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f107 0208 	add.w	r2, r7, #8
 8010738:	4611      	mov	r1, r2
 801073a:	4618      	mov	r0, r3
 801073c:	f7ff fc7c 	bl	8010038 <validate>
 8010740:	4603      	mov	r3, r0
 8010742:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010744:	7dfb      	ldrb	r3, [r7, #23]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d168      	bne.n	801081c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	7d1b      	ldrb	r3, [r3, #20]
 801074e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010752:	2b00      	cmp	r3, #0
 8010754:	d062      	beq.n	801081c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	7d1b      	ldrb	r3, [r3, #20]
 801075a:	b25b      	sxtb	r3, r3
 801075c:	2b00      	cmp	r3, #0
 801075e:	da15      	bge.n	801078c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	7858      	ldrb	r0, [r3, #1]
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	6a1a      	ldr	r2, [r3, #32]
 801076e:	2301      	movs	r3, #1
 8010770:	f7fd fefe 	bl	800e570 <disk_write>
 8010774:	4603      	mov	r3, r0
 8010776:	2b00      	cmp	r3, #0
 8010778:	d001      	beq.n	801077e <f_sync+0x54>
 801077a:	2301      	movs	r3, #1
 801077c:	e04f      	b.n	801081e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	7d1b      	ldrb	r3, [r3, #20]
 8010782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010786:	b2da      	uxtb	r2, r3
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801078c:	f7fd ff2e 	bl	800e5ec <get_fattime>
 8010790:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010792:	68ba      	ldr	r2, [r7, #8]
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010798:	4619      	mov	r1, r3
 801079a:	4610      	mov	r0, r2
 801079c:	f7fe f9de 	bl	800eb5c <move_window>
 80107a0:	4603      	mov	r3, r0
 80107a2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80107a4:	7dfb      	ldrb	r3, [r7, #23]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d138      	bne.n	801081c <f_sync+0xf2>
					dir = fp->dir_ptr;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107ae:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	330b      	adds	r3, #11
 80107b4:	781a      	ldrb	r2, [r3, #0]
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	330b      	adds	r3, #11
 80107ba:	f042 0220 	orr.w	r2, r2, #32
 80107be:	b2d2      	uxtb	r2, r2
 80107c0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	6818      	ldr	r0, [r3, #0]
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	689b      	ldr	r3, [r3, #8]
 80107ca:	461a      	mov	r2, r3
 80107cc:	68f9      	ldr	r1, [r7, #12]
 80107ce:	f7fe fee3 	bl	800f598 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	f103 021c 	add.w	r2, r3, #28
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	68db      	ldr	r3, [r3, #12]
 80107dc:	4619      	mov	r1, r3
 80107de:	4610      	mov	r0, r2
 80107e0:	f7fd ff62 	bl	800e6a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	3316      	adds	r3, #22
 80107e8:	6939      	ldr	r1, [r7, #16]
 80107ea:	4618      	mov	r0, r3
 80107ec:	f7fd ff5c 	bl	800e6a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	3312      	adds	r3, #18
 80107f4:	2100      	movs	r1, #0
 80107f6:	4618      	mov	r0, r3
 80107f8:	f7fd ff3b 	bl	800e672 <st_word>
					fs->wflag = 1;
 80107fc:	68bb      	ldr	r3, [r7, #8]
 80107fe:	2201      	movs	r2, #1
 8010800:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010802:	68bb      	ldr	r3, [r7, #8]
 8010804:	4618      	mov	r0, r3
 8010806:	f7fe f9d7 	bl	800ebb8 <sync_fs>
 801080a:	4603      	mov	r3, r0
 801080c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	7d1b      	ldrb	r3, [r3, #20]
 8010812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010816:	b2da      	uxtb	r2, r3
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801081c:	7dfb      	ldrb	r3, [r7, #23]
}
 801081e:	4618      	mov	r0, r3
 8010820:	3718      	adds	r7, #24
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}

08010826 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010826:	b580      	push	{r7, lr}
 8010828:	b084      	sub	sp, #16
 801082a:	af00      	add	r7, sp, #0
 801082c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801082e:	6878      	ldr	r0, [r7, #4]
 8010830:	f7ff ff7b 	bl	801072a <f_sync>
 8010834:	4603      	mov	r3, r0
 8010836:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010838:	7bfb      	ldrb	r3, [r7, #15]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d118      	bne.n	8010870 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f107 0208 	add.w	r2, r7, #8
 8010844:	4611      	mov	r1, r2
 8010846:	4618      	mov	r0, r3
 8010848:	f7ff fbf6 	bl	8010038 <validate>
 801084c:	4603      	mov	r3, r0
 801084e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010850:	7bfb      	ldrb	r3, [r7, #15]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d10c      	bne.n	8010870 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	691b      	ldr	r3, [r3, #16]
 801085a:	4618      	mov	r0, r3
 801085c:	f7fe f8da 	bl	800ea14 <dec_lock>
 8010860:	4603      	mov	r3, r0
 8010862:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010864:	7bfb      	ldrb	r3, [r7, #15]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d102      	bne.n	8010870 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	2200      	movs	r2, #0
 801086e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010870:	7bfb      	ldrb	r3, [r7, #15]
}
 8010872:	4618      	mov	r0, r3
 8010874:	3710      	adds	r7, #16
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}

0801087a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801087a:	b580      	push	{r7, lr}
 801087c:	b086      	sub	sp, #24
 801087e:	af00      	add	r7, sp, #0
 8010880:	6078      	str	r0, [r7, #4]
 8010882:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d101      	bne.n	801088e <f_opendir+0x14>
 801088a:	2309      	movs	r3, #9
 801088c:	e064      	b.n	8010958 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8010892:	f107 010c 	add.w	r1, r7, #12
 8010896:	463b      	mov	r3, r7
 8010898:	2200      	movs	r2, #0
 801089a:	4618      	mov	r0, r3
 801089c:	f7ff f980 	bl	800fba0 <find_volume>
 80108a0:	4603      	mov	r3, r0
 80108a2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80108a4:	7dfb      	ldrb	r3, [r7, #23]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d14f      	bne.n	801094a <f_opendir+0xd0>
		obj->fs = fs;
 80108aa:	68fa      	ldr	r2, [r7, #12]
 80108ac:	693b      	ldr	r3, [r7, #16]
 80108ae:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	4619      	mov	r1, r3
 80108b4:	6878      	ldr	r0, [r7, #4]
 80108b6:	f7ff f867 	bl	800f988 <follow_path>
 80108ba:	4603      	mov	r3, r0
 80108bc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80108be:	7dfb      	ldrb	r3, [r7, #23]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d13d      	bne.n	8010940 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80108ca:	b25b      	sxtb	r3, r3
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	db12      	blt.n	80108f6 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80108d0:	693b      	ldr	r3, [r7, #16]
 80108d2:	799b      	ldrb	r3, [r3, #6]
 80108d4:	f003 0310 	and.w	r3, r3, #16
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d00a      	beq.n	80108f2 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80108dc:	68fa      	ldr	r2, [r7, #12]
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	6a1b      	ldr	r3, [r3, #32]
 80108e2:	4619      	mov	r1, r3
 80108e4:	4610      	mov	r0, r2
 80108e6:	f7fe fe38 	bl	800f55a <ld_clust>
 80108ea:	4602      	mov	r2, r0
 80108ec:	693b      	ldr	r3, [r7, #16]
 80108ee:	609a      	str	r2, [r3, #8]
 80108f0:	e001      	b.n	80108f6 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80108f2:	2305      	movs	r3, #5
 80108f4:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80108f6:	7dfb      	ldrb	r3, [r7, #23]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d121      	bne.n	8010940 <f_opendir+0xc6>
				obj->id = fs->id;
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	88da      	ldrh	r2, [r3, #6]
 8010900:	693b      	ldr	r3, [r7, #16]
 8010902:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8010904:	2100      	movs	r1, #0
 8010906:	6878      	ldr	r0, [r7, #4]
 8010908:	f7fe fca0 	bl	800f24c <dir_sdi>
 801090c:	4603      	mov	r3, r0
 801090e:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8010910:	7dfb      	ldrb	r3, [r7, #23]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d114      	bne.n	8010940 <f_opendir+0xc6>
					if (obj->sclust) {
 8010916:	693b      	ldr	r3, [r7, #16]
 8010918:	689b      	ldr	r3, [r3, #8]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d00d      	beq.n	801093a <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801091e:	2100      	movs	r1, #0
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f7fd ffe9 	bl	800e8f8 <inc_lock>
 8010926:	4602      	mov	r2, r0
 8010928:	693b      	ldr	r3, [r7, #16]
 801092a:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801092c:	693b      	ldr	r3, [r7, #16]
 801092e:	691b      	ldr	r3, [r3, #16]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d105      	bne.n	8010940 <f_opendir+0xc6>
 8010934:	2312      	movs	r3, #18
 8010936:	75fb      	strb	r3, [r7, #23]
 8010938:	e002      	b.n	8010940 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 801093a:	693b      	ldr	r3, [r7, #16]
 801093c:	2200      	movs	r2, #0
 801093e:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010940:	7dfb      	ldrb	r3, [r7, #23]
 8010942:	2b04      	cmp	r3, #4
 8010944:	d101      	bne.n	801094a <f_opendir+0xd0>
 8010946:	2305      	movs	r3, #5
 8010948:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801094a:	7dfb      	ldrb	r3, [r7, #23]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d002      	beq.n	8010956 <f_opendir+0xdc>
 8010950:	693b      	ldr	r3, [r7, #16]
 8010952:	2200      	movs	r2, #0
 8010954:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010956:	7dfb      	ldrb	r3, [r7, #23]
}
 8010958:	4618      	mov	r0, r3
 801095a:	3718      	adds	r7, #24
 801095c:	46bd      	mov	sp, r7
 801095e:	bd80      	pop	{r7, pc}

08010960 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b084      	sub	sp, #16
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
 8010968:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	f107 0208 	add.w	r2, r7, #8
 8010970:	4611      	mov	r1, r2
 8010972:	4618      	mov	r0, r3
 8010974:	f7ff fb60 	bl	8010038 <validate>
 8010978:	4603      	mov	r3, r0
 801097a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801097c:	7bfb      	ldrb	r3, [r7, #15]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d126      	bne.n	80109d0 <f_readdir+0x70>
		if (!fno) {
 8010982:	683b      	ldr	r3, [r7, #0]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d106      	bne.n	8010996 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8010988:	2100      	movs	r1, #0
 801098a:	6878      	ldr	r0, [r7, #4]
 801098c:	f7fe fc5e 	bl	800f24c <dir_sdi>
 8010990:	4603      	mov	r3, r0
 8010992:	73fb      	strb	r3, [r7, #15]
 8010994:	e01c      	b.n	80109d0 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8010996:	2100      	movs	r1, #0
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f7fe fe1d 	bl	800f5d8 <dir_read>
 801099e:	4603      	mov	r3, r0
 80109a0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80109a2:	7bfb      	ldrb	r3, [r7, #15]
 80109a4:	2b04      	cmp	r3, #4
 80109a6:	d101      	bne.n	80109ac <f_readdir+0x4c>
 80109a8:	2300      	movs	r3, #0
 80109aa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80109ac:	7bfb      	ldrb	r3, [r7, #15]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d10e      	bne.n	80109d0 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80109b2:	6839      	ldr	r1, [r7, #0]
 80109b4:	6878      	ldr	r0, [r7, #4]
 80109b6:	f7fe fef3 	bl	800f7a0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80109ba:	2100      	movs	r1, #0
 80109bc:	6878      	ldr	r0, [r7, #4]
 80109be:	f7fe fcc0 	bl	800f342 <dir_next>
 80109c2:	4603      	mov	r3, r0
 80109c4:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80109c6:	7bfb      	ldrb	r3, [r7, #15]
 80109c8:	2b04      	cmp	r3, #4
 80109ca:	d101      	bne.n	80109d0 <f_readdir+0x70>
 80109cc:	2300      	movs	r3, #0
 80109ce:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80109d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80109d2:	4618      	mov	r0, r3
 80109d4:	3710      	adds	r7, #16
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bd80      	pop	{r7, pc}
	...

080109dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80109dc:	b480      	push	{r7}
 80109de:	b087      	sub	sp, #28
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	60f8      	str	r0, [r7, #12]
 80109e4:	60b9      	str	r1, [r7, #8]
 80109e6:	4613      	mov	r3, r2
 80109e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80109ea:	2301      	movs	r3, #1
 80109ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80109ee:	2300      	movs	r3, #0
 80109f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80109f2:	4b1f      	ldr	r3, [pc, #124]	; (8010a70 <FATFS_LinkDriverEx+0x94>)
 80109f4:	7b9b      	ldrb	r3, [r3, #14]
 80109f6:	b2db      	uxtb	r3, r3
 80109f8:	2b01      	cmp	r3, #1
 80109fa:	d831      	bhi.n	8010a60 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80109fc:	4b1c      	ldr	r3, [pc, #112]	; (8010a70 <FATFS_LinkDriverEx+0x94>)
 80109fe:	7b9b      	ldrb	r3, [r3, #14]
 8010a00:	b2db      	uxtb	r3, r3
 8010a02:	461a      	mov	r2, r3
 8010a04:	4b1a      	ldr	r3, [pc, #104]	; (8010a70 <FATFS_LinkDriverEx+0x94>)
 8010a06:	2100      	movs	r1, #0
 8010a08:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010a0a:	4b19      	ldr	r3, [pc, #100]	; (8010a70 <FATFS_LinkDriverEx+0x94>)
 8010a0c:	7b9b      	ldrb	r3, [r3, #14]
 8010a0e:	b2db      	uxtb	r3, r3
 8010a10:	4a17      	ldr	r2, [pc, #92]	; (8010a70 <FATFS_LinkDriverEx+0x94>)
 8010a12:	009b      	lsls	r3, r3, #2
 8010a14:	4413      	add	r3, r2
 8010a16:	68fa      	ldr	r2, [r7, #12]
 8010a18:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010a1a:	4b15      	ldr	r3, [pc, #84]	; (8010a70 <FATFS_LinkDriverEx+0x94>)
 8010a1c:	7b9b      	ldrb	r3, [r3, #14]
 8010a1e:	b2db      	uxtb	r3, r3
 8010a20:	461a      	mov	r2, r3
 8010a22:	4b13      	ldr	r3, [pc, #76]	; (8010a70 <FATFS_LinkDriverEx+0x94>)
 8010a24:	4413      	add	r3, r2
 8010a26:	79fa      	ldrb	r2, [r7, #7]
 8010a28:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 8010a2a:	4b11      	ldr	r3, [pc, #68]	; (8010a70 <FATFS_LinkDriverEx+0x94>)
 8010a2c:	7b9b      	ldrb	r3, [r3, #14]
 8010a2e:	b2db      	uxtb	r3, r3
 8010a30:	1c5a      	adds	r2, r3, #1
 8010a32:	b2d1      	uxtb	r1, r2
 8010a34:	4a0e      	ldr	r2, [pc, #56]	; (8010a70 <FATFS_LinkDriverEx+0x94>)
 8010a36:	7391      	strb	r1, [r2, #14]
 8010a38:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010a3a:	7dbb      	ldrb	r3, [r7, #22]
 8010a3c:	3330      	adds	r3, #48	; 0x30
 8010a3e:	b2da      	uxtb	r2, r3
 8010a40:	68bb      	ldr	r3, [r7, #8]
 8010a42:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	3301      	adds	r3, #1
 8010a48:	223a      	movs	r2, #58	; 0x3a
 8010a4a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	3302      	adds	r3, #2
 8010a50:	222f      	movs	r2, #47	; 0x2f
 8010a52:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	3303      	adds	r3, #3
 8010a58:	2200      	movs	r2, #0
 8010a5a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a62:	4618      	mov	r0, r3
 8010a64:	371c      	adds	r7, #28
 8010a66:	46bd      	mov	sp, r7
 8010a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6c:	4770      	bx	lr
 8010a6e:	bf00      	nop
 8010a70:	20000260 	.word	0x20000260

08010a74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b082      	sub	sp, #8
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
 8010a7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010a7e:	2200      	movs	r2, #0
 8010a80:	6839      	ldr	r1, [r7, #0]
 8010a82:	6878      	ldr	r0, [r7, #4]
 8010a84:	f7ff ffaa 	bl	80109dc <FATFS_LinkDriverEx>
 8010a88:	4603      	mov	r3, r0
}
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	3708      	adds	r7, #8
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}
	...

08010a94 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b082      	sub	sp, #8
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010a9e:	4b0b      	ldr	r3, [pc, #44]	; (8010acc <SD_CheckStatus+0x38>)
 8010aa0:	2201      	movs	r2, #1
 8010aa2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010aa4:	f7f2 ffe8 	bl	8003a78 <BSP_SD_GetCardState>
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d107      	bne.n	8010abe <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010aae:	4b07      	ldr	r3, [pc, #28]	; (8010acc <SD_CheckStatus+0x38>)
 8010ab0:	781b      	ldrb	r3, [r3, #0]
 8010ab2:	b2db      	uxtb	r3, r3
 8010ab4:	f023 0301 	bic.w	r3, r3, #1
 8010ab8:	b2da      	uxtb	r2, r3
 8010aba:	4b04      	ldr	r3, [pc, #16]	; (8010acc <SD_CheckStatus+0x38>)
 8010abc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010abe:	4b03      	ldr	r3, [pc, #12]	; (8010acc <SD_CheckStatus+0x38>)
 8010ac0:	781b      	ldrb	r3, [r3, #0]
 8010ac2:	b2db      	uxtb	r3, r3
}
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	3708      	adds	r7, #8
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	bd80      	pop	{r7, pc}
 8010acc:	20000084 	.word	0x20000084

08010ad0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b082      	sub	sp, #8
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010ada:	4b0b      	ldr	r3, [pc, #44]	; (8010b08 <SD_initialize+0x38>)
 8010adc:	2201      	movs	r2, #1
 8010ade:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010ae0:	f7f2 fe10 	bl	8003704 <BSP_SD_Init>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d107      	bne.n	8010afa <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8010aea:	79fb      	ldrb	r3, [r7, #7]
 8010aec:	4618      	mov	r0, r3
 8010aee:	f7ff ffd1 	bl	8010a94 <SD_CheckStatus>
 8010af2:	4603      	mov	r3, r0
 8010af4:	461a      	mov	r2, r3
 8010af6:	4b04      	ldr	r3, [pc, #16]	; (8010b08 <SD_initialize+0x38>)
 8010af8:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8010afa:	4b03      	ldr	r3, [pc, #12]	; (8010b08 <SD_initialize+0x38>)
 8010afc:	781b      	ldrb	r3, [r3, #0]
 8010afe:	b2db      	uxtb	r3, r3
}
 8010b00:	4618      	mov	r0, r3
 8010b02:	3708      	adds	r7, #8
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}
 8010b08:	20000084 	.word	0x20000084

08010b0c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b082      	sub	sp, #8
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	4603      	mov	r3, r0
 8010b14:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010b16:	79fb      	ldrb	r3, [r7, #7]
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f7ff ffbb 	bl	8010a94 <SD_CheckStatus>
 8010b1e:	4603      	mov	r3, r0
}
 8010b20:	4618      	mov	r0, r3
 8010b22:	3708      	adds	r7, #8
 8010b24:	46bd      	mov	sp, r7
 8010b26:	bd80      	pop	{r7, pc}

08010b28 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b086      	sub	sp, #24
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	60b9      	str	r1, [r7, #8]
 8010b30:	607a      	str	r2, [r7, #4]
 8010b32:	603b      	str	r3, [r7, #0]
 8010b34:	4603      	mov	r3, r0
 8010b36:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010b38:	2301      	movs	r3, #1
 8010b3a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8010b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8010b40:	683a      	ldr	r2, [r7, #0]
 8010b42:	6879      	ldr	r1, [r7, #4]
 8010b44:	68b8      	ldr	r0, [r7, #8]
 8010b46:	f7f2 fe41 	bl	80037cc <BSP_SD_ReadBlocks>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d107      	bne.n	8010b60 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010b50:	bf00      	nop
 8010b52:	f7f2 ff91 	bl	8003a78 <BSP_SD_GetCardState>
 8010b56:	4603      	mov	r3, r0
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d1fa      	bne.n	8010b52 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8010b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b62:	4618      	mov	r0, r3
 8010b64:	3718      	adds	r7, #24
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd80      	pop	{r7, pc}

08010b6a <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010b6a:	b580      	push	{r7, lr}
 8010b6c:	b086      	sub	sp, #24
 8010b6e:	af00      	add	r7, sp, #0
 8010b70:	60b9      	str	r1, [r7, #8]
 8010b72:	607a      	str	r2, [r7, #4]
 8010b74:	603b      	str	r3, [r7, #0]
 8010b76:	4603      	mov	r3, r0
 8010b78:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8010b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8010b82:	683a      	ldr	r2, [r7, #0]
 8010b84:	6879      	ldr	r1, [r7, #4]
 8010b86:	68b8      	ldr	r0, [r7, #8]
 8010b88:	f7f2 fe3c 	bl	8003804 <BSP_SD_WriteBlocks>
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d107      	bne.n	8010ba2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8010b92:	bf00      	nop
 8010b94:	f7f2 ff70 	bl	8003a78 <BSP_SD_GetCardState>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d1fa      	bne.n	8010b94 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8010ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	3718      	adds	r7, #24
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}

08010bac <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b08c      	sub	sp, #48	; 0x30
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	603a      	str	r2, [r7, #0]
 8010bb6:	71fb      	strb	r3, [r7, #7]
 8010bb8:	460b      	mov	r3, r1
 8010bba:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010bc2:	4b25      	ldr	r3, [pc, #148]	; (8010c58 <SD_ioctl+0xac>)
 8010bc4:	781b      	ldrb	r3, [r3, #0]
 8010bc6:	b2db      	uxtb	r3, r3
 8010bc8:	f003 0301 	and.w	r3, r3, #1
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d001      	beq.n	8010bd4 <SD_ioctl+0x28>
 8010bd0:	2303      	movs	r3, #3
 8010bd2:	e03c      	b.n	8010c4e <SD_ioctl+0xa2>

  switch (cmd)
 8010bd4:	79bb      	ldrb	r3, [r7, #6]
 8010bd6:	2b03      	cmp	r3, #3
 8010bd8:	d834      	bhi.n	8010c44 <SD_ioctl+0x98>
 8010bda:	a201      	add	r2, pc, #4	; (adr r2, 8010be0 <SD_ioctl+0x34>)
 8010bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010be0:	08010bf1 	.word	0x08010bf1
 8010be4:	08010bf9 	.word	0x08010bf9
 8010be8:	08010c11 	.word	0x08010c11
 8010bec:	08010c2b 	.word	0x08010c2b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010bf6:	e028      	b.n	8010c4a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010bf8:	f107 030c 	add.w	r3, r7, #12
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f7f2 ff4b 	bl	8003a98 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010c08:	2300      	movs	r3, #0
 8010c0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010c0e:	e01c      	b.n	8010c4a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010c10:	f107 030c 	add.w	r3, r7, #12
 8010c14:	4618      	mov	r0, r3
 8010c16:	f7f2 ff3f 	bl	8003a98 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c1c:	b29a      	uxth	r2, r3
 8010c1e:	683b      	ldr	r3, [r7, #0]
 8010c20:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010c22:	2300      	movs	r3, #0
 8010c24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010c28:	e00f      	b.n	8010c4a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010c2a:	f107 030c 	add.w	r3, r7, #12
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f7f2 ff32 	bl	8003a98 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c36:	0a5a      	lsrs	r2, r3, #9
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010c42:	e002      	b.n	8010c4a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010c44:	2304      	movs	r3, #4
 8010c46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8010c4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	3730      	adds	r7, #48	; 0x30
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}
 8010c56:	bf00      	nop
 8010c58:	20000084 	.word	0x20000084

08010c5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010c5c:	b480      	push	{r7}
 8010c5e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8010c60:	bf00      	nop
 8010c62:	46bd      	mov	sp, r7
 8010c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c68:	4770      	bx	lr
	...

08010c6c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010c6c:	b480      	push	{r7}
 8010c6e:	b085      	sub	sp, #20
 8010c70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010c72:	f3ef 8305 	mrs	r3, IPSR
 8010c76:	60bb      	str	r3, [r7, #8]
  return(result);
 8010c78:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d10f      	bne.n	8010c9e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8010c82:	607b      	str	r3, [r7, #4]
  return(result);
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d105      	bne.n	8010c96 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010c8a:	f3ef 8311 	mrs	r3, BASEPRI
 8010c8e:	603b      	str	r3, [r7, #0]
  return(result);
 8010c90:	683b      	ldr	r3, [r7, #0]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d007      	beq.n	8010ca6 <osKernelInitialize+0x3a>
 8010c96:	4b0e      	ldr	r3, [pc, #56]	; (8010cd0 <osKernelInitialize+0x64>)
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	2b02      	cmp	r3, #2
 8010c9c:	d103      	bne.n	8010ca6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8010c9e:	f06f 0305 	mvn.w	r3, #5
 8010ca2:	60fb      	str	r3, [r7, #12]
 8010ca4:	e00c      	b.n	8010cc0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010ca6:	4b0a      	ldr	r3, [pc, #40]	; (8010cd0 <osKernelInitialize+0x64>)
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d105      	bne.n	8010cba <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010cae:	4b08      	ldr	r3, [pc, #32]	; (8010cd0 <osKernelInitialize+0x64>)
 8010cb0:	2201      	movs	r2, #1
 8010cb2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	60fb      	str	r3, [r7, #12]
 8010cb8:	e002      	b.n	8010cc0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8010cba:	f04f 33ff 	mov.w	r3, #4294967295
 8010cbe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8010cc0:	68fb      	ldr	r3, [r7, #12]
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	3714      	adds	r7, #20
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ccc:	4770      	bx	lr
 8010cce:	bf00      	nop
 8010cd0:	20000270 	.word	0x20000270

08010cd4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b084      	sub	sp, #16
 8010cd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010cda:	f3ef 8305 	mrs	r3, IPSR
 8010cde:	60bb      	str	r3, [r7, #8]
  return(result);
 8010ce0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d10f      	bne.n	8010d06 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8010cea:	607b      	str	r3, [r7, #4]
  return(result);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d105      	bne.n	8010cfe <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010cf2:	f3ef 8311 	mrs	r3, BASEPRI
 8010cf6:	603b      	str	r3, [r7, #0]
  return(result);
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d007      	beq.n	8010d0e <osKernelStart+0x3a>
 8010cfe:	4b0f      	ldr	r3, [pc, #60]	; (8010d3c <osKernelStart+0x68>)
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	2b02      	cmp	r3, #2
 8010d04:	d103      	bne.n	8010d0e <osKernelStart+0x3a>
    stat = osErrorISR;
 8010d06:	f06f 0305 	mvn.w	r3, #5
 8010d0a:	60fb      	str	r3, [r7, #12]
 8010d0c:	e010      	b.n	8010d30 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010d0e:	4b0b      	ldr	r3, [pc, #44]	; (8010d3c <osKernelStart+0x68>)
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	2b01      	cmp	r3, #1
 8010d14:	d109      	bne.n	8010d2a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010d16:	f7ff ffa1 	bl	8010c5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010d1a:	4b08      	ldr	r3, [pc, #32]	; (8010d3c <osKernelStart+0x68>)
 8010d1c:	2202      	movs	r2, #2
 8010d1e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010d20:	f001 fa9a 	bl	8012258 <vTaskStartScheduler>
      stat = osOK;
 8010d24:	2300      	movs	r3, #0
 8010d26:	60fb      	str	r3, [r7, #12]
 8010d28:	e002      	b.n	8010d30 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8010d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8010d2e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8010d30:	68fb      	ldr	r3, [r7, #12]
}
 8010d32:	4618      	mov	r0, r3
 8010d34:	3710      	adds	r7, #16
 8010d36:	46bd      	mov	sp, r7
 8010d38:	bd80      	pop	{r7, pc}
 8010d3a:	bf00      	nop
 8010d3c:	20000270 	.word	0x20000270

08010d40 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b090      	sub	sp, #64	; 0x40
 8010d44:	af04      	add	r7, sp, #16
 8010d46:	60f8      	str	r0, [r7, #12]
 8010d48:	60b9      	str	r1, [r7, #8]
 8010d4a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010d50:	f3ef 8305 	mrs	r3, IPSR
 8010d54:	61fb      	str	r3, [r7, #28]
  return(result);
 8010d56:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	f040 808f 	bne.w	8010e7c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8010d62:	61bb      	str	r3, [r7, #24]
  return(result);
 8010d64:	69bb      	ldr	r3, [r7, #24]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d105      	bne.n	8010d76 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010d6a:	f3ef 8311 	mrs	r3, BASEPRI
 8010d6e:	617b      	str	r3, [r7, #20]
  return(result);
 8010d70:	697b      	ldr	r3, [r7, #20]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d003      	beq.n	8010d7e <osThreadNew+0x3e>
 8010d76:	4b44      	ldr	r3, [pc, #272]	; (8010e88 <osThreadNew+0x148>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	2b02      	cmp	r3, #2
 8010d7c:	d07e      	beq.n	8010e7c <osThreadNew+0x13c>
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d07b      	beq.n	8010e7c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8010d84:	2380      	movs	r3, #128	; 0x80
 8010d86:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8010d88:	2318      	movs	r3, #24
 8010d8a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8010d90:	f04f 33ff 	mov.w	r3, #4294967295
 8010d94:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d045      	beq.n	8010e28 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d002      	beq.n	8010daa <osThreadNew+0x6a>
        name = attr->name;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	699b      	ldr	r3, [r3, #24]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d002      	beq.n	8010db8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	699b      	ldr	r3, [r3, #24]
 8010db6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d008      	beq.n	8010dd0 <osThreadNew+0x90>
 8010dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc0:	2b38      	cmp	r3, #56	; 0x38
 8010dc2:	d805      	bhi.n	8010dd0 <osThreadNew+0x90>
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	685b      	ldr	r3, [r3, #4]
 8010dc8:	f003 0301 	and.w	r3, r3, #1
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d001      	beq.n	8010dd4 <osThreadNew+0x94>
        return (NULL);
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	e054      	b.n	8010e7e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	695b      	ldr	r3, [r3, #20]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d003      	beq.n	8010de4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	695b      	ldr	r3, [r3, #20]
 8010de0:	089b      	lsrs	r3, r3, #2
 8010de2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	689b      	ldr	r3, [r3, #8]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d00e      	beq.n	8010e0a <osThreadNew+0xca>
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	68db      	ldr	r3, [r3, #12]
 8010df0:	2b5b      	cmp	r3, #91	; 0x5b
 8010df2:	d90a      	bls.n	8010e0a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d006      	beq.n	8010e0a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	695b      	ldr	r3, [r3, #20]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d002      	beq.n	8010e0a <osThreadNew+0xca>
        mem = 1;
 8010e04:	2301      	movs	r3, #1
 8010e06:	623b      	str	r3, [r7, #32]
 8010e08:	e010      	b.n	8010e2c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	689b      	ldr	r3, [r3, #8]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d10c      	bne.n	8010e2c <osThreadNew+0xec>
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	68db      	ldr	r3, [r3, #12]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d108      	bne.n	8010e2c <osThreadNew+0xec>
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	691b      	ldr	r3, [r3, #16]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d104      	bne.n	8010e2c <osThreadNew+0xec>
          mem = 0;
 8010e22:	2300      	movs	r3, #0
 8010e24:	623b      	str	r3, [r7, #32]
 8010e26:	e001      	b.n	8010e2c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8010e28:	2300      	movs	r3, #0
 8010e2a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010e2c:	6a3b      	ldr	r3, [r7, #32]
 8010e2e:	2b01      	cmp	r3, #1
 8010e30:	d110      	bne.n	8010e54 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8010e36:	687a      	ldr	r2, [r7, #4]
 8010e38:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010e3a:	9202      	str	r2, [sp, #8]
 8010e3c:	9301      	str	r3, [sp, #4]
 8010e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e40:	9300      	str	r3, [sp, #0]
 8010e42:	68bb      	ldr	r3, [r7, #8]
 8010e44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010e48:	68f8      	ldr	r0, [r7, #12]
 8010e4a:	f001 f833 	bl	8011eb4 <xTaskCreateStatic>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	613b      	str	r3, [r7, #16]
 8010e52:	e013      	b.n	8010e7c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8010e54:	6a3b      	ldr	r3, [r7, #32]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d110      	bne.n	8010e7c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e5c:	b29a      	uxth	r2, r3
 8010e5e:	f107 0310 	add.w	r3, r7, #16
 8010e62:	9301      	str	r3, [sp, #4]
 8010e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e66:	9300      	str	r3, [sp, #0]
 8010e68:	68bb      	ldr	r3, [r7, #8]
 8010e6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010e6c:	68f8      	ldr	r0, [r7, #12]
 8010e6e:	f001 f87b 	bl	8011f68 <xTaskCreate>
 8010e72:	4603      	mov	r3, r0
 8010e74:	2b01      	cmp	r3, #1
 8010e76:	d001      	beq.n	8010e7c <osThreadNew+0x13c>
          hTask = NULL;
 8010e78:	2300      	movs	r3, #0
 8010e7a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010e7c:	693b      	ldr	r3, [r7, #16]
}
 8010e7e:	4618      	mov	r0, r3
 8010e80:	3730      	adds	r7, #48	; 0x30
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bd80      	pop	{r7, pc}
 8010e86:	bf00      	nop
 8010e88:	20000270 	.word	0x20000270

08010e8c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b086      	sub	sp, #24
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e94:	f3ef 8305 	mrs	r3, IPSR
 8010e98:	613b      	str	r3, [r7, #16]
  return(result);
 8010e9a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d10f      	bne.n	8010ec0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8010ea4:	60fb      	str	r3, [r7, #12]
  return(result);
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d105      	bne.n	8010eb8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010eac:	f3ef 8311 	mrs	r3, BASEPRI
 8010eb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8010eb2:	68bb      	ldr	r3, [r7, #8]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d007      	beq.n	8010ec8 <osDelay+0x3c>
 8010eb8:	4b0a      	ldr	r3, [pc, #40]	; (8010ee4 <osDelay+0x58>)
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	2b02      	cmp	r3, #2
 8010ebe:	d103      	bne.n	8010ec8 <osDelay+0x3c>
    stat = osErrorISR;
 8010ec0:	f06f 0305 	mvn.w	r3, #5
 8010ec4:	617b      	str	r3, [r7, #20]
 8010ec6:	e007      	b.n	8010ed8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8010ec8:	2300      	movs	r3, #0
 8010eca:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d002      	beq.n	8010ed8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8010ed2:	6878      	ldr	r0, [r7, #4]
 8010ed4:	f001 f98c 	bl	80121f0 <vTaskDelay>
    }
  }

  return (stat);
 8010ed8:	697b      	ldr	r3, [r7, #20]
}
 8010eda:	4618      	mov	r0, r3
 8010edc:	3718      	adds	r7, #24
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bd80      	pop	{r7, pc}
 8010ee2:	bf00      	nop
 8010ee4:	20000270 	.word	0x20000270

08010ee8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b08c      	sub	sp, #48	; 0x30
 8010eec:	af02      	add	r7, sp, #8
 8010eee:	60f8      	str	r0, [r7, #12]
 8010ef0:	60b9      	str	r1, [r7, #8]
 8010ef2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010ef8:	f3ef 8305 	mrs	r3, IPSR
 8010efc:	61bb      	str	r3, [r7, #24]
  return(result);
 8010efe:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d170      	bne.n	8010fe6 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f04:	f3ef 8310 	mrs	r3, PRIMASK
 8010f08:	617b      	str	r3, [r7, #20]
  return(result);
 8010f0a:	697b      	ldr	r3, [r7, #20]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d105      	bne.n	8010f1c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010f10:	f3ef 8311 	mrs	r3, BASEPRI
 8010f14:	613b      	str	r3, [r7, #16]
  return(result);
 8010f16:	693b      	ldr	r3, [r7, #16]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d003      	beq.n	8010f24 <osMessageQueueNew+0x3c>
 8010f1c:	4b34      	ldr	r3, [pc, #208]	; (8010ff0 <osMessageQueueNew+0x108>)
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	2b02      	cmp	r3, #2
 8010f22:	d060      	beq.n	8010fe6 <osMessageQueueNew+0xfe>
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d05d      	beq.n	8010fe6 <osMessageQueueNew+0xfe>
 8010f2a:	68bb      	ldr	r3, [r7, #8]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d05a      	beq.n	8010fe6 <osMessageQueueNew+0xfe>
    mem = -1;
 8010f30:	f04f 33ff 	mov.w	r3, #4294967295
 8010f34:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d029      	beq.n	8010f90 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	689b      	ldr	r3, [r3, #8]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d012      	beq.n	8010f6a <osMessageQueueNew+0x82>
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	68db      	ldr	r3, [r3, #12]
 8010f48:	2b4f      	cmp	r3, #79	; 0x4f
 8010f4a:	d90e      	bls.n	8010f6a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d00a      	beq.n	8010f6a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	695a      	ldr	r2, [r3, #20]
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	68b9      	ldr	r1, [r7, #8]
 8010f5c:	fb01 f303 	mul.w	r3, r1, r3
 8010f60:	429a      	cmp	r2, r3
 8010f62:	d302      	bcc.n	8010f6a <osMessageQueueNew+0x82>
        mem = 1;
 8010f64:	2301      	movs	r3, #1
 8010f66:	623b      	str	r3, [r7, #32]
 8010f68:	e014      	b.n	8010f94 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	689b      	ldr	r3, [r3, #8]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d110      	bne.n	8010f94 <osMessageQueueNew+0xac>
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	68db      	ldr	r3, [r3, #12]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d10c      	bne.n	8010f94 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d108      	bne.n	8010f94 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	695b      	ldr	r3, [r3, #20]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d104      	bne.n	8010f94 <osMessageQueueNew+0xac>
          mem = 0;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	623b      	str	r3, [r7, #32]
 8010f8e:	e001      	b.n	8010f94 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8010f90:	2300      	movs	r3, #0
 8010f92:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010f94:	6a3b      	ldr	r3, [r7, #32]
 8010f96:	2b01      	cmp	r3, #1
 8010f98:	d10c      	bne.n	8010fb4 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	691a      	ldr	r2, [r3, #16]
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	6899      	ldr	r1, [r3, #8]
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	9300      	str	r3, [sp, #0]
 8010fa6:	460b      	mov	r3, r1
 8010fa8:	68b9      	ldr	r1, [r7, #8]
 8010faa:	68f8      	ldr	r0, [r7, #12]
 8010fac:	f000 fa58 	bl	8011460 <xQueueGenericCreateStatic>
 8010fb0:	6278      	str	r0, [r7, #36]	; 0x24
 8010fb2:	e008      	b.n	8010fc6 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8010fb4:	6a3b      	ldr	r3, [r7, #32]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d105      	bne.n	8010fc6 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8010fba:	2200      	movs	r2, #0
 8010fbc:	68b9      	ldr	r1, [r7, #8]
 8010fbe:	68f8      	ldr	r0, [r7, #12]
 8010fc0:	f000 fac1 	bl	8011546 <xQueueGenericCreate>
 8010fc4:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d00c      	beq.n	8010fe6 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d003      	beq.n	8010fda <osMessageQueueNew+0xf2>
        name = attr->name;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	61fb      	str	r3, [r7, #28]
 8010fd8:	e001      	b.n	8010fde <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8010fda:	2300      	movs	r3, #0
 8010fdc:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8010fde:	69f9      	ldr	r1, [r7, #28]
 8010fe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010fe2:	f000 ff0b 	bl	8011dfc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010fe8:	4618      	mov	r0, r3
 8010fea:	3728      	adds	r7, #40	; 0x28
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd80      	pop	{r7, pc}
 8010ff0:	20000270 	.word	0x20000270

08010ff4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b08a      	sub	sp, #40	; 0x28
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	60f8      	str	r0, [r7, #12]
 8010ffc:	60b9      	str	r1, [r7, #8]
 8010ffe:	603b      	str	r3, [r7, #0]
 8011000:	4613      	mov	r3, r2
 8011002:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011008:	2300      	movs	r3, #0
 801100a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801100c:	f3ef 8305 	mrs	r3, IPSR
 8011010:	61fb      	str	r3, [r7, #28]
  return(result);
 8011012:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8011014:	2b00      	cmp	r3, #0
 8011016:	d10f      	bne.n	8011038 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011018:	f3ef 8310 	mrs	r3, PRIMASK
 801101c:	61bb      	str	r3, [r7, #24]
  return(result);
 801101e:	69bb      	ldr	r3, [r7, #24]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d105      	bne.n	8011030 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011024:	f3ef 8311 	mrs	r3, BASEPRI
 8011028:	617b      	str	r3, [r7, #20]
  return(result);
 801102a:	697b      	ldr	r3, [r7, #20]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d02c      	beq.n	801108a <osMessageQueuePut+0x96>
 8011030:	4b28      	ldr	r3, [pc, #160]	; (80110d4 <osMessageQueuePut+0xe0>)
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	2b02      	cmp	r3, #2
 8011036:	d128      	bne.n	801108a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011038:	6a3b      	ldr	r3, [r7, #32]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d005      	beq.n	801104a <osMessageQueuePut+0x56>
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d002      	beq.n	801104a <osMessageQueuePut+0x56>
 8011044:	683b      	ldr	r3, [r7, #0]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d003      	beq.n	8011052 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 801104a:	f06f 0303 	mvn.w	r3, #3
 801104e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011050:	e039      	b.n	80110c6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8011052:	2300      	movs	r3, #0
 8011054:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8011056:	f107 0210 	add.w	r2, r7, #16
 801105a:	2300      	movs	r3, #0
 801105c:	68b9      	ldr	r1, [r7, #8]
 801105e:	6a38      	ldr	r0, [r7, #32]
 8011060:	f000 fbce 	bl	8011800 <xQueueGenericSendFromISR>
 8011064:	4603      	mov	r3, r0
 8011066:	2b01      	cmp	r3, #1
 8011068:	d003      	beq.n	8011072 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 801106a:	f06f 0302 	mvn.w	r3, #2
 801106e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011070:	e029      	b.n	80110c6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8011072:	693b      	ldr	r3, [r7, #16]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d026      	beq.n	80110c6 <osMessageQueuePut+0xd2>
 8011078:	4b17      	ldr	r3, [pc, #92]	; (80110d8 <osMessageQueuePut+0xe4>)
 801107a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801107e:	601a      	str	r2, [r3, #0]
 8011080:	f3bf 8f4f 	dsb	sy
 8011084:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011088:	e01d      	b.n	80110c6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801108a:	6a3b      	ldr	r3, [r7, #32]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d002      	beq.n	8011096 <osMessageQueuePut+0xa2>
 8011090:	68bb      	ldr	r3, [r7, #8]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d103      	bne.n	801109e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8011096:	f06f 0303 	mvn.w	r3, #3
 801109a:	627b      	str	r3, [r7, #36]	; 0x24
 801109c:	e014      	b.n	80110c8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801109e:	2300      	movs	r3, #0
 80110a0:	683a      	ldr	r2, [r7, #0]
 80110a2:	68b9      	ldr	r1, [r7, #8]
 80110a4:	6a38      	ldr	r0, [r7, #32]
 80110a6:	f000 fab1 	bl	801160c <xQueueGenericSend>
 80110aa:	4603      	mov	r3, r0
 80110ac:	2b01      	cmp	r3, #1
 80110ae:	d00b      	beq.n	80110c8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80110b0:	683b      	ldr	r3, [r7, #0]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d003      	beq.n	80110be <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80110b6:	f06f 0301 	mvn.w	r3, #1
 80110ba:	627b      	str	r3, [r7, #36]	; 0x24
 80110bc:	e004      	b.n	80110c8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80110be:	f06f 0302 	mvn.w	r3, #2
 80110c2:	627b      	str	r3, [r7, #36]	; 0x24
 80110c4:	e000      	b.n	80110c8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80110c6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80110c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80110ca:	4618      	mov	r0, r3
 80110cc:	3728      	adds	r7, #40	; 0x28
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}
 80110d2:	bf00      	nop
 80110d4:	20000270 	.word	0x20000270
 80110d8:	e000ed04 	.word	0xe000ed04

080110dc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80110dc:	b580      	push	{r7, lr}
 80110de:	b08a      	sub	sp, #40	; 0x28
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	60f8      	str	r0, [r7, #12]
 80110e4:	60b9      	str	r1, [r7, #8]
 80110e6:	607a      	str	r2, [r7, #4]
 80110e8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80110ee:	2300      	movs	r3, #0
 80110f0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80110f2:	f3ef 8305 	mrs	r3, IPSR
 80110f6:	61fb      	str	r3, [r7, #28]
  return(result);
 80110f8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d10f      	bne.n	801111e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80110fe:	f3ef 8310 	mrs	r3, PRIMASK
 8011102:	61bb      	str	r3, [r7, #24]
  return(result);
 8011104:	69bb      	ldr	r3, [r7, #24]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d105      	bne.n	8011116 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801110a:	f3ef 8311 	mrs	r3, BASEPRI
 801110e:	617b      	str	r3, [r7, #20]
  return(result);
 8011110:	697b      	ldr	r3, [r7, #20]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d02c      	beq.n	8011170 <osMessageQueueGet+0x94>
 8011116:	4b28      	ldr	r3, [pc, #160]	; (80111b8 <osMessageQueueGet+0xdc>)
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	2b02      	cmp	r3, #2
 801111c:	d128      	bne.n	8011170 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801111e:	6a3b      	ldr	r3, [r7, #32]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d005      	beq.n	8011130 <osMessageQueueGet+0x54>
 8011124:	68bb      	ldr	r3, [r7, #8]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d002      	beq.n	8011130 <osMessageQueueGet+0x54>
 801112a:	683b      	ldr	r3, [r7, #0]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d003      	beq.n	8011138 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8011130:	f06f 0303 	mvn.w	r3, #3
 8011134:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011136:	e038      	b.n	80111aa <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8011138:	2300      	movs	r3, #0
 801113a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801113c:	f107 0310 	add.w	r3, r7, #16
 8011140:	461a      	mov	r2, r3
 8011142:	68b9      	ldr	r1, [r7, #8]
 8011144:	6a38      	ldr	r0, [r7, #32]
 8011146:	f000 fccb 	bl	8011ae0 <xQueueReceiveFromISR>
 801114a:	4603      	mov	r3, r0
 801114c:	2b01      	cmp	r3, #1
 801114e:	d003      	beq.n	8011158 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8011150:	f06f 0302 	mvn.w	r3, #2
 8011154:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011156:	e028      	b.n	80111aa <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8011158:	693b      	ldr	r3, [r7, #16]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d025      	beq.n	80111aa <osMessageQueueGet+0xce>
 801115e:	4b17      	ldr	r3, [pc, #92]	; (80111bc <osMessageQueueGet+0xe0>)
 8011160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011164:	601a      	str	r2, [r3, #0]
 8011166:	f3bf 8f4f 	dsb	sy
 801116a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801116e:	e01c      	b.n	80111aa <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011170:	6a3b      	ldr	r3, [r7, #32]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d002      	beq.n	801117c <osMessageQueueGet+0xa0>
 8011176:	68bb      	ldr	r3, [r7, #8]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d103      	bne.n	8011184 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 801117c:	f06f 0303 	mvn.w	r3, #3
 8011180:	627b      	str	r3, [r7, #36]	; 0x24
 8011182:	e013      	b.n	80111ac <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011184:	683a      	ldr	r2, [r7, #0]
 8011186:	68b9      	ldr	r1, [r7, #8]
 8011188:	6a38      	ldr	r0, [r7, #32]
 801118a:	f000 fbcd 	bl	8011928 <xQueueReceive>
 801118e:	4603      	mov	r3, r0
 8011190:	2b01      	cmp	r3, #1
 8011192:	d00b      	beq.n	80111ac <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d003      	beq.n	80111a2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 801119a:	f06f 0301 	mvn.w	r3, #1
 801119e:	627b      	str	r3, [r7, #36]	; 0x24
 80111a0:	e004      	b.n	80111ac <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80111a2:	f06f 0302 	mvn.w	r3, #2
 80111a6:	627b      	str	r3, [r7, #36]	; 0x24
 80111a8:	e000      	b.n	80111ac <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80111aa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80111ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80111ae:	4618      	mov	r0, r3
 80111b0:	3728      	adds	r7, #40	; 0x28
 80111b2:	46bd      	mov	sp, r7
 80111b4:	bd80      	pop	{r7, pc}
 80111b6:	bf00      	nop
 80111b8:	20000270 	.word	0x20000270
 80111bc:	e000ed04 	.word	0xe000ed04

080111c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80111c0:	b480      	push	{r7}
 80111c2:	b085      	sub	sp, #20
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	60f8      	str	r0, [r7, #12]
 80111c8:	60b9      	str	r1, [r7, #8]
 80111ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	4a07      	ldr	r2, [pc, #28]	; (80111ec <vApplicationGetIdleTaskMemory+0x2c>)
 80111d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80111d2:	68bb      	ldr	r3, [r7, #8]
 80111d4:	4a06      	ldr	r2, [pc, #24]	; (80111f0 <vApplicationGetIdleTaskMemory+0x30>)
 80111d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	2280      	movs	r2, #128	; 0x80
 80111dc:	601a      	str	r2, [r3, #0]
}
 80111de:	bf00      	nop
 80111e0:	3714      	adds	r7, #20
 80111e2:	46bd      	mov	sp, r7
 80111e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e8:	4770      	bx	lr
 80111ea:	bf00      	nop
 80111ec:	20000274 	.word	0x20000274
 80111f0:	200002d0 	.word	0x200002d0

080111f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80111f4:	b480      	push	{r7}
 80111f6:	b085      	sub	sp, #20
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	60f8      	str	r0, [r7, #12]
 80111fc:	60b9      	str	r1, [r7, #8]
 80111fe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	4a07      	ldr	r2, [pc, #28]	; (8011220 <vApplicationGetTimerTaskMemory+0x2c>)
 8011204:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8011206:	68bb      	ldr	r3, [r7, #8]
 8011208:	4a06      	ldr	r2, [pc, #24]	; (8011224 <vApplicationGetTimerTaskMemory+0x30>)
 801120a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011212:	601a      	str	r2, [r3, #0]
}
 8011214:	bf00      	nop
 8011216:	3714      	adds	r7, #20
 8011218:	46bd      	mov	sp, r7
 801121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121e:	4770      	bx	lr
 8011220:	200004d0 	.word	0x200004d0
 8011224:	2000052c 	.word	0x2000052c

08011228 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011228:	b480      	push	{r7}
 801122a:	b083      	sub	sp, #12
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f103 0208 	add.w	r2, r3, #8
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	f04f 32ff 	mov.w	r2, #4294967295
 8011240:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	f103 0208 	add.w	r2, r3, #8
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	f103 0208 	add.w	r2, r3, #8
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	2200      	movs	r2, #0
 801125a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801125c:	bf00      	nop
 801125e:	370c      	adds	r7, #12
 8011260:	46bd      	mov	sp, r7
 8011262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011266:	4770      	bx	lr

08011268 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011268:	b480      	push	{r7}
 801126a:	b083      	sub	sp, #12
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	2200      	movs	r2, #0
 8011274:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011276:	bf00      	nop
 8011278:	370c      	adds	r7, #12
 801127a:	46bd      	mov	sp, r7
 801127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011280:	4770      	bx	lr

08011282 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011282:	b480      	push	{r7}
 8011284:	b085      	sub	sp, #20
 8011286:	af00      	add	r7, sp, #0
 8011288:	6078      	str	r0, [r7, #4]
 801128a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	685b      	ldr	r3, [r3, #4]
 8011290:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011292:	683b      	ldr	r3, [r7, #0]
 8011294:	68fa      	ldr	r2, [r7, #12]
 8011296:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	689a      	ldr	r2, [r3, #8]
 801129c:	683b      	ldr	r3, [r7, #0]
 801129e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	689b      	ldr	r3, [r3, #8]
 80112a4:	683a      	ldr	r2, [r7, #0]
 80112a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	683a      	ldr	r2, [r7, #0]
 80112ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80112ae:	683b      	ldr	r3, [r7, #0]
 80112b0:	687a      	ldr	r2, [r7, #4]
 80112b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	1c5a      	adds	r2, r3, #1
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	601a      	str	r2, [r3, #0]
}
 80112be:	bf00      	nop
 80112c0:	3714      	adds	r7, #20
 80112c2:	46bd      	mov	sp, r7
 80112c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c8:	4770      	bx	lr

080112ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80112ca:	b480      	push	{r7}
 80112cc:	b085      	sub	sp, #20
 80112ce:	af00      	add	r7, sp, #0
 80112d0:	6078      	str	r0, [r7, #4]
 80112d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80112d4:	683b      	ldr	r3, [r7, #0]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80112da:	68bb      	ldr	r3, [r7, #8]
 80112dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112e0:	d103      	bne.n	80112ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	691b      	ldr	r3, [r3, #16]
 80112e6:	60fb      	str	r3, [r7, #12]
 80112e8:	e00c      	b.n	8011304 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	3308      	adds	r3, #8
 80112ee:	60fb      	str	r3, [r7, #12]
 80112f0:	e002      	b.n	80112f8 <vListInsert+0x2e>
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	685b      	ldr	r3, [r3, #4]
 80112f6:	60fb      	str	r3, [r7, #12]
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	685b      	ldr	r3, [r3, #4]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	68ba      	ldr	r2, [r7, #8]
 8011300:	429a      	cmp	r2, r3
 8011302:	d2f6      	bcs.n	80112f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	685a      	ldr	r2, [r3, #4]
 8011308:	683b      	ldr	r3, [r7, #0]
 801130a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	685b      	ldr	r3, [r3, #4]
 8011310:	683a      	ldr	r2, [r7, #0]
 8011312:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011314:	683b      	ldr	r3, [r7, #0]
 8011316:	68fa      	ldr	r2, [r7, #12]
 8011318:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	683a      	ldr	r2, [r7, #0]
 801131e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011320:	683b      	ldr	r3, [r7, #0]
 8011322:	687a      	ldr	r2, [r7, #4]
 8011324:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	1c5a      	adds	r2, r3, #1
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	601a      	str	r2, [r3, #0]
}
 8011330:	bf00      	nop
 8011332:	3714      	adds	r7, #20
 8011334:	46bd      	mov	sp, r7
 8011336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133a:	4770      	bx	lr

0801133c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801133c:	b480      	push	{r7}
 801133e:	b085      	sub	sp, #20
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	691b      	ldr	r3, [r3, #16]
 8011348:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	685b      	ldr	r3, [r3, #4]
 801134e:	687a      	ldr	r2, [r7, #4]
 8011350:	6892      	ldr	r2, [r2, #8]
 8011352:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	689b      	ldr	r3, [r3, #8]
 8011358:	687a      	ldr	r2, [r7, #4]
 801135a:	6852      	ldr	r2, [r2, #4]
 801135c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	685b      	ldr	r3, [r3, #4]
 8011362:	687a      	ldr	r2, [r7, #4]
 8011364:	429a      	cmp	r2, r3
 8011366:	d103      	bne.n	8011370 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	689a      	ldr	r2, [r3, #8]
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	2200      	movs	r2, #0
 8011374:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	1e5a      	subs	r2, r3, #1
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	681b      	ldr	r3, [r3, #0]
}
 8011384:	4618      	mov	r0, r3
 8011386:	3714      	adds	r7, #20
 8011388:	46bd      	mov	sp, r7
 801138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138e:	4770      	bx	lr

08011390 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b084      	sub	sp, #16
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
 8011398:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d109      	bne.n	80113b8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80113a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113a8:	f383 8811 	msr	BASEPRI, r3
 80113ac:	f3bf 8f6f 	isb	sy
 80113b0:	f3bf 8f4f 	dsb	sy
 80113b4:	60bb      	str	r3, [r7, #8]
 80113b6:	e7fe      	b.n	80113b6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80113b8:	f002 f8d0 	bl	801355c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	681a      	ldr	r2, [r3, #0]
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80113c4:	68f9      	ldr	r1, [r7, #12]
 80113c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80113c8:	fb01 f303 	mul.w	r3, r1, r3
 80113cc:	441a      	add	r2, r3
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	2200      	movs	r2, #0
 80113d6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	681a      	ldr	r2, [r3, #0]
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	681a      	ldr	r2, [r3, #0]
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80113e8:	3b01      	subs	r3, #1
 80113ea:	68f9      	ldr	r1, [r7, #12]
 80113ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80113ee:	fb01 f303 	mul.w	r3, r1, r3
 80113f2:	441a      	add	r2, r3
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	22ff      	movs	r2, #255	; 0xff
 80113fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	22ff      	movs	r2, #255	; 0xff
 8011404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011408:	683b      	ldr	r3, [r7, #0]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d114      	bne.n	8011438 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	691b      	ldr	r3, [r3, #16]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d01a      	beq.n	801144c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	3310      	adds	r3, #16
 801141a:	4618      	mov	r0, r3
 801141c:	f001 f99c 	bl	8012758 <xTaskRemoveFromEventList>
 8011420:	4603      	mov	r3, r0
 8011422:	2b00      	cmp	r3, #0
 8011424:	d012      	beq.n	801144c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011426:	4b0d      	ldr	r3, [pc, #52]	; (801145c <xQueueGenericReset+0xcc>)
 8011428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801142c:	601a      	str	r2, [r3, #0]
 801142e:	f3bf 8f4f 	dsb	sy
 8011432:	f3bf 8f6f 	isb	sy
 8011436:	e009      	b.n	801144c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	3310      	adds	r3, #16
 801143c:	4618      	mov	r0, r3
 801143e:	f7ff fef3 	bl	8011228 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	3324      	adds	r3, #36	; 0x24
 8011446:	4618      	mov	r0, r3
 8011448:	f7ff feee 	bl	8011228 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801144c:	f002 f8b4 	bl	80135b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011450:	2301      	movs	r3, #1
}
 8011452:	4618      	mov	r0, r3
 8011454:	3710      	adds	r7, #16
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}
 801145a:	bf00      	nop
 801145c:	e000ed04 	.word	0xe000ed04

08011460 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011460:	b580      	push	{r7, lr}
 8011462:	b08e      	sub	sp, #56	; 0x38
 8011464:	af02      	add	r7, sp, #8
 8011466:	60f8      	str	r0, [r7, #12]
 8011468:	60b9      	str	r1, [r7, #8]
 801146a:	607a      	str	r2, [r7, #4]
 801146c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d109      	bne.n	8011488 <xQueueGenericCreateStatic+0x28>
 8011474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011478:	f383 8811 	msr	BASEPRI, r3
 801147c:	f3bf 8f6f 	isb	sy
 8011480:	f3bf 8f4f 	dsb	sy
 8011484:	62bb      	str	r3, [r7, #40]	; 0x28
 8011486:	e7fe      	b.n	8011486 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d109      	bne.n	80114a2 <xQueueGenericCreateStatic+0x42>
 801148e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011492:	f383 8811 	msr	BASEPRI, r3
 8011496:	f3bf 8f6f 	isb	sy
 801149a:	f3bf 8f4f 	dsb	sy
 801149e:	627b      	str	r3, [r7, #36]	; 0x24
 80114a0:	e7fe      	b.n	80114a0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d002      	beq.n	80114ae <xQueueGenericCreateStatic+0x4e>
 80114a8:	68bb      	ldr	r3, [r7, #8]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d001      	beq.n	80114b2 <xQueueGenericCreateStatic+0x52>
 80114ae:	2301      	movs	r3, #1
 80114b0:	e000      	b.n	80114b4 <xQueueGenericCreateStatic+0x54>
 80114b2:	2300      	movs	r3, #0
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d109      	bne.n	80114cc <xQueueGenericCreateStatic+0x6c>
 80114b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114bc:	f383 8811 	msr	BASEPRI, r3
 80114c0:	f3bf 8f6f 	isb	sy
 80114c4:	f3bf 8f4f 	dsb	sy
 80114c8:	623b      	str	r3, [r7, #32]
 80114ca:	e7fe      	b.n	80114ca <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d102      	bne.n	80114d8 <xQueueGenericCreateStatic+0x78>
 80114d2:	68bb      	ldr	r3, [r7, #8]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d101      	bne.n	80114dc <xQueueGenericCreateStatic+0x7c>
 80114d8:	2301      	movs	r3, #1
 80114da:	e000      	b.n	80114de <xQueueGenericCreateStatic+0x7e>
 80114dc:	2300      	movs	r3, #0
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d109      	bne.n	80114f6 <xQueueGenericCreateStatic+0x96>
 80114e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114e6:	f383 8811 	msr	BASEPRI, r3
 80114ea:	f3bf 8f6f 	isb	sy
 80114ee:	f3bf 8f4f 	dsb	sy
 80114f2:	61fb      	str	r3, [r7, #28]
 80114f4:	e7fe      	b.n	80114f4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80114f6:	2350      	movs	r3, #80	; 0x50
 80114f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80114fa:	697b      	ldr	r3, [r7, #20]
 80114fc:	2b50      	cmp	r3, #80	; 0x50
 80114fe:	d009      	beq.n	8011514 <xQueueGenericCreateStatic+0xb4>
 8011500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011504:	f383 8811 	msr	BASEPRI, r3
 8011508:	f3bf 8f6f 	isb	sy
 801150c:	f3bf 8f4f 	dsb	sy
 8011510:	61bb      	str	r3, [r7, #24]
 8011512:	e7fe      	b.n	8011512 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011514:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011516:	683b      	ldr	r3, [r7, #0]
 8011518:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801151a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801151c:	2b00      	cmp	r3, #0
 801151e:	d00d      	beq.n	801153c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011522:	2201      	movs	r2, #1
 8011524:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011528:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801152c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801152e:	9300      	str	r3, [sp, #0]
 8011530:	4613      	mov	r3, r2
 8011532:	687a      	ldr	r2, [r7, #4]
 8011534:	68b9      	ldr	r1, [r7, #8]
 8011536:	68f8      	ldr	r0, [r7, #12]
 8011538:	f000 f844 	bl	80115c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801153c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801153e:	4618      	mov	r0, r3
 8011540:	3730      	adds	r7, #48	; 0x30
 8011542:	46bd      	mov	sp, r7
 8011544:	bd80      	pop	{r7, pc}

08011546 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011546:	b580      	push	{r7, lr}
 8011548:	b08a      	sub	sp, #40	; 0x28
 801154a:	af02      	add	r7, sp, #8
 801154c:	60f8      	str	r0, [r7, #12]
 801154e:	60b9      	str	r1, [r7, #8]
 8011550:	4613      	mov	r3, r2
 8011552:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d109      	bne.n	801156e <xQueueGenericCreate+0x28>
 801155a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801155e:	f383 8811 	msr	BASEPRI, r3
 8011562:	f3bf 8f6f 	isb	sy
 8011566:	f3bf 8f4f 	dsb	sy
 801156a:	613b      	str	r3, [r7, #16]
 801156c:	e7fe      	b.n	801156c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801156e:	68bb      	ldr	r3, [r7, #8]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d102      	bne.n	801157a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011574:	2300      	movs	r3, #0
 8011576:	61fb      	str	r3, [r7, #28]
 8011578:	e004      	b.n	8011584 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	68ba      	ldr	r2, [r7, #8]
 801157e:	fb02 f303 	mul.w	r3, r2, r3
 8011582:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011584:	69fb      	ldr	r3, [r7, #28]
 8011586:	3350      	adds	r3, #80	; 0x50
 8011588:	4618      	mov	r0, r3
 801158a:	f002 f901 	bl	8013790 <pvPortMalloc>
 801158e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011590:	69bb      	ldr	r3, [r7, #24]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d011      	beq.n	80115ba <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011596:	69bb      	ldr	r3, [r7, #24]
 8011598:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801159a:	697b      	ldr	r3, [r7, #20]
 801159c:	3350      	adds	r3, #80	; 0x50
 801159e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80115a0:	69bb      	ldr	r3, [r7, #24]
 80115a2:	2200      	movs	r2, #0
 80115a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80115a8:	79fa      	ldrb	r2, [r7, #7]
 80115aa:	69bb      	ldr	r3, [r7, #24]
 80115ac:	9300      	str	r3, [sp, #0]
 80115ae:	4613      	mov	r3, r2
 80115b0:	697a      	ldr	r2, [r7, #20]
 80115b2:	68b9      	ldr	r1, [r7, #8]
 80115b4:	68f8      	ldr	r0, [r7, #12]
 80115b6:	f000 f805 	bl	80115c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80115ba:	69bb      	ldr	r3, [r7, #24]
	}
 80115bc:	4618      	mov	r0, r3
 80115be:	3720      	adds	r7, #32
 80115c0:	46bd      	mov	sp, r7
 80115c2:	bd80      	pop	{r7, pc}

080115c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b084      	sub	sp, #16
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	60f8      	str	r0, [r7, #12]
 80115cc:	60b9      	str	r1, [r7, #8]
 80115ce:	607a      	str	r2, [r7, #4]
 80115d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80115d2:	68bb      	ldr	r3, [r7, #8]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d103      	bne.n	80115e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80115d8:	69bb      	ldr	r3, [r7, #24]
 80115da:	69ba      	ldr	r2, [r7, #24]
 80115dc:	601a      	str	r2, [r3, #0]
 80115de:	e002      	b.n	80115e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80115e0:	69bb      	ldr	r3, [r7, #24]
 80115e2:	687a      	ldr	r2, [r7, #4]
 80115e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80115e6:	69bb      	ldr	r3, [r7, #24]
 80115e8:	68fa      	ldr	r2, [r7, #12]
 80115ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80115ec:	69bb      	ldr	r3, [r7, #24]
 80115ee:	68ba      	ldr	r2, [r7, #8]
 80115f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80115f2:	2101      	movs	r1, #1
 80115f4:	69b8      	ldr	r0, [r7, #24]
 80115f6:	f7ff fecb 	bl	8011390 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80115fa:	69bb      	ldr	r3, [r7, #24]
 80115fc:	78fa      	ldrb	r2, [r7, #3]
 80115fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011602:	bf00      	nop
 8011604:	3710      	adds	r7, #16
 8011606:	46bd      	mov	sp, r7
 8011608:	bd80      	pop	{r7, pc}
	...

0801160c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b08e      	sub	sp, #56	; 0x38
 8011610:	af00      	add	r7, sp, #0
 8011612:	60f8      	str	r0, [r7, #12]
 8011614:	60b9      	str	r1, [r7, #8]
 8011616:	607a      	str	r2, [r7, #4]
 8011618:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801161a:	2300      	movs	r3, #0
 801161c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011624:	2b00      	cmp	r3, #0
 8011626:	d109      	bne.n	801163c <xQueueGenericSend+0x30>
 8011628:	f04f 0350 	mov.w	r3, #80	; 0x50
 801162c:	f383 8811 	msr	BASEPRI, r3
 8011630:	f3bf 8f6f 	isb	sy
 8011634:	f3bf 8f4f 	dsb	sy
 8011638:	62bb      	str	r3, [r7, #40]	; 0x28
 801163a:	e7fe      	b.n	801163a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801163c:	68bb      	ldr	r3, [r7, #8]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d103      	bne.n	801164a <xQueueGenericSend+0x3e>
 8011642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011646:	2b00      	cmp	r3, #0
 8011648:	d101      	bne.n	801164e <xQueueGenericSend+0x42>
 801164a:	2301      	movs	r3, #1
 801164c:	e000      	b.n	8011650 <xQueueGenericSend+0x44>
 801164e:	2300      	movs	r3, #0
 8011650:	2b00      	cmp	r3, #0
 8011652:	d109      	bne.n	8011668 <xQueueGenericSend+0x5c>
 8011654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011658:	f383 8811 	msr	BASEPRI, r3
 801165c:	f3bf 8f6f 	isb	sy
 8011660:	f3bf 8f4f 	dsb	sy
 8011664:	627b      	str	r3, [r7, #36]	; 0x24
 8011666:	e7fe      	b.n	8011666 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	2b02      	cmp	r3, #2
 801166c:	d103      	bne.n	8011676 <xQueueGenericSend+0x6a>
 801166e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011672:	2b01      	cmp	r3, #1
 8011674:	d101      	bne.n	801167a <xQueueGenericSend+0x6e>
 8011676:	2301      	movs	r3, #1
 8011678:	e000      	b.n	801167c <xQueueGenericSend+0x70>
 801167a:	2300      	movs	r3, #0
 801167c:	2b00      	cmp	r3, #0
 801167e:	d109      	bne.n	8011694 <xQueueGenericSend+0x88>
 8011680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011684:	f383 8811 	msr	BASEPRI, r3
 8011688:	f3bf 8f6f 	isb	sy
 801168c:	f3bf 8f4f 	dsb	sy
 8011690:	623b      	str	r3, [r7, #32]
 8011692:	e7fe      	b.n	8011692 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011694:	f001 fa16 	bl	8012ac4 <xTaskGetSchedulerState>
 8011698:	4603      	mov	r3, r0
 801169a:	2b00      	cmp	r3, #0
 801169c:	d102      	bne.n	80116a4 <xQueueGenericSend+0x98>
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d101      	bne.n	80116a8 <xQueueGenericSend+0x9c>
 80116a4:	2301      	movs	r3, #1
 80116a6:	e000      	b.n	80116aa <xQueueGenericSend+0x9e>
 80116a8:	2300      	movs	r3, #0
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d109      	bne.n	80116c2 <xQueueGenericSend+0xb6>
 80116ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116b2:	f383 8811 	msr	BASEPRI, r3
 80116b6:	f3bf 8f6f 	isb	sy
 80116ba:	f3bf 8f4f 	dsb	sy
 80116be:	61fb      	str	r3, [r7, #28]
 80116c0:	e7fe      	b.n	80116c0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80116c2:	f001 ff4b 	bl	801355c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80116c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80116ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116ce:	429a      	cmp	r2, r3
 80116d0:	d302      	bcc.n	80116d8 <xQueueGenericSend+0xcc>
 80116d2:	683b      	ldr	r3, [r7, #0]
 80116d4:	2b02      	cmp	r3, #2
 80116d6:	d129      	bne.n	801172c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80116d8:	683a      	ldr	r2, [r7, #0]
 80116da:	68b9      	ldr	r1, [r7, #8]
 80116dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116de:	f000 fa7c 	bl	8011bda <prvCopyDataToQueue>
 80116e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80116e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d010      	beq.n	801170e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80116ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ee:	3324      	adds	r3, #36	; 0x24
 80116f0:	4618      	mov	r0, r3
 80116f2:	f001 f831 	bl	8012758 <xTaskRemoveFromEventList>
 80116f6:	4603      	mov	r3, r0
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d013      	beq.n	8011724 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80116fc:	4b3f      	ldr	r3, [pc, #252]	; (80117fc <xQueueGenericSend+0x1f0>)
 80116fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011702:	601a      	str	r2, [r3, #0]
 8011704:	f3bf 8f4f 	dsb	sy
 8011708:	f3bf 8f6f 	isb	sy
 801170c:	e00a      	b.n	8011724 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801170e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011710:	2b00      	cmp	r3, #0
 8011712:	d007      	beq.n	8011724 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011714:	4b39      	ldr	r3, [pc, #228]	; (80117fc <xQueueGenericSend+0x1f0>)
 8011716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801171a:	601a      	str	r2, [r3, #0]
 801171c:	f3bf 8f4f 	dsb	sy
 8011720:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011724:	f001 ff48 	bl	80135b8 <vPortExitCritical>
				return pdPASS;
 8011728:	2301      	movs	r3, #1
 801172a:	e063      	b.n	80117f4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d103      	bne.n	801173a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011732:	f001 ff41 	bl	80135b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011736:	2300      	movs	r3, #0
 8011738:	e05c      	b.n	80117f4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801173a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801173c:	2b00      	cmp	r3, #0
 801173e:	d106      	bne.n	801174e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011740:	f107 0314 	add.w	r3, r7, #20
 8011744:	4618      	mov	r0, r3
 8011746:	f001 f869 	bl	801281c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801174a:	2301      	movs	r3, #1
 801174c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801174e:	f001 ff33 	bl	80135b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011752:	f000 fde5 	bl	8012320 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011756:	f001 ff01 	bl	801355c <vPortEnterCritical>
 801175a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801175c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011760:	b25b      	sxtb	r3, r3
 8011762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011766:	d103      	bne.n	8011770 <xQueueGenericSend+0x164>
 8011768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801176a:	2200      	movs	r2, #0
 801176c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011772:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011776:	b25b      	sxtb	r3, r3
 8011778:	f1b3 3fff 	cmp.w	r3, #4294967295
 801177c:	d103      	bne.n	8011786 <xQueueGenericSend+0x17a>
 801177e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011780:	2200      	movs	r2, #0
 8011782:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011786:	f001 ff17 	bl	80135b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801178a:	1d3a      	adds	r2, r7, #4
 801178c:	f107 0314 	add.w	r3, r7, #20
 8011790:	4611      	mov	r1, r2
 8011792:	4618      	mov	r0, r3
 8011794:	f001 f858 	bl	8012848 <xTaskCheckForTimeOut>
 8011798:	4603      	mov	r3, r0
 801179a:	2b00      	cmp	r3, #0
 801179c:	d124      	bne.n	80117e8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801179e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80117a0:	f000 fb13 	bl	8011dca <prvIsQueueFull>
 80117a4:	4603      	mov	r3, r0
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d018      	beq.n	80117dc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80117aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ac:	3310      	adds	r3, #16
 80117ae:	687a      	ldr	r2, [r7, #4]
 80117b0:	4611      	mov	r1, r2
 80117b2:	4618      	mov	r0, r3
 80117b4:	f000 ff82 	bl	80126bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80117b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80117ba:	f000 fa9e 	bl	8011cfa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80117be:	f000 fdbd 	bl	801233c <xTaskResumeAll>
 80117c2:	4603      	mov	r3, r0
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	f47f af7c 	bne.w	80116c2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80117ca:	4b0c      	ldr	r3, [pc, #48]	; (80117fc <xQueueGenericSend+0x1f0>)
 80117cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117d0:	601a      	str	r2, [r3, #0]
 80117d2:	f3bf 8f4f 	dsb	sy
 80117d6:	f3bf 8f6f 	isb	sy
 80117da:	e772      	b.n	80116c2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80117dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80117de:	f000 fa8c 	bl	8011cfa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80117e2:	f000 fdab 	bl	801233c <xTaskResumeAll>
 80117e6:	e76c      	b.n	80116c2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80117e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80117ea:	f000 fa86 	bl	8011cfa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80117ee:	f000 fda5 	bl	801233c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80117f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80117f4:	4618      	mov	r0, r3
 80117f6:	3738      	adds	r7, #56	; 0x38
 80117f8:	46bd      	mov	sp, r7
 80117fa:	bd80      	pop	{r7, pc}
 80117fc:	e000ed04 	.word	0xe000ed04

08011800 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b08e      	sub	sp, #56	; 0x38
 8011804:	af00      	add	r7, sp, #0
 8011806:	60f8      	str	r0, [r7, #12]
 8011808:	60b9      	str	r1, [r7, #8]
 801180a:	607a      	str	r2, [r7, #4]
 801180c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011814:	2b00      	cmp	r3, #0
 8011816:	d109      	bne.n	801182c <xQueueGenericSendFromISR+0x2c>
 8011818:	f04f 0350 	mov.w	r3, #80	; 0x50
 801181c:	f383 8811 	msr	BASEPRI, r3
 8011820:	f3bf 8f6f 	isb	sy
 8011824:	f3bf 8f4f 	dsb	sy
 8011828:	627b      	str	r3, [r7, #36]	; 0x24
 801182a:	e7fe      	b.n	801182a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801182c:	68bb      	ldr	r3, [r7, #8]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d103      	bne.n	801183a <xQueueGenericSendFromISR+0x3a>
 8011832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011836:	2b00      	cmp	r3, #0
 8011838:	d101      	bne.n	801183e <xQueueGenericSendFromISR+0x3e>
 801183a:	2301      	movs	r3, #1
 801183c:	e000      	b.n	8011840 <xQueueGenericSendFromISR+0x40>
 801183e:	2300      	movs	r3, #0
 8011840:	2b00      	cmp	r3, #0
 8011842:	d109      	bne.n	8011858 <xQueueGenericSendFromISR+0x58>
 8011844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011848:	f383 8811 	msr	BASEPRI, r3
 801184c:	f3bf 8f6f 	isb	sy
 8011850:	f3bf 8f4f 	dsb	sy
 8011854:	623b      	str	r3, [r7, #32]
 8011856:	e7fe      	b.n	8011856 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011858:	683b      	ldr	r3, [r7, #0]
 801185a:	2b02      	cmp	r3, #2
 801185c:	d103      	bne.n	8011866 <xQueueGenericSendFromISR+0x66>
 801185e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011862:	2b01      	cmp	r3, #1
 8011864:	d101      	bne.n	801186a <xQueueGenericSendFromISR+0x6a>
 8011866:	2301      	movs	r3, #1
 8011868:	e000      	b.n	801186c <xQueueGenericSendFromISR+0x6c>
 801186a:	2300      	movs	r3, #0
 801186c:	2b00      	cmp	r3, #0
 801186e:	d109      	bne.n	8011884 <xQueueGenericSendFromISR+0x84>
 8011870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011874:	f383 8811 	msr	BASEPRI, r3
 8011878:	f3bf 8f6f 	isb	sy
 801187c:	f3bf 8f4f 	dsb	sy
 8011880:	61fb      	str	r3, [r7, #28]
 8011882:	e7fe      	b.n	8011882 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011884:	f001 ff46 	bl	8013714 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011888:	f3ef 8211 	mrs	r2, BASEPRI
 801188c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011890:	f383 8811 	msr	BASEPRI, r3
 8011894:	f3bf 8f6f 	isb	sy
 8011898:	f3bf 8f4f 	dsb	sy
 801189c:	61ba      	str	r2, [r7, #24]
 801189e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80118a0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80118a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80118a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80118a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80118ac:	429a      	cmp	r2, r3
 80118ae:	d302      	bcc.n	80118b6 <xQueueGenericSendFromISR+0xb6>
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	2b02      	cmp	r3, #2
 80118b4:	d12c      	bne.n	8011910 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80118b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80118bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80118c0:	683a      	ldr	r2, [r7, #0]
 80118c2:	68b9      	ldr	r1, [r7, #8]
 80118c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80118c6:	f000 f988 	bl	8011bda <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80118ca:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80118ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118d2:	d112      	bne.n	80118fa <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80118d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d016      	beq.n	801190a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80118dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118de:	3324      	adds	r3, #36	; 0x24
 80118e0:	4618      	mov	r0, r3
 80118e2:	f000 ff39 	bl	8012758 <xTaskRemoveFromEventList>
 80118e6:	4603      	mov	r3, r0
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d00e      	beq.n	801190a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d00b      	beq.n	801190a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	2201      	movs	r2, #1
 80118f6:	601a      	str	r2, [r3, #0]
 80118f8:	e007      	b.n	801190a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80118fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80118fe:	3301      	adds	r3, #1
 8011900:	b2db      	uxtb	r3, r3
 8011902:	b25a      	sxtb	r2, r3
 8011904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801190a:	2301      	movs	r3, #1
 801190c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801190e:	e001      	b.n	8011914 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011910:	2300      	movs	r3, #0
 8011912:	637b      	str	r3, [r7, #52]	; 0x34
 8011914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011916:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011918:	693b      	ldr	r3, [r7, #16]
 801191a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801191e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011920:	4618      	mov	r0, r3
 8011922:	3738      	adds	r7, #56	; 0x38
 8011924:	46bd      	mov	sp, r7
 8011926:	bd80      	pop	{r7, pc}

08011928 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b08c      	sub	sp, #48	; 0x30
 801192c:	af00      	add	r7, sp, #0
 801192e:	60f8      	str	r0, [r7, #12]
 8011930:	60b9      	str	r1, [r7, #8]
 8011932:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011934:	2300      	movs	r3, #0
 8011936:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801193c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801193e:	2b00      	cmp	r3, #0
 8011940:	d109      	bne.n	8011956 <xQueueReceive+0x2e>
	__asm volatile
 8011942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011946:	f383 8811 	msr	BASEPRI, r3
 801194a:	f3bf 8f6f 	isb	sy
 801194e:	f3bf 8f4f 	dsb	sy
 8011952:	623b      	str	r3, [r7, #32]
 8011954:	e7fe      	b.n	8011954 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011956:	68bb      	ldr	r3, [r7, #8]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d103      	bne.n	8011964 <xQueueReceive+0x3c>
 801195c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011960:	2b00      	cmp	r3, #0
 8011962:	d101      	bne.n	8011968 <xQueueReceive+0x40>
 8011964:	2301      	movs	r3, #1
 8011966:	e000      	b.n	801196a <xQueueReceive+0x42>
 8011968:	2300      	movs	r3, #0
 801196a:	2b00      	cmp	r3, #0
 801196c:	d109      	bne.n	8011982 <xQueueReceive+0x5a>
 801196e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011972:	f383 8811 	msr	BASEPRI, r3
 8011976:	f3bf 8f6f 	isb	sy
 801197a:	f3bf 8f4f 	dsb	sy
 801197e:	61fb      	str	r3, [r7, #28]
 8011980:	e7fe      	b.n	8011980 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011982:	f001 f89f 	bl	8012ac4 <xTaskGetSchedulerState>
 8011986:	4603      	mov	r3, r0
 8011988:	2b00      	cmp	r3, #0
 801198a:	d102      	bne.n	8011992 <xQueueReceive+0x6a>
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d101      	bne.n	8011996 <xQueueReceive+0x6e>
 8011992:	2301      	movs	r3, #1
 8011994:	e000      	b.n	8011998 <xQueueReceive+0x70>
 8011996:	2300      	movs	r3, #0
 8011998:	2b00      	cmp	r3, #0
 801199a:	d109      	bne.n	80119b0 <xQueueReceive+0x88>
 801199c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119a0:	f383 8811 	msr	BASEPRI, r3
 80119a4:	f3bf 8f6f 	isb	sy
 80119a8:	f3bf 8f4f 	dsb	sy
 80119ac:	61bb      	str	r3, [r7, #24]
 80119ae:	e7fe      	b.n	80119ae <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80119b0:	f001 fdd4 	bl	801355c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80119b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119b8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80119ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d01f      	beq.n	8011a00 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80119c0:	68b9      	ldr	r1, [r7, #8]
 80119c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119c4:	f000 f973 	bl	8011cae <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80119c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ca:	1e5a      	subs	r2, r3, #1
 80119cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119ce:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80119d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119d2:	691b      	ldr	r3, [r3, #16]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d00f      	beq.n	80119f8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80119d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119da:	3310      	adds	r3, #16
 80119dc:	4618      	mov	r0, r3
 80119de:	f000 febb 	bl	8012758 <xTaskRemoveFromEventList>
 80119e2:	4603      	mov	r3, r0
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d007      	beq.n	80119f8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80119e8:	4b3c      	ldr	r3, [pc, #240]	; (8011adc <xQueueReceive+0x1b4>)
 80119ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119ee:	601a      	str	r2, [r3, #0]
 80119f0:	f3bf 8f4f 	dsb	sy
 80119f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80119f8:	f001 fdde 	bl	80135b8 <vPortExitCritical>
				return pdPASS;
 80119fc:	2301      	movs	r3, #1
 80119fe:	e069      	b.n	8011ad4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d103      	bne.n	8011a0e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011a06:	f001 fdd7 	bl	80135b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	e062      	b.n	8011ad4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d106      	bne.n	8011a22 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011a14:	f107 0310 	add.w	r3, r7, #16
 8011a18:	4618      	mov	r0, r3
 8011a1a:	f000 feff 	bl	801281c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011a1e:	2301      	movs	r3, #1
 8011a20:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011a22:	f001 fdc9 	bl	80135b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011a26:	f000 fc7b 	bl	8012320 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011a2a:	f001 fd97 	bl	801355c <vPortEnterCritical>
 8011a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011a34:	b25b      	sxtb	r3, r3
 8011a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a3a:	d103      	bne.n	8011a44 <xQueueReceive+0x11c>
 8011a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a3e:	2200      	movs	r2, #0
 8011a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011a4a:	b25b      	sxtb	r3, r3
 8011a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a50:	d103      	bne.n	8011a5a <xQueueReceive+0x132>
 8011a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a54:	2200      	movs	r2, #0
 8011a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011a5a:	f001 fdad 	bl	80135b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011a5e:	1d3a      	adds	r2, r7, #4
 8011a60:	f107 0310 	add.w	r3, r7, #16
 8011a64:	4611      	mov	r1, r2
 8011a66:	4618      	mov	r0, r3
 8011a68:	f000 feee 	bl	8012848 <xTaskCheckForTimeOut>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d123      	bne.n	8011aba <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011a72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a74:	f000 f993 	bl	8011d9e <prvIsQueueEmpty>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d017      	beq.n	8011aae <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a80:	3324      	adds	r3, #36	; 0x24
 8011a82:	687a      	ldr	r2, [r7, #4]
 8011a84:	4611      	mov	r1, r2
 8011a86:	4618      	mov	r0, r3
 8011a88:	f000 fe18 	bl	80126bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011a8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a8e:	f000 f934 	bl	8011cfa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011a92:	f000 fc53 	bl	801233c <xTaskResumeAll>
 8011a96:	4603      	mov	r3, r0
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d189      	bne.n	80119b0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8011a9c:	4b0f      	ldr	r3, [pc, #60]	; (8011adc <xQueueReceive+0x1b4>)
 8011a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011aa2:	601a      	str	r2, [r3, #0]
 8011aa4:	f3bf 8f4f 	dsb	sy
 8011aa8:	f3bf 8f6f 	isb	sy
 8011aac:	e780      	b.n	80119b0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011aae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ab0:	f000 f923 	bl	8011cfa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011ab4:	f000 fc42 	bl	801233c <xTaskResumeAll>
 8011ab8:	e77a      	b.n	80119b0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011aba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011abc:	f000 f91d 	bl	8011cfa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011ac0:	f000 fc3c 	bl	801233c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011ac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ac6:	f000 f96a 	bl	8011d9e <prvIsQueueEmpty>
 8011aca:	4603      	mov	r3, r0
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	f43f af6f 	beq.w	80119b0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011ad2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	3730      	adds	r7, #48	; 0x30
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	bd80      	pop	{r7, pc}
 8011adc:	e000ed04 	.word	0xe000ed04

08011ae0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b08e      	sub	sp, #56	; 0x38
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	60f8      	str	r0, [r7, #12]
 8011ae8:	60b9      	str	r1, [r7, #8]
 8011aea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d109      	bne.n	8011b0a <xQueueReceiveFromISR+0x2a>
 8011af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011afa:	f383 8811 	msr	BASEPRI, r3
 8011afe:	f3bf 8f6f 	isb	sy
 8011b02:	f3bf 8f4f 	dsb	sy
 8011b06:	623b      	str	r3, [r7, #32]
 8011b08:	e7fe      	b.n	8011b08 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011b0a:	68bb      	ldr	r3, [r7, #8]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d103      	bne.n	8011b18 <xQueueReceiveFromISR+0x38>
 8011b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d101      	bne.n	8011b1c <xQueueReceiveFromISR+0x3c>
 8011b18:	2301      	movs	r3, #1
 8011b1a:	e000      	b.n	8011b1e <xQueueReceiveFromISR+0x3e>
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d109      	bne.n	8011b36 <xQueueReceiveFromISR+0x56>
 8011b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b26:	f383 8811 	msr	BASEPRI, r3
 8011b2a:	f3bf 8f6f 	isb	sy
 8011b2e:	f3bf 8f4f 	dsb	sy
 8011b32:	61fb      	str	r3, [r7, #28]
 8011b34:	e7fe      	b.n	8011b34 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011b36:	f001 fded 	bl	8013714 <vPortValidateInterruptPriority>
	__asm volatile
 8011b3a:	f3ef 8211 	mrs	r2, BASEPRI
 8011b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b42:	f383 8811 	msr	BASEPRI, r3
 8011b46:	f3bf 8f6f 	isb	sy
 8011b4a:	f3bf 8f4f 	dsb	sy
 8011b4e:	61ba      	str	r2, [r7, #24]
 8011b50:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011b52:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011b54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b5a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d02f      	beq.n	8011bc2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011b6c:	68b9      	ldr	r1, [r7, #8]
 8011b6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b70:	f000 f89d 	bl	8011cae <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b76:	1e5a      	subs	r2, r3, #1
 8011b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011b7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b84:	d112      	bne.n	8011bac <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b88:	691b      	ldr	r3, [r3, #16]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d016      	beq.n	8011bbc <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b90:	3310      	adds	r3, #16
 8011b92:	4618      	mov	r0, r3
 8011b94:	f000 fde0 	bl	8012758 <xTaskRemoveFromEventList>
 8011b98:	4603      	mov	r3, r0
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d00e      	beq.n	8011bbc <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d00b      	beq.n	8011bbc <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	2201      	movs	r2, #1
 8011ba8:	601a      	str	r2, [r3, #0]
 8011baa:	e007      	b.n	8011bbc <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011bac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011bb0:	3301      	adds	r3, #1
 8011bb2:	b2db      	uxtb	r3, r3
 8011bb4:	b25a      	sxtb	r2, r3
 8011bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011bbc:	2301      	movs	r3, #1
 8011bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8011bc0:	e001      	b.n	8011bc6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8011bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bc8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011bca:	693b      	ldr	r3, [r7, #16]
 8011bcc:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	3738      	adds	r7, #56	; 0x38
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bd80      	pop	{r7, pc}

08011bda <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011bda:	b580      	push	{r7, lr}
 8011bdc:	b086      	sub	sp, #24
 8011bde:	af00      	add	r7, sp, #0
 8011be0:	60f8      	str	r0, [r7, #12]
 8011be2:	60b9      	str	r1, [r7, #8]
 8011be4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011be6:	2300      	movs	r3, #0
 8011be8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bee:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d10d      	bne.n	8011c14 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d14d      	bne.n	8011c9c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	689b      	ldr	r3, [r3, #8]
 8011c04:	4618      	mov	r0, r3
 8011c06:	f000 ff7b 	bl	8012b00 <xTaskPriorityDisinherit>
 8011c0a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	2200      	movs	r2, #0
 8011c10:	609a      	str	r2, [r3, #8]
 8011c12:	e043      	b.n	8011c9c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d119      	bne.n	8011c4e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	6858      	ldr	r0, [r3, #4]
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c22:	461a      	mov	r2, r3
 8011c24:	68b9      	ldr	r1, [r7, #8]
 8011c26:	f002 fac5 	bl	80141b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	685a      	ldr	r2, [r3, #4]
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c32:	441a      	add	r2, r3
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	685a      	ldr	r2, [r3, #4]
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	689b      	ldr	r3, [r3, #8]
 8011c40:	429a      	cmp	r2, r3
 8011c42:	d32b      	bcc.n	8011c9c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	681a      	ldr	r2, [r3, #0]
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	605a      	str	r2, [r3, #4]
 8011c4c:	e026      	b.n	8011c9c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	68d8      	ldr	r0, [r3, #12]
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c56:	461a      	mov	r2, r3
 8011c58:	68b9      	ldr	r1, [r7, #8]
 8011c5a:	f002 faab 	bl	80141b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	68da      	ldr	r2, [r3, #12]
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c66:	425b      	negs	r3, r3
 8011c68:	441a      	add	r2, r3
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	68da      	ldr	r2, [r3, #12]
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	429a      	cmp	r2, r3
 8011c78:	d207      	bcs.n	8011c8a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	689a      	ldr	r2, [r3, #8]
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c82:	425b      	negs	r3, r3
 8011c84:	441a      	add	r2, r3
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	2b02      	cmp	r3, #2
 8011c8e:	d105      	bne.n	8011c9c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011c90:	693b      	ldr	r3, [r7, #16]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d002      	beq.n	8011c9c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011c96:	693b      	ldr	r3, [r7, #16]
 8011c98:	3b01      	subs	r3, #1
 8011c9a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011c9c:	693b      	ldr	r3, [r7, #16]
 8011c9e:	1c5a      	adds	r2, r3, #1
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011ca4:	697b      	ldr	r3, [r7, #20]
}
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	3718      	adds	r7, #24
 8011caa:	46bd      	mov	sp, r7
 8011cac:	bd80      	pop	{r7, pc}

08011cae <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011cae:	b580      	push	{r7, lr}
 8011cb0:	b082      	sub	sp, #8
 8011cb2:	af00      	add	r7, sp, #0
 8011cb4:	6078      	str	r0, [r7, #4]
 8011cb6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d018      	beq.n	8011cf2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	68da      	ldr	r2, [r3, #12]
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cc8:	441a      	add	r2, r3
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	68da      	ldr	r2, [r3, #12]
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	689b      	ldr	r3, [r3, #8]
 8011cd6:	429a      	cmp	r2, r3
 8011cd8:	d303      	bcc.n	8011ce2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	681a      	ldr	r2, [r3, #0]
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	68d9      	ldr	r1, [r3, #12]
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cea:	461a      	mov	r2, r3
 8011cec:	6838      	ldr	r0, [r7, #0]
 8011cee:	f002 fa61 	bl	80141b4 <memcpy>
	}
}
 8011cf2:	bf00      	nop
 8011cf4:	3708      	adds	r7, #8
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bd80      	pop	{r7, pc}

08011cfa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011cfa:	b580      	push	{r7, lr}
 8011cfc:	b084      	sub	sp, #16
 8011cfe:	af00      	add	r7, sp, #0
 8011d00:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011d02:	f001 fc2b 	bl	801355c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011d0c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011d0e:	e011      	b.n	8011d34 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d012      	beq.n	8011d3e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	3324      	adds	r3, #36	; 0x24
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	f000 fd1b 	bl	8012758 <xTaskRemoveFromEventList>
 8011d22:	4603      	mov	r3, r0
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d001      	beq.n	8011d2c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011d28:	f000 fdee 	bl	8012908 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011d2c:	7bfb      	ldrb	r3, [r7, #15]
 8011d2e:	3b01      	subs	r3, #1
 8011d30:	b2db      	uxtb	r3, r3
 8011d32:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	dce9      	bgt.n	8011d10 <prvUnlockQueue+0x16>
 8011d3c:	e000      	b.n	8011d40 <prvUnlockQueue+0x46>
					break;
 8011d3e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	22ff      	movs	r2, #255	; 0xff
 8011d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011d48:	f001 fc36 	bl	80135b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011d4c:	f001 fc06 	bl	801355c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011d56:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011d58:	e011      	b.n	8011d7e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	691b      	ldr	r3, [r3, #16]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d012      	beq.n	8011d88 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	3310      	adds	r3, #16
 8011d66:	4618      	mov	r0, r3
 8011d68:	f000 fcf6 	bl	8012758 <xTaskRemoveFromEventList>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d001      	beq.n	8011d76 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011d72:	f000 fdc9 	bl	8012908 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011d76:	7bbb      	ldrb	r3, [r7, #14]
 8011d78:	3b01      	subs	r3, #1
 8011d7a:	b2db      	uxtb	r3, r3
 8011d7c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011d7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	dce9      	bgt.n	8011d5a <prvUnlockQueue+0x60>
 8011d86:	e000      	b.n	8011d8a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011d88:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	22ff      	movs	r2, #255	; 0xff
 8011d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011d92:	f001 fc11 	bl	80135b8 <vPortExitCritical>
}
 8011d96:	bf00      	nop
 8011d98:	3710      	adds	r7, #16
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	bd80      	pop	{r7, pc}

08011d9e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011d9e:	b580      	push	{r7, lr}
 8011da0:	b084      	sub	sp, #16
 8011da2:	af00      	add	r7, sp, #0
 8011da4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011da6:	f001 fbd9 	bl	801355c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d102      	bne.n	8011db8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011db2:	2301      	movs	r3, #1
 8011db4:	60fb      	str	r3, [r7, #12]
 8011db6:	e001      	b.n	8011dbc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011db8:	2300      	movs	r3, #0
 8011dba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011dbc:	f001 fbfc 	bl	80135b8 <vPortExitCritical>

	return xReturn;
 8011dc0:	68fb      	ldr	r3, [r7, #12]
}
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	3710      	adds	r7, #16
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	bd80      	pop	{r7, pc}

08011dca <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011dca:	b580      	push	{r7, lr}
 8011dcc:	b084      	sub	sp, #16
 8011dce:	af00      	add	r7, sp, #0
 8011dd0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011dd2:	f001 fbc3 	bl	801355c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011dde:	429a      	cmp	r2, r3
 8011de0:	d102      	bne.n	8011de8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011de2:	2301      	movs	r3, #1
 8011de4:	60fb      	str	r3, [r7, #12]
 8011de6:	e001      	b.n	8011dec <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011de8:	2300      	movs	r3, #0
 8011dea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011dec:	f001 fbe4 	bl	80135b8 <vPortExitCritical>

	return xReturn;
 8011df0:	68fb      	ldr	r3, [r7, #12]
}
 8011df2:	4618      	mov	r0, r3
 8011df4:	3710      	adds	r7, #16
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd80      	pop	{r7, pc}
	...

08011dfc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011dfc:	b480      	push	{r7}
 8011dfe:	b085      	sub	sp, #20
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
 8011e04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011e06:	2300      	movs	r3, #0
 8011e08:	60fb      	str	r3, [r7, #12]
 8011e0a:	e014      	b.n	8011e36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011e0c:	4a0e      	ldr	r2, [pc, #56]	; (8011e48 <vQueueAddToRegistry+0x4c>)
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d10b      	bne.n	8011e30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011e18:	490b      	ldr	r1, [pc, #44]	; (8011e48 <vQueueAddToRegistry+0x4c>)
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	683a      	ldr	r2, [r7, #0]
 8011e1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011e22:	4a09      	ldr	r2, [pc, #36]	; (8011e48 <vQueueAddToRegistry+0x4c>)
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	00db      	lsls	r3, r3, #3
 8011e28:	4413      	add	r3, r2
 8011e2a:	687a      	ldr	r2, [r7, #4]
 8011e2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011e2e:	e005      	b.n	8011e3c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	3301      	adds	r3, #1
 8011e34:	60fb      	str	r3, [r7, #12]
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	2b07      	cmp	r3, #7
 8011e3a:	d9e7      	bls.n	8011e0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011e3c:	bf00      	nop
 8011e3e:	3714      	adds	r7, #20
 8011e40:	46bd      	mov	sp, r7
 8011e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e46:	4770      	bx	lr
 8011e48:	2003dd6c 	.word	0x2003dd6c

08011e4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b086      	sub	sp, #24
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	60f8      	str	r0, [r7, #12]
 8011e54:	60b9      	str	r1, [r7, #8]
 8011e56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011e5c:	f001 fb7e 	bl	801355c <vPortEnterCritical>
 8011e60:	697b      	ldr	r3, [r7, #20]
 8011e62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011e66:	b25b      	sxtb	r3, r3
 8011e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e6c:	d103      	bne.n	8011e76 <vQueueWaitForMessageRestricted+0x2a>
 8011e6e:	697b      	ldr	r3, [r7, #20]
 8011e70:	2200      	movs	r2, #0
 8011e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011e76:	697b      	ldr	r3, [r7, #20]
 8011e78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011e7c:	b25b      	sxtb	r3, r3
 8011e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e82:	d103      	bne.n	8011e8c <vQueueWaitForMessageRestricted+0x40>
 8011e84:	697b      	ldr	r3, [r7, #20]
 8011e86:	2200      	movs	r2, #0
 8011e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011e8c:	f001 fb94 	bl	80135b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011e90:	697b      	ldr	r3, [r7, #20]
 8011e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d106      	bne.n	8011ea6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011e98:	697b      	ldr	r3, [r7, #20]
 8011e9a:	3324      	adds	r3, #36	; 0x24
 8011e9c:	687a      	ldr	r2, [r7, #4]
 8011e9e:	68b9      	ldr	r1, [r7, #8]
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	f000 fc2f 	bl	8012704 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011ea6:	6978      	ldr	r0, [r7, #20]
 8011ea8:	f7ff ff27 	bl	8011cfa <prvUnlockQueue>
	}
 8011eac:	bf00      	nop
 8011eae:	3718      	adds	r7, #24
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bd80      	pop	{r7, pc}

08011eb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b08e      	sub	sp, #56	; 0x38
 8011eb8:	af04      	add	r7, sp, #16
 8011eba:	60f8      	str	r0, [r7, #12]
 8011ebc:	60b9      	str	r1, [r7, #8]
 8011ebe:	607a      	str	r2, [r7, #4]
 8011ec0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d109      	bne.n	8011edc <xTaskCreateStatic+0x28>
	__asm volatile
 8011ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ecc:	f383 8811 	msr	BASEPRI, r3
 8011ed0:	f3bf 8f6f 	isb	sy
 8011ed4:	f3bf 8f4f 	dsb	sy
 8011ed8:	623b      	str	r3, [r7, #32]
 8011eda:	e7fe      	b.n	8011eda <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8011edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d109      	bne.n	8011ef6 <xTaskCreateStatic+0x42>
 8011ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ee6:	f383 8811 	msr	BASEPRI, r3
 8011eea:	f3bf 8f6f 	isb	sy
 8011eee:	f3bf 8f4f 	dsb	sy
 8011ef2:	61fb      	str	r3, [r7, #28]
 8011ef4:	e7fe      	b.n	8011ef4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011ef6:	235c      	movs	r3, #92	; 0x5c
 8011ef8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011efa:	693b      	ldr	r3, [r7, #16]
 8011efc:	2b5c      	cmp	r3, #92	; 0x5c
 8011efe:	d009      	beq.n	8011f14 <xTaskCreateStatic+0x60>
 8011f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f04:	f383 8811 	msr	BASEPRI, r3
 8011f08:	f3bf 8f6f 	isb	sy
 8011f0c:	f3bf 8f4f 	dsb	sy
 8011f10:	61bb      	str	r3, [r7, #24]
 8011f12:	e7fe      	b.n	8011f12 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011f14:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d01e      	beq.n	8011f5a <xTaskCreateStatic+0xa6>
 8011f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d01b      	beq.n	8011f5a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f24:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f2a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f2e:	2202      	movs	r2, #2
 8011f30:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011f34:	2300      	movs	r3, #0
 8011f36:	9303      	str	r3, [sp, #12]
 8011f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f3a:	9302      	str	r3, [sp, #8]
 8011f3c:	f107 0314 	add.w	r3, r7, #20
 8011f40:	9301      	str	r3, [sp, #4]
 8011f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f44:	9300      	str	r3, [sp, #0]
 8011f46:	683b      	ldr	r3, [r7, #0]
 8011f48:	687a      	ldr	r2, [r7, #4]
 8011f4a:	68b9      	ldr	r1, [r7, #8]
 8011f4c:	68f8      	ldr	r0, [r7, #12]
 8011f4e:	f000 f850 	bl	8011ff2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011f52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f54:	f000 f8dc 	bl	8012110 <prvAddNewTaskToReadyList>
 8011f58:	e001      	b.n	8011f5e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011f5e:	697b      	ldr	r3, [r7, #20]
	}
 8011f60:	4618      	mov	r0, r3
 8011f62:	3728      	adds	r7, #40	; 0x28
 8011f64:	46bd      	mov	sp, r7
 8011f66:	bd80      	pop	{r7, pc}

08011f68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b08c      	sub	sp, #48	; 0x30
 8011f6c:	af04      	add	r7, sp, #16
 8011f6e:	60f8      	str	r0, [r7, #12]
 8011f70:	60b9      	str	r1, [r7, #8]
 8011f72:	603b      	str	r3, [r7, #0]
 8011f74:	4613      	mov	r3, r2
 8011f76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011f78:	88fb      	ldrh	r3, [r7, #6]
 8011f7a:	009b      	lsls	r3, r3, #2
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	f001 fc07 	bl	8013790 <pvPortMalloc>
 8011f82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011f84:	697b      	ldr	r3, [r7, #20]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d00e      	beq.n	8011fa8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011f8a:	205c      	movs	r0, #92	; 0x5c
 8011f8c:	f001 fc00 	bl	8013790 <pvPortMalloc>
 8011f90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011f92:	69fb      	ldr	r3, [r7, #28]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d003      	beq.n	8011fa0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011f98:	69fb      	ldr	r3, [r7, #28]
 8011f9a:	697a      	ldr	r2, [r7, #20]
 8011f9c:	631a      	str	r2, [r3, #48]	; 0x30
 8011f9e:	e005      	b.n	8011fac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011fa0:	6978      	ldr	r0, [r7, #20]
 8011fa2:	f001 fcb7 	bl	8013914 <vPortFree>
 8011fa6:	e001      	b.n	8011fac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011fa8:	2300      	movs	r3, #0
 8011faa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011fac:	69fb      	ldr	r3, [r7, #28]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d017      	beq.n	8011fe2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011fb2:	69fb      	ldr	r3, [r7, #28]
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011fba:	88fa      	ldrh	r2, [r7, #6]
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	9303      	str	r3, [sp, #12]
 8011fc0:	69fb      	ldr	r3, [r7, #28]
 8011fc2:	9302      	str	r3, [sp, #8]
 8011fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fc6:	9301      	str	r3, [sp, #4]
 8011fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fca:	9300      	str	r3, [sp, #0]
 8011fcc:	683b      	ldr	r3, [r7, #0]
 8011fce:	68b9      	ldr	r1, [r7, #8]
 8011fd0:	68f8      	ldr	r0, [r7, #12]
 8011fd2:	f000 f80e 	bl	8011ff2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011fd6:	69f8      	ldr	r0, [r7, #28]
 8011fd8:	f000 f89a 	bl	8012110 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011fdc:	2301      	movs	r3, #1
 8011fde:	61bb      	str	r3, [r7, #24]
 8011fe0:	e002      	b.n	8011fe8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8011fe6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011fe8:	69bb      	ldr	r3, [r7, #24]
	}
 8011fea:	4618      	mov	r0, r3
 8011fec:	3720      	adds	r7, #32
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	bd80      	pop	{r7, pc}

08011ff2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011ff2:	b580      	push	{r7, lr}
 8011ff4:	b088      	sub	sp, #32
 8011ff6:	af00      	add	r7, sp, #0
 8011ff8:	60f8      	str	r0, [r7, #12]
 8011ffa:	60b9      	str	r1, [r7, #8]
 8011ffc:	607a      	str	r2, [r7, #4]
 8011ffe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012002:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	009b      	lsls	r3, r3, #2
 8012008:	461a      	mov	r2, r3
 801200a:	21a5      	movs	r1, #165	; 0xa5
 801200c:	f002 f8dd 	bl	80141ca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801201a:	3b01      	subs	r3, #1
 801201c:	009b      	lsls	r3, r3, #2
 801201e:	4413      	add	r3, r2
 8012020:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012022:	69bb      	ldr	r3, [r7, #24]
 8012024:	f023 0307 	bic.w	r3, r3, #7
 8012028:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801202a:	69bb      	ldr	r3, [r7, #24]
 801202c:	f003 0307 	and.w	r3, r3, #7
 8012030:	2b00      	cmp	r3, #0
 8012032:	d009      	beq.n	8012048 <prvInitialiseNewTask+0x56>
 8012034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012038:	f383 8811 	msr	BASEPRI, r3
 801203c:	f3bf 8f6f 	isb	sy
 8012040:	f3bf 8f4f 	dsb	sy
 8012044:	617b      	str	r3, [r7, #20]
 8012046:	e7fe      	b.n	8012046 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012048:	68bb      	ldr	r3, [r7, #8]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d01f      	beq.n	801208e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801204e:	2300      	movs	r3, #0
 8012050:	61fb      	str	r3, [r7, #28]
 8012052:	e012      	b.n	801207a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012054:	68ba      	ldr	r2, [r7, #8]
 8012056:	69fb      	ldr	r3, [r7, #28]
 8012058:	4413      	add	r3, r2
 801205a:	7819      	ldrb	r1, [r3, #0]
 801205c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801205e:	69fb      	ldr	r3, [r7, #28]
 8012060:	4413      	add	r3, r2
 8012062:	3334      	adds	r3, #52	; 0x34
 8012064:	460a      	mov	r2, r1
 8012066:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012068:	68ba      	ldr	r2, [r7, #8]
 801206a:	69fb      	ldr	r3, [r7, #28]
 801206c:	4413      	add	r3, r2
 801206e:	781b      	ldrb	r3, [r3, #0]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d006      	beq.n	8012082 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012074:	69fb      	ldr	r3, [r7, #28]
 8012076:	3301      	adds	r3, #1
 8012078:	61fb      	str	r3, [r7, #28]
 801207a:	69fb      	ldr	r3, [r7, #28]
 801207c:	2b0f      	cmp	r3, #15
 801207e:	d9e9      	bls.n	8012054 <prvInitialiseNewTask+0x62>
 8012080:	e000      	b.n	8012084 <prvInitialiseNewTask+0x92>
			{
				break;
 8012082:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012086:	2200      	movs	r2, #0
 8012088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801208c:	e003      	b.n	8012096 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801208e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012090:	2200      	movs	r2, #0
 8012092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012098:	2b37      	cmp	r3, #55	; 0x37
 801209a:	d901      	bls.n	80120a0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801209c:	2337      	movs	r3, #55	; 0x37
 801209e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80120a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80120a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80120ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ae:	2200      	movs	r2, #0
 80120b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80120b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120b4:	3304      	adds	r3, #4
 80120b6:	4618      	mov	r0, r3
 80120b8:	f7ff f8d6 	bl	8011268 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80120bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120be:	3318      	adds	r3, #24
 80120c0:	4618      	mov	r0, r3
 80120c2:	f7ff f8d1 	bl	8011268 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80120c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80120cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80120d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80120d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80120dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120de:	2200      	movs	r2, #0
 80120e0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80120e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120e4:	2200      	movs	r2, #0
 80120e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80120ea:	683a      	ldr	r2, [r7, #0]
 80120ec:	68f9      	ldr	r1, [r7, #12]
 80120ee:	69b8      	ldr	r0, [r7, #24]
 80120f0:	f001 f90c 	bl	801330c <pxPortInitialiseStack>
 80120f4:	4602      	mov	r2, r0
 80120f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80120fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d002      	beq.n	8012106 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012104:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012106:	bf00      	nop
 8012108:	3720      	adds	r7, #32
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}
	...

08012110 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012110:	b580      	push	{r7, lr}
 8012112:	b082      	sub	sp, #8
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012118:	f001 fa20 	bl	801355c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801211c:	4b2d      	ldr	r3, [pc, #180]	; (80121d4 <prvAddNewTaskToReadyList+0xc4>)
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	3301      	adds	r3, #1
 8012122:	4a2c      	ldr	r2, [pc, #176]	; (80121d4 <prvAddNewTaskToReadyList+0xc4>)
 8012124:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012126:	4b2c      	ldr	r3, [pc, #176]	; (80121d8 <prvAddNewTaskToReadyList+0xc8>)
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d109      	bne.n	8012142 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801212e:	4a2a      	ldr	r2, [pc, #168]	; (80121d8 <prvAddNewTaskToReadyList+0xc8>)
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012134:	4b27      	ldr	r3, [pc, #156]	; (80121d4 <prvAddNewTaskToReadyList+0xc4>)
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	2b01      	cmp	r3, #1
 801213a:	d110      	bne.n	801215e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801213c:	f000 fc08 	bl	8012950 <prvInitialiseTaskLists>
 8012140:	e00d      	b.n	801215e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012142:	4b26      	ldr	r3, [pc, #152]	; (80121dc <prvAddNewTaskToReadyList+0xcc>)
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d109      	bne.n	801215e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801214a:	4b23      	ldr	r3, [pc, #140]	; (80121d8 <prvAddNewTaskToReadyList+0xc8>)
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012154:	429a      	cmp	r2, r3
 8012156:	d802      	bhi.n	801215e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012158:	4a1f      	ldr	r2, [pc, #124]	; (80121d8 <prvAddNewTaskToReadyList+0xc8>)
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801215e:	4b20      	ldr	r3, [pc, #128]	; (80121e0 <prvAddNewTaskToReadyList+0xd0>)
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	3301      	adds	r3, #1
 8012164:	4a1e      	ldr	r2, [pc, #120]	; (80121e0 <prvAddNewTaskToReadyList+0xd0>)
 8012166:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012168:	4b1d      	ldr	r3, [pc, #116]	; (80121e0 <prvAddNewTaskToReadyList+0xd0>)
 801216a:	681a      	ldr	r2, [r3, #0]
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012174:	4b1b      	ldr	r3, [pc, #108]	; (80121e4 <prvAddNewTaskToReadyList+0xd4>)
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	429a      	cmp	r2, r3
 801217a:	d903      	bls.n	8012184 <prvAddNewTaskToReadyList+0x74>
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012180:	4a18      	ldr	r2, [pc, #96]	; (80121e4 <prvAddNewTaskToReadyList+0xd4>)
 8012182:	6013      	str	r3, [r2, #0]
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012188:	4613      	mov	r3, r2
 801218a:	009b      	lsls	r3, r3, #2
 801218c:	4413      	add	r3, r2
 801218e:	009b      	lsls	r3, r3, #2
 8012190:	4a15      	ldr	r2, [pc, #84]	; (80121e8 <prvAddNewTaskToReadyList+0xd8>)
 8012192:	441a      	add	r2, r3
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	3304      	adds	r3, #4
 8012198:	4619      	mov	r1, r3
 801219a:	4610      	mov	r0, r2
 801219c:	f7ff f871 	bl	8011282 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80121a0:	f001 fa0a 	bl	80135b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80121a4:	4b0d      	ldr	r3, [pc, #52]	; (80121dc <prvAddNewTaskToReadyList+0xcc>)
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d00e      	beq.n	80121ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80121ac:	4b0a      	ldr	r3, [pc, #40]	; (80121d8 <prvAddNewTaskToReadyList+0xc8>)
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121b6:	429a      	cmp	r2, r3
 80121b8:	d207      	bcs.n	80121ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80121ba:	4b0c      	ldr	r3, [pc, #48]	; (80121ec <prvAddNewTaskToReadyList+0xdc>)
 80121bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121c0:	601a      	str	r2, [r3, #0]
 80121c2:	f3bf 8f4f 	dsb	sy
 80121c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80121ca:	bf00      	nop
 80121cc:	3708      	adds	r7, #8
 80121ce:	46bd      	mov	sp, r7
 80121d0:	bd80      	pop	{r7, pc}
 80121d2:	bf00      	nop
 80121d4:	20000e00 	.word	0x20000e00
 80121d8:	2000092c 	.word	0x2000092c
 80121dc:	20000e0c 	.word	0x20000e0c
 80121e0:	20000e1c 	.word	0x20000e1c
 80121e4:	20000e08 	.word	0x20000e08
 80121e8:	20000930 	.word	0x20000930
 80121ec:	e000ed04 	.word	0xe000ed04

080121f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b084      	sub	sp, #16
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80121f8:	2300      	movs	r3, #0
 80121fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d016      	beq.n	8012230 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012202:	4b13      	ldr	r3, [pc, #76]	; (8012250 <vTaskDelay+0x60>)
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d009      	beq.n	801221e <vTaskDelay+0x2e>
 801220a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801220e:	f383 8811 	msr	BASEPRI, r3
 8012212:	f3bf 8f6f 	isb	sy
 8012216:	f3bf 8f4f 	dsb	sy
 801221a:	60bb      	str	r3, [r7, #8]
 801221c:	e7fe      	b.n	801221c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 801221e:	f000 f87f 	bl	8012320 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012222:	2100      	movs	r1, #0
 8012224:	6878      	ldr	r0, [r7, #4]
 8012226:	f000 fcd7 	bl	8012bd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801222a:	f000 f887 	bl	801233c <xTaskResumeAll>
 801222e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d107      	bne.n	8012246 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8012236:	4b07      	ldr	r3, [pc, #28]	; (8012254 <vTaskDelay+0x64>)
 8012238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801223c:	601a      	str	r2, [r3, #0]
 801223e:	f3bf 8f4f 	dsb	sy
 8012242:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012246:	bf00      	nop
 8012248:	3710      	adds	r7, #16
 801224a:	46bd      	mov	sp, r7
 801224c:	bd80      	pop	{r7, pc}
 801224e:	bf00      	nop
 8012250:	20000e28 	.word	0x20000e28
 8012254:	e000ed04 	.word	0xe000ed04

08012258 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b08a      	sub	sp, #40	; 0x28
 801225c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801225e:	2300      	movs	r3, #0
 8012260:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012262:	2300      	movs	r3, #0
 8012264:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012266:	463a      	mov	r2, r7
 8012268:	1d39      	adds	r1, r7, #4
 801226a:	f107 0308 	add.w	r3, r7, #8
 801226e:	4618      	mov	r0, r3
 8012270:	f7fe ffa6 	bl	80111c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012274:	6839      	ldr	r1, [r7, #0]
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	68ba      	ldr	r2, [r7, #8]
 801227a:	9202      	str	r2, [sp, #8]
 801227c:	9301      	str	r3, [sp, #4]
 801227e:	2300      	movs	r3, #0
 8012280:	9300      	str	r3, [sp, #0]
 8012282:	2300      	movs	r3, #0
 8012284:	460a      	mov	r2, r1
 8012286:	4920      	ldr	r1, [pc, #128]	; (8012308 <vTaskStartScheduler+0xb0>)
 8012288:	4820      	ldr	r0, [pc, #128]	; (801230c <vTaskStartScheduler+0xb4>)
 801228a:	f7ff fe13 	bl	8011eb4 <xTaskCreateStatic>
 801228e:	4602      	mov	r2, r0
 8012290:	4b1f      	ldr	r3, [pc, #124]	; (8012310 <vTaskStartScheduler+0xb8>)
 8012292:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012294:	4b1e      	ldr	r3, [pc, #120]	; (8012310 <vTaskStartScheduler+0xb8>)
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d002      	beq.n	80122a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801229c:	2301      	movs	r3, #1
 801229e:	617b      	str	r3, [r7, #20]
 80122a0:	e001      	b.n	80122a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80122a2:	2300      	movs	r3, #0
 80122a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80122a6:	697b      	ldr	r3, [r7, #20]
 80122a8:	2b01      	cmp	r3, #1
 80122aa:	d102      	bne.n	80122b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80122ac:	f000 fce8 	bl	8012c80 <xTimerCreateTimerTask>
 80122b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80122b2:	697b      	ldr	r3, [r7, #20]
 80122b4:	2b01      	cmp	r3, #1
 80122b6:	d115      	bne.n	80122e4 <vTaskStartScheduler+0x8c>
 80122b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122bc:	f383 8811 	msr	BASEPRI, r3
 80122c0:	f3bf 8f6f 	isb	sy
 80122c4:	f3bf 8f4f 	dsb	sy
 80122c8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80122ca:	4b12      	ldr	r3, [pc, #72]	; (8012314 <vTaskStartScheduler+0xbc>)
 80122cc:	f04f 32ff 	mov.w	r2, #4294967295
 80122d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80122d2:	4b11      	ldr	r3, [pc, #68]	; (8012318 <vTaskStartScheduler+0xc0>)
 80122d4:	2201      	movs	r2, #1
 80122d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80122d8:	4b10      	ldr	r3, [pc, #64]	; (801231c <vTaskStartScheduler+0xc4>)
 80122da:	2200      	movs	r2, #0
 80122dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80122de:	f001 f89f 	bl	8013420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80122e2:	e00d      	b.n	8012300 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80122e4:	697b      	ldr	r3, [r7, #20]
 80122e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122ea:	d109      	bne.n	8012300 <vTaskStartScheduler+0xa8>
 80122ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122f0:	f383 8811 	msr	BASEPRI, r3
 80122f4:	f3bf 8f6f 	isb	sy
 80122f8:	f3bf 8f4f 	dsb	sy
 80122fc:	60fb      	str	r3, [r7, #12]
 80122fe:	e7fe      	b.n	80122fe <vTaskStartScheduler+0xa6>
}
 8012300:	bf00      	nop
 8012302:	3718      	adds	r7, #24
 8012304:	46bd      	mov	sp, r7
 8012306:	bd80      	pop	{r7, pc}
 8012308:	08014ad8 	.word	0x08014ad8
 801230c:	08012921 	.word	0x08012921
 8012310:	20000e24 	.word	0x20000e24
 8012314:	20000e20 	.word	0x20000e20
 8012318:	20000e0c 	.word	0x20000e0c
 801231c:	20000e04 	.word	0x20000e04

08012320 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012320:	b480      	push	{r7}
 8012322:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012324:	4b04      	ldr	r3, [pc, #16]	; (8012338 <vTaskSuspendAll+0x18>)
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	3301      	adds	r3, #1
 801232a:	4a03      	ldr	r2, [pc, #12]	; (8012338 <vTaskSuspendAll+0x18>)
 801232c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801232e:	bf00      	nop
 8012330:	46bd      	mov	sp, r7
 8012332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012336:	4770      	bx	lr
 8012338:	20000e28 	.word	0x20000e28

0801233c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b084      	sub	sp, #16
 8012340:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012342:	2300      	movs	r3, #0
 8012344:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012346:	2300      	movs	r3, #0
 8012348:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801234a:	4b41      	ldr	r3, [pc, #260]	; (8012450 <xTaskResumeAll+0x114>)
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d109      	bne.n	8012366 <xTaskResumeAll+0x2a>
 8012352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012356:	f383 8811 	msr	BASEPRI, r3
 801235a:	f3bf 8f6f 	isb	sy
 801235e:	f3bf 8f4f 	dsb	sy
 8012362:	603b      	str	r3, [r7, #0]
 8012364:	e7fe      	b.n	8012364 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012366:	f001 f8f9 	bl	801355c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801236a:	4b39      	ldr	r3, [pc, #228]	; (8012450 <xTaskResumeAll+0x114>)
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	3b01      	subs	r3, #1
 8012370:	4a37      	ldr	r2, [pc, #220]	; (8012450 <xTaskResumeAll+0x114>)
 8012372:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012374:	4b36      	ldr	r3, [pc, #216]	; (8012450 <xTaskResumeAll+0x114>)
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d162      	bne.n	8012442 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801237c:	4b35      	ldr	r3, [pc, #212]	; (8012454 <xTaskResumeAll+0x118>)
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	2b00      	cmp	r3, #0
 8012382:	d05e      	beq.n	8012442 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012384:	e02f      	b.n	80123e6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012386:	4b34      	ldr	r3, [pc, #208]	; (8012458 <xTaskResumeAll+0x11c>)
 8012388:	68db      	ldr	r3, [r3, #12]
 801238a:	68db      	ldr	r3, [r3, #12]
 801238c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	3318      	adds	r3, #24
 8012392:	4618      	mov	r0, r3
 8012394:	f7fe ffd2 	bl	801133c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	3304      	adds	r3, #4
 801239c:	4618      	mov	r0, r3
 801239e:	f7fe ffcd 	bl	801133c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123a6:	4b2d      	ldr	r3, [pc, #180]	; (801245c <xTaskResumeAll+0x120>)
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	429a      	cmp	r2, r3
 80123ac:	d903      	bls.n	80123b6 <xTaskResumeAll+0x7a>
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123b2:	4a2a      	ldr	r2, [pc, #168]	; (801245c <xTaskResumeAll+0x120>)
 80123b4:	6013      	str	r3, [r2, #0]
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123ba:	4613      	mov	r3, r2
 80123bc:	009b      	lsls	r3, r3, #2
 80123be:	4413      	add	r3, r2
 80123c0:	009b      	lsls	r3, r3, #2
 80123c2:	4a27      	ldr	r2, [pc, #156]	; (8012460 <xTaskResumeAll+0x124>)
 80123c4:	441a      	add	r2, r3
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	3304      	adds	r3, #4
 80123ca:	4619      	mov	r1, r3
 80123cc:	4610      	mov	r0, r2
 80123ce:	f7fe ff58 	bl	8011282 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123d6:	4b23      	ldr	r3, [pc, #140]	; (8012464 <xTaskResumeAll+0x128>)
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123dc:	429a      	cmp	r2, r3
 80123de:	d302      	bcc.n	80123e6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80123e0:	4b21      	ldr	r3, [pc, #132]	; (8012468 <xTaskResumeAll+0x12c>)
 80123e2:	2201      	movs	r2, #1
 80123e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80123e6:	4b1c      	ldr	r3, [pc, #112]	; (8012458 <xTaskResumeAll+0x11c>)
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d1cb      	bne.n	8012386 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d001      	beq.n	80123f8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80123f4:	f000 fb46 	bl	8012a84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80123f8:	4b1c      	ldr	r3, [pc, #112]	; (801246c <xTaskResumeAll+0x130>)
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d010      	beq.n	8012426 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012404:	f000 f846 	bl	8012494 <xTaskIncrementTick>
 8012408:	4603      	mov	r3, r0
 801240a:	2b00      	cmp	r3, #0
 801240c:	d002      	beq.n	8012414 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801240e:	4b16      	ldr	r3, [pc, #88]	; (8012468 <xTaskResumeAll+0x12c>)
 8012410:	2201      	movs	r2, #1
 8012412:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	3b01      	subs	r3, #1
 8012418:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d1f1      	bne.n	8012404 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8012420:	4b12      	ldr	r3, [pc, #72]	; (801246c <xTaskResumeAll+0x130>)
 8012422:	2200      	movs	r2, #0
 8012424:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012426:	4b10      	ldr	r3, [pc, #64]	; (8012468 <xTaskResumeAll+0x12c>)
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d009      	beq.n	8012442 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801242e:	2301      	movs	r3, #1
 8012430:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012432:	4b0f      	ldr	r3, [pc, #60]	; (8012470 <xTaskResumeAll+0x134>)
 8012434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012438:	601a      	str	r2, [r3, #0]
 801243a:	f3bf 8f4f 	dsb	sy
 801243e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012442:	f001 f8b9 	bl	80135b8 <vPortExitCritical>

	return xAlreadyYielded;
 8012446:	68bb      	ldr	r3, [r7, #8]
}
 8012448:	4618      	mov	r0, r3
 801244a:	3710      	adds	r7, #16
 801244c:	46bd      	mov	sp, r7
 801244e:	bd80      	pop	{r7, pc}
 8012450:	20000e28 	.word	0x20000e28
 8012454:	20000e00 	.word	0x20000e00
 8012458:	20000dc0 	.word	0x20000dc0
 801245c:	20000e08 	.word	0x20000e08
 8012460:	20000930 	.word	0x20000930
 8012464:	2000092c 	.word	0x2000092c
 8012468:	20000e14 	.word	0x20000e14
 801246c:	20000e10 	.word	0x20000e10
 8012470:	e000ed04 	.word	0xe000ed04

08012474 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012474:	b480      	push	{r7}
 8012476:	b083      	sub	sp, #12
 8012478:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801247a:	4b05      	ldr	r3, [pc, #20]	; (8012490 <xTaskGetTickCount+0x1c>)
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012480:	687b      	ldr	r3, [r7, #4]
}
 8012482:	4618      	mov	r0, r3
 8012484:	370c      	adds	r7, #12
 8012486:	46bd      	mov	sp, r7
 8012488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248c:	4770      	bx	lr
 801248e:	bf00      	nop
 8012490:	20000e04 	.word	0x20000e04

08012494 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b086      	sub	sp, #24
 8012498:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801249a:	2300      	movs	r3, #0
 801249c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801249e:	4b4e      	ldr	r3, [pc, #312]	; (80125d8 <xTaskIncrementTick+0x144>)
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	f040 8088 	bne.w	80125b8 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80124a8:	4b4c      	ldr	r3, [pc, #304]	; (80125dc <xTaskIncrementTick+0x148>)
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	3301      	adds	r3, #1
 80124ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80124b0:	4a4a      	ldr	r2, [pc, #296]	; (80125dc <xTaskIncrementTick+0x148>)
 80124b2:	693b      	ldr	r3, [r7, #16]
 80124b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80124b6:	693b      	ldr	r3, [r7, #16]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d11f      	bne.n	80124fc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80124bc:	4b48      	ldr	r3, [pc, #288]	; (80125e0 <xTaskIncrementTick+0x14c>)
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d009      	beq.n	80124da <xTaskIncrementTick+0x46>
 80124c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124ca:	f383 8811 	msr	BASEPRI, r3
 80124ce:	f3bf 8f6f 	isb	sy
 80124d2:	f3bf 8f4f 	dsb	sy
 80124d6:	603b      	str	r3, [r7, #0]
 80124d8:	e7fe      	b.n	80124d8 <xTaskIncrementTick+0x44>
 80124da:	4b41      	ldr	r3, [pc, #260]	; (80125e0 <xTaskIncrementTick+0x14c>)
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	60fb      	str	r3, [r7, #12]
 80124e0:	4b40      	ldr	r3, [pc, #256]	; (80125e4 <xTaskIncrementTick+0x150>)
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	4a3e      	ldr	r2, [pc, #248]	; (80125e0 <xTaskIncrementTick+0x14c>)
 80124e6:	6013      	str	r3, [r2, #0]
 80124e8:	4a3e      	ldr	r2, [pc, #248]	; (80125e4 <xTaskIncrementTick+0x150>)
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	6013      	str	r3, [r2, #0]
 80124ee:	4b3e      	ldr	r3, [pc, #248]	; (80125e8 <xTaskIncrementTick+0x154>)
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	3301      	adds	r3, #1
 80124f4:	4a3c      	ldr	r2, [pc, #240]	; (80125e8 <xTaskIncrementTick+0x154>)
 80124f6:	6013      	str	r3, [r2, #0]
 80124f8:	f000 fac4 	bl	8012a84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80124fc:	4b3b      	ldr	r3, [pc, #236]	; (80125ec <xTaskIncrementTick+0x158>)
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	693a      	ldr	r2, [r7, #16]
 8012502:	429a      	cmp	r2, r3
 8012504:	d349      	bcc.n	801259a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012506:	4b36      	ldr	r3, [pc, #216]	; (80125e0 <xTaskIncrementTick+0x14c>)
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d104      	bne.n	801251a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012510:	4b36      	ldr	r3, [pc, #216]	; (80125ec <xTaskIncrementTick+0x158>)
 8012512:	f04f 32ff 	mov.w	r2, #4294967295
 8012516:	601a      	str	r2, [r3, #0]
					break;
 8012518:	e03f      	b.n	801259a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801251a:	4b31      	ldr	r3, [pc, #196]	; (80125e0 <xTaskIncrementTick+0x14c>)
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	68db      	ldr	r3, [r3, #12]
 8012520:	68db      	ldr	r3, [r3, #12]
 8012522:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012524:	68bb      	ldr	r3, [r7, #8]
 8012526:	685b      	ldr	r3, [r3, #4]
 8012528:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801252a:	693a      	ldr	r2, [r7, #16]
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	429a      	cmp	r2, r3
 8012530:	d203      	bcs.n	801253a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012532:	4a2e      	ldr	r2, [pc, #184]	; (80125ec <xTaskIncrementTick+0x158>)
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012538:	e02f      	b.n	801259a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801253a:	68bb      	ldr	r3, [r7, #8]
 801253c:	3304      	adds	r3, #4
 801253e:	4618      	mov	r0, r3
 8012540:	f7fe fefc 	bl	801133c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012544:	68bb      	ldr	r3, [r7, #8]
 8012546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012548:	2b00      	cmp	r3, #0
 801254a:	d004      	beq.n	8012556 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801254c:	68bb      	ldr	r3, [r7, #8]
 801254e:	3318      	adds	r3, #24
 8012550:	4618      	mov	r0, r3
 8012552:	f7fe fef3 	bl	801133c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012556:	68bb      	ldr	r3, [r7, #8]
 8012558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801255a:	4b25      	ldr	r3, [pc, #148]	; (80125f0 <xTaskIncrementTick+0x15c>)
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	429a      	cmp	r2, r3
 8012560:	d903      	bls.n	801256a <xTaskIncrementTick+0xd6>
 8012562:	68bb      	ldr	r3, [r7, #8]
 8012564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012566:	4a22      	ldr	r2, [pc, #136]	; (80125f0 <xTaskIncrementTick+0x15c>)
 8012568:	6013      	str	r3, [r2, #0]
 801256a:	68bb      	ldr	r3, [r7, #8]
 801256c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801256e:	4613      	mov	r3, r2
 8012570:	009b      	lsls	r3, r3, #2
 8012572:	4413      	add	r3, r2
 8012574:	009b      	lsls	r3, r3, #2
 8012576:	4a1f      	ldr	r2, [pc, #124]	; (80125f4 <xTaskIncrementTick+0x160>)
 8012578:	441a      	add	r2, r3
 801257a:	68bb      	ldr	r3, [r7, #8]
 801257c:	3304      	adds	r3, #4
 801257e:	4619      	mov	r1, r3
 8012580:	4610      	mov	r0, r2
 8012582:	f7fe fe7e 	bl	8011282 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012586:	68bb      	ldr	r3, [r7, #8]
 8012588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801258a:	4b1b      	ldr	r3, [pc, #108]	; (80125f8 <xTaskIncrementTick+0x164>)
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012590:	429a      	cmp	r2, r3
 8012592:	d3b8      	bcc.n	8012506 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8012594:	2301      	movs	r3, #1
 8012596:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012598:	e7b5      	b.n	8012506 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801259a:	4b17      	ldr	r3, [pc, #92]	; (80125f8 <xTaskIncrementTick+0x164>)
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125a0:	4914      	ldr	r1, [pc, #80]	; (80125f4 <xTaskIncrementTick+0x160>)
 80125a2:	4613      	mov	r3, r2
 80125a4:	009b      	lsls	r3, r3, #2
 80125a6:	4413      	add	r3, r2
 80125a8:	009b      	lsls	r3, r3, #2
 80125aa:	440b      	add	r3, r1
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	2b01      	cmp	r3, #1
 80125b0:	d907      	bls.n	80125c2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80125b2:	2301      	movs	r3, #1
 80125b4:	617b      	str	r3, [r7, #20]
 80125b6:	e004      	b.n	80125c2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80125b8:	4b10      	ldr	r3, [pc, #64]	; (80125fc <xTaskIncrementTick+0x168>)
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	3301      	adds	r3, #1
 80125be:	4a0f      	ldr	r2, [pc, #60]	; (80125fc <xTaskIncrementTick+0x168>)
 80125c0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80125c2:	4b0f      	ldr	r3, [pc, #60]	; (8012600 <xTaskIncrementTick+0x16c>)
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d001      	beq.n	80125ce <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80125ca:	2301      	movs	r3, #1
 80125cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80125ce:	697b      	ldr	r3, [r7, #20]
}
 80125d0:	4618      	mov	r0, r3
 80125d2:	3718      	adds	r7, #24
 80125d4:	46bd      	mov	sp, r7
 80125d6:	bd80      	pop	{r7, pc}
 80125d8:	20000e28 	.word	0x20000e28
 80125dc:	20000e04 	.word	0x20000e04
 80125e0:	20000db8 	.word	0x20000db8
 80125e4:	20000dbc 	.word	0x20000dbc
 80125e8:	20000e18 	.word	0x20000e18
 80125ec:	20000e20 	.word	0x20000e20
 80125f0:	20000e08 	.word	0x20000e08
 80125f4:	20000930 	.word	0x20000930
 80125f8:	2000092c 	.word	0x2000092c
 80125fc:	20000e10 	.word	0x20000e10
 8012600:	20000e14 	.word	0x20000e14

08012604 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012604:	b480      	push	{r7}
 8012606:	b085      	sub	sp, #20
 8012608:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801260a:	4b27      	ldr	r3, [pc, #156]	; (80126a8 <vTaskSwitchContext+0xa4>)
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d003      	beq.n	801261a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012612:	4b26      	ldr	r3, [pc, #152]	; (80126ac <vTaskSwitchContext+0xa8>)
 8012614:	2201      	movs	r2, #1
 8012616:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012618:	e040      	b.n	801269c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 801261a:	4b24      	ldr	r3, [pc, #144]	; (80126ac <vTaskSwitchContext+0xa8>)
 801261c:	2200      	movs	r2, #0
 801261e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012620:	4b23      	ldr	r3, [pc, #140]	; (80126b0 <vTaskSwitchContext+0xac>)
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	60fb      	str	r3, [r7, #12]
 8012626:	e00f      	b.n	8012648 <vTaskSwitchContext+0x44>
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d109      	bne.n	8012642 <vTaskSwitchContext+0x3e>
 801262e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012632:	f383 8811 	msr	BASEPRI, r3
 8012636:	f3bf 8f6f 	isb	sy
 801263a:	f3bf 8f4f 	dsb	sy
 801263e:	607b      	str	r3, [r7, #4]
 8012640:	e7fe      	b.n	8012640 <vTaskSwitchContext+0x3c>
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	3b01      	subs	r3, #1
 8012646:	60fb      	str	r3, [r7, #12]
 8012648:	491a      	ldr	r1, [pc, #104]	; (80126b4 <vTaskSwitchContext+0xb0>)
 801264a:	68fa      	ldr	r2, [r7, #12]
 801264c:	4613      	mov	r3, r2
 801264e:	009b      	lsls	r3, r3, #2
 8012650:	4413      	add	r3, r2
 8012652:	009b      	lsls	r3, r3, #2
 8012654:	440b      	add	r3, r1
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d0e5      	beq.n	8012628 <vTaskSwitchContext+0x24>
 801265c:	68fa      	ldr	r2, [r7, #12]
 801265e:	4613      	mov	r3, r2
 8012660:	009b      	lsls	r3, r3, #2
 8012662:	4413      	add	r3, r2
 8012664:	009b      	lsls	r3, r3, #2
 8012666:	4a13      	ldr	r2, [pc, #76]	; (80126b4 <vTaskSwitchContext+0xb0>)
 8012668:	4413      	add	r3, r2
 801266a:	60bb      	str	r3, [r7, #8]
 801266c:	68bb      	ldr	r3, [r7, #8]
 801266e:	685b      	ldr	r3, [r3, #4]
 8012670:	685a      	ldr	r2, [r3, #4]
 8012672:	68bb      	ldr	r3, [r7, #8]
 8012674:	605a      	str	r2, [r3, #4]
 8012676:	68bb      	ldr	r3, [r7, #8]
 8012678:	685a      	ldr	r2, [r3, #4]
 801267a:	68bb      	ldr	r3, [r7, #8]
 801267c:	3308      	adds	r3, #8
 801267e:	429a      	cmp	r2, r3
 8012680:	d104      	bne.n	801268c <vTaskSwitchContext+0x88>
 8012682:	68bb      	ldr	r3, [r7, #8]
 8012684:	685b      	ldr	r3, [r3, #4]
 8012686:	685a      	ldr	r2, [r3, #4]
 8012688:	68bb      	ldr	r3, [r7, #8]
 801268a:	605a      	str	r2, [r3, #4]
 801268c:	68bb      	ldr	r3, [r7, #8]
 801268e:	685b      	ldr	r3, [r3, #4]
 8012690:	68db      	ldr	r3, [r3, #12]
 8012692:	4a09      	ldr	r2, [pc, #36]	; (80126b8 <vTaskSwitchContext+0xb4>)
 8012694:	6013      	str	r3, [r2, #0]
 8012696:	4a06      	ldr	r2, [pc, #24]	; (80126b0 <vTaskSwitchContext+0xac>)
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	6013      	str	r3, [r2, #0]
}
 801269c:	bf00      	nop
 801269e:	3714      	adds	r7, #20
 80126a0:	46bd      	mov	sp, r7
 80126a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a6:	4770      	bx	lr
 80126a8:	20000e28 	.word	0x20000e28
 80126ac:	20000e14 	.word	0x20000e14
 80126b0:	20000e08 	.word	0x20000e08
 80126b4:	20000930 	.word	0x20000930
 80126b8:	2000092c 	.word	0x2000092c

080126bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b084      	sub	sp, #16
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
 80126c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d109      	bne.n	80126e0 <vTaskPlaceOnEventList+0x24>
 80126cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126d0:	f383 8811 	msr	BASEPRI, r3
 80126d4:	f3bf 8f6f 	isb	sy
 80126d8:	f3bf 8f4f 	dsb	sy
 80126dc:	60fb      	str	r3, [r7, #12]
 80126de:	e7fe      	b.n	80126de <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80126e0:	4b07      	ldr	r3, [pc, #28]	; (8012700 <vTaskPlaceOnEventList+0x44>)
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	3318      	adds	r3, #24
 80126e6:	4619      	mov	r1, r3
 80126e8:	6878      	ldr	r0, [r7, #4]
 80126ea:	f7fe fdee 	bl	80112ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80126ee:	2101      	movs	r1, #1
 80126f0:	6838      	ldr	r0, [r7, #0]
 80126f2:	f000 fa71 	bl	8012bd8 <prvAddCurrentTaskToDelayedList>
}
 80126f6:	bf00      	nop
 80126f8:	3710      	adds	r7, #16
 80126fa:	46bd      	mov	sp, r7
 80126fc:	bd80      	pop	{r7, pc}
 80126fe:	bf00      	nop
 8012700:	2000092c 	.word	0x2000092c

08012704 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012704:	b580      	push	{r7, lr}
 8012706:	b086      	sub	sp, #24
 8012708:	af00      	add	r7, sp, #0
 801270a:	60f8      	str	r0, [r7, #12]
 801270c:	60b9      	str	r1, [r7, #8]
 801270e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d109      	bne.n	801272a <vTaskPlaceOnEventListRestricted+0x26>
 8012716:	f04f 0350 	mov.w	r3, #80	; 0x50
 801271a:	f383 8811 	msr	BASEPRI, r3
 801271e:	f3bf 8f6f 	isb	sy
 8012722:	f3bf 8f4f 	dsb	sy
 8012726:	617b      	str	r3, [r7, #20]
 8012728:	e7fe      	b.n	8012728 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801272a:	4b0a      	ldr	r3, [pc, #40]	; (8012754 <vTaskPlaceOnEventListRestricted+0x50>)
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	3318      	adds	r3, #24
 8012730:	4619      	mov	r1, r3
 8012732:	68f8      	ldr	r0, [r7, #12]
 8012734:	f7fe fda5 	bl	8011282 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d002      	beq.n	8012744 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 801273e:	f04f 33ff 	mov.w	r3, #4294967295
 8012742:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012744:	6879      	ldr	r1, [r7, #4]
 8012746:	68b8      	ldr	r0, [r7, #8]
 8012748:	f000 fa46 	bl	8012bd8 <prvAddCurrentTaskToDelayedList>
	}
 801274c:	bf00      	nop
 801274e:	3718      	adds	r7, #24
 8012750:	46bd      	mov	sp, r7
 8012752:	bd80      	pop	{r7, pc}
 8012754:	2000092c 	.word	0x2000092c

08012758 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b086      	sub	sp, #24
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	68db      	ldr	r3, [r3, #12]
 8012764:	68db      	ldr	r3, [r3, #12]
 8012766:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012768:	693b      	ldr	r3, [r7, #16]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d109      	bne.n	8012782 <xTaskRemoveFromEventList+0x2a>
 801276e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012772:	f383 8811 	msr	BASEPRI, r3
 8012776:	f3bf 8f6f 	isb	sy
 801277a:	f3bf 8f4f 	dsb	sy
 801277e:	60fb      	str	r3, [r7, #12]
 8012780:	e7fe      	b.n	8012780 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012782:	693b      	ldr	r3, [r7, #16]
 8012784:	3318      	adds	r3, #24
 8012786:	4618      	mov	r0, r3
 8012788:	f7fe fdd8 	bl	801133c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801278c:	4b1d      	ldr	r3, [pc, #116]	; (8012804 <xTaskRemoveFromEventList+0xac>)
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d11d      	bne.n	80127d0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012794:	693b      	ldr	r3, [r7, #16]
 8012796:	3304      	adds	r3, #4
 8012798:	4618      	mov	r0, r3
 801279a:	f7fe fdcf 	bl	801133c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801279e:	693b      	ldr	r3, [r7, #16]
 80127a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127a2:	4b19      	ldr	r3, [pc, #100]	; (8012808 <xTaskRemoveFromEventList+0xb0>)
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	429a      	cmp	r2, r3
 80127a8:	d903      	bls.n	80127b2 <xTaskRemoveFromEventList+0x5a>
 80127aa:	693b      	ldr	r3, [r7, #16]
 80127ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127ae:	4a16      	ldr	r2, [pc, #88]	; (8012808 <xTaskRemoveFromEventList+0xb0>)
 80127b0:	6013      	str	r3, [r2, #0]
 80127b2:	693b      	ldr	r3, [r7, #16]
 80127b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127b6:	4613      	mov	r3, r2
 80127b8:	009b      	lsls	r3, r3, #2
 80127ba:	4413      	add	r3, r2
 80127bc:	009b      	lsls	r3, r3, #2
 80127be:	4a13      	ldr	r2, [pc, #76]	; (801280c <xTaskRemoveFromEventList+0xb4>)
 80127c0:	441a      	add	r2, r3
 80127c2:	693b      	ldr	r3, [r7, #16]
 80127c4:	3304      	adds	r3, #4
 80127c6:	4619      	mov	r1, r3
 80127c8:	4610      	mov	r0, r2
 80127ca:	f7fe fd5a 	bl	8011282 <vListInsertEnd>
 80127ce:	e005      	b.n	80127dc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80127d0:	693b      	ldr	r3, [r7, #16]
 80127d2:	3318      	adds	r3, #24
 80127d4:	4619      	mov	r1, r3
 80127d6:	480e      	ldr	r0, [pc, #56]	; (8012810 <xTaskRemoveFromEventList+0xb8>)
 80127d8:	f7fe fd53 	bl	8011282 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80127dc:	693b      	ldr	r3, [r7, #16]
 80127de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127e0:	4b0c      	ldr	r3, [pc, #48]	; (8012814 <xTaskRemoveFromEventList+0xbc>)
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127e6:	429a      	cmp	r2, r3
 80127e8:	d905      	bls.n	80127f6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80127ea:	2301      	movs	r3, #1
 80127ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80127ee:	4b0a      	ldr	r3, [pc, #40]	; (8012818 <xTaskRemoveFromEventList+0xc0>)
 80127f0:	2201      	movs	r2, #1
 80127f2:	601a      	str	r2, [r3, #0]
 80127f4:	e001      	b.n	80127fa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80127f6:	2300      	movs	r3, #0
 80127f8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80127fa:	697b      	ldr	r3, [r7, #20]
}
 80127fc:	4618      	mov	r0, r3
 80127fe:	3718      	adds	r7, #24
 8012800:	46bd      	mov	sp, r7
 8012802:	bd80      	pop	{r7, pc}
 8012804:	20000e28 	.word	0x20000e28
 8012808:	20000e08 	.word	0x20000e08
 801280c:	20000930 	.word	0x20000930
 8012810:	20000dc0 	.word	0x20000dc0
 8012814:	2000092c 	.word	0x2000092c
 8012818:	20000e14 	.word	0x20000e14

0801281c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801281c:	b480      	push	{r7}
 801281e:	b083      	sub	sp, #12
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012824:	4b06      	ldr	r3, [pc, #24]	; (8012840 <vTaskInternalSetTimeOutState+0x24>)
 8012826:	681a      	ldr	r2, [r3, #0]
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801282c:	4b05      	ldr	r3, [pc, #20]	; (8012844 <vTaskInternalSetTimeOutState+0x28>)
 801282e:	681a      	ldr	r2, [r3, #0]
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	605a      	str	r2, [r3, #4]
}
 8012834:	bf00      	nop
 8012836:	370c      	adds	r7, #12
 8012838:	46bd      	mov	sp, r7
 801283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801283e:	4770      	bx	lr
 8012840:	20000e18 	.word	0x20000e18
 8012844:	20000e04 	.word	0x20000e04

08012848 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012848:	b580      	push	{r7, lr}
 801284a:	b088      	sub	sp, #32
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]
 8012850:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d109      	bne.n	801286c <xTaskCheckForTimeOut+0x24>
 8012858:	f04f 0350 	mov.w	r3, #80	; 0x50
 801285c:	f383 8811 	msr	BASEPRI, r3
 8012860:	f3bf 8f6f 	isb	sy
 8012864:	f3bf 8f4f 	dsb	sy
 8012868:	613b      	str	r3, [r7, #16]
 801286a:	e7fe      	b.n	801286a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 801286c:	683b      	ldr	r3, [r7, #0]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d109      	bne.n	8012886 <xTaskCheckForTimeOut+0x3e>
 8012872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012876:	f383 8811 	msr	BASEPRI, r3
 801287a:	f3bf 8f6f 	isb	sy
 801287e:	f3bf 8f4f 	dsb	sy
 8012882:	60fb      	str	r3, [r7, #12]
 8012884:	e7fe      	b.n	8012884 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8012886:	f000 fe69 	bl	801355c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801288a:	4b1d      	ldr	r3, [pc, #116]	; (8012900 <xTaskCheckForTimeOut+0xb8>)
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	685b      	ldr	r3, [r3, #4]
 8012894:	69ba      	ldr	r2, [r7, #24]
 8012896:	1ad3      	subs	r3, r2, r3
 8012898:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801289a:	683b      	ldr	r3, [r7, #0]
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128a2:	d102      	bne.n	80128aa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80128a4:	2300      	movs	r3, #0
 80128a6:	61fb      	str	r3, [r7, #28]
 80128a8:	e023      	b.n	80128f2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	681a      	ldr	r2, [r3, #0]
 80128ae:	4b15      	ldr	r3, [pc, #84]	; (8012904 <xTaskCheckForTimeOut+0xbc>)
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	429a      	cmp	r2, r3
 80128b4:	d007      	beq.n	80128c6 <xTaskCheckForTimeOut+0x7e>
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	685b      	ldr	r3, [r3, #4]
 80128ba:	69ba      	ldr	r2, [r7, #24]
 80128bc:	429a      	cmp	r2, r3
 80128be:	d302      	bcc.n	80128c6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80128c0:	2301      	movs	r3, #1
 80128c2:	61fb      	str	r3, [r7, #28]
 80128c4:	e015      	b.n	80128f2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80128c6:	683b      	ldr	r3, [r7, #0]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	697a      	ldr	r2, [r7, #20]
 80128cc:	429a      	cmp	r2, r3
 80128ce:	d20b      	bcs.n	80128e8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80128d0:	683b      	ldr	r3, [r7, #0]
 80128d2:	681a      	ldr	r2, [r3, #0]
 80128d4:	697b      	ldr	r3, [r7, #20]
 80128d6:	1ad2      	subs	r2, r2, r3
 80128d8:	683b      	ldr	r3, [r7, #0]
 80128da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80128dc:	6878      	ldr	r0, [r7, #4]
 80128de:	f7ff ff9d 	bl	801281c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80128e2:	2300      	movs	r3, #0
 80128e4:	61fb      	str	r3, [r7, #28]
 80128e6:	e004      	b.n	80128f2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80128e8:	683b      	ldr	r3, [r7, #0]
 80128ea:	2200      	movs	r2, #0
 80128ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80128ee:	2301      	movs	r3, #1
 80128f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80128f2:	f000 fe61 	bl	80135b8 <vPortExitCritical>

	return xReturn;
 80128f6:	69fb      	ldr	r3, [r7, #28]
}
 80128f8:	4618      	mov	r0, r3
 80128fa:	3720      	adds	r7, #32
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}
 8012900:	20000e04 	.word	0x20000e04
 8012904:	20000e18 	.word	0x20000e18

08012908 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012908:	b480      	push	{r7}
 801290a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801290c:	4b03      	ldr	r3, [pc, #12]	; (801291c <vTaskMissedYield+0x14>)
 801290e:	2201      	movs	r2, #1
 8012910:	601a      	str	r2, [r3, #0]
}
 8012912:	bf00      	nop
 8012914:	46bd      	mov	sp, r7
 8012916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291a:	4770      	bx	lr
 801291c:	20000e14 	.word	0x20000e14

08012920 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012920:	b580      	push	{r7, lr}
 8012922:	b082      	sub	sp, #8
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012928:	f000 f852 	bl	80129d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801292c:	4b06      	ldr	r3, [pc, #24]	; (8012948 <prvIdleTask+0x28>)
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	2b01      	cmp	r3, #1
 8012932:	d9f9      	bls.n	8012928 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012934:	4b05      	ldr	r3, [pc, #20]	; (801294c <prvIdleTask+0x2c>)
 8012936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801293a:	601a      	str	r2, [r3, #0]
 801293c:	f3bf 8f4f 	dsb	sy
 8012940:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012944:	e7f0      	b.n	8012928 <prvIdleTask+0x8>
 8012946:	bf00      	nop
 8012948:	20000930 	.word	0x20000930
 801294c:	e000ed04 	.word	0xe000ed04

08012950 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b082      	sub	sp, #8
 8012954:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012956:	2300      	movs	r3, #0
 8012958:	607b      	str	r3, [r7, #4]
 801295a:	e00c      	b.n	8012976 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801295c:	687a      	ldr	r2, [r7, #4]
 801295e:	4613      	mov	r3, r2
 8012960:	009b      	lsls	r3, r3, #2
 8012962:	4413      	add	r3, r2
 8012964:	009b      	lsls	r3, r3, #2
 8012966:	4a12      	ldr	r2, [pc, #72]	; (80129b0 <prvInitialiseTaskLists+0x60>)
 8012968:	4413      	add	r3, r2
 801296a:	4618      	mov	r0, r3
 801296c:	f7fe fc5c 	bl	8011228 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	3301      	adds	r3, #1
 8012974:	607b      	str	r3, [r7, #4]
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	2b37      	cmp	r3, #55	; 0x37
 801297a:	d9ef      	bls.n	801295c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801297c:	480d      	ldr	r0, [pc, #52]	; (80129b4 <prvInitialiseTaskLists+0x64>)
 801297e:	f7fe fc53 	bl	8011228 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012982:	480d      	ldr	r0, [pc, #52]	; (80129b8 <prvInitialiseTaskLists+0x68>)
 8012984:	f7fe fc50 	bl	8011228 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012988:	480c      	ldr	r0, [pc, #48]	; (80129bc <prvInitialiseTaskLists+0x6c>)
 801298a:	f7fe fc4d 	bl	8011228 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801298e:	480c      	ldr	r0, [pc, #48]	; (80129c0 <prvInitialiseTaskLists+0x70>)
 8012990:	f7fe fc4a 	bl	8011228 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012994:	480b      	ldr	r0, [pc, #44]	; (80129c4 <prvInitialiseTaskLists+0x74>)
 8012996:	f7fe fc47 	bl	8011228 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801299a:	4b0b      	ldr	r3, [pc, #44]	; (80129c8 <prvInitialiseTaskLists+0x78>)
 801299c:	4a05      	ldr	r2, [pc, #20]	; (80129b4 <prvInitialiseTaskLists+0x64>)
 801299e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80129a0:	4b0a      	ldr	r3, [pc, #40]	; (80129cc <prvInitialiseTaskLists+0x7c>)
 80129a2:	4a05      	ldr	r2, [pc, #20]	; (80129b8 <prvInitialiseTaskLists+0x68>)
 80129a4:	601a      	str	r2, [r3, #0]
}
 80129a6:	bf00      	nop
 80129a8:	3708      	adds	r7, #8
 80129aa:	46bd      	mov	sp, r7
 80129ac:	bd80      	pop	{r7, pc}
 80129ae:	bf00      	nop
 80129b0:	20000930 	.word	0x20000930
 80129b4:	20000d90 	.word	0x20000d90
 80129b8:	20000da4 	.word	0x20000da4
 80129bc:	20000dc0 	.word	0x20000dc0
 80129c0:	20000dd4 	.word	0x20000dd4
 80129c4:	20000dec 	.word	0x20000dec
 80129c8:	20000db8 	.word	0x20000db8
 80129cc:	20000dbc 	.word	0x20000dbc

080129d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b082      	sub	sp, #8
 80129d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80129d6:	e019      	b.n	8012a0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80129d8:	f000 fdc0 	bl	801355c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80129dc:	4b0f      	ldr	r3, [pc, #60]	; (8012a1c <prvCheckTasksWaitingTermination+0x4c>)
 80129de:	68db      	ldr	r3, [r3, #12]
 80129e0:	68db      	ldr	r3, [r3, #12]
 80129e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	3304      	adds	r3, #4
 80129e8:	4618      	mov	r0, r3
 80129ea:	f7fe fca7 	bl	801133c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80129ee:	4b0c      	ldr	r3, [pc, #48]	; (8012a20 <prvCheckTasksWaitingTermination+0x50>)
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	3b01      	subs	r3, #1
 80129f4:	4a0a      	ldr	r2, [pc, #40]	; (8012a20 <prvCheckTasksWaitingTermination+0x50>)
 80129f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80129f8:	4b0a      	ldr	r3, [pc, #40]	; (8012a24 <prvCheckTasksWaitingTermination+0x54>)
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	3b01      	subs	r3, #1
 80129fe:	4a09      	ldr	r2, [pc, #36]	; (8012a24 <prvCheckTasksWaitingTermination+0x54>)
 8012a00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012a02:	f000 fdd9 	bl	80135b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012a06:	6878      	ldr	r0, [r7, #4]
 8012a08:	f000 f80e 	bl	8012a28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012a0c:	4b05      	ldr	r3, [pc, #20]	; (8012a24 <prvCheckTasksWaitingTermination+0x54>)
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d1e1      	bne.n	80129d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012a14:	bf00      	nop
 8012a16:	3708      	adds	r7, #8
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	bd80      	pop	{r7, pc}
 8012a1c:	20000dd4 	.word	0x20000dd4
 8012a20:	20000e00 	.word	0x20000e00
 8012a24:	20000de8 	.word	0x20000de8

08012a28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b084      	sub	sp, #16
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d108      	bne.n	8012a4c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a3e:	4618      	mov	r0, r3
 8012a40:	f000 ff68 	bl	8013914 <vPortFree>
				vPortFree( pxTCB );
 8012a44:	6878      	ldr	r0, [r7, #4]
 8012a46:	f000 ff65 	bl	8013914 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012a4a:	e017      	b.n	8012a7c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012a52:	2b01      	cmp	r3, #1
 8012a54:	d103      	bne.n	8012a5e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8012a56:	6878      	ldr	r0, [r7, #4]
 8012a58:	f000 ff5c 	bl	8013914 <vPortFree>
	}
 8012a5c:	e00e      	b.n	8012a7c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012a64:	2b02      	cmp	r3, #2
 8012a66:	d009      	beq.n	8012a7c <prvDeleteTCB+0x54>
 8012a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a6c:	f383 8811 	msr	BASEPRI, r3
 8012a70:	f3bf 8f6f 	isb	sy
 8012a74:	f3bf 8f4f 	dsb	sy
 8012a78:	60fb      	str	r3, [r7, #12]
 8012a7a:	e7fe      	b.n	8012a7a <prvDeleteTCB+0x52>
	}
 8012a7c:	bf00      	nop
 8012a7e:	3710      	adds	r7, #16
 8012a80:	46bd      	mov	sp, r7
 8012a82:	bd80      	pop	{r7, pc}

08012a84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012a84:	b480      	push	{r7}
 8012a86:	b083      	sub	sp, #12
 8012a88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012a8a:	4b0c      	ldr	r3, [pc, #48]	; (8012abc <prvResetNextTaskUnblockTime+0x38>)
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d104      	bne.n	8012a9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012a94:	4b0a      	ldr	r3, [pc, #40]	; (8012ac0 <prvResetNextTaskUnblockTime+0x3c>)
 8012a96:	f04f 32ff 	mov.w	r2, #4294967295
 8012a9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012a9c:	e008      	b.n	8012ab0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a9e:	4b07      	ldr	r3, [pc, #28]	; (8012abc <prvResetNextTaskUnblockTime+0x38>)
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	68db      	ldr	r3, [r3, #12]
 8012aa4:	68db      	ldr	r3, [r3, #12]
 8012aa6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	685b      	ldr	r3, [r3, #4]
 8012aac:	4a04      	ldr	r2, [pc, #16]	; (8012ac0 <prvResetNextTaskUnblockTime+0x3c>)
 8012aae:	6013      	str	r3, [r2, #0]
}
 8012ab0:	bf00      	nop
 8012ab2:	370c      	adds	r7, #12
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aba:	4770      	bx	lr
 8012abc:	20000db8 	.word	0x20000db8
 8012ac0:	20000e20 	.word	0x20000e20

08012ac4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012ac4:	b480      	push	{r7}
 8012ac6:	b083      	sub	sp, #12
 8012ac8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012aca:	4b0b      	ldr	r3, [pc, #44]	; (8012af8 <xTaskGetSchedulerState+0x34>)
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d102      	bne.n	8012ad8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012ad2:	2301      	movs	r3, #1
 8012ad4:	607b      	str	r3, [r7, #4]
 8012ad6:	e008      	b.n	8012aea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012ad8:	4b08      	ldr	r3, [pc, #32]	; (8012afc <xTaskGetSchedulerState+0x38>)
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d102      	bne.n	8012ae6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012ae0:	2302      	movs	r3, #2
 8012ae2:	607b      	str	r3, [r7, #4]
 8012ae4:	e001      	b.n	8012aea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012aea:	687b      	ldr	r3, [r7, #4]
	}
 8012aec:	4618      	mov	r0, r3
 8012aee:	370c      	adds	r7, #12
 8012af0:	46bd      	mov	sp, r7
 8012af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af6:	4770      	bx	lr
 8012af8:	20000e0c 	.word	0x20000e0c
 8012afc:	20000e28 	.word	0x20000e28

08012b00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b086      	sub	sp, #24
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d054      	beq.n	8012bc0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012b16:	4b2d      	ldr	r3, [pc, #180]	; (8012bcc <xTaskPriorityDisinherit+0xcc>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	693a      	ldr	r2, [r7, #16]
 8012b1c:	429a      	cmp	r2, r3
 8012b1e:	d009      	beq.n	8012b34 <xTaskPriorityDisinherit+0x34>
 8012b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b24:	f383 8811 	msr	BASEPRI, r3
 8012b28:	f3bf 8f6f 	isb	sy
 8012b2c:	f3bf 8f4f 	dsb	sy
 8012b30:	60fb      	str	r3, [r7, #12]
 8012b32:	e7fe      	b.n	8012b32 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8012b34:	693b      	ldr	r3, [r7, #16]
 8012b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d109      	bne.n	8012b50 <xTaskPriorityDisinherit+0x50>
 8012b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b40:	f383 8811 	msr	BASEPRI, r3
 8012b44:	f3bf 8f6f 	isb	sy
 8012b48:	f3bf 8f4f 	dsb	sy
 8012b4c:	60bb      	str	r3, [r7, #8]
 8012b4e:	e7fe      	b.n	8012b4e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8012b50:	693b      	ldr	r3, [r7, #16]
 8012b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b54:	1e5a      	subs	r2, r3, #1
 8012b56:	693b      	ldr	r3, [r7, #16]
 8012b58:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012b5a:	693b      	ldr	r3, [r7, #16]
 8012b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b5e:	693b      	ldr	r3, [r7, #16]
 8012b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b62:	429a      	cmp	r2, r3
 8012b64:	d02c      	beq.n	8012bc0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012b66:	693b      	ldr	r3, [r7, #16]
 8012b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d128      	bne.n	8012bc0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012b6e:	693b      	ldr	r3, [r7, #16]
 8012b70:	3304      	adds	r3, #4
 8012b72:	4618      	mov	r0, r3
 8012b74:	f7fe fbe2 	bl	801133c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012b78:	693b      	ldr	r3, [r7, #16]
 8012b7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012b7c:	693b      	ldr	r3, [r7, #16]
 8012b7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012b80:	693b      	ldr	r3, [r7, #16]
 8012b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b84:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012b88:	693b      	ldr	r3, [r7, #16]
 8012b8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012b8c:	693b      	ldr	r3, [r7, #16]
 8012b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b90:	4b0f      	ldr	r3, [pc, #60]	; (8012bd0 <xTaskPriorityDisinherit+0xd0>)
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	429a      	cmp	r2, r3
 8012b96:	d903      	bls.n	8012ba0 <xTaskPriorityDisinherit+0xa0>
 8012b98:	693b      	ldr	r3, [r7, #16]
 8012b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b9c:	4a0c      	ldr	r2, [pc, #48]	; (8012bd0 <xTaskPriorityDisinherit+0xd0>)
 8012b9e:	6013      	str	r3, [r2, #0]
 8012ba0:	693b      	ldr	r3, [r7, #16]
 8012ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ba4:	4613      	mov	r3, r2
 8012ba6:	009b      	lsls	r3, r3, #2
 8012ba8:	4413      	add	r3, r2
 8012baa:	009b      	lsls	r3, r3, #2
 8012bac:	4a09      	ldr	r2, [pc, #36]	; (8012bd4 <xTaskPriorityDisinherit+0xd4>)
 8012bae:	441a      	add	r2, r3
 8012bb0:	693b      	ldr	r3, [r7, #16]
 8012bb2:	3304      	adds	r3, #4
 8012bb4:	4619      	mov	r1, r3
 8012bb6:	4610      	mov	r0, r2
 8012bb8:	f7fe fb63 	bl	8011282 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012bbc:	2301      	movs	r3, #1
 8012bbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012bc0:	697b      	ldr	r3, [r7, #20]
	}
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	3718      	adds	r7, #24
 8012bc6:	46bd      	mov	sp, r7
 8012bc8:	bd80      	pop	{r7, pc}
 8012bca:	bf00      	nop
 8012bcc:	2000092c 	.word	0x2000092c
 8012bd0:	20000e08 	.word	0x20000e08
 8012bd4:	20000930 	.word	0x20000930

08012bd8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b084      	sub	sp, #16
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	6078      	str	r0, [r7, #4]
 8012be0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012be2:	4b21      	ldr	r3, [pc, #132]	; (8012c68 <prvAddCurrentTaskToDelayedList+0x90>)
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012be8:	4b20      	ldr	r3, [pc, #128]	; (8012c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	3304      	adds	r3, #4
 8012bee:	4618      	mov	r0, r3
 8012bf0:	f7fe fba4 	bl	801133c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bfa:	d10a      	bne.n	8012c12 <prvAddCurrentTaskToDelayedList+0x3a>
 8012bfc:	683b      	ldr	r3, [r7, #0]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d007      	beq.n	8012c12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c02:	4b1a      	ldr	r3, [pc, #104]	; (8012c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	3304      	adds	r3, #4
 8012c08:	4619      	mov	r1, r3
 8012c0a:	4819      	ldr	r0, [pc, #100]	; (8012c70 <prvAddCurrentTaskToDelayedList+0x98>)
 8012c0c:	f7fe fb39 	bl	8011282 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012c10:	e026      	b.n	8012c60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012c12:	68fa      	ldr	r2, [r7, #12]
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	4413      	add	r3, r2
 8012c18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012c1a:	4b14      	ldr	r3, [pc, #80]	; (8012c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	68ba      	ldr	r2, [r7, #8]
 8012c20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012c22:	68ba      	ldr	r2, [r7, #8]
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	429a      	cmp	r2, r3
 8012c28:	d209      	bcs.n	8012c3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c2a:	4b12      	ldr	r3, [pc, #72]	; (8012c74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012c2c:	681a      	ldr	r2, [r3, #0]
 8012c2e:	4b0f      	ldr	r3, [pc, #60]	; (8012c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	3304      	adds	r3, #4
 8012c34:	4619      	mov	r1, r3
 8012c36:	4610      	mov	r0, r2
 8012c38:	f7fe fb47 	bl	80112ca <vListInsert>
}
 8012c3c:	e010      	b.n	8012c60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c3e:	4b0e      	ldr	r3, [pc, #56]	; (8012c78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012c40:	681a      	ldr	r2, [r3, #0]
 8012c42:	4b0a      	ldr	r3, [pc, #40]	; (8012c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	3304      	adds	r3, #4
 8012c48:	4619      	mov	r1, r3
 8012c4a:	4610      	mov	r0, r2
 8012c4c:	f7fe fb3d 	bl	80112ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012c50:	4b0a      	ldr	r3, [pc, #40]	; (8012c7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	68ba      	ldr	r2, [r7, #8]
 8012c56:	429a      	cmp	r2, r3
 8012c58:	d202      	bcs.n	8012c60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012c5a:	4a08      	ldr	r2, [pc, #32]	; (8012c7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8012c5c:	68bb      	ldr	r3, [r7, #8]
 8012c5e:	6013      	str	r3, [r2, #0]
}
 8012c60:	bf00      	nop
 8012c62:	3710      	adds	r7, #16
 8012c64:	46bd      	mov	sp, r7
 8012c66:	bd80      	pop	{r7, pc}
 8012c68:	20000e04 	.word	0x20000e04
 8012c6c:	2000092c 	.word	0x2000092c
 8012c70:	20000dec 	.word	0x20000dec
 8012c74:	20000dbc 	.word	0x20000dbc
 8012c78:	20000db8 	.word	0x20000db8
 8012c7c:	20000e20 	.word	0x20000e20

08012c80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b08a      	sub	sp, #40	; 0x28
 8012c84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012c86:	2300      	movs	r3, #0
 8012c88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012c8a:	f000 faff 	bl	801328c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012c8e:	4b1c      	ldr	r3, [pc, #112]	; (8012d00 <xTimerCreateTimerTask+0x80>)
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d021      	beq.n	8012cda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012c96:	2300      	movs	r3, #0
 8012c98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012c9e:	1d3a      	adds	r2, r7, #4
 8012ca0:	f107 0108 	add.w	r1, r7, #8
 8012ca4:	f107 030c 	add.w	r3, r7, #12
 8012ca8:	4618      	mov	r0, r3
 8012caa:	f7fe faa3 	bl	80111f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012cae:	6879      	ldr	r1, [r7, #4]
 8012cb0:	68bb      	ldr	r3, [r7, #8]
 8012cb2:	68fa      	ldr	r2, [r7, #12]
 8012cb4:	9202      	str	r2, [sp, #8]
 8012cb6:	9301      	str	r3, [sp, #4]
 8012cb8:	2302      	movs	r3, #2
 8012cba:	9300      	str	r3, [sp, #0]
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	460a      	mov	r2, r1
 8012cc0:	4910      	ldr	r1, [pc, #64]	; (8012d04 <xTimerCreateTimerTask+0x84>)
 8012cc2:	4811      	ldr	r0, [pc, #68]	; (8012d08 <xTimerCreateTimerTask+0x88>)
 8012cc4:	f7ff f8f6 	bl	8011eb4 <xTaskCreateStatic>
 8012cc8:	4602      	mov	r2, r0
 8012cca:	4b10      	ldr	r3, [pc, #64]	; (8012d0c <xTimerCreateTimerTask+0x8c>)
 8012ccc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012cce:	4b0f      	ldr	r3, [pc, #60]	; (8012d0c <xTimerCreateTimerTask+0x8c>)
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d001      	beq.n	8012cda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012cd6:	2301      	movs	r3, #1
 8012cd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012cda:	697b      	ldr	r3, [r7, #20]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d109      	bne.n	8012cf4 <xTimerCreateTimerTask+0x74>
 8012ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ce4:	f383 8811 	msr	BASEPRI, r3
 8012ce8:	f3bf 8f6f 	isb	sy
 8012cec:	f3bf 8f4f 	dsb	sy
 8012cf0:	613b      	str	r3, [r7, #16]
 8012cf2:	e7fe      	b.n	8012cf2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8012cf4:	697b      	ldr	r3, [r7, #20]
}
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	3718      	adds	r7, #24
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	bd80      	pop	{r7, pc}
 8012cfe:	bf00      	nop
 8012d00:	20000e5c 	.word	0x20000e5c
 8012d04:	08014ae0 	.word	0x08014ae0
 8012d08:	08012e41 	.word	0x08012e41
 8012d0c:	20000e60 	.word	0x20000e60

08012d10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b08a      	sub	sp, #40	; 0x28
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	60f8      	str	r0, [r7, #12]
 8012d18:	60b9      	str	r1, [r7, #8]
 8012d1a:	607a      	str	r2, [r7, #4]
 8012d1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012d1e:	2300      	movs	r3, #0
 8012d20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d109      	bne.n	8012d3c <xTimerGenericCommand+0x2c>
 8012d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d2c:	f383 8811 	msr	BASEPRI, r3
 8012d30:	f3bf 8f6f 	isb	sy
 8012d34:	f3bf 8f4f 	dsb	sy
 8012d38:	623b      	str	r3, [r7, #32]
 8012d3a:	e7fe      	b.n	8012d3a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012d3c:	4b19      	ldr	r3, [pc, #100]	; (8012da4 <xTimerGenericCommand+0x94>)
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d02a      	beq.n	8012d9a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012d44:	68bb      	ldr	r3, [r7, #8]
 8012d46:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012d50:	68bb      	ldr	r3, [r7, #8]
 8012d52:	2b05      	cmp	r3, #5
 8012d54:	dc18      	bgt.n	8012d88 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012d56:	f7ff feb5 	bl	8012ac4 <xTaskGetSchedulerState>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	2b02      	cmp	r3, #2
 8012d5e:	d109      	bne.n	8012d74 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012d60:	4b10      	ldr	r3, [pc, #64]	; (8012da4 <xTimerGenericCommand+0x94>)
 8012d62:	6818      	ldr	r0, [r3, #0]
 8012d64:	f107 0110 	add.w	r1, r7, #16
 8012d68:	2300      	movs	r3, #0
 8012d6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d6c:	f7fe fc4e 	bl	801160c <xQueueGenericSend>
 8012d70:	6278      	str	r0, [r7, #36]	; 0x24
 8012d72:	e012      	b.n	8012d9a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012d74:	4b0b      	ldr	r3, [pc, #44]	; (8012da4 <xTimerGenericCommand+0x94>)
 8012d76:	6818      	ldr	r0, [r3, #0]
 8012d78:	f107 0110 	add.w	r1, r7, #16
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	2200      	movs	r2, #0
 8012d80:	f7fe fc44 	bl	801160c <xQueueGenericSend>
 8012d84:	6278      	str	r0, [r7, #36]	; 0x24
 8012d86:	e008      	b.n	8012d9a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012d88:	4b06      	ldr	r3, [pc, #24]	; (8012da4 <xTimerGenericCommand+0x94>)
 8012d8a:	6818      	ldr	r0, [r3, #0]
 8012d8c:	f107 0110 	add.w	r1, r7, #16
 8012d90:	2300      	movs	r3, #0
 8012d92:	683a      	ldr	r2, [r7, #0]
 8012d94:	f7fe fd34 	bl	8011800 <xQueueGenericSendFromISR>
 8012d98:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	3728      	adds	r7, #40	; 0x28
 8012da0:	46bd      	mov	sp, r7
 8012da2:	bd80      	pop	{r7, pc}
 8012da4:	20000e5c 	.word	0x20000e5c

08012da8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b088      	sub	sp, #32
 8012dac:	af02      	add	r7, sp, #8
 8012dae:	6078      	str	r0, [r7, #4]
 8012db0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012db2:	4b22      	ldr	r3, [pc, #136]	; (8012e3c <prvProcessExpiredTimer+0x94>)
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	68db      	ldr	r3, [r3, #12]
 8012db8:	68db      	ldr	r3, [r3, #12]
 8012dba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012dbc:	697b      	ldr	r3, [r7, #20]
 8012dbe:	3304      	adds	r3, #4
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	f7fe fabb 	bl	801133c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012dcc:	f003 0304 	and.w	r3, r3, #4
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d021      	beq.n	8012e18 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012dd4:	697b      	ldr	r3, [r7, #20]
 8012dd6:	699a      	ldr	r2, [r3, #24]
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	18d1      	adds	r1, r2, r3
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	683a      	ldr	r2, [r7, #0]
 8012de0:	6978      	ldr	r0, [r7, #20]
 8012de2:	f000 f8d1 	bl	8012f88 <prvInsertTimerInActiveList>
 8012de6:	4603      	mov	r3, r0
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d01e      	beq.n	8012e2a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012dec:	2300      	movs	r3, #0
 8012dee:	9300      	str	r3, [sp, #0]
 8012df0:	2300      	movs	r3, #0
 8012df2:	687a      	ldr	r2, [r7, #4]
 8012df4:	2100      	movs	r1, #0
 8012df6:	6978      	ldr	r0, [r7, #20]
 8012df8:	f7ff ff8a 	bl	8012d10 <xTimerGenericCommand>
 8012dfc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012dfe:	693b      	ldr	r3, [r7, #16]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d112      	bne.n	8012e2a <prvProcessExpiredTimer+0x82>
 8012e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e08:	f383 8811 	msr	BASEPRI, r3
 8012e0c:	f3bf 8f6f 	isb	sy
 8012e10:	f3bf 8f4f 	dsb	sy
 8012e14:	60fb      	str	r3, [r7, #12]
 8012e16:	e7fe      	b.n	8012e16 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012e18:	697b      	ldr	r3, [r7, #20]
 8012e1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e1e:	f023 0301 	bic.w	r3, r3, #1
 8012e22:	b2da      	uxtb	r2, r3
 8012e24:	697b      	ldr	r3, [r7, #20]
 8012e26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012e2a:	697b      	ldr	r3, [r7, #20]
 8012e2c:	6a1b      	ldr	r3, [r3, #32]
 8012e2e:	6978      	ldr	r0, [r7, #20]
 8012e30:	4798      	blx	r3
}
 8012e32:	bf00      	nop
 8012e34:	3718      	adds	r7, #24
 8012e36:	46bd      	mov	sp, r7
 8012e38:	bd80      	pop	{r7, pc}
 8012e3a:	bf00      	nop
 8012e3c:	20000e54 	.word	0x20000e54

08012e40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b084      	sub	sp, #16
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012e48:	f107 0308 	add.w	r3, r7, #8
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f000 f857 	bl	8012f00 <prvGetNextExpireTime>
 8012e52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012e54:	68bb      	ldr	r3, [r7, #8]
 8012e56:	4619      	mov	r1, r3
 8012e58:	68f8      	ldr	r0, [r7, #12]
 8012e5a:	f000 f803 	bl	8012e64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012e5e:	f000 f8d5 	bl	801300c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012e62:	e7f1      	b.n	8012e48 <prvTimerTask+0x8>

08012e64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012e64:	b580      	push	{r7, lr}
 8012e66:	b084      	sub	sp, #16
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]
 8012e6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012e6e:	f7ff fa57 	bl	8012320 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012e72:	f107 0308 	add.w	r3, r7, #8
 8012e76:	4618      	mov	r0, r3
 8012e78:	f000 f866 	bl	8012f48 <prvSampleTimeNow>
 8012e7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012e7e:	68bb      	ldr	r3, [r7, #8]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d130      	bne.n	8012ee6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012e84:	683b      	ldr	r3, [r7, #0]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d10a      	bne.n	8012ea0 <prvProcessTimerOrBlockTask+0x3c>
 8012e8a:	687a      	ldr	r2, [r7, #4]
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	429a      	cmp	r2, r3
 8012e90:	d806      	bhi.n	8012ea0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012e92:	f7ff fa53 	bl	801233c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012e96:	68f9      	ldr	r1, [r7, #12]
 8012e98:	6878      	ldr	r0, [r7, #4]
 8012e9a:	f7ff ff85 	bl	8012da8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012e9e:	e024      	b.n	8012eea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012ea0:	683b      	ldr	r3, [r7, #0]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d008      	beq.n	8012eb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012ea6:	4b13      	ldr	r3, [pc, #76]	; (8012ef4 <prvProcessTimerOrBlockTask+0x90>)
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d101      	bne.n	8012eb4 <prvProcessTimerOrBlockTask+0x50>
 8012eb0:	2301      	movs	r3, #1
 8012eb2:	e000      	b.n	8012eb6 <prvProcessTimerOrBlockTask+0x52>
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012eb8:	4b0f      	ldr	r3, [pc, #60]	; (8012ef8 <prvProcessTimerOrBlockTask+0x94>)
 8012eba:	6818      	ldr	r0, [r3, #0]
 8012ebc:	687a      	ldr	r2, [r7, #4]
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	1ad3      	subs	r3, r2, r3
 8012ec2:	683a      	ldr	r2, [r7, #0]
 8012ec4:	4619      	mov	r1, r3
 8012ec6:	f7fe ffc1 	bl	8011e4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012eca:	f7ff fa37 	bl	801233c <xTaskResumeAll>
 8012ece:	4603      	mov	r3, r0
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d10a      	bne.n	8012eea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012ed4:	4b09      	ldr	r3, [pc, #36]	; (8012efc <prvProcessTimerOrBlockTask+0x98>)
 8012ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012eda:	601a      	str	r2, [r3, #0]
 8012edc:	f3bf 8f4f 	dsb	sy
 8012ee0:	f3bf 8f6f 	isb	sy
}
 8012ee4:	e001      	b.n	8012eea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012ee6:	f7ff fa29 	bl	801233c <xTaskResumeAll>
}
 8012eea:	bf00      	nop
 8012eec:	3710      	adds	r7, #16
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	bd80      	pop	{r7, pc}
 8012ef2:	bf00      	nop
 8012ef4:	20000e58 	.word	0x20000e58
 8012ef8:	20000e5c 	.word	0x20000e5c
 8012efc:	e000ed04 	.word	0xe000ed04

08012f00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012f00:	b480      	push	{r7}
 8012f02:	b085      	sub	sp, #20
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012f08:	4b0e      	ldr	r3, [pc, #56]	; (8012f44 <prvGetNextExpireTime+0x44>)
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d101      	bne.n	8012f16 <prvGetNextExpireTime+0x16>
 8012f12:	2201      	movs	r2, #1
 8012f14:	e000      	b.n	8012f18 <prvGetNextExpireTime+0x18>
 8012f16:	2200      	movs	r2, #0
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d105      	bne.n	8012f30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012f24:	4b07      	ldr	r3, [pc, #28]	; (8012f44 <prvGetNextExpireTime+0x44>)
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	68db      	ldr	r3, [r3, #12]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	60fb      	str	r3, [r7, #12]
 8012f2e:	e001      	b.n	8012f34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012f30:	2300      	movs	r3, #0
 8012f32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012f34:	68fb      	ldr	r3, [r7, #12]
}
 8012f36:	4618      	mov	r0, r3
 8012f38:	3714      	adds	r7, #20
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f40:	4770      	bx	lr
 8012f42:	bf00      	nop
 8012f44:	20000e54 	.word	0x20000e54

08012f48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b084      	sub	sp, #16
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012f50:	f7ff fa90 	bl	8012474 <xTaskGetTickCount>
 8012f54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012f56:	4b0b      	ldr	r3, [pc, #44]	; (8012f84 <prvSampleTimeNow+0x3c>)
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	68fa      	ldr	r2, [r7, #12]
 8012f5c:	429a      	cmp	r2, r3
 8012f5e:	d205      	bcs.n	8012f6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012f60:	f000 f930 	bl	80131c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	2201      	movs	r2, #1
 8012f68:	601a      	str	r2, [r3, #0]
 8012f6a:	e002      	b.n	8012f72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	2200      	movs	r2, #0
 8012f70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012f72:	4a04      	ldr	r2, [pc, #16]	; (8012f84 <prvSampleTimeNow+0x3c>)
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012f78:	68fb      	ldr	r3, [r7, #12]
}
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	3710      	adds	r7, #16
 8012f7e:	46bd      	mov	sp, r7
 8012f80:	bd80      	pop	{r7, pc}
 8012f82:	bf00      	nop
 8012f84:	20000e64 	.word	0x20000e64

08012f88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b086      	sub	sp, #24
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	60f8      	str	r0, [r7, #12]
 8012f90:	60b9      	str	r1, [r7, #8]
 8012f92:	607a      	str	r2, [r7, #4]
 8012f94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012f96:	2300      	movs	r3, #0
 8012f98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	68ba      	ldr	r2, [r7, #8]
 8012f9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	68fa      	ldr	r2, [r7, #12]
 8012fa4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012fa6:	68ba      	ldr	r2, [r7, #8]
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	429a      	cmp	r2, r3
 8012fac:	d812      	bhi.n	8012fd4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012fae:	687a      	ldr	r2, [r7, #4]
 8012fb0:	683b      	ldr	r3, [r7, #0]
 8012fb2:	1ad2      	subs	r2, r2, r3
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	699b      	ldr	r3, [r3, #24]
 8012fb8:	429a      	cmp	r2, r3
 8012fba:	d302      	bcc.n	8012fc2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012fbc:	2301      	movs	r3, #1
 8012fbe:	617b      	str	r3, [r7, #20]
 8012fc0:	e01b      	b.n	8012ffa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012fc2:	4b10      	ldr	r3, [pc, #64]	; (8013004 <prvInsertTimerInActiveList+0x7c>)
 8012fc4:	681a      	ldr	r2, [r3, #0]
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	3304      	adds	r3, #4
 8012fca:	4619      	mov	r1, r3
 8012fcc:	4610      	mov	r0, r2
 8012fce:	f7fe f97c 	bl	80112ca <vListInsert>
 8012fd2:	e012      	b.n	8012ffa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012fd4:	687a      	ldr	r2, [r7, #4]
 8012fd6:	683b      	ldr	r3, [r7, #0]
 8012fd8:	429a      	cmp	r2, r3
 8012fda:	d206      	bcs.n	8012fea <prvInsertTimerInActiveList+0x62>
 8012fdc:	68ba      	ldr	r2, [r7, #8]
 8012fde:	683b      	ldr	r3, [r7, #0]
 8012fe0:	429a      	cmp	r2, r3
 8012fe2:	d302      	bcc.n	8012fea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012fe4:	2301      	movs	r3, #1
 8012fe6:	617b      	str	r3, [r7, #20]
 8012fe8:	e007      	b.n	8012ffa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012fea:	4b07      	ldr	r3, [pc, #28]	; (8013008 <prvInsertTimerInActiveList+0x80>)
 8012fec:	681a      	ldr	r2, [r3, #0]
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	3304      	adds	r3, #4
 8012ff2:	4619      	mov	r1, r3
 8012ff4:	4610      	mov	r0, r2
 8012ff6:	f7fe f968 	bl	80112ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012ffa:	697b      	ldr	r3, [r7, #20]
}
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	3718      	adds	r7, #24
 8013000:	46bd      	mov	sp, r7
 8013002:	bd80      	pop	{r7, pc}
 8013004:	20000e58 	.word	0x20000e58
 8013008:	20000e54 	.word	0x20000e54

0801300c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801300c:	b580      	push	{r7, lr}
 801300e:	b08e      	sub	sp, #56	; 0x38
 8013010:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013012:	e0c6      	b.n	80131a2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	2b00      	cmp	r3, #0
 8013018:	da17      	bge.n	801304a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801301a:	1d3b      	adds	r3, r7, #4
 801301c:	3304      	adds	r3, #4
 801301e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013022:	2b00      	cmp	r3, #0
 8013024:	d109      	bne.n	801303a <prvProcessReceivedCommands+0x2e>
 8013026:	f04f 0350 	mov.w	r3, #80	; 0x50
 801302a:	f383 8811 	msr	BASEPRI, r3
 801302e:	f3bf 8f6f 	isb	sy
 8013032:	f3bf 8f4f 	dsb	sy
 8013036:	61fb      	str	r3, [r7, #28]
 8013038:	e7fe      	b.n	8013038 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801303a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013040:	6850      	ldr	r0, [r2, #4]
 8013042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013044:	6892      	ldr	r2, [r2, #8]
 8013046:	4611      	mov	r1, r2
 8013048:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	2b00      	cmp	r3, #0
 801304e:	f2c0 80a7 	blt.w	80131a0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013058:	695b      	ldr	r3, [r3, #20]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d004      	beq.n	8013068 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801305e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013060:	3304      	adds	r3, #4
 8013062:	4618      	mov	r0, r3
 8013064:	f7fe f96a 	bl	801133c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013068:	463b      	mov	r3, r7
 801306a:	4618      	mov	r0, r3
 801306c:	f7ff ff6c 	bl	8012f48 <prvSampleTimeNow>
 8013070:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	2b09      	cmp	r3, #9
 8013076:	f200 8094 	bhi.w	80131a2 <prvProcessReceivedCommands+0x196>
 801307a:	a201      	add	r2, pc, #4	; (adr r2, 8013080 <prvProcessReceivedCommands+0x74>)
 801307c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013080:	080130a9 	.word	0x080130a9
 8013084:	080130a9 	.word	0x080130a9
 8013088:	080130a9 	.word	0x080130a9
 801308c:	0801311b 	.word	0x0801311b
 8013090:	0801312f 	.word	0x0801312f
 8013094:	08013177 	.word	0x08013177
 8013098:	080130a9 	.word	0x080130a9
 801309c:	080130a9 	.word	0x080130a9
 80130a0:	0801311b 	.word	0x0801311b
 80130a4:	0801312f 	.word	0x0801312f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80130a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80130ae:	f043 0301 	orr.w	r3, r3, #1
 80130b2:	b2da      	uxtb	r2, r3
 80130b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80130ba:	68ba      	ldr	r2, [r7, #8]
 80130bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130be:	699b      	ldr	r3, [r3, #24]
 80130c0:	18d1      	adds	r1, r2, r3
 80130c2:	68bb      	ldr	r3, [r7, #8]
 80130c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130c8:	f7ff ff5e 	bl	8012f88 <prvInsertTimerInActiveList>
 80130cc:	4603      	mov	r3, r0
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d067      	beq.n	80131a2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80130d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130d4:	6a1b      	ldr	r3, [r3, #32]
 80130d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80130da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80130e0:	f003 0304 	and.w	r3, r3, #4
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d05c      	beq.n	80131a2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80130e8:	68ba      	ldr	r2, [r7, #8]
 80130ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130ec:	699b      	ldr	r3, [r3, #24]
 80130ee:	441a      	add	r2, r3
 80130f0:	2300      	movs	r3, #0
 80130f2:	9300      	str	r3, [sp, #0]
 80130f4:	2300      	movs	r3, #0
 80130f6:	2100      	movs	r1, #0
 80130f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130fa:	f7ff fe09 	bl	8012d10 <xTimerGenericCommand>
 80130fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013100:	6a3b      	ldr	r3, [r7, #32]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d14d      	bne.n	80131a2 <prvProcessReceivedCommands+0x196>
 8013106:	f04f 0350 	mov.w	r3, #80	; 0x50
 801310a:	f383 8811 	msr	BASEPRI, r3
 801310e:	f3bf 8f6f 	isb	sy
 8013112:	f3bf 8f4f 	dsb	sy
 8013116:	61bb      	str	r3, [r7, #24]
 8013118:	e7fe      	b.n	8013118 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801311a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801311c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013120:	f023 0301 	bic.w	r3, r3, #1
 8013124:	b2da      	uxtb	r2, r3
 8013126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013128:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801312c:	e039      	b.n	80131a2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801312e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013130:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013134:	f043 0301 	orr.w	r3, r3, #1
 8013138:	b2da      	uxtb	r2, r3
 801313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801313c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013140:	68ba      	ldr	r2, [r7, #8]
 8013142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013144:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013148:	699b      	ldr	r3, [r3, #24]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d109      	bne.n	8013162 <prvProcessReceivedCommands+0x156>
 801314e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013152:	f383 8811 	msr	BASEPRI, r3
 8013156:	f3bf 8f6f 	isb	sy
 801315a:	f3bf 8f4f 	dsb	sy
 801315e:	617b      	str	r3, [r7, #20]
 8013160:	e7fe      	b.n	8013160 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013164:	699a      	ldr	r2, [r3, #24]
 8013166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013168:	18d1      	adds	r1, r2, r3
 801316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801316c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801316e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013170:	f7ff ff0a 	bl	8012f88 <prvInsertTimerInActiveList>
					break;
 8013174:	e015      	b.n	80131a2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013178:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801317c:	f003 0302 	and.w	r3, r3, #2
 8013180:	2b00      	cmp	r3, #0
 8013182:	d103      	bne.n	801318c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8013184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013186:	f000 fbc5 	bl	8013914 <vPortFree>
 801318a:	e00a      	b.n	80131a2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801318c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801318e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013192:	f023 0301 	bic.w	r3, r3, #1
 8013196:	b2da      	uxtb	r2, r3
 8013198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801319a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801319e:	e000      	b.n	80131a2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80131a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80131a2:	4b07      	ldr	r3, [pc, #28]	; (80131c0 <prvProcessReceivedCommands+0x1b4>)
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	1d39      	adds	r1, r7, #4
 80131a8:	2200      	movs	r2, #0
 80131aa:	4618      	mov	r0, r3
 80131ac:	f7fe fbbc 	bl	8011928 <xQueueReceive>
 80131b0:	4603      	mov	r3, r0
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	f47f af2e 	bne.w	8013014 <prvProcessReceivedCommands+0x8>
	}
}
 80131b8:	bf00      	nop
 80131ba:	3730      	adds	r7, #48	; 0x30
 80131bc:	46bd      	mov	sp, r7
 80131be:	bd80      	pop	{r7, pc}
 80131c0:	20000e5c 	.word	0x20000e5c

080131c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b088      	sub	sp, #32
 80131c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80131ca:	e047      	b.n	801325c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80131cc:	4b2d      	ldr	r3, [pc, #180]	; (8013284 <prvSwitchTimerLists+0xc0>)
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	68db      	ldr	r3, [r3, #12]
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80131d6:	4b2b      	ldr	r3, [pc, #172]	; (8013284 <prvSwitchTimerLists+0xc0>)
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	68db      	ldr	r3, [r3, #12]
 80131dc:	68db      	ldr	r3, [r3, #12]
 80131de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	3304      	adds	r3, #4
 80131e4:	4618      	mov	r0, r3
 80131e6:	f7fe f8a9 	bl	801133c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	6a1b      	ldr	r3, [r3, #32]
 80131ee:	68f8      	ldr	r0, [r7, #12]
 80131f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131f8:	f003 0304 	and.w	r3, r3, #4
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d02d      	beq.n	801325c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	699b      	ldr	r3, [r3, #24]
 8013204:	693a      	ldr	r2, [r7, #16]
 8013206:	4413      	add	r3, r2
 8013208:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801320a:	68ba      	ldr	r2, [r7, #8]
 801320c:	693b      	ldr	r3, [r7, #16]
 801320e:	429a      	cmp	r2, r3
 8013210:	d90e      	bls.n	8013230 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	68ba      	ldr	r2, [r7, #8]
 8013216:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	68fa      	ldr	r2, [r7, #12]
 801321c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801321e:	4b19      	ldr	r3, [pc, #100]	; (8013284 <prvSwitchTimerLists+0xc0>)
 8013220:	681a      	ldr	r2, [r3, #0]
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	3304      	adds	r3, #4
 8013226:	4619      	mov	r1, r3
 8013228:	4610      	mov	r0, r2
 801322a:	f7fe f84e 	bl	80112ca <vListInsert>
 801322e:	e015      	b.n	801325c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013230:	2300      	movs	r3, #0
 8013232:	9300      	str	r3, [sp, #0]
 8013234:	2300      	movs	r3, #0
 8013236:	693a      	ldr	r2, [r7, #16]
 8013238:	2100      	movs	r1, #0
 801323a:	68f8      	ldr	r0, [r7, #12]
 801323c:	f7ff fd68 	bl	8012d10 <xTimerGenericCommand>
 8013240:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d109      	bne.n	801325c <prvSwitchTimerLists+0x98>
 8013248:	f04f 0350 	mov.w	r3, #80	; 0x50
 801324c:	f383 8811 	msr	BASEPRI, r3
 8013250:	f3bf 8f6f 	isb	sy
 8013254:	f3bf 8f4f 	dsb	sy
 8013258:	603b      	str	r3, [r7, #0]
 801325a:	e7fe      	b.n	801325a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801325c:	4b09      	ldr	r3, [pc, #36]	; (8013284 <prvSwitchTimerLists+0xc0>)
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	2b00      	cmp	r3, #0
 8013264:	d1b2      	bne.n	80131cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013266:	4b07      	ldr	r3, [pc, #28]	; (8013284 <prvSwitchTimerLists+0xc0>)
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801326c:	4b06      	ldr	r3, [pc, #24]	; (8013288 <prvSwitchTimerLists+0xc4>)
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	4a04      	ldr	r2, [pc, #16]	; (8013284 <prvSwitchTimerLists+0xc0>)
 8013272:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013274:	4a04      	ldr	r2, [pc, #16]	; (8013288 <prvSwitchTimerLists+0xc4>)
 8013276:	697b      	ldr	r3, [r7, #20]
 8013278:	6013      	str	r3, [r2, #0]
}
 801327a:	bf00      	nop
 801327c:	3718      	adds	r7, #24
 801327e:	46bd      	mov	sp, r7
 8013280:	bd80      	pop	{r7, pc}
 8013282:	bf00      	nop
 8013284:	20000e54 	.word	0x20000e54
 8013288:	20000e58 	.word	0x20000e58

0801328c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801328c:	b580      	push	{r7, lr}
 801328e:	b082      	sub	sp, #8
 8013290:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013292:	f000 f963 	bl	801355c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013296:	4b15      	ldr	r3, [pc, #84]	; (80132ec <prvCheckForValidListAndQueue+0x60>)
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d120      	bne.n	80132e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801329e:	4814      	ldr	r0, [pc, #80]	; (80132f0 <prvCheckForValidListAndQueue+0x64>)
 80132a0:	f7fd ffc2 	bl	8011228 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80132a4:	4813      	ldr	r0, [pc, #76]	; (80132f4 <prvCheckForValidListAndQueue+0x68>)
 80132a6:	f7fd ffbf 	bl	8011228 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80132aa:	4b13      	ldr	r3, [pc, #76]	; (80132f8 <prvCheckForValidListAndQueue+0x6c>)
 80132ac:	4a10      	ldr	r2, [pc, #64]	; (80132f0 <prvCheckForValidListAndQueue+0x64>)
 80132ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80132b0:	4b12      	ldr	r3, [pc, #72]	; (80132fc <prvCheckForValidListAndQueue+0x70>)
 80132b2:	4a10      	ldr	r2, [pc, #64]	; (80132f4 <prvCheckForValidListAndQueue+0x68>)
 80132b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80132b6:	2300      	movs	r3, #0
 80132b8:	9300      	str	r3, [sp, #0]
 80132ba:	4b11      	ldr	r3, [pc, #68]	; (8013300 <prvCheckForValidListAndQueue+0x74>)
 80132bc:	4a11      	ldr	r2, [pc, #68]	; (8013304 <prvCheckForValidListAndQueue+0x78>)
 80132be:	2110      	movs	r1, #16
 80132c0:	200a      	movs	r0, #10
 80132c2:	f7fe f8cd 	bl	8011460 <xQueueGenericCreateStatic>
 80132c6:	4602      	mov	r2, r0
 80132c8:	4b08      	ldr	r3, [pc, #32]	; (80132ec <prvCheckForValidListAndQueue+0x60>)
 80132ca:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80132cc:	4b07      	ldr	r3, [pc, #28]	; (80132ec <prvCheckForValidListAndQueue+0x60>)
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d005      	beq.n	80132e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80132d4:	4b05      	ldr	r3, [pc, #20]	; (80132ec <prvCheckForValidListAndQueue+0x60>)
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	490b      	ldr	r1, [pc, #44]	; (8013308 <prvCheckForValidListAndQueue+0x7c>)
 80132da:	4618      	mov	r0, r3
 80132dc:	f7fe fd8e 	bl	8011dfc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80132e0:	f000 f96a 	bl	80135b8 <vPortExitCritical>
}
 80132e4:	bf00      	nop
 80132e6:	46bd      	mov	sp, r7
 80132e8:	bd80      	pop	{r7, pc}
 80132ea:	bf00      	nop
 80132ec:	20000e5c 	.word	0x20000e5c
 80132f0:	20000e2c 	.word	0x20000e2c
 80132f4:	20000e40 	.word	0x20000e40
 80132f8:	20000e54 	.word	0x20000e54
 80132fc:	20000e58 	.word	0x20000e58
 8013300:	20000f08 	.word	0x20000f08
 8013304:	20000e68 	.word	0x20000e68
 8013308:	08014ae8 	.word	0x08014ae8

0801330c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801330c:	b480      	push	{r7}
 801330e:	b085      	sub	sp, #20
 8013310:	af00      	add	r7, sp, #0
 8013312:	60f8      	str	r0, [r7, #12]
 8013314:	60b9      	str	r1, [r7, #8]
 8013316:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	3b04      	subs	r3, #4
 801331c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013324:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	3b04      	subs	r3, #4
 801332a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801332c:	68bb      	ldr	r3, [r7, #8]
 801332e:	f023 0201 	bic.w	r2, r3, #1
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	3b04      	subs	r3, #4
 801333a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801333c:	4a0c      	ldr	r2, [pc, #48]	; (8013370 <pxPortInitialiseStack+0x64>)
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	3b14      	subs	r3, #20
 8013346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013348:	687a      	ldr	r2, [r7, #4]
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	3b04      	subs	r3, #4
 8013352:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	f06f 0202 	mvn.w	r2, #2
 801335a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	3b20      	subs	r3, #32
 8013360:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013362:	68fb      	ldr	r3, [r7, #12]
}
 8013364:	4618      	mov	r0, r3
 8013366:	3714      	adds	r7, #20
 8013368:	46bd      	mov	sp, r7
 801336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801336e:	4770      	bx	lr
 8013370:	08013375 	.word	0x08013375

08013374 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013374:	b480      	push	{r7}
 8013376:	b085      	sub	sp, #20
 8013378:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801337a:	2300      	movs	r3, #0
 801337c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801337e:	4b11      	ldr	r3, [pc, #68]	; (80133c4 <prvTaskExitError+0x50>)
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013386:	d009      	beq.n	801339c <prvTaskExitError+0x28>
 8013388:	f04f 0350 	mov.w	r3, #80	; 0x50
 801338c:	f383 8811 	msr	BASEPRI, r3
 8013390:	f3bf 8f6f 	isb	sy
 8013394:	f3bf 8f4f 	dsb	sy
 8013398:	60fb      	str	r3, [r7, #12]
 801339a:	e7fe      	b.n	801339a <prvTaskExitError+0x26>
 801339c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133a0:	f383 8811 	msr	BASEPRI, r3
 80133a4:	f3bf 8f6f 	isb	sy
 80133a8:	f3bf 8f4f 	dsb	sy
 80133ac:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80133ae:	bf00      	nop
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d0fc      	beq.n	80133b0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80133b6:	bf00      	nop
 80133b8:	3714      	adds	r7, #20
 80133ba:	46bd      	mov	sp, r7
 80133bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c0:	4770      	bx	lr
 80133c2:	bf00      	nop
 80133c4:	20000088 	.word	0x20000088
	...

080133d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80133d0:	4b07      	ldr	r3, [pc, #28]	; (80133f0 <pxCurrentTCBConst2>)
 80133d2:	6819      	ldr	r1, [r3, #0]
 80133d4:	6808      	ldr	r0, [r1, #0]
 80133d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133da:	f380 8809 	msr	PSP, r0
 80133de:	f3bf 8f6f 	isb	sy
 80133e2:	f04f 0000 	mov.w	r0, #0
 80133e6:	f380 8811 	msr	BASEPRI, r0
 80133ea:	4770      	bx	lr
 80133ec:	f3af 8000 	nop.w

080133f0 <pxCurrentTCBConst2>:
 80133f0:	2000092c 	.word	0x2000092c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80133f4:	bf00      	nop
 80133f6:	bf00      	nop

080133f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80133f8:	4808      	ldr	r0, [pc, #32]	; (801341c <prvPortStartFirstTask+0x24>)
 80133fa:	6800      	ldr	r0, [r0, #0]
 80133fc:	6800      	ldr	r0, [r0, #0]
 80133fe:	f380 8808 	msr	MSP, r0
 8013402:	f04f 0000 	mov.w	r0, #0
 8013406:	f380 8814 	msr	CONTROL, r0
 801340a:	b662      	cpsie	i
 801340c:	b661      	cpsie	f
 801340e:	f3bf 8f4f 	dsb	sy
 8013412:	f3bf 8f6f 	isb	sy
 8013416:	df00      	svc	0
 8013418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801341a:	bf00      	nop
 801341c:	e000ed08 	.word	0xe000ed08

08013420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013420:	b580      	push	{r7, lr}
 8013422:	b086      	sub	sp, #24
 8013424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013426:	4b44      	ldr	r3, [pc, #272]	; (8013538 <xPortStartScheduler+0x118>)
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	4a44      	ldr	r2, [pc, #272]	; (801353c <xPortStartScheduler+0x11c>)
 801342c:	4293      	cmp	r3, r2
 801342e:	d109      	bne.n	8013444 <xPortStartScheduler+0x24>
 8013430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013434:	f383 8811 	msr	BASEPRI, r3
 8013438:	f3bf 8f6f 	isb	sy
 801343c:	f3bf 8f4f 	dsb	sy
 8013440:	613b      	str	r3, [r7, #16]
 8013442:	e7fe      	b.n	8013442 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013444:	4b3c      	ldr	r3, [pc, #240]	; (8013538 <xPortStartScheduler+0x118>)
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	4a3d      	ldr	r2, [pc, #244]	; (8013540 <xPortStartScheduler+0x120>)
 801344a:	4293      	cmp	r3, r2
 801344c:	d109      	bne.n	8013462 <xPortStartScheduler+0x42>
 801344e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013452:	f383 8811 	msr	BASEPRI, r3
 8013456:	f3bf 8f6f 	isb	sy
 801345a:	f3bf 8f4f 	dsb	sy
 801345e:	60fb      	str	r3, [r7, #12]
 8013460:	e7fe      	b.n	8013460 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013462:	4b38      	ldr	r3, [pc, #224]	; (8013544 <xPortStartScheduler+0x124>)
 8013464:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013466:	697b      	ldr	r3, [r7, #20]
 8013468:	781b      	ldrb	r3, [r3, #0]
 801346a:	b2db      	uxtb	r3, r3
 801346c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801346e:	697b      	ldr	r3, [r7, #20]
 8013470:	22ff      	movs	r2, #255	; 0xff
 8013472:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013474:	697b      	ldr	r3, [r7, #20]
 8013476:	781b      	ldrb	r3, [r3, #0]
 8013478:	b2db      	uxtb	r3, r3
 801347a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801347c:	78fb      	ldrb	r3, [r7, #3]
 801347e:	b2db      	uxtb	r3, r3
 8013480:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013484:	b2da      	uxtb	r2, r3
 8013486:	4b30      	ldr	r3, [pc, #192]	; (8013548 <xPortStartScheduler+0x128>)
 8013488:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801348a:	4b30      	ldr	r3, [pc, #192]	; (801354c <xPortStartScheduler+0x12c>)
 801348c:	2207      	movs	r2, #7
 801348e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013490:	e009      	b.n	80134a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8013492:	4b2e      	ldr	r3, [pc, #184]	; (801354c <xPortStartScheduler+0x12c>)
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	3b01      	subs	r3, #1
 8013498:	4a2c      	ldr	r2, [pc, #176]	; (801354c <xPortStartScheduler+0x12c>)
 801349a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801349c:	78fb      	ldrb	r3, [r7, #3]
 801349e:	b2db      	uxtb	r3, r3
 80134a0:	005b      	lsls	r3, r3, #1
 80134a2:	b2db      	uxtb	r3, r3
 80134a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80134a6:	78fb      	ldrb	r3, [r7, #3]
 80134a8:	b2db      	uxtb	r3, r3
 80134aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80134ae:	2b80      	cmp	r3, #128	; 0x80
 80134b0:	d0ef      	beq.n	8013492 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80134b2:	4b26      	ldr	r3, [pc, #152]	; (801354c <xPortStartScheduler+0x12c>)
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	f1c3 0307 	rsb	r3, r3, #7
 80134ba:	2b04      	cmp	r3, #4
 80134bc:	d009      	beq.n	80134d2 <xPortStartScheduler+0xb2>
 80134be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134c2:	f383 8811 	msr	BASEPRI, r3
 80134c6:	f3bf 8f6f 	isb	sy
 80134ca:	f3bf 8f4f 	dsb	sy
 80134ce:	60bb      	str	r3, [r7, #8]
 80134d0:	e7fe      	b.n	80134d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80134d2:	4b1e      	ldr	r3, [pc, #120]	; (801354c <xPortStartScheduler+0x12c>)
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	021b      	lsls	r3, r3, #8
 80134d8:	4a1c      	ldr	r2, [pc, #112]	; (801354c <xPortStartScheduler+0x12c>)
 80134da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80134dc:	4b1b      	ldr	r3, [pc, #108]	; (801354c <xPortStartScheduler+0x12c>)
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80134e4:	4a19      	ldr	r2, [pc, #100]	; (801354c <xPortStartScheduler+0x12c>)
 80134e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	b2da      	uxtb	r2, r3
 80134ec:	697b      	ldr	r3, [r7, #20]
 80134ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80134f0:	4b17      	ldr	r3, [pc, #92]	; (8013550 <xPortStartScheduler+0x130>)
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	4a16      	ldr	r2, [pc, #88]	; (8013550 <xPortStartScheduler+0x130>)
 80134f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80134fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80134fc:	4b14      	ldr	r3, [pc, #80]	; (8013550 <xPortStartScheduler+0x130>)
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	4a13      	ldr	r2, [pc, #76]	; (8013550 <xPortStartScheduler+0x130>)
 8013502:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013506:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013508:	f000 f8d6 	bl	80136b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801350c:	4b11      	ldr	r3, [pc, #68]	; (8013554 <xPortStartScheduler+0x134>)
 801350e:	2200      	movs	r2, #0
 8013510:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013512:	f000 f8f5 	bl	8013700 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013516:	4b10      	ldr	r3, [pc, #64]	; (8013558 <xPortStartScheduler+0x138>)
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	4a0f      	ldr	r2, [pc, #60]	; (8013558 <xPortStartScheduler+0x138>)
 801351c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013520:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013522:	f7ff ff69 	bl	80133f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013526:	f7ff f86d 	bl	8012604 <vTaskSwitchContext>
	prvTaskExitError();
 801352a:	f7ff ff23 	bl	8013374 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801352e:	2300      	movs	r3, #0
}
 8013530:	4618      	mov	r0, r3
 8013532:	3718      	adds	r7, #24
 8013534:	46bd      	mov	sp, r7
 8013536:	bd80      	pop	{r7, pc}
 8013538:	e000ed00 	.word	0xe000ed00
 801353c:	410fc271 	.word	0x410fc271
 8013540:	410fc270 	.word	0x410fc270
 8013544:	e000e400 	.word	0xe000e400
 8013548:	20000f58 	.word	0x20000f58
 801354c:	20000f5c 	.word	0x20000f5c
 8013550:	e000ed20 	.word	0xe000ed20
 8013554:	20000088 	.word	0x20000088
 8013558:	e000ef34 	.word	0xe000ef34

0801355c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801355c:	b480      	push	{r7}
 801355e:	b083      	sub	sp, #12
 8013560:	af00      	add	r7, sp, #0
 8013562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013566:	f383 8811 	msr	BASEPRI, r3
 801356a:	f3bf 8f6f 	isb	sy
 801356e:	f3bf 8f4f 	dsb	sy
 8013572:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013574:	4b0e      	ldr	r3, [pc, #56]	; (80135b0 <vPortEnterCritical+0x54>)
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	3301      	adds	r3, #1
 801357a:	4a0d      	ldr	r2, [pc, #52]	; (80135b0 <vPortEnterCritical+0x54>)
 801357c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801357e:	4b0c      	ldr	r3, [pc, #48]	; (80135b0 <vPortEnterCritical+0x54>)
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	2b01      	cmp	r3, #1
 8013584:	d10e      	bne.n	80135a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013586:	4b0b      	ldr	r3, [pc, #44]	; (80135b4 <vPortEnterCritical+0x58>)
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	b2db      	uxtb	r3, r3
 801358c:	2b00      	cmp	r3, #0
 801358e:	d009      	beq.n	80135a4 <vPortEnterCritical+0x48>
 8013590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013594:	f383 8811 	msr	BASEPRI, r3
 8013598:	f3bf 8f6f 	isb	sy
 801359c:	f3bf 8f4f 	dsb	sy
 80135a0:	603b      	str	r3, [r7, #0]
 80135a2:	e7fe      	b.n	80135a2 <vPortEnterCritical+0x46>
	}
}
 80135a4:	bf00      	nop
 80135a6:	370c      	adds	r7, #12
 80135a8:	46bd      	mov	sp, r7
 80135aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ae:	4770      	bx	lr
 80135b0:	20000088 	.word	0x20000088
 80135b4:	e000ed04 	.word	0xe000ed04

080135b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80135b8:	b480      	push	{r7}
 80135ba:	b083      	sub	sp, #12
 80135bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80135be:	4b11      	ldr	r3, [pc, #68]	; (8013604 <vPortExitCritical+0x4c>)
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d109      	bne.n	80135da <vPortExitCritical+0x22>
 80135c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135ca:	f383 8811 	msr	BASEPRI, r3
 80135ce:	f3bf 8f6f 	isb	sy
 80135d2:	f3bf 8f4f 	dsb	sy
 80135d6:	607b      	str	r3, [r7, #4]
 80135d8:	e7fe      	b.n	80135d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80135da:	4b0a      	ldr	r3, [pc, #40]	; (8013604 <vPortExitCritical+0x4c>)
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	3b01      	subs	r3, #1
 80135e0:	4a08      	ldr	r2, [pc, #32]	; (8013604 <vPortExitCritical+0x4c>)
 80135e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80135e4:	4b07      	ldr	r3, [pc, #28]	; (8013604 <vPortExitCritical+0x4c>)
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d104      	bne.n	80135f6 <vPortExitCritical+0x3e>
 80135ec:	2300      	movs	r3, #0
 80135ee:	603b      	str	r3, [r7, #0]
	__asm volatile
 80135f0:	683b      	ldr	r3, [r7, #0]
 80135f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80135f6:	bf00      	nop
 80135f8:	370c      	adds	r7, #12
 80135fa:	46bd      	mov	sp, r7
 80135fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013600:	4770      	bx	lr
 8013602:	bf00      	nop
 8013604:	20000088 	.word	0x20000088
	...

08013610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013610:	f3ef 8009 	mrs	r0, PSP
 8013614:	f3bf 8f6f 	isb	sy
 8013618:	4b15      	ldr	r3, [pc, #84]	; (8013670 <pxCurrentTCBConst>)
 801361a:	681a      	ldr	r2, [r3, #0]
 801361c:	f01e 0f10 	tst.w	lr, #16
 8013620:	bf08      	it	eq
 8013622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801362a:	6010      	str	r0, [r2, #0]
 801362c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013630:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013634:	f380 8811 	msr	BASEPRI, r0
 8013638:	f3bf 8f4f 	dsb	sy
 801363c:	f3bf 8f6f 	isb	sy
 8013640:	f7fe ffe0 	bl	8012604 <vTaskSwitchContext>
 8013644:	f04f 0000 	mov.w	r0, #0
 8013648:	f380 8811 	msr	BASEPRI, r0
 801364c:	bc09      	pop	{r0, r3}
 801364e:	6819      	ldr	r1, [r3, #0]
 8013650:	6808      	ldr	r0, [r1, #0]
 8013652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013656:	f01e 0f10 	tst.w	lr, #16
 801365a:	bf08      	it	eq
 801365c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013660:	f380 8809 	msr	PSP, r0
 8013664:	f3bf 8f6f 	isb	sy
 8013668:	4770      	bx	lr
 801366a:	bf00      	nop
 801366c:	f3af 8000 	nop.w

08013670 <pxCurrentTCBConst>:
 8013670:	2000092c 	.word	0x2000092c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013674:	bf00      	nop
 8013676:	bf00      	nop

08013678 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013678:	b580      	push	{r7, lr}
 801367a:	b082      	sub	sp, #8
 801367c:	af00      	add	r7, sp, #0
	__asm volatile
 801367e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013682:	f383 8811 	msr	BASEPRI, r3
 8013686:	f3bf 8f6f 	isb	sy
 801368a:	f3bf 8f4f 	dsb	sy
 801368e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013690:	f7fe ff00 	bl	8012494 <xTaskIncrementTick>
 8013694:	4603      	mov	r3, r0
 8013696:	2b00      	cmp	r3, #0
 8013698:	d003      	beq.n	80136a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801369a:	4b06      	ldr	r3, [pc, #24]	; (80136b4 <SysTick_Handler+0x3c>)
 801369c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136a0:	601a      	str	r2, [r3, #0]
 80136a2:	2300      	movs	r3, #0
 80136a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80136a6:	683b      	ldr	r3, [r7, #0]
 80136a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80136ac:	bf00      	nop
 80136ae:	3708      	adds	r7, #8
 80136b0:	46bd      	mov	sp, r7
 80136b2:	bd80      	pop	{r7, pc}
 80136b4:	e000ed04 	.word	0xe000ed04

080136b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80136b8:	b480      	push	{r7}
 80136ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80136bc:	4b0b      	ldr	r3, [pc, #44]	; (80136ec <vPortSetupTimerInterrupt+0x34>)
 80136be:	2200      	movs	r2, #0
 80136c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80136c2:	4b0b      	ldr	r3, [pc, #44]	; (80136f0 <vPortSetupTimerInterrupt+0x38>)
 80136c4:	2200      	movs	r2, #0
 80136c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80136c8:	4b0a      	ldr	r3, [pc, #40]	; (80136f4 <vPortSetupTimerInterrupt+0x3c>)
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	4a0a      	ldr	r2, [pc, #40]	; (80136f8 <vPortSetupTimerInterrupt+0x40>)
 80136ce:	fba2 2303 	umull	r2, r3, r2, r3
 80136d2:	099b      	lsrs	r3, r3, #6
 80136d4:	4a09      	ldr	r2, [pc, #36]	; (80136fc <vPortSetupTimerInterrupt+0x44>)
 80136d6:	3b01      	subs	r3, #1
 80136d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80136da:	4b04      	ldr	r3, [pc, #16]	; (80136ec <vPortSetupTimerInterrupt+0x34>)
 80136dc:	2207      	movs	r2, #7
 80136de:	601a      	str	r2, [r3, #0]
}
 80136e0:	bf00      	nop
 80136e2:	46bd      	mov	sp, r7
 80136e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e8:	4770      	bx	lr
 80136ea:	bf00      	nop
 80136ec:	e000e010 	.word	0xe000e010
 80136f0:	e000e018 	.word	0xe000e018
 80136f4:	20000000 	.word	0x20000000
 80136f8:	10624dd3 	.word	0x10624dd3
 80136fc:	e000e014 	.word	0xe000e014

08013700 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013700:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013710 <vPortEnableVFP+0x10>
 8013704:	6801      	ldr	r1, [r0, #0]
 8013706:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801370a:	6001      	str	r1, [r0, #0]
 801370c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801370e:	bf00      	nop
 8013710:	e000ed88 	.word	0xe000ed88

08013714 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013714:	b480      	push	{r7}
 8013716:	b085      	sub	sp, #20
 8013718:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801371a:	f3ef 8305 	mrs	r3, IPSR
 801371e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	2b0f      	cmp	r3, #15
 8013724:	d913      	bls.n	801374e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013726:	4a16      	ldr	r2, [pc, #88]	; (8013780 <vPortValidateInterruptPriority+0x6c>)
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	4413      	add	r3, r2
 801372c:	781b      	ldrb	r3, [r3, #0]
 801372e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013730:	4b14      	ldr	r3, [pc, #80]	; (8013784 <vPortValidateInterruptPriority+0x70>)
 8013732:	781b      	ldrb	r3, [r3, #0]
 8013734:	7afa      	ldrb	r2, [r7, #11]
 8013736:	429a      	cmp	r2, r3
 8013738:	d209      	bcs.n	801374e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801373a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801373e:	f383 8811 	msr	BASEPRI, r3
 8013742:	f3bf 8f6f 	isb	sy
 8013746:	f3bf 8f4f 	dsb	sy
 801374a:	607b      	str	r3, [r7, #4]
 801374c:	e7fe      	b.n	801374c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801374e:	4b0e      	ldr	r3, [pc, #56]	; (8013788 <vPortValidateInterruptPriority+0x74>)
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013756:	4b0d      	ldr	r3, [pc, #52]	; (801378c <vPortValidateInterruptPriority+0x78>)
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	429a      	cmp	r2, r3
 801375c:	d909      	bls.n	8013772 <vPortValidateInterruptPriority+0x5e>
 801375e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013762:	f383 8811 	msr	BASEPRI, r3
 8013766:	f3bf 8f6f 	isb	sy
 801376a:	f3bf 8f4f 	dsb	sy
 801376e:	603b      	str	r3, [r7, #0]
 8013770:	e7fe      	b.n	8013770 <vPortValidateInterruptPriority+0x5c>
	}
 8013772:	bf00      	nop
 8013774:	3714      	adds	r7, #20
 8013776:	46bd      	mov	sp, r7
 8013778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377c:	4770      	bx	lr
 801377e:	bf00      	nop
 8013780:	e000e3f0 	.word	0xe000e3f0
 8013784:	20000f58 	.word	0x20000f58
 8013788:	e000ed0c 	.word	0xe000ed0c
 801378c:	20000f5c 	.word	0x20000f5c

08013790 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013790:	b580      	push	{r7, lr}
 8013792:	b08a      	sub	sp, #40	; 0x28
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013798:	2300      	movs	r3, #0
 801379a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801379c:	f7fe fdc0 	bl	8012320 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80137a0:	4b57      	ldr	r3, [pc, #348]	; (8013900 <pvPortMalloc+0x170>)
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d101      	bne.n	80137ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80137a8:	f000 f90c 	bl	80139c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80137ac:	4b55      	ldr	r3, [pc, #340]	; (8013904 <pvPortMalloc+0x174>)
 80137ae:	681a      	ldr	r2, [r3, #0]
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	4013      	ands	r3, r2
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	f040 808c 	bne.w	80138d2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d01c      	beq.n	80137fa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80137c0:	2208      	movs	r2, #8
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	4413      	add	r3, r2
 80137c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	f003 0307 	and.w	r3, r3, #7
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d013      	beq.n	80137fa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	f023 0307 	bic.w	r3, r3, #7
 80137d8:	3308      	adds	r3, #8
 80137da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	f003 0307 	and.w	r3, r3, #7
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d009      	beq.n	80137fa <pvPortMalloc+0x6a>
 80137e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137ea:	f383 8811 	msr	BASEPRI, r3
 80137ee:	f3bf 8f6f 	isb	sy
 80137f2:	f3bf 8f4f 	dsb	sy
 80137f6:	617b      	str	r3, [r7, #20]
 80137f8:	e7fe      	b.n	80137f8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d068      	beq.n	80138d2 <pvPortMalloc+0x142>
 8013800:	4b41      	ldr	r3, [pc, #260]	; (8013908 <pvPortMalloc+0x178>)
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	687a      	ldr	r2, [r7, #4]
 8013806:	429a      	cmp	r2, r3
 8013808:	d863      	bhi.n	80138d2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801380a:	4b40      	ldr	r3, [pc, #256]	; (801390c <pvPortMalloc+0x17c>)
 801380c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801380e:	4b3f      	ldr	r3, [pc, #252]	; (801390c <pvPortMalloc+0x17c>)
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013814:	e004      	b.n	8013820 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8013816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013818:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013822:	685b      	ldr	r3, [r3, #4]
 8013824:	687a      	ldr	r2, [r7, #4]
 8013826:	429a      	cmp	r2, r3
 8013828:	d903      	bls.n	8013832 <pvPortMalloc+0xa2>
 801382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d1f1      	bne.n	8013816 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013832:	4b33      	ldr	r3, [pc, #204]	; (8013900 <pvPortMalloc+0x170>)
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013838:	429a      	cmp	r2, r3
 801383a:	d04a      	beq.n	80138d2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801383c:	6a3b      	ldr	r3, [r7, #32]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	2208      	movs	r2, #8
 8013842:	4413      	add	r3, r2
 8013844:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013848:	681a      	ldr	r2, [r3, #0]
 801384a:	6a3b      	ldr	r3, [r7, #32]
 801384c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013850:	685a      	ldr	r2, [r3, #4]
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	1ad2      	subs	r2, r2, r3
 8013856:	2308      	movs	r3, #8
 8013858:	005b      	lsls	r3, r3, #1
 801385a:	429a      	cmp	r2, r3
 801385c:	d91e      	bls.n	801389c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801385e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	4413      	add	r3, r2
 8013864:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013866:	69bb      	ldr	r3, [r7, #24]
 8013868:	f003 0307 	and.w	r3, r3, #7
 801386c:	2b00      	cmp	r3, #0
 801386e:	d009      	beq.n	8013884 <pvPortMalloc+0xf4>
 8013870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013874:	f383 8811 	msr	BASEPRI, r3
 8013878:	f3bf 8f6f 	isb	sy
 801387c:	f3bf 8f4f 	dsb	sy
 8013880:	613b      	str	r3, [r7, #16]
 8013882:	e7fe      	b.n	8013882 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013886:	685a      	ldr	r2, [r3, #4]
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	1ad2      	subs	r2, r2, r3
 801388c:	69bb      	ldr	r3, [r7, #24]
 801388e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013892:	687a      	ldr	r2, [r7, #4]
 8013894:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013896:	69b8      	ldr	r0, [r7, #24]
 8013898:	f000 f8f6 	bl	8013a88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801389c:	4b1a      	ldr	r3, [pc, #104]	; (8013908 <pvPortMalloc+0x178>)
 801389e:	681a      	ldr	r2, [r3, #0]
 80138a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138a2:	685b      	ldr	r3, [r3, #4]
 80138a4:	1ad3      	subs	r3, r2, r3
 80138a6:	4a18      	ldr	r2, [pc, #96]	; (8013908 <pvPortMalloc+0x178>)
 80138a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80138aa:	4b17      	ldr	r3, [pc, #92]	; (8013908 <pvPortMalloc+0x178>)
 80138ac:	681a      	ldr	r2, [r3, #0]
 80138ae:	4b18      	ldr	r3, [pc, #96]	; (8013910 <pvPortMalloc+0x180>)
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	429a      	cmp	r2, r3
 80138b4:	d203      	bcs.n	80138be <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80138b6:	4b14      	ldr	r3, [pc, #80]	; (8013908 <pvPortMalloc+0x178>)
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	4a15      	ldr	r2, [pc, #84]	; (8013910 <pvPortMalloc+0x180>)
 80138bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80138be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138c0:	685a      	ldr	r2, [r3, #4]
 80138c2:	4b10      	ldr	r3, [pc, #64]	; (8013904 <pvPortMalloc+0x174>)
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	431a      	orrs	r2, r3
 80138c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80138cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138ce:	2200      	movs	r2, #0
 80138d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80138d2:	f7fe fd33 	bl	801233c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80138d6:	69fb      	ldr	r3, [r7, #28]
 80138d8:	f003 0307 	and.w	r3, r3, #7
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d009      	beq.n	80138f4 <pvPortMalloc+0x164>
 80138e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138e4:	f383 8811 	msr	BASEPRI, r3
 80138e8:	f3bf 8f6f 	isb	sy
 80138ec:	f3bf 8f4f 	dsb	sy
 80138f0:	60fb      	str	r3, [r7, #12]
 80138f2:	e7fe      	b.n	80138f2 <pvPortMalloc+0x162>
	return pvReturn;
 80138f4:	69fb      	ldr	r3, [r7, #28]
}
 80138f6:	4618      	mov	r0, r3
 80138f8:	3728      	adds	r7, #40	; 0x28
 80138fa:	46bd      	mov	sp, r7
 80138fc:	bd80      	pop	{r7, pc}
 80138fe:	bf00      	nop
 8013900:	20004b68 	.word	0x20004b68
 8013904:	20004b74 	.word	0x20004b74
 8013908:	20004b6c 	.word	0x20004b6c
 801390c:	20004b60 	.word	0x20004b60
 8013910:	20004b70 	.word	0x20004b70

08013914 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013914:	b580      	push	{r7, lr}
 8013916:	b086      	sub	sp, #24
 8013918:	af00      	add	r7, sp, #0
 801391a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d046      	beq.n	80139b4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013926:	2308      	movs	r3, #8
 8013928:	425b      	negs	r3, r3
 801392a:	697a      	ldr	r2, [r7, #20]
 801392c:	4413      	add	r3, r2
 801392e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013930:	697b      	ldr	r3, [r7, #20]
 8013932:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013934:	693b      	ldr	r3, [r7, #16]
 8013936:	685a      	ldr	r2, [r3, #4]
 8013938:	4b20      	ldr	r3, [pc, #128]	; (80139bc <vPortFree+0xa8>)
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	4013      	ands	r3, r2
 801393e:	2b00      	cmp	r3, #0
 8013940:	d109      	bne.n	8013956 <vPortFree+0x42>
 8013942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013946:	f383 8811 	msr	BASEPRI, r3
 801394a:	f3bf 8f6f 	isb	sy
 801394e:	f3bf 8f4f 	dsb	sy
 8013952:	60fb      	str	r3, [r7, #12]
 8013954:	e7fe      	b.n	8013954 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013956:	693b      	ldr	r3, [r7, #16]
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d009      	beq.n	8013972 <vPortFree+0x5e>
 801395e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013962:	f383 8811 	msr	BASEPRI, r3
 8013966:	f3bf 8f6f 	isb	sy
 801396a:	f3bf 8f4f 	dsb	sy
 801396e:	60bb      	str	r3, [r7, #8]
 8013970:	e7fe      	b.n	8013970 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013972:	693b      	ldr	r3, [r7, #16]
 8013974:	685a      	ldr	r2, [r3, #4]
 8013976:	4b11      	ldr	r3, [pc, #68]	; (80139bc <vPortFree+0xa8>)
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	4013      	ands	r3, r2
 801397c:	2b00      	cmp	r3, #0
 801397e:	d019      	beq.n	80139b4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013980:	693b      	ldr	r3, [r7, #16]
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d115      	bne.n	80139b4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013988:	693b      	ldr	r3, [r7, #16]
 801398a:	685a      	ldr	r2, [r3, #4]
 801398c:	4b0b      	ldr	r3, [pc, #44]	; (80139bc <vPortFree+0xa8>)
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	43db      	mvns	r3, r3
 8013992:	401a      	ands	r2, r3
 8013994:	693b      	ldr	r3, [r7, #16]
 8013996:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013998:	f7fe fcc2 	bl	8012320 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801399c:	693b      	ldr	r3, [r7, #16]
 801399e:	685a      	ldr	r2, [r3, #4]
 80139a0:	4b07      	ldr	r3, [pc, #28]	; (80139c0 <vPortFree+0xac>)
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	4413      	add	r3, r2
 80139a6:	4a06      	ldr	r2, [pc, #24]	; (80139c0 <vPortFree+0xac>)
 80139a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80139aa:	6938      	ldr	r0, [r7, #16]
 80139ac:	f000 f86c 	bl	8013a88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80139b0:	f7fe fcc4 	bl	801233c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80139b4:	bf00      	nop
 80139b6:	3718      	adds	r7, #24
 80139b8:	46bd      	mov	sp, r7
 80139ba:	bd80      	pop	{r7, pc}
 80139bc:	20004b74 	.word	0x20004b74
 80139c0:	20004b6c 	.word	0x20004b6c

080139c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80139c4:	b480      	push	{r7}
 80139c6:	b085      	sub	sp, #20
 80139c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80139ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80139ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80139d0:	4b27      	ldr	r3, [pc, #156]	; (8013a70 <prvHeapInit+0xac>)
 80139d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	f003 0307 	and.w	r3, r3, #7
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d00c      	beq.n	80139f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	3307      	adds	r3, #7
 80139e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	f023 0307 	bic.w	r3, r3, #7
 80139ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80139ec:	68ba      	ldr	r2, [r7, #8]
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	1ad3      	subs	r3, r2, r3
 80139f2:	4a1f      	ldr	r2, [pc, #124]	; (8013a70 <prvHeapInit+0xac>)
 80139f4:	4413      	add	r3, r2
 80139f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80139fc:	4a1d      	ldr	r2, [pc, #116]	; (8013a74 <prvHeapInit+0xb0>)
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013a02:	4b1c      	ldr	r3, [pc, #112]	; (8013a74 <prvHeapInit+0xb0>)
 8013a04:	2200      	movs	r2, #0
 8013a06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	68ba      	ldr	r2, [r7, #8]
 8013a0c:	4413      	add	r3, r2
 8013a0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013a10:	2208      	movs	r2, #8
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	1a9b      	subs	r3, r3, r2
 8013a16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	f023 0307 	bic.w	r3, r3, #7
 8013a1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	4a15      	ldr	r2, [pc, #84]	; (8013a78 <prvHeapInit+0xb4>)
 8013a24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013a26:	4b14      	ldr	r3, [pc, #80]	; (8013a78 <prvHeapInit+0xb4>)
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013a2e:	4b12      	ldr	r3, [pc, #72]	; (8013a78 <prvHeapInit+0xb4>)
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	2200      	movs	r2, #0
 8013a34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013a3a:	683b      	ldr	r3, [r7, #0]
 8013a3c:	68fa      	ldr	r2, [r7, #12]
 8013a3e:	1ad2      	subs	r2, r2, r3
 8013a40:	683b      	ldr	r3, [r7, #0]
 8013a42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013a44:	4b0c      	ldr	r3, [pc, #48]	; (8013a78 <prvHeapInit+0xb4>)
 8013a46:	681a      	ldr	r2, [r3, #0]
 8013a48:	683b      	ldr	r3, [r7, #0]
 8013a4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013a4c:	683b      	ldr	r3, [r7, #0]
 8013a4e:	685b      	ldr	r3, [r3, #4]
 8013a50:	4a0a      	ldr	r2, [pc, #40]	; (8013a7c <prvHeapInit+0xb8>)
 8013a52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013a54:	683b      	ldr	r3, [r7, #0]
 8013a56:	685b      	ldr	r3, [r3, #4]
 8013a58:	4a09      	ldr	r2, [pc, #36]	; (8013a80 <prvHeapInit+0xbc>)
 8013a5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013a5c:	4b09      	ldr	r3, [pc, #36]	; (8013a84 <prvHeapInit+0xc0>)
 8013a5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013a62:	601a      	str	r2, [r3, #0]
}
 8013a64:	bf00      	nop
 8013a66:	3714      	adds	r7, #20
 8013a68:	46bd      	mov	sp, r7
 8013a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a6e:	4770      	bx	lr
 8013a70:	20000f60 	.word	0x20000f60
 8013a74:	20004b60 	.word	0x20004b60
 8013a78:	20004b68 	.word	0x20004b68
 8013a7c:	20004b70 	.word	0x20004b70
 8013a80:	20004b6c 	.word	0x20004b6c
 8013a84:	20004b74 	.word	0x20004b74

08013a88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013a88:	b480      	push	{r7}
 8013a8a:	b085      	sub	sp, #20
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013a90:	4b28      	ldr	r3, [pc, #160]	; (8013b34 <prvInsertBlockIntoFreeList+0xac>)
 8013a92:	60fb      	str	r3, [r7, #12]
 8013a94:	e002      	b.n	8013a9c <prvInsertBlockIntoFreeList+0x14>
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	60fb      	str	r3, [r7, #12]
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	687a      	ldr	r2, [r7, #4]
 8013aa2:	429a      	cmp	r2, r3
 8013aa4:	d8f7      	bhi.n	8013a96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	685b      	ldr	r3, [r3, #4]
 8013aae:	68ba      	ldr	r2, [r7, #8]
 8013ab0:	4413      	add	r3, r2
 8013ab2:	687a      	ldr	r2, [r7, #4]
 8013ab4:	429a      	cmp	r2, r3
 8013ab6:	d108      	bne.n	8013aca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	685a      	ldr	r2, [r3, #4]
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	685b      	ldr	r3, [r3, #4]
 8013ac0:	441a      	add	r2, r3
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	685b      	ldr	r3, [r3, #4]
 8013ad2:	68ba      	ldr	r2, [r7, #8]
 8013ad4:	441a      	add	r2, r3
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	429a      	cmp	r2, r3
 8013adc:	d118      	bne.n	8013b10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	681a      	ldr	r2, [r3, #0]
 8013ae2:	4b15      	ldr	r3, [pc, #84]	; (8013b38 <prvInsertBlockIntoFreeList+0xb0>)
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	429a      	cmp	r2, r3
 8013ae8:	d00d      	beq.n	8013b06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	685a      	ldr	r2, [r3, #4]
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	685b      	ldr	r3, [r3, #4]
 8013af4:	441a      	add	r2, r3
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	681a      	ldr	r2, [r3, #0]
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	601a      	str	r2, [r3, #0]
 8013b04:	e008      	b.n	8013b18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013b06:	4b0c      	ldr	r3, [pc, #48]	; (8013b38 <prvInsertBlockIntoFreeList+0xb0>)
 8013b08:	681a      	ldr	r2, [r3, #0]
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	601a      	str	r2, [r3, #0]
 8013b0e:	e003      	b.n	8013b18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	681a      	ldr	r2, [r3, #0]
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013b18:	68fa      	ldr	r2, [r7, #12]
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	429a      	cmp	r2, r3
 8013b1e:	d002      	beq.n	8013b26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	687a      	ldr	r2, [r7, #4]
 8013b24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013b26:	bf00      	nop
 8013b28:	3714      	adds	r7, #20
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b30:	4770      	bx	lr
 8013b32:	bf00      	nop
 8013b34:	20004b60 	.word	0x20004b60
 8013b38:	20004b68 	.word	0x20004b68

08013b3c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8013b40:	2201      	movs	r2, #1
 8013b42:	490e      	ldr	r1, [pc, #56]	; (8013b7c <MX_USB_HOST_Init+0x40>)
 8013b44:	480e      	ldr	r0, [pc, #56]	; (8013b80 <MX_USB_HOST_Init+0x44>)
 8013b46:	f7f8 ff29 	bl	800c99c <USBH_Init>
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d001      	beq.n	8013b54 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8013b50:	f7ed fe02 	bl	8001758 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8013b54:	490b      	ldr	r1, [pc, #44]	; (8013b84 <MX_USB_HOST_Init+0x48>)
 8013b56:	480a      	ldr	r0, [pc, #40]	; (8013b80 <MX_USB_HOST_Init+0x44>)
 8013b58:	f7f8 ffd0 	bl	800cafc <USBH_RegisterClass>
 8013b5c:	4603      	mov	r3, r0
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d001      	beq.n	8013b66 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8013b62:	f7ed fdf9 	bl	8001758 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8013b66:	4806      	ldr	r0, [pc, #24]	; (8013b80 <MX_USB_HOST_Init+0x44>)
 8013b68:	f7f9 f854 	bl	800cc14 <USBH_Start>
 8013b6c:	4603      	mov	r3, r0
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d001      	beq.n	8013b76 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8013b72:	f7ed fdf1 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8013b76:	bf00      	nop
 8013b78:	bd80      	pop	{r7, pc}
 8013b7a:	bf00      	nop
 8013b7c:	08013b89 	.word	0x08013b89
 8013b80:	2003ddac 	.word	0x2003ddac
 8013b84:	20000064 	.word	0x20000064

08013b88 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8013b88:	b480      	push	{r7}
 8013b8a:	b083      	sub	sp, #12
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
 8013b90:	460b      	mov	r3, r1
 8013b92:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8013b94:	78fb      	ldrb	r3, [r7, #3]
 8013b96:	3b01      	subs	r3, #1
 8013b98:	2b04      	cmp	r3, #4
 8013b9a:	d819      	bhi.n	8013bd0 <USBH_UserProcess+0x48>
 8013b9c:	a201      	add	r2, pc, #4	; (adr r2, 8013ba4 <USBH_UserProcess+0x1c>)
 8013b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ba2:	bf00      	nop
 8013ba4:	08013bd1 	.word	0x08013bd1
 8013ba8:	08013bc1 	.word	0x08013bc1
 8013bac:	08013bd1 	.word	0x08013bd1
 8013bb0:	08013bc9 	.word	0x08013bc9
 8013bb4:	08013bb9 	.word	0x08013bb9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8013bb8:	4b09      	ldr	r3, [pc, #36]	; (8013be0 <USBH_UserProcess+0x58>)
 8013bba:	2203      	movs	r2, #3
 8013bbc:	701a      	strb	r2, [r3, #0]
  break;
 8013bbe:	e008      	b.n	8013bd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8013bc0:	4b07      	ldr	r3, [pc, #28]	; (8013be0 <USBH_UserProcess+0x58>)
 8013bc2:	2202      	movs	r2, #2
 8013bc4:	701a      	strb	r2, [r3, #0]
  break;
 8013bc6:	e004      	b.n	8013bd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8013bc8:	4b05      	ldr	r3, [pc, #20]	; (8013be0 <USBH_UserProcess+0x58>)
 8013bca:	2201      	movs	r2, #1
 8013bcc:	701a      	strb	r2, [r3, #0]
  break;
 8013bce:	e000      	b.n	8013bd2 <USBH_UserProcess+0x4a>

  default:
  break;
 8013bd0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8013bd2:	bf00      	nop
 8013bd4:	370c      	adds	r7, #12
 8013bd6:	46bd      	mov	sp, r7
 8013bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bdc:	4770      	bx	lr
 8013bde:	bf00      	nop
 8013be0:	20004b78 	.word	0x20004b78

08013be4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b08a      	sub	sp, #40	; 0x28
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013bec:	f107 0314 	add.w	r3, r7, #20
 8013bf0:	2200      	movs	r2, #0
 8013bf2:	601a      	str	r2, [r3, #0]
 8013bf4:	605a      	str	r2, [r3, #4]
 8013bf6:	609a      	str	r2, [r3, #8]
 8013bf8:	60da      	str	r2, [r3, #12]
 8013bfa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013c04:	d147      	bne.n	8013c96 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013c06:	2300      	movs	r3, #0
 8013c08:	613b      	str	r3, [r7, #16]
 8013c0a:	4b25      	ldr	r3, [pc, #148]	; (8013ca0 <HAL_HCD_MspInit+0xbc>)
 8013c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c0e:	4a24      	ldr	r2, [pc, #144]	; (8013ca0 <HAL_HCD_MspInit+0xbc>)
 8013c10:	f043 0301 	orr.w	r3, r3, #1
 8013c14:	6313      	str	r3, [r2, #48]	; 0x30
 8013c16:	4b22      	ldr	r3, [pc, #136]	; (8013ca0 <HAL_HCD_MspInit+0xbc>)
 8013c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c1a:	f003 0301 	and.w	r3, r3, #1
 8013c1e:	613b      	str	r3, [r7, #16]
 8013c20:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8013c22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013c28:	2300      	movs	r3, #0
 8013c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8013c30:	f107 0314 	add.w	r3, r7, #20
 8013c34:	4619      	mov	r1, r3
 8013c36:	481b      	ldr	r0, [pc, #108]	; (8013ca4 <HAL_HCD_MspInit+0xc0>)
 8013c38:	f7f0 ffac 	bl	8004b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8013c3c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8013c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013c42:	2302      	movs	r3, #2
 8013c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c46:	2300      	movs	r3, #0
 8013c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013c4a:	2303      	movs	r3, #3
 8013c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8013c4e:	230a      	movs	r3, #10
 8013c50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013c52:	f107 0314 	add.w	r3, r7, #20
 8013c56:	4619      	mov	r1, r3
 8013c58:	4812      	ldr	r0, [pc, #72]	; (8013ca4 <HAL_HCD_MspInit+0xc0>)
 8013c5a:	f7f0 ff9b 	bl	8004b94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013c5e:	4b10      	ldr	r3, [pc, #64]	; (8013ca0 <HAL_HCD_MspInit+0xbc>)
 8013c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c62:	4a0f      	ldr	r2, [pc, #60]	; (8013ca0 <HAL_HCD_MspInit+0xbc>)
 8013c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c68:	6353      	str	r3, [r2, #52]	; 0x34
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	60fb      	str	r3, [r7, #12]
 8013c6e:	4b0c      	ldr	r3, [pc, #48]	; (8013ca0 <HAL_HCD_MspInit+0xbc>)
 8013c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013c72:	4a0b      	ldr	r2, [pc, #44]	; (8013ca0 <HAL_HCD_MspInit+0xbc>)
 8013c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013c78:	6453      	str	r3, [r2, #68]	; 0x44
 8013c7a:	4b09      	ldr	r3, [pc, #36]	; (8013ca0 <HAL_HCD_MspInit+0xbc>)
 8013c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013c82:	60fb      	str	r3, [r7, #12]
 8013c84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8013c86:	2200      	movs	r2, #0
 8013c88:	2100      	movs	r1, #0
 8013c8a:	2043      	movs	r0, #67	; 0x43
 8013c8c:	f7f0 faa0 	bl	80041d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8013c90:	2043      	movs	r0, #67	; 0x43
 8013c92:	f7f0 fab9 	bl	8004208 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013c96:	bf00      	nop
 8013c98:	3728      	adds	r7, #40	; 0x28
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	bd80      	pop	{r7, pc}
 8013c9e:	bf00      	nop
 8013ca0:	40023800 	.word	0x40023800
 8013ca4:	40020000 	.word	0x40020000

08013ca8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b082      	sub	sp, #8
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	f7f9 fc59 	bl	800d56e <USBH_LL_IncTimer>
}
 8013cbc:	bf00      	nop
 8013cbe:	3708      	adds	r7, #8
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	bd80      	pop	{r7, pc}

08013cc4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b082      	sub	sp, #8
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	f7f9 fc9d 	bl	800d612 <USBH_LL_Connect>
}
 8013cd8:	bf00      	nop
 8013cda:	3708      	adds	r7, #8
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	bd80      	pop	{r7, pc}

08013ce0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b082      	sub	sp, #8
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f7f9 fcb2 	bl	800d658 <USBH_LL_Disconnect>
}
 8013cf4:	bf00      	nop
 8013cf6:	3708      	adds	r7, #8
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bd80      	pop	{r7, pc}

08013cfc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b082      	sub	sp, #8
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	6078      	str	r0, [r7, #4]
 8013d04:	460b      	mov	r3, r1
 8013d06:	70fb      	strb	r3, [r7, #3]
 8013d08:	4613      	mov	r3, r2
 8013d0a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013d12:	4618      	mov	r0, r3
 8013d14:	f7f9 fce9 	bl	800d6ea <USBH_LL_NotifyURBChange>
#endif
}
 8013d18:	bf00      	nop
 8013d1a:	3708      	adds	r7, #8
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	bd80      	pop	{r7, pc}

08013d20 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8013d20:	b580      	push	{r7, lr}
 8013d22:	b082      	sub	sp, #8
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013d2e:	4618      	mov	r0, r3
 8013d30:	f7f9 fc47 	bl	800d5c2 <USBH_LL_PortEnabled>
}
 8013d34:	bf00      	nop
 8013d36:	3708      	adds	r7, #8
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	bd80      	pop	{r7, pc}

08013d3c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8013d3c:	b580      	push	{r7, lr}
 8013d3e:	b082      	sub	sp, #8
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	f7f9 fc53 	bl	800d5f6 <USBH_LL_PortDisabled>
}
 8013d50:	bf00      	nop
 8013d52:	3708      	adds	r7, #8
 8013d54:	46bd      	mov	sp, r7
 8013d56:	bd80      	pop	{r7, pc}

08013d58 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8013d58:	b580      	push	{r7, lr}
 8013d5a:	b082      	sub	sp, #8
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8013d66:	2b01      	cmp	r3, #1
 8013d68:	d12a      	bne.n	8013dc0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8013d6a:	4a18      	ldr	r2, [pc, #96]	; (8013dcc <USBH_LL_Init+0x74>)
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	4a15      	ldr	r2, [pc, #84]	; (8013dcc <USBH_LL_Init+0x74>)
 8013d76:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013d7a:	4b14      	ldr	r3, [pc, #80]	; (8013dcc <USBH_LL_Init+0x74>)
 8013d7c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8013d80:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8013d82:	4b12      	ldr	r3, [pc, #72]	; (8013dcc <USBH_LL_Init+0x74>)
 8013d84:	220c      	movs	r2, #12
 8013d86:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8013d88:	4b10      	ldr	r3, [pc, #64]	; (8013dcc <USBH_LL_Init+0x74>)
 8013d8a:	2201      	movs	r2, #1
 8013d8c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8013d8e:	4b0f      	ldr	r3, [pc, #60]	; (8013dcc <USBH_LL_Init+0x74>)
 8013d90:	2200      	movs	r2, #0
 8013d92:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8013d94:	4b0d      	ldr	r3, [pc, #52]	; (8013dcc <USBH_LL_Init+0x74>)
 8013d96:	2202      	movs	r2, #2
 8013d98:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013d9a:	4b0c      	ldr	r3, [pc, #48]	; (8013dcc <USBH_LL_Init+0x74>)
 8013d9c:	2200      	movs	r2, #0
 8013d9e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8013da0:	480a      	ldr	r0, [pc, #40]	; (8013dcc <USBH_LL_Init+0x74>)
 8013da2:	f7f1 f8f8 	bl	8004f96 <HAL_HCD_Init>
 8013da6:	4603      	mov	r3, r0
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d001      	beq.n	8013db0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8013dac:	f7ed fcd4 	bl	8001758 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8013db0:	4806      	ldr	r0, [pc, #24]	; (8013dcc <USBH_LL_Init+0x74>)
 8013db2:	f7f1 fcfb 	bl	80057ac <HAL_HCD_GetCurrentFrame>
 8013db6:	4603      	mov	r3, r0
 8013db8:	4619      	mov	r1, r3
 8013dba:	6878      	ldr	r0, [r7, #4]
 8013dbc:	f7f9 fbc8 	bl	800d550 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8013dc0:	2300      	movs	r3, #0
}
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	3708      	adds	r7, #8
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	bd80      	pop	{r7, pc}
 8013dca:	bf00      	nop
 8013dcc:	2003e190 	.word	0x2003e190

08013dd0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b084      	sub	sp, #16
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013dd8:	2300      	movs	r3, #0
 8013dda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013ddc:	2300      	movs	r3, #0
 8013dde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013de6:	4618      	mov	r0, r3
 8013de8:	f7f1 fc68 	bl	80056bc <HAL_HCD_Start>
 8013dec:	4603      	mov	r3, r0
 8013dee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013df0:	7bfb      	ldrb	r3, [r7, #15]
 8013df2:	4618      	mov	r0, r3
 8013df4:	f000 f95c 	bl	80140b0 <USBH_Get_USB_Status>
 8013df8:	4603      	mov	r3, r0
 8013dfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013dfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8013dfe:	4618      	mov	r0, r3
 8013e00:	3710      	adds	r7, #16
 8013e02:	46bd      	mov	sp, r7
 8013e04:	bd80      	pop	{r7, pc}

08013e06 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8013e06:	b580      	push	{r7, lr}
 8013e08:	b084      	sub	sp, #16
 8013e0a:	af00      	add	r7, sp, #0
 8013e0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013e0e:	2300      	movs	r3, #0
 8013e10:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013e12:	2300      	movs	r3, #0
 8013e14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	f7f1 fc70 	bl	8005702 <HAL_HCD_Stop>
 8013e22:	4603      	mov	r3, r0
 8013e24:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013e26:	7bfb      	ldrb	r3, [r7, #15]
 8013e28:	4618      	mov	r0, r3
 8013e2a:	f000 f941 	bl	80140b0 <USBH_Get_USB_Status>
 8013e2e:	4603      	mov	r3, r0
 8013e30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013e32:	7bbb      	ldrb	r3, [r7, #14]
}
 8013e34:	4618      	mov	r0, r3
 8013e36:	3710      	adds	r7, #16
 8013e38:	46bd      	mov	sp, r7
 8013e3a:	bd80      	pop	{r7, pc}

08013e3c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8013e3c:	b580      	push	{r7, lr}
 8013e3e:	b084      	sub	sp, #16
 8013e40:	af00      	add	r7, sp, #0
 8013e42:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8013e44:	2301      	movs	r3, #1
 8013e46:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013e4e:	4618      	mov	r0, r3
 8013e50:	f7f1 fcba 	bl	80057c8 <HAL_HCD_GetCurrentSpeed>
 8013e54:	4603      	mov	r3, r0
 8013e56:	2b01      	cmp	r3, #1
 8013e58:	d007      	beq.n	8013e6a <USBH_LL_GetSpeed+0x2e>
 8013e5a:	2b01      	cmp	r3, #1
 8013e5c:	d302      	bcc.n	8013e64 <USBH_LL_GetSpeed+0x28>
 8013e5e:	2b02      	cmp	r3, #2
 8013e60:	d006      	beq.n	8013e70 <USBH_LL_GetSpeed+0x34>
 8013e62:	e008      	b.n	8013e76 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8013e64:	2300      	movs	r3, #0
 8013e66:	73fb      	strb	r3, [r7, #15]
    break;
 8013e68:	e008      	b.n	8013e7c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8013e6a:	2301      	movs	r3, #1
 8013e6c:	73fb      	strb	r3, [r7, #15]
    break;
 8013e6e:	e005      	b.n	8013e7c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8013e70:	2302      	movs	r3, #2
 8013e72:	73fb      	strb	r3, [r7, #15]
    break;
 8013e74:	e002      	b.n	8013e7c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8013e76:	2301      	movs	r3, #1
 8013e78:	73fb      	strb	r3, [r7, #15]
    break;
 8013e7a:	bf00      	nop
  }
  return  speed;
 8013e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e7e:	4618      	mov	r0, r3
 8013e80:	3710      	adds	r7, #16
 8013e82:	46bd      	mov	sp, r7
 8013e84:	bd80      	pop	{r7, pc}

08013e86 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8013e86:	b580      	push	{r7, lr}
 8013e88:	b084      	sub	sp, #16
 8013e8a:	af00      	add	r7, sp, #0
 8013e8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013e8e:	2300      	movs	r3, #0
 8013e90:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013e92:	2300      	movs	r3, #0
 8013e94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	f7f1 fc4d 	bl	800573c <HAL_HCD_ResetPort>
 8013ea2:	4603      	mov	r3, r0
 8013ea4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013ea6:	7bfb      	ldrb	r3, [r7, #15]
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	f000 f901 	bl	80140b0 <USBH_Get_USB_Status>
 8013eae:	4603      	mov	r3, r0
 8013eb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013eb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	3710      	adds	r7, #16
 8013eb8:	46bd      	mov	sp, r7
 8013eba:	bd80      	pop	{r7, pc}

08013ebc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	b082      	sub	sp, #8
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
 8013ec4:	460b      	mov	r3, r1
 8013ec6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013ece:	78fa      	ldrb	r2, [r7, #3]
 8013ed0:	4611      	mov	r1, r2
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	f7f1 fc55 	bl	8005782 <HAL_HCD_HC_GetXferCount>
 8013ed8:	4603      	mov	r3, r0
}
 8013eda:	4618      	mov	r0, r3
 8013edc:	3708      	adds	r7, #8
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	bd80      	pop	{r7, pc}

08013ee2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8013ee2:	b590      	push	{r4, r7, lr}
 8013ee4:	b089      	sub	sp, #36	; 0x24
 8013ee6:	af04      	add	r7, sp, #16
 8013ee8:	6078      	str	r0, [r7, #4]
 8013eea:	4608      	mov	r0, r1
 8013eec:	4611      	mov	r1, r2
 8013eee:	461a      	mov	r2, r3
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	70fb      	strb	r3, [r7, #3]
 8013ef4:	460b      	mov	r3, r1
 8013ef6:	70bb      	strb	r3, [r7, #2]
 8013ef8:	4613      	mov	r3, r2
 8013efa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013efc:	2300      	movs	r3, #0
 8013efe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013f00:	2300      	movs	r3, #0
 8013f02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8013f0a:	787c      	ldrb	r4, [r7, #1]
 8013f0c:	78ba      	ldrb	r2, [r7, #2]
 8013f0e:	78f9      	ldrb	r1, [r7, #3]
 8013f10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013f12:	9302      	str	r3, [sp, #8]
 8013f14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013f18:	9301      	str	r3, [sp, #4]
 8013f1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013f1e:	9300      	str	r3, [sp, #0]
 8013f20:	4623      	mov	r3, r4
 8013f22:	f7f1 f89a 	bl	800505a <HAL_HCD_HC_Init>
 8013f26:	4603      	mov	r3, r0
 8013f28:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8013f2a:	7bfb      	ldrb	r3, [r7, #15]
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f000 f8bf 	bl	80140b0 <USBH_Get_USB_Status>
 8013f32:	4603      	mov	r3, r0
 8013f34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013f36:	7bbb      	ldrb	r3, [r7, #14]
}
 8013f38:	4618      	mov	r0, r3
 8013f3a:	3714      	adds	r7, #20
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	bd90      	pop	{r4, r7, pc}

08013f40 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b084      	sub	sp, #16
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	6078      	str	r0, [r7, #4]
 8013f48:	460b      	mov	r3, r1
 8013f4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013f50:	2300      	movs	r3, #0
 8013f52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013f5a:	78fa      	ldrb	r2, [r7, #3]
 8013f5c:	4611      	mov	r1, r2
 8013f5e:	4618      	mov	r0, r3
 8013f60:	f7f1 f913 	bl	800518a <HAL_HCD_HC_Halt>
 8013f64:	4603      	mov	r3, r0
 8013f66:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013f68:	7bfb      	ldrb	r3, [r7, #15]
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f000 f8a0 	bl	80140b0 <USBH_Get_USB_Status>
 8013f70:	4603      	mov	r3, r0
 8013f72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013f74:	7bbb      	ldrb	r3, [r7, #14]
}
 8013f76:	4618      	mov	r0, r3
 8013f78:	3710      	adds	r7, #16
 8013f7a:	46bd      	mov	sp, r7
 8013f7c:	bd80      	pop	{r7, pc}

08013f7e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8013f7e:	b590      	push	{r4, r7, lr}
 8013f80:	b089      	sub	sp, #36	; 0x24
 8013f82:	af04      	add	r7, sp, #16
 8013f84:	6078      	str	r0, [r7, #4]
 8013f86:	4608      	mov	r0, r1
 8013f88:	4611      	mov	r1, r2
 8013f8a:	461a      	mov	r2, r3
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	70fb      	strb	r3, [r7, #3]
 8013f90:	460b      	mov	r3, r1
 8013f92:	70bb      	strb	r3, [r7, #2]
 8013f94:	4613      	mov	r3, r2
 8013f96:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013f98:	2300      	movs	r3, #0
 8013f9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013f9c:	2300      	movs	r3, #0
 8013f9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8013fa6:	787c      	ldrb	r4, [r7, #1]
 8013fa8:	78ba      	ldrb	r2, [r7, #2]
 8013faa:	78f9      	ldrb	r1, [r7, #3]
 8013fac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013fb0:	9303      	str	r3, [sp, #12]
 8013fb2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013fb4:	9302      	str	r3, [sp, #8]
 8013fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fb8:	9301      	str	r3, [sp, #4]
 8013fba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013fbe:	9300      	str	r3, [sp, #0]
 8013fc0:	4623      	mov	r3, r4
 8013fc2:	f7f1 f905 	bl	80051d0 <HAL_HCD_HC_SubmitRequest>
 8013fc6:	4603      	mov	r3, r0
 8013fc8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8013fca:	7bfb      	ldrb	r3, [r7, #15]
 8013fcc:	4618      	mov	r0, r3
 8013fce:	f000 f86f 	bl	80140b0 <USBH_Get_USB_Status>
 8013fd2:	4603      	mov	r3, r0
 8013fd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013fd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8013fd8:	4618      	mov	r0, r3
 8013fda:	3714      	adds	r7, #20
 8013fdc:	46bd      	mov	sp, r7
 8013fde:	bd90      	pop	{r4, r7, pc}

08013fe0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b082      	sub	sp, #8
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	6078      	str	r0, [r7, #4]
 8013fe8:	460b      	mov	r3, r1
 8013fea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013ff2:	78fa      	ldrb	r2, [r7, #3]
 8013ff4:	4611      	mov	r1, r2
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	f7f1 fbae 	bl	8005758 <HAL_HCD_HC_GetURBState>
 8013ffc:	4603      	mov	r3, r0
}
 8013ffe:	4618      	mov	r0, r3
 8014000:	3708      	adds	r7, #8
 8014002:	46bd      	mov	sp, r7
 8014004:	bd80      	pop	{r7, pc}

08014006 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8014006:	b580      	push	{r7, lr}
 8014008:	b082      	sub	sp, #8
 801400a:	af00      	add	r7, sp, #0
 801400c:	6078      	str	r0, [r7, #4]
 801400e:	460b      	mov	r3, r1
 8014010:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8014018:	2b01      	cmp	r3, #1
 801401a:	d103      	bne.n	8014024 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801401c:	78fb      	ldrb	r3, [r7, #3]
 801401e:	4618      	mov	r0, r3
 8014020:	f000 f872 	bl	8014108 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8014024:	20c8      	movs	r0, #200	; 0xc8
 8014026:	f7ef fd87 	bl	8003b38 <HAL_Delay>
  return USBH_OK;
 801402a:	2300      	movs	r3, #0
}
 801402c:	4618      	mov	r0, r3
 801402e:	3708      	adds	r7, #8
 8014030:	46bd      	mov	sp, r7
 8014032:	bd80      	pop	{r7, pc}

08014034 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8014034:	b480      	push	{r7}
 8014036:	b085      	sub	sp, #20
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
 801403c:	460b      	mov	r3, r1
 801403e:	70fb      	strb	r3, [r7, #3]
 8014040:	4613      	mov	r3, r2
 8014042:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801404a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801404c:	78fa      	ldrb	r2, [r7, #3]
 801404e:	68f9      	ldr	r1, [r7, #12]
 8014050:	4613      	mov	r3, r2
 8014052:	009b      	lsls	r3, r3, #2
 8014054:	4413      	add	r3, r2
 8014056:	00db      	lsls	r3, r3, #3
 8014058:	440b      	add	r3, r1
 801405a:	333b      	adds	r3, #59	; 0x3b
 801405c:	781b      	ldrb	r3, [r3, #0]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d00a      	beq.n	8014078 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8014062:	78fa      	ldrb	r2, [r7, #3]
 8014064:	68f9      	ldr	r1, [r7, #12]
 8014066:	4613      	mov	r3, r2
 8014068:	009b      	lsls	r3, r3, #2
 801406a:	4413      	add	r3, r2
 801406c:	00db      	lsls	r3, r3, #3
 801406e:	440b      	add	r3, r1
 8014070:	3350      	adds	r3, #80	; 0x50
 8014072:	78ba      	ldrb	r2, [r7, #2]
 8014074:	701a      	strb	r2, [r3, #0]
 8014076:	e009      	b.n	801408c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8014078:	78fa      	ldrb	r2, [r7, #3]
 801407a:	68f9      	ldr	r1, [r7, #12]
 801407c:	4613      	mov	r3, r2
 801407e:	009b      	lsls	r3, r3, #2
 8014080:	4413      	add	r3, r2
 8014082:	00db      	lsls	r3, r3, #3
 8014084:	440b      	add	r3, r1
 8014086:	3351      	adds	r3, #81	; 0x51
 8014088:	78ba      	ldrb	r2, [r7, #2]
 801408a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801408c:	2300      	movs	r3, #0
}
 801408e:	4618      	mov	r0, r3
 8014090:	3714      	adds	r7, #20
 8014092:	46bd      	mov	sp, r7
 8014094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014098:	4770      	bx	lr

0801409a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801409a:	b580      	push	{r7, lr}
 801409c:	b082      	sub	sp, #8
 801409e:	af00      	add	r7, sp, #0
 80140a0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80140a2:	6878      	ldr	r0, [r7, #4]
 80140a4:	f7ef fd48 	bl	8003b38 <HAL_Delay>
}
 80140a8:	bf00      	nop
 80140aa:	3708      	adds	r7, #8
 80140ac:	46bd      	mov	sp, r7
 80140ae:	bd80      	pop	{r7, pc}

080140b0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80140b0:	b480      	push	{r7}
 80140b2:	b085      	sub	sp, #20
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	4603      	mov	r3, r0
 80140b8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80140ba:	2300      	movs	r3, #0
 80140bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80140be:	79fb      	ldrb	r3, [r7, #7]
 80140c0:	2b03      	cmp	r3, #3
 80140c2:	d817      	bhi.n	80140f4 <USBH_Get_USB_Status+0x44>
 80140c4:	a201      	add	r2, pc, #4	; (adr r2, 80140cc <USBH_Get_USB_Status+0x1c>)
 80140c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140ca:	bf00      	nop
 80140cc:	080140dd 	.word	0x080140dd
 80140d0:	080140e3 	.word	0x080140e3
 80140d4:	080140e9 	.word	0x080140e9
 80140d8:	080140ef 	.word	0x080140ef
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80140dc:	2300      	movs	r3, #0
 80140de:	73fb      	strb	r3, [r7, #15]
    break;
 80140e0:	e00b      	b.n	80140fa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80140e2:	2302      	movs	r3, #2
 80140e4:	73fb      	strb	r3, [r7, #15]
    break;
 80140e6:	e008      	b.n	80140fa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80140e8:	2301      	movs	r3, #1
 80140ea:	73fb      	strb	r3, [r7, #15]
    break;
 80140ec:	e005      	b.n	80140fa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80140ee:	2302      	movs	r3, #2
 80140f0:	73fb      	strb	r3, [r7, #15]
    break;
 80140f2:	e002      	b.n	80140fa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80140f4:	2302      	movs	r3, #2
 80140f6:	73fb      	strb	r3, [r7, #15]
    break;
 80140f8:	bf00      	nop
  }
  return usb_status;
 80140fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80140fc:	4618      	mov	r0, r3
 80140fe:	3714      	adds	r7, #20
 8014100:	46bd      	mov	sp, r7
 8014102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014106:	4770      	bx	lr

08014108 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8014108:	b580      	push	{r7, lr}
 801410a:	b084      	sub	sp, #16
 801410c:	af00      	add	r7, sp, #0
 801410e:	4603      	mov	r3, r0
 8014110:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8014112:	79fb      	ldrb	r3, [r7, #7]
 8014114:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8014116:	79fb      	ldrb	r3, [r7, #7]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d102      	bne.n	8014122 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 801411c:	2301      	movs	r3, #1
 801411e:	73fb      	strb	r3, [r7, #15]
 8014120:	e001      	b.n	8014126 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8014122:	2300      	movs	r3, #0
 8014124:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 8014126:	7bfb      	ldrb	r3, [r7, #15]
 8014128:	461a      	mov	r2, r3
 801412a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801412e:	4803      	ldr	r0, [pc, #12]	; (801413c <MX_DriverVbusFS+0x34>)
 8014130:	f7f0 feda 	bl	8004ee8 <HAL_GPIO_WritePin>
}
 8014134:	bf00      	nop
 8014136:	3710      	adds	r7, #16
 8014138:	46bd      	mov	sp, r7
 801413a:	bd80      	pop	{r7, pc}
 801413c:	40021800 	.word	0x40021800

08014140 <__errno>:
 8014140:	4b01      	ldr	r3, [pc, #4]	; (8014148 <__errno+0x8>)
 8014142:	6818      	ldr	r0, [r3, #0]
 8014144:	4770      	bx	lr
 8014146:	bf00      	nop
 8014148:	2000008c 	.word	0x2000008c

0801414c <__libc_init_array>:
 801414c:	b570      	push	{r4, r5, r6, lr}
 801414e:	4e0d      	ldr	r6, [pc, #52]	; (8014184 <__libc_init_array+0x38>)
 8014150:	4c0d      	ldr	r4, [pc, #52]	; (8014188 <__libc_init_array+0x3c>)
 8014152:	1ba4      	subs	r4, r4, r6
 8014154:	10a4      	asrs	r4, r4, #2
 8014156:	2500      	movs	r5, #0
 8014158:	42a5      	cmp	r5, r4
 801415a:	d109      	bne.n	8014170 <__libc_init_array+0x24>
 801415c:	4e0b      	ldr	r6, [pc, #44]	; (801418c <__libc_init_array+0x40>)
 801415e:	4c0c      	ldr	r4, [pc, #48]	; (8014190 <__libc_init_array+0x44>)
 8014160:	f000 fc40 	bl	80149e4 <_init>
 8014164:	1ba4      	subs	r4, r4, r6
 8014166:	10a4      	asrs	r4, r4, #2
 8014168:	2500      	movs	r5, #0
 801416a:	42a5      	cmp	r5, r4
 801416c:	d105      	bne.n	801417a <__libc_init_array+0x2e>
 801416e:	bd70      	pop	{r4, r5, r6, pc}
 8014170:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014174:	4798      	blx	r3
 8014176:	3501      	adds	r5, #1
 8014178:	e7ee      	b.n	8014158 <__libc_init_array+0xc>
 801417a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801417e:	4798      	blx	r3
 8014180:	3501      	adds	r5, #1
 8014182:	e7f2      	b.n	801416a <__libc_init_array+0x1e>
 8014184:	08017780 	.word	0x08017780
 8014188:	08017780 	.word	0x08017780
 801418c:	08017780 	.word	0x08017780
 8014190:	08017784 	.word	0x08017784

08014194 <malloc>:
 8014194:	4b02      	ldr	r3, [pc, #8]	; (80141a0 <malloc+0xc>)
 8014196:	4601      	mov	r1, r0
 8014198:	6818      	ldr	r0, [r3, #0]
 801419a:	f000 b86d 	b.w	8014278 <_malloc_r>
 801419e:	bf00      	nop
 80141a0:	2000008c 	.word	0x2000008c

080141a4 <free>:
 80141a4:	4b02      	ldr	r3, [pc, #8]	; (80141b0 <free+0xc>)
 80141a6:	4601      	mov	r1, r0
 80141a8:	6818      	ldr	r0, [r3, #0]
 80141aa:	f000 b817 	b.w	80141dc <_free_r>
 80141ae:	bf00      	nop
 80141b0:	2000008c 	.word	0x2000008c

080141b4 <memcpy>:
 80141b4:	b510      	push	{r4, lr}
 80141b6:	1e43      	subs	r3, r0, #1
 80141b8:	440a      	add	r2, r1
 80141ba:	4291      	cmp	r1, r2
 80141bc:	d100      	bne.n	80141c0 <memcpy+0xc>
 80141be:	bd10      	pop	{r4, pc}
 80141c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80141c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80141c8:	e7f7      	b.n	80141ba <memcpy+0x6>

080141ca <memset>:
 80141ca:	4402      	add	r2, r0
 80141cc:	4603      	mov	r3, r0
 80141ce:	4293      	cmp	r3, r2
 80141d0:	d100      	bne.n	80141d4 <memset+0xa>
 80141d2:	4770      	bx	lr
 80141d4:	f803 1b01 	strb.w	r1, [r3], #1
 80141d8:	e7f9      	b.n	80141ce <memset+0x4>
	...

080141dc <_free_r>:
 80141dc:	b538      	push	{r3, r4, r5, lr}
 80141de:	4605      	mov	r5, r0
 80141e0:	2900      	cmp	r1, #0
 80141e2:	d045      	beq.n	8014270 <_free_r+0x94>
 80141e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80141e8:	1f0c      	subs	r4, r1, #4
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	bfb8      	it	lt
 80141ee:	18e4      	addlt	r4, r4, r3
 80141f0:	f000 f8d4 	bl	801439c <__malloc_lock>
 80141f4:	4a1f      	ldr	r2, [pc, #124]	; (8014274 <_free_r+0x98>)
 80141f6:	6813      	ldr	r3, [r2, #0]
 80141f8:	4610      	mov	r0, r2
 80141fa:	b933      	cbnz	r3, 801420a <_free_r+0x2e>
 80141fc:	6063      	str	r3, [r4, #4]
 80141fe:	6014      	str	r4, [r2, #0]
 8014200:	4628      	mov	r0, r5
 8014202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014206:	f000 b8ca 	b.w	801439e <__malloc_unlock>
 801420a:	42a3      	cmp	r3, r4
 801420c:	d90c      	bls.n	8014228 <_free_r+0x4c>
 801420e:	6821      	ldr	r1, [r4, #0]
 8014210:	1862      	adds	r2, r4, r1
 8014212:	4293      	cmp	r3, r2
 8014214:	bf04      	itt	eq
 8014216:	681a      	ldreq	r2, [r3, #0]
 8014218:	685b      	ldreq	r3, [r3, #4]
 801421a:	6063      	str	r3, [r4, #4]
 801421c:	bf04      	itt	eq
 801421e:	1852      	addeq	r2, r2, r1
 8014220:	6022      	streq	r2, [r4, #0]
 8014222:	6004      	str	r4, [r0, #0]
 8014224:	e7ec      	b.n	8014200 <_free_r+0x24>
 8014226:	4613      	mov	r3, r2
 8014228:	685a      	ldr	r2, [r3, #4]
 801422a:	b10a      	cbz	r2, 8014230 <_free_r+0x54>
 801422c:	42a2      	cmp	r2, r4
 801422e:	d9fa      	bls.n	8014226 <_free_r+0x4a>
 8014230:	6819      	ldr	r1, [r3, #0]
 8014232:	1858      	adds	r0, r3, r1
 8014234:	42a0      	cmp	r0, r4
 8014236:	d10b      	bne.n	8014250 <_free_r+0x74>
 8014238:	6820      	ldr	r0, [r4, #0]
 801423a:	4401      	add	r1, r0
 801423c:	1858      	adds	r0, r3, r1
 801423e:	4282      	cmp	r2, r0
 8014240:	6019      	str	r1, [r3, #0]
 8014242:	d1dd      	bne.n	8014200 <_free_r+0x24>
 8014244:	6810      	ldr	r0, [r2, #0]
 8014246:	6852      	ldr	r2, [r2, #4]
 8014248:	605a      	str	r2, [r3, #4]
 801424a:	4401      	add	r1, r0
 801424c:	6019      	str	r1, [r3, #0]
 801424e:	e7d7      	b.n	8014200 <_free_r+0x24>
 8014250:	d902      	bls.n	8014258 <_free_r+0x7c>
 8014252:	230c      	movs	r3, #12
 8014254:	602b      	str	r3, [r5, #0]
 8014256:	e7d3      	b.n	8014200 <_free_r+0x24>
 8014258:	6820      	ldr	r0, [r4, #0]
 801425a:	1821      	adds	r1, r4, r0
 801425c:	428a      	cmp	r2, r1
 801425e:	bf04      	itt	eq
 8014260:	6811      	ldreq	r1, [r2, #0]
 8014262:	6852      	ldreq	r2, [r2, #4]
 8014264:	6062      	str	r2, [r4, #4]
 8014266:	bf04      	itt	eq
 8014268:	1809      	addeq	r1, r1, r0
 801426a:	6021      	streq	r1, [r4, #0]
 801426c:	605c      	str	r4, [r3, #4]
 801426e:	e7c7      	b.n	8014200 <_free_r+0x24>
 8014270:	bd38      	pop	{r3, r4, r5, pc}
 8014272:	bf00      	nop
 8014274:	20004b7c 	.word	0x20004b7c

08014278 <_malloc_r>:
 8014278:	b570      	push	{r4, r5, r6, lr}
 801427a:	1ccd      	adds	r5, r1, #3
 801427c:	f025 0503 	bic.w	r5, r5, #3
 8014280:	3508      	adds	r5, #8
 8014282:	2d0c      	cmp	r5, #12
 8014284:	bf38      	it	cc
 8014286:	250c      	movcc	r5, #12
 8014288:	2d00      	cmp	r5, #0
 801428a:	4606      	mov	r6, r0
 801428c:	db01      	blt.n	8014292 <_malloc_r+0x1a>
 801428e:	42a9      	cmp	r1, r5
 8014290:	d903      	bls.n	801429a <_malloc_r+0x22>
 8014292:	230c      	movs	r3, #12
 8014294:	6033      	str	r3, [r6, #0]
 8014296:	2000      	movs	r0, #0
 8014298:	bd70      	pop	{r4, r5, r6, pc}
 801429a:	f000 f87f 	bl	801439c <__malloc_lock>
 801429e:	4a21      	ldr	r2, [pc, #132]	; (8014324 <_malloc_r+0xac>)
 80142a0:	6814      	ldr	r4, [r2, #0]
 80142a2:	4621      	mov	r1, r4
 80142a4:	b991      	cbnz	r1, 80142cc <_malloc_r+0x54>
 80142a6:	4c20      	ldr	r4, [pc, #128]	; (8014328 <_malloc_r+0xb0>)
 80142a8:	6823      	ldr	r3, [r4, #0]
 80142aa:	b91b      	cbnz	r3, 80142b4 <_malloc_r+0x3c>
 80142ac:	4630      	mov	r0, r6
 80142ae:	f000 f83d 	bl	801432c <_sbrk_r>
 80142b2:	6020      	str	r0, [r4, #0]
 80142b4:	4629      	mov	r1, r5
 80142b6:	4630      	mov	r0, r6
 80142b8:	f000 f838 	bl	801432c <_sbrk_r>
 80142bc:	1c43      	adds	r3, r0, #1
 80142be:	d124      	bne.n	801430a <_malloc_r+0x92>
 80142c0:	230c      	movs	r3, #12
 80142c2:	6033      	str	r3, [r6, #0]
 80142c4:	4630      	mov	r0, r6
 80142c6:	f000 f86a 	bl	801439e <__malloc_unlock>
 80142ca:	e7e4      	b.n	8014296 <_malloc_r+0x1e>
 80142cc:	680b      	ldr	r3, [r1, #0]
 80142ce:	1b5b      	subs	r3, r3, r5
 80142d0:	d418      	bmi.n	8014304 <_malloc_r+0x8c>
 80142d2:	2b0b      	cmp	r3, #11
 80142d4:	d90f      	bls.n	80142f6 <_malloc_r+0x7e>
 80142d6:	600b      	str	r3, [r1, #0]
 80142d8:	50cd      	str	r5, [r1, r3]
 80142da:	18cc      	adds	r4, r1, r3
 80142dc:	4630      	mov	r0, r6
 80142de:	f000 f85e 	bl	801439e <__malloc_unlock>
 80142e2:	f104 000b 	add.w	r0, r4, #11
 80142e6:	1d23      	adds	r3, r4, #4
 80142e8:	f020 0007 	bic.w	r0, r0, #7
 80142ec:	1ac3      	subs	r3, r0, r3
 80142ee:	d0d3      	beq.n	8014298 <_malloc_r+0x20>
 80142f0:	425a      	negs	r2, r3
 80142f2:	50e2      	str	r2, [r4, r3]
 80142f4:	e7d0      	b.n	8014298 <_malloc_r+0x20>
 80142f6:	428c      	cmp	r4, r1
 80142f8:	684b      	ldr	r3, [r1, #4]
 80142fa:	bf16      	itet	ne
 80142fc:	6063      	strne	r3, [r4, #4]
 80142fe:	6013      	streq	r3, [r2, #0]
 8014300:	460c      	movne	r4, r1
 8014302:	e7eb      	b.n	80142dc <_malloc_r+0x64>
 8014304:	460c      	mov	r4, r1
 8014306:	6849      	ldr	r1, [r1, #4]
 8014308:	e7cc      	b.n	80142a4 <_malloc_r+0x2c>
 801430a:	1cc4      	adds	r4, r0, #3
 801430c:	f024 0403 	bic.w	r4, r4, #3
 8014310:	42a0      	cmp	r0, r4
 8014312:	d005      	beq.n	8014320 <_malloc_r+0xa8>
 8014314:	1a21      	subs	r1, r4, r0
 8014316:	4630      	mov	r0, r6
 8014318:	f000 f808 	bl	801432c <_sbrk_r>
 801431c:	3001      	adds	r0, #1
 801431e:	d0cf      	beq.n	80142c0 <_malloc_r+0x48>
 8014320:	6025      	str	r5, [r4, #0]
 8014322:	e7db      	b.n	80142dc <_malloc_r+0x64>
 8014324:	20004b7c 	.word	0x20004b7c
 8014328:	20004b80 	.word	0x20004b80

0801432c <_sbrk_r>:
 801432c:	b538      	push	{r3, r4, r5, lr}
 801432e:	4c06      	ldr	r4, [pc, #24]	; (8014348 <_sbrk_r+0x1c>)
 8014330:	2300      	movs	r3, #0
 8014332:	4605      	mov	r5, r0
 8014334:	4608      	mov	r0, r1
 8014336:	6023      	str	r3, [r4, #0]
 8014338:	f7ee f81e 	bl	8002378 <_sbrk>
 801433c:	1c43      	adds	r3, r0, #1
 801433e:	d102      	bne.n	8014346 <_sbrk_r+0x1a>
 8014340:	6823      	ldr	r3, [r4, #0]
 8014342:	b103      	cbz	r3, 8014346 <_sbrk_r+0x1a>
 8014344:	602b      	str	r3, [r5, #0]
 8014346:	bd38      	pop	{r3, r4, r5, pc}
 8014348:	2003e454 	.word	0x2003e454

0801434c <siprintf>:
 801434c:	b40e      	push	{r1, r2, r3}
 801434e:	b500      	push	{lr}
 8014350:	b09c      	sub	sp, #112	; 0x70
 8014352:	ab1d      	add	r3, sp, #116	; 0x74
 8014354:	9002      	str	r0, [sp, #8]
 8014356:	9006      	str	r0, [sp, #24]
 8014358:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801435c:	4809      	ldr	r0, [pc, #36]	; (8014384 <siprintf+0x38>)
 801435e:	9107      	str	r1, [sp, #28]
 8014360:	9104      	str	r1, [sp, #16]
 8014362:	4909      	ldr	r1, [pc, #36]	; (8014388 <siprintf+0x3c>)
 8014364:	f853 2b04 	ldr.w	r2, [r3], #4
 8014368:	9105      	str	r1, [sp, #20]
 801436a:	6800      	ldr	r0, [r0, #0]
 801436c:	9301      	str	r3, [sp, #4]
 801436e:	a902      	add	r1, sp, #8
 8014370:	f000 f870 	bl	8014454 <_svfiprintf_r>
 8014374:	9b02      	ldr	r3, [sp, #8]
 8014376:	2200      	movs	r2, #0
 8014378:	701a      	strb	r2, [r3, #0]
 801437a:	b01c      	add	sp, #112	; 0x70
 801437c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014380:	b003      	add	sp, #12
 8014382:	4770      	bx	lr
 8014384:	2000008c 	.word	0x2000008c
 8014388:	ffff0208 	.word	0xffff0208

0801438c <strcpy>:
 801438c:	4603      	mov	r3, r0
 801438e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014392:	f803 2b01 	strb.w	r2, [r3], #1
 8014396:	2a00      	cmp	r2, #0
 8014398:	d1f9      	bne.n	801438e <strcpy+0x2>
 801439a:	4770      	bx	lr

0801439c <__malloc_lock>:
 801439c:	4770      	bx	lr

0801439e <__malloc_unlock>:
 801439e:	4770      	bx	lr

080143a0 <__ssputs_r>:
 80143a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143a4:	688e      	ldr	r6, [r1, #8]
 80143a6:	429e      	cmp	r6, r3
 80143a8:	4682      	mov	sl, r0
 80143aa:	460c      	mov	r4, r1
 80143ac:	4690      	mov	r8, r2
 80143ae:	4699      	mov	r9, r3
 80143b0:	d837      	bhi.n	8014422 <__ssputs_r+0x82>
 80143b2:	898a      	ldrh	r2, [r1, #12]
 80143b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80143b8:	d031      	beq.n	801441e <__ssputs_r+0x7e>
 80143ba:	6825      	ldr	r5, [r4, #0]
 80143bc:	6909      	ldr	r1, [r1, #16]
 80143be:	1a6f      	subs	r7, r5, r1
 80143c0:	6965      	ldr	r5, [r4, #20]
 80143c2:	2302      	movs	r3, #2
 80143c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80143c8:	fb95 f5f3 	sdiv	r5, r5, r3
 80143cc:	f109 0301 	add.w	r3, r9, #1
 80143d0:	443b      	add	r3, r7
 80143d2:	429d      	cmp	r5, r3
 80143d4:	bf38      	it	cc
 80143d6:	461d      	movcc	r5, r3
 80143d8:	0553      	lsls	r3, r2, #21
 80143da:	d530      	bpl.n	801443e <__ssputs_r+0x9e>
 80143dc:	4629      	mov	r1, r5
 80143de:	f7ff ff4b 	bl	8014278 <_malloc_r>
 80143e2:	4606      	mov	r6, r0
 80143e4:	b950      	cbnz	r0, 80143fc <__ssputs_r+0x5c>
 80143e6:	230c      	movs	r3, #12
 80143e8:	f8ca 3000 	str.w	r3, [sl]
 80143ec:	89a3      	ldrh	r3, [r4, #12]
 80143ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80143f2:	81a3      	strh	r3, [r4, #12]
 80143f4:	f04f 30ff 	mov.w	r0, #4294967295
 80143f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143fc:	463a      	mov	r2, r7
 80143fe:	6921      	ldr	r1, [r4, #16]
 8014400:	f7ff fed8 	bl	80141b4 <memcpy>
 8014404:	89a3      	ldrh	r3, [r4, #12]
 8014406:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801440a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801440e:	81a3      	strh	r3, [r4, #12]
 8014410:	6126      	str	r6, [r4, #16]
 8014412:	6165      	str	r5, [r4, #20]
 8014414:	443e      	add	r6, r7
 8014416:	1bed      	subs	r5, r5, r7
 8014418:	6026      	str	r6, [r4, #0]
 801441a:	60a5      	str	r5, [r4, #8]
 801441c:	464e      	mov	r6, r9
 801441e:	454e      	cmp	r6, r9
 8014420:	d900      	bls.n	8014424 <__ssputs_r+0x84>
 8014422:	464e      	mov	r6, r9
 8014424:	4632      	mov	r2, r6
 8014426:	4641      	mov	r1, r8
 8014428:	6820      	ldr	r0, [r4, #0]
 801442a:	f000 fa93 	bl	8014954 <memmove>
 801442e:	68a3      	ldr	r3, [r4, #8]
 8014430:	1b9b      	subs	r3, r3, r6
 8014432:	60a3      	str	r3, [r4, #8]
 8014434:	6823      	ldr	r3, [r4, #0]
 8014436:	441e      	add	r6, r3
 8014438:	6026      	str	r6, [r4, #0]
 801443a:	2000      	movs	r0, #0
 801443c:	e7dc      	b.n	80143f8 <__ssputs_r+0x58>
 801443e:	462a      	mov	r2, r5
 8014440:	f000 faa1 	bl	8014986 <_realloc_r>
 8014444:	4606      	mov	r6, r0
 8014446:	2800      	cmp	r0, #0
 8014448:	d1e2      	bne.n	8014410 <__ssputs_r+0x70>
 801444a:	6921      	ldr	r1, [r4, #16]
 801444c:	4650      	mov	r0, sl
 801444e:	f7ff fec5 	bl	80141dc <_free_r>
 8014452:	e7c8      	b.n	80143e6 <__ssputs_r+0x46>

08014454 <_svfiprintf_r>:
 8014454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014458:	461d      	mov	r5, r3
 801445a:	898b      	ldrh	r3, [r1, #12]
 801445c:	061f      	lsls	r7, r3, #24
 801445e:	b09d      	sub	sp, #116	; 0x74
 8014460:	4680      	mov	r8, r0
 8014462:	460c      	mov	r4, r1
 8014464:	4616      	mov	r6, r2
 8014466:	d50f      	bpl.n	8014488 <_svfiprintf_r+0x34>
 8014468:	690b      	ldr	r3, [r1, #16]
 801446a:	b96b      	cbnz	r3, 8014488 <_svfiprintf_r+0x34>
 801446c:	2140      	movs	r1, #64	; 0x40
 801446e:	f7ff ff03 	bl	8014278 <_malloc_r>
 8014472:	6020      	str	r0, [r4, #0]
 8014474:	6120      	str	r0, [r4, #16]
 8014476:	b928      	cbnz	r0, 8014484 <_svfiprintf_r+0x30>
 8014478:	230c      	movs	r3, #12
 801447a:	f8c8 3000 	str.w	r3, [r8]
 801447e:	f04f 30ff 	mov.w	r0, #4294967295
 8014482:	e0c8      	b.n	8014616 <_svfiprintf_r+0x1c2>
 8014484:	2340      	movs	r3, #64	; 0x40
 8014486:	6163      	str	r3, [r4, #20]
 8014488:	2300      	movs	r3, #0
 801448a:	9309      	str	r3, [sp, #36]	; 0x24
 801448c:	2320      	movs	r3, #32
 801448e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014492:	2330      	movs	r3, #48	; 0x30
 8014494:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014498:	9503      	str	r5, [sp, #12]
 801449a:	f04f 0b01 	mov.w	fp, #1
 801449e:	4637      	mov	r7, r6
 80144a0:	463d      	mov	r5, r7
 80144a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80144a6:	b10b      	cbz	r3, 80144ac <_svfiprintf_r+0x58>
 80144a8:	2b25      	cmp	r3, #37	; 0x25
 80144aa:	d13e      	bne.n	801452a <_svfiprintf_r+0xd6>
 80144ac:	ebb7 0a06 	subs.w	sl, r7, r6
 80144b0:	d00b      	beq.n	80144ca <_svfiprintf_r+0x76>
 80144b2:	4653      	mov	r3, sl
 80144b4:	4632      	mov	r2, r6
 80144b6:	4621      	mov	r1, r4
 80144b8:	4640      	mov	r0, r8
 80144ba:	f7ff ff71 	bl	80143a0 <__ssputs_r>
 80144be:	3001      	adds	r0, #1
 80144c0:	f000 80a4 	beq.w	801460c <_svfiprintf_r+0x1b8>
 80144c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144c6:	4453      	add	r3, sl
 80144c8:	9309      	str	r3, [sp, #36]	; 0x24
 80144ca:	783b      	ldrb	r3, [r7, #0]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	f000 809d 	beq.w	801460c <_svfiprintf_r+0x1b8>
 80144d2:	2300      	movs	r3, #0
 80144d4:	f04f 32ff 	mov.w	r2, #4294967295
 80144d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80144dc:	9304      	str	r3, [sp, #16]
 80144de:	9307      	str	r3, [sp, #28]
 80144e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80144e4:	931a      	str	r3, [sp, #104]	; 0x68
 80144e6:	462f      	mov	r7, r5
 80144e8:	2205      	movs	r2, #5
 80144ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 80144ee:	4850      	ldr	r0, [pc, #320]	; (8014630 <_svfiprintf_r+0x1dc>)
 80144f0:	f7eb fe96 	bl	8000220 <memchr>
 80144f4:	9b04      	ldr	r3, [sp, #16]
 80144f6:	b9d0      	cbnz	r0, 801452e <_svfiprintf_r+0xda>
 80144f8:	06d9      	lsls	r1, r3, #27
 80144fa:	bf44      	itt	mi
 80144fc:	2220      	movmi	r2, #32
 80144fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014502:	071a      	lsls	r2, r3, #28
 8014504:	bf44      	itt	mi
 8014506:	222b      	movmi	r2, #43	; 0x2b
 8014508:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801450c:	782a      	ldrb	r2, [r5, #0]
 801450e:	2a2a      	cmp	r2, #42	; 0x2a
 8014510:	d015      	beq.n	801453e <_svfiprintf_r+0xea>
 8014512:	9a07      	ldr	r2, [sp, #28]
 8014514:	462f      	mov	r7, r5
 8014516:	2000      	movs	r0, #0
 8014518:	250a      	movs	r5, #10
 801451a:	4639      	mov	r1, r7
 801451c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014520:	3b30      	subs	r3, #48	; 0x30
 8014522:	2b09      	cmp	r3, #9
 8014524:	d94d      	bls.n	80145c2 <_svfiprintf_r+0x16e>
 8014526:	b1b8      	cbz	r0, 8014558 <_svfiprintf_r+0x104>
 8014528:	e00f      	b.n	801454a <_svfiprintf_r+0xf6>
 801452a:	462f      	mov	r7, r5
 801452c:	e7b8      	b.n	80144a0 <_svfiprintf_r+0x4c>
 801452e:	4a40      	ldr	r2, [pc, #256]	; (8014630 <_svfiprintf_r+0x1dc>)
 8014530:	1a80      	subs	r0, r0, r2
 8014532:	fa0b f000 	lsl.w	r0, fp, r0
 8014536:	4318      	orrs	r0, r3
 8014538:	9004      	str	r0, [sp, #16]
 801453a:	463d      	mov	r5, r7
 801453c:	e7d3      	b.n	80144e6 <_svfiprintf_r+0x92>
 801453e:	9a03      	ldr	r2, [sp, #12]
 8014540:	1d11      	adds	r1, r2, #4
 8014542:	6812      	ldr	r2, [r2, #0]
 8014544:	9103      	str	r1, [sp, #12]
 8014546:	2a00      	cmp	r2, #0
 8014548:	db01      	blt.n	801454e <_svfiprintf_r+0xfa>
 801454a:	9207      	str	r2, [sp, #28]
 801454c:	e004      	b.n	8014558 <_svfiprintf_r+0x104>
 801454e:	4252      	negs	r2, r2
 8014550:	f043 0302 	orr.w	r3, r3, #2
 8014554:	9207      	str	r2, [sp, #28]
 8014556:	9304      	str	r3, [sp, #16]
 8014558:	783b      	ldrb	r3, [r7, #0]
 801455a:	2b2e      	cmp	r3, #46	; 0x2e
 801455c:	d10c      	bne.n	8014578 <_svfiprintf_r+0x124>
 801455e:	787b      	ldrb	r3, [r7, #1]
 8014560:	2b2a      	cmp	r3, #42	; 0x2a
 8014562:	d133      	bne.n	80145cc <_svfiprintf_r+0x178>
 8014564:	9b03      	ldr	r3, [sp, #12]
 8014566:	1d1a      	adds	r2, r3, #4
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	9203      	str	r2, [sp, #12]
 801456c:	2b00      	cmp	r3, #0
 801456e:	bfb8      	it	lt
 8014570:	f04f 33ff 	movlt.w	r3, #4294967295
 8014574:	3702      	adds	r7, #2
 8014576:	9305      	str	r3, [sp, #20]
 8014578:	4d2e      	ldr	r5, [pc, #184]	; (8014634 <_svfiprintf_r+0x1e0>)
 801457a:	7839      	ldrb	r1, [r7, #0]
 801457c:	2203      	movs	r2, #3
 801457e:	4628      	mov	r0, r5
 8014580:	f7eb fe4e 	bl	8000220 <memchr>
 8014584:	b138      	cbz	r0, 8014596 <_svfiprintf_r+0x142>
 8014586:	2340      	movs	r3, #64	; 0x40
 8014588:	1b40      	subs	r0, r0, r5
 801458a:	fa03 f000 	lsl.w	r0, r3, r0
 801458e:	9b04      	ldr	r3, [sp, #16]
 8014590:	4303      	orrs	r3, r0
 8014592:	3701      	adds	r7, #1
 8014594:	9304      	str	r3, [sp, #16]
 8014596:	7839      	ldrb	r1, [r7, #0]
 8014598:	4827      	ldr	r0, [pc, #156]	; (8014638 <_svfiprintf_r+0x1e4>)
 801459a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801459e:	2206      	movs	r2, #6
 80145a0:	1c7e      	adds	r6, r7, #1
 80145a2:	f7eb fe3d 	bl	8000220 <memchr>
 80145a6:	2800      	cmp	r0, #0
 80145a8:	d038      	beq.n	801461c <_svfiprintf_r+0x1c8>
 80145aa:	4b24      	ldr	r3, [pc, #144]	; (801463c <_svfiprintf_r+0x1e8>)
 80145ac:	bb13      	cbnz	r3, 80145f4 <_svfiprintf_r+0x1a0>
 80145ae:	9b03      	ldr	r3, [sp, #12]
 80145b0:	3307      	adds	r3, #7
 80145b2:	f023 0307 	bic.w	r3, r3, #7
 80145b6:	3308      	adds	r3, #8
 80145b8:	9303      	str	r3, [sp, #12]
 80145ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145bc:	444b      	add	r3, r9
 80145be:	9309      	str	r3, [sp, #36]	; 0x24
 80145c0:	e76d      	b.n	801449e <_svfiprintf_r+0x4a>
 80145c2:	fb05 3202 	mla	r2, r5, r2, r3
 80145c6:	2001      	movs	r0, #1
 80145c8:	460f      	mov	r7, r1
 80145ca:	e7a6      	b.n	801451a <_svfiprintf_r+0xc6>
 80145cc:	2300      	movs	r3, #0
 80145ce:	3701      	adds	r7, #1
 80145d0:	9305      	str	r3, [sp, #20]
 80145d2:	4619      	mov	r1, r3
 80145d4:	250a      	movs	r5, #10
 80145d6:	4638      	mov	r0, r7
 80145d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80145dc:	3a30      	subs	r2, #48	; 0x30
 80145de:	2a09      	cmp	r2, #9
 80145e0:	d903      	bls.n	80145ea <_svfiprintf_r+0x196>
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d0c8      	beq.n	8014578 <_svfiprintf_r+0x124>
 80145e6:	9105      	str	r1, [sp, #20]
 80145e8:	e7c6      	b.n	8014578 <_svfiprintf_r+0x124>
 80145ea:	fb05 2101 	mla	r1, r5, r1, r2
 80145ee:	2301      	movs	r3, #1
 80145f0:	4607      	mov	r7, r0
 80145f2:	e7f0      	b.n	80145d6 <_svfiprintf_r+0x182>
 80145f4:	ab03      	add	r3, sp, #12
 80145f6:	9300      	str	r3, [sp, #0]
 80145f8:	4622      	mov	r2, r4
 80145fa:	4b11      	ldr	r3, [pc, #68]	; (8014640 <_svfiprintf_r+0x1ec>)
 80145fc:	a904      	add	r1, sp, #16
 80145fe:	4640      	mov	r0, r8
 8014600:	f3af 8000 	nop.w
 8014604:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014608:	4681      	mov	r9, r0
 801460a:	d1d6      	bne.n	80145ba <_svfiprintf_r+0x166>
 801460c:	89a3      	ldrh	r3, [r4, #12]
 801460e:	065b      	lsls	r3, r3, #25
 8014610:	f53f af35 	bmi.w	801447e <_svfiprintf_r+0x2a>
 8014614:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014616:	b01d      	add	sp, #116	; 0x74
 8014618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801461c:	ab03      	add	r3, sp, #12
 801461e:	9300      	str	r3, [sp, #0]
 8014620:	4622      	mov	r2, r4
 8014622:	4b07      	ldr	r3, [pc, #28]	; (8014640 <_svfiprintf_r+0x1ec>)
 8014624:	a904      	add	r1, sp, #16
 8014626:	4640      	mov	r0, r8
 8014628:	f000 f882 	bl	8014730 <_printf_i>
 801462c:	e7ea      	b.n	8014604 <_svfiprintf_r+0x1b0>
 801462e:	bf00      	nop
 8014630:	08017744 	.word	0x08017744
 8014634:	0801774a 	.word	0x0801774a
 8014638:	0801774e 	.word	0x0801774e
 801463c:	00000000 	.word	0x00000000
 8014640:	080143a1 	.word	0x080143a1

08014644 <_printf_common>:
 8014644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014648:	4691      	mov	r9, r2
 801464a:	461f      	mov	r7, r3
 801464c:	688a      	ldr	r2, [r1, #8]
 801464e:	690b      	ldr	r3, [r1, #16]
 8014650:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014654:	4293      	cmp	r3, r2
 8014656:	bfb8      	it	lt
 8014658:	4613      	movlt	r3, r2
 801465a:	f8c9 3000 	str.w	r3, [r9]
 801465e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014662:	4606      	mov	r6, r0
 8014664:	460c      	mov	r4, r1
 8014666:	b112      	cbz	r2, 801466e <_printf_common+0x2a>
 8014668:	3301      	adds	r3, #1
 801466a:	f8c9 3000 	str.w	r3, [r9]
 801466e:	6823      	ldr	r3, [r4, #0]
 8014670:	0699      	lsls	r1, r3, #26
 8014672:	bf42      	ittt	mi
 8014674:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014678:	3302      	addmi	r3, #2
 801467a:	f8c9 3000 	strmi.w	r3, [r9]
 801467e:	6825      	ldr	r5, [r4, #0]
 8014680:	f015 0506 	ands.w	r5, r5, #6
 8014684:	d107      	bne.n	8014696 <_printf_common+0x52>
 8014686:	f104 0a19 	add.w	sl, r4, #25
 801468a:	68e3      	ldr	r3, [r4, #12]
 801468c:	f8d9 2000 	ldr.w	r2, [r9]
 8014690:	1a9b      	subs	r3, r3, r2
 8014692:	42ab      	cmp	r3, r5
 8014694:	dc28      	bgt.n	80146e8 <_printf_common+0xa4>
 8014696:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801469a:	6822      	ldr	r2, [r4, #0]
 801469c:	3300      	adds	r3, #0
 801469e:	bf18      	it	ne
 80146a0:	2301      	movne	r3, #1
 80146a2:	0692      	lsls	r2, r2, #26
 80146a4:	d42d      	bmi.n	8014702 <_printf_common+0xbe>
 80146a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80146aa:	4639      	mov	r1, r7
 80146ac:	4630      	mov	r0, r6
 80146ae:	47c0      	blx	r8
 80146b0:	3001      	adds	r0, #1
 80146b2:	d020      	beq.n	80146f6 <_printf_common+0xb2>
 80146b4:	6823      	ldr	r3, [r4, #0]
 80146b6:	68e5      	ldr	r5, [r4, #12]
 80146b8:	f8d9 2000 	ldr.w	r2, [r9]
 80146bc:	f003 0306 	and.w	r3, r3, #6
 80146c0:	2b04      	cmp	r3, #4
 80146c2:	bf08      	it	eq
 80146c4:	1aad      	subeq	r5, r5, r2
 80146c6:	68a3      	ldr	r3, [r4, #8]
 80146c8:	6922      	ldr	r2, [r4, #16]
 80146ca:	bf0c      	ite	eq
 80146cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80146d0:	2500      	movne	r5, #0
 80146d2:	4293      	cmp	r3, r2
 80146d4:	bfc4      	itt	gt
 80146d6:	1a9b      	subgt	r3, r3, r2
 80146d8:	18ed      	addgt	r5, r5, r3
 80146da:	f04f 0900 	mov.w	r9, #0
 80146de:	341a      	adds	r4, #26
 80146e0:	454d      	cmp	r5, r9
 80146e2:	d11a      	bne.n	801471a <_printf_common+0xd6>
 80146e4:	2000      	movs	r0, #0
 80146e6:	e008      	b.n	80146fa <_printf_common+0xb6>
 80146e8:	2301      	movs	r3, #1
 80146ea:	4652      	mov	r2, sl
 80146ec:	4639      	mov	r1, r7
 80146ee:	4630      	mov	r0, r6
 80146f0:	47c0      	blx	r8
 80146f2:	3001      	adds	r0, #1
 80146f4:	d103      	bne.n	80146fe <_printf_common+0xba>
 80146f6:	f04f 30ff 	mov.w	r0, #4294967295
 80146fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146fe:	3501      	adds	r5, #1
 8014700:	e7c3      	b.n	801468a <_printf_common+0x46>
 8014702:	18e1      	adds	r1, r4, r3
 8014704:	1c5a      	adds	r2, r3, #1
 8014706:	2030      	movs	r0, #48	; 0x30
 8014708:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801470c:	4422      	add	r2, r4
 801470e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014712:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014716:	3302      	adds	r3, #2
 8014718:	e7c5      	b.n	80146a6 <_printf_common+0x62>
 801471a:	2301      	movs	r3, #1
 801471c:	4622      	mov	r2, r4
 801471e:	4639      	mov	r1, r7
 8014720:	4630      	mov	r0, r6
 8014722:	47c0      	blx	r8
 8014724:	3001      	adds	r0, #1
 8014726:	d0e6      	beq.n	80146f6 <_printf_common+0xb2>
 8014728:	f109 0901 	add.w	r9, r9, #1
 801472c:	e7d8      	b.n	80146e0 <_printf_common+0x9c>
	...

08014730 <_printf_i>:
 8014730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014734:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014738:	460c      	mov	r4, r1
 801473a:	7e09      	ldrb	r1, [r1, #24]
 801473c:	b085      	sub	sp, #20
 801473e:	296e      	cmp	r1, #110	; 0x6e
 8014740:	4617      	mov	r7, r2
 8014742:	4606      	mov	r6, r0
 8014744:	4698      	mov	r8, r3
 8014746:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014748:	f000 80b3 	beq.w	80148b2 <_printf_i+0x182>
 801474c:	d822      	bhi.n	8014794 <_printf_i+0x64>
 801474e:	2963      	cmp	r1, #99	; 0x63
 8014750:	d036      	beq.n	80147c0 <_printf_i+0x90>
 8014752:	d80a      	bhi.n	801476a <_printf_i+0x3a>
 8014754:	2900      	cmp	r1, #0
 8014756:	f000 80b9 	beq.w	80148cc <_printf_i+0x19c>
 801475a:	2958      	cmp	r1, #88	; 0x58
 801475c:	f000 8083 	beq.w	8014866 <_printf_i+0x136>
 8014760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014764:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8014768:	e032      	b.n	80147d0 <_printf_i+0xa0>
 801476a:	2964      	cmp	r1, #100	; 0x64
 801476c:	d001      	beq.n	8014772 <_printf_i+0x42>
 801476e:	2969      	cmp	r1, #105	; 0x69
 8014770:	d1f6      	bne.n	8014760 <_printf_i+0x30>
 8014772:	6820      	ldr	r0, [r4, #0]
 8014774:	6813      	ldr	r3, [r2, #0]
 8014776:	0605      	lsls	r5, r0, #24
 8014778:	f103 0104 	add.w	r1, r3, #4
 801477c:	d52a      	bpl.n	80147d4 <_printf_i+0xa4>
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	6011      	str	r1, [r2, #0]
 8014782:	2b00      	cmp	r3, #0
 8014784:	da03      	bge.n	801478e <_printf_i+0x5e>
 8014786:	222d      	movs	r2, #45	; 0x2d
 8014788:	425b      	negs	r3, r3
 801478a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801478e:	486f      	ldr	r0, [pc, #444]	; (801494c <_printf_i+0x21c>)
 8014790:	220a      	movs	r2, #10
 8014792:	e039      	b.n	8014808 <_printf_i+0xd8>
 8014794:	2973      	cmp	r1, #115	; 0x73
 8014796:	f000 809d 	beq.w	80148d4 <_printf_i+0x1a4>
 801479a:	d808      	bhi.n	80147ae <_printf_i+0x7e>
 801479c:	296f      	cmp	r1, #111	; 0x6f
 801479e:	d020      	beq.n	80147e2 <_printf_i+0xb2>
 80147a0:	2970      	cmp	r1, #112	; 0x70
 80147a2:	d1dd      	bne.n	8014760 <_printf_i+0x30>
 80147a4:	6823      	ldr	r3, [r4, #0]
 80147a6:	f043 0320 	orr.w	r3, r3, #32
 80147aa:	6023      	str	r3, [r4, #0]
 80147ac:	e003      	b.n	80147b6 <_printf_i+0x86>
 80147ae:	2975      	cmp	r1, #117	; 0x75
 80147b0:	d017      	beq.n	80147e2 <_printf_i+0xb2>
 80147b2:	2978      	cmp	r1, #120	; 0x78
 80147b4:	d1d4      	bne.n	8014760 <_printf_i+0x30>
 80147b6:	2378      	movs	r3, #120	; 0x78
 80147b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80147bc:	4864      	ldr	r0, [pc, #400]	; (8014950 <_printf_i+0x220>)
 80147be:	e055      	b.n	801486c <_printf_i+0x13c>
 80147c0:	6813      	ldr	r3, [r2, #0]
 80147c2:	1d19      	adds	r1, r3, #4
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	6011      	str	r1, [r2, #0]
 80147c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80147cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80147d0:	2301      	movs	r3, #1
 80147d2:	e08c      	b.n	80148ee <_printf_i+0x1be>
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	6011      	str	r1, [r2, #0]
 80147d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80147dc:	bf18      	it	ne
 80147de:	b21b      	sxthne	r3, r3
 80147e0:	e7cf      	b.n	8014782 <_printf_i+0x52>
 80147e2:	6813      	ldr	r3, [r2, #0]
 80147e4:	6825      	ldr	r5, [r4, #0]
 80147e6:	1d18      	adds	r0, r3, #4
 80147e8:	6010      	str	r0, [r2, #0]
 80147ea:	0628      	lsls	r0, r5, #24
 80147ec:	d501      	bpl.n	80147f2 <_printf_i+0xc2>
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	e002      	b.n	80147f8 <_printf_i+0xc8>
 80147f2:	0668      	lsls	r0, r5, #25
 80147f4:	d5fb      	bpl.n	80147ee <_printf_i+0xbe>
 80147f6:	881b      	ldrh	r3, [r3, #0]
 80147f8:	4854      	ldr	r0, [pc, #336]	; (801494c <_printf_i+0x21c>)
 80147fa:	296f      	cmp	r1, #111	; 0x6f
 80147fc:	bf14      	ite	ne
 80147fe:	220a      	movne	r2, #10
 8014800:	2208      	moveq	r2, #8
 8014802:	2100      	movs	r1, #0
 8014804:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014808:	6865      	ldr	r5, [r4, #4]
 801480a:	60a5      	str	r5, [r4, #8]
 801480c:	2d00      	cmp	r5, #0
 801480e:	f2c0 8095 	blt.w	801493c <_printf_i+0x20c>
 8014812:	6821      	ldr	r1, [r4, #0]
 8014814:	f021 0104 	bic.w	r1, r1, #4
 8014818:	6021      	str	r1, [r4, #0]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d13d      	bne.n	801489a <_printf_i+0x16a>
 801481e:	2d00      	cmp	r5, #0
 8014820:	f040 808e 	bne.w	8014940 <_printf_i+0x210>
 8014824:	4665      	mov	r5, ip
 8014826:	2a08      	cmp	r2, #8
 8014828:	d10b      	bne.n	8014842 <_printf_i+0x112>
 801482a:	6823      	ldr	r3, [r4, #0]
 801482c:	07db      	lsls	r3, r3, #31
 801482e:	d508      	bpl.n	8014842 <_printf_i+0x112>
 8014830:	6923      	ldr	r3, [r4, #16]
 8014832:	6862      	ldr	r2, [r4, #4]
 8014834:	429a      	cmp	r2, r3
 8014836:	bfde      	ittt	le
 8014838:	2330      	movle	r3, #48	; 0x30
 801483a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801483e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014842:	ebac 0305 	sub.w	r3, ip, r5
 8014846:	6123      	str	r3, [r4, #16]
 8014848:	f8cd 8000 	str.w	r8, [sp]
 801484c:	463b      	mov	r3, r7
 801484e:	aa03      	add	r2, sp, #12
 8014850:	4621      	mov	r1, r4
 8014852:	4630      	mov	r0, r6
 8014854:	f7ff fef6 	bl	8014644 <_printf_common>
 8014858:	3001      	adds	r0, #1
 801485a:	d14d      	bne.n	80148f8 <_printf_i+0x1c8>
 801485c:	f04f 30ff 	mov.w	r0, #4294967295
 8014860:	b005      	add	sp, #20
 8014862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014866:	4839      	ldr	r0, [pc, #228]	; (801494c <_printf_i+0x21c>)
 8014868:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801486c:	6813      	ldr	r3, [r2, #0]
 801486e:	6821      	ldr	r1, [r4, #0]
 8014870:	1d1d      	adds	r5, r3, #4
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	6015      	str	r5, [r2, #0]
 8014876:	060a      	lsls	r2, r1, #24
 8014878:	d50b      	bpl.n	8014892 <_printf_i+0x162>
 801487a:	07ca      	lsls	r2, r1, #31
 801487c:	bf44      	itt	mi
 801487e:	f041 0120 	orrmi.w	r1, r1, #32
 8014882:	6021      	strmi	r1, [r4, #0]
 8014884:	b91b      	cbnz	r3, 801488e <_printf_i+0x15e>
 8014886:	6822      	ldr	r2, [r4, #0]
 8014888:	f022 0220 	bic.w	r2, r2, #32
 801488c:	6022      	str	r2, [r4, #0]
 801488e:	2210      	movs	r2, #16
 8014890:	e7b7      	b.n	8014802 <_printf_i+0xd2>
 8014892:	064d      	lsls	r5, r1, #25
 8014894:	bf48      	it	mi
 8014896:	b29b      	uxthmi	r3, r3
 8014898:	e7ef      	b.n	801487a <_printf_i+0x14a>
 801489a:	4665      	mov	r5, ip
 801489c:	fbb3 f1f2 	udiv	r1, r3, r2
 80148a0:	fb02 3311 	mls	r3, r2, r1, r3
 80148a4:	5cc3      	ldrb	r3, [r0, r3]
 80148a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80148aa:	460b      	mov	r3, r1
 80148ac:	2900      	cmp	r1, #0
 80148ae:	d1f5      	bne.n	801489c <_printf_i+0x16c>
 80148b0:	e7b9      	b.n	8014826 <_printf_i+0xf6>
 80148b2:	6813      	ldr	r3, [r2, #0]
 80148b4:	6825      	ldr	r5, [r4, #0]
 80148b6:	6961      	ldr	r1, [r4, #20]
 80148b8:	1d18      	adds	r0, r3, #4
 80148ba:	6010      	str	r0, [r2, #0]
 80148bc:	0628      	lsls	r0, r5, #24
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	d501      	bpl.n	80148c6 <_printf_i+0x196>
 80148c2:	6019      	str	r1, [r3, #0]
 80148c4:	e002      	b.n	80148cc <_printf_i+0x19c>
 80148c6:	066a      	lsls	r2, r5, #25
 80148c8:	d5fb      	bpl.n	80148c2 <_printf_i+0x192>
 80148ca:	8019      	strh	r1, [r3, #0]
 80148cc:	2300      	movs	r3, #0
 80148ce:	6123      	str	r3, [r4, #16]
 80148d0:	4665      	mov	r5, ip
 80148d2:	e7b9      	b.n	8014848 <_printf_i+0x118>
 80148d4:	6813      	ldr	r3, [r2, #0]
 80148d6:	1d19      	adds	r1, r3, #4
 80148d8:	6011      	str	r1, [r2, #0]
 80148da:	681d      	ldr	r5, [r3, #0]
 80148dc:	6862      	ldr	r2, [r4, #4]
 80148de:	2100      	movs	r1, #0
 80148e0:	4628      	mov	r0, r5
 80148e2:	f7eb fc9d 	bl	8000220 <memchr>
 80148e6:	b108      	cbz	r0, 80148ec <_printf_i+0x1bc>
 80148e8:	1b40      	subs	r0, r0, r5
 80148ea:	6060      	str	r0, [r4, #4]
 80148ec:	6863      	ldr	r3, [r4, #4]
 80148ee:	6123      	str	r3, [r4, #16]
 80148f0:	2300      	movs	r3, #0
 80148f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80148f6:	e7a7      	b.n	8014848 <_printf_i+0x118>
 80148f8:	6923      	ldr	r3, [r4, #16]
 80148fa:	462a      	mov	r2, r5
 80148fc:	4639      	mov	r1, r7
 80148fe:	4630      	mov	r0, r6
 8014900:	47c0      	blx	r8
 8014902:	3001      	adds	r0, #1
 8014904:	d0aa      	beq.n	801485c <_printf_i+0x12c>
 8014906:	6823      	ldr	r3, [r4, #0]
 8014908:	079b      	lsls	r3, r3, #30
 801490a:	d413      	bmi.n	8014934 <_printf_i+0x204>
 801490c:	68e0      	ldr	r0, [r4, #12]
 801490e:	9b03      	ldr	r3, [sp, #12]
 8014910:	4298      	cmp	r0, r3
 8014912:	bfb8      	it	lt
 8014914:	4618      	movlt	r0, r3
 8014916:	e7a3      	b.n	8014860 <_printf_i+0x130>
 8014918:	2301      	movs	r3, #1
 801491a:	464a      	mov	r2, r9
 801491c:	4639      	mov	r1, r7
 801491e:	4630      	mov	r0, r6
 8014920:	47c0      	blx	r8
 8014922:	3001      	adds	r0, #1
 8014924:	d09a      	beq.n	801485c <_printf_i+0x12c>
 8014926:	3501      	adds	r5, #1
 8014928:	68e3      	ldr	r3, [r4, #12]
 801492a:	9a03      	ldr	r2, [sp, #12]
 801492c:	1a9b      	subs	r3, r3, r2
 801492e:	42ab      	cmp	r3, r5
 8014930:	dcf2      	bgt.n	8014918 <_printf_i+0x1e8>
 8014932:	e7eb      	b.n	801490c <_printf_i+0x1dc>
 8014934:	2500      	movs	r5, #0
 8014936:	f104 0919 	add.w	r9, r4, #25
 801493a:	e7f5      	b.n	8014928 <_printf_i+0x1f8>
 801493c:	2b00      	cmp	r3, #0
 801493e:	d1ac      	bne.n	801489a <_printf_i+0x16a>
 8014940:	7803      	ldrb	r3, [r0, #0]
 8014942:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014946:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801494a:	e76c      	b.n	8014826 <_printf_i+0xf6>
 801494c:	08017755 	.word	0x08017755
 8014950:	08017766 	.word	0x08017766

08014954 <memmove>:
 8014954:	4288      	cmp	r0, r1
 8014956:	b510      	push	{r4, lr}
 8014958:	eb01 0302 	add.w	r3, r1, r2
 801495c:	d807      	bhi.n	801496e <memmove+0x1a>
 801495e:	1e42      	subs	r2, r0, #1
 8014960:	4299      	cmp	r1, r3
 8014962:	d00a      	beq.n	801497a <memmove+0x26>
 8014964:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014968:	f802 4f01 	strb.w	r4, [r2, #1]!
 801496c:	e7f8      	b.n	8014960 <memmove+0xc>
 801496e:	4283      	cmp	r3, r0
 8014970:	d9f5      	bls.n	801495e <memmove+0xa>
 8014972:	1881      	adds	r1, r0, r2
 8014974:	1ad2      	subs	r2, r2, r3
 8014976:	42d3      	cmn	r3, r2
 8014978:	d100      	bne.n	801497c <memmove+0x28>
 801497a:	bd10      	pop	{r4, pc}
 801497c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014980:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014984:	e7f7      	b.n	8014976 <memmove+0x22>

08014986 <_realloc_r>:
 8014986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014988:	4607      	mov	r7, r0
 801498a:	4614      	mov	r4, r2
 801498c:	460e      	mov	r6, r1
 801498e:	b921      	cbnz	r1, 801499a <_realloc_r+0x14>
 8014990:	4611      	mov	r1, r2
 8014992:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014996:	f7ff bc6f 	b.w	8014278 <_malloc_r>
 801499a:	b922      	cbnz	r2, 80149a6 <_realloc_r+0x20>
 801499c:	f7ff fc1e 	bl	80141dc <_free_r>
 80149a0:	4625      	mov	r5, r4
 80149a2:	4628      	mov	r0, r5
 80149a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149a6:	f000 f814 	bl	80149d2 <_malloc_usable_size_r>
 80149aa:	42a0      	cmp	r0, r4
 80149ac:	d20f      	bcs.n	80149ce <_realloc_r+0x48>
 80149ae:	4621      	mov	r1, r4
 80149b0:	4638      	mov	r0, r7
 80149b2:	f7ff fc61 	bl	8014278 <_malloc_r>
 80149b6:	4605      	mov	r5, r0
 80149b8:	2800      	cmp	r0, #0
 80149ba:	d0f2      	beq.n	80149a2 <_realloc_r+0x1c>
 80149bc:	4631      	mov	r1, r6
 80149be:	4622      	mov	r2, r4
 80149c0:	f7ff fbf8 	bl	80141b4 <memcpy>
 80149c4:	4631      	mov	r1, r6
 80149c6:	4638      	mov	r0, r7
 80149c8:	f7ff fc08 	bl	80141dc <_free_r>
 80149cc:	e7e9      	b.n	80149a2 <_realloc_r+0x1c>
 80149ce:	4635      	mov	r5, r6
 80149d0:	e7e7      	b.n	80149a2 <_realloc_r+0x1c>

080149d2 <_malloc_usable_size_r>:
 80149d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80149d6:	1f18      	subs	r0, r3, #4
 80149d8:	2b00      	cmp	r3, #0
 80149da:	bfbc      	itt	lt
 80149dc:	580b      	ldrlt	r3, [r1, r0]
 80149de:	18c0      	addlt	r0, r0, r3
 80149e0:	4770      	bx	lr
	...

080149e4 <_init>:
 80149e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149e6:	bf00      	nop
 80149e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80149ea:	bc08      	pop	{r3}
 80149ec:	469e      	mov	lr, r3
 80149ee:	4770      	bx	lr

080149f0 <_fini>:
 80149f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149f2:	bf00      	nop
 80149f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80149f6:	bc08      	pop	{r3}
 80149f8:	469e      	mov	lr, r3
 80149fa:	4770      	bx	lr
