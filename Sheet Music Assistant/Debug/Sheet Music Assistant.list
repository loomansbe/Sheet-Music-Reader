
Sheet Music Assistant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001475c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002dac  0801493c  0801493c  0002493c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080176e8  080176e8  000300f4  2**0
                  CONTENTS
  4 .ARM          00000008  080176e8  080176e8  000276e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080176f0  080176f0  000300f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080176f0  080176f0  000276f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080176f4  080176f4  000276f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  080176f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000221c4  200000f4  080177ec  000300f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200222b8  080177ec  000322b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00048de1  00000000  00000000  00030124  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007f1b  00000000  00000000  00078f05  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000034b8  00000000  00000000  00080e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003158  00000000  00000000  000842d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e8bd  00000000  00000000  00087430  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000313d0  00000000  00000000  000b5ced  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ffc84  00000000  00000000  000e70bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e6d41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e460  00000000  00000000  001e6dbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000f4 	.word	0x200000f4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08014924 	.word	0x08014924

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000f8 	.word	0x200000f8
 800021c:	08014924 	.word	0x08014924

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <Storage_OpenReadFile>:
  * @param  BufferAddress: A pointer to a buffer to copy the file to
  * @param  FileLen: the File lenght
  * @retval err: Error status (0=> success, 1=> fail)
  */
uint32_t Storage_OpenReadFile(uint8_t *Address, const char* BmpName)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	6018      	str	r0, [r3, #0]
 80005cc:	463b      	mov	r3, r7
 80005ce:	6019      	str	r1, [r3, #0]
  uint32_t index = 0, size = 0, i1 = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80005d6:	2300      	movs	r3, #0
 80005d8:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 80005dc:	2300      	movs	r3, #0
 80005de:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
  uint32_t BmpAddress;
  FIL F1;

  if (f_open(&F1, BmpName, FA_READ) != FR_OK)
 80005e2:	463b      	mov	r3, r7
 80005e4:	f107 0008 	add.w	r0, r7, #8
 80005e8:	2201      	movs	r2, #1
 80005ea:	6819      	ldr	r1, [r3, #0]
 80005ec:	f00f fd42 	bl	8010074 <f_open>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d000      	beq.n	80005f8 <Storage_OpenReadFile+0x38>
  {
    while(1)
 80005f6:	e7fe      	b.n	80005f6 <Storage_OpenReadFile+0x36>
    {
    } 
  }
  if (f_read (&F1, sector, 30, (UINT *)&BytesRead) != FR_OK)
 80005f8:	f107 0008 	add.w	r0, r7, #8
 80005fc:	4b48      	ldr	r3, [pc, #288]	; (8000720 <Storage_OpenReadFile+0x160>)
 80005fe:	221e      	movs	r2, #30
 8000600:	4948      	ldr	r1, [pc, #288]	; (8000724 <Storage_OpenReadFile+0x164>)
 8000602:	f00f fef5 	bl	80103f0 <f_read>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d000      	beq.n	800060e <Storage_OpenReadFile+0x4e>
  {
    while(1)
 800060c:	e7fe      	b.n	800060c <Storage_OpenReadFile+0x4c>
    {
    } 
  }
  
  BmpAddress = (uint32_t)sector;
 800060e:	4b45      	ldr	r3, [pc, #276]	; (8000724 <Storage_OpenReadFile+0x164>)
 8000610:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

  /* Read bitmap size */
  size = *(uint16_t *) (BmpAddress + 2);
 8000614:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000618:	3302      	adds	r3, #2
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
  size |= (*(uint16_t *) (BmpAddress + 4)) << 16;  
 8000620:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000624:	3304      	adds	r3, #4
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	041b      	lsls	r3, r3, #16
 800062a:	461a      	mov	r2, r3
 800062c:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8000630:	4313      	orrs	r3, r2
 8000632:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 
  /* Get bitmap data address offset */
  index = *(uint16_t *) (BmpAddress + 10);
 8000636:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800063a:	330a      	adds	r3, #10
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
  index |= (*(uint16_t *) (BmpAddress + 12)) << 16;  
 8000642:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000646:	330c      	adds	r3, #12
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	041b      	lsls	r3, r3, #16
 800064c:	461a      	mov	r2, r3
 800064e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000652:	4313      	orrs	r3, r2
 8000654:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
  
  f_close (&F1);
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	4618      	mov	r0, r3
 800065e:	f010 f884 	bl	801076a <f_close>
  
  f_open (&F1, BmpName, FA_READ);
 8000662:	463b      	mov	r3, r7
 8000664:	f107 0008 	add.w	r0, r7, #8
 8000668:	2201      	movs	r2, #1
 800066a:	6819      	ldr	r1, [r3, #0]
 800066c:	f00f fd02 	bl	8010074 <f_open>

  if (size > 240*240*2)
 8000670:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8000674:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
 8000678:	d903      	bls.n	8000682 <Storage_OpenReadFile+0xc2>
  {
    size = 240*240*2;
 800067a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800067e:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
  }
  
  do
  {
    if (size < 256*2)
 8000682:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8000686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800068a:	d204      	bcs.n	8000696 <Storage_OpenReadFile+0xd6>
    {
      i1 = size;
 800068c:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8000690:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8000694:	e003      	b.n	800069e <Storage_OpenReadFile+0xde>
    }
    else
    {
      i1 = 256*2;
 8000696:	f44f 7300 	mov.w	r3, #512	; 0x200
 800069a:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    }
    size -= i1;
 800069e:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 80006a2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
    f_read (&F1, sector, i1, (UINT *)&BytesRead);
 80006ac:	f107 0008 	add.w	r0, r7, #8
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <Storage_OpenReadFile+0x160>)
 80006b2:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 80006b6:	491b      	ldr	r1, [pc, #108]	; (8000724 <Storage_OpenReadFile+0x164>)
 80006b8:	f00f fe9a 	bl	80103f0 <f_read>

    for (index = 0; index < i1; index++)
 80006bc:	2300      	movs	r3, #0
 80006be:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80006c2:	e015      	b.n	80006f0 <Storage_OpenReadFile+0x130>
    {
      *(__IO uint8_t*) (Address) = *(__IO uint8_t *)BmpAddress;
 80006c4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	701a      	strb	r2, [r3, #0]
      
      BmpAddress++;  
 80006d2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80006d6:	3301      	adds	r3, #1
 80006d8:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
      Address++;
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	1d3a      	adds	r2, r7, #4
 80006e0:	6812      	ldr	r2, [r2, #0]
 80006e2:	3201      	adds	r2, #1
 80006e4:	601a      	str	r2, [r3, #0]
    for (index = 0; index < i1; index++)
 80006e6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80006ea:	3301      	adds	r3, #1
 80006ec:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80006f0:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80006f4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d3e3      	bcc.n	80006c4 <Storage_OpenReadFile+0x104>
    }  
    
    BmpAddress = (uint32_t)sector;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <Storage_OpenReadFile+0x164>)
 80006fe:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
  }
  while (size > 0);
 8000702:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8000706:	2b00      	cmp	r3, #0
 8000708:	d1bb      	bne.n	8000682 <Storage_OpenReadFile+0xc2>

  f_close (&F1);
 800070a:	f107 0308 	add.w	r3, r7, #8
 800070e:	4618      	mov	r0, r3
 8000710:	f010 f82b 	bl	801076a <f_close>
  
  return 1;
 8000714:	2301      	movs	r3, #1
}
 8000716:	4618      	mov	r0, r3
 8000718:	f507 7712 	add.w	r7, r7, #584	; 0x248
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000110 	.word	0x20000110
 8000724:	20004dd0 	.word	0x20004dd0

08000728 <Storage_CheckBitmapFile>:
  * @param  BufferAddress: A pointer to a buffer to copy the file to
  * @param  FileLen: the File lenght
  * @retval err: Error status (0=> success, 1=> fail)
  */
uint32_t Storage_CheckBitmapFile(const char* BmpName, uint32_t *FileLen)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
  if(f_mount(&fs, (TCHAR const*)"",0))
 8000732:	2200      	movs	r2, #0
 8000734:	4913      	ldr	r1, [pc, #76]	; (8000784 <Storage_CheckBitmapFile+0x5c>)
 8000736:	4814      	ldr	r0, [pc, #80]	; (8000788 <Storage_CheckBitmapFile+0x60>)
 8000738:	f00f fc56 	bl	800ffe8 <f_mount>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <Storage_CheckBitmapFile+0x1e>
  {
    return 1;
 8000742:	2301      	movs	r3, #1
 8000744:	e01a      	b.n	800077c <Storage_CheckBitmapFile+0x54>
  }
  if (f_open (&F, BmpName, FA_READ))
 8000746:	2201      	movs	r2, #1
 8000748:	6879      	ldr	r1, [r7, #4]
 800074a:	4810      	ldr	r0, [pc, #64]	; (800078c <Storage_CheckBitmapFile+0x64>)
 800074c:	f00f fc92 	bl	8010074 <f_open>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <Storage_CheckBitmapFile+0x32>
  {
    return 2;
 8000756:	2302      	movs	r3, #2
 8000758:	e010      	b.n	800077c <Storage_CheckBitmapFile+0x54>
  }
  
  f_read (&F, sector, 6, (UINT *)&BytesRead);
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <Storage_CheckBitmapFile+0x68>)
 800075c:	2206      	movs	r2, #6
 800075e:	490d      	ldr	r1, [pc, #52]	; (8000794 <Storage_CheckBitmapFile+0x6c>)
 8000760:	480a      	ldr	r0, [pc, #40]	; (800078c <Storage_CheckBitmapFile+0x64>)
 8000762:	f00f fe45 	bl	80103f0 <f_read>
  
  if (Buffercmp((uint8_t *)SlidesCheck, (uint8_t *) sector, 2) != 0)
 8000766:	2202      	movs	r2, #2
 8000768:	490a      	ldr	r1, [pc, #40]	; (8000794 <Storage_CheckBitmapFile+0x6c>)
 800076a:	480b      	ldr	r0, [pc, #44]	; (8000798 <Storage_CheckBitmapFile+0x70>)
 800076c:	f000 f8b2 	bl	80008d4 <Buffercmp>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <Storage_CheckBitmapFile+0x52>
  {
    return 3;
 8000776:	2303      	movs	r3, #3
 8000778:	e000      	b.n	800077c <Storage_CheckBitmapFile+0x54>
  }
  return 0;
 800077a:	2300      	movs	r3, #0
}
 800077c:	4618      	mov	r0, r3
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	0801493c 	.word	0x0801493c
 8000788:	20004ba0 	.word	0x20004ba0
 800078c:	20005000 	.word	0x20005000
 8000790:	20000110 	.word	0x20000110
 8000794:	20004dd0 	.word	0x20004dd0
 8000798:	08014a60 	.word	0x08014a60

0800079c <Storage_GetDirectoryBitmapFiles>:
  * @brief  List up to 25 file on the root directory with extension .BMP
  * @param  None
  * @retval The number of the found files
  */
uint32_t Storage_GetDirectoryBitmapFiles (const char* DirName, char* Files[])
{
 800079c:	b580      	push	{r7, lr}
 800079e:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	6018      	str	r0, [r3, #0]
 80007a8:	463b      	mov	r3, r7
 80007aa:	6019      	str	r1, [r3, #0]
  FATFS fs;
  FILINFO fno;
  DIR dir;
  uint32_t counter = 0, index = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80007b2:	2300      	movs	r3, #0
 80007b4:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
  FRESULT res;

  /* Open filesystem */
  if(f_mount(&fs, (TCHAR const*)"",0) != FR_OK)
 80007b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007bc:	2200      	movs	r2, #0
 80007be:	4944      	ldr	r1, [pc, #272]	; (80008d0 <Storage_GetDirectoryBitmapFiles+0x134>)
 80007c0:	4618      	mov	r0, r3
 80007c2:	f00f fc11 	bl	800ffe8 <f_mount>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <Storage_GetDirectoryBitmapFiles+0x34>
  {
    return 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	e07a      	b.n	80008c6 <Storage_GetDirectoryBitmapFiles+0x12a>
  }

  /* Open directory */
  res = f_opendir(&dir, DirName);
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	f107 020c 	add.w	r2, r7, #12
 80007d6:	6819      	ldr	r1, [r3, #0]
 80007d8:	4610      	mov	r0, r2
 80007da:	f00f fff0 	bl	80107be <f_opendir>
 80007de:	4603      	mov	r3, r0
 80007e0:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
  
  if (res == FR_OK)
 80007e4:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d165      	bne.n	80008b8 <Storage_GetDirectoryBitmapFiles+0x11c>
  {
    for (;;)
    {
      res = f_readdir(&dir, &fno);
 80007ec:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	4611      	mov	r1, r2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f010 f854 	bl	80108a4 <f_readdir>
 80007fc:	4603      	mov	r3, r0
 80007fe:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
      if (res != FR_OK || fno.fname[0] == 0)
 8000802:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 8000806:	2b00      	cmp	r3, #0
 8000808:	d156      	bne.n	80008b8 <Storage_GetDirectoryBitmapFiles+0x11c>
 800080a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800080e:	7a5b      	ldrb	r3, [r3, #9]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d051      	beq.n	80008b8 <Storage_GetDirectoryBitmapFiles+0x11c>
        break;
      if (fno.fname[0] == '.')
 8000814:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000818:	7a5b      	ldrb	r3, [r3, #9]
 800081a:	2b2e      	cmp	r3, #46	; 0x2e
 800081c:	d04a      	beq.n	80008b4 <Storage_GetDirectoryBitmapFiles+0x118>
        continue;

      if (!(fno.fattrib & AM_DIR))
 800081e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000822:	7a1b      	ldrb	r3, [r3, #8]
 8000824:	f003 0310 	and.w	r3, r3, #16
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1df      	bne.n	80007ec <Storage_GetDirectoryBitmapFiles+0x50>
      {
        do
        {
          counter++;
 800082c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8000830:	3301      	adds	r3, #1
 8000832:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
        }
        while (fno.fname[counter] != 0x2E); /* . */
 8000836:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800083a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800083e:	4413      	add	r3, r2
 8000840:	3309      	adds	r3, #9
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b2e      	cmp	r3, #46	; 0x2e
 8000846:	d1f1      	bne.n	800082c <Storage_GetDirectoryBitmapFiles+0x90>


        if (index < MAX_BMP_FILES)
 8000848:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 800084c:	2b18      	cmp	r3, #24
 800084e:	d82d      	bhi.n	80008ac <Storage_GetDirectoryBitmapFiles+0x110>
        {
          if ((fno.fname[counter + 1] == 'B') && (fno.fname[counter + 2] == 'M') && (fno.fname[counter + 3] == 'P'))
 8000850:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8000854:	3301      	adds	r3, #1
 8000856:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800085a:	4413      	add	r3, r2
 800085c:	7a5b      	ldrb	r3, [r3, #9]
 800085e:	2b42      	cmp	r3, #66	; 0x42
 8000860:	d124      	bne.n	80008ac <Storage_GetDirectoryBitmapFiles+0x110>
 8000862:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8000866:	3302      	adds	r3, #2
 8000868:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800086c:	4413      	add	r3, r2
 800086e:	7a5b      	ldrb	r3, [r3, #9]
 8000870:	2b4d      	cmp	r3, #77	; 0x4d
 8000872:	d11b      	bne.n	80008ac <Storage_GetDirectoryBitmapFiles+0x110>
 8000874:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8000878:	3303      	adds	r3, #3
 800087a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800087e:	4413      	add	r3, r2
 8000880:	7a5b      	ldrb	r3, [r3, #9]
 8000882:	2b50      	cmp	r3, #80	; 0x50
 8000884:	d112      	bne.n	80008ac <Storage_GetDirectoryBitmapFiles+0x110>
          {
            if(sizeof(fno.fname) <= (MAX_BMP_FILE_NAME + 2))
            {
              sprintf (Files[index], "%s", fno.fname);
 8000886:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	463a      	mov	r2, r7
 800088e:	6812      	ldr	r2, [r2, #0]
 8000890:	4413      	add	r3, r2
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000898:	3309      	adds	r3, #9
 800089a:	4619      	mov	r1, r3
 800089c:	4610      	mov	r0, r2
 800089e:	f013 fd15 	bl	80142cc <strcpy>
              index++;
 80008a2:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80008a6:	3301      	adds	r3, #1
 80008a8:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
            }
          }
        }
        counter = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80008b2:	e79b      	b.n	80007ec <Storage_GetDirectoryBitmapFiles+0x50>
        continue;
 80008b4:	bf00      	nop
      res = f_readdir(&dir, &fno);
 80008b6:	e799      	b.n	80007ec <Storage_GetDirectoryBitmapFiles+0x50>
      }
    }
  }
  f_mount(NULL, (TCHAR const*)"",0);
 80008b8:	2200      	movs	r2, #0
 80008ba:	4905      	ldr	r1, [pc, #20]	; (80008d0 <Storage_GetDirectoryBitmapFiles+0x134>)
 80008bc:	2000      	movs	r0, #0
 80008be:	f00f fb93 	bl	800ffe8 <f_mount>
  return index;
 80008c2:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	f507 7724 	add.w	r7, r7, #656	; 0x290
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	0801493c 	.word	0x0801493c

080008d4 <Buffercmp>:
  * @param  BufferLength: buffer's length.
  * @retval  0: pBuffer1 identical to pBuffer2
  *          1: pBuffer1 differs from pBuffer2
  */
uint8_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	4613      	mov	r3, r2
 80008e0:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 80008e2:	e00d      	b.n	8000900 <Buffercmp+0x2c>
  {
    if (*pBuffer1 != *pBuffer2)
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	781a      	ldrb	r2, [r3, #0]
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d001      	beq.n	80008f4 <Buffercmp+0x20>
    {
      return 1;
 80008f0:	2301      	movs	r3, #1
 80008f2:	e00b      	b.n	800090c <Buffercmp+0x38>
    }

    pBuffer1++;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	3301      	adds	r3, #1
 80008f8:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	3301      	adds	r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	1e5a      	subs	r2, r3, #1
 8000904:	80fa      	strh	r2, [r7, #6]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d1ec      	bne.n	80008e4 <Buffercmp+0x10>
  }

  return 0;
 800090a:	2300      	movs	r3, #0
}
 800090c:	4618      	mov	r0, r3
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000918:	b598      	push	{r3, r4, r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091c:	f003 f88e 	bl	8003a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000920:	f000 f8ec 	bl	8000afc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000924:	f000 fbea 	bl	80010fc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000928:	f000 f988 	bl	8000c3c <MX_ADC1_Init>
  MX_DAC_Init();
 800092c:	f000 f9d8 	bl	8000ce0 <MX_DAC_Init>
  MX_DFSDM1_Init();
 8000930:	f000 fa00 	bl	8000d34 <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 8000934:	f000 fa36 	bl	8000da4 <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 8000938:	f000 fa9e 	bl	8000e78 <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 800093c:	f000 fd74 	bl	8001428 <MX_FSMC_Init>
  MX_I2S2_Init();
 8000940:	f000 fafe 	bl	8000f40 <MX_I2S2_Init>
  MX_QUADSPI_Init();
 8000944:	f000 fb2a 	bl	8000f9c <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 8000948:	f000 fb54 	bl	8000ff4 <MX_SDIO_SD_Init>
  MX_UART10_Init();
 800094c:	f000 fb82 	bl	8001054 <MX_UART10_Init>
  MX_USART6_UART_Init();
 8000950:	f000 fbaa 	bl	80010a8 <MX_USART6_UART_Init>
  MX_I2C2_Init();
 8000954:	f000 fac6 	bl	8000ee4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* LCD Initialization */
    BSP_LCD_Init();
 8000958:	f002 fb1f 	bl	8002f9a <BSP_LCD_Init>

    /* Clear the LCD */
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 800095c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000960:	f002 fbda 	bl	8003118 <BSP_LCD_Clear>

    /* Configure Key Button */
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8000964:	2100      	movs	r1, #0
 8000966:	2000      	movs	r0, #0
 8000968:	f002 f962 	bl	8002c30 <BSP_PB_Init>

    /* SD Initialization */
    BSP_SD_Init();
 800096c:	f002 fe8e 	bl	800368c <BSP_SD_Init>

    /* Set the font Size */
    BSP_LCD_SetFont(&Font16);
 8000970:	484b      	ldr	r0, [pc, #300]	; (8000aa0 <main+0x188>)
 8000972:	f002 fbc1 	bl	80030f8 <BSP_LCD_SetFont>
    /* Set the Text Color */
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000976:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800097a:	f002 fb9d 	bl	80030b8 <BSP_LCD_SetTextColor>
    /* Set the Back Color */
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800097e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000982:	f002 fba9 	bl	80030d8 <BSP_LCD_SetBackColor>

    while(BSP_SD_IsDetected() != SD_PRESENT)
 8000986:	e005      	b.n	8000994 <main+0x7c>
      {
        BSP_LCD_DisplayStringAt(0, 112, (uint8_t*)"Starting Project...", CENTER_MODE);
 8000988:	2301      	movs	r3, #1
 800098a:	4a46      	ldr	r2, [pc, #280]	; (8000aa4 <main+0x18c>)
 800098c:	2170      	movs	r1, #112	; 0x70
 800098e:	2000      	movs	r0, #0
 8000990:	f002 fc22 	bl	80031d8 <BSP_LCD_DisplayStringAt>
    while(BSP_SD_IsDetected() != SD_PRESENT)
 8000994:	f002 fec6 	bl	8003724 <BSP_SD_IsDetected>
 8000998:	4603      	mov	r3, r0
 800099a:	2b01      	cmp	r3, #1
 800099c:	d1f4      	bne.n	8000988 <main+0x70>
      }
    sdStatus = true;
 800099e:	4b42      	ldr	r3, [pc, #264]	; (8000aa8 <main+0x190>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	701a      	strb	r2, [r3, #0]
    /* Clear the LCD */
      BSP_LCD_Clear(LCD_COLOR_WHITE);
 80009a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80009a8:	f002 fbb6 	bl	8003118 <BSP_LCD_Clear>

      /*##-2- Link the SD Card disk I/O driver ###################################*/
      if(FATFS_LinkDriver(&SD_Driver, SD_Path) == 0)
 80009ac:	493f      	ldr	r1, [pc, #252]	; (8000aac <main+0x194>)
 80009ae:	4840      	ldr	r0, [pc, #256]	; (8000ab0 <main+0x198>)
 80009b0:	f010 f802 	bl	80109b8 <FATFS_LinkDriver>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d14a      	bne.n	8000a50 <main+0x138>
      {
        /*##-3- Initialize the Directory Files pointers (heap) ###################*/
        for (counter = 0; counter < MAX_BMP_FILES; counter++)
 80009ba:	4b3e      	ldr	r3, [pc, #248]	; (8000ab4 <main+0x19c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	e01b      	b.n	80009fa <main+0xe2>
        {
          pDirectoryFiles[counter] = malloc(MAX_BMP_FILE_NAME);
 80009c2:	4b3c      	ldr	r3, [pc, #240]	; (8000ab4 <main+0x19c>)
 80009c4:	681c      	ldr	r4, [r3, #0]
 80009c6:	200b      	movs	r0, #11
 80009c8:	f013 fb84 	bl	80140d4 <malloc>
 80009cc:	4603      	mov	r3, r0
 80009ce:	461a      	mov	r2, r3
 80009d0:	4b39      	ldr	r3, [pc, #228]	; (8000ab8 <main+0x1a0>)
 80009d2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
          if(pDirectoryFiles[counter] == NULL)
 80009d6:	4b37      	ldr	r3, [pc, #220]	; (8000ab4 <main+0x19c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a37      	ldr	r2, [pc, #220]	; (8000ab8 <main+0x1a0>)
 80009dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d105      	bne.n	80009f0 <main+0xd8>
          {
            BSP_LCD_DisplayStringAt(0, 112, (uint8_t*)"Cannot allocate memory", CENTER_MODE);
 80009e4:	2301      	movs	r3, #1
 80009e6:	4a35      	ldr	r2, [pc, #212]	; (8000abc <main+0x1a4>)
 80009e8:	2170      	movs	r1, #112	; 0x70
 80009ea:	2000      	movs	r0, #0
 80009ec:	f002 fbf4 	bl	80031d8 <BSP_LCD_DisplayStringAt>
        for (counter = 0; counter < MAX_BMP_FILES; counter++)
 80009f0:	4b30      	ldr	r3, [pc, #192]	; (8000ab4 <main+0x19c>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	3301      	adds	r3, #1
 80009f6:	4a2f      	ldr	r2, [pc, #188]	; (8000ab4 <main+0x19c>)
 80009f8:	6013      	str	r3, [r2, #0]
 80009fa:	4b2e      	ldr	r3, [pc, #184]	; (8000ab4 <main+0x19c>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b18      	cmp	r3, #24
 8000a00:	d9df      	bls.n	80009c2 <main+0xaa>
          }
        }

        /* Get the BMP file names on root directory */
        ubNumberOfFiles = Storage_GetDirectoryBitmapFiles("/Media", pDirectoryFiles);
 8000a02:	492d      	ldr	r1, [pc, #180]	; (8000ab8 <main+0x1a0>)
 8000a04:	482e      	ldr	r0, [pc, #184]	; (8000ac0 <main+0x1a8>)
 8000a06:	f7ff fec9 	bl	800079c <Storage_GetDirectoryBitmapFiles>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4b2d      	ldr	r3, [pc, #180]	; (8000ac4 <main+0x1ac>)
 8000a10:	701a      	strb	r2, [r3, #0]

        if (ubNumberOfFiles == 0)
 8000a12:	4b2c      	ldr	r3, [pc, #176]	; (8000ac4 <main+0x1ac>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d11a      	bne.n	8000a50 <main+0x138>
        {
          for (counter = 0; counter < MAX_BMP_FILES; counter++)
 8000a1a:	4b26      	ldr	r3, [pc, #152]	; (8000ab4 <main+0x19c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	e00c      	b.n	8000a3c <main+0x124>
          {
            free(pDirectoryFiles[counter]);
 8000a22:	4b24      	ldr	r3, [pc, #144]	; (8000ab4 <main+0x19c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a24      	ldr	r2, [pc, #144]	; (8000ab8 <main+0x1a0>)
 8000a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f013 fb59 	bl	80140e4 <free>
          for (counter = 0; counter < MAX_BMP_FILES; counter++)
 8000a32:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <main+0x19c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	3301      	adds	r3, #1
 8000a38:	4a1e      	ldr	r2, [pc, #120]	; (8000ab4 <main+0x19c>)
 8000a3a:	6013      	str	r3, [r2, #0]
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <main+0x19c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b18      	cmp	r3, #24
 8000a42:	d9ee      	bls.n	8000a22 <main+0x10a>
          }

          BSP_LCD_DisplayStringAt(0, 112, (uint8_t*)"No Bitmap files...", CENTER_MODE);
 8000a44:	2301      	movs	r3, #1
 8000a46:	4a20      	ldr	r2, [pc, #128]	; (8000ac8 <main+0x1b0>)
 8000a48:	2170      	movs	r1, #112	; 0x70
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f002 fbc4 	bl	80031d8 <BSP_LCD_DisplayStringAt>
      else
      {
        /* FatFs Initialization Error */
      }

      counter = 0;
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <main+0x19c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
        }*/

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a56:	f010 f8ab 	bl	8010bb0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000a5a:	4a1c      	ldr	r2, [pc, #112]	; (8000acc <main+0x1b4>)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	481c      	ldr	r0, [pc, #112]	; (8000ad0 <main+0x1b8>)
 8000a60:	f010 f910 	bl	8010c84 <osThreadNew>
 8000a64:	4602      	mov	r2, r0
 8000a66:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <main+0x1bc>)
 8000a68:	601a      	str	r2, [r3, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000a6a:	4a1b      	ldr	r2, [pc, #108]	; (8000ad8 <main+0x1c0>)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	481b      	ldr	r0, [pc, #108]	; (8000adc <main+0x1c4>)
 8000a70:	f010 f908 	bl	8010c84 <osThreadNew>
 8000a74:	4602      	mov	r2, r0
 8000a76:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <main+0x1c8>)
 8000a78:	601a      	str	r2, [r3, #0]

  /* creation of buttonPoll */
  buttonPollHandle = osThreadNew(StartButtonPoll, NULL, &buttonPoll_attributes);
 8000a7a:	4a1a      	ldr	r2, [pc, #104]	; (8000ae4 <main+0x1cc>)
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	481a      	ldr	r0, [pc, #104]	; (8000ae8 <main+0x1d0>)
 8000a80:	f010 f900 	bl	8010c84 <osThreadNew>
 8000a84:	4602      	mov	r2, r0
 8000a86:	4b19      	ldr	r3, [pc, #100]	; (8000aec <main+0x1d4>)
 8000a88:	601a      	str	r2, [r3, #0]

  /* creation of displayImage */
  displayImageHandle = osThreadNew(StartDisplayImage, NULL, &displayImage_attributes);
 8000a8a:	4a19      	ldr	r2, [pc, #100]	; (8000af0 <main+0x1d8>)
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4819      	ldr	r0, [pc, #100]	; (8000af4 <main+0x1dc>)
 8000a90:	f010 f8f8 	bl	8010c84 <osThreadNew>
 8000a94:	4602      	mov	r2, r0
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <main+0x1e0>)
 8000a98:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a9a:	f010 f8bd 	bl	8010c18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <main+0x186>
 8000aa0:	20000050 	.word	0x20000050
 8000aa4:	0801496c 	.word	0x0801496c
 8000aa8:	20000120 	.word	0x20000120
 8000aac:	200216d0 	.word	0x200216d0
 8000ab0:	080176a0 	.word	0x080176a0
 8000ab4:	2000011c 	.word	0x2000011c
 8000ab8:	20005388 	.word	0x20005388
 8000abc:	08014980 	.word	0x08014980
 8000ac0:	08014998 	.word	0x08014998
 8000ac4:	20000114 	.word	0x20000114
 8000ac8:	080149a0 	.word	0x080149a0
 8000acc:	08014a64 	.word	0x08014a64
 8000ad0:	0800158d 	.word	0x0800158d
 8000ad4:	200217e8 	.word	0x200217e8
 8000ad8:	08014a88 	.word	0x08014a88
 8000adc:	080015b1 	.word	0x080015b1
 8000ae0:	20021a84 	.word	0x20021a84
 8000ae4:	08014aac 	.word	0x08014aac
 8000ae8:	080015d1 	.word	0x080015d1
 8000aec:	20005268 	.word	0x20005268
 8000af0:	08014ad0 	.word	0x08014ad0
 8000af4:	0800163d 	.word	0x0800163d
 8000af8:	20021624 	.word	0x20021624

08000afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b0aa      	sub	sp, #168	; 0xa8
 8000b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b02:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b06:	2234      	movs	r2, #52	; 0x34
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f013 fafd 	bl	801410a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b10:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	2258      	movs	r2, #88	; 0x58
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f013 faee 	bl	801410a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	4b40      	ldr	r3, [pc, #256]	; (8000c34 <SystemClock_Config+0x138>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a3f      	ldr	r2, [pc, #252]	; (8000c34 <SystemClock_Config+0x138>)
 8000b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b3d      	ldr	r3, [pc, #244]	; (8000c34 <SystemClock_Config+0x138>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	4b3a      	ldr	r3, [pc, #232]	; (8000c38 <SystemClock_Config+0x13c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a39      	ldr	r2, [pc, #228]	; (8000c38 <SystemClock_Config+0x13c>)
 8000b54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b58:	6013      	str	r3, [r2, #0]
 8000b5a:	4b37      	ldr	r3, [pc, #220]	; (8000c38 <SystemClock_Config+0x13c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000b66:	2303      	movs	r3, #3
 8000b68:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b6a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b6e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b70:	2301      	movs	r3, #1
 8000b72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b76:	2310      	movs	r3, #16
 8000b78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000b8a:	230f      	movs	r3, #15
 8000b8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000b90:	2390      	movs	r3, #144	; 0x90
 8000b92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b96:	2302      	movs	r3, #2
 8000b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000b9c:	2305      	movs	r3, #5
 8000b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000bac:	4618      	mov	r0, r3
 8000bae:	f007 fafd 	bl	80081ac <HAL_RCC_OscConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bb8:	f000 fd9a 	bl	80016f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bd0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f006 fd0e 	bl	80075f8 <HAL_RCC_ClockConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000be2:	f000 fd85 	bl	80016f0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 8000be6:	f240 1371 	movw	r3, #369	; 0x171
 8000bea:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000bec:	2332      	movs	r3, #50	; 0x32
 8000bee:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 8000bf0:	230c      	movs	r3, #12
 8000bf2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 8000c00:	2300      	movs	r3, #0
 8000c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 8000c04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c08:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8000c12:	2300      	movs	r3, #0
 8000c14:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f006 feea 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0x12e>
  {
    Error_Handler();
 8000c26:	f000 fd63 	bl	80016f0 <Error_Handler>
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	37a8      	adds	r7, #168	; 0xa8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40007000 	.word	0x40007000

08000c3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c42:	463b      	mov	r3, r7
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c4e:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <MX_ADC1_Init+0x98>)
 8000c50:	4a21      	ldr	r2, [pc, #132]	; (8000cd8 <MX_ADC1_Init+0x9c>)
 8000c52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c54:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <MX_ADC1_Init+0x98>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <MX_ADC1_Init+0x98>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c60:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_ADC1_Init+0x98>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c66:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <MX_ADC1_Init+0x98>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <MX_ADC1_Init+0x98>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c74:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <MX_ADC1_Init+0x98>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c7a:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <MX_ADC1_Init+0x98>)
 8000c7c:	4a17      	ldr	r2, [pc, #92]	; (8000cdc <MX_ADC1_Init+0xa0>)
 8000c7e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c80:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <MX_ADC1_Init+0x98>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <MX_ADC1_Init+0x98>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <MX_ADC1_Init+0x98>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <MX_ADC1_Init+0x98>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c9a:	480e      	ldr	r0, [pc, #56]	; (8000cd4 <MX_ADC1_Init+0x98>)
 8000c9c:	f002 ff32 	bl	8003b04 <HAL_ADC_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ca6:	f000 fd23 	bl	80016f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000caa:	230a      	movs	r3, #10
 8000cac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <MX_ADC1_Init+0x98>)
 8000cbc:	f002 ff66 	bl	8003b8c <HAL_ADC_ConfigChannel>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000cc6:	f000 fd13 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20021628 	.word	0x20021628
 8000cd8:	40012000 	.word	0x40012000
 8000cdc:	0f000001 	.word	0x0f000001

08000ce0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000cee:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_DAC_Init+0x4c>)
 8000cf0:	4a0f      	ldr	r2, [pc, #60]	; (8000d30 <MX_DAC_Init+0x50>)
 8000cf2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000cf4:	480d      	ldr	r0, [pc, #52]	; (8000d2c <MX_DAC_Init+0x4c>)
 8000cf6:	f003 fa59 	bl	80041ac <HAL_DAC_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000d00:	f000 fcf6 	bl	80016f0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d0c:	463b      	mov	r3, r7
 8000d0e:	2200      	movs	r2, #0
 8000d10:	4619      	mov	r1, r3
 8000d12:	4806      	ldr	r0, [pc, #24]	; (8000d2c <MX_DAC_Init+0x4c>)
 8000d14:	f003 fac0 	bl	8004298 <HAL_DAC_ConfigChannel>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000d1e:	f000 fce7 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20021670 	.word	0x20021670
 8000d30:	40007400 	.word	0x40007400

08000d34 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000d38:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <MX_DFSDM1_Init+0x68>)
 8000d3a:	4a19      	ldr	r2, [pc, #100]	; (8000da0 <MX_DFSDM1_Init+0x6c>)
 8000d3c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000d3e:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <MX_DFSDM1_Init+0x68>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000d44:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <MX_DFSDM1_Init+0x68>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000d4a:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <MX_DFSDM1_Init+0x68>)
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <MX_DFSDM1_Init+0x68>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_DFSDM1_Init+0x68>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <MX_DFSDM1_Init+0x68>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_DFSDM1_Init+0x68>)
 8000d64:	2202      	movs	r2, #2
 8000d66:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_DFSDM1_Init+0x68>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <MX_DFSDM1_Init+0x68>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000d74:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_DFSDM1_Init+0x68>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <MX_DFSDM1_Init+0x68>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_DFSDM1_Init+0x68>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_DFSDM1_Init+0x68>)
 8000d88:	f003 fade 	bl	8004348 <HAL_DFSDM_ChannelInit>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000d92:	f000 fcad 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20005230 	.word	0x20005230
 8000da0:	40016020 	.word	0x40016020

08000da4 <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 8000da8:	4b2f      	ldr	r3, [pc, #188]	; (8000e68 <MX_DFSDM2_Init+0xc4>)
 8000daa:	4a30      	ldr	r2, [pc, #192]	; (8000e6c <MX_DFSDM2_Init+0xc8>)
 8000dac:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 8000dae:	4b2e      	ldr	r3, [pc, #184]	; (8000e68 <MX_DFSDM2_Init+0xc4>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000db4:	4b2c      	ldr	r3, [pc, #176]	; (8000e68 <MX_DFSDM2_Init+0xc4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 8000dba:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <MX_DFSDM2_Init+0xc4>)
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000dc0:	4b29      	ldr	r3, [pc, #164]	; (8000e68 <MX_DFSDM2_Init+0xc4>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000dc6:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <MX_DFSDM2_Init+0xc4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000dcc:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <MX_DFSDM2_Init+0xc4>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000dd2:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <MX_DFSDM2_Init+0xc4>)
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000dd8:	4b23      	ldr	r3, [pc, #140]	; (8000e68 <MX_DFSDM2_Init+0xc4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000dde:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <MX_DFSDM2_Init+0xc4>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 8000de4:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <MX_DFSDM2_Init+0xc4>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 8000dea:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <MX_DFSDM2_Init+0xc4>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <MX_DFSDM2_Init+0xc4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 8000df6:	481c      	ldr	r0, [pc, #112]	; (8000e68 <MX_DFSDM2_Init+0xc4>)
 8000df8:	f003 faa6 	bl	8004348 <HAL_DFSDM_ChannelInit>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_DFSDM2_Init+0x62>
  {
    Error_Handler();
 8000e02:	f000 fc75 	bl	80016f0 <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 8000e06:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <MX_DFSDM2_Init+0xcc>)
 8000e08:	4a1a      	ldr	r2, [pc, #104]	; (8000e74 <MX_DFSDM2_Init+0xd0>)
 8000e0a:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 8000e0c:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <MX_DFSDM2_Init+0xcc>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000e12:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <MX_DFSDM2_Init+0xcc>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 8000e18:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <MX_DFSDM2_Init+0xcc>)
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000e1e:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <MX_DFSDM2_Init+0xcc>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <MX_DFSDM2_Init+0xcc>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_DFSDM2_Init+0xcc>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <MX_DFSDM2_Init+0xcc>)
 8000e32:	2202      	movs	r2, #2
 8000e34:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_DFSDM2_Init+0xcc>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_DFSDM2_Init+0xcc>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <MX_DFSDM2_Init+0xcc>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MX_DFSDM2_Init+0xcc>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <MX_DFSDM2_Init+0xcc>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 8000e54:	4806      	ldr	r0, [pc, #24]	; (8000e70 <MX_DFSDM2_Init+0xcc>)
 8000e56:	f003 fa77 	bl	8004348 <HAL_DFSDM_ChannelInit>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_DFSDM2_Init+0xc0>
  {
    Error_Handler();
 8000e60:	f000 fc46 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200215ec 	.word	0x200215ec
 8000e6c:	40016420 	.word	0x40016420
 8000e70:	200052c0 	.word	0x200052c0
 8000e74:	400164e0 	.word	0x400164e0

08000e78 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <MX_FMPI2C1_Init+0x60>)
 8000e7e:	4a17      	ldr	r2, [pc, #92]	; (8000edc <MX_FMPI2C1_Init+0x64>)
 8000e80:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <MX_FMPI2C1_Init+0x60>)
 8000e84:	4a16      	ldr	r2, [pc, #88]	; (8000ee0 <MX_FMPI2C1_Init+0x68>)
 8000e86:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <MX_FMPI2C1_Init+0x60>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <MX_FMPI2C1_Init+0x60>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8000e94:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <MX_FMPI2C1_Init+0x60>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_FMPI2C1_Init+0x60>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8000ea0:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <MX_FMPI2C1_Init+0x60>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <MX_FMPI2C1_Init+0x60>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <MX_FMPI2C1_Init+0x60>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8000eb2:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <MX_FMPI2C1_Init+0x60>)
 8000eb4:	f003 fd58 	bl	8004968 <HAL_FMPI2C_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8000ebe:	f000 fc17 	bl	80016f0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <MX_FMPI2C1_Init+0x60>)
 8000ec6:	f003 fdde 	bl	8004a86 <HAL_FMPI2CEx_ConfigAnalogFilter>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000ed0:	f000 fc0e 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20021684 	.word	0x20021684
 8000edc:	40006000 	.word	0x40006000
 8000ee0:	00303d5b 	.word	0x00303d5b

08000ee4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <MX_I2C2_Init+0x50>)
 8000eea:	4a13      	ldr	r2, [pc, #76]	; (8000f38 <MX_I2C2_Init+0x54>)
 8000eec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <MX_I2C2_Init+0x50>)
 8000ef0:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <MX_I2C2_Init+0x58>)
 8000ef2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <MX_I2C2_Init+0x50>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MX_I2C2_Init+0x50>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <MX_I2C2_Init+0x50>)
 8000f02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f06:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f08:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <MX_I2C2_Init+0x50>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <MX_I2C2_Init+0x50>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f14:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <MX_I2C2_Init+0x50>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <MX_I2C2_Init+0x50>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f20:	4804      	ldr	r0, [pc, #16]	; (8000f34 <MX_I2C2_Init+0x50>)
 8000f22:	f005 fccb 	bl	80068bc <HAL_I2C_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f2c:	f000 fbe0 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	2000526c 	.word	0x2000526c
 8000f38:	40005800 	.word	0x40005800
 8000f3c:	000186a0 	.word	0x000186a0

08000f40 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <MX_I2S2_Init+0x54>)
 8000f46:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <MX_I2S2_Init+0x58>)
 8000f48:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <MX_I2S2_Init+0x54>)
 8000f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f50:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <MX_I2S2_Init+0x54>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000f58:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_I2S2_Init+0x54>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <MX_I2S2_Init+0x54>)
 8000f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f64:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <MX_I2S2_Init+0x54>)
 8000f68:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000f6c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_I2S2_Init+0x54>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <MX_I2S2_Init+0x54>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_I2S2_Init+0x54>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000f80:	4804      	ldr	r0, [pc, #16]	; (8000f94 <MX_I2S2_Init+0x54>)
 8000f82:	f005 fdd3 	bl	8006b2c <HAL_I2S_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000f8c:	f000 fbb0 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20021a3c 	.word	0x20021a3c
 8000f98:	40003800 	.word	0x40003800

08000f9c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <MX_QUADSPI_Init+0x50>)
 8000fa2:	4a13      	ldr	r2, [pc, #76]	; (8000ff0 <MX_QUADSPI_Init+0x54>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_QUADSPI_Init+0x50>)
 8000fa8:	22ff      	movs	r2, #255	; 0xff
 8000faa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_QUADSPI_Init+0x50>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_QUADSPI_Init+0x50>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_QUADSPI_Init+0x50>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_QUADSPI_Init+0x50>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_QUADSPI_Init+0x50>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MX_QUADSPI_Init+0x50>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_QUADSPI_Init+0x50>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_QUADSPI_Init+0x50>)
 8000fd8:	f006 fa4c 	bl	8007474 <HAL_QSPI_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000fe2:	f000 fb85 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20021a88 	.word	0x20021a88
 8000ff0:	a0001000 	.word	0xa0001000

08000ff4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <MX_SDIO_SD_Init+0x58>)
 8000ffa:	4a15      	ldr	r2, [pc, #84]	; (8001050 <MX_SDIO_SD_Init+0x5c>)
 8000ffc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000ffe:	4b13      	ldr	r3, [pc, #76]	; (800104c <MX_SDIO_SD_Init+0x58>)
 8001000:	2200      	movs	r2, #0
 8001002:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <MX_SDIO_SD_Init+0x58>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <MX_SDIO_SD_Init+0x58>)
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001010:	4b0e      	ldr	r3, [pc, #56]	; (800104c <MX_SDIO_SD_Init+0x58>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <MX_SDIO_SD_Init+0x58>)
 8001018:	2200      	movs	r2, #0
 800101a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <MX_SDIO_SD_Init+0x58>)
 800101e:	2200      	movs	r2, #0
 8001020:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8001022:	480a      	ldr	r0, [pc, #40]	; (800104c <MX_SDIO_SD_Init+0x58>)
 8001024:	f007 fb04 	bl	8008630 <HAL_SD_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 800102e:	f000 fb5f 	bl	80016f0 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8001032:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_SDIO_SD_Init+0x58>)
 8001038:	f008 f8f2 	bl	8009220 <HAL_SD_ConfigWideBusOperation>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8001042:	f000 fb55 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20021724 	.word	0x20021724
 8001050:	40012c00 	.word	0x40012c00

08001054 <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MX_UART10_Init+0x4c>)
 800105a:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <MX_UART10_Init+0x50>)
 800105c:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <MX_UART10_Init+0x4c>)
 8001060:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001064:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_UART10_Init+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_UART10_Init+0x4c>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <MX_UART10_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_UART10_Init+0x4c>)
 800107a:	220c      	movs	r2, #12
 800107c:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <MX_UART10_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MX_UART10_Init+0x4c>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <MX_UART10_Init+0x4c>)
 800108c:	f008 feca 	bl	8009e24 <HAL_UART_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_UART10_Init+0x46>
  {
    Error_Handler();
 8001096:	f000 fb2b 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200052f8 	.word	0x200052f8
 80010a4:	40011c00 	.word	0x40011c00

080010a8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <MX_USART6_UART_Init+0x4c>)
 80010ae:	4a12      	ldr	r2, [pc, #72]	; (80010f8 <MX_USART6_UART_Init+0x50>)
 80010b0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <MX_USART6_UART_Init+0x4c>)
 80010b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <MX_USART6_UART_Init+0x4c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MX_USART6_UART_Init+0x4c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <MX_USART6_UART_Init+0x4c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80010cc:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <MX_USART6_UART_Init+0x4c>)
 80010ce:	220c      	movs	r2, #12
 80010d0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <MX_USART6_UART_Init+0x4c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <MX_USART6_UART_Init+0x4c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <MX_USART6_UART_Init+0x4c>)
 80010e0:	f008 fea0 	bl	8009e24 <HAL_UART_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80010ea:	f000 fb01 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200217a8 	.word	0x200217a8
 80010f8:	40011400 	.word	0x40011400

080010fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08e      	sub	sp, #56	; 0x38
 8001100:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
 8001116:	4bb1      	ldr	r3, [pc, #708]	; (80013dc <MX_GPIO_Init+0x2e0>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4ab0      	ldr	r2, [pc, #704]	; (80013dc <MX_GPIO_Init+0x2e0>)
 800111c:	f043 0310 	orr.w	r3, r3, #16
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4bae      	ldr	r3, [pc, #696]	; (80013dc <MX_GPIO_Init+0x2e0>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0310 	and.w	r3, r3, #16
 800112a:	623b      	str	r3, [r7, #32]
 800112c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
 8001132:	4baa      	ldr	r3, [pc, #680]	; (80013dc <MX_GPIO_Init+0x2e0>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4aa9      	ldr	r2, [pc, #676]	; (80013dc <MX_GPIO_Init+0x2e0>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4ba7      	ldr	r3, [pc, #668]	; (80013dc <MX_GPIO_Init+0x2e0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	61fb      	str	r3, [r7, #28]
 8001148:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	61bb      	str	r3, [r7, #24]
 800114e:	4ba3      	ldr	r3, [pc, #652]	; (80013dc <MX_GPIO_Init+0x2e0>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4aa2      	ldr	r2, [pc, #648]	; (80013dc <MX_GPIO_Init+0x2e0>)
 8001154:	f043 0320 	orr.w	r3, r3, #32
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4ba0      	ldr	r3, [pc, #640]	; (80013dc <MX_GPIO_Init+0x2e0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0320 	and.w	r3, r3, #32
 8001162:	61bb      	str	r3, [r7, #24]
 8001164:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	4b9c      	ldr	r3, [pc, #624]	; (80013dc <MX_GPIO_Init+0x2e0>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a9b      	ldr	r2, [pc, #620]	; (80013dc <MX_GPIO_Init+0x2e0>)
 8001170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b99      	ldr	r3, [pc, #612]	; (80013dc <MX_GPIO_Init+0x2e0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	4b95      	ldr	r3, [pc, #596]	; (80013dc <MX_GPIO_Init+0x2e0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a94      	ldr	r2, [pc, #592]	; (80013dc <MX_GPIO_Init+0x2e0>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b92      	ldr	r3, [pc, #584]	; (80013dc <MX_GPIO_Init+0x2e0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	4b8e      	ldr	r3, [pc, #568]	; (80013dc <MX_GPIO_Init+0x2e0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a8d      	ldr	r2, [pc, #564]	; (80013dc <MX_GPIO_Init+0x2e0>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b8b      	ldr	r3, [pc, #556]	; (80013dc <MX_GPIO_Init+0x2e0>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	4b87      	ldr	r3, [pc, #540]	; (80013dc <MX_GPIO_Init+0x2e0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a86      	ldr	r2, [pc, #536]	; (80013dc <MX_GPIO_Init+0x2e0>)
 80011c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b84      	ldr	r3, [pc, #528]	; (80013dc <MX_GPIO_Init+0x2e0>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	4b80      	ldr	r3, [pc, #512]	; (80013dc <MX_GPIO_Init+0x2e0>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a7f      	ldr	r2, [pc, #508]	; (80013dc <MX_GPIO_Init+0x2e0>)
 80011e0:	f043 0308 	orr.w	r3, r3, #8
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b7d      	ldr	r3, [pc, #500]	; (80013dc <MX_GPIO_Init+0x2e0>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2138      	movs	r1, #56	; 0x38
 80011f6:	487a      	ldr	r0, [pc, #488]	; (80013e0 <MX_GPIO_Init+0x2e4>)
 80011f8:	f003 fe3a 	bl	8004e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2120      	movs	r1, #32
 8001200:	4878      	ldr	r0, [pc, #480]	; (80013e4 <MX_GPIO_Init+0x2e8>)
 8001202:	f003 fe35 	bl	8004e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800120c:	4876      	ldr	r0, [pc, #472]	; (80013e8 <MX_GPIO_Init+0x2ec>)
 800120e:	f003 fe2f 	bl	8004e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8001218:	4874      	ldr	r0, [pc, #464]	; (80013ec <MX_GPIO_Init+0x2f0>)
 800121a:	f003 fe29 	bl	8004e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 800121e:	2338      	movs	r3, #56	; 0x38
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001222:	2301      	movs	r3, #1
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800122e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001232:	4619      	mov	r1, r3
 8001234:	486a      	ldr	r0, [pc, #424]	; (80013e0 <MX_GPIO_Init+0x2e4>)
 8001236:	f003 fc71 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 800123a:	2340      	movs	r3, #64	; 0x40
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2300      	movs	r3, #0
 8001248:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800124a:	2303      	movs	r3, #3
 800124c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 800124e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001252:	4619      	mov	r1, r3
 8001254:	4862      	ldr	r0, [pc, #392]	; (80013e0 <MX_GPIO_Init+0x2e4>)
 8001256:	f003 fc61 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800125a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800126c:	2302      	movs	r3, #2
 800126e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001274:	4619      	mov	r1, r3
 8001276:	485e      	ldr	r0, [pc, #376]	; (80013f0 <MX_GPIO_Init+0x2f4>)
 8001278:	f003 fc50 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 800127c:	2302      	movs	r3, #2
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001280:	4b5c      	ldr	r3, [pc, #368]	; (80013f4 <MX_GPIO_Init+0x2f8>)
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8001288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128c:	4619      	mov	r1, r3
 800128e:	4855      	ldr	r0, [pc, #340]	; (80013e4 <MX_GPIO_Init+0x2e8>)
 8001290:	f003 fc44 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001294:	2301      	movs	r3, #1
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001298:	2300      	movs	r3, #0
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a4:	4619      	mov	r1, r3
 80012a6:	4854      	ldr	r0, [pc, #336]	; (80013f8 <MX_GPIO_Init+0x2fc>)
 80012a8:	f003 fc38 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 80012ac:	2320      	movs	r3, #32
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 80012bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c0:	4619      	mov	r1, r3
 80012c2:	4848      	ldr	r0, [pc, #288]	; (80013e4 <MX_GPIO_Init+0x2e8>)
 80012c4:	f003 fc2a 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80012c8:	2301      	movs	r3, #1
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012d8:	2302      	movs	r3, #2
 80012da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80012dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e0:	4619      	mov	r1, r3
 80012e2:	4841      	ldr	r0, [pc, #260]	; (80013e8 <MX_GPIO_Init+0x2ec>)
 80012e4:	f003 fc1a 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 80012e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ee:	4b41      	ldr	r3, [pc, #260]	; (80013f4 <MX_GPIO_Init+0x2f8>)
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 80012f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fa:	4619      	mov	r1, r3
 80012fc:	483c      	ldr	r0, [pc, #240]	; (80013f0 <MX_GPIO_Init+0x2f4>)
 80012fe:	f003 fc0d 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8001302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001314:	2307      	movs	r3, #7
 8001316:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8001318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131c:	4619      	mov	r1, r3
 800131e:	4832      	ldr	r0, [pc, #200]	; (80013e8 <MX_GPIO_Init+0x2ec>)
 8001320:	f003 fbfc 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 8001324:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132a:	2301      	movs	r3, #1
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133a:	4619      	mov	r1, r3
 800133c:	482a      	ldr	r0, [pc, #168]	; (80013e8 <MX_GPIO_Init+0x2ec>)
 800133e:	f003 fbed 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 8001342:	f248 0380 	movw	r3, #32896	; 0x8080
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001348:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <MX_GPIO_Init+0x2f8>)
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001354:	4619      	mov	r1, r3
 8001356:	4825      	ldr	r0, [pc, #148]	; (80013ec <MX_GPIO_Init+0x2f0>)
 8001358:	f003 fbe0 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin;
 800135c:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001362:	2301      	movs	r3, #1
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800136e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001372:	4619      	mov	r1, r3
 8001374:	481d      	ldr	r0, [pc, #116]	; (80013ec <MX_GPIO_Init+0x2f0>)
 8001376:	f003 fbd1 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 800137a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800138c:	2301      	movs	r3, #1
 800138e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8001390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001394:	4619      	mov	r1, r3
 8001396:	4818      	ldr	r0, [pc, #96]	; (80013f8 <MX_GPIO_Init+0x2fc>)
 8001398:	f003 fbc0 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800139c:	2330      	movs	r3, #48	; 0x30
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013ac:	2306      	movs	r3, #6
 80013ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b4:	4619      	mov	r1, r3
 80013b6:	480c      	ldr	r0, [pc, #48]	; (80013e8 <MX_GPIO_Init+0x2ec>)
 80013b8:	f003 fbb0 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80013bc:	2340      	movs	r3, #64	; 0x40
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_GPIO_Init+0x2f8>)
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013cc:	4619      	mov	r1, r3
 80013ce:	4806      	ldr	r0, [pc, #24]	; (80013e8 <MX_GPIO_Init+0x2ec>)
 80013d0:	f003 fba4 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 80013d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013d8:	e010      	b.n	80013fc <MX_GPIO_Init+0x300>
 80013da:	bf00      	nop
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40020800 	.word	0x40020800
 80013e8:	40020400 	.word	0x40020400
 80013ec:	40021800 	.word	0x40021800
 80013f0:	40021400 	.word	0x40021400
 80013f4:	10110000 	.word	0x10110000
 80013f8:	40020000 	.word	0x40020000
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800140a:	2302      	movs	r3, #2
 800140c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 800140e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001412:	4619      	mov	r1, r3
 8001414:	4803      	ldr	r0, [pc, #12]	; (8001424 <MX_GPIO_Init+0x328>)
 8001416:	f003 fb81 	bl	8004b1c <HAL_GPIO_Init>

}
 800141a:	bf00      	nop
 800141c:	3738      	adds	r7, #56	; 0x38
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40020400 	.word	0x40020400

08001428 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
 800143c:	615a      	str	r2, [r3, #20]
 800143e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001440:	4b4f      	ldr	r3, [pc, #316]	; (8001580 <MX_FSMC_Init+0x158>)
 8001442:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001446:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001448:	4b4d      	ldr	r3, [pc, #308]	; (8001580 <MX_FSMC_Init+0x158>)
 800144a:	4a4e      	ldr	r2, [pc, #312]	; (8001584 <MX_FSMC_Init+0x15c>)
 800144c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800144e:	4b4c      	ldr	r3, [pc, #304]	; (8001580 <MX_FSMC_Init+0x158>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001454:	4b4a      	ldr	r3, [pc, #296]	; (8001580 <MX_FSMC_Init+0x158>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800145a:	4b49      	ldr	r3, [pc, #292]	; (8001580 <MX_FSMC_Init+0x158>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001460:	4b47      	ldr	r3, [pc, #284]	; (8001580 <MX_FSMC_Init+0x158>)
 8001462:	2210      	movs	r2, #16
 8001464:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001466:	4b46      	ldr	r3, [pc, #280]	; (8001580 <MX_FSMC_Init+0x158>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800146c:	4b44      	ldr	r3, [pc, #272]	; (8001580 <MX_FSMC_Init+0x158>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001472:	4b43      	ldr	r3, [pc, #268]	; (8001580 <MX_FSMC_Init+0x158>)
 8001474:	2200      	movs	r2, #0
 8001476:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001478:	4b41      	ldr	r3, [pc, #260]	; (8001580 <MX_FSMC_Init+0x158>)
 800147a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800147e:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001480:	4b3f      	ldr	r3, [pc, #252]	; (8001580 <MX_FSMC_Init+0x158>)
 8001482:	2200      	movs	r2, #0
 8001484:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001486:	4b3e      	ldr	r3, [pc, #248]	; (8001580 <MX_FSMC_Init+0x158>)
 8001488:	2200      	movs	r2, #0
 800148a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800148c:	4b3c      	ldr	r3, [pc, #240]	; (8001580 <MX_FSMC_Init+0x158>)
 800148e:	2200      	movs	r2, #0
 8001490:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001492:	4b3b      	ldr	r3, [pc, #236]	; (8001580 <MX_FSMC_Init+0x158>)
 8001494:	2200      	movs	r2, #0
 8001496:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001498:	4b39      	ldr	r3, [pc, #228]	; (8001580 <MX_FSMC_Init+0x158>)
 800149a:	2200      	movs	r2, #0
 800149c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 800149e:	4b38      	ldr	r3, [pc, #224]	; (8001580 <MX_FSMC_Init+0x158>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80014a4:	4b36      	ldr	r3, [pc, #216]	; (8001580 <MX_FSMC_Init+0x158>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80014aa:	230f      	movs	r3, #15
 80014ac:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80014ae:	230f      	movs	r3, #15
 80014b0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80014b2:	23ff      	movs	r3, #255	; 0xff
 80014b4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80014b6:	230f      	movs	r3, #15
 80014b8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80014ba:	2310      	movs	r3, #16
 80014bc:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80014be:	2311      	movs	r3, #17
 80014c0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2200      	movs	r2, #0
 80014ca:	4619      	mov	r1, r3
 80014cc:	482c      	ldr	r0, [pc, #176]	; (8001580 <MX_FSMC_Init+0x158>)
 80014ce:	f008 fa27 	bl	8009920 <HAL_SRAM_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 80014d8:	f000 f90a 	bl	80016f0 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 80014dc:	4b2a      	ldr	r3, [pc, #168]	; (8001588 <MX_FSMC_Init+0x160>)
 80014de:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80014e2:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80014e4:	4b28      	ldr	r3, [pc, #160]	; (8001588 <MX_FSMC_Init+0x160>)
 80014e6:	4a27      	ldr	r2, [pc, #156]	; (8001584 <MX_FSMC_Init+0x15c>)
 80014e8:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 80014ea:	4b27      	ldr	r3, [pc, #156]	; (8001588 <MX_FSMC_Init+0x160>)
 80014ec:	2204      	movs	r2, #4
 80014ee:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80014f0:	4b25      	ldr	r3, [pc, #148]	; (8001588 <MX_FSMC_Init+0x160>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80014f6:	4b24      	ldr	r3, [pc, #144]	; (8001588 <MX_FSMC_Init+0x160>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80014fc:	4b22      	ldr	r3, [pc, #136]	; (8001588 <MX_FSMC_Init+0x160>)
 80014fe:	2210      	movs	r2, #16
 8001500:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001502:	4b21      	ldr	r3, [pc, #132]	; (8001588 <MX_FSMC_Init+0x160>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001508:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <MX_FSMC_Init+0x160>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800150e:	4b1e      	ldr	r3, [pc, #120]	; (8001588 <MX_FSMC_Init+0x160>)
 8001510:	2200      	movs	r2, #0
 8001512:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001514:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <MX_FSMC_Init+0x160>)
 8001516:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800151a:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800151c:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <MX_FSMC_Init+0x160>)
 800151e:	2200      	movs	r2, #0
 8001520:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001522:	4b19      	ldr	r3, [pc, #100]	; (8001588 <MX_FSMC_Init+0x160>)
 8001524:	2200      	movs	r2, #0
 8001526:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001528:	4b17      	ldr	r3, [pc, #92]	; (8001588 <MX_FSMC_Init+0x160>)
 800152a:	2200      	movs	r2, #0
 800152c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800152e:	4b16      	ldr	r3, [pc, #88]	; (8001588 <MX_FSMC_Init+0x160>)
 8001530:	2200      	movs	r2, #0
 8001532:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001534:	4b14      	ldr	r3, [pc, #80]	; (8001588 <MX_FSMC_Init+0x160>)
 8001536:	2200      	movs	r2, #0
 8001538:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <MX_FSMC_Init+0x160>)
 800153c:	2200      	movs	r2, #0
 800153e:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_FSMC_Init+0x160>)
 8001542:	2200      	movs	r2, #0
 8001544:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001546:	230f      	movs	r3, #15
 8001548:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800154a:	230f      	movs	r3, #15
 800154c:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800154e:	23ff      	movs	r3, #255	; 0xff
 8001550:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001552:	230f      	movs	r3, #15
 8001554:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001556:	2310      	movs	r3, #16
 8001558:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800155a:	2311      	movs	r3, #17
 800155c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	2200      	movs	r2, #0
 8001566:	4619      	mov	r1, r3
 8001568:	4807      	ldr	r0, [pc, #28]	; (8001588 <MX_FSMC_Init+0x160>)
 800156a:	f008 f9d9 	bl	8009920 <HAL_SRAM_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_FSMC_Init+0x150>
  {
    Error_Handler( );
 8001574:	f000 f8bc 	bl	80016f0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001578:	bf00      	nop
 800157a:	3720      	adds	r7, #32
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20005338 	.word	0x20005338
 8001584:	a0000104 	.word	0xa0000104
 8001588:	200216d4 	.word	0x200216d4

0800158c <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001594:	f012 fa72 	bl	8013a7c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8001598:	2108      	movs	r1, #8
 800159a:	4804      	ldr	r0, [pc, #16]	; (80015ac <StartBlink01+0x20>)
 800159c:	f003 fc81 	bl	8004ea2 <HAL_GPIO_TogglePin>
    osDelay(3000);
 80015a0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80015a4:	f00f fc14 	bl	8010dd0 <osDelay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 80015a8:	e7f6      	b.n	8001598 <StartBlink01+0xc>
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000

080015b0 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 80015b8:	2120      	movs	r1, #32
 80015ba:	4804      	ldr	r0, [pc, #16]	; (80015cc <StartBlink02+0x1c>)
 80015bc:	f003 fc71 	bl	8004ea2 <HAL_GPIO_TogglePin>
    osDelay(2000);
 80015c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015c4:	f00f fc04 	bl	8010dd0 <osDelay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 80015c8:	e7f6      	b.n	80015b8 <StartBlink02+0x8>
 80015ca:	bf00      	nop
 80015cc:	40020800 	.word	0x40020800

080015d0 <StartButtonPoll>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonPoll */
void StartButtonPoll(void *argument)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonPoll */
  /* Infinite loop */
  for(;;)
  {
	  bool buttonCurrent = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80015d8:	2101      	movs	r1, #1
 80015da:	4813      	ldr	r0, [pc, #76]	; (8001628 <StartButtonPoll+0x58>)
 80015dc:	f003 fc30 	bl	8004e40 <HAL_GPIO_ReadPin>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	bf14      	ite	ne
 80015e6:	2301      	movne	r3, #1
 80015e8:	2300      	moveq	r3, #0
 80015ea:	73fb      	strb	r3, [r7, #15]
	  if(buttonState^buttonCurrent) {
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <StartButtonPoll+0x5c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d014      	beq.n	8001620 <StartButtonPoll+0x50>
		  buttonState = buttonCurrent;
 80015f6:	4a0d      	ldr	r2, [pc, #52]	; (800162c <StartButtonPoll+0x5c>)
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	7013      	strb	r3, [r2, #0]

		  if(buttonCurrent) {
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00e      	beq.n	8001620 <StartButtonPoll+0x50>
			  changeImage = true;
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <StartButtonPoll+0x60>)
 8001604:	2201      	movs	r2, #1
 8001606:	701a      	strb	r2, [r3, #0]
			  counter = (counter+1)%ubNumberOfFiles;
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <StartButtonPoll+0x64>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	3301      	adds	r3, #1
 800160e:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <StartButtonPoll+0x68>)
 8001610:	7812      	ldrb	r2, [r2, #0]
 8001612:	fbb3 f1f2 	udiv	r1, r3, r2
 8001616:	fb02 f201 	mul.w	r2, r2, r1
 800161a:	1a9b      	subs	r3, r3, r2
 800161c:	4a05      	ldr	r2, [pc, #20]	; (8001634 <StartButtonPoll+0x64>)
 800161e:	6013      	str	r3, [r2, #0]
		  }
	  }

    osDelay(50);
 8001620:	2032      	movs	r0, #50	; 0x32
 8001622:	f00f fbd5 	bl	8010dd0 <osDelay>
  {
 8001626:	e7d7      	b.n	80015d8 <StartButtonPoll+0x8>
 8001628:	40020000 	.word	0x40020000
 800162c:	20000121 	.word	0x20000121
 8001630:	20000000 	.word	0x20000000
 8001634:	2000011c 	.word	0x2000011c
 8001638:	20000114 	.word	0x20000114

0800163c <StartDisplayImage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayImage */
void StartDisplayImage(void *argument)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayImage */
  /* Infinite loop */
  for(;;)
  {
	  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001644:	2000      	movs	r0, #0
 8001646:	f001 fd67 	bl	8003118 <BSP_LCD_Clear>
	   //Format the string
	  sprintf ((char*)str, "Media/%-11.11s", pDirectoryFiles[counter]);
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <StartDisplayImage+0x70>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a18      	ldr	r2, [pc, #96]	; (80016b0 <StartDisplayImage+0x74>)
 8001650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001654:	461a      	mov	r2, r3
 8001656:	4917      	ldr	r1, [pc, #92]	; (80016b4 <StartDisplayImage+0x78>)
 8001658:	4817      	ldr	r0, [pc, #92]	; (80016b8 <StartDisplayImage+0x7c>)
 800165a:	f012 fe17 	bl	801428c <siprintf>

	  if (Storage_CheckBitmapFile((const char*)str, &uwBmplen) == 0)
 800165e:	4917      	ldr	r1, [pc, #92]	; (80016bc <StartDisplayImage+0x80>)
 8001660:	4815      	ldr	r0, [pc, #84]	; (80016b8 <StartDisplayImage+0x7c>)
 8001662:	f7ff f861 	bl	8000728 <Storage_CheckBitmapFile>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d11a      	bne.n	80016a2 <StartDisplayImage+0x66>
	  {
		// Open a file and copy its content to an internal buffer
		Storage_OpenReadFile(uwInternelBuffer, (const char*)str);
 800166c:	4912      	ldr	r1, [pc, #72]	; (80016b8 <StartDisplayImage+0x7c>)
 800166e:	4814      	ldr	r0, [pc, #80]	; (80016c0 <StartDisplayImage+0x84>)
 8001670:	f7fe ffa6 	bl	80005c0 <Storage_OpenReadFile>

		 //Write bmp file on LCD frame buffer
		BSP_LCD_DrawBitmap(0, 0, uwInternelBuffer);
 8001674:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <StartDisplayImage+0x84>)
 8001676:	2100      	movs	r1, #0
 8001678:	2000      	movs	r0, #0
 800167a:	f001 fe95 	bl	80033a8 <BSP_LCD_DrawBitmap>
		//{
		//}

		 //Clear the LCD

		while(BSP_SD_IsDetected() != SD_PRESENT)
 800167e:	e00b      	b.n	8001698 <StartDisplayImage+0x5c>
		{
		  BSP_LCD_DisplayStringAt(0, 112, (uint8_t*)"Please insert SD Card  ", CENTER_MODE);
 8001680:	2301      	movs	r3, #1
 8001682:	4a10      	ldr	r2, [pc, #64]	; (80016c4 <StartDisplayImage+0x88>)
 8001684:	2170      	movs	r1, #112	; 0x70
 8001686:	2000      	movs	r0, #0
 8001688:	f001 fda6 	bl	80031d8 <BSP_LCD_DisplayStringAt>
		  BSP_LCD_DisplayStringAt(0, 128, (uint8_t*)"Reset the board        ", CENTER_MODE);
 800168c:	2301      	movs	r3, #1
 800168e:	4a0e      	ldr	r2, [pc, #56]	; (80016c8 <StartDisplayImage+0x8c>)
 8001690:	2180      	movs	r1, #128	; 0x80
 8001692:	2000      	movs	r0, #0
 8001694:	f001 fda0 	bl	80031d8 <BSP_LCD_DisplayStringAt>
		while(BSP_SD_IsDetected() != SD_PRESENT)
 8001698:	f002 f844 	bl	8003724 <BSP_SD_IsDetected>
 800169c:	4603      	mov	r3, r0
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d1ee      	bne.n	8001680 <StartDisplayImage+0x44>
		}
		 //Jump to the next image
		//counter++;
	  }

    osDelay(500);
 80016a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016a6:	f00f fb93 	bl	8010dd0 <osDelay>
	  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80016aa:	e7cb      	b.n	8001644 <StartDisplayImage+0x8>
 80016ac:	2000011c 	.word	0x2000011c
 80016b0:	20005388 	.word	0x20005388
 80016b4:	080149b4 	.word	0x080149b4
 80016b8:	200217ec 	.word	0x200217ec
 80016bc:	20000118 	.word	0x20000118
 80016c0:	200053ec 	.word	0x200053ec
 80016c4:	080149c4 	.word	0x080149c4
 80016c8:	080149dc 	.word	0x080149dc

080016cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a04      	ldr	r2, [pc, #16]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d101      	bne.n	80016e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016de:	f002 f9cf 	bl	8003a80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40001000 	.word	0x40001000

080016f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <HAL_MspInit+0x4c>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	4a0f      	ldr	r2, [pc, #60]	; (800174c <HAL_MspInit+0x4c>)
 8001710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001714:	6453      	str	r3, [r2, #68]	; 0x44
 8001716:	4b0d      	ldr	r3, [pc, #52]	; (800174c <HAL_MspInit+0x4c>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_MspInit+0x4c>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	4a08      	ldr	r2, [pc, #32]	; (800174c <HAL_MspInit+0x4c>)
 800172c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001730:	6413      	str	r3, [r2, #64]	; 0x40
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_MspInit+0x4c>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800

08001750 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08c      	sub	sp, #48	; 0x30
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 031c 	add.w	r3, r7, #28
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a31      	ldr	r2, [pc, #196]	; (8001834 <HAL_ADC_MspInit+0xe4>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d15b      	bne.n	800182a <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
 8001776:	4b30      	ldr	r3, [pc, #192]	; (8001838 <HAL_ADC_MspInit+0xe8>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	4a2f      	ldr	r2, [pc, #188]	; (8001838 <HAL_ADC_MspInit+0xe8>)
 800177c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001780:	6453      	str	r3, [r2, #68]	; 0x44
 8001782:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <HAL_ADC_MspInit+0xe8>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178a:	61bb      	str	r3, [r7, #24]
 800178c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	4b29      	ldr	r3, [pc, #164]	; (8001838 <HAL_ADC_MspInit+0xe8>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a28      	ldr	r2, [pc, #160]	; (8001838 <HAL_ADC_MspInit+0xe8>)
 8001798:	f043 0304 	orr.w	r3, r3, #4
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b26      	ldr	r3, [pc, #152]	; (8001838 <HAL_ADC_MspInit+0xe8>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0304 	and.w	r3, r3, #4
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	4b22      	ldr	r3, [pc, #136]	; (8001838 <HAL_ADC_MspInit+0xe8>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a21      	ldr	r2, [pc, #132]	; (8001838 <HAL_ADC_MspInit+0xe8>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <HAL_ADC_MspInit+0xe8>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <HAL_ADC_MspInit+0xe8>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a1a      	ldr	r2, [pc, #104]	; (8001838 <HAL_ADC_MspInit+0xe8>)
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b18      	ldr	r3, [pc, #96]	; (8001838 <HAL_ADC_MspInit+0xe8>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 80017e2:	2311      	movs	r3, #17
 80017e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017e6:	2303      	movs	r3, #3
 80017e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ee:	f107 031c 	add.w	r3, r7, #28
 80017f2:	4619      	mov	r1, r3
 80017f4:	4811      	ldr	r0, [pc, #68]	; (800183c <HAL_ADC_MspInit+0xec>)
 80017f6:	f003 f991 	bl	8004b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 80017fa:	2326      	movs	r3, #38	; 0x26
 80017fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017fe:	2303      	movs	r3, #3
 8001800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001806:	f107 031c 	add.w	r3, r7, #28
 800180a:	4619      	mov	r1, r3
 800180c:	480c      	ldr	r0, [pc, #48]	; (8001840 <HAL_ADC_MspInit+0xf0>)
 800180e:	f003 f985 	bl	8004b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 8001812:	2302      	movs	r3, #2
 8001814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001816:	2303      	movs	r3, #3
 8001818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 800181e:	f107 031c 	add.w	r3, r7, #28
 8001822:	4619      	mov	r1, r3
 8001824:	4807      	ldr	r0, [pc, #28]	; (8001844 <HAL_ADC_MspInit+0xf4>)
 8001826:	f003 f979 	bl	8004b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800182a:	bf00      	nop
 800182c:	3730      	adds	r7, #48	; 0x30
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40012000 	.word	0x40012000
 8001838:	40023800 	.word	0x40023800
 800183c:	40020800 	.word	0x40020800
 8001840:	40020000 	.word	0x40020000
 8001844:	40020400 	.word	0x40020400

08001848 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a1b      	ldr	r2, [pc, #108]	; (80018d4 <HAL_DAC_MspInit+0x8c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d12f      	bne.n	80018ca <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <HAL_DAC_MspInit+0x90>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	4a19      	ldr	r2, [pc, #100]	; (80018d8 <HAL_DAC_MspInit+0x90>)
 8001874:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001878:	6413      	str	r3, [r2, #64]	; 0x40
 800187a:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <HAL_DAC_MspInit+0x90>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <HAL_DAC_MspInit+0x90>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a12      	ldr	r2, [pc, #72]	; (80018d8 <HAL_DAC_MspInit+0x90>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <HAL_DAC_MspInit+0x90>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 80018a2:	2310      	movs	r3, #16
 80018a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018a6:	2303      	movs	r3, #3
 80018a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	4809      	ldr	r0, [pc, #36]	; (80018dc <HAL_DAC_MspInit+0x94>)
 80018b6:	f003 f931 	bl	8004b1c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	2036      	movs	r0, #54	; 0x36
 80018c0:	f002 fc4a 	bl	8004158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018c4:	2036      	movs	r0, #54	; 0x36
 80018c6:	f002 fc63 	bl	8004190 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80018ca:	bf00      	nop
 80018cc:	3728      	adds	r7, #40	; 0x28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40007400 	.word	0x40007400
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40020000 	.word	0x40020000

080018e0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08e      	sub	sp, #56	; 0x38
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a77      	ldr	r2, [pc, #476]	; (8001adc <HAL_DFSDM_ChannelMspInit+0x1fc>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d00e      	beq.n	8001920 <HAL_DFSDM_ChannelMspInit+0x40>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a76      	ldr	r2, [pc, #472]	; (8001ae0 <HAL_DFSDM_ChannelMspInit+0x200>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d009      	beq.n	8001920 <HAL_DFSDM_ChannelMspInit+0x40>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a74      	ldr	r2, [pc, #464]	; (8001ae4 <HAL_DFSDM_ChannelMspInit+0x204>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d004      	beq.n	8001920 <HAL_DFSDM_ChannelMspInit+0x40>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a73      	ldr	r2, [pc, #460]	; (8001ae8 <HAL_DFSDM_ChannelMspInit+0x208>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d154      	bne.n	80019ca <HAL_DFSDM_ChannelMspInit+0xea>
 8001920:	4b72      	ldr	r3, [pc, #456]	; (8001aec <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d150      	bne.n	80019ca <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001928:	2300      	movs	r3, #0
 800192a:	623b      	str	r3, [r7, #32]
 800192c:	4b70      	ldr	r3, [pc, #448]	; (8001af0 <HAL_DFSDM_ChannelMspInit+0x210>)
 800192e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001930:	4a6f      	ldr	r2, [pc, #444]	; (8001af0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001936:	6453      	str	r3, [r2, #68]	; 0x44
 8001938:	4b6d      	ldr	r3, [pc, #436]	; (8001af0 <HAL_DFSDM_ChannelMspInit+0x210>)
 800193a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001940:	623b      	str	r3, [r7, #32]
 8001942:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001944:	2300      	movs	r3, #0
 8001946:	61fb      	str	r3, [r7, #28]
 8001948:	4b69      	ldr	r3, [pc, #420]	; (8001af0 <HAL_DFSDM_ChannelMspInit+0x210>)
 800194a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194c:	4a68      	ldr	r2, [pc, #416]	; (8001af0 <HAL_DFSDM_ChannelMspInit+0x210>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6313      	str	r3, [r2, #48]	; 0x30
 8001954:	4b66      	ldr	r3, [pc, #408]	; (8001af0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	61fb      	str	r3, [r7, #28]
 800195e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001960:	2300      	movs	r3, #0
 8001962:	61bb      	str	r3, [r7, #24]
 8001964:	4b62      	ldr	r3, [pc, #392]	; (8001af0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001968:	4a61      	ldr	r2, [pc, #388]	; (8001af0 <HAL_DFSDM_ChannelMspInit+0x210>)
 800196a:	f043 0308 	orr.w	r3, r3, #8
 800196e:	6313      	str	r3, [r2, #48]	; 0x30
 8001970:	4b5f      	ldr	r3, [pc, #380]	; (8001af0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	61bb      	str	r3, [r7, #24]
 800197a:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 800197c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001982:	2302      	movs	r3, #2
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	2300      	movs	r3, #0
 800198c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800198e:	2306      	movs	r3, #6
 8001990:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001996:	4619      	mov	r1, r3
 8001998:	4856      	ldr	r0, [pc, #344]	; (8001af4 <HAL_DFSDM_ChannelMspInit+0x214>)
 800199a:	f003 f8bf 	bl	8004b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 800199e:	2340      	movs	r3, #64	; 0x40
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80019ae:	2306      	movs	r3, #6
 80019b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 80019b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b6:	4619      	mov	r1, r3
 80019b8:	484f      	ldr	r0, [pc, #316]	; (8001af8 <HAL_DFSDM_ChannelMspInit+0x218>)
 80019ba:	f003 f8af 	bl	8004b1c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80019be:	4b4b      	ldr	r3, [pc, #300]	; (8001aec <HAL_DFSDM_ChannelMspInit+0x20c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	3301      	adds	r3, #1
 80019c4:	4a49      	ldr	r2, [pc, #292]	; (8001aec <HAL_DFSDM_ChannelMspInit+0x20c>)
 80019c6:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 80019c8:	e084      	b.n	8001ad4 <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a43      	ldr	r2, [pc, #268]	; (8001adc <HAL_DFSDM_ChannelMspInit+0x1fc>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d07f      	beq.n	8001ad4 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a41      	ldr	r2, [pc, #260]	; (8001ae0 <HAL_DFSDM_ChannelMspInit+0x200>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d07a      	beq.n	8001ad4 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a40      	ldr	r2, [pc, #256]	; (8001ae4 <HAL_DFSDM_ChannelMspInit+0x204>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d075      	beq.n	8001ad4 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a3e      	ldr	r2, [pc, #248]	; (8001ae8 <HAL_DFSDM_ChannelMspInit+0x208>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d070      	beq.n	8001ad4 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80019f2:	4b42      	ldr	r3, [pc, #264]	; (8001afc <HAL_DFSDM_ChannelMspInit+0x21c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d16c      	bne.n	8001ad4 <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	4b3c      	ldr	r3, [pc, #240]	; (8001af0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	4a3b      	ldr	r2, [pc, #236]	; (8001af0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001a04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a08:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0a:	4b39      	ldr	r3, [pc, #228]	; (8001af0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	4b35      	ldr	r3, [pc, #212]	; (8001af0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a34      	ldr	r2, [pc, #208]	; (8001af0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b32      	ldr	r3, [pc, #200]	; (8001af0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b2e      	ldr	r3, [pc, #184]	; (8001af0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a2d      	ldr	r2, [pc, #180]	; (8001af0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001a3c:	f043 0308 	orr.w	r3, r3, #8
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b2b      	ldr	r3, [pc, #172]	; (8001af0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a26      	ldr	r2, [pc, #152]	; (8001af0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a76:	2300      	movs	r3, #0
 8001a78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8001a7a:	2307      	movs	r3, #7
 8001a7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a82:	4619      	mov	r1, r3
 8001a84:	481b      	ldr	r0, [pc, #108]	; (8001af4 <HAL_DFSDM_ChannelMspInit+0x214>)
 8001a86:	f003 f849 	bl	8004b1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a96:	2300      	movs	r3, #0
 8001a98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4814      	ldr	r0, [pc, #80]	; (8001af8 <HAL_DFSDM_ChannelMspInit+0x218>)
 8001aa6:	f003 f839 	bl	8004b1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8001aaa:	2380      	movs	r3, #128	; 0x80
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8001aba:	2306      	movs	r3, #6
 8001abc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8001abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	480e      	ldr	r0, [pc, #56]	; (8001b00 <HAL_DFSDM_ChannelMspInit+0x220>)
 8001ac6:	f003 f829 	bl	8004b1c <HAL_GPIO_Init>
  DFSDM2_Init++;
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001ad2:	6013      	str	r3, [r2, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	3738      	adds	r7, #56	; 0x38
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40016000 	.word	0x40016000
 8001ae0:	40016020 	.word	0x40016020
 8001ae4:	40016040 	.word	0x40016040
 8001ae8:	40016060 	.word	0x40016060
 8001aec:	20000124 	.word	0x20000124
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020000 	.word	0x40020000
 8001af8:	40020c00 	.word	0x40020c00
 8001afc:	20000128 	.word	0x20000128
 8001b00:	40020400 	.word	0x40020400

08001b04 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	; 0x28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a19      	ldr	r2, [pc, #100]	; (8001b88 <HAL_FMPI2C_MspInit+0x84>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d12b      	bne.n	8001b7e <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <HAL_FMPI2C_MspInit+0x88>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a17      	ldr	r2, [pc, #92]	; (8001b8c <HAL_FMPI2C_MspInit+0x88>)
 8001b30:	f043 0304 	orr.w	r3, r3, #4
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <HAL_FMPI2C_MspInit+0x88>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 8001b42:	23c0      	movs	r3, #192	; 0xc0
 8001b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b46:	2312      	movs	r3, #18
 8001b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8001b52:	2304      	movs	r3, #4
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	480c      	ldr	r0, [pc, #48]	; (8001b90 <HAL_FMPI2C_MspInit+0x8c>)
 8001b5e:	f002 ffdd 	bl	8004b1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_FMPI2C_MspInit+0x88>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	4a08      	ldr	r2, [pc, #32]	; (8001b8c <HAL_FMPI2C_MspInit+0x88>)
 8001b6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b70:	6413      	str	r3, [r2, #64]	; 0x40
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_FMPI2C_MspInit+0x88>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8001b7e:	bf00      	nop
 8001b80:	3728      	adds	r7, #40	; 0x28
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40006000 	.word	0x40006000
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40020800 	.word	0x40020800

08001b94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	; 0x28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a19      	ldr	r2, [pc, #100]	; (8001c18 <HAL_I2C_MspInit+0x84>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d12c      	bne.n	8001c10 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a17      	ldr	r2, [pc, #92]	; (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001bd2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd8:	2312      	movs	r3, #18
 8001bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be0:	2303      	movs	r3, #3
 8001be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001be4:	2304      	movs	r3, #4
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4619      	mov	r1, r3
 8001bee:	480c      	ldr	r0, [pc, #48]	; (8001c20 <HAL_I2C_MspInit+0x8c>)
 8001bf0:	f002 ff94 	bl	8004b1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	4a07      	ldr	r2, [pc, #28]	; (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c02:	6413      	str	r3, [r2, #64]	; 0x40
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_I2C_MspInit+0x88>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c10:	bf00      	nop
 8001c12:	3728      	adds	r7, #40	; 0x28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40005800 	.word	0x40005800
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40020400 	.word	0x40020400

08001c24 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08c      	sub	sp, #48	; 0x30
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 031c 	add.w	r3, r7, #28
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a4f      	ldr	r2, [pc, #316]	; (8001d80 <HAL_I2S_MspInit+0x15c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	f040 8097 	bne.w	8001d76 <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61bb      	str	r3, [r7, #24]
 8001c4c:	4b4d      	ldr	r3, [pc, #308]	; (8001d84 <HAL_I2S_MspInit+0x160>)
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	4a4c      	ldr	r2, [pc, #304]	; (8001d84 <HAL_I2S_MspInit+0x160>)
 8001c52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c56:	6413      	str	r3, [r2, #64]	; 0x40
 8001c58:	4b4a      	ldr	r3, [pc, #296]	; (8001d84 <HAL_I2S_MspInit+0x160>)
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c60:	61bb      	str	r3, [r7, #24]
 8001c62:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	4b46      	ldr	r3, [pc, #280]	; (8001d84 <HAL_I2S_MspInit+0x160>)
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6c:	4a45      	ldr	r2, [pc, #276]	; (8001d84 <HAL_I2S_MspInit+0x160>)
 8001c6e:	f043 0304 	orr.w	r3, r3, #4
 8001c72:	6313      	str	r3, [r2, #48]	; 0x30
 8001c74:	4b43      	ldr	r3, [pc, #268]	; (8001d84 <HAL_I2S_MspInit+0x160>)
 8001c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c80:	2300      	movs	r3, #0
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	4b3f      	ldr	r3, [pc, #252]	; (8001d84 <HAL_I2S_MspInit+0x160>)
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	4a3e      	ldr	r2, [pc, #248]	; (8001d84 <HAL_I2S_MspInit+0x160>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c90:	4b3c      	ldr	r3, [pc, #240]	; (8001d84 <HAL_I2S_MspInit+0x160>)
 8001c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	4b38      	ldr	r3, [pc, #224]	; (8001d84 <HAL_I2S_MspInit+0x160>)
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca4:	4a37      	ldr	r2, [pc, #220]	; (8001d84 <HAL_I2S_MspInit+0x160>)
 8001ca6:	f043 0308 	orr.w	r3, r3, #8
 8001caa:	6313      	str	r3, [r2, #48]	; 0x30
 8001cac:	4b35      	ldr	r3, [pc, #212]	; (8001d84 <HAL_I2S_MspInit+0x160>)
 8001cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	4b31      	ldr	r3, [pc, #196]	; (8001d84 <HAL_I2S_MspInit+0x160>)
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc0:	4a30      	ldr	r2, [pc, #192]	; (8001d84 <HAL_I2S_MspInit+0x160>)
 8001cc2:	f043 0302 	orr.w	r3, r3, #2
 8001cc6:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc8:	4b2e      	ldr	r3, [pc, #184]	; (8001d84 <HAL_I2S_MspInit+0x160>)
 8001cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 8001cd4:	2304      	movs	r3, #4
 8001cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8001ce4:	2306      	movs	r3, #6
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8001ce8:	f107 031c 	add.w	r3, r7, #28
 8001cec:	4619      	mov	r1, r3
 8001cee:	4826      	ldr	r0, [pc, #152]	; (8001d88 <HAL_I2S_MspInit+0x164>)
 8001cf0:	f002 ff14 	bl	8004b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8001cf4:	2308      	movs	r3, #8
 8001cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d00:	2300      	movs	r3, #0
 8001d02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d04:	2305      	movs	r3, #5
 8001d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8001d08:	f107 031c 	add.w	r3, r7, #28
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	481e      	ldr	r0, [pc, #120]	; (8001d88 <HAL_I2S_MspInit+0x164>)
 8001d10:	f002 ff04 	bl	8004b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8001d14:	2308      	movs	r3, #8
 8001d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d20:	2300      	movs	r3, #0
 8001d22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d24:	2305      	movs	r3, #5
 8001d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8001d28:	f107 031c 	add.w	r3, r7, #28
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4817      	ldr	r0, [pc, #92]	; (8001d8c <HAL_I2S_MspInit+0x168>)
 8001d30:	f002 fef4 	bl	8004b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8001d34:	2308      	movs	r3, #8
 8001d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d44:	2305      	movs	r3, #5
 8001d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8001d48:	f107 031c 	add.w	r3, r7, #28
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4810      	ldr	r0, [pc, #64]	; (8001d90 <HAL_I2S_MspInit+0x16c>)
 8001d50:	f002 fee4 	bl	8004b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 8001d54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d62:	2300      	movs	r3, #0
 8001d64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d66:	2305      	movs	r3, #5
 8001d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 8001d6a:	f107 031c 	add.w	r3, r7, #28
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4808      	ldr	r0, [pc, #32]	; (8001d94 <HAL_I2S_MspInit+0x170>)
 8001d72:	f002 fed3 	bl	8004b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d76:	bf00      	nop
 8001d78:	3730      	adds	r7, #48	; 0x30
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40003800 	.word	0x40003800
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40020800 	.word	0x40020800
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	40020c00 	.word	0x40020c00
 8001d94:	40020400 	.word	0x40020400

08001d98 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08e      	sub	sp, #56	; 0x38
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a56      	ldr	r2, [pc, #344]	; (8001f10 <HAL_QSPI_MspInit+0x178>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	f040 80a6 	bne.w	8001f08 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	623b      	str	r3, [r7, #32]
 8001dc0:	4b54      	ldr	r3, [pc, #336]	; (8001f14 <HAL_QSPI_MspInit+0x17c>)
 8001dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc4:	4a53      	ldr	r2, [pc, #332]	; (8001f14 <HAL_QSPI_MspInit+0x17c>)
 8001dc6:	f043 0302 	orr.w	r3, r3, #2
 8001dca:	6393      	str	r3, [r2, #56]	; 0x38
 8001dcc:	4b51      	ldr	r3, [pc, #324]	; (8001f14 <HAL_QSPI_MspInit+0x17c>)
 8001dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	623b      	str	r3, [r7, #32]
 8001dd6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
 8001ddc:	4b4d      	ldr	r3, [pc, #308]	; (8001f14 <HAL_QSPI_MspInit+0x17c>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	4a4c      	ldr	r2, [pc, #304]	; (8001f14 <HAL_QSPI_MspInit+0x17c>)
 8001de2:	f043 0310 	orr.w	r3, r3, #16
 8001de6:	6313      	str	r3, [r2, #48]	; 0x30
 8001de8:	4b4a      	ldr	r3, [pc, #296]	; (8001f14 <HAL_QSPI_MspInit+0x17c>)
 8001dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dec:	f003 0310 	and.w	r3, r3, #16
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001df4:	2300      	movs	r3, #0
 8001df6:	61bb      	str	r3, [r7, #24]
 8001df8:	4b46      	ldr	r3, [pc, #280]	; (8001f14 <HAL_QSPI_MspInit+0x17c>)
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	4a45      	ldr	r2, [pc, #276]	; (8001f14 <HAL_QSPI_MspInit+0x17c>)
 8001dfe:	f043 0320 	orr.w	r3, r3, #32
 8001e02:	6313      	str	r3, [r2, #48]	; 0x30
 8001e04:	4b43      	ldr	r3, [pc, #268]	; (8001f14 <HAL_QSPI_MspInit+0x17c>)
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	f003 0320 	and.w	r3, r3, #32
 8001e0c:	61bb      	str	r3, [r7, #24]
 8001e0e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	4b3f      	ldr	r3, [pc, #252]	; (8001f14 <HAL_QSPI_MspInit+0x17c>)
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	4a3e      	ldr	r2, [pc, #248]	; (8001f14 <HAL_QSPI_MspInit+0x17c>)
 8001e1a:	f043 0302 	orr.w	r3, r3, #2
 8001e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e20:	4b3c      	ldr	r3, [pc, #240]	; (8001f14 <HAL_QSPI_MspInit+0x17c>)
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	4b38      	ldr	r3, [pc, #224]	; (8001f14 <HAL_QSPI_MspInit+0x17c>)
 8001e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e34:	4a37      	ldr	r2, [pc, #220]	; (8001f14 <HAL_QSPI_MspInit+0x17c>)
 8001e36:	f043 0308 	orr.w	r3, r3, #8
 8001e3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3c:	4b35      	ldr	r3, [pc, #212]	; (8001f14 <HAL_QSPI_MspInit+0x17c>)
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	4b31      	ldr	r3, [pc, #196]	; (8001f14 <HAL_QSPI_MspInit+0x17c>)
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	4a30      	ldr	r2, [pc, #192]	; (8001f14 <HAL_QSPI_MspInit+0x17c>)
 8001e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e56:	6313      	str	r3, [r2, #48]	; 0x30
 8001e58:	4b2e      	ldr	r3, [pc, #184]	; (8001f14 <HAL_QSPI_MspInit+0x17c>)
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8001e64:	2304      	movs	r3, #4
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e70:	2303      	movs	r3, #3
 8001e72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001e74:	2309      	movs	r3, #9
 8001e76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4826      	ldr	r0, [pc, #152]	; (8001f18 <HAL_QSPI_MspInit+0x180>)
 8001e80:	f002 fe4c 	bl	8004b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001e84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e92:	2303      	movs	r3, #3
 8001e94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e96:	230a      	movs	r3, #10
 8001e98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	481e      	ldr	r0, [pc, #120]	; (8001f1c <HAL_QSPI_MspInit+0x184>)
 8001ea2:	f002 fe3b 	bl	8004b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001eb6:	2309      	movs	r3, #9
 8001eb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4817      	ldr	r0, [pc, #92]	; (8001f20 <HAL_QSPI_MspInit+0x188>)
 8001ec2:	f002 fe2b 	bl	8004b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 8001ec6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001ed8:	2309      	movs	r3, #9
 8001eda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8001edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4810      	ldr	r0, [pc, #64]	; (8001f24 <HAL_QSPI_MspInit+0x18c>)
 8001ee4:	f002 fe1a 	bl	8004b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001ee8:	2340      	movs	r3, #64	; 0x40
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eec:	2302      	movs	r3, #2
 8001eee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ef8:	230a      	movs	r3, #10
 8001efa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f00:	4619      	mov	r1, r3
 8001f02:	4809      	ldr	r0, [pc, #36]	; (8001f28 <HAL_QSPI_MspInit+0x190>)
 8001f04:	f002 fe0a 	bl	8004b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001f08:	bf00      	nop
 8001f0a:	3738      	adds	r7, #56	; 0x38
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	a0001000 	.word	0xa0001000
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40021400 	.word	0x40021400
 8001f20:	40020400 	.word	0x40020400
 8001f24:	40020c00 	.word	0x40020c00
 8001f28:	40021800 	.word	0x40021800

08001f2c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	; 0x28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a28      	ldr	r2, [pc, #160]	; (8001fec <HAL_SD_MspInit+0xc0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d14a      	bne.n	8001fe4 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <HAL_SD_MspInit+0xc4>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	4a26      	ldr	r2, [pc, #152]	; (8001ff0 <HAL_SD_MspInit+0xc4>)
 8001f58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5e:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <HAL_SD_MspInit+0xc4>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	4b20      	ldr	r3, [pc, #128]	; (8001ff0 <HAL_SD_MspInit+0xc4>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a1f      	ldr	r2, [pc, #124]	; (8001ff0 <HAL_SD_MspInit+0xc4>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b1d      	ldr	r3, [pc, #116]	; (8001ff0 <HAL_SD_MspInit+0xc4>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <HAL_SD_MspInit+0xc4>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	4a18      	ldr	r2, [pc, #96]	; (8001ff0 <HAL_SD_MspInit+0xc4>)
 8001f90:	f043 0304 	orr.w	r3, r3, #4
 8001f94:	6313      	str	r3, [r2, #48]	; 0x30
 8001f96:	4b16      	ldr	r3, [pc, #88]	; (8001ff0 <HAL_SD_MspInit+0xc4>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 8001fa2:	2340      	movs	r3, #64	; 0x40
 8001fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001fb2:	230c      	movs	r3, #12
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001fb6:	f107 0314 	add.w	r3, r7, #20
 8001fba:	4619      	mov	r1, r3
 8001fbc:	480d      	ldr	r0, [pc, #52]	; (8001ff4 <HAL_SD_MspInit+0xc8>)
 8001fbe:	f002 fdad 	bl	8004b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 8001fc2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001fc6:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001fd4:	230c      	movs	r3, #12
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4806      	ldr	r0, [pc, #24]	; (8001ff8 <HAL_SD_MspInit+0xcc>)
 8001fe0:	f002 fd9c 	bl	8004b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001fe4:	bf00      	nop
 8001fe6:	3728      	adds	r7, #40	; 0x28
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40012c00 	.word	0x40012c00
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40020000 	.word	0x40020000
 8001ff8:	40020800 	.word	0x40020800

08001ffc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08c      	sub	sp, #48	; 0x30
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 031c 	add.w	r3, r7, #28
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a33      	ldr	r2, [pc, #204]	; (80020e8 <HAL_UART_MspInit+0xec>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d12d      	bne.n	800207a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	61bb      	str	r3, [r7, #24]
 8002022:	4b32      	ldr	r3, [pc, #200]	; (80020ec <HAL_UART_MspInit+0xf0>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	4a31      	ldr	r2, [pc, #196]	; (80020ec <HAL_UART_MspInit+0xf0>)
 8002028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800202c:	6453      	str	r3, [r2, #68]	; 0x44
 800202e:	4b2f      	ldr	r3, [pc, #188]	; (80020ec <HAL_UART_MspInit+0xf0>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002036:	61bb      	str	r3, [r7, #24]
 8002038:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	4b2b      	ldr	r3, [pc, #172]	; (80020ec <HAL_UART_MspInit+0xf0>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a2a      	ldr	r2, [pc, #168]	; (80020ec <HAL_UART_MspInit+0xf0>)
 8002044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b28      	ldr	r3, [pc, #160]	; (80020ec <HAL_UART_MspInit+0xf0>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 8002056:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800205a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205c:	2302      	movs	r3, #2
 800205e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002060:	2301      	movs	r3, #1
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002064:	2303      	movs	r3, #3
 8002066:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 8002068:	230b      	movs	r3, #11
 800206a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800206c:	f107 031c 	add.w	r3, r7, #28
 8002070:	4619      	mov	r1, r3
 8002072:	481f      	ldr	r0, [pc, #124]	; (80020f0 <HAL_UART_MspInit+0xf4>)
 8002074:	f002 fd52 	bl	8004b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002078:	e031      	b.n	80020de <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a1d      	ldr	r2, [pc, #116]	; (80020f4 <HAL_UART_MspInit+0xf8>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d12c      	bne.n	80020de <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002084:	2300      	movs	r3, #0
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	4b18      	ldr	r3, [pc, #96]	; (80020ec <HAL_UART_MspInit+0xf0>)
 800208a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208c:	4a17      	ldr	r2, [pc, #92]	; (80020ec <HAL_UART_MspInit+0xf0>)
 800208e:	f043 0320 	orr.w	r3, r3, #32
 8002092:	6453      	str	r3, [r2, #68]	; 0x44
 8002094:	4b15      	ldr	r3, [pc, #84]	; (80020ec <HAL_UART_MspInit+0xf0>)
 8002096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002098:	f003 0320 	and.w	r3, r3, #32
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	4b11      	ldr	r3, [pc, #68]	; (80020ec <HAL_UART_MspInit+0xf0>)
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a8:	4a10      	ldr	r2, [pc, #64]	; (80020ec <HAL_UART_MspInit+0xf0>)
 80020aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020ae:	6313      	str	r3, [r2, #48]	; 0x30
 80020b0:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <HAL_UART_MspInit+0xf0>)
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 80020bc:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80020c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c2:	2302      	movs	r3, #2
 80020c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ca:	2303      	movs	r3, #3
 80020cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80020ce:	2308      	movs	r3, #8
 80020d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020d2:	f107 031c 	add.w	r3, r7, #28
 80020d6:	4619      	mov	r1, r3
 80020d8:	4805      	ldr	r0, [pc, #20]	; (80020f0 <HAL_UART_MspInit+0xf4>)
 80020da:	f002 fd1f 	bl	8004b1c <HAL_GPIO_Init>
}
 80020de:	bf00      	nop
 80020e0:	3730      	adds	r7, #48	; 0x30
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40011c00 	.word	0x40011c00
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40021800 	.word	0x40021800
 80020f4:	40011400 	.word	0x40011400

080020f8 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80020fe:	1d3b      	adds	r3, r7, #4
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800210c:	4b2c      	ldr	r3, [pc, #176]	; (80021c0 <HAL_FSMC_MspInit+0xc8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d151      	bne.n	80021b8 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8002114:	4b2a      	ldr	r3, [pc, #168]	; (80021c0 <HAL_FSMC_MspInit+0xc8>)
 8002116:	2201      	movs	r2, #1
 8002118:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	603b      	str	r3, [r7, #0]
 800211e:	4b29      	ldr	r3, [pc, #164]	; (80021c4 <HAL_FSMC_MspInit+0xcc>)
 8002120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002122:	4a28      	ldr	r2, [pc, #160]	; (80021c4 <HAL_FSMC_MspInit+0xcc>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	6393      	str	r3, [r2, #56]	; 0x38
 800212a:	4b26      	ldr	r3, [pc, #152]	; (80021c4 <HAL_FSMC_MspInit+0xcc>)
 800212c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 8002136:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800213a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	2302      	movs	r3, #2
 800213e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002144:	2303      	movs	r3, #3
 8002146:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002148:	230c      	movs	r3, #12
 800214a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800214c:	1d3b      	adds	r3, r7, #4
 800214e:	4619      	mov	r1, r3
 8002150:	481d      	ldr	r0, [pc, #116]	; (80021c8 <HAL_FSMC_MspInit+0xd0>)
 8002152:	f002 fce3 	bl	8004b1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 8002156:	f240 433f 	movw	r3, #1087	; 0x43f
 800215a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	2302      	movs	r3, #2
 800215e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002164:	2303      	movs	r3, #3
 8002166:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002168:	230c      	movs	r3, #12
 800216a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800216c:	1d3b      	adds	r3, r7, #4
 800216e:	4619      	mov	r1, r3
 8002170:	4816      	ldr	r0, [pc, #88]	; (80021cc <HAL_FSMC_MspInit+0xd4>)
 8002172:	f002 fcd3 	bl	8004b1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 8002176:	f64f 7383 	movw	r3, #65411	; 0xff83
 800217a:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217c:	2302      	movs	r3, #2
 800217e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002184:	2303      	movs	r3, #3
 8002186:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002188:	230c      	movs	r3, #12
 800218a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800218c:	1d3b      	adds	r3, r7, #4
 800218e:	4619      	mov	r1, r3
 8002190:	480f      	ldr	r0, [pc, #60]	; (80021d0 <HAL_FSMC_MspInit+0xd8>)
 8002192:	f002 fcc3 	bl	8004b1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 8002196:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 800219a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a4:	2303      	movs	r3, #3
 80021a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80021a8:	230c      	movs	r3, #12
 80021aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021ac:	1d3b      	adds	r3, r7, #4
 80021ae:	4619      	mov	r1, r3
 80021b0:	4808      	ldr	r0, [pc, #32]	; (80021d4 <HAL_FSMC_MspInit+0xdc>)
 80021b2:	f002 fcb3 	bl	8004b1c <HAL_GPIO_Init>
 80021b6:	e000      	b.n	80021ba <HAL_FSMC_MspInit+0xc2>
    return;
 80021b8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	2000012c 	.word	0x2000012c
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40021400 	.word	0x40021400
 80021cc:	40021800 	.word	0x40021800
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40020c00 	.word	0x40020c00

080021d8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80021e0:	f7ff ff8a 	bl	80020f8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08c      	sub	sp, #48	; 0x30
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80021fc:	2200      	movs	r2, #0
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	2036      	movs	r0, #54	; 0x36
 8002202:	f001 ffa9 	bl	8004158 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002206:	2036      	movs	r0, #54	; 0x36
 8002208:	f001 ffc2 	bl	8004190 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800220c:	2300      	movs	r3, #0
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	4b1e      	ldr	r3, [pc, #120]	; (800228c <HAL_InitTick+0xa0>)
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	4a1d      	ldr	r2, [pc, #116]	; (800228c <HAL_InitTick+0xa0>)
 8002216:	f043 0310 	orr.w	r3, r3, #16
 800221a:	6413      	str	r3, [r2, #64]	; 0x40
 800221c:	4b1b      	ldr	r3, [pc, #108]	; (800228c <HAL_InitTick+0xa0>)
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002228:	f107 0210 	add.w	r2, r7, #16
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f005 fbac 	bl	8007990 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002238:	f005 fb82 	bl	8007940 <HAL_RCC_GetPCLK1Freq>
 800223c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800223e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002240:	4a13      	ldr	r2, [pc, #76]	; (8002290 <HAL_InitTick+0xa4>)
 8002242:	fba2 2303 	umull	r2, r3, r2, r3
 8002246:	0c9b      	lsrs	r3, r3, #18
 8002248:	3b01      	subs	r3, #1
 800224a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <HAL_InitTick+0xa8>)
 800224e:	4a12      	ldr	r2, [pc, #72]	; (8002298 <HAL_InitTick+0xac>)
 8002250:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <HAL_InitTick+0xa8>)
 8002254:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002258:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800225a:	4a0e      	ldr	r2, [pc, #56]	; (8002294 <HAL_InitTick+0xa8>)
 800225c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <HAL_InitTick+0xa8>)
 8002262:	2200      	movs	r2, #0
 8002264:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_InitTick+0xa8>)
 8002268:	2200      	movs	r2, #0
 800226a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800226c:	4809      	ldr	r0, [pc, #36]	; (8002294 <HAL_InitTick+0xa8>)
 800226e:	f007 fb9b 	bl	80099a8 <HAL_TIM_Base_Init>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d104      	bne.n	8002282 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002278:	4806      	ldr	r0, [pc, #24]	; (8002294 <HAL_InitTick+0xa8>)
 800227a:	f007 fbca 	bl	8009a12 <HAL_TIM_Base_Start_IT>
 800227e:	4603      	mov	r3, r0
 8002280:	e000      	b.n	8002284 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
}
 8002284:	4618      	mov	r0, r3
 8002286:	3730      	adds	r7, #48	; 0x30
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40023800 	.word	0x40023800
 8002290:	431bde83 	.word	0x431bde83
 8002294:	20021ad4 	.word	0x20021ad4
 8002298:	40001000 	.word	0x40001000

0800229c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ae:	e7fe      	b.n	80022ae <HardFault_Handler+0x4>

080022b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b4:	e7fe      	b.n	80022b4 <MemManage_Handler+0x4>

080022b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ba:	e7fe      	b.n	80022ba <BusFault_Handler+0x4>

080022bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c0:	e7fe      	b.n	80022c0 <UsageFault_Handler+0x4>

080022c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80022d4:	4803      	ldr	r0, [pc, #12]	; (80022e4 <TIM6_DAC_IRQHandler+0x14>)
 80022d6:	f001 ff8b 	bl	80041f0 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80022da:	4803      	ldr	r0, [pc, #12]	; (80022e8 <TIM6_DAC_IRQHandler+0x18>)
 80022dc:	f007 fbbd 	bl	8009a5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20021670 	.word	0x20021670
 80022e8:	20021ad4 	.word	0x20021ad4

080022ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80022f0:	4802      	ldr	r0, [pc, #8]	; (80022fc <OTG_FS_IRQHandler+0x10>)
 80022f2:	f003 f881 	bl	80053f8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20021ff0 	.word	0x20021ff0

08002300 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002308:	4a14      	ldr	r2, [pc, #80]	; (800235c <_sbrk+0x5c>)
 800230a:	4b15      	ldr	r3, [pc, #84]	; (8002360 <_sbrk+0x60>)
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002314:	4b13      	ldr	r3, [pc, #76]	; (8002364 <_sbrk+0x64>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d102      	bne.n	8002322 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800231c:	4b11      	ldr	r3, [pc, #68]	; (8002364 <_sbrk+0x64>)
 800231e:	4a12      	ldr	r2, [pc, #72]	; (8002368 <_sbrk+0x68>)
 8002320:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002322:	4b10      	ldr	r3, [pc, #64]	; (8002364 <_sbrk+0x64>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4413      	add	r3, r2
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	429a      	cmp	r2, r3
 800232e:	d207      	bcs.n	8002340 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002330:	f011 fea6 	bl	8014080 <__errno>
 8002334:	4602      	mov	r2, r0
 8002336:	230c      	movs	r3, #12
 8002338:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800233a:	f04f 33ff 	mov.w	r3, #4294967295
 800233e:	e009      	b.n	8002354 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002340:	4b08      	ldr	r3, [pc, #32]	; (8002364 <_sbrk+0x64>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002346:	4b07      	ldr	r3, [pc, #28]	; (8002364 <_sbrk+0x64>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	4a05      	ldr	r2, [pc, #20]	; (8002364 <_sbrk+0x64>)
 8002350:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002352:	68fb      	ldr	r3, [r7, #12]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20050000 	.word	0x20050000
 8002360:	00000400 	.word	0x00000400
 8002364:	20000130 	.word	0x20000130
 8002368:	200222b8 	.word	0x200222b8

0800236c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002370:	4b08      	ldr	r3, [pc, #32]	; (8002394 <SystemInit+0x28>)
 8002372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002376:	4a07      	ldr	r2, [pc, #28]	; (8002394 <SystemInit+0x28>)
 8002378:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800237c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002380:	4b04      	ldr	r3, [pc, #16]	; (8002394 <SystemInit+0x28>)
 8002382:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002386:	609a      	str	r2, [r3, #8]
#endif
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002398:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800239c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800239e:	e003      	b.n	80023a8 <LoopCopyDataInit>

080023a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80023a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023a6:	3104      	adds	r1, #4

080023a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80023a8:	480b      	ldr	r0, [pc, #44]	; (80023d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80023aa:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80023ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80023ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80023b0:	d3f6      	bcc.n	80023a0 <CopyDataInit>
  ldr  r2, =_sbss
 80023b2:	4a0b      	ldr	r2, [pc, #44]	; (80023e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80023b4:	e002      	b.n	80023bc <LoopFillZerobss>

080023b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80023b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023b8:	f842 3b04 	str.w	r3, [r2], #4

080023bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80023bc:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80023be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023c0:	d3f9      	bcc.n	80023b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023c2:	f7ff ffd3 	bl	800236c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023c6:	f011 fe61 	bl	801408c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ca:	f7fe faa5 	bl	8000918 <main>
  bx  lr    
 80023ce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80023d0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80023d4:	080176f8 	.word	0x080176f8
  ldr  r0, =_sdata
 80023d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80023dc:	200000f4 	.word	0x200000f4
  ldr  r2, =_sbss
 80023e0:	200000f4 	.word	0x200000f4
  ldr  r3, = _ebss
 80023e4:	200222b8 	.word	0x200222b8

080023e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023e8:	e7fe      	b.n	80023e8 <ADC_IRQHandler>

080023ea <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b084      	sub	sp, #16
 80023ee:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80023f0:	f000 fd6e 	bl	8002ed0 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 80023f4:	2200      	movs	r2, #0
 80023f6:	2100      	movs	r1, #0
 80023f8:	2010      	movs	r0, #16
 80023fa:	f000 f9e4 	bl	80027c6 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 80023fe:	200a      	movs	r0, #10
 8002400:	f000 fd8d 	bl	8002f1e <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8002404:	2200      	movs	r2, #0
 8002406:	2100      	movs	r1, #0
 8002408:	2001      	movs	r0, #1
 800240a:	f000 f9dc 	bl	80027c6 <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 800240e:	20c8      	movs	r0, #200	; 0xc8
 8002410:	f000 fd85 	bl	8002f1e <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 8002414:	2200      	movs	r2, #0
 8002416:	2100      	movs	r1, #0
 8002418:	2011      	movs	r0, #17
 800241a:	f000 f9d4 	bl	80027c6 <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 800241e:	2078      	movs	r0, #120	; 0x78
 8002420:	f000 fd7d 	bl	8002f1e <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 8002424:	2300      	movs	r3, #0
 8002426:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8002428:	463b      	mov	r3, r7
 800242a:	2201      	movs	r2, #1
 800242c:	4619      	mov	r1, r3
 800242e:	2036      	movs	r0, #54	; 0x36
 8002430:	f000 f9c9 	bl	80027c6 <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 8002434:	2305      	movs	r3, #5
 8002436:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8002438:	463b      	mov	r3, r7
 800243a:	2201      	movs	r2, #1
 800243c:	4619      	mov	r1, r3
 800243e:	203a      	movs	r0, #58	; 0x3a
 8002440:	f000 f9c1 	bl	80027c6 <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 8002444:	2200      	movs	r2, #0
 8002446:	2100      	movs	r1, #0
 8002448:	2021      	movs	r0, #33	; 0x21
 800244a:	f000 f9bc 	bl	80027c6 <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 800244e:	2300      	movs	r3, #0
 8002450:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8002452:	2300      	movs	r3, #0
 8002454:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8002456:	2300      	movs	r3, #0
 8002458:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 800245a:	23ef      	movs	r3, #239	; 0xef
 800245c:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 800245e:	463b      	mov	r3, r7
 8002460:	2204      	movs	r2, #4
 8002462:	4619      	mov	r1, r3
 8002464:	202a      	movs	r0, #42	; 0x2a
 8002466:	f000 f9ae 	bl	80027c6 <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 800246a:	2300      	movs	r3, #0
 800246c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 800246e:	2300      	movs	r3, #0
 8002470:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8002472:	2300      	movs	r3, #0
 8002474:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8002476:	23ef      	movs	r3, #239	; 0xef
 8002478:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 800247a:	463b      	mov	r3, r7
 800247c:	2204      	movs	r2, #4
 800247e:	4619      	mov	r1, r3
 8002480:	202b      	movs	r0, #43	; 0x2b
 8002482:	f000 f9a0 	bl	80027c6 <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 8002486:	230c      	movs	r3, #12
 8002488:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 800248a:	230c      	movs	r3, #12
 800248c:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 800248e:	2300      	movs	r3, #0
 8002490:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 8002492:	2333      	movs	r3, #51	; 0x33
 8002494:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 8002496:	2333      	movs	r3, #51	; 0x33
 8002498:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 800249a:	463b      	mov	r3, r7
 800249c:	2205      	movs	r2, #5
 800249e:	4619      	mov	r1, r3
 80024a0:	20b2      	movs	r0, #178	; 0xb2
 80024a2:	f000 f990 	bl	80027c6 <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 80024a6:	2335      	movs	r3, #53	; 0x35
 80024a8:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 80024aa:	463b      	mov	r3, r7
 80024ac:	2201      	movs	r2, #1
 80024ae:	4619      	mov	r1, r3
 80024b0:	20b7      	movs	r0, #183	; 0xb7
 80024b2:	f000 f988 	bl	80027c6 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 80024b6:	231f      	movs	r3, #31
 80024b8:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 80024ba:	463b      	mov	r3, r7
 80024bc:	2201      	movs	r2, #1
 80024be:	4619      	mov	r1, r3
 80024c0:	20bb      	movs	r0, #187	; 0xbb
 80024c2:	f000 f980 	bl	80027c6 <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 80024c6:	232c      	movs	r3, #44	; 0x2c
 80024c8:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 80024ca:	463b      	mov	r3, r7
 80024cc:	2201      	movs	r2, #1
 80024ce:	4619      	mov	r1, r3
 80024d0:	20c0      	movs	r0, #192	; 0xc0
 80024d2:	f000 f978 	bl	80027c6 <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 80024d6:	2301      	movs	r3, #1
 80024d8:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 80024da:	23c3      	movs	r3, #195	; 0xc3
 80024dc:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 80024de:	463b      	mov	r3, r7
 80024e0:	2202      	movs	r2, #2
 80024e2:	4619      	mov	r1, r3
 80024e4:	20c2      	movs	r0, #194	; 0xc2
 80024e6:	f000 f96e 	bl	80027c6 <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 80024ea:	2320      	movs	r3, #32
 80024ec:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 80024ee:	463b      	mov	r3, r7
 80024f0:	2201      	movs	r2, #1
 80024f2:	4619      	mov	r1, r3
 80024f4:	20c4      	movs	r0, #196	; 0xc4
 80024f6:	f000 f966 	bl	80027c6 <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 80024fa:	230f      	movs	r3, #15
 80024fc:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 80024fe:	463b      	mov	r3, r7
 8002500:	2201      	movs	r2, #1
 8002502:	4619      	mov	r1, r3
 8002504:	20c6      	movs	r0, #198	; 0xc6
 8002506:	f000 f95e 	bl	80027c6 <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 800250a:	23a4      	movs	r3, #164	; 0xa4
 800250c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 800250e:	23a1      	movs	r3, #161	; 0xa1
 8002510:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 1); 
 8002512:	463b      	mov	r3, r7
 8002514:	2201      	movs	r2, #1
 8002516:	4619      	mov	r1, r3
 8002518:	20d0      	movs	r0, #208	; 0xd0
 800251a:	f000 f954 	bl	80027c6 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 800251e:	23d0      	movs	r3, #208	; 0xd0
 8002520:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8002522:	2308      	movs	r3, #8
 8002524:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 8002526:	2311      	movs	r3, #17
 8002528:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 800252a:	2308      	movs	r3, #8
 800252c:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 800252e:	230c      	movs	r3, #12
 8002530:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 8002532:	2315      	movs	r3, #21
 8002534:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8002536:	2339      	movs	r3, #57	; 0x39
 8002538:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 800253a:	2333      	movs	r3, #51	; 0x33
 800253c:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 800253e:	2350      	movs	r3, #80	; 0x50
 8002540:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 8002542:	2336      	movs	r3, #54	; 0x36
 8002544:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 8002546:	2313      	movs	r3, #19
 8002548:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 800254a:	2314      	movs	r3, #20
 800254c:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 800254e:	2329      	movs	r3, #41	; 0x29
 8002550:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 8002552:	232d      	movs	r3, #45	; 0x2d
 8002554:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 8002556:	463b      	mov	r3, r7
 8002558:	220e      	movs	r2, #14
 800255a:	4619      	mov	r1, r3
 800255c:	20e0      	movs	r0, #224	; 0xe0
 800255e:	f000 f932 	bl	80027c6 <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 8002562:	23d0      	movs	r3, #208	; 0xd0
 8002564:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8002566:	2308      	movs	r3, #8
 8002568:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 800256a:	2310      	movs	r3, #16
 800256c:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 800256e:	2308      	movs	r3, #8
 8002570:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 8002572:	2306      	movs	r3, #6
 8002574:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 8002576:	2306      	movs	r3, #6
 8002578:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 800257a:	2339      	movs	r3, #57	; 0x39
 800257c:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 800257e:	2344      	movs	r3, #68	; 0x44
 8002580:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 8002582:	2351      	movs	r3, #81	; 0x51
 8002584:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 8002586:	230b      	movs	r3, #11
 8002588:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 800258a:	2316      	movs	r3, #22
 800258c:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 800258e:	2314      	movs	r3, #20
 8002590:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 8002592:	232f      	movs	r3, #47	; 0x2f
 8002594:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 8002596:	2331      	movs	r3, #49	; 0x31
 8002598:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 800259a:	463b      	mov	r3, r7
 800259c:	220e      	movs	r2, #14
 800259e:	4619      	mov	r1, r3
 80025a0:	20e1      	movs	r0, #225	; 0xe1
 80025a2:	f000 f910 	bl	80027c6 <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 80025a6:	f000 f847 	bl	8002638 <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 80025aa:	2300      	movs	r3, #0
 80025ac:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 80025ae:	463b      	mov	r3, r7
 80025b0:	2201      	movs	r2, #1
 80025b2:	4619      	mov	r1, r3
 80025b4:	2035      	movs	r0, #53	; 0x35
 80025b6:	f000 f906 	bl	80027c6 <ST7789H2_WriteReg>

}
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b084      	sub	sp, #16
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d102      	bne.n	80025d6 <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 80025d0:	2300      	movs	r3, #0
 80025d2:	723b      	strb	r3, [r7, #8]
 80025d4:	e025      	b.n	8002622 <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d120      	bne.n	800261e <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 80025dc:	2300      	movs	r3, #0
 80025de:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 80025e0:	2300      	movs	r3, #0
 80025e2:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 80025e4:	2301      	movs	r3, #1
 80025e6:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 80025e8:	23f0      	movs	r3, #240	; 0xf0
 80025ea:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 80025ec:	2300      	movs	r3, #0
 80025ee:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 80025f0:	2300      	movs	r3, #0
 80025f2:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 80025f4:	f107 0308 	add.w	r3, r7, #8
 80025f8:	2206      	movs	r2, #6
 80025fa:	4619      	mov	r1, r3
 80025fc:	2033      	movs	r0, #51	; 0x33
 80025fe:	f000 f8e2 	bl	80027c6 <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 8002602:	2300      	movs	r3, #0
 8002604:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 8002606:	2350      	movs	r3, #80	; 0x50
 8002608:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 800260a:	f107 0308 	add.w	r3, r7, #8
 800260e:	2202      	movs	r2, #2
 8002610:	4619      	mov	r1, r3
 8002612:	2037      	movs	r0, #55	; 0x37
 8002614:	f000 f8d7 	bl	80027c6 <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 8002618:	23c0      	movs	r3, #192	; 0xc0
 800261a:	723b      	strb	r3, [r7, #8]
 800261c:	e001      	b.n	8002622 <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 800261e:	2360      	movs	r3, #96	; 0x60
 8002620:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8002622:	f107 0308 	add.w	r3, r7, #8
 8002626:	2201      	movs	r2, #1
 8002628:	4619      	mov	r1, r3
 800262a:	2036      	movs	r0, #54	; 0x36
 800262c:	f000 f8cb 	bl	80027c6 <ST7789H2_WriteReg>
}
 8002630:	bf00      	nop
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 800263c:	2200      	movs	r2, #0
 800263e:	2100      	movs	r1, #0
 8002640:	2029      	movs	r0, #41	; 0x29
 8002642:	f000 f8c0 	bl	80027c6 <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 8002646:	2200      	movs	r2, #0
 8002648:	2100      	movs	r1, #0
 800264a:	2011      	movs	r0, #17
 800264c:	f000 f8bb 	bl	80027c6 <ST7789H2_WriteReg>
}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}

08002654 <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 800265a:	23fe      	movs	r3, #254	; 0xfe
 800265c:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	2201      	movs	r2, #1
 8002662:	4619      	mov	r1, r3
 8002664:	20bd      	movs	r0, #189	; 0xbd
 8002666:	f000 f8ae 	bl	80027c6 <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	2010      	movs	r0, #16
 8002670:	f000 f8a9 	bl	80027c6 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8002674:	200a      	movs	r0, #10
 8002676:	f000 fc52 	bl	8002f1e <LCD_IO_Delay>
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 8002682:	b480      	push	{r7}
 8002684:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 8002686:	23f0      	movs	r3, #240	; 0xf0
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 8002692:	b480      	push	{r7}
 8002694:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 8002696:	23f0      	movs	r3, #240	; 0xf0
}
 8002698:	4618      	mov	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80026a6:	f000 fc13 	bl	8002ed0 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 80026aa:	2004      	movs	r0, #4
 80026ac:	f000 f8ad 	bl	800280a <ST7789H2_ReadReg>
 80026b0:	4603      	mov	r3, r0
 80026b2:	b29b      	uxth	r3, r3
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	460a      	mov	r2, r1
 80026c2:	80fb      	strh	r3, [r7, #6]
 80026c4:	4613      	mov	r3, r2
 80026c6:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 80026c8:	2300      	movs	r3, #0
 80026ca:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 80026cc:	88fb      	ldrh	r3, [r7, #6]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 80026d2:	2300      	movs	r3, #0
 80026d4:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 80026d6:	88fb      	ldrh	r3, [r7, #6]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	3b11      	subs	r3, #17
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 80026e0:	f107 030c 	add.w	r3, r7, #12
 80026e4:	2204      	movs	r2, #4
 80026e6:	4619      	mov	r1, r3
 80026e8:	202a      	movs	r0, #42	; 0x2a
 80026ea:	f000 f86c 	bl	80027c6 <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 80026ee:	2300      	movs	r3, #0
 80026f0:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 80026f2:	88bb      	ldrh	r3, [r7, #4]
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 80026f8:	2300      	movs	r3, #0
 80026fa:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 80026fc:	88bb      	ldrh	r3, [r7, #4]
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	3b11      	subs	r3, #17
 8002702:	b2db      	uxtb	r3, r3
 8002704:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8002706:	f107 030c 	add.w	r3, r7, #12
 800270a:	2204      	movs	r2, #4
 800270c:	4619      	mov	r1, r3
 800270e:	202b      	movs	r0, #43	; 0x2b
 8002710:	f000 f859 	bl	80027c6 <ST7789H2_WriteReg>
}
 8002714:	bf00      	nop
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	80fb      	strh	r3, [r7, #6]
 8002726:	460b      	mov	r3, r1
 8002728:	80bb      	strh	r3, [r7, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 800272e:	88ba      	ldrh	r2, [r7, #4]
 8002730:	88fb      	ldrh	r3, [r7, #6]
 8002732:	4611      	mov	r1, r2
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ffbf 	bl	80026b8 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 800273a:	2200      	movs	r2, #0
 800273c:	2100      	movs	r1, #0
 800273e:	202c      	movs	r0, #44	; 0x2c
 8002740:	f000 f841 	bl	80027c6 <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 8002744:	887b      	ldrh	r3, [r7, #2]
 8002746:	4618      	mov	r0, r3
 8002748:	f000 fbc8 	bl	8002edc <LCD_IO_WriteData>
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	460a      	mov	r2, r1
 800275e:	80fb      	strh	r3, [r7, #6]
 8002760:	4613      	mov	r3, r2
 8002762:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002764:	88ba      	ldrh	r2, [r7, #4]
 8002766:	88fb      	ldrh	r3, [r7, #6]
 8002768:	4611      	mov	r1, r2
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff ffa4 	bl	80026b8 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8002770:	88ba      	ldrh	r2, [r7, #4]
 8002772:	88fb      	ldrh	r3, [r7, #6]
 8002774:	4611      	mov	r1, r2
 8002776:	4618      	mov	r0, r3
 8002778:	f000 f9bd 	bl	8002af6 <ST7789H2_ReadPixel_rgb888>
 800277c:	4603      	mov	r3, r0
 800277e:	461a      	mov	r2, r3
 8002780:	733a      	strb	r2, [r7, #12]
 8002782:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002786:	737a      	strb	r2, [r7, #13]
 8002788:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800278c:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 800278e:	7b3b      	ldrb	r3, [r7, #12]
 8002790:	08db      	lsrs	r3, r3, #3
 8002792:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8002794:	7b7b      	ldrb	r3, [r7, #13]
 8002796:	089b      	lsrs	r3, r3, #2
 8002798:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 800279a:	7bbb      	ldrb	r3, [r7, #14]
 800279c:	08db      	lsrs	r3, r3, #3
 800279e:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 80027a0:	7dfb      	ldrb	r3, [r7, #23]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	02db      	lsls	r3, r3, #11
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	7dbb      	ldrb	r3, [r7, #22]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	015b      	lsls	r3, r3, #5
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	7d7b      	ldrb	r3, [r7, #21]
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	4413      	add	r3, r2
 80027ba:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 80027bc:	8a7b      	ldrh	r3, [r7, #18]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b084      	sub	sp, #16
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	4603      	mov	r3, r0
 80027ce:	6039      	str	r1, [r7, #0]
 80027d0:	71fb      	strb	r3, [r7, #7]
 80027d2:	4613      	mov	r3, r2
 80027d4:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 fb8c 	bl	8002ef6 <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 80027de:	2300      	movs	r3, #0
 80027e0:	73fb      	strb	r3, [r7, #15]
 80027e2:	e00a      	b.n	80027fa <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	4413      	add	r3, r2
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 fb74 	bl	8002edc <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	3301      	adds	r3, #1
 80027f8:	73fb      	strb	r3, [r7, #15]
 80027fa:	7bfa      	ldrb	r2, [r7, #15]
 80027fc:	79bb      	ldrb	r3, [r7, #6]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d3f0      	bcc.n	80027e4 <ST7789H2_WriteReg+0x1e>
  }
}
 8002802:	bf00      	nop
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	4603      	mov	r3, r0
 8002812:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	4618      	mov	r0, r3
 8002818:	f000 fb6d 	bl	8002ef6 <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 800281c:	f000 fb78 	bl	8002f10 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 8002820:	f000 fb76 	bl	8002f10 <LCD_IO_ReadData>
 8002824:	4603      	mov	r3, r0
 8002826:	b2db      	uxtb	r3, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002830:	b490      	push	{r4, r7}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	4604      	mov	r4, r0
 8002838:	4608      	mov	r0, r1
 800283a:	4611      	mov	r1, r2
 800283c:	461a      	mov	r2, r3
 800283e:	4623      	mov	r3, r4
 8002840:	80fb      	strh	r3, [r7, #6]
 8002842:	4603      	mov	r3, r0
 8002844:	80bb      	strh	r3, [r7, #4]
 8002846:	460b      	mov	r3, r1
 8002848:	807b      	strh	r3, [r7, #2]
 800284a:	4613      	mov	r3, r2
 800284c:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 800284e:	88fb      	ldrh	r3, [r7, #6]
 8002850:	2bef      	cmp	r3, #239	; 0xef
 8002852:	d803      	bhi.n	800285c <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 8002854:	4a1b      	ldr	r2, [pc, #108]	; (80028c4 <ST7789H2_SetDisplayWindow+0x94>)
 8002856:	88fb      	ldrh	r3, [r7, #6]
 8002858:	8013      	strh	r3, [r2, #0]
 800285a:	e002      	b.n	8002862 <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 800285c:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <ST7789H2_SetDisplayWindow+0x94>)
 800285e:	2200      	movs	r2, #0
 8002860:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 8002862:	88bb      	ldrh	r3, [r7, #4]
 8002864:	2bef      	cmp	r3, #239	; 0xef
 8002866:	d803      	bhi.n	8002870 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 8002868:	4a17      	ldr	r2, [pc, #92]	; (80028c8 <ST7789H2_SetDisplayWindow+0x98>)
 800286a:	88bb      	ldrh	r3, [r7, #4]
 800286c:	8013      	strh	r3, [r2, #0]
 800286e:	e002      	b.n	8002876 <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8002870:	4b15      	ldr	r3, [pc, #84]	; (80028c8 <ST7789H2_SetDisplayWindow+0x98>)
 8002872:	2200      	movs	r2, #0
 8002874:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 8002876:	887a      	ldrh	r2, [r7, #2]
 8002878:	88fb      	ldrh	r3, [r7, #6]
 800287a:	4413      	add	r3, r2
 800287c:	2bf0      	cmp	r3, #240	; 0xf0
 800287e:	dc08      	bgt.n	8002892 <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8002880:	887a      	ldrh	r2, [r7, #2]
 8002882:	88fb      	ldrh	r3, [r7, #6]
 8002884:	4413      	add	r3, r2
 8002886:	b29b      	uxth	r3, r3
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <ST7789H2_SetDisplayWindow+0x9c>)
 800288e:	801a      	strh	r2, [r3, #0]
 8002890:	e002      	b.n	8002898 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8002892:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <ST7789H2_SetDisplayWindow+0x9c>)
 8002894:	22ef      	movs	r2, #239	; 0xef
 8002896:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 8002898:	883a      	ldrh	r2, [r7, #0]
 800289a:	88bb      	ldrh	r3, [r7, #4]
 800289c:	4413      	add	r3, r2
 800289e:	2bf0      	cmp	r3, #240	; 0xf0
 80028a0:	dc08      	bgt.n	80028b4 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 80028a2:	883a      	ldrh	r2, [r7, #0]
 80028a4:	88bb      	ldrh	r3, [r7, #4]
 80028a6:	4413      	add	r3, r2
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <ST7789H2_SetDisplayWindow+0xa0>)
 80028b0:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 80028b2:	e002      	b.n	80028ba <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <ST7789H2_SetDisplayWindow+0xa0>)
 80028b6:	22ef      	movs	r2, #239	; 0xef
 80028b8:	801a      	strh	r2, [r3, #0]
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc90      	pop	{r4, r7}
 80028c2:	4770      	bx	lr
 80028c4:	20000134 	.word	0x20000134
 80028c8:	20000136 	.word	0x20000136
 80028cc:	20000040 	.word	0x20000040
 80028d0:	20000042 	.word	0x20000042

080028d4 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4604      	mov	r4, r0
 80028dc:	4608      	mov	r0, r1
 80028de:	4611      	mov	r1, r2
 80028e0:	461a      	mov	r2, r3
 80028e2:	4623      	mov	r3, r4
 80028e4:	80fb      	strh	r3, [r7, #6]
 80028e6:	4603      	mov	r3, r0
 80028e8:	80bb      	strh	r3, [r7, #4]
 80028ea:	460b      	mov	r3, r1
 80028ec:	807b      	strh	r3, [r7, #2]
 80028ee:	4613      	mov	r3, r2
 80028f0:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 80028f6:	887a      	ldrh	r2, [r7, #2]
 80028f8:	88bb      	ldrh	r3, [r7, #4]
 80028fa:	4611      	mov	r1, r2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff fedb 	bl	80026b8 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002902:	2200      	movs	r2, #0
 8002904:	2100      	movs	r1, #0
 8002906:	202c      	movs	r0, #44	; 0x2c
 8002908:	f7ff ff5d 	bl	80027c6 <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 800290c:	2300      	movs	r3, #0
 800290e:	81fb      	strh	r3, [r7, #14]
 8002910:	e006      	b.n	8002920 <ST7789H2_DrawHLine+0x4c>
  {
    LCD_IO_WriteData(RGBCode);
 8002912:	88fb      	ldrh	r3, [r7, #6]
 8002914:	4618      	mov	r0, r3
 8002916:	f000 fae1 	bl	8002edc <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 800291a:	89fb      	ldrh	r3, [r7, #14]
 800291c:	3301      	adds	r3, #1
 800291e:	81fb      	strh	r3, [r7, #14]
 8002920:	89fa      	ldrh	r2, [r7, #14]
 8002922:	883b      	ldrh	r3, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d3f4      	bcc.n	8002912 <ST7789H2_DrawHLine+0x3e>
  }  
}
 8002928:	bf00      	nop
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	bd90      	pop	{r4, r7, pc}

08002930 <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002930:	b590      	push	{r4, r7, lr}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	4604      	mov	r4, r0
 8002938:	4608      	mov	r0, r1
 800293a:	4611      	mov	r1, r2
 800293c:	461a      	mov	r2, r3
 800293e:	4623      	mov	r3, r4
 8002940:	80fb      	strh	r3, [r7, #6]
 8002942:	4603      	mov	r3, r0
 8002944:	80bb      	strh	r3, [r7, #4]
 8002946:	460b      	mov	r3, r1
 8002948:	807b      	strh	r3, [r7, #2]
 800294a:	4613      	mov	r3, r2
 800294c:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 800294e:	2300      	movs	r3, #0
 8002950:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002952:	887a      	ldrh	r2, [r7, #2]
 8002954:	88bb      	ldrh	r3, [r7, #4]
 8002956:	4611      	mov	r1, r2
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fead 	bl	80026b8 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 800295e:	2200      	movs	r2, #0
 8002960:	2100      	movs	r1, #0
 8002962:	202c      	movs	r0, #44	; 0x2c
 8002964:	f7ff ff2f 	bl	80027c6 <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8002968:	2300      	movs	r3, #0
 800296a:	81fb      	strh	r3, [r7, #14]
 800296c:	e00b      	b.n	8002986 <ST7789H2_DrawVLine+0x56>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 800296e:	887a      	ldrh	r2, [r7, #2]
 8002970:	89fb      	ldrh	r3, [r7, #14]
 8002972:	4413      	add	r3, r2
 8002974:	b299      	uxth	r1, r3
 8002976:	88fa      	ldrh	r2, [r7, #6]
 8002978:	88bb      	ldrh	r3, [r7, #4]
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fece 	bl	800271c <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8002980:	89fb      	ldrh	r3, [r7, #14]
 8002982:	3301      	adds	r3, #1
 8002984:	81fb      	strh	r3, [r7, #14]
 8002986:	89fa      	ldrh	r2, [r7, #14]
 8002988:	883b      	ldrh	r3, [r7, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d3ef      	bcc.n	800296e <ST7789H2_DrawVLine+0x3e>
  }
}
 800298e:	bf00      	nop
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	bd90      	pop	{r4, r7, pc}
	...

08002998 <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	603a      	str	r2, [r7, #0]
 80029a2:	80fb      	strh	r3, [r7, #6]
 80029a4:	460b      	mov	r3, r1
 80029a6:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	2300      	movs	r3, #0
 80029ae:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 80029b4:	4b2f      	ldr	r3, [pc, #188]	; (8002a74 <ST7789H2_DrawBitmap+0xdc>)
 80029b6:	881a      	ldrh	r2, [r3, #0]
 80029b8:	4b2f      	ldr	r3, [pc, #188]	; (8002a78 <ST7789H2_DrawBitmap+0xe0>)
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3301      	adds	r3, #1
 80029c2:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 80029c4:	4b2d      	ldr	r3, [pc, #180]	; (8002a7c <ST7789H2_DrawBitmap+0xe4>)
 80029c6:	881a      	ldrh	r2, [r3, #0]
 80029c8:	4b2d      	ldr	r3, [pc, #180]	; (8002a80 <ST7789H2_DrawBitmap+0xe8>)
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	3301      	adds	r3, #1
 80029d2:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	3302      	adds	r3, #2
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	3304      	adds	r3, #4
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	041b      	lsls	r3, r3, #16
 80029e8:	461a      	mov	r2, r3
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	330a      	adds	r3, #10
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	330c      	adds	r3, #12
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	041b      	lsls	r3, r3, #16
 8002a04:	461a      	mov	r2, r3
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	085b      	lsrs	r3, r3, #1
 8002a14:	613b      	str	r3, [r7, #16]
  pbmp += index;
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8002a1e:	88ba      	ldrh	r2, [r7, #4]
 8002a20:	89bb      	ldrh	r3, [r7, #12]
 8002a22:	4413      	add	r3, r2
 8002a24:	61fb      	str	r3, [r7, #28]
 8002a26:	e01d      	b.n	8002a64 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	88fb      	ldrh	r3, [r7, #6]
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff fe3f 	bl	80026b8 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b299      	uxth	r1, r3
 8002a42:	89fb      	ldrh	r3, [r7, #14]
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	fb02 f303 	mul.w	r3, r2, r3
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	4413      	add	r3, r2
 8002a50:	89fa      	ldrh	r2, [r7, #14]
 8002a52:	88f8      	ldrh	r0, [r7, #6]
 8002a54:	f000 f898 	bl	8002b88 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	3b01      	subs	r3, #1
 8002a62:	61fb      	str	r3, [r7, #28]
 8002a64:	88bb      	ldrh	r3, [r7, #4]
 8002a66:	69fa      	ldr	r2, [r7, #28]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d8dd      	bhi.n	8002a28 <ST7789H2_DrawBitmap+0x90>
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	3720      	adds	r7, #32
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000040 	.word	0x20000040
 8002a78:	20000134 	.word	0x20000134
 8002a7c:	20000042 	.word	0x20000042
 8002a80:	20000136 	.word	0x20000136

08002a84 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8002a84:	b590      	push	{r4, r7, lr}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4604      	mov	r4, r0
 8002a8c:	4608      	mov	r0, r1
 8002a8e:	4611      	mov	r1, r2
 8002a90:	461a      	mov	r2, r3
 8002a92:	4623      	mov	r3, r4
 8002a94:	80fb      	strh	r3, [r7, #6]
 8002a96:	4603      	mov	r3, r0
 8002a98:	80bb      	strh	r3, [r7, #4]
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	807b      	strh	r3, [r7, #2]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8002aa6:	88bb      	ldrh	r3, [r7, #4]
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	e019      	b.n	8002ae0 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff fdff 	bl	80026b8 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	b299      	uxth	r1, r3
 8002abe:	887b      	ldrh	r3, [r7, #2]
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	fb02 f303 	mul.w	r3, r2, r3
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	6a3a      	ldr	r2, [r7, #32]
 8002aca:	4413      	add	r3, r2
 8002acc:	887a      	ldrh	r2, [r7, #2]
 8002ace:	88f8      	ldrh	r0, [r7, #6]
 8002ad0:	f000 f85a 	bl	8002b88 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	3301      	adds	r3, #1
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	88ba      	ldrh	r2, [r7, #4]
 8002ae2:	883b      	ldrh	r3, [r7, #0]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d3de      	bcc.n	8002aac <ST7789H2_DrawRGBImage+0x28>
  }
}
 8002aee:	bf00      	nop
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd90      	pop	{r4, r7, pc}

08002af6 <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b086      	sub	sp, #24
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	4603      	mov	r3, r0
 8002afe:	460a      	mov	r2, r1
 8002b00:	80fb      	strh	r3, [r7, #6]
 8002b02:	4613      	mov	r3, r2
 8002b04:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002b06:	88ba      	ldrh	r2, [r7, #4]
 8002b08:	88fb      	ldrh	r3, [r7, #6]
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff fdd3 	bl	80026b8 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8002b12:	2200      	movs	r2, #0
 8002b14:	2100      	movs	r1, #0
 8002b16:	202e      	movs	r0, #46	; 0x2e
 8002b18:	f7ff fe55 	bl	80027c6 <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 8002b1c:	f000 f9f8 	bl	8002f10 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 8002b20:	f000 f9f6 	bl	8002f10 <LCD_IO_ReadData>
 8002b24:	4603      	mov	r3, r0
 8002b26:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 8002b28:	f000 f9f2 	bl	8002f10 <LCD_IO_ReadData>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 8002b30:	8afb      	ldrh	r3, [r7, #22]
 8002b32:	121b      	asrs	r3, r3, #8
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	f023 0303 	bic.w	r3, r3, #3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 8002b3e:	8afb      	ldrh	r3, [r7, #22]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	f023 0303 	bic.w	r3, r3, #3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 8002b4a:	8abb      	ldrh	r3, [r7, #20]
 8002b4c:	121b      	asrs	r3, r3, #8
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	f023 0303 	bic.w	r3, r3, #3
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 8002b58:	f107 0310 	add.w	r3, r7, #16
 8002b5c:	f107 020c 	add.w	r2, r7, #12
 8002b60:	6812      	ldr	r2, [r2, #0]
 8002b62:	4611      	mov	r1, r2
 8002b64:	8019      	strh	r1, [r3, #0]
 8002b66:	3302      	adds	r3, #2
 8002b68:	0c12      	lsrs	r2, r2, #16
 8002b6a:	701a      	strb	r2, [r3, #0]
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	7c3a      	ldrb	r2, [r7, #16]
 8002b70:	f362 0307 	bfi	r3, r2, #0, #8
 8002b74:	7c7a      	ldrb	r2, [r7, #17]
 8002b76:	f362 230f 	bfi	r3, r2, #8, #8
 8002b7a:	7cba      	ldrb	r2, [r7, #18]
 8002b7c:	f362 4317 	bfi	r3, r2, #16, #8
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	607b      	str	r3, [r7, #4]
 8002b90:	4603      	mov	r3, r0
 8002b92:	81fb      	strh	r3, [r7, #14]
 8002b94:	460b      	mov	r3, r1
 8002b96:	81bb      	strh	r3, [r7, #12]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	202c      	movs	r0, #44	; 0x2c
 8002baa:	f7ff fe0c 	bl	80027c6 <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8002bae:	89fb      	ldrh	r3, [r7, #14]
 8002bb0:	61bb      	str	r3, [r7, #24]
 8002bb2:	e02a      	b.n	8002c0a <ST7789H2_DrawRGBHLine+0x82>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002bb4:	4b1a      	ldr	r3, [pc, #104]	; (8002c20 <ST7789H2_DrawRGBHLine+0x98>)
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d321      	bcc.n	8002c04 <ST7789H2_DrawRGBHLine+0x7c>
 8002bc0:	4b18      	ldr	r3, [pc, #96]	; (8002c24 <ST7789H2_DrawRGBHLine+0x9c>)
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	89ba      	ldrh	r2, [r7, #12]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d31c      	bcc.n	8002c04 <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002bca:	4b17      	ldr	r3, [pc, #92]	; (8002c28 <ST7789H2_DrawRGBHLine+0xa0>)
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d816      	bhi.n	8002c04 <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002bd6:	4b15      	ldr	r3, [pc, #84]	; (8002c2c <ST7789H2_DrawRGBHLine+0xa4>)
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	89ba      	ldrh	r2, [r7, #12]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d811      	bhi.n	8002c04 <ST7789H2_DrawRGBHLine+0x7c>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8002be0:	897a      	ldrh	r2, [r7, #10]
 8002be2:	89fb      	ldrh	r3, [r7, #14]
 8002be4:	4413      	add	r3, r2
 8002be6:	461a      	mov	r2, r3
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d007      	beq.n	8002bfe <ST7789H2_DrawRGBHLine+0x76>
      {
        LCD_IO_WriteData(rgb565[i]);        
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 f96f 	bl	8002edc <LCD_IO_WriteData>
      }      
      i++;
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3301      	adds	r3, #1
 8002c02:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	3301      	adds	r3, #1
 8002c08:	61bb      	str	r3, [r7, #24]
 8002c0a:	897a      	ldrh	r2, [r7, #10]
 8002c0c:	89fb      	ldrh	r3, [r7, #14]
 8002c0e:	4413      	add	r3, r2
 8002c10:	461a      	mov	r2, r3
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d3cd      	bcc.n	8002bb4 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 8002c18:	bf00      	nop
 8002c1a:	3720      	adds	r7, #32
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20000134 	.word	0x20000134
 8002c24:	20000136 	.word	0x20000136
 8002c28:	20000040 	.word	0x20000040
 8002c2c:	20000042 	.word	0x20000042

08002c30 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	460a      	mov	r2, r1
 8002c3a:	71fb      	strb	r3, [r7, #7]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  WAKEUP_BUTTON_GPIO_CLK_ENABLE();
 8002c40:	2300      	movs	r3, #0
 8002c42:	60bb      	str	r3, [r7, #8]
 8002c44:	4b22      	ldr	r3, [pc, #136]	; (8002cd0 <BSP_PB_Init+0xa0>)
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	4a21      	ldr	r2, [pc, #132]	; (8002cd0 <BSP_PB_Init+0xa0>)
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c50:	4b1f      	ldr	r3, [pc, #124]	; (8002cd0 <BSP_PB_Init+0xa0>)
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	60bb      	str	r3, [r7, #8]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002c5c:	79bb      	ldrb	r3, [r7, #6]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d111      	bne.n	8002c86 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002c62:	2301      	movs	r3, #1
 8002c64:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002c66:	2300      	movs	r3, #0
 8002c68:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	4a17      	ldr	r2, [pc, #92]	; (8002cd4 <BSP_PB_Init+0xa4>)
 8002c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7a:	f107 020c 	add.w	r2, r7, #12
 8002c7e:	4611      	mov	r1, r2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f001 ff4b 	bl	8004b1c <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002c86:	79bb      	ldrb	r3, [r7, #6]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d11d      	bne.n	8002cc8 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002c90:	2302      	movs	r3, #2
 8002c92:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c94:	2303      	movs	r3, #3
 8002c96:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002c98:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <BSP_PB_Init+0xa8>)
 8002c9a:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	4a0d      	ldr	r2, [pc, #52]	; (8002cd4 <BSP_PB_Init+0xa4>)
 8002ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca4:	f107 020c 	add.w	r2, r7, #12
 8002ca8:	4611      	mov	r1, r2
 8002caa:	4618      	mov	r0, r3
 8002cac:	f001 ff36 	bl	8004b1c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002cb0:	2306      	movs	r3, #6
 8002cb2:	b25b      	sxtb	r3, r3
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	210f      	movs	r1, #15
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f001 fa4d 	bl	8004158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002cbe:	2306      	movs	r3, #6
 8002cc0:	b25b      	sxtb	r3, r3
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f001 fa64 	bl	8004190 <HAL_NVIC_EnableIRQ>
  }
}
 8002cc8:	bf00      	nop
 8002cca:	3720      	adds	r7, #32
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	20000044 	.word	0x20000044
 8002cd8:	10110000 	.word	0x10110000

08002cdc <FMC_BANK3_MspInit>:
/*************************** FMC Routines ************************************/
/**
  * @brief  Initializes FMC_BANK3 MSP.
  */
static void FMC_BANK3_MspInit(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08a      	sub	sp, #40	; 0x28
 8002ce0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
    
  /* Enable FSMC clock */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	4b3a      	ldr	r3, [pc, #232]	; (8002dd0 <FMC_BANK3_MspInit+0xf4>)
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	4a39      	ldr	r2, [pc, #228]	; (8002dd0 <FMC_BANK3_MspInit+0xf4>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	6393      	str	r3, [r2, #56]	; 0x38
 8002cf2:	4b37      	ldr	r3, [pc, #220]	; (8002dd0 <FMC_BANK3_MspInit+0xf4>)
 8002cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	693b      	ldr	r3, [r7, #16]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	4b33      	ldr	r3, [pc, #204]	; (8002dd0 <FMC_BANK3_MspInit+0xf4>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	4a32      	ldr	r2, [pc, #200]	; (8002dd0 <FMC_BANK3_MspInit+0xf4>)
 8002d08:	f043 0308 	orr.w	r3, r3, #8
 8002d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0e:	4b30      	ldr	r3, [pc, #192]	; (8002dd0 <FMC_BANK3_MspInit+0xf4>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	4b2c      	ldr	r3, [pc, #176]	; (8002dd0 <FMC_BANK3_MspInit+0xf4>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	4a2b      	ldr	r2, [pc, #172]	; (8002dd0 <FMC_BANK3_MspInit+0xf4>)
 8002d24:	f043 0310 	orr.w	r3, r3, #16
 8002d28:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2a:	4b29      	ldr	r3, [pc, #164]	; (8002dd0 <FMC_BANK3_MspInit+0xf4>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	f003 0310 	and.w	r3, r3, #16
 8002d32:	60bb      	str	r3, [r7, #8]
 8002d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	607b      	str	r3, [r7, #4]
 8002d3a:	4b25      	ldr	r3, [pc, #148]	; (8002dd0 <FMC_BANK3_MspInit+0xf4>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	4a24      	ldr	r2, [pc, #144]	; (8002dd0 <FMC_BANK3_MspInit+0xf4>)
 8002d40:	f043 0320 	orr.w	r3, r3, #32
 8002d44:	6313      	str	r3, [r2, #48]	; 0x30
 8002d46:	4b22      	ldr	r3, [pc, #136]	; (8002dd0 <FMC_BANK3_MspInit+0xf4>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	f003 0320 	and.w	r3, r3, #32
 8002d4e:	607b      	str	r3, [r7, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	603b      	str	r3, [r7, #0]
 8002d56:	4b1e      	ldr	r3, [pc, #120]	; (8002dd0 <FMC_BANK3_MspInit+0xf4>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	4a1d      	ldr	r2, [pc, #116]	; (8002dd0 <FMC_BANK3_MspInit+0xf4>)
 8002d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d60:	6313      	str	r3, [r2, #48]	; 0x30
 8002d62:	4b1b      	ldr	r3, [pc, #108]	; (8002dd0 <FMC_BANK3_MspInit+0xf4>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	683b      	ldr	r3, [r7, #0]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002d6e:	2302      	movs	r3, #2
 8002d70:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002d72:	2301      	movs	r3, #1
 8002d74:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d76:	2303      	movs	r3, #3
 8002d78:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 8002d7a:	230c      	movs	r3, #12
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* GPIOD configuration: GPIO_PIN_7 is  FMC_NE1 , GPIO_PIN_11 ans GPIO_PIN_12 are PSRAM_A16 and PSRAM_A17 */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 8002d7e:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8002d82:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7|\
                              GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002d84:	f107 0314 	add.w	r3, r7, #20
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4812      	ldr	r0, [pc, #72]	; (8002dd4 <FMC_BANK3_MspInit+0xf8>)
 8002d8c:	f001 fec6 	bl	8004b1c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 8002d90:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002d94:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_12 |GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002d96:	f107 0314 	add.w	r3, r7, #20
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	480e      	ldr	r0, [pc, #56]	; (8002dd8 <FMC_BANK3_MspInit+0xfc>)
 8002d9e:	f001 febd 	bl	8004b1c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002da2:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8002da6:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15; 
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002da8:	f107 0314 	add.w	r3, r7, #20
 8002dac:	4619      	mov	r1, r3
 8002dae:	480b      	ldr	r0, [pc, #44]	; (8002ddc <FMC_BANK3_MspInit+0x100>)
 8002db0:	f001 feb4 	bl	8004b1c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002db4:	f240 433f 	movw	r3, #1087	; 0x43f
 8002db8:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_10 ; 
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002dba:	f107 0314 	add.w	r3, r7, #20
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4807      	ldr	r0, [pc, #28]	; (8002de0 <FMC_BANK3_MspInit+0x104>)
 8002dc2:	f001 feab 	bl	8004b1c <HAL_GPIO_Init>
}
 8002dc6:	bf00      	nop
 8002dc8:	3728      	adds	r7, #40	; 0x28
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40020c00 	.word	0x40020c00
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40021400 	.word	0x40021400
 8002de0:	40021800 	.word	0x40021800

08002de4 <FMC_BANK3_Init>:

/**
  * @brief  Initializes LCD IOs.
  */ 
static void FMC_BANK3_Init(void) 
{  
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b09c      	sub	sp, #112	; 0x70
 8002de8:	af00      	add	r7, sp, #0
  SRAM_HandleTypeDef hsram;
  FSMC_NORSRAM_TimingTypeDef sram_timing;

  /* Initialize the SRAM controller */
  FMC_BANK3_MspInit();
 8002dea:	f7ff ff77 	bl	8002cdc <FMC_BANK3_MspInit>
  
  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FSMC_NORSRAM_DEVICE;
 8002dee:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002df2:	623b      	str	r3, [r7, #32]
  hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002df4:	4b1e      	ldr	r3, [pc, #120]	; (8002e70 <FMC_BANK3_Init+0x8c>)
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Timing config */
  sram_timing.AddressSetupTime      = 3;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	607b      	str	r3, [r7, #4]
  sram_timing.AddressHoldTime       = 1;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	60bb      	str	r3, [r7, #8]
  sram_timing.DataSetupTime         = 4;
 8002e00:	2304      	movs	r3, #4
 8002e02:	60fb      	str	r3, [r7, #12]
  sram_timing.BusTurnAroundDuration = 1;
 8002e04:	2301      	movs	r3, #1
 8002e06:	613b      	str	r3, [r7, #16]
  sram_timing.CLKDivision           = 2;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	617b      	str	r3, [r7, #20]
  sram_timing.DataLatency           = 2;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	61bb      	str	r3, [r7, #24]
  sram_timing.AccessMode            = FSMC_ACCESS_MODE_A;
 8002e10:	2300      	movs	r3, #0
 8002e12:	61fb      	str	r3, [r7, #28]
      
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK3;
 8002e14:	2304      	movs	r3, #4
 8002e16:	62bb      	str	r3, [r7, #40]	; 0x28
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	633b      	str	r3, [r7, #48]	; 0x30
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002e20:	2310      	movs	r3, #16
 8002e22:	637b      	str	r3, [r7, #52]	; 0x34
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002e24:	2300      	movs	r3, #0
 8002e26:	63bb      	str	r3, [r7, #56]	; 0x38
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 8002e30:	2300      	movs	r3, #0
 8002e32:	647b      	str	r3, [r7, #68]	; 0x44
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 8002e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e38:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_ENABLE;
 8002e3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e42:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002e44:	2300      	movs	r3, #0
 8002e46:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 8002e4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e50:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 8002e52:	2300      	movs	r3, #0
 8002e54:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.ContinuousClock    = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8002e56:	2300      	movs	r3, #0
 8002e58:	65fb      	str	r3, [r7, #92]	; 0x5c

  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 8002e5a:	1d3a      	adds	r2, r7, #4
 8002e5c:	1d39      	adds	r1, r7, #4
 8002e5e:	f107 0320 	add.w	r3, r7, #32
 8002e62:	4618      	mov	r0, r3
 8002e64:	f006 fd5c 	bl	8009920 <HAL_SRAM_Init>
}
 8002e68:	bf00      	nop
 8002e6a:	3770      	adds	r7, #112	; 0x70
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	a0000104 	.word	0xa0000104

08002e74 <FMC_BANK3_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written 
  */
static void FMC_BANK3_WriteData(uint16_t Data) 
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3->RAM = Data;
 8002e7e:	f04f 42d0 	mov.w	r2, #1744830464	; 0x68000000
 8002e82:	88fb      	ldrh	r3, [r7, #6]
 8002e84:	8053      	strh	r3, [r2, #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e86:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <FMC_BANK3_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
static void FMC_BANK3_WriteReg(uint8_t Reg) 
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK3->REG = Reg;
 8002ea0:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002ea4:	79fa      	ldrb	r2, [r7, #7]
 8002ea6:	b292      	uxth	r2, r2
 8002ea8:	801a      	strh	r2, [r3, #0]
 8002eaa:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <FMC_BANK3_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
static uint16_t FMC_BANK3_ReadData(void) 
{
 8002eba:	b480      	push	{r7}
 8002ebc:	af00      	add	r7, sp, #0
  return FMC_BANK3->RAM;
 8002ebe:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002ec2:	885b      	ldrh	r3, [r3, #2]
 8002ec4:	b29b      	uxth	r3, r3
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <LCD_IO_Init>:
/********************************* LINK LCD ***********************************/
/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  FMC_BANK3_Init();
 8002ed4:	f7ff ff86 	bl	8002de4 <FMC_BANK3_Init>
}
 8002ed8:	bf00      	nop
 8002eda:	bd80      	pop	{r7, pc}

08002edc <LCD_IO_WriteData>:
/**
  * @brief  Writes data on LCD data register.
  * @param  RegValue: Data to be written
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3_WriteData(RegValue);
 8002ee6:	88fb      	ldrh	r3, [r7, #6]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff ffc3 	bl	8002e74 <FMC_BANK3_WriteData>
}
 8002eee:	bf00      	nop
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <LCD_IO_WriteReg>:
/**
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	4603      	mov	r3, r0
 8002efe:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK3_WriteReg(Reg);
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff ffc7 	bl	8002e96 <FMC_BANK3_WriteReg>
}
 8002f08:	bf00      	nop
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <LCD_IO_ReadData>:
/**
  * @brief  Reads data from LCD data register.
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  return FMC_BANK3_ReadData();
 8002f14:	f7ff ffd1 	bl	8002eba <FMC_BANK3_ReadData>
 8002f18:	4603      	mov	r3, r0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <LCD_IO_Delay>:
/**
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  */
void LCD_IO_Delay(uint32_t Delay)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b082      	sub	sp, #8
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fdca 	bl	8003ac0 <HAL_Delay>
}
 8002f2c:	bf00      	nop
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in STM32F413H_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8002f3c:	f000 f80e 	bl	8002f5c <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8002f40:	bf00      	nop
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  BSP_AUDIO_OUT_Error_CallBack();
 8002f50:	f000 f80b 	bl	8002f6a <BSP_AUDIO_OUT_Error_CallBack>
}
 8002f54:	bf00      	nop
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
}
 8002f60:	bf00      	nop
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	af00      	add	r7, sp, #0
}
 8002f6e:	bf00      	nop
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Reception complete callback.
  * @param  hi2s : I2S handle.
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8002f80:	f000 f804 	bl	8002f8c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8002f84:	bf00      	nop
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8002f90:	bf00      	nop
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	af00      	add	r7, sp, #0
 return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8002f9e:	2001      	movs	r0, #1
 8002fa0:	f000 f804 	bl	8002fac <BSP_LCD_InitEx>
 8002fa4:	4603      	mov	r3, r0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <BSP_LCD_InitEx>:
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  *         or LCD_ORIENTATION_LANDSCAPE_ROT180
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{ 
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	73fb      	strb	r3, [r7, #15]

  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 8002fb8:	4b2c      	ldr	r3, [pc, #176]	; (800306c <BSP_LCD_InitEx+0xc0>)
 8002fba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fbe:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8002fc0:	4b2a      	ldr	r3, [pc, #168]	; (800306c <BSP_LCD_InitEx+0xc0>)
 8002fc2:	4a2b      	ldr	r2, [pc, #172]	; (8003070 <BSP_LCD_InitEx+0xc4>)
 8002fc4:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 8002fc6:	4b29      	ldr	r3, [pc, #164]	; (800306c <BSP_LCD_InitEx+0xc0>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
  
  /* Initialize LCD special pins GPIOs */
  BSP_LCD_MspInit();
 8002fcc:	f000 fa48 	bl	8003460 <BSP_LCD_MspInit>
  
  /* Backlight control signal assertion */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	2120      	movs	r1, #32
 8002fd4:	4827      	ldr	r0, [pc, #156]	; (8003074 <BSP_LCD_InitEx+0xc8>)
 8002fd6:	f001 ff4b 	bl	8004e70 <HAL_GPIO_WritePin>
  
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fe0:	4825      	ldr	r0, [pc, #148]	; (8003078 <BSP_LCD_InitEx+0xcc>)
 8002fe2:	f001 ff45 	bl	8004e70 <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 8002fe6:	2005      	movs	r0, #5
 8002fe8:	f000 fd6a 	bl	8003ac0 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002fec:	2201      	movs	r2, #1
 8002fee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ff2:	4821      	ldr	r0, [pc, #132]	; (8003078 <BSP_LCD_InitEx+0xcc>)
 8002ff4:	f001 ff3c 	bl	8004e70 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8002ff8:	200a      	movs	r0, #10
 8002ffa:	f000 fd61 	bl	8003ac0 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002ffe:	2200      	movs	r2, #0
 8003000:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003004:	481c      	ldr	r0, [pc, #112]	; (8003078 <BSP_LCD_InitEx+0xcc>)
 8003006:	f001 ff33 	bl	8004e70 <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 800300a:	2014      	movs	r0, #20
 800300c:	f000 fd58 	bl	8003ac0 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8003010:	2201      	movs	r2, #1
 8003012:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003016:	4818      	ldr	r0, [pc, #96]	; (8003078 <BSP_LCD_InitEx+0xcc>)
 8003018:	f001 ff2a 	bl	8004e70 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 800301c:	200a      	movs	r0, #10
 800301e:	f000 fd4f 	bl	8003ac0 <HAL_Delay>
  
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 8003022:	4b16      	ldr	r3, [pc, #88]	; (800307c <BSP_LCD_InitEx+0xd0>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	4798      	blx	r3
 8003028:	4603      	mov	r3, r0
 800302a:	2b85      	cmp	r3, #133	; 0x85
 800302c:	d118      	bne.n	8003060 <BSP_LCD_InitEx+0xb4>
  {    
    LcdDrv = &ST7789H2_drv;
 800302e:	4b14      	ldr	r3, [pc, #80]	; (8003080 <BSP_LCD_InitEx+0xd4>)
 8003030:	4a12      	ldr	r2, [pc, #72]	; (800307c <BSP_LCD_InitEx+0xd0>)
 8003032:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 8003034:	4b12      	ldr	r3, [pc, #72]	; (8003080 <BSP_LCD_InitEx+0xd4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4798      	blx	r3
    
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d103      	bne.n	800304a <BSP_LCD_InitEx+0x9e>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT); 
 8003042:	2000      	movs	r0, #0
 8003044:	f7ff fabd 	bl	80025c2 <ST7789H2_SetOrientation>
 8003048:	e005      	b.n	8003056 <BSP_LCD_InitEx+0xaa>
    }
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d102      	bne.n	8003056 <BSP_LCD_InitEx+0xaa>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_LANDSCAPE_ROT180);
 8003050:	2002      	movs	r0, #2
 8003052:	f7ff fab6 	bl	80025c2 <ST7789H2_SetOrientation>
    else
    {
      /* Default landscape orientation is selected */
    }
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003056:	480b      	ldr	r0, [pc, #44]	; (8003084 <BSP_LCD_InitEx+0xd8>)
 8003058:	f000 f84e 	bl	80030f8 <BSP_LCD_SetFont>
    
    ret = LCD_OK;   
 800305c:	2300      	movs	r3, #0
 800305e:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8003060:	7bfb      	ldrb	r3, [r7, #15]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20021b14 	.word	0x20021b14
 8003070:	20000048 	.word	0x20000048
 8003074:	40021000 	.word	0x40021000
 8003078:	40020400 	.word	0x40020400
 800307c:	20000008 	.word	0x20000008
 8003080:	20000138 	.word	0x20000138
 8003084:	20000058 	.word	0x20000058

08003088 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size. 
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelWidth());
 800308c:	4b03      	ldr	r3, [pc, #12]	; (800309c <BSP_LCD_GetXSize+0x14>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003092:	4798      	blx	r3
 8003094:	4603      	mov	r3, r0
}
 8003096:	4618      	mov	r0, r3
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	20000138 	.word	0x20000138

080030a0 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size. 
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelHeight());
 80030a4:	4b03      	ldr	r3, [pc, #12]	; (80030b4 <BSP_LCD_GetYSize+0x14>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030aa:	4798      	blx	r3
 80030ac:	4603      	mov	r3, r0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000138 	.word	0x20000138

080030b8 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 80030c2:	88fb      	ldrh	r3, [r7, #6]
 80030c4:	4a03      	ldr	r2, [pc, #12]	; (80030d4 <BSP_LCD_SetTextColor+0x1c>)
 80030c6:	6013      	str	r3, [r2, #0]
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	20021b14 	.word	0x20021b14

080030d8 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 80030e2:	88fb      	ldrh	r3, [r7, #6]
 80030e4:	4a03      	ldr	r2, [pc, #12]	; (80030f4 <BSP_LCD_SetBackColor+0x1c>)
 80030e6:	6053      	str	r3, [r2, #4]
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	20021b14 	.word	0x20021b14

080030f8 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 8003100:	4a04      	ldr	r2, [pc, #16]	; (8003114 <BSP_LCD_SetFont+0x1c>)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6093      	str	r3, [r2, #8]
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	20021b14 	.word	0x20021b14

08003118 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 8003118:	b590      	push	{r4, r7, lr}
 800311a:	b087      	sub	sp, #28
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003122:	2300      	movs	r3, #0
 8003124:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 8003126:	2300      	movs	r3, #0
 8003128:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor; 
 800312a:	4b15      	ldr	r3, [pc, #84]	; (8003180 <BSP_LCD_Clear+0x68>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	4a13      	ldr	r2, [pc, #76]	; (8003180 <BSP_LCD_Clear+0x68>)
 8003134:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 8003136:	f7ff ffb3 	bl	80030a0 <BSP_LCD_GetYSize>
 800313a:	6138      	str	r0, [r7, #16]
  
  for(counter = 0; counter < y_size; counter++)
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	e00d      	b.n	800315e <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	b29c      	uxth	r4, r3
 8003146:	f7ff ff9f 	bl	8003088 <BSP_LCD_GetXSize>
 800314a:	4603      	mov	r3, r0
 800314c:	b29b      	uxth	r3, r3
 800314e:	461a      	mov	r2, r3
 8003150:	4621      	mov	r1, r4
 8003152:	2000      	movs	r0, #0
 8003154:	f000 f8ee 	bl	8003334 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < y_size; counter++)
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	3301      	adds	r3, #1
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	429a      	cmp	r2, r3
 8003164:	d3ed      	bcc.n	8003142 <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup; 
 8003166:	4a06      	ldr	r2, [pc, #24]	; (8003180 <BSP_LCD_Clear+0x68>)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800316c:	4b04      	ldr	r3, [pc, #16]	; (8003180 <BSP_LCD_Clear+0x68>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	b29b      	uxth	r3, r3
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff ffa0 	bl	80030b8 <BSP_LCD_SetTextColor>
}
 8003178:	bf00      	nop
 800317a:	371c      	adds	r7, #28
 800317c:	46bd      	mov	sp, r7
 800317e:	bd90      	pop	{r4, r7, pc}
 8003180:	20021b14 	.word	0x20021b14

08003184 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	80fb      	strh	r3, [r7, #6]
 800318e:	460b      	mov	r3, r1
 8003190:	80bb      	strh	r3, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8003196:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <BSP_LCD_DisplayChar+0x50>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80031a0:	490c      	ldr	r1, [pc, #48]	; (80031d4 <BSP_LCD_DisplayChar+0x50>)
 80031a2:	6889      	ldr	r1, [r1, #8]
 80031a4:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80031a6:	fb01 f103 	mul.w	r1, r1, r3
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80031aa:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <BSP_LCD_DisplayChar+0x50>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	889b      	ldrh	r3, [r3, #4]
 80031b0:	3307      	adds	r3, #7
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	da00      	bge.n	80031b8 <BSP_LCD_DisplayChar+0x34>
 80031b6:	3307      	adds	r3, #7
 80031b8:	10db      	asrs	r3, r3, #3
 80031ba:	fb03 f301 	mul.w	r3, r3, r1
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80031be:	441a      	add	r2, r3
 80031c0:	88b9      	ldrh	r1, [r7, #4]
 80031c2:	88fb      	ldrh	r3, [r7, #6]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 f9a7 	bl	8003518 <DrawChar>
}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	20021b14 	.word	0x20021b14

080031d8 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 80031d8:	b590      	push	{r4, r7, lr}
 80031da:	b089      	sub	sp, #36	; 0x24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60ba      	str	r2, [r7, #8]
 80031e0:	461a      	mov	r2, r3
 80031e2:	4603      	mov	r3, r0
 80031e4:	81fb      	strh	r3, [r7, #14]
 80031e6:	460b      	mov	r3, r1
 80031e8:	81bb      	strh	r3, [r7, #12]
 80031ea:	4613      	mov	r3, r2
 80031ec:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80031ee:	2301      	movs	r3, #1
 80031f0:	83fb      	strh	r3, [r7, #30]
 80031f2:	2300      	movs	r3, #0
 80031f4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80031f6:	2300      	movs	r3, #0
 80031f8:	61bb      	str	r3, [r7, #24]
 80031fa:	2300      	movs	r3, #0
 80031fc:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003202:	e002      	b.n	800320a <BSP_LCD_DisplayStringAt+0x32>
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	3301      	adds	r3, #1
 8003208:	61bb      	str	r3, [r7, #24]
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	617a      	str	r2, [r7, #20]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f6      	bne.n	8003204 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8003216:	f7ff ff37 	bl	8003088 <BSP_LCD_GetXSize>
 800321a:	4602      	mov	r2, r0
 800321c:	4b36      	ldr	r3, [pc, #216]	; (80032f8 <BSP_LCD_DisplayStringAt+0x120>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	889b      	ldrh	r3, [r3, #4]
 8003222:	fbb2 f3f3 	udiv	r3, r2, r3
 8003226:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003228:	79fb      	ldrb	r3, [r7, #7]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d014      	beq.n	8003258 <BSP_LCD_DisplayStringAt+0x80>
 800322e:	2b03      	cmp	r3, #3
 8003230:	d00f      	beq.n	8003252 <BSP_LCD_DisplayStringAt+0x7a>
 8003232:	2b01      	cmp	r3, #1
 8003234:	d11e      	bne.n	8003274 <BSP_LCD_DisplayStringAt+0x9c>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	4a2e      	ldr	r2, [pc, #184]	; (80032f8 <BSP_LCD_DisplayStringAt+0x120>)
 800323e:	6892      	ldr	r2, [r2, #8]
 8003240:	8892      	ldrh	r2, [r2, #4]
 8003242:	fb02 f303 	mul.w	r3, r2, r3
 8003246:	085b      	lsrs	r3, r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	89fb      	ldrh	r3, [r7, #14]
 800324c:	4413      	add	r3, r2
 800324e:	83fb      	strh	r3, [r7, #30]
      break;
 8003250:	e013      	b.n	800327a <BSP_LCD_DisplayStringAt+0xa2>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8003252:	89fb      	ldrh	r3, [r7, #14]
 8003254:	83fb      	strh	r3, [r7, #30]
      break;
 8003256:	e010      	b.n	800327a <BSP_LCD_DisplayStringAt+0xa2>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	b29a      	uxth	r2, r3
 8003260:	4b25      	ldr	r3, [pc, #148]	; (80032f8 <BSP_LCD_DisplayStringAt+0x120>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	889b      	ldrh	r3, [r3, #4]
 8003266:	fb12 f303 	smulbb	r3, r2, r3
 800326a:	b29a      	uxth	r2, r3
 800326c:	89fb      	ldrh	r3, [r7, #14]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	83fb      	strh	r3, [r7, #30]
      break;
 8003272:	e002      	b.n	800327a <BSP_LCD_DisplayStringAt+0xa2>
    }    
  default:
    {
      refcolumn = Xpos;
 8003274:	89fb      	ldrh	r3, [r7, #14]
 8003276:	83fb      	strh	r3, [r7, #30]
      break;
 8003278:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 800327a:	8bfb      	ldrh	r3, [r7, #30]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <BSP_LCD_DisplayStringAt+0xb0>
 8003280:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003284:	2b00      	cmp	r3, #0
 8003286:	da15      	bge.n	80032b4 <BSP_LCD_DisplayStringAt+0xdc>
  {
    refcolumn = 1;
 8003288:	2301      	movs	r3, #1
 800328a:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800328c:	e012      	b.n	80032b4 <BSP_LCD_DisplayStringAt+0xdc>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	781a      	ldrb	r2, [r3, #0]
 8003292:	89b9      	ldrh	r1, [r7, #12]
 8003294:	8bfb      	ldrh	r3, [r7, #30]
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff ff74 	bl	8003184 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 800329c:	4b16      	ldr	r3, [pc, #88]	; (80032f8 <BSP_LCD_DisplayStringAt+0x120>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	889a      	ldrh	r2, [r3, #4]
 80032a2:	8bfb      	ldrh	r3, [r7, #30]
 80032a4:	4413      	add	r3, r2
 80032a6:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	3301      	adds	r3, #1
 80032ac:	60bb      	str	r3, [r7, #8]
    i++;
 80032ae:	8bbb      	ldrh	r3, [r7, #28]
 80032b0:	3301      	adds	r3, #1
 80032b2:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	bf14      	ite	ne
 80032bc:	2301      	movne	r3, #1
 80032be:	2300      	moveq	r3, #0
 80032c0:	b2dc      	uxtb	r4, r3
 80032c2:	f7ff fee1 	bl	8003088 <BSP_LCD_GetXSize>
 80032c6:	4601      	mov	r1, r0
 80032c8:	8bbb      	ldrh	r3, [r7, #28]
 80032ca:	4a0b      	ldr	r2, [pc, #44]	; (80032f8 <BSP_LCD_DisplayStringAt+0x120>)
 80032cc:	6892      	ldr	r2, [r2, #8]
 80032ce:	8892      	ldrh	r2, [r2, #4]
 80032d0:	fb02 f303 	mul.w	r3, r2, r3
 80032d4:	1acb      	subs	r3, r1, r3
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	4a07      	ldr	r2, [pc, #28]	; (80032f8 <BSP_LCD_DisplayStringAt+0x120>)
 80032da:	6892      	ldr	r2, [r2, #8]
 80032dc:	8892      	ldrh	r2, [r2, #4]
 80032de:	4293      	cmp	r3, r2
 80032e0:	bf2c      	ite	cs
 80032e2:	2301      	movcs	r3, #1
 80032e4:	2300      	movcc	r3, #0
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	4023      	ands	r3, r4
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1ce      	bne.n	800328e <BSP_LCD_DisplayStringAt+0xb6>
  }
}
 80032f0:	bf00      	nop
 80032f2:	3724      	adds	r7, #36	; 0x24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd90      	pop	{r4, r7, pc}
 80032f8:	20021b14 	.word	0x20021b14

080032fc <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	4603      	mov	r3, r0
 8003304:	80fb      	strh	r3, [r7, #6]
 8003306:	460b      	mov	r3, r1
 8003308:	80bb      	strh	r3, [r7, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	807b      	strh	r3, [r7, #2]
  if(LcdDrv->WritePixel != NULL)
 800330e:	4b08      	ldr	r3, [pc, #32]	; (8003330 <BSP_LCD_DrawPixel+0x34>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d006      	beq.n	8003326 <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 8003318:	4b05      	ldr	r3, [pc, #20]	; (8003330 <BSP_LCD_DrawPixel+0x34>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	887a      	ldrh	r2, [r7, #2]
 8003320:	88b9      	ldrh	r1, [r7, #4]
 8003322:	88f8      	ldrh	r0, [r7, #6]
 8003324:	4798      	blx	r3
  }
}
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	20000138 	.word	0x20000138

08003334 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003334:	b590      	push	{r4, r7, lr}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	80fb      	strh	r3, [r7, #6]
 800333e:	460b      	mov	r3, r1
 8003340:	80bb      	strh	r3, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8003346:	2300      	movs	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]
  
  if(LcdDrv->DrawHLine != NULL)
 800334a:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <BSP_LCD_DrawHLine+0x6c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8003354:	4b12      	ldr	r3, [pc, #72]	; (80033a0 <BSP_LCD_DrawHLine+0x6c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6a1c      	ldr	r4, [r3, #32]
 800335a:	4b12      	ldr	r3, [pc, #72]	; (80033a4 <BSP_LCD_DrawHLine+0x70>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	b298      	uxth	r0, r3
 8003360:	887b      	ldrh	r3, [r7, #2]
 8003362:	88ba      	ldrh	r2, [r7, #4]
 8003364:	88f9      	ldrh	r1, [r7, #6]
 8003366:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8003368:	e015      	b.n	8003396 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	e00e      	b.n	800338e <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	b29a      	uxth	r2, r3
 8003374:	88fb      	ldrh	r3, [r7, #6]
 8003376:	4413      	add	r3, r2
 8003378:	b298      	uxth	r0, r3
 800337a:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <BSP_LCD_DrawHLine+0x70>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	b29a      	uxth	r2, r3
 8003380:	88bb      	ldrh	r3, [r7, #4]
 8003382:	4619      	mov	r1, r3
 8003384:	f7ff ffba 	bl	80032fc <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	3301      	adds	r3, #1
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	887b      	ldrh	r3, [r7, #2]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	429a      	cmp	r2, r3
 8003394:	d3ec      	bcc.n	8003370 <BSP_LCD_DrawHLine+0x3c>
}
 8003396:	bf00      	nop
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	bd90      	pop	{r4, r7, pc}
 800339e:	bf00      	nop
 80033a0:	20000138 	.word	0x20000138
 80033a4:	20021b14 	.word	0x20021b14

080033a8 <BSP_LCD_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address.
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 80033a8:	b590      	push	{r4, r7, lr}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	603a      	str	r2, [r7, #0]
 80033b2:	80fb      	strh	r3, [r7, #6]
 80033b4:	460b      	mov	r3, r1
 80033b6:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 80033bc:	2300      	movs	r3, #0
 80033be:	60bb      	str	r3, [r7, #8]
 
  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	3312      	adds	r3, #18
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	3313      	adds	r3, #19
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	021b      	lsls	r3, r3, #8
 80033d0:	441a      	add	r2, r3
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	3314      	adds	r3, #20
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	041b      	lsls	r3, r3, #16
 80033da:	441a      	add	r2, r3
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	3315      	adds	r3, #21
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	061b      	lsls	r3, r3, #24
 80033e4:	4413      	add	r3, r2
 80033e6:	60bb      	str	r3, [r7, #8]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	3316      	adds	r3, #22
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	3317      	adds	r3, #23
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	021b      	lsls	r3, r3, #8
 80033f8:	441a      	add	r2, r3
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	3318      	adds	r3, #24
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	041b      	lsls	r3, r3, #16
 8003402:	441a      	add	r2, r3
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	3319      	adds	r3, #25
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	061b      	lsls	r3, r3, #24
 800340c:	4413      	add	r3, r2
 800340e:	60fb      	str	r3, [r7, #12]
  
  SetDisplayWindow(Xpos, Ypos, width, height);
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	b29b      	uxth	r3, r3
 8003418:	88b9      	ldrh	r1, [r7, #4]
 800341a:	88f8      	ldrh	r0, [r7, #6]
 800341c:	f000 f914 	bl	8003648 <SetDisplayWindow>
  
  if(LcdDrv->DrawBitmap != NULL)
 8003420:	4b0e      	ldr	r3, [pc, #56]	; (800345c <BSP_LCD_DrawBitmap+0xb4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	2b00      	cmp	r3, #0
 8003428:	d006      	beq.n	8003438 <BSP_LCD_DrawBitmap+0x90>
  {
    LcdDrv->DrawBitmap(Xpos, Ypos, pbmp);
 800342a:	4b0c      	ldr	r3, [pc, #48]	; (800345c <BSP_LCD_DrawBitmap+0xb4>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003430:	88b9      	ldrh	r1, [r7, #4]
 8003432:	88f8      	ldrh	r0, [r7, #6]
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	4798      	blx	r3
  } 
  SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8003438:	f7ff fe26 	bl	8003088 <BSP_LCD_GetXSize>
 800343c:	4603      	mov	r3, r0
 800343e:	b29c      	uxth	r4, r3
 8003440:	f7ff fe2e 	bl	80030a0 <BSP_LCD_GetYSize>
 8003444:	4603      	mov	r3, r0
 8003446:	b29b      	uxth	r3, r3
 8003448:	4622      	mov	r2, r4
 800344a:	2100      	movs	r1, #0
 800344c:	2000      	movs	r0, #0
 800344e:	f000 f8fb 	bl	8003648 <SetDisplayWindow>
}
 8003452:	bf00      	nop
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	bd90      	pop	{r4, r7, pc}
 800345a:	bf00      	nop
 800345c:	20000138 	.word	0x20000138

08003460 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LCD GPIO special pins MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIOs clock */
  LCD_RESET_GPIO_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	4b28      	ldr	r3, [pc, #160]	; (800350c <BSP_LCD_MspInit+0xac>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	4a27      	ldr	r2, [pc, #156]	; (800350c <BSP_LCD_MspInit+0xac>)
 8003470:	f043 0302 	orr.w	r3, r3, #2
 8003474:	6313      	str	r3, [r2, #48]	; 0x30
 8003476:	4b25      	ldr	r3, [pc, #148]	; (800350c <BSP_LCD_MspInit+0xac>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	60bb      	str	r3, [r7, #8]
 8003480:	68bb      	ldr	r3, [r7, #8]
  LCD_TE_GPIO_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	607b      	str	r3, [r7, #4]
 8003486:	4b21      	ldr	r3, [pc, #132]	; (800350c <BSP_LCD_MspInit+0xac>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	4a20      	ldr	r2, [pc, #128]	; (800350c <BSP_LCD_MspInit+0xac>)
 800348c:	f043 0302 	orr.w	r3, r3, #2
 8003490:	6313      	str	r3, [r2, #48]	; 0x30
 8003492:	4b1e      	ldr	r3, [pc, #120]	; (800350c <BSP_LCD_MspInit+0xac>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	607b      	str	r3, [r7, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800349e:	2300      	movs	r3, #0
 80034a0:	603b      	str	r3, [r7, #0]
 80034a2:	4b1a      	ldr	r3, [pc, #104]	; (800350c <BSP_LCD_MspInit+0xac>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	4a19      	ldr	r2, [pc, #100]	; (800350c <BSP_LCD_MspInit+0xac>)
 80034a8:	f043 0310 	orr.w	r3, r3, #16
 80034ac:	6313      	str	r3, [r2, #48]	; 0x30
 80034ae:	4b17      	ldr	r3, [pc, #92]	; (800350c <BSP_LCD_MspInit+0xac>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	f003 0310 	and.w	r3, r3, #16
 80034b6:	603b      	str	r3, [r7, #0]
 80034b8:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 80034ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034be:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80034c4:	2302      	movs	r3, #2
 80034c6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80034c8:	2301      	movs	r3, #1
 80034ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 80034cc:	f107 030c 	add.w	r3, r7, #12
 80034d0:	4619      	mov	r1, r3
 80034d2:	480f      	ldr	r0, [pc, #60]	; (8003510 <BSP_LCD_MspInit+0xb0>)
 80034d4:	f001 fb22 	bl	8004b1c <HAL_GPIO_Init>

  /* LCD_TE GPIO configuration */
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 80034d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034dc:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80034de:	2300      	movs	r3, #0
 80034e0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 80034e2:	f107 030c 	add.w	r3, r7, #12
 80034e6:	4619      	mov	r1, r3
 80034e8:	4809      	ldr	r0, [pc, #36]	; (8003510 <BSP_LCD_MspInit+0xb0>)
 80034ea:	f001 fb17 	bl	8004b1c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 80034ee:	2320      	movs	r3, #32
 80034f0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80034f2:	2301      	movs	r3, #1
 80034f4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80034f6:	f107 030c 	add.w	r3, r7, #12
 80034fa:	4619      	mov	r1, r3
 80034fc:	4805      	ldr	r0, [pc, #20]	; (8003514 <BSP_LCD_MspInit+0xb4>)
 80034fe:	f001 fb0d 	bl	8004b1c <HAL_GPIO_Init>
}
 8003502:	bf00      	nop
 8003504:	3720      	adds	r7, #32
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40023800 	.word	0x40023800
 8003510:	40020400 	.word	0x40020400
 8003514:	40021000 	.word	0x40021000

08003518 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	603a      	str	r2, [r7, #0]
 8003522:	80fb      	strh	r3, [r7, #6]
 8003524:	460b      	mov	r3, r1
 8003526:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003528:	2300      	movs	r3, #0
 800352a:	61fb      	str	r3, [r7, #28]
 800352c:	2300      	movs	r3, #0
 800352e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;
  
  height = DrawProp.pFont->Height;
 8003530:	4b44      	ldr	r3, [pc, #272]	; (8003644 <DrawChar+0x12c>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	88db      	ldrh	r3, [r3, #6]
 8003536:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 8003538:	4b42      	ldr	r3, [pc, #264]	; (8003644 <DrawChar+0x12c>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	889b      	ldrh	r3, [r3, #4]
 800353e:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003540:	8a3b      	ldrh	r3, [r7, #16]
 8003542:	3307      	adds	r3, #7
 8003544:	2b00      	cmp	r3, #0
 8003546:	da00      	bge.n	800354a <DrawChar+0x32>
 8003548:	3307      	adds	r3, #7
 800354a:	10db      	asrs	r3, r3, #3
 800354c:	b2db      	uxtb	r3, r3
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	b2da      	uxtb	r2, r3
 8003552:	8a3b      	ldrh	r3, [r7, #16]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800355a:	2300      	movs	r3, #0
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	e069      	b.n	8003634 <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003560:	8a3b      	ldrh	r3, [r7, #16]
 8003562:	3307      	adds	r3, #7
 8003564:	2b00      	cmp	r3, #0
 8003566:	da00      	bge.n	800356a <DrawChar+0x52>
 8003568:	3307      	adds	r3, #7
 800356a:	10db      	asrs	r3, r3, #3
 800356c:	461a      	mov	r2, r3
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	fb03 f302 	mul.w	r3, r3, r2
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	4413      	add	r3, r2
 8003578:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800357a:	8a3b      	ldrh	r3, [r7, #16]
 800357c:	3307      	adds	r3, #7
 800357e:	2b00      	cmp	r3, #0
 8003580:	da00      	bge.n	8003584 <DrawChar+0x6c>
 8003582:	3307      	adds	r3, #7
 8003584:	10db      	asrs	r3, r3, #3
 8003586:	2b01      	cmp	r3, #1
 8003588:	d002      	beq.n	8003590 <DrawChar+0x78>
 800358a:	2b02      	cmp	r3, #2
 800358c:	d004      	beq.n	8003598 <DrawChar+0x80>
 800358e:	e00c      	b.n	80035aa <DrawChar+0x92>
    {
    case 1:
      line =  pchar[0];
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	617b      	str	r3, [r7, #20]
      break;    
 8003596:	e016      	b.n	80035c6 <DrawChar+0xae>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	021b      	lsls	r3, r3, #8
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	3201      	adds	r2, #1
 80035a2:	7812      	ldrb	r2, [r2, #0]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	617b      	str	r3, [r7, #20]
      break;
 80035a8:	e00d      	b.n	80035c6 <DrawChar+0xae>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	041a      	lsls	r2, r3, #16
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	3301      	adds	r3, #1
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	021b      	lsls	r3, r3, #8
 80035b8:	4313      	orrs	r3, r2
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	3202      	adds	r2, #2
 80035be:	7812      	ldrb	r2, [r2, #0]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]
      break;
 80035c4:	bf00      	nop
    }  
    
    for (j = 0; j < width; j++)
 80035c6:	2300      	movs	r3, #0
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	e029      	b.n	8003620 <DrawChar+0x108>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80035cc:	8a3a      	ldrh	r2, [r7, #16]
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	1ad2      	subs	r2, r2, r3
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
 80035d4:	4413      	add	r3, r2
 80035d6:	3b01      	subs	r3, #1
 80035d8:	2201      	movs	r2, #1
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	461a      	mov	r2, r3
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00c      	beq.n	8003602 <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	88fb      	ldrh	r3, [r7, #6]
 80035ee:	4413      	add	r3, r2
 80035f0:	b298      	uxth	r0, r3
 80035f2:	4b14      	ldr	r3, [pc, #80]	; (8003644 <DrawChar+0x12c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	88bb      	ldrh	r3, [r7, #4]
 80035fa:	4619      	mov	r1, r3
 80035fc:	f7ff fe7e 	bl	80032fc <BSP_LCD_DrawPixel>
 8003600:	e00b      	b.n	800361a <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	b29a      	uxth	r2, r3
 8003606:	88fb      	ldrh	r3, [r7, #6]
 8003608:	4413      	add	r3, r2
 800360a:	b298      	uxth	r0, r3
 800360c:	4b0d      	ldr	r3, [pc, #52]	; (8003644 <DrawChar+0x12c>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	b29a      	uxth	r2, r3
 8003612:	88bb      	ldrh	r3, [r7, #4]
 8003614:	4619      	mov	r1, r3
 8003616:	f7ff fe71 	bl	80032fc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	3301      	adds	r3, #1
 800361e:	61bb      	str	r3, [r7, #24]
 8003620:	8a3b      	ldrh	r3, [r7, #16]
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	429a      	cmp	r2, r3
 8003626:	d3d1      	bcc.n	80035cc <DrawChar+0xb4>
      } 
    }
    Ypos++;
 8003628:	88bb      	ldrh	r3, [r7, #4]
 800362a:	3301      	adds	r3, #1
 800362c:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	3301      	adds	r3, #1
 8003632:	61fb      	str	r3, [r7, #28]
 8003634:	8a7b      	ldrh	r3, [r7, #18]
 8003636:	69fa      	ldr	r2, [r7, #28]
 8003638:	429a      	cmp	r2, r3
 800363a:	d391      	bcc.n	8003560 <DrawChar+0x48>
  }
}
 800363c:	bf00      	nop
 800363e:	3720      	adds	r7, #32
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	20021b14 	.word	0x20021b14

08003648 <SetDisplayWindow>:
  * @param  Ypos: LCD Y position
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  */
static void SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003648:	b590      	push	{r4, r7, lr}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	4604      	mov	r4, r0
 8003650:	4608      	mov	r0, r1
 8003652:	4611      	mov	r1, r2
 8003654:	461a      	mov	r2, r3
 8003656:	4623      	mov	r3, r4
 8003658:	80fb      	strh	r3, [r7, #6]
 800365a:	4603      	mov	r3, r0
 800365c:	80bb      	strh	r3, [r7, #4]
 800365e:	460b      	mov	r3, r1
 8003660:	807b      	strh	r3, [r7, #2]
 8003662:	4613      	mov	r3, r2
 8003664:	803b      	strh	r3, [r7, #0]
  if(LcdDrv->SetDisplayWindow != NULL)
 8003666:	4b08      	ldr	r3, [pc, #32]	; (8003688 <SetDisplayWindow+0x40>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d007      	beq.n	8003680 <SetDisplayWindow+0x38>
  {
    LcdDrv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 8003670:	4b05      	ldr	r3, [pc, #20]	; (8003688 <SetDisplayWindow+0x40>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	69dc      	ldr	r4, [r3, #28]
 8003676:	883b      	ldrh	r3, [r7, #0]
 8003678:	887a      	ldrh	r2, [r7, #2]
 800367a:	88b9      	ldrh	r1, [r7, #4]
 800367c:	88f8      	ldrh	r0, [r7, #6]
 800367e:	47a0      	blx	r4
  }  
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	bd90      	pop	{r4, r7, pc}
 8003688:	20000138 	.word	0x20000138

0800368c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{ 
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	71fb      	strb	r3, [r7, #7]
  
  /* uSD device interface configuration */
  uSdHandle.Instance = SDIO;
 8003696:	4b21      	ldr	r3, [pc, #132]	; (800371c <BSP_SD_Init+0x90>)
 8003698:	4a21      	ldr	r2, [pc, #132]	; (8003720 <BSP_SD_Init+0x94>)
 800369a:	601a      	str	r2, [r3, #0]

  uSdHandle.Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800369c:	4b1f      	ldr	r3, [pc, #124]	; (800371c <BSP_SD_Init+0x90>)
 800369e:	2200      	movs	r2, #0
 80036a0:	605a      	str	r2, [r3, #4]
  uSdHandle.Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80036a2:	4b1e      	ldr	r3, [pc, #120]	; (800371c <BSP_SD_Init+0x90>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	609a      	str	r2, [r3, #8]
  uSdHandle.Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80036a8:	4b1c      	ldr	r3, [pc, #112]	; (800371c <BSP_SD_Init+0x90>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	60da      	str	r2, [r3, #12]
  uSdHandle.Init.BusWide             = SDIO_BUS_WIDE_1B;
 80036ae:	4b1b      	ldr	r3, [pc, #108]	; (800371c <BSP_SD_Init+0x90>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	611a      	str	r2, [r3, #16]
  uSdHandle.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 80036b4:	4b19      	ldr	r3, [pc, #100]	; (800371c <BSP_SD_Init+0x90>)
 80036b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036ba:	615a      	str	r2, [r3, #20]
  uSdHandle.Init.ClockDiv            = SDIO_TRANSFER_CLK_DIV;
 80036bc:	4b17      	ldr	r3, [pc, #92]	; (800371c <BSP_SD_Init+0x90>)
 80036be:	2200      	movs	r2, #0
 80036c0:	619a      	str	r2, [r3, #24]
  
  /* Msp SD Detect pin initialization */
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 80036c2:	2100      	movs	r1, #0
 80036c4:	4815      	ldr	r0, [pc, #84]	; (800371c <BSP_SD_Init+0x90>)
 80036c6:	f000 f971 	bl	80039ac <BSP_SD_Detect_MspInit>
  
  /* Check if SD card is present */
  if(BSP_SD_IsDetected() != SD_PRESENT)
 80036ca:	f000 f82b 	bl	8003724 <BSP_SD_IsDetected>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d001      	beq.n	80036d8 <BSP_SD_Init+0x4c>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80036d4:	2302      	movs	r3, #2
 80036d6:	e01c      	b.n	8003712 <BSP_SD_Init+0x86>
  }
  
  /* Msp SD initialization */
  BSP_SD_MspInit(&uSdHandle, NULL);
 80036d8:	2100      	movs	r1, #0
 80036da:	4810      	ldr	r0, [pc, #64]	; (800371c <BSP_SD_Init+0x90>)
 80036dc:	f000 f872 	bl	80037c4 <BSP_SD_MspInit>

  /* HAL SD initialization */
  if(HAL_SD_Init(&uSdHandle) != HAL_OK)
 80036e0:	480e      	ldr	r0, [pc, #56]	; (800371c <BSP_SD_Init+0x90>)
 80036e2:	f004 ffa5 	bl	8008630 <HAL_SD_Init>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <BSP_SD_Init+0x64>
  {
    sd_state = MSD_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	71fb      	strb	r3, [r7, #7]
  }
  
  /* Configure SD Bus width */
  if(sd_state == MSD_OK)
 80036f0:	79fb      	ldrb	r3, [r7, #7]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10c      	bne.n	8003710 <BSP_SD_Init+0x84>
  {
    /* Enable wide operation */
    if(HAL_SD_ConfigWideBusOperation(&uSdHandle, SDIO_BUS_WIDE_4B) != HAL_OK)
 80036f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80036fa:	4808      	ldr	r0, [pc, #32]	; (800371c <BSP_SD_Init+0x90>)
 80036fc:	f005 fd90 	bl	8009220 <HAL_SD_ConfigWideBusOperation>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <BSP_SD_Init+0x80>
    {
      sd_state = MSD_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	71fb      	strb	r3, [r7, #7]
 800370a:	e001      	b.n	8003710 <BSP_SD_Init+0x84>
    }
    else
    {
      sd_state = MSD_OK;
 800370c:	2300      	movs	r3, #0
 800370e:	71fb      	strb	r3, [r7, #7]
    }
  }
  
  return  sd_state;
 8003710:	79fb      	ldrb	r3, [r7, #7]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20021b20 	.word	0x20021b20
 8003720:	40012c00 	.word	0x40012c00

08003724 <BSP_SD_IsDetected>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800372a:	2301      	movs	r3, #1
 800372c:	71fb      	strb	r3, [r7, #7]
  
  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 800372e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003732:	4807      	ldr	r0, [pc, #28]	; (8003750 <BSP_SD_IsDetected+0x2c>)
 8003734:	f001 fb84 	bl	8004e40 <HAL_GPIO_ReadPin>
 8003738:	4603      	mov	r3, r0
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <BSP_SD_IsDetected+0x1e>
  {
    status = SD_NOT_PRESENT;
 800373e:	2300      	movs	r3, #0
 8003740:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8003742:	79fb      	ldrb	r3, [r7, #7]
 8003744:	b2db      	uxtb	r3, r3
}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	40021400 	.word	0x40021400

08003754 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af02      	add	r7, sp, #8
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	603b      	str	r3, [r7, #0]
  if(HAL_SD_ReadBlocks(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	68f9      	ldr	r1, [r7, #12]
 800376c:	4806      	ldr	r0, [pc, #24]	; (8003788 <BSP_SD_ReadBlocks+0x34>)
 800376e:	f004 ffef 	bl	8008750 <HAL_SD_ReadBlocks>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <BSP_SD_ReadBlocks+0x28>
  {
    return MSD_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e000      	b.n	800377e <BSP_SD_ReadBlocks+0x2a>
  }
  else
  {
    return MSD_OK;
 800377c:	2300      	movs	r3, #0
  }
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	20021b20 	.word	0x20021b20

0800378c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af02      	add	r7, sp, #8
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
 8003798:	603b      	str	r3, [r7, #0]
  if(HAL_SD_WriteBlocks(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	68f9      	ldr	r1, [r7, #12]
 80037a4:	4806      	ldr	r0, [pc, #24]	; (80037c0 <BSP_SD_WriteBlocks+0x34>)
 80037a6:	f005 f9cb 	bl	8008b40 <HAL_SD_WriteBlocks>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <BSP_SD_WriteBlocks+0x28>
  {
    return MSD_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e000      	b.n	80037b6 <BSP_SD_WriteBlocks+0x2a>
  }
  else
  {
    return MSD_OK;
 80037b4:	2300      	movs	r3, #0
  }
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20021b20 	.word	0x20021b20

080037c4 <BSP_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd: SD handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08c      	sub	sp, #48	; 0x30
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Params);

  /* Enable SDIO clock */
  __HAL_RCC_SDIO_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	61bb      	str	r3, [r7, #24]
 80037d2:	4b6f      	ldr	r3, [pc, #444]	; (8003990 <BSP_SD_MspInit+0x1cc>)
 80037d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d6:	4a6e      	ldr	r2, [pc, #440]	; (8003990 <BSP_SD_MspInit+0x1cc>)
 80037d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037dc:	6453      	str	r3, [r2, #68]	; 0x44
 80037de:	4b6c      	ldr	r3, [pc, #432]	; (8003990 <BSP_SD_MspInit+0x1cc>)
 80037e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037e6:	61bb      	str	r3, [r7, #24]
 80037e8:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable DMA2 clocks */
  __DMAx_TxRx_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	4b68      	ldr	r3, [pc, #416]	; (8003990 <BSP_SD_MspInit+0x1cc>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	4a67      	ldr	r2, [pc, #412]	; (8003990 <BSP_SD_MspInit+0x1cc>)
 80037f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037f8:	6313      	str	r3, [r2, #48]	; 0x30
 80037fa:	4b65      	ldr	r3, [pc, #404]	; (8003990 <BSP_SD_MspInit+0x1cc>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	697b      	ldr	r3, [r7, #20]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	613b      	str	r3, [r7, #16]
 800380a:	4b61      	ldr	r3, [pc, #388]	; (8003990 <BSP_SD_MspInit+0x1cc>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	4a60      	ldr	r2, [pc, #384]	; (8003990 <BSP_SD_MspInit+0x1cc>)
 8003810:	f043 0304 	orr.w	r3, r3, #4
 8003814:	6313      	str	r3, [r2, #48]	; 0x30
 8003816:	4b5e      	ldr	r3, [pc, #376]	; (8003990 <BSP_SD_MspInit+0x1cc>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	f003 0304 	and.w	r3, r3, #4
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	4b5a      	ldr	r3, [pc, #360]	; (8003990 <BSP_SD_MspInit+0x1cc>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	4a59      	ldr	r2, [pc, #356]	; (8003990 <BSP_SD_MspInit+0x1cc>)
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	6313      	str	r3, [r2, #48]	; 0x30
 8003832:	4b57      	ldr	r3, [pc, #348]	; (8003990 <BSP_SD_MspInit+0x1cc>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800383e:	2302      	movs	r3, #2
 8003840:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003842:	2301      	movs	r3, #1
 8003844:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8003846:	2303      	movs	r3, #3
 8003848:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_SDIO;
 800384a:	230c      	movs	r3, #12
 800384c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* GPIOC configuration: SD_D[0..3] and SD_clk */
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 800384e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003852:	61fb      	str	r3, [r7, #28]
   
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003854:	f107 031c 	add.w	r3, r7, #28
 8003858:	4619      	mov	r1, r3
 800385a:	484e      	ldr	r0, [pc, #312]	; (8003994 <BSP_SD_MspInit+0x1d0>)
 800385c:	f001 f95e 	bl	8004b1c <HAL_GPIO_Init>

  /* GPIOA configuration: SD cmd */
  gpio_init_structure.Pin = GPIO_PIN_6;
 8003860:	2340      	movs	r3, #64	; 0x40
 8003862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 8003864:	f107 031c 	add.w	r3, r7, #28
 8003868:	4619      	mov	r1, r3
 800386a:	484b      	ldr	r0, [pc, #300]	; (8003998 <BSP_SD_MspInit+0x1d4>)
 800386c:	f001 f956 	bl	8004b1c <HAL_GPIO_Init>

  /* NVIC configuration for SDIO interrupts */
  HAL_NVIC_SetPriority(SDIO_IRQn, 0x0E, 0x00);
 8003870:	2200      	movs	r2, #0
 8003872:	210e      	movs	r1, #14
 8003874:	2031      	movs	r0, #49	; 0x31
 8003876:	f000 fc6f 	bl	8004158 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800387a:	2031      	movs	r0, #49	; 0x31
 800387c:	f000 fc88 	bl	8004190 <HAL_NVIC_EnableIRQ>
    
  /* Configure DMA Rx parameters */
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 8003880:	4b46      	ldr	r3, [pc, #280]	; (800399c <BSP_SD_MspInit+0x1d8>)
 8003882:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003886:	605a      	str	r2, [r3, #4]
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8003888:	4b44      	ldr	r3, [pc, #272]	; (800399c <BSP_SD_MspInit+0x1d8>)
 800388a:	2200      	movs	r2, #0
 800388c:	609a      	str	r2, [r3, #8]
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 800388e:	4b43      	ldr	r3, [pc, #268]	; (800399c <BSP_SD_MspInit+0x1d8>)
 8003890:	2200      	movs	r2, #0
 8003892:	60da      	str	r2, [r3, #12]
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003894:	4b41      	ldr	r3, [pc, #260]	; (800399c <BSP_SD_MspInit+0x1d8>)
 8003896:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800389a:	611a      	str	r2, [r3, #16]
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800389c:	4b3f      	ldr	r3, [pc, #252]	; (800399c <BSP_SD_MspInit+0x1d8>)
 800389e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038a2:	615a      	str	r2, [r3, #20]
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80038a4:	4b3d      	ldr	r3, [pc, #244]	; (800399c <BSP_SD_MspInit+0x1d8>)
 80038a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038aa:	619a      	str	r2, [r3, #24]
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 80038ac:	4b3b      	ldr	r3, [pc, #236]	; (800399c <BSP_SD_MspInit+0x1d8>)
 80038ae:	2220      	movs	r2, #32
 80038b0:	61da      	str	r2, [r3, #28]
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80038b2:	4b3a      	ldr	r3, [pc, #232]	; (800399c <BSP_SD_MspInit+0x1d8>)
 80038b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80038b8:	621a      	str	r2, [r3, #32]
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 80038ba:	4b38      	ldr	r3, [pc, #224]	; (800399c <BSP_SD_MspInit+0x1d8>)
 80038bc:	2204      	movs	r2, #4
 80038be:	625a      	str	r2, [r3, #36]	; 0x24
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80038c0:	4b36      	ldr	r3, [pc, #216]	; (800399c <BSP_SD_MspInit+0x1d8>)
 80038c2:	2203      	movs	r2, #3
 80038c4:	629a      	str	r2, [r3, #40]	; 0x28
  dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 80038c6:	4b35      	ldr	r3, [pc, #212]	; (800399c <BSP_SD_MspInit+0x1d8>)
 80038c8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80038cc:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 80038ce:	4b33      	ldr	r3, [pc, #204]	; (800399c <BSP_SD_MspInit+0x1d8>)
 80038d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80038d4:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 80038d6:	4b31      	ldr	r3, [pc, #196]	; (800399c <BSP_SD_MspInit+0x1d8>)
 80038d8:	4a31      	ldr	r2, [pc, #196]	; (80039a0 <BSP_SD_MspInit+0x1dc>)
 80038da:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a2f      	ldr	r2, [pc, #188]	; (800399c <BSP_SD_MspInit+0x1d8>)
 80038e0:	641a      	str	r2, [r3, #64]	; 0x40
 80038e2:	4a2e      	ldr	r2, [pc, #184]	; (800399c <BSP_SD_MspInit+0x1d8>)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_rx_handle);
 80038e8:	482c      	ldr	r0, [pc, #176]	; (800399c <BSP_SD_MspInit+0x1d8>)
 80038ea:	f000 ff2f 	bl	800474c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_rx_handle);
 80038ee:	482b      	ldr	r0, [pc, #172]	; (800399c <BSP_SD_MspInit+0x1d8>)
 80038f0:	f000 fe7e 	bl	80045f0 <HAL_DMA_Init>
  
  /* Configure DMA Tx parameters */
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 80038f4:	4b2b      	ldr	r3, [pc, #172]	; (80039a4 <BSP_SD_MspInit+0x1e0>)
 80038f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038fa:	605a      	str	r2, [r3, #4]
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80038fc:	4b29      	ldr	r3, [pc, #164]	; (80039a4 <BSP_SD_MspInit+0x1e0>)
 80038fe:	2240      	movs	r2, #64	; 0x40
 8003900:	609a      	str	r2, [r3, #8]
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003902:	4b28      	ldr	r3, [pc, #160]	; (80039a4 <BSP_SD_MspInit+0x1e0>)
 8003904:	2200      	movs	r2, #0
 8003906:	60da      	str	r2, [r3, #12]
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003908:	4b26      	ldr	r3, [pc, #152]	; (80039a4 <BSP_SD_MspInit+0x1e0>)
 800390a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800390e:	611a      	str	r2, [r3, #16]
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003910:	4b24      	ldr	r3, [pc, #144]	; (80039a4 <BSP_SD_MspInit+0x1e0>)
 8003912:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003916:	615a      	str	r2, [r3, #20]
  dma_tx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003918:	4b22      	ldr	r3, [pc, #136]	; (80039a4 <BSP_SD_MspInit+0x1e0>)
 800391a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800391e:	619a      	str	r2, [r3, #24]
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 8003920:	4b20      	ldr	r3, [pc, #128]	; (80039a4 <BSP_SD_MspInit+0x1e0>)
 8003922:	2220      	movs	r2, #32
 8003924:	61da      	str	r2, [r3, #28]
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8003926:	4b1f      	ldr	r3, [pc, #124]	; (80039a4 <BSP_SD_MspInit+0x1e0>)
 8003928:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800392c:	621a      	str	r2, [r3, #32]
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 800392e:	4b1d      	ldr	r3, [pc, #116]	; (80039a4 <BSP_SD_MspInit+0x1e0>)
 8003930:	2204      	movs	r2, #4
 8003932:	625a      	str	r2, [r3, #36]	; 0x24
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003934:	4b1b      	ldr	r3, [pc, #108]	; (80039a4 <BSP_SD_MspInit+0x1e0>)
 8003936:	2203      	movs	r2, #3
 8003938:	629a      	str	r2, [r3, #40]	; 0x28
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 800393a:	4b1a      	ldr	r3, [pc, #104]	; (80039a4 <BSP_SD_MspInit+0x1e0>)
 800393c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003940:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8003942:	4b18      	ldr	r3, [pc, #96]	; (80039a4 <BSP_SD_MspInit+0x1e0>)
 8003944:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003948:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 800394a:	4b16      	ldr	r3, [pc, #88]	; (80039a4 <BSP_SD_MspInit+0x1e0>)
 800394c:	4a16      	ldr	r2, [pc, #88]	; (80039a8 <BSP_SD_MspInit+0x1e4>)
 800394e:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a14      	ldr	r2, [pc, #80]	; (80039a4 <BSP_SD_MspInit+0x1e0>)
 8003954:	63da      	str	r2, [r3, #60]	; 0x3c
 8003956:	4a13      	ldr	r2, [pc, #76]	; (80039a4 <BSP_SD_MspInit+0x1e0>)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_tx_handle);
 800395c:	4811      	ldr	r0, [pc, #68]	; (80039a4 <BSP_SD_MspInit+0x1e0>)
 800395e:	f000 fef5 	bl	800474c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_tx_handle); 
 8003962:	4810      	ldr	r0, [pc, #64]	; (80039a4 <BSP_SD_MspInit+0x1e0>)
 8003964:	f000 fe44 	bl	80045f0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0F, 0x00);
 8003968:	2200      	movs	r2, #0
 800396a:	210f      	movs	r1, #15
 800396c:	203b      	movs	r0, #59	; 0x3b
 800396e:	f000 fbf3 	bl	8004158 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 8003972:	203b      	movs	r0, #59	; 0x3b
 8003974:	f000 fc0c 	bl	8004190 <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 0x0F, 0x00);
 8003978:	2200      	movs	r2, #0
 800397a:	210f      	movs	r1, #15
 800397c:	2045      	movs	r0, #69	; 0x45
 800397e:	f000 fbeb 	bl	8004158 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 8003982:	2045      	movs	r0, #69	; 0x45
 8003984:	f000 fc04 	bl	8004190 <HAL_NVIC_EnableIRQ>
}
 8003988:	bf00      	nop
 800398a:	3730      	adds	r7, #48	; 0x30
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40023800 	.word	0x40023800
 8003994:	40020800 	.word	0x40020800
 8003998:	40020000 	.word	0x40020000
 800399c:	2000013c 	.word	0x2000013c
 80039a0:	40026458 	.word	0x40026458
 80039a4:	2000019c 	.word	0x2000019c
 80039a8:	400264a0 	.word	0x400264a0

080039ac <BSP_SD_Detect_MspInit>:
  * @brief  Initializes the SD Detect pin MSP.
  * @param  hsd: SD handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Params);
  
  SD_DETECT_GPIO_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	60bb      	str	r3, [r7, #8]
 80039ba:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <BSP_SD_Detect_MspInit+0x4c>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	4a0e      	ldr	r2, [pc, #56]	; (80039f8 <BSP_SD_Detect_MspInit+0x4c>)
 80039c0:	f043 0320 	orr.w	r3, r3, #32
 80039c4:	6313      	str	r3, [r2, #48]	; 0x30
 80039c6:	4b0c      	ldr	r3, [pc, #48]	; (80039f8 <BSP_SD_Detect_MspInit+0x4c>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	60bb      	str	r3, [r7, #8]
 80039d0:	68bb      	ldr	r3, [r7, #8]

  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin       = SD_DETECT_PIN;
 80039d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039d6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80039d8:	2300      	movs	r3, #0
 80039da:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80039dc:	2301      	movs	r3, #1
 80039de:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80039e0:	2303      	movs	r3, #3
 80039e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 80039e4:	f107 030c 	add.w	r3, r7, #12
 80039e8:	4619      	mov	r1, r3
 80039ea:	4804      	ldr	r0, [pc, #16]	; (80039fc <BSP_SD_Detect_MspInit+0x50>)
 80039ec:	f001 f896 	bl	8004b1c <HAL_GPIO_Init>
}
 80039f0:	bf00      	nop
 80039f2:	3720      	adds	r7, #32
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40023800 	.word	0x40023800
 80039fc:	40021400 	.word	0x40021400

08003a00 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  return((HAL_SD_GetCardState(&uSdHandle) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8003a04:	4805      	ldr	r0, [pc, #20]	; (8003a1c <BSP_SD_GetCardState+0x1c>)
 8003a06:	f005 fc87 	bl	8009318 <HAL_SD_GetCardState>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	bf14      	ite	ne
 8003a10:	2301      	movne	r3, #1
 8003a12:	2300      	moveq	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	20021b20 	.word	0x20021b20

08003a20 <BSP_SD_GetCardInfo>:
/**
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	4803      	ldr	r0, [pc, #12]	; (8003a38 <BSP_SD_GetCardInfo+0x18>)
 8003a2c:	f005 fbcc 	bl	80091c8 <HAL_SD_GetCardInfo>
}
 8003a30:	bf00      	nop
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	20021b20 	.word	0x20021b20

08003a3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a40:	4b0e      	ldr	r3, [pc, #56]	; (8003a7c <HAL_Init+0x40>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a0d      	ldr	r2, [pc, #52]	; (8003a7c <HAL_Init+0x40>)
 8003a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <HAL_Init+0x40>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a0a      	ldr	r2, [pc, #40]	; (8003a7c <HAL_Init+0x40>)
 8003a52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a58:	4b08      	ldr	r3, [pc, #32]	; (8003a7c <HAL_Init+0x40>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a07      	ldr	r2, [pc, #28]	; (8003a7c <HAL_Init+0x40>)
 8003a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a64:	2003      	movs	r0, #3
 8003a66:	f000 fb6c 	bl	8004142 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	f7fe fbbe 	bl	80021ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a70:	f7fd fe46 	bl	8001700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40023c00 	.word	0x40023c00

08003a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a84:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <HAL_IncTick+0x20>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <HAL_IncTick+0x24>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4413      	add	r3, r2
 8003a90:	4a04      	ldr	r2, [pc, #16]	; (8003aa4 <HAL_IncTick+0x24>)
 8003a92:	6013      	str	r3, [r2, #0]
}
 8003a94:	bf00      	nop
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	20000064 	.word	0x20000064
 8003aa4:	20021ba4 	.word	0x20021ba4

08003aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8003aac:	4b03      	ldr	r3, [pc, #12]	; (8003abc <HAL_GetTick+0x14>)
 8003aae:	681b      	ldr	r3, [r3, #0]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	20021ba4 	.word	0x20021ba4

08003ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ac8:	f7ff ffee 	bl	8003aa8 <HAL_GetTick>
 8003acc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad8:	d005      	beq.n	8003ae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ada:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <HAL_Delay+0x40>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ae6:	bf00      	nop
 8003ae8:	f7ff ffde 	bl	8003aa8 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d8f7      	bhi.n	8003ae8 <HAL_Delay+0x28>
  {
  }
}
 8003af8:	bf00      	nop
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	20000064 	.word	0x20000064

08003b04 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e033      	b.n	8003b82 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d109      	bne.n	8003b36 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7fd fe14 	bl	8001750 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f003 0310 	and.w	r3, r3, #16
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d118      	bne.n	8003b74 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b4a:	f023 0302 	bic.w	r3, r3, #2
 8003b4e:	f043 0202 	orr.w	r2, r3, #2
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f94a 	bl	8003df0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	f023 0303 	bic.w	r3, r3, #3
 8003b6a:	f043 0201 	orr.w	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	641a      	str	r2, [r3, #64]	; 0x40
 8003b72:	e001      	b.n	8003b78 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
	...

08003b8c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d101      	bne.n	8003ba8 <HAL_ADC_ConfigChannel+0x1c>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	e113      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x244>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b09      	cmp	r3, #9
 8003bb6:	d925      	bls.n	8003c04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68d9      	ldr	r1, [r3, #12]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	4413      	add	r3, r2
 8003bcc:	3b1e      	subs	r3, #30
 8003bce:	2207      	movs	r2, #7
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	43da      	mvns	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	400a      	ands	r2, r1
 8003bdc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68d9      	ldr	r1, [r3, #12]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	4618      	mov	r0, r3
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	4403      	add	r3, r0
 8003bf6:	3b1e      	subs	r3, #30
 8003bf8:	409a      	lsls	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	60da      	str	r2, [r3, #12]
 8003c02:	e022      	b.n	8003c4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6919      	ldr	r1, [r3, #16]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	461a      	mov	r2, r3
 8003c12:	4613      	mov	r3, r2
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	4413      	add	r3, r2
 8003c18:	2207      	movs	r2, #7
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	43da      	mvns	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	400a      	ands	r2, r1
 8003c26:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6919      	ldr	r1, [r3, #16]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	4618      	mov	r0, r3
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	4403      	add	r3, r0
 8003c40:	409a      	lsls	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b06      	cmp	r3, #6
 8003c50:	d824      	bhi.n	8003c9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	3b05      	subs	r3, #5
 8003c64:	221f      	movs	r2, #31
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	43da      	mvns	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	400a      	ands	r2, r1
 8003c72:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	4618      	mov	r0, r3
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	4613      	mov	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4413      	add	r3, r2
 8003c8c:	3b05      	subs	r3, #5
 8003c8e:	fa00 f203 	lsl.w	r2, r0, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	635a      	str	r2, [r3, #52]	; 0x34
 8003c9a:	e04c      	b.n	8003d36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2b0c      	cmp	r3, #12
 8003ca2:	d824      	bhi.n	8003cee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	3b23      	subs	r3, #35	; 0x23
 8003cb6:	221f      	movs	r2, #31
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	43da      	mvns	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	400a      	ands	r2, r1
 8003cc4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	3b23      	subs	r3, #35	; 0x23
 8003ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	631a      	str	r2, [r3, #48]	; 0x30
 8003cec:	e023      	b.n	8003d36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	3b41      	subs	r3, #65	; 0x41
 8003d00:	221f      	movs	r2, #31
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43da      	mvns	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	400a      	ands	r2, r1
 8003d0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	4613      	mov	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	3b41      	subs	r3, #65	; 0x41
 8003d2a:	fa00 f203 	lsl.w	r2, r0, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d36:	4b29      	ldr	r3, [pc, #164]	; (8003ddc <HAL_ADC_ConfigChannel+0x250>)
 8003d38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a28      	ldr	r2, [pc, #160]	; (8003de0 <HAL_ADC_ConfigChannel+0x254>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d10f      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x1d8>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b12      	cmp	r3, #18
 8003d4a:	d10b      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a1d      	ldr	r2, [pc, #116]	; (8003de0 <HAL_ADC_ConfigChannel+0x254>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d12b      	bne.n	8003dc6 <HAL_ADC_ConfigChannel+0x23a>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a1c      	ldr	r2, [pc, #112]	; (8003de4 <HAL_ADC_ConfigChannel+0x258>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d003      	beq.n	8003d80 <HAL_ADC_ConfigChannel+0x1f4>
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b11      	cmp	r3, #17
 8003d7e:	d122      	bne.n	8003dc6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a11      	ldr	r2, [pc, #68]	; (8003de4 <HAL_ADC_ConfigChannel+0x258>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d111      	bne.n	8003dc6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003da2:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <HAL_ADC_ConfigChannel+0x25c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a11      	ldr	r2, [pc, #68]	; (8003dec <HAL_ADC_ConfigChannel+0x260>)
 8003da8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dac:	0c9a      	lsrs	r2, r3, #18
 8003dae:	4613      	mov	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003db8:	e002      	b.n	8003dc0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1f9      	bne.n	8003dba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	40012300 	.word	0x40012300
 8003de0:	40012000 	.word	0x40012000
 8003de4:	10000012 	.word	0x10000012
 8003de8:	20000004 	.word	0x20000004
 8003dec:	431bde83 	.word	0x431bde83

08003df0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003df8:	4b79      	ldr	r3, [pc, #484]	; (8003fe0 <ADC_Init+0x1f0>)
 8003dfa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	431a      	orrs	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6859      	ldr	r1, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	021a      	lsls	r2, r3, #8
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003e48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6859      	ldr	r1, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6899      	ldr	r1, [r3, #8]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e82:	4a58      	ldr	r2, [pc, #352]	; (8003fe4 <ADC_Init+0x1f4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d022      	beq.n	8003ece <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6899      	ldr	r1, [r3, #8]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003eb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6899      	ldr	r1, [r3, #8]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	609a      	str	r2, [r3, #8]
 8003ecc:	e00f      	b.n	8003eee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003edc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003eec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0202 	bic.w	r2, r2, #2
 8003efc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6899      	ldr	r1, [r3, #8]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	7e1b      	ldrb	r3, [r3, #24]
 8003f08:	005a      	lsls	r2, r3, #1
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d01b      	beq.n	8003f54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f2a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003f3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6859      	ldr	r1, [r3, #4]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	3b01      	subs	r3, #1
 8003f48:	035a      	lsls	r2, r3, #13
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	605a      	str	r2, [r3, #4]
 8003f52:	e007      	b.n	8003f64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f62:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003f72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	051a      	lsls	r2, r3, #20
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6899      	ldr	r1, [r3, #8]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003fa6:	025a      	lsls	r2, r3, #9
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6899      	ldr	r1, [r3, #8]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	029a      	lsls	r2, r3, #10
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	609a      	str	r2, [r3, #8]
}
 8003fd4:	bf00      	nop
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	40012300 	.word	0x40012300
 8003fe4:	0f000001 	.word	0x0f000001

08003fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ff8:	4b0c      	ldr	r3, [pc, #48]	; (800402c <__NVIC_SetPriorityGrouping+0x44>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004004:	4013      	ands	r3, r2
 8004006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800401a:	4a04      	ldr	r2, [pc, #16]	; (800402c <__NVIC_SetPriorityGrouping+0x44>)
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	60d3      	str	r3, [r2, #12]
}
 8004020:	bf00      	nop
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	e000ed00 	.word	0xe000ed00

08004030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004034:	4b04      	ldr	r3, [pc, #16]	; (8004048 <__NVIC_GetPriorityGrouping+0x18>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	0a1b      	lsrs	r3, r3, #8
 800403a:	f003 0307 	and.w	r3, r3, #7
}
 800403e:	4618      	mov	r0, r3
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	e000ed00 	.word	0xe000ed00

0800404c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	4603      	mov	r3, r0
 8004054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800405a:	2b00      	cmp	r3, #0
 800405c:	db0b      	blt.n	8004076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800405e:	79fb      	ldrb	r3, [r7, #7]
 8004060:	f003 021f 	and.w	r2, r3, #31
 8004064:	4907      	ldr	r1, [pc, #28]	; (8004084 <__NVIC_EnableIRQ+0x38>)
 8004066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	2001      	movs	r0, #1
 800406e:	fa00 f202 	lsl.w	r2, r0, r2
 8004072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	e000e100 	.word	0xe000e100

08004088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	4603      	mov	r3, r0
 8004090:	6039      	str	r1, [r7, #0]
 8004092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004098:	2b00      	cmp	r3, #0
 800409a:	db0a      	blt.n	80040b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	490c      	ldr	r1, [pc, #48]	; (80040d4 <__NVIC_SetPriority+0x4c>)
 80040a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a6:	0112      	lsls	r2, r2, #4
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	440b      	add	r3, r1
 80040ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040b0:	e00a      	b.n	80040c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	4908      	ldr	r1, [pc, #32]	; (80040d8 <__NVIC_SetPriority+0x50>)
 80040b8:	79fb      	ldrb	r3, [r7, #7]
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	3b04      	subs	r3, #4
 80040c0:	0112      	lsls	r2, r2, #4
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	440b      	add	r3, r1
 80040c6:	761a      	strb	r2, [r3, #24]
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	e000e100 	.word	0xe000e100
 80040d8:	e000ed00 	.word	0xe000ed00

080040dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040dc:	b480      	push	{r7}
 80040de:	b089      	sub	sp, #36	; 0x24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	f1c3 0307 	rsb	r3, r3, #7
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	bf28      	it	cs
 80040fa:	2304      	movcs	r3, #4
 80040fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	3304      	adds	r3, #4
 8004102:	2b06      	cmp	r3, #6
 8004104:	d902      	bls.n	800410c <NVIC_EncodePriority+0x30>
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	3b03      	subs	r3, #3
 800410a:	e000      	b.n	800410e <NVIC_EncodePriority+0x32>
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004110:	f04f 32ff 	mov.w	r2, #4294967295
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43da      	mvns	r2, r3
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	401a      	ands	r2, r3
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004124:	f04f 31ff 	mov.w	r1, #4294967295
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	fa01 f303 	lsl.w	r3, r1, r3
 800412e:	43d9      	mvns	r1, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004134:	4313      	orrs	r3, r2
         );
}
 8004136:	4618      	mov	r0, r3
 8004138:	3724      	adds	r7, #36	; 0x24
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b082      	sub	sp, #8
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7ff ff4c 	bl	8003fe8 <__NVIC_SetPriorityGrouping>
}
 8004150:	bf00      	nop
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004166:	2300      	movs	r3, #0
 8004168:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800416a:	f7ff ff61 	bl	8004030 <__NVIC_GetPriorityGrouping>
 800416e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	68b9      	ldr	r1, [r7, #8]
 8004174:	6978      	ldr	r0, [r7, #20]
 8004176:	f7ff ffb1 	bl	80040dc <NVIC_EncodePriority>
 800417a:	4602      	mov	r2, r0
 800417c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004180:	4611      	mov	r1, r2
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff ff80 	bl	8004088 <__NVIC_SetPriority>
}
 8004188:	bf00      	nop
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	4603      	mov	r3, r0
 8004198:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800419a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff ff54 	bl	800404c <__NVIC_EnableIRQ>
}
 80041a4:	bf00      	nop
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e014      	b.n	80041e8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	791b      	ldrb	r3, [r3, #4]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d105      	bne.n	80041d4 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7fd fb3a 	bl	8001848 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004206:	d118      	bne.n	800423a <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2204      	movs	r2, #4
 800420c:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f043 0201 	orr.w	r2, r3, #1
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004222:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004232:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f825 	bl	8004284 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004240:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004248:	d118      	bne.n	800427c <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2204      	movs	r2, #4
 800424e:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	f043 0202 	orr.w	r2, r3, #2
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004264:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004274:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f85b 	bl	8004332 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 800427c:	bf00      	nop
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	2300      	movs	r3, #0
 80042aa:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	795b      	ldrb	r3, [r3, #5]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d101      	bne.n	80042b8 <HAL_DAC_ConfigChannel+0x20>
 80042b4:	2302      	movs	r3, #2
 80042b6:	e036      	b.n	8004326 <HAL_DAC_ConfigChannel+0x8e>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2201      	movs	r2, #1
 80042bc:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2202      	movs	r2, #2
 80042c2:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80042cc:	f640 72fe 	movw	r2, #4094	; 0xffe
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	43db      	mvns	r3, r3
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	4013      	ands	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	fa02 f303 	lsl.w	r3, r2, r3
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6819      	ldr	r1, [r3, #0]
 8004306:	22c0      	movs	r2, #192	; 0xc0
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	43da      	mvns	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	400a      	ands	r2, r1
 8004316:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2201      	movs	r2, #1
 800431c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	371c      	adds	r7, #28
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
	...

08004348 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e0cf      	b.n	80044fa <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a69      	ldr	r2, [pc, #420]	; (8004504 <HAL_DFSDM_ChannelInit+0x1bc>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d00e      	beq.n	8004382 <HAL_DFSDM_ChannelInit+0x3a>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a67      	ldr	r2, [pc, #412]	; (8004508 <HAL_DFSDM_ChannelInit+0x1c0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d009      	beq.n	8004382 <HAL_DFSDM_ChannelInit+0x3a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a66      	ldr	r2, [pc, #408]	; (800450c <HAL_DFSDM_ChannelInit+0x1c4>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d004      	beq.n	8004382 <HAL_DFSDM_ChannelInit+0x3a>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a64      	ldr	r2, [pc, #400]	; (8004510 <HAL_DFSDM_ChannelInit+0x1c8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d106      	bne.n	8004390 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8004382:	4b64      	ldr	r3, [pc, #400]	; (8004514 <HAL_DFSDM_ChannelInit+0x1cc>)
 8004384:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 8004386:	4b64      	ldr	r3, [pc, #400]	; (8004518 <HAL_DFSDM_ChannelInit+0x1d0>)
 8004388:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 800438a:	4b5e      	ldr	r3, [pc, #376]	; (8004504 <HAL_DFSDM_ChannelInit+0x1bc>)
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	e005      	b.n	800439c <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8004390:	4b62      	ldr	r3, [pc, #392]	; (800451c <HAL_DFSDM_ChannelInit+0x1d4>)
 8004392:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8004394:	4b62      	ldr	r3, [pc, #392]	; (8004520 <HAL_DFSDM_ChannelInit+0x1d8>)
 8004396:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8004398:	4b62      	ldr	r3, [pc, #392]	; (8004524 <HAL_DFSDM_ChannelInit+0x1dc>)
 800439a:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 f8c1 	bl	8004528 <DFSDM_GetChannelFromInstance>
 80043a6:	4603      	mov	r3, r0
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4413      	add	r3, r2
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e0a0      	b.n	80044fa <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7fd fa91 	bl	80018e0 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d125      	bne.n	800441c <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	431a      	orrs	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	791b      	ldrb	r3, [r3, #4]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d108      	bne.n	8004410 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	3b01      	subs	r3, #1
 8004408:	041b      	lsls	r3, r3, #16
 800440a:	431a      	orrs	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800442a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6819      	ldr	r1, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800443a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8004440:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 020f 	bic.w	r2, r2, #15
 8004458:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6819      	ldr	r1, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8004468:	431a      	orrs	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004480:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6899      	ldr	r1, [r3, #8]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004490:	3b01      	subs	r3, #1
 8004492:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f002 0207 	and.w	r2, r2, #7
 80044ac:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6859      	ldr	r1, [r3, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044be:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044d8:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 f81e 	bl	8004528 <DFSDM_GetChannelFromInstance>
 80044ec:	4603      	mov	r3, r0
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	4413      	add	r3, r2
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40016000 	.word	0x40016000
 8004508:	40016020 	.word	0x40016020
 800450c:	40016040 	.word	0x40016040
 8004510:	40016060 	.word	0x40016060
 8004514:	200001fc 	.word	0x200001fc
 8004518:	20000200 	.word	0x20000200
 800451c:	20000210 	.word	0x20000210
 8004520:	20000214 	.word	0x20000214
 8004524:	40016400 	.word	0x40016400

08004528 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a24      	ldr	r2, [pc, #144]	; (80045c4 <DFSDM_GetChannelFromInstance+0x9c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d003      	beq.n	8004540 <DFSDM_GetChannelFromInstance+0x18>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a23      	ldr	r2, [pc, #140]	; (80045c8 <DFSDM_GetChannelFromInstance+0xa0>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d102      	bne.n	8004546 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	e037      	b.n	80045b6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a20      	ldr	r2, [pc, #128]	; (80045cc <DFSDM_GetChannelFromInstance+0xa4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d003      	beq.n	8004556 <DFSDM_GetChannelFromInstance+0x2e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a1f      	ldr	r2, [pc, #124]	; (80045d0 <DFSDM_GetChannelFromInstance+0xa8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d102      	bne.n	800455c <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8004556:	2301      	movs	r3, #1
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	e02c      	b.n	80045b6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a1d      	ldr	r2, [pc, #116]	; (80045d4 <DFSDM_GetChannelFromInstance+0xac>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d003      	beq.n	800456c <DFSDM_GetChannelFromInstance+0x44>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a1c      	ldr	r2, [pc, #112]	; (80045d8 <DFSDM_GetChannelFromInstance+0xb0>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d102      	bne.n	8004572 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 800456c:	2302      	movs	r3, #2
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	e021      	b.n	80045b6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a19      	ldr	r2, [pc, #100]	; (80045dc <DFSDM_GetChannelFromInstance+0xb4>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d003      	beq.n	8004582 <DFSDM_GetChannelFromInstance+0x5a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a18      	ldr	r2, [pc, #96]	; (80045e0 <DFSDM_GetChannelFromInstance+0xb8>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d102      	bne.n	8004588 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8004582:	2303      	movs	r3, #3
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	e016      	b.n	80045b6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a16      	ldr	r2, [pc, #88]	; (80045e4 <DFSDM_GetChannelFromInstance+0xbc>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d102      	bne.n	8004596 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8004590:	2304      	movs	r3, #4
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	e00f      	b.n	80045b6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a13      	ldr	r2, [pc, #76]	; (80045e8 <DFSDM_GetChannelFromInstance+0xc0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d102      	bne.n	80045a4 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 800459e:	2305      	movs	r3, #5
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	e008      	b.n	80045b6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a11      	ldr	r2, [pc, #68]	; (80045ec <DFSDM_GetChannelFromInstance+0xc4>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d102      	bne.n	80045b2 <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 80045ac:	2306      	movs	r3, #6
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	e001      	b.n	80045b6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 80045b2:	2307      	movs	r3, #7
 80045b4:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 80045b6:	68fb      	ldr	r3, [r7, #12]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	40016000 	.word	0x40016000
 80045c8:	40016400 	.word	0x40016400
 80045cc:	40016020 	.word	0x40016020
 80045d0:	40016420 	.word	0x40016420
 80045d4:	40016040 	.word	0x40016040
 80045d8:	40016440 	.word	0x40016440
 80045dc:	40016060 	.word	0x40016060
 80045e0:	40016460 	.word	0x40016460
 80045e4:	40016480 	.word	0x40016480
 80045e8:	400164a0 	.word	0x400164a0
 80045ec:	400164c0 	.word	0x400164c0

080045f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80045fc:	f7ff fa54 	bl	8003aa8 <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e099      	b.n	8004740 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 0201 	bic.w	r2, r2, #1
 800462a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800462c:	e00f      	b.n	800464e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800462e:	f7ff fa3b 	bl	8003aa8 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b05      	cmp	r3, #5
 800463a:	d908      	bls.n	800464e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2220      	movs	r2, #32
 8004640:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2203      	movs	r2, #3
 8004646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e078      	b.n	8004740 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e8      	bne.n	800462e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	4b38      	ldr	r3, [pc, #224]	; (8004748 <HAL_DMA_Init+0x158>)
 8004668:	4013      	ands	r3, r2
 800466a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800467a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004686:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004692:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	4313      	orrs	r3, r2
 800469e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d107      	bne.n	80046b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b0:	4313      	orrs	r3, r2
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f023 0307 	bic.w	r3, r3, #7
 80046ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d117      	bne.n	8004712 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00e      	beq.n	8004712 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f8bd 	bl	8004874 <DMA_CheckFifoParam>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d008      	beq.n	8004712 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2240      	movs	r2, #64	; 0x40
 8004704:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800470e:	2301      	movs	r3, #1
 8004710:	e016      	b.n	8004740 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f874 	bl	8004808 <DMA_CalcBaseAndBitshift>
 8004720:	4603      	mov	r3, r0
 8004722:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004728:	223f      	movs	r2, #63	; 0x3f
 800472a:	409a      	lsls	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	e010803f 	.word	0xe010803f

0800474c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e050      	b.n	8004800 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d101      	bne.n	800476e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800476a:	2302      	movs	r3, #2
 800476c:	e048      	b.n	8004800 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0201 	bic.w	r2, r2, #1
 800477c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2200      	movs	r2, #0
 8004784:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2200      	movs	r2, #0
 800478c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2200      	movs	r2, #0
 8004794:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2200      	movs	r2, #0
 800479c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2200      	movs	r2, #0
 80047a4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2221      	movs	r2, #33	; 0x21
 80047ac:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f82a 	bl	8004808 <DMA_CalcBaseAndBitshift>
 80047b4:	4603      	mov	r3, r0
 80047b6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e0:	223f      	movs	r2, #63	; 0x3f
 80047e2:	409a      	lsls	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	b2db      	uxtb	r3, r3
 8004816:	3b10      	subs	r3, #16
 8004818:	4a14      	ldr	r2, [pc, #80]	; (800486c <DMA_CalcBaseAndBitshift+0x64>)
 800481a:	fba2 2303 	umull	r2, r3, r2, r3
 800481e:	091b      	lsrs	r3, r3, #4
 8004820:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004822:	4a13      	ldr	r2, [pc, #76]	; (8004870 <DMA_CalcBaseAndBitshift+0x68>)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4413      	add	r3, r2
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2b03      	cmp	r3, #3
 8004834:	d909      	bls.n	800484a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800483e:	f023 0303 	bic.w	r3, r3, #3
 8004842:	1d1a      	adds	r2, r3, #4
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	659a      	str	r2, [r3, #88]	; 0x58
 8004848:	e007      	b.n	800485a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004852:	f023 0303 	bic.w	r3, r3, #3
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	aaaaaaab 	.word	0xaaaaaaab
 8004870:	08017618 	.word	0x08017618

08004874 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800487c:	2300      	movs	r3, #0
 800487e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004884:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d11f      	bne.n	80048ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2b03      	cmp	r3, #3
 8004892:	d855      	bhi.n	8004940 <DMA_CheckFifoParam+0xcc>
 8004894:	a201      	add	r2, pc, #4	; (adr r2, 800489c <DMA_CheckFifoParam+0x28>)
 8004896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489a:	bf00      	nop
 800489c:	080048ad 	.word	0x080048ad
 80048a0:	080048bf 	.word	0x080048bf
 80048a4:	080048ad 	.word	0x080048ad
 80048a8:	08004941 	.word	0x08004941
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d045      	beq.n	8004944 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048bc:	e042      	b.n	8004944 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048c6:	d13f      	bne.n	8004948 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048cc:	e03c      	b.n	8004948 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048d6:	d121      	bne.n	800491c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	2b03      	cmp	r3, #3
 80048dc:	d836      	bhi.n	800494c <DMA_CheckFifoParam+0xd8>
 80048de:	a201      	add	r2, pc, #4	; (adr r2, 80048e4 <DMA_CheckFifoParam+0x70>)
 80048e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e4:	080048f5 	.word	0x080048f5
 80048e8:	080048fb 	.word	0x080048fb
 80048ec:	080048f5 	.word	0x080048f5
 80048f0:	0800490d 	.word	0x0800490d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	73fb      	strb	r3, [r7, #15]
      break;
 80048f8:	e02f      	b.n	800495a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d024      	beq.n	8004950 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800490a:	e021      	b.n	8004950 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004914:	d11e      	bne.n	8004954 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800491a:	e01b      	b.n	8004954 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d902      	bls.n	8004928 <DMA_CheckFifoParam+0xb4>
 8004922:	2b03      	cmp	r3, #3
 8004924:	d003      	beq.n	800492e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004926:	e018      	b.n	800495a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	73fb      	strb	r3, [r7, #15]
      break;
 800492c:	e015      	b.n	800495a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004932:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00e      	beq.n	8004958 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	73fb      	strb	r3, [r7, #15]
      break;
 800493e:	e00b      	b.n	8004958 <DMA_CheckFifoParam+0xe4>
      break;
 8004940:	bf00      	nop
 8004942:	e00a      	b.n	800495a <DMA_CheckFifoParam+0xe6>
      break;
 8004944:	bf00      	nop
 8004946:	e008      	b.n	800495a <DMA_CheckFifoParam+0xe6>
      break;
 8004948:	bf00      	nop
 800494a:	e006      	b.n	800495a <DMA_CheckFifoParam+0xe6>
      break;
 800494c:	bf00      	nop
 800494e:	e004      	b.n	800495a <DMA_CheckFifoParam+0xe6>
      break;
 8004950:	bf00      	nop
 8004952:	e002      	b.n	800495a <DMA_CheckFifoParam+0xe6>
      break;   
 8004954:	bf00      	nop
 8004956:	e000      	b.n	800495a <DMA_CheckFifoParam+0xe6>
      break;
 8004958:	bf00      	nop
    }
  } 
  
  return status; 
 800495a:	7bfb      	ldrb	r3, [r7, #15]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e081      	b.n	8004a7e <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d106      	bne.n	8004994 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7fd f8b8 	bl	8001b04 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2224      	movs	r2, #36	; 0x24
 8004998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0201 	bic.w	r2, r2, #1
 80049aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049c8:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d107      	bne.n	80049e2 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049de:	609a      	str	r2, [r3, #8]
 80049e0:	e006      	b.n	80049f0 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689a      	ldr	r2, [r3, #8]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80049ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d104      	bne.n	8004a02 <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6812      	ldr	r2, [r2, #0]
 8004a0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a14:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a24:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691a      	ldr	r2, [r3, #16]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	ea42 0103 	orr.w	r1, r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	021a      	lsls	r2, r3, #8
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	69d9      	ldr	r1, [r3, #28]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a1a      	ldr	r2, [r3, #32]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0201 	orr.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b20      	cmp	r3, #32
 8004a9a:	d138      	bne.n	8004b0e <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	e032      	b.n	8004b10 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2224      	movs	r2, #36	; 0x24
 8004ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0201 	bic.w	r2, r2, #1
 8004ac8:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ad8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6819      	ldr	r1, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f042 0201 	orr.w	r2, r2, #1
 8004af8:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e000      	b.n	8004b10 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b0e:	2302      	movs	r3, #2
  }
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b089      	sub	sp, #36	; 0x24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b32:	2300      	movs	r3, #0
 8004b34:	61fb      	str	r3, [r7, #28]
 8004b36:	e165      	b.n	8004e04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b38:	2201      	movs	r2, #1
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	f040 8154 	bne.w	8004dfe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d00b      	beq.n	8004b76 <HAL_GPIO_Init+0x5a>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d007      	beq.n	8004b76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b6a:	2b11      	cmp	r3, #17
 8004b6c:	d003      	beq.n	8004b76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b12      	cmp	r3, #18
 8004b74:	d130      	bne.n	8004bd8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	2203      	movs	r2, #3
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	43db      	mvns	r3, r3
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bac:	2201      	movs	r2, #1
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	091b      	lsrs	r3, r3, #4
 8004bc2:	f003 0201 	and.w	r2, r3, #1
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	2203      	movs	r2, #3
 8004be4:	fa02 f303 	lsl.w	r3, r2, r3
 8004be8:	43db      	mvns	r3, r3
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	4013      	ands	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d003      	beq.n	8004c18 <HAL_GPIO_Init+0xfc>
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b12      	cmp	r3, #18
 8004c16:	d123      	bne.n	8004c60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	08da      	lsrs	r2, r3, #3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3208      	adds	r2, #8
 8004c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	220f      	movs	r2, #15
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	43db      	mvns	r3, r3
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	691a      	ldr	r2, [r3, #16]
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	f003 0307 	and.w	r3, r3, #7
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	08da      	lsrs	r2, r3, #3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	3208      	adds	r2, #8
 8004c5a:	69b9      	ldr	r1, [r7, #24]
 8004c5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	2203      	movs	r2, #3
 8004c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c70:	43db      	mvns	r3, r3
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	4013      	ands	r3, r2
 8004c76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f003 0203 	and.w	r2, r3, #3
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	fa02 f303 	lsl.w	r3, r2, r3
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 80ae 	beq.w	8004dfe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60fb      	str	r3, [r7, #12]
 8004ca6:	4b5c      	ldr	r3, [pc, #368]	; (8004e18 <HAL_GPIO_Init+0x2fc>)
 8004ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004caa:	4a5b      	ldr	r2, [pc, #364]	; (8004e18 <HAL_GPIO_Init+0x2fc>)
 8004cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8004cb2:	4b59      	ldr	r3, [pc, #356]	; (8004e18 <HAL_GPIO_Init+0x2fc>)
 8004cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cbe:	4a57      	ldr	r2, [pc, #348]	; (8004e1c <HAL_GPIO_Init+0x300>)
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	089b      	lsrs	r3, r3, #2
 8004cc4:	3302      	adds	r3, #2
 8004cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	220f      	movs	r2, #15
 8004cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cda:	43db      	mvns	r3, r3
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a4e      	ldr	r2, [pc, #312]	; (8004e20 <HAL_GPIO_Init+0x304>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d025      	beq.n	8004d36 <HAL_GPIO_Init+0x21a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a4d      	ldr	r2, [pc, #308]	; (8004e24 <HAL_GPIO_Init+0x308>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d01f      	beq.n	8004d32 <HAL_GPIO_Init+0x216>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a4c      	ldr	r2, [pc, #304]	; (8004e28 <HAL_GPIO_Init+0x30c>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d019      	beq.n	8004d2e <HAL_GPIO_Init+0x212>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a4b      	ldr	r2, [pc, #300]	; (8004e2c <HAL_GPIO_Init+0x310>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d013      	beq.n	8004d2a <HAL_GPIO_Init+0x20e>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a4a      	ldr	r2, [pc, #296]	; (8004e30 <HAL_GPIO_Init+0x314>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d00d      	beq.n	8004d26 <HAL_GPIO_Init+0x20a>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a49      	ldr	r2, [pc, #292]	; (8004e34 <HAL_GPIO_Init+0x318>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d007      	beq.n	8004d22 <HAL_GPIO_Init+0x206>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a48      	ldr	r2, [pc, #288]	; (8004e38 <HAL_GPIO_Init+0x31c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d101      	bne.n	8004d1e <HAL_GPIO_Init+0x202>
 8004d1a:	2306      	movs	r3, #6
 8004d1c:	e00c      	b.n	8004d38 <HAL_GPIO_Init+0x21c>
 8004d1e:	2307      	movs	r3, #7
 8004d20:	e00a      	b.n	8004d38 <HAL_GPIO_Init+0x21c>
 8004d22:	2305      	movs	r3, #5
 8004d24:	e008      	b.n	8004d38 <HAL_GPIO_Init+0x21c>
 8004d26:	2304      	movs	r3, #4
 8004d28:	e006      	b.n	8004d38 <HAL_GPIO_Init+0x21c>
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e004      	b.n	8004d38 <HAL_GPIO_Init+0x21c>
 8004d2e:	2302      	movs	r3, #2
 8004d30:	e002      	b.n	8004d38 <HAL_GPIO_Init+0x21c>
 8004d32:	2301      	movs	r3, #1
 8004d34:	e000      	b.n	8004d38 <HAL_GPIO_Init+0x21c>
 8004d36:	2300      	movs	r3, #0
 8004d38:	69fa      	ldr	r2, [r7, #28]
 8004d3a:	f002 0203 	and.w	r2, r2, #3
 8004d3e:	0092      	lsls	r2, r2, #2
 8004d40:	4093      	lsls	r3, r2
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d48:	4934      	ldr	r1, [pc, #208]	; (8004e1c <HAL_GPIO_Init+0x300>)
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	089b      	lsrs	r3, r3, #2
 8004d4e:	3302      	adds	r3, #2
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d56:	4b39      	ldr	r3, [pc, #228]	; (8004e3c <HAL_GPIO_Init+0x320>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	43db      	mvns	r3, r3
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	4013      	ands	r3, r2
 8004d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d7a:	4a30      	ldr	r2, [pc, #192]	; (8004e3c <HAL_GPIO_Init+0x320>)
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004d80:	4b2e      	ldr	r3, [pc, #184]	; (8004e3c <HAL_GPIO_Init+0x320>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	43db      	mvns	r3, r3
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004da4:	4a25      	ldr	r2, [pc, #148]	; (8004e3c <HAL_GPIO_Init+0x320>)
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004daa:	4b24      	ldr	r3, [pc, #144]	; (8004e3c <HAL_GPIO_Init+0x320>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	43db      	mvns	r3, r3
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	4013      	ands	r3, r2
 8004db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004dce:	4a1b      	ldr	r2, [pc, #108]	; (8004e3c <HAL_GPIO_Init+0x320>)
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004dd4:	4b19      	ldr	r3, [pc, #100]	; (8004e3c <HAL_GPIO_Init+0x320>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	4013      	ands	r3, r2
 8004de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004df8:	4a10      	ldr	r2, [pc, #64]	; (8004e3c <HAL_GPIO_Init+0x320>)
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	3301      	adds	r3, #1
 8004e02:	61fb      	str	r3, [r7, #28]
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	2b0f      	cmp	r3, #15
 8004e08:	f67f ae96 	bls.w	8004b38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e0c:	bf00      	nop
 8004e0e:	3724      	adds	r7, #36	; 0x24
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	40023800 	.word	0x40023800
 8004e1c:	40013800 	.word	0x40013800
 8004e20:	40020000 	.word	0x40020000
 8004e24:	40020400 	.word	0x40020400
 8004e28:	40020800 	.word	0x40020800
 8004e2c:	40020c00 	.word	0x40020c00
 8004e30:	40021000 	.word	0x40021000
 8004e34:	40021400 	.word	0x40021400
 8004e38:	40021800 	.word	0x40021800
 8004e3c:	40013c00 	.word	0x40013c00

08004e40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	887b      	ldrh	r3, [r7, #2]
 8004e52:	4013      	ands	r3, r2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	73fb      	strb	r3, [r7, #15]
 8004e5c:	e001      	b.n	8004e62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	807b      	strh	r3, [r7, #2]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e80:	787b      	ldrb	r3, [r7, #1]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e86:	887a      	ldrh	r2, [r7, #2]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e8c:	e003      	b.n	8004e96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e8e:	887b      	ldrh	r3, [r7, #2]
 8004e90:	041a      	lsls	r2, r3, #16
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	619a      	str	r2, [r3, #24]
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	460b      	mov	r3, r1
 8004eac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	695a      	ldr	r2, [r3, #20]
 8004eb2:	887b      	ldrh	r3, [r7, #2]
 8004eb4:	401a      	ands	r2, r3
 8004eb6:	887b      	ldrh	r3, [r7, #2]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d104      	bne.n	8004ec6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004ebc:	887b      	ldrh	r3, [r7, #2]
 8004ebe:	041a      	lsls	r2, r3, #16
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004ec4:	e002      	b.n	8004ecc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004ec6:	887a      	ldrh	r2, [r7, #2]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	619a      	str	r2, [r3, #24]
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eda:	b08f      	sub	sp, #60	; 0x3c
 8004edc:	af0a      	add	r7, sp, #40	; 0x28
 8004ede:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e054      	b.n	8004f94 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d106      	bne.n	8004f0a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f00e fe0d 	bl	8013b24 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2203      	movs	r2, #3
 8004f0e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d102      	bne.n	8004f24 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f006 fa3b 	bl	800b3a4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	603b      	str	r3, [r7, #0]
 8004f34:	687e      	ldr	r6, [r7, #4]
 8004f36:	466d      	mov	r5, sp
 8004f38:	f106 0410 	add.w	r4, r6, #16
 8004f3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f48:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f4c:	1d33      	adds	r3, r6, #4
 8004f4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f50:	6838      	ldr	r0, [r7, #0]
 8004f52:	f006 f9b5 	bl	800b2c0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f006 fa32 	bl	800b3c6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	603b      	str	r3, [r7, #0]
 8004f68:	687e      	ldr	r6, [r7, #4]
 8004f6a:	466d      	mov	r5, sp
 8004f6c:	f106 0410 	add.w	r4, r6, #16
 8004f70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f7c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f80:	1d33      	adds	r3, r6, #4
 8004f82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f84:	6838      	ldr	r0, [r7, #0]
 8004f86:	f006 fb45 	bl	800b614 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f9c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004f9c:	b590      	push	{r4, r7, lr}
 8004f9e:	b089      	sub	sp, #36	; 0x24
 8004fa0:	af04      	add	r7, sp, #16
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	4608      	mov	r0, r1
 8004fa6:	4611      	mov	r1, r2
 8004fa8:	461a      	mov	r2, r3
 8004faa:	4603      	mov	r3, r0
 8004fac:	70fb      	strb	r3, [r7, #3]
 8004fae:	460b      	mov	r3, r1
 8004fb0:	70bb      	strb	r3, [r7, #2]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d101      	bne.n	8004fc4 <HAL_HCD_HC_Init+0x28>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	e07f      	b.n	80050c4 <HAL_HCD_HC_Init+0x128>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8004fcc:	78fa      	ldrb	r2, [r7, #3]
 8004fce:	6879      	ldr	r1, [r7, #4]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	440b      	add	r3, r1
 8004fda:	333d      	adds	r3, #61	; 0x3d
 8004fdc:	2200      	movs	r2, #0
 8004fde:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004fe0:	78fa      	ldrb	r2, [r7, #3]
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	440b      	add	r3, r1
 8004fee:	3338      	adds	r3, #56	; 0x38
 8004ff0:	787a      	ldrb	r2, [r7, #1]
 8004ff2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004ff4:	78fa      	ldrb	r2, [r7, #3]
 8004ff6:	6879      	ldr	r1, [r7, #4]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	440b      	add	r3, r1
 8005002:	3340      	adds	r3, #64	; 0x40
 8005004:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005006:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005008:	78fa      	ldrb	r2, [r7, #3]
 800500a:	6879      	ldr	r1, [r7, #4]
 800500c:	4613      	mov	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	440b      	add	r3, r1
 8005016:	3339      	adds	r3, #57	; 0x39
 8005018:	78fa      	ldrb	r2, [r7, #3]
 800501a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800501c:	78fa      	ldrb	r2, [r7, #3]
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	4613      	mov	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	440b      	add	r3, r1
 800502a:	333f      	adds	r3, #63	; 0x3f
 800502c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005030:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005032:	78fa      	ldrb	r2, [r7, #3]
 8005034:	78bb      	ldrb	r3, [r7, #2]
 8005036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800503a:	b2d8      	uxtb	r0, r3
 800503c:	6879      	ldr	r1, [r7, #4]
 800503e:	4613      	mov	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	440b      	add	r3, r1
 8005048:	333a      	adds	r3, #58	; 0x3a
 800504a:	4602      	mov	r2, r0
 800504c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800504e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005052:	2b00      	cmp	r3, #0
 8005054:	da0a      	bge.n	800506c <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005056:	78fa      	ldrb	r2, [r7, #3]
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	4613      	mov	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	440b      	add	r3, r1
 8005064:	333b      	adds	r3, #59	; 0x3b
 8005066:	2201      	movs	r2, #1
 8005068:	701a      	strb	r2, [r3, #0]
 800506a:	e009      	b.n	8005080 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800506c:	78fa      	ldrb	r2, [r7, #3]
 800506e:	6879      	ldr	r1, [r7, #4]
 8005070:	4613      	mov	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	440b      	add	r3, r1
 800507a:	333b      	adds	r3, #59	; 0x3b
 800507c:	2200      	movs	r2, #0
 800507e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8005080:	78fa      	ldrb	r2, [r7, #3]
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	4613      	mov	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	440b      	add	r3, r1
 800508e:	333c      	adds	r3, #60	; 0x3c
 8005090:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005094:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	787c      	ldrb	r4, [r7, #1]
 800509c:	78ba      	ldrb	r2, [r7, #2]
 800509e:	78f9      	ldrb	r1, [r7, #3]
 80050a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80050a2:	9302      	str	r3, [sp, #8]
 80050a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80050a8:	9301      	str	r3, [sp, #4]
 80050aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	4623      	mov	r3, r4
 80050b2:	f006 fc2b 	bl	800b90c <USB_HC_Init>
 80050b6:	4603      	mov	r3, r0
 80050b8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80050c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd90      	pop	{r4, r7, pc}

080050cc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	460b      	mov	r3, r1
 80050d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80050d8:	2300      	movs	r3, #0
 80050da:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d101      	bne.n	80050ea <HAL_HCD_HC_Halt+0x1e>
 80050e6:	2302      	movs	r3, #2
 80050e8:	e00f      	b.n	800510a <HAL_HCD_HC_Halt+0x3e>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	78fa      	ldrb	r2, [r7, #3]
 80050f8:	4611      	mov	r1, r2
 80050fa:	4618      	mov	r0, r3
 80050fc:	f006 fe67 	bl	800bdce <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8005108:	7bfb      	ldrb	r3, [r7, #15]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	4608      	mov	r0, r1
 800511e:	4611      	mov	r1, r2
 8005120:	461a      	mov	r2, r3
 8005122:	4603      	mov	r3, r0
 8005124:	70fb      	strb	r3, [r7, #3]
 8005126:	460b      	mov	r3, r1
 8005128:	70bb      	strb	r3, [r7, #2]
 800512a:	4613      	mov	r3, r2
 800512c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800512e:	78fa      	ldrb	r2, [r7, #3]
 8005130:	6879      	ldr	r1, [r7, #4]
 8005132:	4613      	mov	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	00db      	lsls	r3, r3, #3
 800513a:	440b      	add	r3, r1
 800513c:	333b      	adds	r3, #59	; 0x3b
 800513e:	78ba      	ldrb	r2, [r7, #2]
 8005140:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005142:	78fa      	ldrb	r2, [r7, #3]
 8005144:	6879      	ldr	r1, [r7, #4]
 8005146:	4613      	mov	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4413      	add	r3, r2
 800514c:	00db      	lsls	r3, r3, #3
 800514e:	440b      	add	r3, r1
 8005150:	333f      	adds	r3, #63	; 0x3f
 8005152:	787a      	ldrb	r2, [r7, #1]
 8005154:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005156:	7c3b      	ldrb	r3, [r7, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d114      	bne.n	8005186 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800515c:	78fa      	ldrb	r2, [r7, #3]
 800515e:	6879      	ldr	r1, [r7, #4]
 8005160:	4613      	mov	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	440b      	add	r3, r1
 800516a:	3342      	adds	r3, #66	; 0x42
 800516c:	2203      	movs	r2, #3
 800516e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005170:	78fa      	ldrb	r2, [r7, #3]
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	4613      	mov	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	440b      	add	r3, r1
 800517e:	333d      	adds	r3, #61	; 0x3d
 8005180:	7f3a      	ldrb	r2, [r7, #28]
 8005182:	701a      	strb	r2, [r3, #0]
 8005184:	e009      	b.n	800519a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005186:	78fa      	ldrb	r2, [r7, #3]
 8005188:	6879      	ldr	r1, [r7, #4]
 800518a:	4613      	mov	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4413      	add	r3, r2
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	440b      	add	r3, r1
 8005194:	3342      	adds	r3, #66	; 0x42
 8005196:	2202      	movs	r2, #2
 8005198:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800519a:	787b      	ldrb	r3, [r7, #1]
 800519c:	2b03      	cmp	r3, #3
 800519e:	f200 80d6 	bhi.w	800534e <HAL_HCD_HC_SubmitRequest+0x23a>
 80051a2:	a201      	add	r2, pc, #4	; (adr r2, 80051a8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80051a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a8:	080051b9 	.word	0x080051b9
 80051ac:	08005339 	.word	0x08005339
 80051b0:	08005225 	.word	0x08005225
 80051b4:	080052af 	.word	0x080052af
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80051b8:	7c3b      	ldrb	r3, [r7, #16]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	f040 80c9 	bne.w	8005352 <HAL_HCD_HC_SubmitRequest+0x23e>
 80051c0:	78bb      	ldrb	r3, [r7, #2]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f040 80c5 	bne.w	8005352 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80051c8:	8b3b      	ldrh	r3, [r7, #24]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d109      	bne.n	80051e2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80051ce:	78fa      	ldrb	r2, [r7, #3]
 80051d0:	6879      	ldr	r1, [r7, #4]
 80051d2:	4613      	mov	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	440b      	add	r3, r1
 80051dc:	3351      	adds	r3, #81	; 0x51
 80051de:	2201      	movs	r2, #1
 80051e0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80051e2:	78fa      	ldrb	r2, [r7, #3]
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	4613      	mov	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4413      	add	r3, r2
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	440b      	add	r3, r1
 80051f0:	3351      	adds	r3, #81	; 0x51
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10a      	bne.n	800520e <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80051f8:	78fa      	ldrb	r2, [r7, #3]
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	4613      	mov	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4413      	add	r3, r2
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	440b      	add	r3, r1
 8005206:	3342      	adds	r3, #66	; 0x42
 8005208:	2200      	movs	r2, #0
 800520a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800520c:	e0a1      	b.n	8005352 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800520e:	78fa      	ldrb	r2, [r7, #3]
 8005210:	6879      	ldr	r1, [r7, #4]
 8005212:	4613      	mov	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	440b      	add	r3, r1
 800521c:	3342      	adds	r3, #66	; 0x42
 800521e:	2202      	movs	r2, #2
 8005220:	701a      	strb	r2, [r3, #0]
      break;
 8005222:	e096      	b.n	8005352 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005224:	78bb      	ldrb	r3, [r7, #2]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d120      	bne.n	800526c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800522a:	78fa      	ldrb	r2, [r7, #3]
 800522c:	6879      	ldr	r1, [r7, #4]
 800522e:	4613      	mov	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	440b      	add	r3, r1
 8005238:	3351      	adds	r3, #81	; 0x51
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10a      	bne.n	8005256 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005240:	78fa      	ldrb	r2, [r7, #3]
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	4613      	mov	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	440b      	add	r3, r1
 800524e:	3342      	adds	r3, #66	; 0x42
 8005250:	2200      	movs	r2, #0
 8005252:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005254:	e07e      	b.n	8005354 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005256:	78fa      	ldrb	r2, [r7, #3]
 8005258:	6879      	ldr	r1, [r7, #4]
 800525a:	4613      	mov	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	440b      	add	r3, r1
 8005264:	3342      	adds	r3, #66	; 0x42
 8005266:	2202      	movs	r2, #2
 8005268:	701a      	strb	r2, [r3, #0]
      break;
 800526a:	e073      	b.n	8005354 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800526c:	78fa      	ldrb	r2, [r7, #3]
 800526e:	6879      	ldr	r1, [r7, #4]
 8005270:	4613      	mov	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	440b      	add	r3, r1
 800527a:	3350      	adds	r3, #80	; 0x50
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10a      	bne.n	8005298 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005282:	78fa      	ldrb	r2, [r7, #3]
 8005284:	6879      	ldr	r1, [r7, #4]
 8005286:	4613      	mov	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	00db      	lsls	r3, r3, #3
 800528e:	440b      	add	r3, r1
 8005290:	3342      	adds	r3, #66	; 0x42
 8005292:	2200      	movs	r2, #0
 8005294:	701a      	strb	r2, [r3, #0]
      break;
 8005296:	e05d      	b.n	8005354 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005298:	78fa      	ldrb	r2, [r7, #3]
 800529a:	6879      	ldr	r1, [r7, #4]
 800529c:	4613      	mov	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	440b      	add	r3, r1
 80052a6:	3342      	adds	r3, #66	; 0x42
 80052a8:	2202      	movs	r2, #2
 80052aa:	701a      	strb	r2, [r3, #0]
      break;
 80052ac:	e052      	b.n	8005354 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80052ae:	78bb      	ldrb	r3, [r7, #2]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d120      	bne.n	80052f6 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80052b4:	78fa      	ldrb	r2, [r7, #3]
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	4613      	mov	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	440b      	add	r3, r1
 80052c2:	3351      	adds	r3, #81	; 0x51
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10a      	bne.n	80052e0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80052ca:	78fa      	ldrb	r2, [r7, #3]
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	4613      	mov	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	440b      	add	r3, r1
 80052d8:	3342      	adds	r3, #66	; 0x42
 80052da:	2200      	movs	r2, #0
 80052dc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80052de:	e039      	b.n	8005354 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80052e0:	78fa      	ldrb	r2, [r7, #3]
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	4613      	mov	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	440b      	add	r3, r1
 80052ee:	3342      	adds	r3, #66	; 0x42
 80052f0:	2202      	movs	r2, #2
 80052f2:	701a      	strb	r2, [r3, #0]
      break;
 80052f4:	e02e      	b.n	8005354 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80052f6:	78fa      	ldrb	r2, [r7, #3]
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	4613      	mov	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	440b      	add	r3, r1
 8005304:	3350      	adds	r3, #80	; 0x50
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10a      	bne.n	8005322 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800530c:	78fa      	ldrb	r2, [r7, #3]
 800530e:	6879      	ldr	r1, [r7, #4]
 8005310:	4613      	mov	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	440b      	add	r3, r1
 800531a:	3342      	adds	r3, #66	; 0x42
 800531c:	2200      	movs	r2, #0
 800531e:	701a      	strb	r2, [r3, #0]
      break;
 8005320:	e018      	b.n	8005354 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005322:	78fa      	ldrb	r2, [r7, #3]
 8005324:	6879      	ldr	r1, [r7, #4]
 8005326:	4613      	mov	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	00db      	lsls	r3, r3, #3
 800532e:	440b      	add	r3, r1
 8005330:	3342      	adds	r3, #66	; 0x42
 8005332:	2202      	movs	r2, #2
 8005334:	701a      	strb	r2, [r3, #0]
      break;
 8005336:	e00d      	b.n	8005354 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005338:	78fa      	ldrb	r2, [r7, #3]
 800533a:	6879      	ldr	r1, [r7, #4]
 800533c:	4613      	mov	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	440b      	add	r3, r1
 8005346:	3342      	adds	r3, #66	; 0x42
 8005348:	2200      	movs	r2, #0
 800534a:	701a      	strb	r2, [r3, #0]
      break;
 800534c:	e002      	b.n	8005354 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800534e:	bf00      	nop
 8005350:	e000      	b.n	8005354 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8005352:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005354:	78fa      	ldrb	r2, [r7, #3]
 8005356:	6879      	ldr	r1, [r7, #4]
 8005358:	4613      	mov	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	440b      	add	r3, r1
 8005362:	3344      	adds	r3, #68	; 0x44
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005368:	78fa      	ldrb	r2, [r7, #3]
 800536a:	8b39      	ldrh	r1, [r7, #24]
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	4613      	mov	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	00db      	lsls	r3, r3, #3
 8005376:	4403      	add	r3, r0
 8005378:	3348      	adds	r3, #72	; 0x48
 800537a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800537c:	78fa      	ldrb	r2, [r7, #3]
 800537e:	6879      	ldr	r1, [r7, #4]
 8005380:	4613      	mov	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	00db      	lsls	r3, r3, #3
 8005388:	440b      	add	r3, r1
 800538a:	335c      	adds	r3, #92	; 0x5c
 800538c:	2200      	movs	r2, #0
 800538e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005390:	78fa      	ldrb	r2, [r7, #3]
 8005392:	6879      	ldr	r1, [r7, #4]
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	440b      	add	r3, r1
 800539e:	334c      	adds	r3, #76	; 0x4c
 80053a0:	2200      	movs	r2, #0
 80053a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80053a4:	78fa      	ldrb	r2, [r7, #3]
 80053a6:	6879      	ldr	r1, [r7, #4]
 80053a8:	4613      	mov	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	440b      	add	r3, r1
 80053b2:	3339      	adds	r3, #57	; 0x39
 80053b4:	78fa      	ldrb	r2, [r7, #3]
 80053b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80053b8:	78fa      	ldrb	r2, [r7, #3]
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	4613      	mov	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	00db      	lsls	r3, r3, #3
 80053c4:	440b      	add	r3, r1
 80053c6:	335d      	adds	r3, #93	; 0x5d
 80053c8:	2200      	movs	r2, #0
 80053ca:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6818      	ldr	r0, [r3, #0]
 80053d0:	78fa      	ldrb	r2, [r7, #3]
 80053d2:	4613      	mov	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4413      	add	r3, r2
 80053d8:	00db      	lsls	r3, r3, #3
 80053da:	3338      	adds	r3, #56	; 0x38
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	18d1      	adds	r1, r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	461a      	mov	r2, r3
 80053e8:	f006 fb9a 	bl	800bb20 <USB_HC_StartXfer>
 80053ec:	4603      	mov	r3, r0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop

080053f8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4618      	mov	r0, r3
 8005410:	f006 f8bd 	bl	800b58e <USB_GetMode>
 8005414:	4603      	mov	r3, r0
 8005416:	2b01      	cmp	r3, #1
 8005418:	f040 80ef 	bne.w	80055fa <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4618      	mov	r0, r3
 8005422:	f006 f8a1 	bl	800b568 <USB_ReadInterrupts>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 80e5 	beq.w	80055f8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4618      	mov	r0, r3
 8005434:	f006 f898 	bl	800b568 <USB_ReadInterrupts>
 8005438:	4603      	mov	r3, r0
 800543a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800543e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005442:	d104      	bne.n	800544e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800544c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f006 f888 	bl	800b568 <USB_ReadInterrupts>
 8005458:	4603      	mov	r3, r0
 800545a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800545e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005462:	d104      	bne.n	800546e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800546c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4618      	mov	r0, r3
 8005474:	f006 f878 	bl	800b568 <USB_ReadInterrupts>
 8005478:	4603      	mov	r3, r0
 800547a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800547e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005482:	d104      	bne.n	800548e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800548c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4618      	mov	r0, r3
 8005494:	f006 f868 	bl	800b568 <USB_ReadInterrupts>
 8005498:	4603      	mov	r3, r0
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d103      	bne.n	80054aa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2202      	movs	r2, #2
 80054a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f006 f85a 	bl	800b568 <USB_ReadInterrupts>
 80054b4:	4603      	mov	r3, r0
 80054b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054be:	d115      	bne.n	80054ec <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80054c8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d108      	bne.n	80054ec <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f00e fba0 	bl	8013c20 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2101      	movs	r1, #1
 80054e6:	4618      	mov	r0, r3
 80054e8:	f006 f94a 	bl	800b780 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f006 f839 	bl	800b568 <USB_ReadInterrupts>
 80054f6:	4603      	mov	r3, r0
 80054f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005500:	d102      	bne.n	8005508 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f001 f966 	bl	80067d4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4618      	mov	r0, r3
 800550e:	f006 f82b 	bl	800b568 <USB_ReadInterrupts>
 8005512:	4603      	mov	r3, r0
 8005514:	f003 0308 	and.w	r3, r3, #8
 8005518:	2b08      	cmp	r3, #8
 800551a:	d106      	bne.n	800552a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f00e fb63 	bl	8013be8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2208      	movs	r2, #8
 8005528:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f006 f81a 	bl	800b568 <USB_ReadInterrupts>
 8005534:	4603      	mov	r3, r0
 8005536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800553a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800553e:	d138      	bne.n	80055b2 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4618      	mov	r0, r3
 8005546:	f006 fc31 	bl	800bdac <USB_HC_ReadInterrupt>
 800554a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800554c:	2300      	movs	r3, #0
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	e025      	b.n	800559e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f003 030f 	and.w	r3, r3, #15
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	fa22 f303 	lsr.w	r3, r2, r3
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d018      	beq.n	8005598 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4413      	add	r3, r2
 800556e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800557c:	d106      	bne.n	800558c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	b2db      	uxtb	r3, r3
 8005582:	4619      	mov	r1, r3
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f8cf 	bl	8005728 <HCD_HC_IN_IRQHandler>
 800558a:	e005      	b.n	8005598 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	b2db      	uxtb	r3, r3
 8005590:	4619      	mov	r1, r3
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fcfd 	bl	8005f92 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	3301      	adds	r3, #1
 800559c:	617b      	str	r3, [r7, #20]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d3d4      	bcc.n	8005552 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f005 ffd6 	bl	800b568 <USB_ReadInterrupts>
 80055bc:	4603      	mov	r3, r0
 80055be:	f003 0310 	and.w	r3, r3, #16
 80055c2:	2b10      	cmp	r3, #16
 80055c4:	d101      	bne.n	80055ca <HAL_HCD_IRQHandler+0x1d2>
 80055c6:	2301      	movs	r3, #1
 80055c8:	e000      	b.n	80055cc <HAL_HCD_IRQHandler+0x1d4>
 80055ca:	2300      	movs	r3, #0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d014      	beq.n	80055fa <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699a      	ldr	r2, [r3, #24]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0210 	bic.w	r2, r2, #16
 80055de:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f001 f84b 	bl	800667c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	699a      	ldr	r2, [r3, #24]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f042 0210 	orr.w	r2, r2, #16
 80055f4:	619a      	str	r2, [r3, #24]
 80055f6:	e000      	b.n	80055fa <HAL_HCD_IRQHandler+0x202>
      return;
 80055f8:	bf00      	nop
    }
  }
}
 80055fa:	3718      	adds	r7, #24
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800560e:	2b01      	cmp	r3, #1
 8005610:	d101      	bne.n	8005616 <HAL_HCD_Start+0x16>
 8005612:	2302      	movs	r3, #2
 8005614:	e013      	b.n	800563e <HAL_HCD_Start+0x3e>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4618      	mov	r0, r3
 8005624:	f005 fead 	bl	800b382 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2101      	movs	r1, #1
 800562e:	4618      	mov	r0, r3
 8005630:	f006 f90a 	bl	800b848 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b082      	sub	sp, #8
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <HAL_HCD_Stop+0x16>
 8005658:	2302      	movs	r3, #2
 800565a:	e00d      	b.n	8005678 <HAL_HCD_Stop+0x32>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4618      	mov	r0, r3
 800566a:	f006 fceb 	bl	800c044 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4618      	mov	r0, r3
 800568e:	f006 f8b1 	bl	800b7f4 <USB_ResetPort>
 8005692:	4603      	mov	r3, r0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	460b      	mov	r3, r1
 80056a6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80056a8:	78fa      	ldrb	r2, [r7, #3]
 80056aa:	6879      	ldr	r1, [r7, #4]
 80056ac:	4613      	mov	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	440b      	add	r3, r1
 80056b6:	335c      	adds	r3, #92	; 0x5c
 80056b8:	781b      	ldrb	r3, [r3, #0]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	460b      	mov	r3, r1
 80056d0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80056d2:	78fa      	ldrb	r2, [r7, #3]
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	4613      	mov	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	00db      	lsls	r3, r3, #3
 80056de:	440b      	add	r3, r1
 80056e0:	334c      	adds	r3, #76	; 0x4c
 80056e2:	681b      	ldr	r3, [r3, #0]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f006 f8f3 	bl	800b8e8 <USB_GetCurrentFrame>
 8005702:	4603      	mov	r3, r0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4618      	mov	r0, r3
 800571a:	f006 f8ce 	bl	800b8ba <USB_GetHostSpeed>
 800571e:	4603      	mov	r3, r0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	460b      	mov	r3, r1
 8005732:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800573e:	78fb      	ldrb	r3, [r7, #3]
 8005740:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	4413      	add	r3, r2
 800574a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	2b04      	cmp	r3, #4
 8005756:	d119      	bne.n	800578c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	4413      	add	r3, r2
 8005760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005764:	461a      	mov	r2, r3
 8005766:	2304      	movs	r3, #4
 8005768:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	4413      	add	r3, r2
 8005772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	0151      	lsls	r1, r2, #5
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	440a      	add	r2, r1
 8005780:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005784:	f043 0302 	orr.w	r3, r3, #2
 8005788:	60d3      	str	r3, [r2, #12]
 800578a:	e0ce      	b.n	800592a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	4413      	add	r3, r2
 8005794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a2:	d12c      	bne.n	80057fe <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b0:	461a      	mov	r2, r3
 80057b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80057b8:	6879      	ldr	r1, [r7, #4]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	4613      	mov	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	440b      	add	r3, r1
 80057c6:	335d      	adds	r3, #93	; 0x5d
 80057c8:	2207      	movs	r2, #7
 80057ca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	0151      	lsls	r1, r2, #5
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	440a      	add	r2, r1
 80057e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057e6:	f043 0302 	orr.w	r3, r3, #2
 80057ea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	b2d2      	uxtb	r2, r2
 80057f4:	4611      	mov	r1, r2
 80057f6:	4618      	mov	r0, r3
 80057f8:	f006 fae9 	bl	800bdce <USB_HC_Halt>
 80057fc:	e095      	b.n	800592a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	4413      	add	r3, r2
 8005806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f003 0320 	and.w	r3, r3, #32
 8005810:	2b20      	cmp	r3, #32
 8005812:	d109      	bne.n	8005828 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	4413      	add	r3, r2
 800581c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005820:	461a      	mov	r2, r3
 8005822:	2320      	movs	r3, #32
 8005824:	6093      	str	r3, [r2, #8]
 8005826:	e080      	b.n	800592a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	4413      	add	r3, r2
 8005830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f003 0308 	and.w	r3, r3, #8
 800583a:	2b08      	cmp	r3, #8
 800583c:	d134      	bne.n	80058a8 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	015a      	lsls	r2, r3, #5
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	4413      	add	r3, r2
 8005846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	0151      	lsls	r1, r2, #5
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	440a      	add	r2, r1
 8005854:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005858:	f043 0302 	orr.w	r3, r3, #2
 800585c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800585e:	6879      	ldr	r1, [r7, #4]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	4613      	mov	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	440b      	add	r3, r1
 800586c:	335d      	adds	r3, #93	; 0x5d
 800586e:	2205      	movs	r2, #5
 8005870:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	4413      	add	r3, r2
 800587a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800587e:	461a      	mov	r2, r3
 8005880:	2310      	movs	r3, #16
 8005882:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	4413      	add	r3, r2
 800588c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005890:	461a      	mov	r2, r3
 8005892:	2308      	movs	r3, #8
 8005894:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	b2d2      	uxtb	r2, r2
 800589e:	4611      	mov	r1, r2
 80058a0:	4618      	mov	r0, r3
 80058a2:	f006 fa94 	bl	800bdce <USB_HC_Halt>
 80058a6:	e040      	b.n	800592a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058be:	d134      	bne.n	800592a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	015a      	lsls	r2, r3, #5
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	0151      	lsls	r1, r2, #5
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	440a      	add	r2, r1
 80058d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058da:	f043 0302 	orr.w	r3, r3, #2
 80058de:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	4611      	mov	r1, r2
 80058ea:	4618      	mov	r0, r3
 80058ec:	f006 fa6f 	bl	800bdce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058fc:	461a      	mov	r2, r3
 80058fe:	2310      	movs	r3, #16
 8005900:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	4613      	mov	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	440b      	add	r3, r1
 8005910:	335d      	adds	r3, #93	; 0x5d
 8005912:	2208      	movs	r2, #8
 8005914:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	4413      	add	r3, r2
 800591e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005922:	461a      	mov	r2, r3
 8005924:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005928:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	4413      	add	r3, r2
 8005932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800593c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005940:	d122      	bne.n	8005988 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	015a      	lsls	r2, r3, #5
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	4413      	add	r3, r2
 800594a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	0151      	lsls	r1, r2, #5
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	440a      	add	r2, r1
 8005958:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800595c:	f043 0302 	orr.w	r3, r3, #2
 8005960:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	4611      	mov	r1, r2
 800596c:	4618      	mov	r0, r3
 800596e:	f006 fa2e 	bl	800bdce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	4413      	add	r3, r2
 800597a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800597e:	461a      	mov	r2, r3
 8005980:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005984:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005986:	e300      	b.n	8005f8a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	4413      	add	r3, r2
 8005990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b01      	cmp	r3, #1
 800599c:	f040 80fd 	bne.w	8005b9a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d01b      	beq.n	80059e0 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80059a8:	6879      	ldr	r1, [r7, #4]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	440b      	add	r3, r1
 80059b6:	3348      	adds	r3, #72	; 0x48
 80059b8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	0159      	lsls	r1, r3, #5
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	440b      	add	r3, r1
 80059c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80059cc:	1ad1      	subs	r1, r2, r3
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4613      	mov	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	4403      	add	r3, r0
 80059dc:	334c      	adds	r3, #76	; 0x4c
 80059de:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80059e0:	6879      	ldr	r1, [r7, #4]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4613      	mov	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	440b      	add	r3, r1
 80059ee:	335d      	adds	r3, #93	; 0x5d
 80059f0:	2201      	movs	r2, #1
 80059f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80059f4:	6879      	ldr	r1, [r7, #4]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	4613      	mov	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	440b      	add	r3, r1
 8005a02:	3358      	adds	r3, #88	; 0x58
 8005a04:	2200      	movs	r2, #0
 8005a06:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a14:	461a      	mov	r2, r3
 8005a16:	2301      	movs	r3, #1
 8005a18:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	440b      	add	r3, r1
 8005a28:	333f      	adds	r3, #63	; 0x3f
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005a30:	6879      	ldr	r1, [r7, #4]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	440b      	add	r3, r1
 8005a3e:	333f      	adds	r3, #63	; 0x3f
 8005a40:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d121      	bne.n	8005a8a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	0151      	lsls	r1, r2, #5
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	440a      	add	r2, r1
 8005a5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a60:	f043 0302 	orr.w	r3, r3, #2
 8005a64:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	b2d2      	uxtb	r2, r2
 8005a6e:	4611      	mov	r1, r2
 8005a70:	4618      	mov	r0, r3
 8005a72:	f006 f9ac 	bl	800bdce <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a82:	461a      	mov	r2, r3
 8005a84:	2310      	movs	r3, #16
 8005a86:	6093      	str	r3, [r2, #8]
 8005a88:	e070      	b.n	8005b6c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005a8a:	6879      	ldr	r1, [r7, #4]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	440b      	add	r3, r1
 8005a98:	333f      	adds	r3, #63	; 0x3f
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	2b03      	cmp	r3, #3
 8005a9e:	d12a      	bne.n	8005af6 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	0151      	lsls	r1, r2, #5
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	440a      	add	r2, r1
 8005ab6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005abe:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005ac0:	6879      	ldr	r1, [r7, #4]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	440b      	add	r3, r1
 8005ace:	335c      	adds	r3, #92	; 0x5c
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	b2d8      	uxtb	r0, r3
 8005ad8:	6879      	ldr	r1, [r7, #4]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	4613      	mov	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	440b      	add	r3, r1
 8005ae6:	335c      	adds	r3, #92	; 0x5c
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	4601      	mov	r1, r0
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f00e f8a4 	bl	8013c3c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005af4:	e03a      	b.n	8005b6c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005af6:	6879      	ldr	r1, [r7, #4]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	4613      	mov	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	440b      	add	r3, r1
 8005b04:	333f      	adds	r3, #63	; 0x3f
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d12f      	bne.n	8005b6c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005b0c:	6879      	ldr	r1, [r7, #4]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	4613      	mov	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	00db      	lsls	r3, r3, #3
 8005b18:	440b      	add	r3, r1
 8005b1a:	335c      	adds	r3, #92	; 0x5c
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005b20:	6879      	ldr	r1, [r7, #4]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4613      	mov	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	440b      	add	r3, r1
 8005b2e:	3350      	adds	r3, #80	; 0x50
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	f083 0301 	eor.w	r3, r3, #1
 8005b36:	b2d8      	uxtb	r0, r3
 8005b38:	6879      	ldr	r1, [r7, #4]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	440b      	add	r3, r1
 8005b46:	3350      	adds	r3, #80	; 0x50
 8005b48:	4602      	mov	r2, r0
 8005b4a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	b2d8      	uxtb	r0, r3
 8005b50:	6879      	ldr	r1, [r7, #4]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	4613      	mov	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	440b      	add	r3, r1
 8005b5e:	335c      	adds	r3, #92	; 0x5c
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	461a      	mov	r2, r3
 8005b64:	4601      	mov	r1, r0
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f00e f868 	bl	8013c3c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8005b6c:	6879      	ldr	r1, [r7, #4]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	4613      	mov	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	440b      	add	r3, r1
 8005b7a:	3350      	adds	r3, #80	; 0x50
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	f083 0301 	eor.w	r3, r3, #1
 8005b82:	b2d8      	uxtb	r0, r3
 8005b84:	6879      	ldr	r1, [r7, #4]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	440b      	add	r3, r1
 8005b92:	3350      	adds	r3, #80	; 0x50
 8005b94:	4602      	mov	r2, r0
 8005b96:	701a      	strb	r2, [r3, #0]
}
 8005b98:	e1f7      	b.n	8005f8a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	f040 811a 	bne.w	8005de6 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	0151      	lsls	r1, r2, #5
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	440a      	add	r2, r1
 8005bc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bcc:	f023 0302 	bic.w	r3, r3, #2
 8005bd0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005bd2:	6879      	ldr	r1, [r7, #4]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	440b      	add	r3, r1
 8005be0:	335d      	adds	r3, #93	; 0x5d
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d10a      	bne.n	8005bfe <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005be8:	6879      	ldr	r1, [r7, #4]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	4613      	mov	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	440b      	add	r3, r1
 8005bf6:	335c      	adds	r3, #92	; 0x5c
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	701a      	strb	r2, [r3, #0]
 8005bfc:	e0d9      	b.n	8005db2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	4613      	mov	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	00db      	lsls	r3, r3, #3
 8005c0a:	440b      	add	r3, r1
 8005c0c:	335d      	adds	r3, #93	; 0x5d
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b05      	cmp	r3, #5
 8005c12:	d10a      	bne.n	8005c2a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	00db      	lsls	r3, r3, #3
 8005c20:	440b      	add	r3, r1
 8005c22:	335c      	adds	r3, #92	; 0x5c
 8005c24:	2205      	movs	r2, #5
 8005c26:	701a      	strb	r2, [r3, #0]
 8005c28:	e0c3      	b.n	8005db2 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	440b      	add	r3, r1
 8005c38:	335d      	adds	r3, #93	; 0x5d
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b06      	cmp	r3, #6
 8005c3e:	d00a      	beq.n	8005c56 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005c40:	6879      	ldr	r1, [r7, #4]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	4613      	mov	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	440b      	add	r3, r1
 8005c4e:	335d      	adds	r3, #93	; 0x5d
 8005c50:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005c52:	2b08      	cmp	r3, #8
 8005c54:	d156      	bne.n	8005d04 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8005c56:	6879      	ldr	r1, [r7, #4]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	00db      	lsls	r3, r3, #3
 8005c62:	440b      	add	r3, r1
 8005c64:	3358      	adds	r3, #88	; 0x58
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	1c59      	adds	r1, r3, #1
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	4403      	add	r3, r0
 8005c78:	3358      	adds	r3, #88	; 0x58
 8005c7a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005c7c:	6879      	ldr	r1, [r7, #4]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	4613      	mov	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	440b      	add	r3, r1
 8005c8a:	3358      	adds	r3, #88	; 0x58
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b03      	cmp	r3, #3
 8005c90:	d914      	bls.n	8005cbc <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005c92:	6879      	ldr	r1, [r7, #4]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	4613      	mov	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	440b      	add	r3, r1
 8005ca0:	3358      	adds	r3, #88	; 0x58
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	4613      	mov	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	440b      	add	r3, r1
 8005cb4:	335c      	adds	r3, #92	; 0x5c
 8005cb6:	2204      	movs	r2, #4
 8005cb8:	701a      	strb	r2, [r3, #0]
 8005cba:	e009      	b.n	8005cd0 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005cbc:	6879      	ldr	r1, [r7, #4]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	440b      	add	r3, r1
 8005cca:	335c      	adds	r3, #92	; 0x5c
 8005ccc:	2202      	movs	r2, #2
 8005cce:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ce6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cee:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	6013      	str	r3, [r2, #0]
 8005d02:	e056      	b.n	8005db2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005d04:	6879      	ldr	r1, [r7, #4]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	00db      	lsls	r3, r3, #3
 8005d10:	440b      	add	r3, r1
 8005d12:	335d      	adds	r3, #93	; 0x5d
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d123      	bne.n	8005d62 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005d1a:	6879      	ldr	r1, [r7, #4]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	00db      	lsls	r3, r3, #3
 8005d26:	440b      	add	r3, r1
 8005d28:	335c      	adds	r3, #92	; 0x5c
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d44:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d4c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	6013      	str	r3, [r2, #0]
 8005d60:	e027      	b.n	8005db2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	4613      	mov	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4413      	add	r3, r2
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	440b      	add	r3, r1
 8005d70:	335d      	adds	r3, #93	; 0x5d
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b07      	cmp	r3, #7
 8005d76:	d11c      	bne.n	8005db2 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8005d78:	6879      	ldr	r1, [r7, #4]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	440b      	add	r3, r1
 8005d86:	3358      	adds	r3, #88	; 0x58
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	1c59      	adds	r1, r3, #1
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	4613      	mov	r3, r2
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4413      	add	r3, r2
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	4403      	add	r3, r0
 8005d9a:	3358      	adds	r3, #88	; 0x58
 8005d9c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005d9e:	6879      	ldr	r1, [r7, #4]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	4613      	mov	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	00db      	lsls	r3, r3, #3
 8005daa:	440b      	add	r3, r1
 8005dac:	335c      	adds	r3, #92	; 0x5c
 8005dae:	2204      	movs	r2, #4
 8005db0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	b2d8      	uxtb	r0, r3
 8005dc8:	6879      	ldr	r1, [r7, #4]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	440b      	add	r3, r1
 8005dd6:	335c      	adds	r3, #92	; 0x5c
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	4601      	mov	r1, r0
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f00d ff2c 	bl	8013c3c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005de4:	e0d1      	b.n	8005f8a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df8:	2b80      	cmp	r3, #128	; 0x80
 8005dfa:	d13e      	bne.n	8005e7a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	0151      	lsls	r1, r2, #5
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	440a      	add	r2, r1
 8005e12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e16:	f043 0302 	orr.w	r3, r3, #2
 8005e1a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8005e1c:	6879      	ldr	r1, [r7, #4]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	4613      	mov	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	440b      	add	r3, r1
 8005e2a:	3358      	adds	r3, #88	; 0x58
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	1c59      	adds	r1, r3, #1
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	4613      	mov	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	4403      	add	r3, r0
 8005e3e:	3358      	adds	r3, #88	; 0x58
 8005e40:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005e42:	6879      	ldr	r1, [r7, #4]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	4613      	mov	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	00db      	lsls	r3, r3, #3
 8005e4e:	440b      	add	r3, r1
 8005e50:	335d      	adds	r3, #93	; 0x5d
 8005e52:	2206      	movs	r2, #6
 8005e54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	b2d2      	uxtb	r2, r2
 8005e5e:	4611      	mov	r1, r2
 8005e60:	4618      	mov	r0, r3
 8005e62:	f005 ffb4 	bl	800bdce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e72:	461a      	mov	r2, r3
 8005e74:	2380      	movs	r3, #128	; 0x80
 8005e76:	6093      	str	r3, [r2, #8]
}
 8005e78:	e087      	b.n	8005f8a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f003 0310 	and.w	r3, r3, #16
 8005e8c:	2b10      	cmp	r3, #16
 8005e8e:	d17c      	bne.n	8005f8a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005e90:	6879      	ldr	r1, [r7, #4]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	4613      	mov	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	440b      	add	r3, r1
 8005e9e:	333f      	adds	r3, #63	; 0x3f
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	2b03      	cmp	r3, #3
 8005ea4:	d122      	bne.n	8005eec <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005ea6:	6879      	ldr	r1, [r7, #4]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4413      	add	r3, r2
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	440b      	add	r3, r1
 8005eb4:	3358      	adds	r3, #88	; 0x58
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	015a      	lsls	r2, r3, #5
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	0151      	lsls	r1, r2, #5
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	440a      	add	r2, r1
 8005ed0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ed4:	f043 0302 	orr.w	r3, r3, #2
 8005ed8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	b2d2      	uxtb	r2, r2
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f005 ff72 	bl	800bdce <USB_HC_Halt>
 8005eea:	e045      	b.n	8005f78 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005eec:	6879      	ldr	r1, [r7, #4]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	440b      	add	r3, r1
 8005efa:	333f      	adds	r3, #63	; 0x3f
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00a      	beq.n	8005f18 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005f02:	6879      	ldr	r1, [r7, #4]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	4613      	mov	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	440b      	add	r3, r1
 8005f10:	333f      	adds	r3, #63	; 0x3f
 8005f12:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d12f      	bne.n	8005f78 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005f18:	6879      	ldr	r1, [r7, #4]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	440b      	add	r3, r1
 8005f26:	3358      	adds	r3, #88	; 0x58
 8005f28:	2200      	movs	r2, #0
 8005f2a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d121      	bne.n	8005f78 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8005f34:	6879      	ldr	r1, [r7, #4]
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	00db      	lsls	r3, r3, #3
 8005f40:	440b      	add	r3, r1
 8005f42:	335d      	adds	r3, #93	; 0x5d
 8005f44:	2203      	movs	r2, #3
 8005f46:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	0151      	lsls	r1, r2, #5
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	440a      	add	r2, r1
 8005f5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f62:	f043 0302 	orr.w	r3, r3, #2
 8005f66:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	b2d2      	uxtb	r2, r2
 8005f70:	4611      	mov	r1, r2
 8005f72:	4618      	mov	r0, r3
 8005f74:	f005 ff2b 	bl	800bdce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f84:	461a      	mov	r2, r3
 8005f86:	2310      	movs	r3, #16
 8005f88:	6093      	str	r3, [r2, #8]
}
 8005f8a:	bf00      	nop
 8005f8c:	3718      	adds	r7, #24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b086      	sub	sp, #24
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005fa8:	78fb      	ldrb	r3, [r7, #3]
 8005faa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f003 0304 	and.w	r3, r3, #4
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d119      	bne.n	8005ff6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fce:	461a      	mov	r2, r3
 8005fd0:	2304      	movs	r3, #4
 8005fd2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	0151      	lsls	r1, r2, #5
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	440a      	add	r2, r1
 8005fea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fee:	f043 0302 	orr.w	r3, r3, #2
 8005ff2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005ff4:	e33e      	b.n	8006674 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f003 0320 	and.w	r3, r3, #32
 8006008:	2b20      	cmp	r3, #32
 800600a:	d141      	bne.n	8006090 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	4413      	add	r3, r2
 8006014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006018:	461a      	mov	r2, r3
 800601a:	2320      	movs	r3, #32
 800601c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800601e:	6879      	ldr	r1, [r7, #4]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	4613      	mov	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	00db      	lsls	r3, r3, #3
 800602a:	440b      	add	r3, r1
 800602c:	333d      	adds	r3, #61	; 0x3d
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	2b01      	cmp	r3, #1
 8006032:	f040 831f 	bne.w	8006674 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	4613      	mov	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	00db      	lsls	r3, r3, #3
 8006042:	440b      	add	r3, r1
 8006044:	333d      	adds	r3, #61	; 0x3d
 8006046:	2200      	movs	r2, #0
 8006048:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800604a:	6879      	ldr	r1, [r7, #4]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	4613      	mov	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	440b      	add	r3, r1
 8006058:	335c      	adds	r3, #92	; 0x5c
 800605a:	2202      	movs	r2, #2
 800605c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	4413      	add	r3, r2
 8006066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	0151      	lsls	r1, r2, #5
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	440a      	add	r2, r1
 8006074:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006078:	f043 0302 	orr.w	r3, r3, #2
 800607c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	b2d2      	uxtb	r2, r2
 8006086:	4611      	mov	r1, r2
 8006088:	4618      	mov	r0, r3
 800608a:	f005 fea0 	bl	800bdce <USB_HC_Halt>
}
 800608e:	e2f1      	b.n	8006674 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	4413      	add	r3, r2
 8006098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a2:	2b40      	cmp	r3, #64	; 0x40
 80060a4:	d13f      	bne.n	8006126 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80060a6:	6879      	ldr	r1, [r7, #4]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	4613      	mov	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	00db      	lsls	r3, r3, #3
 80060b2:	440b      	add	r3, r1
 80060b4:	335d      	adds	r3, #93	; 0x5d
 80060b6:	2204      	movs	r2, #4
 80060b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80060ba:	6879      	ldr	r1, [r7, #4]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	4613      	mov	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	440b      	add	r3, r1
 80060c8:	333d      	adds	r3, #61	; 0x3d
 80060ca:	2201      	movs	r2, #1
 80060cc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80060ce:	6879      	ldr	r1, [r7, #4]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	4613      	mov	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4413      	add	r3, r2
 80060d8:	00db      	lsls	r3, r3, #3
 80060da:	440b      	add	r3, r1
 80060dc:	3358      	adds	r3, #88	; 0x58
 80060de:	2200      	movs	r2, #0
 80060e0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	0151      	lsls	r1, r2, #5
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	440a      	add	r2, r1
 80060f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060fc:	f043 0302 	orr.w	r3, r3, #2
 8006100:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	b2d2      	uxtb	r2, r2
 800610a:	4611      	mov	r1, r2
 800610c:	4618      	mov	r0, r3
 800610e:	f005 fe5e 	bl	800bdce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	4413      	add	r3, r2
 800611a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800611e:	461a      	mov	r2, r3
 8006120:	2340      	movs	r3, #64	; 0x40
 8006122:	6093      	str	r3, [r2, #8]
}
 8006124:	e2a6      	b.n	8006674 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	4413      	add	r3, r2
 800612e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800613c:	d122      	bne.n	8006184 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	4413      	add	r3, r2
 8006146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	0151      	lsls	r1, r2, #5
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	440a      	add	r2, r1
 8006154:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006158:	f043 0302 	orr.w	r3, r3, #2
 800615c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	b2d2      	uxtb	r2, r2
 8006166:	4611      	mov	r1, r2
 8006168:	4618      	mov	r0, r3
 800616a:	f005 fe30 	bl	800bdce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	4413      	add	r3, r2
 8006176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800617a:	461a      	mov	r2, r3
 800617c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006180:	6093      	str	r3, [r2, #8]
}
 8006182:	e277      	b.n	8006674 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	4413      	add	r3, r2
 800618c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b01      	cmp	r3, #1
 8006198:	d135      	bne.n	8006206 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800619a:	6879      	ldr	r1, [r7, #4]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	4613      	mov	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	00db      	lsls	r3, r3, #3
 80061a6:	440b      	add	r3, r1
 80061a8:	3358      	adds	r3, #88	; 0x58
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	0151      	lsls	r1, r2, #5
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	440a      	add	r2, r1
 80061c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061c8:	f043 0302 	orr.w	r3, r3, #2
 80061cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	b2d2      	uxtb	r2, r2
 80061d6:	4611      	mov	r1, r2
 80061d8:	4618      	mov	r0, r3
 80061da:	f005 fdf8 	bl	800bdce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ea:	461a      	mov	r2, r3
 80061ec:	2301      	movs	r3, #1
 80061ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80061f0:	6879      	ldr	r1, [r7, #4]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	4613      	mov	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	440b      	add	r3, r1
 80061fe:	335d      	adds	r3, #93	; 0x5d
 8006200:	2201      	movs	r2, #1
 8006202:	701a      	strb	r2, [r3, #0]
}
 8006204:	e236      	b.n	8006674 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	4413      	add	r3, r2
 800620e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f003 0308 	and.w	r3, r3, #8
 8006218:	2b08      	cmp	r3, #8
 800621a:	d12b      	bne.n	8006274 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	4413      	add	r3, r2
 8006224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006228:	461a      	mov	r2, r3
 800622a:	2308      	movs	r3, #8
 800622c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	015a      	lsls	r2, r3, #5
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	4413      	add	r3, r2
 8006236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	0151      	lsls	r1, r2, #5
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	440a      	add	r2, r1
 8006244:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006248:	f043 0302 	orr.w	r3, r3, #2
 800624c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	b2d2      	uxtb	r2, r2
 8006256:	4611      	mov	r1, r2
 8006258:	4618      	mov	r0, r3
 800625a:	f005 fdb8 	bl	800bdce <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800625e:	6879      	ldr	r1, [r7, #4]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4613      	mov	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	00db      	lsls	r3, r3, #3
 800626a:	440b      	add	r3, r1
 800626c:	335d      	adds	r3, #93	; 0x5d
 800626e:	2205      	movs	r2, #5
 8006270:	701a      	strb	r2, [r3, #0]
}
 8006272:	e1ff      	b.n	8006674 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	4413      	add	r3, r2
 800627c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f003 0310 	and.w	r3, r3, #16
 8006286:	2b10      	cmp	r3, #16
 8006288:	d155      	bne.n	8006336 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800628a:	6879      	ldr	r1, [r7, #4]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	4613      	mov	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4413      	add	r3, r2
 8006294:	00db      	lsls	r3, r3, #3
 8006296:	440b      	add	r3, r1
 8006298:	3358      	adds	r3, #88	; 0x58
 800629a:	2200      	movs	r2, #0
 800629c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800629e:	6879      	ldr	r1, [r7, #4]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	4613      	mov	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	00db      	lsls	r3, r3, #3
 80062aa:	440b      	add	r3, r1
 80062ac:	335d      	adds	r3, #93	; 0x5d
 80062ae:	2203      	movs	r2, #3
 80062b0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80062b2:	6879      	ldr	r1, [r7, #4]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	4613      	mov	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	00db      	lsls	r3, r3, #3
 80062be:	440b      	add	r3, r1
 80062c0:	333d      	adds	r3, #61	; 0x3d
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d114      	bne.n	80062f2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80062c8:	6879      	ldr	r1, [r7, #4]
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	4613      	mov	r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	00db      	lsls	r3, r3, #3
 80062d4:	440b      	add	r3, r1
 80062d6:	333c      	adds	r3, #60	; 0x3c
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d109      	bne.n	80062f2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80062de:	6879      	ldr	r1, [r7, #4]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	4613      	mov	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	00db      	lsls	r3, r3, #3
 80062ea:	440b      	add	r3, r1
 80062ec:	333d      	adds	r3, #61	; 0x3d
 80062ee:	2201      	movs	r2, #1
 80062f0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	0151      	lsls	r1, r2, #5
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	440a      	add	r2, r1
 8006308:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800630c:	f043 0302 	orr.w	r3, r3, #2
 8006310:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	b2d2      	uxtb	r2, r2
 800631a:	4611      	mov	r1, r2
 800631c:	4618      	mov	r0, r3
 800631e:	f005 fd56 	bl	800bdce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	4413      	add	r3, r2
 800632a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800632e:	461a      	mov	r2, r3
 8006330:	2310      	movs	r3, #16
 8006332:	6093      	str	r3, [r2, #8]
}
 8006334:	e19e      	b.n	8006674 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	4413      	add	r3, r2
 800633e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006348:	2b80      	cmp	r3, #128	; 0x80
 800634a:	d12b      	bne.n	80063a4 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	015a      	lsls	r2, r3, #5
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	4413      	add	r3, r2
 8006354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	0151      	lsls	r1, r2, #5
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	440a      	add	r2, r1
 8006362:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006366:	f043 0302 	orr.w	r3, r3, #2
 800636a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	b2d2      	uxtb	r2, r2
 8006374:	4611      	mov	r1, r2
 8006376:	4618      	mov	r0, r3
 8006378:	f005 fd29 	bl	800bdce <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800637c:	6879      	ldr	r1, [r7, #4]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	4613      	mov	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4413      	add	r3, r2
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	440b      	add	r3, r1
 800638a:	335d      	adds	r3, #93	; 0x5d
 800638c:	2206      	movs	r2, #6
 800638e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	4413      	add	r3, r2
 8006398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800639c:	461a      	mov	r2, r3
 800639e:	2380      	movs	r3, #128	; 0x80
 80063a0:	6093      	str	r3, [r2, #8]
}
 80063a2:	e167      	b.n	8006674 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ba:	d135      	bne.n	8006428 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	0151      	lsls	r1, r2, #5
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	440a      	add	r2, r1
 80063d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063d6:	f043 0302 	orr.w	r3, r3, #2
 80063da:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	b2d2      	uxtb	r2, r2
 80063e4:	4611      	mov	r1, r2
 80063e6:	4618      	mov	r0, r3
 80063e8:	f005 fcf1 	bl	800bdce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f8:	461a      	mov	r2, r3
 80063fa:	2310      	movs	r3, #16
 80063fc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	4413      	add	r3, r2
 8006406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800640a:	461a      	mov	r2, r3
 800640c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006410:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006412:	6879      	ldr	r1, [r7, #4]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	4613      	mov	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	4413      	add	r3, r2
 800641c:	00db      	lsls	r3, r3, #3
 800641e:	440b      	add	r3, r1
 8006420:	335d      	adds	r3, #93	; 0x5d
 8006422:	2208      	movs	r2, #8
 8006424:	701a      	strb	r2, [r3, #0]
}
 8006426:	e125      	b.n	8006674 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	4413      	add	r3, r2
 8006430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b02      	cmp	r3, #2
 800643c:	f040 811a 	bne.w	8006674 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	4413      	add	r3, r2
 8006448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	0151      	lsls	r1, r2, #5
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	440a      	add	r2, r1
 8006456:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800645a:	f023 0302 	bic.w	r3, r3, #2
 800645e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006460:	6879      	ldr	r1, [r7, #4]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	4613      	mov	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4413      	add	r3, r2
 800646a:	00db      	lsls	r3, r3, #3
 800646c:	440b      	add	r3, r1
 800646e:	335d      	adds	r3, #93	; 0x5d
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d137      	bne.n	80064e6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006476:	6879      	ldr	r1, [r7, #4]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	4613      	mov	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4413      	add	r3, r2
 8006480:	00db      	lsls	r3, r3, #3
 8006482:	440b      	add	r3, r1
 8006484:	335c      	adds	r3, #92	; 0x5c
 8006486:	2201      	movs	r2, #1
 8006488:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800648a:	6879      	ldr	r1, [r7, #4]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	4613      	mov	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	00db      	lsls	r3, r3, #3
 8006496:	440b      	add	r3, r1
 8006498:	333f      	adds	r3, #63	; 0x3f
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	2b02      	cmp	r3, #2
 800649e:	d00b      	beq.n	80064b8 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80064a0:	6879      	ldr	r1, [r7, #4]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	4613      	mov	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	00db      	lsls	r3, r3, #3
 80064ac:	440b      	add	r3, r1
 80064ae:	333f      	adds	r3, #63	; 0x3f
 80064b0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80064b2:	2b03      	cmp	r3, #3
 80064b4:	f040 80c5 	bne.w	8006642 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80064b8:	6879      	ldr	r1, [r7, #4]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	4613      	mov	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	00db      	lsls	r3, r3, #3
 80064c4:	440b      	add	r3, r1
 80064c6:	3351      	adds	r3, #81	; 0x51
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	f083 0301 	eor.w	r3, r3, #1
 80064ce:	b2d8      	uxtb	r0, r3
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	4613      	mov	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	440b      	add	r3, r1
 80064de:	3351      	adds	r3, #81	; 0x51
 80064e0:	4602      	mov	r2, r0
 80064e2:	701a      	strb	r2, [r3, #0]
 80064e4:	e0ad      	b.n	8006642 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80064e6:	6879      	ldr	r1, [r7, #4]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	4613      	mov	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	440b      	add	r3, r1
 80064f4:	335d      	adds	r3, #93	; 0x5d
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	2b03      	cmp	r3, #3
 80064fa:	d10a      	bne.n	8006512 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80064fc:	6879      	ldr	r1, [r7, #4]
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	4613      	mov	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	00db      	lsls	r3, r3, #3
 8006508:	440b      	add	r3, r1
 800650a:	335c      	adds	r3, #92	; 0x5c
 800650c:	2202      	movs	r2, #2
 800650e:	701a      	strb	r2, [r3, #0]
 8006510:	e097      	b.n	8006642 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006512:	6879      	ldr	r1, [r7, #4]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	4613      	mov	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4413      	add	r3, r2
 800651c:	00db      	lsls	r3, r3, #3
 800651e:	440b      	add	r3, r1
 8006520:	335d      	adds	r3, #93	; 0x5d
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	2b04      	cmp	r3, #4
 8006526:	d10a      	bne.n	800653e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006528:	6879      	ldr	r1, [r7, #4]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	4613      	mov	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	440b      	add	r3, r1
 8006536:	335c      	adds	r3, #92	; 0x5c
 8006538:	2202      	movs	r2, #2
 800653a:	701a      	strb	r2, [r3, #0]
 800653c:	e081      	b.n	8006642 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800653e:	6879      	ldr	r1, [r7, #4]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	4613      	mov	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	00db      	lsls	r3, r3, #3
 800654a:	440b      	add	r3, r1
 800654c:	335d      	adds	r3, #93	; 0x5d
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	2b05      	cmp	r3, #5
 8006552:	d10a      	bne.n	800656a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006554:	6879      	ldr	r1, [r7, #4]
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	4613      	mov	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4413      	add	r3, r2
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	440b      	add	r3, r1
 8006562:	335c      	adds	r3, #92	; 0x5c
 8006564:	2205      	movs	r2, #5
 8006566:	701a      	strb	r2, [r3, #0]
 8006568:	e06b      	b.n	8006642 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800656a:	6879      	ldr	r1, [r7, #4]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	4613      	mov	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	00db      	lsls	r3, r3, #3
 8006576:	440b      	add	r3, r1
 8006578:	335d      	adds	r3, #93	; 0x5d
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	2b06      	cmp	r3, #6
 800657e:	d00a      	beq.n	8006596 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006580:	6879      	ldr	r1, [r7, #4]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	4613      	mov	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	00db      	lsls	r3, r3, #3
 800658c:	440b      	add	r3, r1
 800658e:	335d      	adds	r3, #93	; 0x5d
 8006590:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006592:	2b08      	cmp	r3, #8
 8006594:	d155      	bne.n	8006642 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	4613      	mov	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4413      	add	r3, r2
 80065a0:	00db      	lsls	r3, r3, #3
 80065a2:	440b      	add	r3, r1
 80065a4:	3358      	adds	r3, #88	; 0x58
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	1c59      	adds	r1, r3, #1
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	4613      	mov	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	00db      	lsls	r3, r3, #3
 80065b6:	4403      	add	r3, r0
 80065b8:	3358      	adds	r3, #88	; 0x58
 80065ba:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80065bc:	6879      	ldr	r1, [r7, #4]
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	4613      	mov	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	00db      	lsls	r3, r3, #3
 80065c8:	440b      	add	r3, r1
 80065ca:	3358      	adds	r3, #88	; 0x58
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b03      	cmp	r3, #3
 80065d0:	d914      	bls.n	80065fc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80065d2:	6879      	ldr	r1, [r7, #4]
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	4613      	mov	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	00db      	lsls	r3, r3, #3
 80065de:	440b      	add	r3, r1
 80065e0:	3358      	adds	r3, #88	; 0x58
 80065e2:	2200      	movs	r2, #0
 80065e4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80065e6:	6879      	ldr	r1, [r7, #4]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	4613      	mov	r3, r2
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	4413      	add	r3, r2
 80065f0:	00db      	lsls	r3, r3, #3
 80065f2:	440b      	add	r3, r1
 80065f4:	335c      	adds	r3, #92	; 0x5c
 80065f6:	2204      	movs	r2, #4
 80065f8:	701a      	strb	r2, [r3, #0]
 80065fa:	e009      	b.n	8006610 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80065fc:	6879      	ldr	r1, [r7, #4]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	4613      	mov	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4413      	add	r3, r2
 8006606:	00db      	lsls	r3, r3, #3
 8006608:	440b      	add	r3, r1
 800660a:	335c      	adds	r3, #92	; 0x5c
 800660c:	2202      	movs	r2, #2
 800660e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	4413      	add	r3, r2
 8006618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006626:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800662e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	4413      	add	r3, r2
 8006638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800663c:	461a      	mov	r2, r3
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	4413      	add	r3, r2
 800664a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800664e:	461a      	mov	r2, r3
 8006650:	2302      	movs	r3, #2
 8006652:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	b2d8      	uxtb	r0, r3
 8006658:	6879      	ldr	r1, [r7, #4]
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	4613      	mov	r3, r2
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	4413      	add	r3, r2
 8006662:	00db      	lsls	r3, r3, #3
 8006664:	440b      	add	r3, r1
 8006666:	335c      	adds	r3, #92	; 0x5c
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	461a      	mov	r2, r3
 800666c:	4601      	mov	r1, r0
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f00d fae4 	bl	8013c3c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006674:	bf00      	nop
 8006676:	3718      	adds	r7, #24
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b08a      	sub	sp, #40	; 0x28
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	f003 030f 	and.w	r3, r3, #15
 800669c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	0c5b      	lsrs	r3, r3, #17
 80066a2:	f003 030f 	and.w	r3, r3, #15
 80066a6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	091b      	lsrs	r3, r3, #4
 80066ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066b0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d003      	beq.n	80066c0 <HCD_RXQLVL_IRQHandler+0x44>
 80066b8:	2b05      	cmp	r3, #5
 80066ba:	f000 8082 	beq.w	80067c2 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80066be:	e083      	b.n	80067c8 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d07f      	beq.n	80067c6 <HCD_RXQLVL_IRQHandler+0x14a>
 80066c6:	6879      	ldr	r1, [r7, #4]
 80066c8:	69ba      	ldr	r2, [r7, #24]
 80066ca:	4613      	mov	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4413      	add	r3, r2
 80066d0:	00db      	lsls	r3, r3, #3
 80066d2:	440b      	add	r3, r1
 80066d4:	3344      	adds	r3, #68	; 0x44
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d074      	beq.n	80067c6 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6818      	ldr	r0, [r3, #0]
 80066e0:	6879      	ldr	r1, [r7, #4]
 80066e2:	69ba      	ldr	r2, [r7, #24]
 80066e4:	4613      	mov	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	00db      	lsls	r3, r3, #3
 80066ec:	440b      	add	r3, r1
 80066ee:	3344      	adds	r3, #68	; 0x44
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	b292      	uxth	r2, r2
 80066f6:	4619      	mov	r1, r3
 80066f8:	f004 ff0d 	bl	800b516 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80066fc:	6879      	ldr	r1, [r7, #4]
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	4613      	mov	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	00db      	lsls	r3, r3, #3
 8006708:	440b      	add	r3, r1
 800670a:	3344      	adds	r3, #68	; 0x44
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	18d1      	adds	r1, r2, r3
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	4613      	mov	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	00db      	lsls	r3, r3, #3
 800671e:	4403      	add	r3, r0
 8006720:	3344      	adds	r3, #68	; 0x44
 8006722:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8006724:	6879      	ldr	r1, [r7, #4]
 8006726:	69ba      	ldr	r2, [r7, #24]
 8006728:	4613      	mov	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	440b      	add	r3, r1
 8006732:	334c      	adds	r3, #76	; 0x4c
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	18d1      	adds	r1, r2, r3
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	69ba      	ldr	r2, [r7, #24]
 800673e:	4613      	mov	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	00db      	lsls	r3, r3, #3
 8006746:	4403      	add	r3, r0
 8006748:	334c      	adds	r3, #76	; 0x4c
 800674a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	015a      	lsls	r2, r3, #5
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	4413      	add	r3, r2
 8006754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006758:	691a      	ldr	r2, [r3, #16]
 800675a:	4b1d      	ldr	r3, [pc, #116]	; (80067d0 <HCD_RXQLVL_IRQHandler+0x154>)
 800675c:	4013      	ands	r3, r2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d031      	beq.n	80067c6 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	015a      	lsls	r2, r3, #5
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	4413      	add	r3, r2
 800676a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006778:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006780:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	015a      	lsls	r2, r3, #5
 8006786:	6a3b      	ldr	r3, [r7, #32]
 8006788:	4413      	add	r3, r2
 800678a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800678e:	461a      	mov	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006794:	6879      	ldr	r1, [r7, #4]
 8006796:	69ba      	ldr	r2, [r7, #24]
 8006798:	4613      	mov	r3, r2
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	00db      	lsls	r3, r3, #3
 80067a0:	440b      	add	r3, r1
 80067a2:	3350      	adds	r3, #80	; 0x50
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	f083 0301 	eor.w	r3, r3, #1
 80067aa:	b2d8      	uxtb	r0, r3
 80067ac:	6879      	ldr	r1, [r7, #4]
 80067ae:	69ba      	ldr	r2, [r7, #24]
 80067b0:	4613      	mov	r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	00db      	lsls	r3, r3, #3
 80067b8:	440b      	add	r3, r1
 80067ba:	3350      	adds	r3, #80	; 0x50
 80067bc:	4602      	mov	r2, r0
 80067be:	701a      	strb	r2, [r3, #0]
      break;
 80067c0:	e001      	b.n	80067c6 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80067c2:	bf00      	nop
 80067c4:	e000      	b.n	80067c8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80067c6:	bf00      	nop
  }
}
 80067c8:	bf00      	nop
 80067ca:	3728      	adds	r7, #40	; 0x28
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	1ff80000 	.word	0x1ff80000

080067d4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006800:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f003 0302 	and.w	r3, r3, #2
 8006808:	2b02      	cmp	r3, #2
 800680a:	d10b      	bne.n	8006824 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b01      	cmp	r3, #1
 8006814:	d102      	bne.n	800681c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f00d f9f4 	bl	8013c04 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f043 0302 	orr.w	r3, r3, #2
 8006822:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f003 0308 	and.w	r3, r3, #8
 800682a:	2b08      	cmp	r3, #8
 800682c:	d132      	bne.n	8006894 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	f043 0308 	orr.w	r3, r3, #8
 8006834:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f003 0304 	and.w	r3, r3, #4
 800683c:	2b04      	cmp	r3, #4
 800683e:	d126      	bne.n	800688e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	2b02      	cmp	r3, #2
 8006846:	d113      	bne.n	8006870 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800684e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006852:	d106      	bne.n	8006862 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2102      	movs	r1, #2
 800685a:	4618      	mov	r0, r3
 800685c:	f004 ff90 	bl	800b780 <USB_InitFSLSPClkSel>
 8006860:	e011      	b.n	8006886 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2101      	movs	r1, #1
 8006868:	4618      	mov	r0, r3
 800686a:	f004 ff89 	bl	800b780 <USB_InitFSLSPClkSel>
 800686e:	e00a      	b.n	8006886 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d106      	bne.n	8006886 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800687e:	461a      	mov	r2, r3
 8006880:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006884:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f00d f9ea 	bl	8013c60 <HAL_HCD_PortEnabled_Callback>
 800688c:	e002      	b.n	8006894 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f00d f9f4 	bl	8013c7c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f003 0320 	and.w	r3, r3, #32
 800689a:	2b20      	cmp	r3, #32
 800689c:	d103      	bne.n	80068a6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	f043 0320 	orr.w	r3, r3, #32
 80068a4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80068ac:	461a      	mov	r2, r3
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	6013      	str	r3, [r2, #0]
}
 80068b2:	bf00      	nop
 80068b4:	3718      	adds	r7, #24
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
	...

080068bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e11f      	b.n	8006b0e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d106      	bne.n	80068e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7fb f956 	bl	8001b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2224      	movs	r2, #36	; 0x24
 80068ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f022 0201 	bic.w	r2, r2, #1
 80068fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800690e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800691e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006920:	f001 f80e 	bl	8007940 <HAL_RCC_GetPCLK1Freq>
 8006924:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	4a7b      	ldr	r2, [pc, #492]	; (8006b18 <HAL_I2C_Init+0x25c>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d807      	bhi.n	8006940 <HAL_I2C_Init+0x84>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4a7a      	ldr	r2, [pc, #488]	; (8006b1c <HAL_I2C_Init+0x260>)
 8006934:	4293      	cmp	r3, r2
 8006936:	bf94      	ite	ls
 8006938:	2301      	movls	r3, #1
 800693a:	2300      	movhi	r3, #0
 800693c:	b2db      	uxtb	r3, r3
 800693e:	e006      	b.n	800694e <HAL_I2C_Init+0x92>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4a77      	ldr	r2, [pc, #476]	; (8006b20 <HAL_I2C_Init+0x264>)
 8006944:	4293      	cmp	r3, r2
 8006946:	bf94      	ite	ls
 8006948:	2301      	movls	r3, #1
 800694a:	2300      	movhi	r3, #0
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e0db      	b.n	8006b0e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	4a72      	ldr	r2, [pc, #456]	; (8006b24 <HAL_I2C_Init+0x268>)
 800695a:	fba2 2303 	umull	r2, r3, r2, r3
 800695e:	0c9b      	lsrs	r3, r3, #18
 8006960:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	430a      	orrs	r2, r1
 8006974:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6a1b      	ldr	r3, [r3, #32]
 800697c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	4a64      	ldr	r2, [pc, #400]	; (8006b18 <HAL_I2C_Init+0x25c>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d802      	bhi.n	8006990 <HAL_I2C_Init+0xd4>
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	3301      	adds	r3, #1
 800698e:	e009      	b.n	80069a4 <HAL_I2C_Init+0xe8>
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006996:	fb02 f303 	mul.w	r3, r2, r3
 800699a:	4a63      	ldr	r2, [pc, #396]	; (8006b28 <HAL_I2C_Init+0x26c>)
 800699c:	fba2 2303 	umull	r2, r3, r2, r3
 80069a0:	099b      	lsrs	r3, r3, #6
 80069a2:	3301      	adds	r3, #1
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6812      	ldr	r2, [r2, #0]
 80069a8:	430b      	orrs	r3, r1
 80069aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80069b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	4956      	ldr	r1, [pc, #344]	; (8006b18 <HAL_I2C_Init+0x25c>)
 80069c0:	428b      	cmp	r3, r1
 80069c2:	d80d      	bhi.n	80069e0 <HAL_I2C_Init+0x124>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	1e59      	subs	r1, r3, #1
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	005b      	lsls	r3, r3, #1
 80069ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80069d2:	3301      	adds	r3, #1
 80069d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069d8:	2b04      	cmp	r3, #4
 80069da:	bf38      	it	cc
 80069dc:	2304      	movcc	r3, #4
 80069de:	e04f      	b.n	8006a80 <HAL_I2C_Init+0x1c4>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d111      	bne.n	8006a0c <HAL_I2C_Init+0x150>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	1e58      	subs	r0, r3, #1
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6859      	ldr	r1, [r3, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	005b      	lsls	r3, r3, #1
 80069f4:	440b      	add	r3, r1
 80069f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80069fa:	3301      	adds	r3, #1
 80069fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	bf0c      	ite	eq
 8006a04:	2301      	moveq	r3, #1
 8006a06:	2300      	movne	r3, #0
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	e012      	b.n	8006a32 <HAL_I2C_Init+0x176>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	1e58      	subs	r0, r3, #1
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6859      	ldr	r1, [r3, #4]
 8006a14:	460b      	mov	r3, r1
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	440b      	add	r3, r1
 8006a1a:	0099      	lsls	r1, r3, #2
 8006a1c:	440b      	add	r3, r1
 8006a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a22:	3301      	adds	r3, #1
 8006a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	bf0c      	ite	eq
 8006a2c:	2301      	moveq	r3, #1
 8006a2e:	2300      	movne	r3, #0
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d001      	beq.n	8006a3a <HAL_I2C_Init+0x17e>
 8006a36:	2301      	movs	r3, #1
 8006a38:	e022      	b.n	8006a80 <HAL_I2C_Init+0x1c4>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10e      	bne.n	8006a60 <HAL_I2C_Init+0x1a4>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	1e58      	subs	r0, r3, #1
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6859      	ldr	r1, [r3, #4]
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	005b      	lsls	r3, r3, #1
 8006a4e:	440b      	add	r3, r1
 8006a50:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a54:	3301      	adds	r3, #1
 8006a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a5e:	e00f      	b.n	8006a80 <HAL_I2C_Init+0x1c4>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	1e58      	subs	r0, r3, #1
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6859      	ldr	r1, [r3, #4]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	440b      	add	r3, r1
 8006a6e:	0099      	lsls	r1, r3, #2
 8006a70:	440b      	add	r3, r1
 8006a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a76:	3301      	adds	r3, #1
 8006a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a80:	6879      	ldr	r1, [r7, #4]
 8006a82:	6809      	ldr	r1, [r1, #0]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	69da      	ldr	r2, [r3, #28]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	431a      	orrs	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006aae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	6911      	ldr	r1, [r2, #16]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	68d2      	ldr	r2, [r2, #12]
 8006aba:	4311      	orrs	r1, r2
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	6812      	ldr	r2, [r2, #0]
 8006ac0:	430b      	orrs	r3, r1
 8006ac2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	695a      	ldr	r2, [r3, #20]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	430a      	orrs	r2, r1
 8006ade:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f042 0201 	orr.w	r2, r2, #1
 8006aee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	000186a0 	.word	0x000186a0
 8006b1c:	001e847f 	.word	0x001e847f
 8006b20:	003d08ff 	.word	0x003d08ff
 8006b24:	431bde83 	.word	0x431bde83
 8006b28:	10624dd3 	.word	0x10624dd3

08006b2c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b088      	sub	sp, #32
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e154      	b.n	8006de8 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d109      	bne.n	8006b5e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a98      	ldr	r2, [pc, #608]	; (8006db8 <HAL_I2S_Init+0x28c>)
 8006b56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f7fb f863 	bl	8001c24 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2202      	movs	r2, #2
 8006b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	69db      	ldr	r3, [r3, #28]
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	6812      	ldr	r2, [r2, #0]
 8006b70:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006b74:	f023 030f 	bic.w	r3, r3, #15
 8006b78:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2202      	movs	r2, #2
 8006b80:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d06f      	beq.n	8006c6a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d102      	bne.n	8006b98 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006b92:	2310      	movs	r3, #16
 8006b94:	617b      	str	r3, [r7, #20]
 8006b96:	e001      	b.n	8006b9c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006b98:	2320      	movs	r3, #32
 8006b9a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	2b20      	cmp	r3, #32
 8006ba2:	d802      	bhi.n	8006baa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	005b      	lsls	r3, r3, #1
 8006ba8:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a83      	ldr	r2, [pc, #524]	; (8006dbc <HAL_I2S_Init+0x290>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d004      	beq.n	8006bbe <HAL_I2S_Init+0x92>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a81      	ldr	r2, [pc, #516]	; (8006dc0 <HAL_I2S_Init+0x294>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d104      	bne.n	8006bc8 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8006bbe:	2001      	movs	r0, #1
 8006bc0:	f001 f9a4 	bl	8007f0c <HAL_RCCEx_GetPeriphCLKFreq>
 8006bc4:	60f8      	str	r0, [r7, #12]
 8006bc6:	e003      	b.n	8006bd0 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8006bc8:	2002      	movs	r0, #2
 8006bca:	f001 f99f 	bl	8007f0c <HAL_RCCEx_GetPeriphCLKFreq>
 8006bce:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bd8:	d125      	bne.n	8006c26 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d010      	beq.n	8006c04 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006bec:	4613      	mov	r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	005b      	lsls	r3, r3, #1
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bfe:	3305      	adds	r3, #5
 8006c00:	613b      	str	r3, [r7, #16]
 8006c02:	e01f      	b.n	8006c44 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	00db      	lsls	r3, r3, #3
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c0e:	4613      	mov	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	005b      	lsls	r3, r3, #1
 8006c16:	461a      	mov	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c20:	3305      	adds	r3, #5
 8006c22:	613b      	str	r3, [r7, #16]
 8006c24:	e00e      	b.n	8006c44 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c2e:	4613      	mov	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	461a      	mov	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c40:	3305      	adds	r3, #5
 8006c42:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	4a5f      	ldr	r2, [pc, #380]	; (8006dc4 <HAL_I2S_Init+0x298>)
 8006c48:	fba2 2303 	umull	r2, r3, r2, r3
 8006c4c:	08db      	lsrs	r3, r3, #3
 8006c4e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	085b      	lsrs	r3, r3, #1
 8006c60:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	021b      	lsls	r3, r3, #8
 8006c66:	61bb      	str	r3, [r7, #24]
 8006c68:	e003      	b.n	8006c72 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d902      	bls.n	8006c7e <HAL_I2S_Init+0x152>
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	2bff      	cmp	r3, #255	; 0xff
 8006c7c:	d907      	bls.n	8006c8e <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c82:	f043 0210 	orr.w	r2, r3, #16
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e0ac      	b.n	8006de8 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	691a      	ldr	r2, [r3, #16]
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	ea42 0103 	orr.w	r1, r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	69fa      	ldr	r2, [r7, #28]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69db      	ldr	r3, [r3, #28]
 8006ca8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006cac:	f023 030f 	bic.w	r3, r3, #15
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	6851      	ldr	r1, [r2, #4]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	6892      	ldr	r2, [r2, #8]
 8006cb8:	4311      	orrs	r1, r2
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	68d2      	ldr	r2, [r2, #12]
 8006cbe:	4311      	orrs	r1, r2
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	6992      	ldr	r2, [r2, #24]
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cd0:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	2b30      	cmp	r3, #48	; 0x30
 8006cd8:	d003      	beq.n	8006ce2 <HAL_I2S_Init+0x1b6>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	2bb0      	cmp	r3, #176	; 0xb0
 8006ce0:	d107      	bne.n	8006cf2 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	69da      	ldr	r2, [r3, #28]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006cf0:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d16e      	bne.n	8006dd8 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a32      	ldr	r2, [pc, #200]	; (8006dc8 <HAL_I2S_Init+0x29c>)
 8006cfe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a2d      	ldr	r2, [pc, #180]	; (8006dbc <HAL_I2S_Init+0x290>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d101      	bne.n	8006d0e <HAL_I2S_Init+0x1e2>
 8006d0a:	4b30      	ldr	r3, [pc, #192]	; (8006dcc <HAL_I2S_Init+0x2a0>)
 8006d0c:	e001      	b.n	8006d12 <HAL_I2S_Init+0x1e6>
 8006d0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d12:	69db      	ldr	r3, [r3, #28]
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	6812      	ldr	r2, [r2, #0]
 8006d18:	4928      	ldr	r1, [pc, #160]	; (8006dbc <HAL_I2S_Init+0x290>)
 8006d1a:	428a      	cmp	r2, r1
 8006d1c:	d101      	bne.n	8006d22 <HAL_I2S_Init+0x1f6>
 8006d1e:	4a2b      	ldr	r2, [pc, #172]	; (8006dcc <HAL_I2S_Init+0x2a0>)
 8006d20:	e001      	b.n	8006d26 <HAL_I2S_Init+0x1fa>
 8006d22:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006d26:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006d2a:	f023 030f 	bic.w	r3, r3, #15
 8006d2e:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a21      	ldr	r2, [pc, #132]	; (8006dbc <HAL_I2S_Init+0x290>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d101      	bne.n	8006d3e <HAL_I2S_Init+0x212>
 8006d3a:	4b24      	ldr	r3, [pc, #144]	; (8006dcc <HAL_I2S_Init+0x2a0>)
 8006d3c:	e001      	b.n	8006d42 <HAL_I2S_Init+0x216>
 8006d3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d42:	2202      	movs	r2, #2
 8006d44:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a1c      	ldr	r2, [pc, #112]	; (8006dbc <HAL_I2S_Init+0x290>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d101      	bne.n	8006d54 <HAL_I2S_Init+0x228>
 8006d50:	4b1e      	ldr	r3, [pc, #120]	; (8006dcc <HAL_I2S_Init+0x2a0>)
 8006d52:	e001      	b.n	8006d58 <HAL_I2S_Init+0x22c>
 8006d54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d58:	69db      	ldr	r3, [r3, #28]
 8006d5a:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d64:	d003      	beq.n	8006d6e <HAL_I2S_Init+0x242>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d103      	bne.n	8006d76 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d72:	613b      	str	r3, [r7, #16]
 8006d74:	e001      	b.n	8006d7a <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006d76:	2300      	movs	r3, #0
 8006d78:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	b299      	uxth	r1, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8006d90:	4303      	orrs	r3, r0
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	430b      	orrs	r3, r1
 8006d96:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	897b      	ldrh	r3, [r7, #10]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006da6:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a03      	ldr	r2, [pc, #12]	; (8006dbc <HAL_I2S_Init+0x290>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d10e      	bne.n	8006dd0 <HAL_I2S_Init+0x2a4>
 8006db2:	4b06      	ldr	r3, [pc, #24]	; (8006dcc <HAL_I2S_Init+0x2a0>)
 8006db4:	e00e      	b.n	8006dd4 <HAL_I2S_Init+0x2a8>
 8006db6:	bf00      	nop
 8006db8:	08006eab 	.word	0x08006eab
 8006dbc:	40003800 	.word	0x40003800
 8006dc0:	40003c00 	.word	0x40003c00
 8006dc4:	cccccccd 	.word	0xcccccccd
 8006dc8:	08006fc1 	.word	0x08006fc1
 8006dcc:	40003400 	.word	0x40003400
 8006dd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006dd4:	897a      	ldrh	r2, [r7, #10]
 8006dd6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3720      	adds	r7, #32
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	881a      	ldrh	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e08:	1c9a      	adds	r2, r3, #2
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	3b01      	subs	r3, #1
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10e      	bne.n	8006e44 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006e34:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7fc f878 	bl	8002f34 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006e44:	bf00      	nop
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68da      	ldr	r2, [r3, #12]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5e:	b292      	uxth	r2, r2
 8006e60:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e66:	1c9a      	adds	r2, r3, #2
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	3b01      	subs	r3, #1
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10e      	bne.n	8006ea2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	685a      	ldr	r2, [r3, #4]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006e92:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7fc f86b 	bl	8002f78 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006ea2:	bf00      	nop
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b086      	sub	sp, #24
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b04      	cmp	r3, #4
 8006ec4:	d13a      	bne.n	8006f3c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f003 0301 	and.w	r3, r3, #1
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d109      	bne.n	8006ee4 <I2S_IRQHandler+0x3a>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eda:	2b40      	cmp	r3, #64	; 0x40
 8006edc:	d102      	bne.n	8006ee4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7ff ffb4 	bl	8006e4c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eea:	2b40      	cmp	r3, #64	; 0x40
 8006eec:	d126      	bne.n	8006f3c <I2S_IRQHandler+0x92>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f003 0320 	and.w	r3, r3, #32
 8006ef8:	2b20      	cmp	r3, #32
 8006efa:	d11f      	bne.n	8006f3c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f0a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	613b      	str	r3, [r7, #16]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	613b      	str	r3, [r7, #16]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	613b      	str	r3, [r7, #16]
 8006f20:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f2e:	f043 0202 	orr.w	r2, r3, #2
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7fc f806 	bl	8002f48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	2b03      	cmp	r3, #3
 8006f46:	d136      	bne.n	8006fb6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d109      	bne.n	8006f66 <I2S_IRQHandler+0xbc>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f5c:	2b80      	cmp	r3, #128	; 0x80
 8006f5e:	d102      	bne.n	8006f66 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f7ff ff45 	bl	8006df0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f003 0308 	and.w	r3, r3, #8
 8006f6c:	2b08      	cmp	r3, #8
 8006f6e:	d122      	bne.n	8006fb6 <I2S_IRQHandler+0x10c>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	f003 0320 	and.w	r3, r3, #32
 8006f7a:	2b20      	cmp	r3, #32
 8006f7c:	d11b      	bne.n	8006fb6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	685a      	ldr	r2, [r3, #4]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006f8c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006f8e:	2300      	movs	r3, #0
 8006f90:	60fb      	str	r3, [r7, #12]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	60fb      	str	r3, [r7, #12]
 8006f9a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fa8:	f043 0204 	orr.w	r2, r3, #4
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f7fb ffc9 	bl	8002f48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006fb6:	bf00      	nop
 8006fb8:	3718      	adds	r7, #24
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
	...

08006fc0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b088      	sub	sp, #32
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4aa2      	ldr	r2, [pc, #648]	; (8007260 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d101      	bne.n	8006fde <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006fda:	4ba2      	ldr	r3, [pc, #648]	; (8007264 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006fdc:	e001      	b.n	8006fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006fde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a9b      	ldr	r2, [pc, #620]	; (8007260 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d101      	bne.n	8006ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006ff8:	4b9a      	ldr	r3, [pc, #616]	; (8007264 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006ffa:	e001      	b.n	8007000 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006ffc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800700c:	d004      	beq.n	8007018 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	f040 8099 	bne.w	800714a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	f003 0302 	and.w	r3, r3, #2
 800701e:	2b02      	cmp	r3, #2
 8007020:	d107      	bne.n	8007032 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007028:	2b00      	cmp	r3, #0
 800702a:	d002      	beq.n	8007032 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f925 	bl	800727c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	2b01      	cmp	r3, #1
 800703a:	d107      	bne.n	800704c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007042:	2b00      	cmp	r3, #0
 8007044:	d002      	beq.n	800704c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f9c8 	bl	80073dc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007052:	2b40      	cmp	r3, #64	; 0x40
 8007054:	d13a      	bne.n	80070cc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	f003 0320 	and.w	r3, r3, #32
 800705c:	2b00      	cmp	r3, #0
 800705e:	d035      	beq.n	80070cc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a7e      	ldr	r2, [pc, #504]	; (8007260 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d101      	bne.n	800706e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800706a:	4b7e      	ldr	r3, [pc, #504]	; (8007264 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800706c:	e001      	b.n	8007072 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800706e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4979      	ldr	r1, [pc, #484]	; (8007260 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800707a:	428b      	cmp	r3, r1
 800707c:	d101      	bne.n	8007082 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800707e:	4b79      	ldr	r3, [pc, #484]	; (8007264 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007080:	e001      	b.n	8007086 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8007082:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007086:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800708a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800709a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800709c:	2300      	movs	r3, #0
 800709e:	60fb      	str	r3, [r7, #12]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	60fb      	str	r3, [r7, #12]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	60fb      	str	r3, [r7, #12]
 80070b0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070be:	f043 0202 	orr.w	r2, r3, #2
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7fb ff3e 	bl	8002f48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	f003 0308 	and.w	r3, r3, #8
 80070d2:	2b08      	cmp	r3, #8
 80070d4:	f040 80be 	bne.w	8007254 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	f003 0320 	and.w	r3, r3, #32
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f000 80b8 	beq.w	8007254 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	685a      	ldr	r2, [r3, #4]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80070f2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a59      	ldr	r2, [pc, #356]	; (8007260 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d101      	bne.n	8007102 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80070fe:	4b59      	ldr	r3, [pc, #356]	; (8007264 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007100:	e001      	b.n	8007106 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8007102:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4954      	ldr	r1, [pc, #336]	; (8007260 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800710e:	428b      	cmp	r3, r1
 8007110:	d101      	bne.n	8007116 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8007112:	4b54      	ldr	r3, [pc, #336]	; (8007264 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007114:	e001      	b.n	800711a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007116:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800711a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800711e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007120:	2300      	movs	r3, #0
 8007122:	60bb      	str	r3, [r7, #8]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	60bb      	str	r3, [r7, #8]
 800712c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800713a:	f043 0204 	orr.w	r2, r3, #4
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7fb ff00 	bl	8002f48 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007148:	e084      	b.n	8007254 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	f003 0302 	and.w	r3, r3, #2
 8007150:	2b02      	cmp	r3, #2
 8007152:	d107      	bne.n	8007164 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800715a:	2b00      	cmp	r3, #0
 800715c:	d002      	beq.n	8007164 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f8be 	bl	80072e0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	f003 0301 	and.w	r3, r3, #1
 800716a:	2b01      	cmp	r3, #1
 800716c:	d107      	bne.n	800717e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007174:	2b00      	cmp	r3, #0
 8007176:	d002      	beq.n	800717e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f8fd 	bl	8007378 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007184:	2b40      	cmp	r3, #64	; 0x40
 8007186:	d12f      	bne.n	80071e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f003 0320 	and.w	r3, r3, #32
 800718e:	2b00      	cmp	r3, #0
 8007190:	d02a      	beq.n	80071e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	685a      	ldr	r2, [r3, #4]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80071a0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a2e      	ldr	r2, [pc, #184]	; (8007260 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d101      	bne.n	80071b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80071ac:	4b2d      	ldr	r3, [pc, #180]	; (8007264 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80071ae:	e001      	b.n	80071b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80071b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4929      	ldr	r1, [pc, #164]	; (8007260 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80071bc:	428b      	cmp	r3, r1
 80071be:	d101      	bne.n	80071c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80071c0:	4b28      	ldr	r3, [pc, #160]	; (8007264 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80071c2:	e001      	b.n	80071c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80071c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80071cc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071da:	f043 0202 	orr.w	r2, r3, #2
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7fb feb0 	bl	8002f48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	f003 0308 	and.w	r3, r3, #8
 80071ee:	2b08      	cmp	r3, #8
 80071f0:	d131      	bne.n	8007256 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	f003 0320 	and.w	r3, r3, #32
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d02c      	beq.n	8007256 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a17      	ldr	r2, [pc, #92]	; (8007260 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d101      	bne.n	800720a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007206:	4b17      	ldr	r3, [pc, #92]	; (8007264 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007208:	e001      	b.n	800720e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800720a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800720e:	685a      	ldr	r2, [r3, #4]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4912      	ldr	r1, [pc, #72]	; (8007260 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007216:	428b      	cmp	r3, r1
 8007218:	d101      	bne.n	800721e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800721a:	4b12      	ldr	r3, [pc, #72]	; (8007264 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800721c:	e001      	b.n	8007222 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800721e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007222:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007226:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	685a      	ldr	r2, [r3, #4]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007236:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007244:	f043 0204 	orr.w	r2, r3, #4
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7fb fe7b 	bl	8002f48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007252:	e000      	b.n	8007256 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007254:	bf00      	nop
}
 8007256:	bf00      	nop
 8007258:	3720      	adds	r7, #32
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	40003800 	.word	0x40003800
 8007264:	40003400 	.word	0x40003400

08007268 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	1c99      	adds	r1, r3, #2
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	6251      	str	r1, [r2, #36]	; 0x24
 800728e:	881a      	ldrh	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800729a:	b29b      	uxth	r3, r3
 800729c:	3b01      	subs	r3, #1
 800729e:	b29a      	uxth	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d113      	bne.n	80072d6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	685a      	ldr	r2, [r3, #4]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80072bc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d106      	bne.n	80072d6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7ff ffc9 	bl	8007268 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80072d6:	bf00      	nop
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
	...

080072e0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ec:	1c99      	adds	r1, r3, #2
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	6251      	str	r1, [r2, #36]	; 0x24
 80072f2:	8819      	ldrh	r1, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a1d      	ldr	r2, [pc, #116]	; (8007370 <I2SEx_TxISR_I2SExt+0x90>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d101      	bne.n	8007302 <I2SEx_TxISR_I2SExt+0x22>
 80072fe:	4b1d      	ldr	r3, [pc, #116]	; (8007374 <I2SEx_TxISR_I2SExt+0x94>)
 8007300:	e001      	b.n	8007306 <I2SEx_TxISR_I2SExt+0x26>
 8007302:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007306:	460a      	mov	r2, r1
 8007308:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800730e:	b29b      	uxth	r3, r3
 8007310:	3b01      	subs	r3, #1
 8007312:	b29a      	uxth	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800731c:	b29b      	uxth	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d121      	bne.n	8007366 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a12      	ldr	r2, [pc, #72]	; (8007370 <I2SEx_TxISR_I2SExt+0x90>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d101      	bne.n	8007330 <I2SEx_TxISR_I2SExt+0x50>
 800732c:	4b11      	ldr	r3, [pc, #68]	; (8007374 <I2SEx_TxISR_I2SExt+0x94>)
 800732e:	e001      	b.n	8007334 <I2SEx_TxISR_I2SExt+0x54>
 8007330:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007334:	685a      	ldr	r2, [r3, #4]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	490d      	ldr	r1, [pc, #52]	; (8007370 <I2SEx_TxISR_I2SExt+0x90>)
 800733c:	428b      	cmp	r3, r1
 800733e:	d101      	bne.n	8007344 <I2SEx_TxISR_I2SExt+0x64>
 8007340:	4b0c      	ldr	r3, [pc, #48]	; (8007374 <I2SEx_TxISR_I2SExt+0x94>)
 8007342:	e001      	b.n	8007348 <I2SEx_TxISR_I2SExt+0x68>
 8007344:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007348:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800734c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007352:	b29b      	uxth	r3, r3
 8007354:	2b00      	cmp	r3, #0
 8007356:	d106      	bne.n	8007366 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f7ff ff81 	bl	8007268 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007366:	bf00      	nop
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	40003800 	.word	0x40003800
 8007374:	40003400 	.word	0x40003400

08007378 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68d8      	ldr	r0, [r3, #12]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738a:	1c99      	adds	r1, r3, #2
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007390:	b282      	uxth	r2, r0
 8007392:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007398:	b29b      	uxth	r3, r3
 800739a:	3b01      	subs	r3, #1
 800739c:	b29a      	uxth	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d113      	bne.n	80073d4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80073ba:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d106      	bne.n	80073d4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2201      	movs	r2, #1
 80073ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7ff ff4a 	bl	8007268 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80073d4:	bf00      	nop
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a20      	ldr	r2, [pc, #128]	; (800746c <I2SEx_RxISR_I2SExt+0x90>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d101      	bne.n	80073f2 <I2SEx_RxISR_I2SExt+0x16>
 80073ee:	4b20      	ldr	r3, [pc, #128]	; (8007470 <I2SEx_RxISR_I2SExt+0x94>)
 80073f0:	e001      	b.n	80073f6 <I2SEx_RxISR_I2SExt+0x1a>
 80073f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073f6:	68d8      	ldr	r0, [r3, #12]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fc:	1c99      	adds	r1, r3, #2
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007402:	b282      	uxth	r2, r0
 8007404:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800740a:	b29b      	uxth	r3, r3
 800740c:	3b01      	subs	r3, #1
 800740e:	b29a      	uxth	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007418:	b29b      	uxth	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d121      	bne.n	8007462 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a12      	ldr	r2, [pc, #72]	; (800746c <I2SEx_RxISR_I2SExt+0x90>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d101      	bne.n	800742c <I2SEx_RxISR_I2SExt+0x50>
 8007428:	4b11      	ldr	r3, [pc, #68]	; (8007470 <I2SEx_RxISR_I2SExt+0x94>)
 800742a:	e001      	b.n	8007430 <I2SEx_RxISR_I2SExt+0x54>
 800742c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007430:	685a      	ldr	r2, [r3, #4]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	490d      	ldr	r1, [pc, #52]	; (800746c <I2SEx_RxISR_I2SExt+0x90>)
 8007438:	428b      	cmp	r3, r1
 800743a:	d101      	bne.n	8007440 <I2SEx_RxISR_I2SExt+0x64>
 800743c:	4b0c      	ldr	r3, [pc, #48]	; (8007470 <I2SEx_RxISR_I2SExt+0x94>)
 800743e:	e001      	b.n	8007444 <I2SEx_RxISR_I2SExt+0x68>
 8007440:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007444:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007448:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800744e:	b29b      	uxth	r3, r3
 8007450:	2b00      	cmp	r3, #0
 8007452:	d106      	bne.n	8007462 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f7ff ff03 	bl	8007268 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007462:	bf00      	nop
 8007464:	3708      	adds	r7, #8
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	40003800 	.word	0x40003800
 8007470:	40003400 	.word	0x40003400

08007474 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af02      	add	r7, sp, #8
 800747a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800747c:	f7fc fb14 	bl	8003aa8 <HAL_GetTick>
 8007480:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d101      	bne.n	800748c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e069      	b.n	8007560 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10b      	bne.n	80074b0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f7fa fc79 	bl	8001d98 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80074a6:	f241 3188 	movw	r1, #5000	; 0x1388
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f85e 	bl	800756c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	3b01      	subs	r3, #1
 80074c0:	021a      	lsls	r2, r3, #8
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	430a      	orrs	r2, r1
 80074c8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	2120      	movs	r1, #32
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f856 	bl	8007588 <QSPI_WaitFlagStateUntilTimeout>
 80074dc:	4603      	mov	r3, r0
 80074de:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80074e0:	7afb      	ldrb	r3, [r7, #11]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d137      	bne.n	8007556 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80074f0:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	6852      	ldr	r2, [r2, #4]
 80074f8:	0611      	lsls	r1, r2, #24
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	68d2      	ldr	r2, [r2, #12]
 80074fe:	4311      	orrs	r1, r2
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	69d2      	ldr	r2, [r2, #28]
 8007504:	4311      	orrs	r1, r2
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	6a12      	ldr	r2, [r2, #32]
 800750a:	4311      	orrs	r1, r2
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	6812      	ldr	r2, [r2, #0]
 8007510:	430b      	orrs	r3, r1
 8007512:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	4b13      	ldr	r3, [pc, #76]	; (8007568 <HAL_QSPI_Init+0xf4>)
 800751c:	4013      	ands	r3, r2
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	6912      	ldr	r2, [r2, #16]
 8007522:	0411      	lsls	r1, r2, #16
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	6952      	ldr	r2, [r2, #20]
 8007528:	4311      	orrs	r1, r2
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	6992      	ldr	r2, [r2, #24]
 800752e:	4311      	orrs	r1, r2
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	6812      	ldr	r2, [r2, #0]
 8007534:	430b      	orrs	r3, r1
 8007536:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f042 0201 	orr.w	r2, r2, #1
 8007546:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800755e:	7afb      	ldrb	r3, [r7, #11]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	ffe0f8fe 	.word	0xffe0f8fe

0800756c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	603b      	str	r3, [r7, #0]
 8007594:	4613      	mov	r3, r2
 8007596:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007598:	e01a      	b.n	80075d0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a0:	d016      	beq.n	80075d0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075a2:	f7fc fa81 	bl	8003aa8 <HAL_GetTick>
 80075a6:	4602      	mov	r2, r0
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	69ba      	ldr	r2, [r7, #24]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d302      	bcc.n	80075b8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10b      	bne.n	80075d0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2204      	movs	r2, #4
 80075bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c4:	f043 0201 	orr.w	r2, r3, #1
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e00e      	b.n	80075ee <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	689a      	ldr	r2, [r3, #8]
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	4013      	ands	r3, r2
 80075da:	2b00      	cmp	r3, #0
 80075dc:	bf14      	ite	ne
 80075de:	2301      	movne	r3, #1
 80075e0:	2300      	moveq	r3, #0
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	461a      	mov	r2, r3
 80075e6:	79fb      	ldrb	r3, [r7, #7]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d1d6      	bne.n	800759a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
	...

080075f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d101      	bne.n	800760c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e0cc      	b.n	80077a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800760c:	4b68      	ldr	r3, [pc, #416]	; (80077b0 <HAL_RCC_ClockConfig+0x1b8>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 030f 	and.w	r3, r3, #15
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	429a      	cmp	r2, r3
 8007618:	d90c      	bls.n	8007634 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800761a:	4b65      	ldr	r3, [pc, #404]	; (80077b0 <HAL_RCC_ClockConfig+0x1b8>)
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	b2d2      	uxtb	r2, r2
 8007620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007622:	4b63      	ldr	r3, [pc, #396]	; (80077b0 <HAL_RCC_ClockConfig+0x1b8>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 030f 	and.w	r3, r3, #15
 800762a:	683a      	ldr	r2, [r7, #0]
 800762c:	429a      	cmp	r2, r3
 800762e:	d001      	beq.n	8007634 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e0b8      	b.n	80077a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0302 	and.w	r3, r3, #2
 800763c:	2b00      	cmp	r3, #0
 800763e:	d020      	beq.n	8007682 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0304 	and.w	r3, r3, #4
 8007648:	2b00      	cmp	r3, #0
 800764a:	d005      	beq.n	8007658 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800764c:	4b59      	ldr	r3, [pc, #356]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	4a58      	ldr	r2, [pc, #352]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007652:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007656:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0308 	and.w	r3, r3, #8
 8007660:	2b00      	cmp	r3, #0
 8007662:	d005      	beq.n	8007670 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007664:	4b53      	ldr	r3, [pc, #332]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	4a52      	ldr	r2, [pc, #328]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 800766a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800766e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007670:	4b50      	ldr	r3, [pc, #320]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	494d      	ldr	r1, [pc, #308]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 800767e:	4313      	orrs	r3, r2
 8007680:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0301 	and.w	r3, r3, #1
 800768a:	2b00      	cmp	r3, #0
 800768c:	d044      	beq.n	8007718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d107      	bne.n	80076a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007696:	4b47      	ldr	r3, [pc, #284]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d119      	bne.n	80076d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e07f      	b.n	80077a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d003      	beq.n	80076b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076b2:	2b03      	cmp	r3, #3
 80076b4:	d107      	bne.n	80076c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076b6:	4b3f      	ldr	r3, [pc, #252]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d109      	bne.n	80076d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e06f      	b.n	80077a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076c6:	4b3b      	ldr	r3, [pc, #236]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0302 	and.w	r3, r3, #2
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d101      	bne.n	80076d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e067      	b.n	80077a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076d6:	4b37      	ldr	r3, [pc, #220]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f023 0203 	bic.w	r2, r3, #3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	4934      	ldr	r1, [pc, #208]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80076e8:	f7fc f9de 	bl	8003aa8 <HAL_GetTick>
 80076ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076ee:	e00a      	b.n	8007706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076f0:	f7fc f9da 	bl	8003aa8 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80076fe:	4293      	cmp	r3, r2
 8007700:	d901      	bls.n	8007706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e04f      	b.n	80077a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007706:	4b2b      	ldr	r3, [pc, #172]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f003 020c 	and.w	r2, r3, #12
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	429a      	cmp	r2, r3
 8007716:	d1eb      	bne.n	80076f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007718:	4b25      	ldr	r3, [pc, #148]	; (80077b0 <HAL_RCC_ClockConfig+0x1b8>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 030f 	and.w	r3, r3, #15
 8007720:	683a      	ldr	r2, [r7, #0]
 8007722:	429a      	cmp	r2, r3
 8007724:	d20c      	bcs.n	8007740 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007726:	4b22      	ldr	r3, [pc, #136]	; (80077b0 <HAL_RCC_ClockConfig+0x1b8>)
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	b2d2      	uxtb	r2, r2
 800772c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800772e:	4b20      	ldr	r3, [pc, #128]	; (80077b0 <HAL_RCC_ClockConfig+0x1b8>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 030f 	and.w	r3, r3, #15
 8007736:	683a      	ldr	r2, [r7, #0]
 8007738:	429a      	cmp	r2, r3
 800773a:	d001      	beq.n	8007740 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e032      	b.n	80077a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0304 	and.w	r3, r3, #4
 8007748:	2b00      	cmp	r3, #0
 800774a:	d008      	beq.n	800775e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800774c:	4b19      	ldr	r3, [pc, #100]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	4916      	ldr	r1, [pc, #88]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 800775a:	4313      	orrs	r3, r2
 800775c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 0308 	and.w	r3, r3, #8
 8007766:	2b00      	cmp	r3, #0
 8007768:	d009      	beq.n	800777e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800776a:	4b12      	ldr	r3, [pc, #72]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	00db      	lsls	r3, r3, #3
 8007778:	490e      	ldr	r1, [pc, #56]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 800777a:	4313      	orrs	r3, r2
 800777c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800777e:	f000 f821 	bl	80077c4 <HAL_RCC_GetSysClockFreq>
 8007782:	4601      	mov	r1, r0
 8007784:	4b0b      	ldr	r3, [pc, #44]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	091b      	lsrs	r3, r3, #4
 800778a:	f003 030f 	and.w	r3, r3, #15
 800778e:	4a0a      	ldr	r2, [pc, #40]	; (80077b8 <HAL_RCC_ClockConfig+0x1c0>)
 8007790:	5cd3      	ldrb	r3, [r2, r3]
 8007792:	fa21 f303 	lsr.w	r3, r1, r3
 8007796:	4a09      	ldr	r2, [pc, #36]	; (80077bc <HAL_RCC_ClockConfig+0x1c4>)
 8007798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800779a:	4b09      	ldr	r3, [pc, #36]	; (80077c0 <HAL_RCC_ClockConfig+0x1c8>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fa fd24 	bl	80021ec <HAL_InitTick>

  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	40023c00 	.word	0x40023c00
 80077b4:	40023800 	.word	0x40023800
 80077b8:	08014af4 	.word	0x08014af4
 80077bc:	20000004 	.word	0x20000004
 80077c0:	20000060 	.word	0x20000060

080077c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80077ca:	2300      	movs	r3, #0
 80077cc:	607b      	str	r3, [r7, #4]
 80077ce:	2300      	movs	r3, #0
 80077d0:	60fb      	str	r3, [r7, #12]
 80077d2:	2300      	movs	r3, #0
 80077d4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80077d6:	2300      	movs	r3, #0
 80077d8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077da:	4b50      	ldr	r3, [pc, #320]	; (800791c <HAL_RCC_GetSysClockFreq+0x158>)
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f003 030c 	and.w	r3, r3, #12
 80077e2:	2b04      	cmp	r3, #4
 80077e4:	d007      	beq.n	80077f6 <HAL_RCC_GetSysClockFreq+0x32>
 80077e6:	2b08      	cmp	r3, #8
 80077e8:	d008      	beq.n	80077fc <HAL_RCC_GetSysClockFreq+0x38>
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f040 808d 	bne.w	800790a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80077f0:	4b4b      	ldr	r3, [pc, #300]	; (8007920 <HAL_RCC_GetSysClockFreq+0x15c>)
 80077f2:	60bb      	str	r3, [r7, #8]
       break;
 80077f4:	e08c      	b.n	8007910 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80077f6:	4b4b      	ldr	r3, [pc, #300]	; (8007924 <HAL_RCC_GetSysClockFreq+0x160>)
 80077f8:	60bb      	str	r3, [r7, #8]
      break;
 80077fa:	e089      	b.n	8007910 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077fc:	4b47      	ldr	r3, [pc, #284]	; (800791c <HAL_RCC_GetSysClockFreq+0x158>)
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007804:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007806:	4b45      	ldr	r3, [pc, #276]	; (800791c <HAL_RCC_GetSysClockFreq+0x158>)
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800780e:	2b00      	cmp	r3, #0
 8007810:	d023      	beq.n	800785a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007812:	4b42      	ldr	r3, [pc, #264]	; (800791c <HAL_RCC_GetSysClockFreq+0x158>)
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	099b      	lsrs	r3, r3, #6
 8007818:	f04f 0400 	mov.w	r4, #0
 800781c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007820:	f04f 0200 	mov.w	r2, #0
 8007824:	ea03 0501 	and.w	r5, r3, r1
 8007828:	ea04 0602 	and.w	r6, r4, r2
 800782c:	4a3d      	ldr	r2, [pc, #244]	; (8007924 <HAL_RCC_GetSysClockFreq+0x160>)
 800782e:	fb02 f106 	mul.w	r1, r2, r6
 8007832:	2200      	movs	r2, #0
 8007834:	fb02 f205 	mul.w	r2, r2, r5
 8007838:	440a      	add	r2, r1
 800783a:	493a      	ldr	r1, [pc, #232]	; (8007924 <HAL_RCC_GetSysClockFreq+0x160>)
 800783c:	fba5 0101 	umull	r0, r1, r5, r1
 8007840:	1853      	adds	r3, r2, r1
 8007842:	4619      	mov	r1, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f04f 0400 	mov.w	r4, #0
 800784a:	461a      	mov	r2, r3
 800784c:	4623      	mov	r3, r4
 800784e:	f7f8 fd37 	bl	80002c0 <__aeabi_uldivmod>
 8007852:	4603      	mov	r3, r0
 8007854:	460c      	mov	r4, r1
 8007856:	60fb      	str	r3, [r7, #12]
 8007858:	e049      	b.n	80078ee <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800785a:	4b30      	ldr	r3, [pc, #192]	; (800791c <HAL_RCC_GetSysClockFreq+0x158>)
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	099b      	lsrs	r3, r3, #6
 8007860:	f04f 0400 	mov.w	r4, #0
 8007864:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007868:	f04f 0200 	mov.w	r2, #0
 800786c:	ea03 0501 	and.w	r5, r3, r1
 8007870:	ea04 0602 	and.w	r6, r4, r2
 8007874:	4629      	mov	r1, r5
 8007876:	4632      	mov	r2, r6
 8007878:	f04f 0300 	mov.w	r3, #0
 800787c:	f04f 0400 	mov.w	r4, #0
 8007880:	0154      	lsls	r4, r2, #5
 8007882:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007886:	014b      	lsls	r3, r1, #5
 8007888:	4619      	mov	r1, r3
 800788a:	4622      	mov	r2, r4
 800788c:	1b49      	subs	r1, r1, r5
 800788e:	eb62 0206 	sbc.w	r2, r2, r6
 8007892:	f04f 0300 	mov.w	r3, #0
 8007896:	f04f 0400 	mov.w	r4, #0
 800789a:	0194      	lsls	r4, r2, #6
 800789c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80078a0:	018b      	lsls	r3, r1, #6
 80078a2:	1a5b      	subs	r3, r3, r1
 80078a4:	eb64 0402 	sbc.w	r4, r4, r2
 80078a8:	f04f 0100 	mov.w	r1, #0
 80078ac:	f04f 0200 	mov.w	r2, #0
 80078b0:	00e2      	lsls	r2, r4, #3
 80078b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80078b6:	00d9      	lsls	r1, r3, #3
 80078b8:	460b      	mov	r3, r1
 80078ba:	4614      	mov	r4, r2
 80078bc:	195b      	adds	r3, r3, r5
 80078be:	eb44 0406 	adc.w	r4, r4, r6
 80078c2:	f04f 0100 	mov.w	r1, #0
 80078c6:	f04f 0200 	mov.w	r2, #0
 80078ca:	02a2      	lsls	r2, r4, #10
 80078cc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80078d0:	0299      	lsls	r1, r3, #10
 80078d2:	460b      	mov	r3, r1
 80078d4:	4614      	mov	r4, r2
 80078d6:	4618      	mov	r0, r3
 80078d8:	4621      	mov	r1, r4
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f04f 0400 	mov.w	r4, #0
 80078e0:	461a      	mov	r2, r3
 80078e2:	4623      	mov	r3, r4
 80078e4:	f7f8 fcec 	bl	80002c0 <__aeabi_uldivmod>
 80078e8:	4603      	mov	r3, r0
 80078ea:	460c      	mov	r4, r1
 80078ec:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80078ee:	4b0b      	ldr	r3, [pc, #44]	; (800791c <HAL_RCC_GetSysClockFreq+0x158>)
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	0c1b      	lsrs	r3, r3, #16
 80078f4:	f003 0303 	and.w	r3, r3, #3
 80078f8:	3301      	adds	r3, #1
 80078fa:	005b      	lsls	r3, r3, #1
 80078fc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	fbb2 f3f3 	udiv	r3, r2, r3
 8007906:	60bb      	str	r3, [r7, #8]
      break;
 8007908:	e002      	b.n	8007910 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800790a:	4b05      	ldr	r3, [pc, #20]	; (8007920 <HAL_RCC_GetSysClockFreq+0x15c>)
 800790c:	60bb      	str	r3, [r7, #8]
      break;
 800790e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007910:	68bb      	ldr	r3, [r7, #8]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800791a:	bf00      	nop
 800791c:	40023800 	.word	0x40023800
 8007920:	00f42400 	.word	0x00f42400
 8007924:	017d7840 	.word	0x017d7840

08007928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007928:	b480      	push	{r7}
 800792a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800792c:	4b03      	ldr	r3, [pc, #12]	; (800793c <HAL_RCC_GetHCLKFreq+0x14>)
 800792e:	681b      	ldr	r3, [r3, #0]
}
 8007930:	4618      	mov	r0, r3
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	20000004 	.word	0x20000004

08007940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007944:	f7ff fff0 	bl	8007928 <HAL_RCC_GetHCLKFreq>
 8007948:	4601      	mov	r1, r0
 800794a:	4b05      	ldr	r3, [pc, #20]	; (8007960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	0a9b      	lsrs	r3, r3, #10
 8007950:	f003 0307 	and.w	r3, r3, #7
 8007954:	4a03      	ldr	r2, [pc, #12]	; (8007964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007956:	5cd3      	ldrb	r3, [r2, r3]
 8007958:	fa21 f303 	lsr.w	r3, r1, r3
}
 800795c:	4618      	mov	r0, r3
 800795e:	bd80      	pop	{r7, pc}
 8007960:	40023800 	.word	0x40023800
 8007964:	08014b04 	.word	0x08014b04

08007968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800796c:	f7ff ffdc 	bl	8007928 <HAL_RCC_GetHCLKFreq>
 8007970:	4601      	mov	r1, r0
 8007972:	4b05      	ldr	r3, [pc, #20]	; (8007988 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	0b5b      	lsrs	r3, r3, #13
 8007978:	f003 0307 	and.w	r3, r3, #7
 800797c:	4a03      	ldr	r2, [pc, #12]	; (800798c <HAL_RCC_GetPCLK2Freq+0x24>)
 800797e:	5cd3      	ldrb	r3, [r2, r3]
 8007980:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007984:	4618      	mov	r0, r3
 8007986:	bd80      	pop	{r7, pc}
 8007988:	40023800 	.word	0x40023800
 800798c:	08014b04 	.word	0x08014b04

08007990 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	220f      	movs	r2, #15
 800799e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80079a0:	4b12      	ldr	r3, [pc, #72]	; (80079ec <HAL_RCC_GetClockConfig+0x5c>)
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	f003 0203 	and.w	r2, r3, #3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80079ac:	4b0f      	ldr	r3, [pc, #60]	; (80079ec <HAL_RCC_GetClockConfig+0x5c>)
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80079b8:	4b0c      	ldr	r3, [pc, #48]	; (80079ec <HAL_RCC_GetClockConfig+0x5c>)
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80079c4:	4b09      	ldr	r3, [pc, #36]	; (80079ec <HAL_RCC_GetClockConfig+0x5c>)
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	08db      	lsrs	r3, r3, #3
 80079ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80079d2:	4b07      	ldr	r3, [pc, #28]	; (80079f0 <HAL_RCC_GetClockConfig+0x60>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 020f 	and.w	r2, r3, #15
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	601a      	str	r2, [r3, #0]
}
 80079de:	bf00      	nop
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	40023800 	.word	0x40023800
 80079f0:	40023c00 	.word	0x40023c00

080079f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b088      	sub	sp, #32
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8007a00:	2300      	movs	r3, #0
 8007a02:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8007a04:	2300      	movs	r3, #0
 8007a06:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0301 	and.w	r3, r3, #1
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d010      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8007a18:	4b7a      	ldr	r3, [pc, #488]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a1e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	69db      	ldr	r3, [r3, #28]
 8007a26:	4977      	ldr	r1, [pc, #476]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	69db      	ldr	r3, [r3, #28]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d101      	bne.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8007a36:	2301      	movs	r3, #1
 8007a38:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0302 	and.w	r3, r3, #2
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d010      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8007a46:	4b6f      	ldr	r3, [pc, #444]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a4c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a1b      	ldr	r3, [r3, #32]
 8007a54:	496b      	ldr	r1, [pc, #428]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007a56:	4313      	orrs	r3, r2
 8007a58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a1b      	ldr	r3, [r3, #32]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8007a64:	2301      	movs	r3, #1
 8007a66:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d022      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8007a74:	4b63      	ldr	r3, [pc, #396]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a82:	4960      	ldr	r1, [pc, #384]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007a84:	4313      	orrs	r3, r2
 8007a86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8007a92:	2301      	movs	r3, #1
 8007a94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a9e:	d10c      	bne.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8007aa0:	4b58      	ldr	r3, [pc, #352]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007aa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aa6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	021b      	lsls	r3, r3, #8
 8007ab2:	4954      	ldr	r1, [pc, #336]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d022      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8007ac6:	4b4f      	ldr	r3, [pc, #316]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007acc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ad4:	494b      	ldr	r1, [pc, #300]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d101      	bne.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007af0:	d10c      	bne.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8007af2:	4b44      	ldr	r3, [pc, #272]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007af8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	695b      	ldr	r3, [r3, #20]
 8007b00:	3b01      	subs	r3, #1
 8007b02:	021b      	lsls	r3, r3, #8
 8007b04:	493f      	ldr	r1, [pc, #252]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0308 	and.w	r3, r3, #8
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 808a 	beq.w	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	60fb      	str	r3, [r7, #12]
 8007b1e:	4b39      	ldr	r3, [pc, #228]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b22:	4a38      	ldr	r2, [pc, #224]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b28:	6413      	str	r3, [r2, #64]	; 0x40
 8007b2a:	4b36      	ldr	r3, [pc, #216]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b32:	60fb      	str	r3, [r7, #12]
 8007b34:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007b36:	4b34      	ldr	r3, [pc, #208]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a33      	ldr	r2, [pc, #204]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b40:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007b42:	f7fb ffb1 	bl	8003aa8 <HAL_GetTick>
 8007b46:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007b48:	e008      	b.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007b4a:	f7fb ffad 	bl	8003aa8 <HAL_GetTick>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d901      	bls.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e1d1      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007b5c:	4b2a      	ldr	r3, [pc, #168]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d0f0      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007b68:	4b26      	ldr	r3, [pc, #152]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b70:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d02f      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b80:	697a      	ldr	r2, [r7, #20]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d028      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b86:	4b1f      	ldr	r3, [pc, #124]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b8e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b90:	4b1e      	ldr	r3, [pc, #120]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8007b92:	2201      	movs	r2, #1
 8007b94:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b96:	4b1d      	ldr	r3, [pc, #116]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007b9c:	4a19      	ldr	r2, [pc, #100]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007ba2:	4b18      	ldr	r3, [pc, #96]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d114      	bne.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007bae:	f7fb ff7b 	bl	8003aa8 <HAL_GetTick>
 8007bb2:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bb4:	e00a      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007bb6:	f7fb ff77 	bl	8003aa8 <HAL_GetTick>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d901      	bls.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e199      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bcc:	4b0d      	ldr	r3, [pc, #52]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bd0:	f003 0302 	and.w	r3, r3, #2
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d0ee      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007be0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007be4:	d114      	bne.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8007be6:	4b07      	ldr	r3, [pc, #28]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bfa:	4902      	ldr	r1, [pc, #8]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	608b      	str	r3, [r1, #8]
 8007c00:	e00c      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x228>
 8007c02:	bf00      	nop
 8007c04:	40023800 	.word	0x40023800
 8007c08:	40007000 	.word	0x40007000
 8007c0c:	42470e40 	.word	0x42470e40
 8007c10:	4b89      	ldr	r3, [pc, #548]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	4a88      	ldr	r2, [pc, #544]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007c16:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007c1a:	6093      	str	r3, [r2, #8]
 8007c1c:	4b86      	ldr	r3, [pc, #536]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007c1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c28:	4983      	ldr	r1, [pc, #524]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0304 	and.w	r3, r3, #4
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d004      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8007c40:	4b7e      	ldr	r3, [pc, #504]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8007c42:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0310 	and.w	r3, r3, #16
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00a      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8007c50:	4b79      	ldr	r3, [pc, #484]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5e:	4976      	ldr	r1, [pc, #472]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007c60:	4313      	orrs	r3, r2
 8007c62:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 0320 	and.w	r3, r3, #32
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d011      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007c72:	4b71      	ldr	r3, [pc, #452]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c78:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c80:	496d      	ldr	r1, [pc, #436]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007c82:	4313      	orrs	r3, r2
 8007c84:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c90:	d101      	bne.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8007c92:	2301      	movs	r3, #1
 8007c94:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00a      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8007ca2:	4b65      	ldr	r3, [pc, #404]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ca8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb0:	4961      	ldr	r1, [pc, #388]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d004      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2b80      	cmp	r3, #128	; 0x80
 8007cc4:	f040 80c6 	bne.w	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007cc8:	4b5d      	ldr	r3, [pc, #372]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8007cca:	2200      	movs	r2, #0
 8007ccc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007cce:	f7fb feeb 	bl	8003aa8 <HAL_GetTick>
 8007cd2:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007cd4:	e008      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007cd6:	f7fb fee7 	bl	8003aa8 <HAL_GetTick>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	d901      	bls.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	e10b      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ce8:	4b53      	ldr	r3, [pc, #332]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1f0      	bne.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8007cf4:	4a53      	ldr	r2, [pc, #332]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cfa:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d003      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	69db      	ldr	r3, [r3, #28]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d023      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d003      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a1b      	ldr	r3, [r3, #32]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d019      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d004      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d38:	d00e      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d019      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d115      	bne.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x386>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d56:	d110      	bne.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	019b      	lsls	r3, r3, #6
 8007d62:	431a      	orrs	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	061b      	lsls	r3, r3, #24
 8007d6a:	431a      	orrs	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	071b      	lsls	r3, r3, #28
 8007d72:	4931      	ldr	r1, [pc, #196]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007d74:	4313      	orrs	r3, r2
 8007d76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d003      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d009      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d026      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d122      	bne.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007da2:	4b25      	ldr	r3, [pc, #148]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007da8:	0e1b      	lsrs	r3, r3, #24
 8007daa:	f003 030f 	and.w	r3, r3, #15
 8007dae:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	685a      	ldr	r2, [r3, #4]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	019b      	lsls	r3, r3, #6
 8007dba:	431a      	orrs	r2, r3
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	061b      	lsls	r3, r3, #24
 8007dc0:	431a      	orrs	r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	071b      	lsls	r3, r3, #28
 8007dc8:	491b      	ldr	r1, [pc, #108]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8007dd0:	4b19      	ldr	r3, [pc, #100]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007dd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dd6:	f023 021f 	bic.w	r2, r3, #31
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	699b      	ldr	r3, [r3, #24]
 8007dde:	3b01      	subs	r3, #1
 8007de0:	4915      	ldr	r1, [pc, #84]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d010      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	685a      	ldr	r2, [r3, #4]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	019b      	lsls	r3, r3, #6
 8007dfe:	431a      	orrs	r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	061b      	lsls	r3, r3, #24
 8007e06:	431a      	orrs	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	071b      	lsls	r3, r3, #28
 8007e0e:	490a      	ldr	r1, [pc, #40]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007e10:	4313      	orrs	r3, r2
 8007e12:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007e16:	4b0a      	ldr	r3, [pc, #40]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8007e18:	2201      	movs	r2, #1
 8007e1a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007e1c:	f7fb fe44 	bl	8003aa8 <HAL_GetTick>
 8007e20:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e22:	e011      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007e24:	f7fb fe40 	bl	8003aa8 <HAL_GetTick>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d90a      	bls.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e064      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8007e36:	bf00      	nop
 8007e38:	40023800 	.word	0x40023800
 8007e3c:	424711e0 	.word	0x424711e0
 8007e40:	42470068 	.word	0x42470068
 8007e44:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e48:	4b2f      	ldr	r3, [pc, #188]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d0e7      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00a      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007e60:	4b29      	ldr	r3, [pc, #164]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e6e:	4926      	ldr	r1, [pc, #152]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007e70:	4313      	orrs	r3, r2
 8007e72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00a      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007e82:	4b21      	ldr	r3, [pc, #132]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e88:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e90:	491d      	ldr	r1, [pc, #116]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007e92:	4313      	orrs	r3, r2
 8007e94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00a      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007ea4:	4b18      	ldr	r3, [pc, #96]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eaa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb2:	4915      	ldr	r1, [pc, #84]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00a      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8007ec6:	4b10      	ldr	r3, [pc, #64]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ecc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed4:	490c      	ldr	r1, [pc, #48]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00a      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ee8:	4b07      	ldr	r3, [pc, #28]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007eee:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ef6:	4904      	ldr	r1, [pc, #16]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3720      	adds	r7, #32
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	40023800 	.word	0x40023800

08007f0c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b087      	sub	sp, #28
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007f14:	2300      	movs	r3, #0
 8007f16:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007f20:	2300      	movs	r3, #0
 8007f22:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d003      	beq.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	f000 8098 	beq.w	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8007f30:	e12d      	b.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8007f32:	4b9a      	ldr	r3, [pc, #616]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f38:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8007f3c:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f44:	d00c      	beq.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8007f46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f4a:	d802      	bhi.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00a      	beq.n	8007f66 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8007f50:	e082      	b.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007f52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f56:	d047      	beq.n	8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8007f58:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8007f5c:	d06f      	beq.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 8007f5e:	e07b      	b.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007f60:	4b8f      	ldr	r3, [pc, #572]	; (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f62:	617b      	str	r3, [r7, #20]
          break;
 8007f64:	e07b      	b.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8007f66:	4b8d      	ldr	r3, [pc, #564]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f74:	d109      	bne.n	8007f8a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007f76:	4b89      	ldr	r3, [pc, #548]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f80:	4a87      	ldr	r2, [pc, #540]	; (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f86:	613b      	str	r3, [r7, #16]
 8007f88:	e019      	b.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007f8a:	4b84      	ldr	r3, [pc, #528]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f96:	d109      	bne.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007f98:	4b80      	ldr	r3, [pc, #512]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fa2:	4a80      	ldr	r2, [pc, #512]	; (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa8:	613b      	str	r3, [r7, #16]
 8007faa:	e008      	b.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007fac:	4b7b      	ldr	r3, [pc, #492]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fb6:	4a7c      	ldr	r2, [pc, #496]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fbc:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007fbe:	4b77      	ldr	r3, [pc, #476]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fc4:	099b      	lsrs	r3, r3, #6
 8007fc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	fb02 f303 	mul.w	r3, r2, r3
 8007fd0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007fd2:	4b72      	ldr	r3, [pc, #456]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fd8:	0f1b      	lsrs	r3, r3, #28
 8007fda:	f003 0307 	and.w	r3, r3, #7
 8007fde:	68ba      	ldr	r2, [r7, #8]
 8007fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fe4:	617b      	str	r3, [r7, #20]
          break;
 8007fe6:	e03a      	b.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007fe8:	4b6c      	ldr	r3, [pc, #432]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ff0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ff4:	d108      	bne.n	8008008 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007ff6:	4b69      	ldr	r3, [pc, #420]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ffe:	4a69      	ldr	r2, [pc, #420]	; (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008000:	fbb2 f3f3 	udiv	r3, r2, r3
 8008004:	613b      	str	r3, [r7, #16]
 8008006:	e007      	b.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008008:	4b64      	ldr	r3, [pc, #400]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008010:	4a65      	ldr	r2, [pc, #404]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008012:	fbb2 f3f3 	udiv	r3, r2, r3
 8008016:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8008018:	4b60      	ldr	r3, [pc, #384]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	099b      	lsrs	r3, r3, #6
 800801e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	fb02 f303 	mul.w	r3, r2, r3
 8008028:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800802a:	4b5c      	ldr	r3, [pc, #368]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	0f1b      	lsrs	r3, r3, #28
 8008030:	f003 0307 	and.w	r3, r3, #7
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	fbb2 f3f3 	udiv	r3, r2, r3
 800803a:	617b      	str	r3, [r7, #20]
          break;
 800803c:	e00f      	b.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800803e:	4b57      	ldr	r3, [pc, #348]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800804a:	d102      	bne.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 800804c:	4b55      	ldr	r3, [pc, #340]	; (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800804e:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8008050:	e005      	b.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 8008052:	4b55      	ldr	r3, [pc, #340]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008054:	617b      	str	r3, [r7, #20]
          break;
 8008056:	e002      	b.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008058:	2300      	movs	r3, #0
 800805a:	617b      	str	r3, [r7, #20]
          break;
 800805c:	bf00      	nop
        }
      }
      break;
 800805e:	e096      	b.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8008060:	4b4e      	ldr	r3, [pc, #312]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008066:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800806a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008072:	d00c      	beq.n	800808e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8008074:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008078:	d802      	bhi.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00a      	beq.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800807e:	e082      	b.n	8008186 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8008080:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008084:	d047      	beq.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008086:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800808a:	d06f      	beq.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800808c:	e07b      	b.n	8008186 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800808e:	4b44      	ldr	r3, [pc, #272]	; (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008090:	617b      	str	r3, [r7, #20]
          break;
 8008092:	e07b      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8008094:	4b41      	ldr	r3, [pc, #260]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008096:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800809a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800809e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080a2:	d109      	bne.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80080a4:	4b3d      	ldr	r3, [pc, #244]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80080a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080ae:	4a3c      	ldr	r2, [pc, #240]	; (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80080b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b4:	613b      	str	r3, [r7, #16]
 80080b6:	e019      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80080b8:	4b38      	ldr	r3, [pc, #224]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080c4:	d109      	bne.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80080c6:	4b35      	ldr	r3, [pc, #212]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80080c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080d0:	4a34      	ldr	r2, [pc, #208]	; (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80080d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80080d6:	613b      	str	r3, [r7, #16]
 80080d8:	e008      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80080da:	4b30      	ldr	r3, [pc, #192]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80080dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080e4:	4a30      	ldr	r2, [pc, #192]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80080e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ea:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80080ec:	4b2b      	ldr	r3, [pc, #172]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80080ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080f2:	099b      	lsrs	r3, r3, #6
 80080f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	fb02 f303 	mul.w	r3, r2, r3
 80080fe:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008100:	4b26      	ldr	r3, [pc, #152]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008106:	0f1b      	lsrs	r3, r3, #28
 8008108:	f003 0307 	and.w	r3, r3, #7
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008112:	617b      	str	r3, [r7, #20]
          break;
 8008114:	e03a      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008116:	4b21      	ldr	r3, [pc, #132]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800811e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008122:	d108      	bne.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008124:	4b1d      	ldr	r3, [pc, #116]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800812c:	4a1d      	ldr	r2, [pc, #116]	; (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800812e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008132:	613b      	str	r3, [r7, #16]
 8008134:	e007      	b.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008136:	4b19      	ldr	r3, [pc, #100]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800813e:	4a1a      	ldr	r2, [pc, #104]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008140:	fbb2 f3f3 	udiv	r3, r2, r3
 8008144:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8008146:	4b15      	ldr	r3, [pc, #84]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	099b      	lsrs	r3, r3, #6
 800814c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	fb02 f303 	mul.w	r3, r2, r3
 8008156:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8008158:	4b10      	ldr	r3, [pc, #64]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	0f1b      	lsrs	r3, r3, #28
 800815e:	f003 0307 	and.w	r3, r3, #7
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	fbb2 f3f3 	udiv	r3, r2, r3
 8008168:	617b      	str	r3, [r7, #20]
          break;
 800816a:	e00f      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800816c:	4b0b      	ldr	r3, [pc, #44]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008174:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008178:	d102      	bne.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 800817a:	4b0a      	ldr	r3, [pc, #40]	; (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800817c:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800817e:	e005      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 8008180:	4b09      	ldr	r3, [pc, #36]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008182:	617b      	str	r3, [r7, #20]
          break;
 8008184:	e002      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008186:	2300      	movs	r3, #0
 8008188:	617b      	str	r3, [r7, #20]
          break;
 800818a:	bf00      	nop
        }
      }
      break;
 800818c:	bf00      	nop
    }
  }
  return frequency;
 800818e:	697b      	ldr	r3, [r7, #20]
}
 8008190:	4618      	mov	r0, r3
 8008192:	371c      	adds	r7, #28
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	40023800 	.word	0x40023800
 80081a0:	00bb8000 	.word	0x00bb8000
 80081a4:	017d7840 	.word	0x017d7840
 80081a8:	00f42400 	.word	0x00f42400

080081ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80081b4:	2300      	movs	r3, #0
 80081b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 0301 	and.w	r3, r3, #1
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d075      	beq.n	80082b0 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80081c4:	4ba2      	ldr	r3, [pc, #648]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	f003 030c 	and.w	r3, r3, #12
 80081cc:	2b04      	cmp	r3, #4
 80081ce:	d00c      	beq.n	80081ea <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80081d0:	4b9f      	ldr	r3, [pc, #636]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80081d8:	2b08      	cmp	r3, #8
 80081da:	d112      	bne.n	8008202 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80081dc:	4b9c      	ldr	r3, [pc, #624]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081e8:	d10b      	bne.n	8008202 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081ea:	4b99      	ldr	r3, [pc, #612]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d05b      	beq.n	80082ae <HAL_RCC_OscConfig+0x102>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d157      	bne.n	80082ae <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e20b      	b.n	800861a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800820a:	d106      	bne.n	800821a <HAL_RCC_OscConfig+0x6e>
 800820c:	4b90      	ldr	r3, [pc, #576]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a8f      	ldr	r2, [pc, #572]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 8008212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008216:	6013      	str	r3, [r2, #0]
 8008218:	e01d      	b.n	8008256 <HAL_RCC_OscConfig+0xaa>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008222:	d10c      	bne.n	800823e <HAL_RCC_OscConfig+0x92>
 8008224:	4b8a      	ldr	r3, [pc, #552]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a89      	ldr	r2, [pc, #548]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 800822a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800822e:	6013      	str	r3, [r2, #0]
 8008230:	4b87      	ldr	r3, [pc, #540]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a86      	ldr	r2, [pc, #536]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 8008236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800823a:	6013      	str	r3, [r2, #0]
 800823c:	e00b      	b.n	8008256 <HAL_RCC_OscConfig+0xaa>
 800823e:	4b84      	ldr	r3, [pc, #528]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a83      	ldr	r2, [pc, #524]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 8008244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008248:	6013      	str	r3, [r2, #0]
 800824a:	4b81      	ldr	r3, [pc, #516]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a80      	ldr	r2, [pc, #512]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 8008250:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008254:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d013      	beq.n	8008286 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800825e:	f7fb fc23 	bl	8003aa8 <HAL_GetTick>
 8008262:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008264:	e008      	b.n	8008278 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008266:	f7fb fc1f 	bl	8003aa8 <HAL_GetTick>
 800826a:	4602      	mov	r2, r0
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	2b64      	cmp	r3, #100	; 0x64
 8008272:	d901      	bls.n	8008278 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8008274:	2303      	movs	r3, #3
 8008276:	e1d0      	b.n	800861a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008278:	4b75      	ldr	r3, [pc, #468]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008280:	2b00      	cmp	r3, #0
 8008282:	d0f0      	beq.n	8008266 <HAL_RCC_OscConfig+0xba>
 8008284:	e014      	b.n	80082b0 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008286:	f7fb fc0f 	bl	8003aa8 <HAL_GetTick>
 800828a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800828c:	e008      	b.n	80082a0 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800828e:	f7fb fc0b 	bl	8003aa8 <HAL_GetTick>
 8008292:	4602      	mov	r2, r0
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	2b64      	cmp	r3, #100	; 0x64
 800829a:	d901      	bls.n	80082a0 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	e1bc      	b.n	800861a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082a0:	4b6b      	ldr	r3, [pc, #428]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1f0      	bne.n	800828e <HAL_RCC_OscConfig+0xe2>
 80082ac:	e000      	b.n	80082b0 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082ae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0302 	and.w	r3, r3, #2
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d063      	beq.n	8008384 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80082bc:	4b64      	ldr	r3, [pc, #400]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	f003 030c 	and.w	r3, r3, #12
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00b      	beq.n	80082e0 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80082c8:	4b61      	ldr	r3, [pc, #388]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80082d0:	2b08      	cmp	r3, #8
 80082d2:	d11c      	bne.n	800830e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80082d4:	4b5e      	ldr	r3, [pc, #376]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d116      	bne.n	800830e <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082e0:	4b5b      	ldr	r3, [pc, #364]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 0302 	and.w	r3, r3, #2
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d005      	beq.n	80082f8 <HAL_RCC_OscConfig+0x14c>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d001      	beq.n	80082f8 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	e190      	b.n	800861a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082f8:	4b55      	ldr	r3, [pc, #340]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	00db      	lsls	r3, r3, #3
 8008306:	4952      	ldr	r1, [pc, #328]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 8008308:	4313      	orrs	r3, r2
 800830a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800830c:	e03a      	b.n	8008384 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d020      	beq.n	8008358 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008316:	4b4f      	ldr	r3, [pc, #316]	; (8008454 <HAL_RCC_OscConfig+0x2a8>)
 8008318:	2201      	movs	r2, #1
 800831a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800831c:	f7fb fbc4 	bl	8003aa8 <HAL_GetTick>
 8008320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008322:	e008      	b.n	8008336 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008324:	f7fb fbc0 	bl	8003aa8 <HAL_GetTick>
 8008328:	4602      	mov	r2, r0
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	1ad3      	subs	r3, r2, r3
 800832e:	2b02      	cmp	r3, #2
 8008330:	d901      	bls.n	8008336 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8008332:	2303      	movs	r3, #3
 8008334:	e171      	b.n	800861a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008336:	4b46      	ldr	r3, [pc, #280]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f003 0302 	and.w	r3, r3, #2
 800833e:	2b00      	cmp	r3, #0
 8008340:	d0f0      	beq.n	8008324 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008342:	4b43      	ldr	r3, [pc, #268]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	00db      	lsls	r3, r3, #3
 8008350:	493f      	ldr	r1, [pc, #252]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 8008352:	4313      	orrs	r3, r2
 8008354:	600b      	str	r3, [r1, #0]
 8008356:	e015      	b.n	8008384 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008358:	4b3e      	ldr	r3, [pc, #248]	; (8008454 <HAL_RCC_OscConfig+0x2a8>)
 800835a:	2200      	movs	r2, #0
 800835c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800835e:	f7fb fba3 	bl	8003aa8 <HAL_GetTick>
 8008362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008364:	e008      	b.n	8008378 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008366:	f7fb fb9f 	bl	8003aa8 <HAL_GetTick>
 800836a:	4602      	mov	r2, r0
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	1ad3      	subs	r3, r2, r3
 8008370:	2b02      	cmp	r3, #2
 8008372:	d901      	bls.n	8008378 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008374:	2303      	movs	r3, #3
 8008376:	e150      	b.n	800861a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008378:	4b35      	ldr	r3, [pc, #212]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 0302 	and.w	r3, r3, #2
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1f0      	bne.n	8008366 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 0308 	and.w	r3, r3, #8
 800838c:	2b00      	cmp	r3, #0
 800838e:	d030      	beq.n	80083f2 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	695b      	ldr	r3, [r3, #20]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d016      	beq.n	80083c6 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008398:	4b2f      	ldr	r3, [pc, #188]	; (8008458 <HAL_RCC_OscConfig+0x2ac>)
 800839a:	2201      	movs	r2, #1
 800839c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800839e:	f7fb fb83 	bl	8003aa8 <HAL_GetTick>
 80083a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083a4:	e008      	b.n	80083b8 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80083a6:	f7fb fb7f 	bl	8003aa8 <HAL_GetTick>
 80083aa:	4602      	mov	r2, r0
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d901      	bls.n	80083b8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80083b4:	2303      	movs	r3, #3
 80083b6:	e130      	b.n	800861a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083b8:	4b25      	ldr	r3, [pc, #148]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 80083ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083bc:	f003 0302 	and.w	r3, r3, #2
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d0f0      	beq.n	80083a6 <HAL_RCC_OscConfig+0x1fa>
 80083c4:	e015      	b.n	80083f2 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80083c6:	4b24      	ldr	r3, [pc, #144]	; (8008458 <HAL_RCC_OscConfig+0x2ac>)
 80083c8:	2200      	movs	r2, #0
 80083ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083cc:	f7fb fb6c 	bl	8003aa8 <HAL_GetTick>
 80083d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083d2:	e008      	b.n	80083e6 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80083d4:	f7fb fb68 	bl	8003aa8 <HAL_GetTick>
 80083d8:	4602      	mov	r2, r0
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	1ad3      	subs	r3, r2, r3
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d901      	bls.n	80083e6 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 80083e2:	2303      	movs	r3, #3
 80083e4:	e119      	b.n	800861a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083e6:	4b1a      	ldr	r3, [pc, #104]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 80083e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083ea:	f003 0302 	and.w	r3, r3, #2
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1f0      	bne.n	80083d4 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 0304 	and.w	r3, r3, #4
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f000 809f 	beq.w	800853e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008400:	2300      	movs	r3, #0
 8008402:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008404:	4b12      	ldr	r3, [pc, #72]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 8008406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d10f      	bne.n	8008430 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008410:	2300      	movs	r3, #0
 8008412:	60fb      	str	r3, [r7, #12]
 8008414:	4b0e      	ldr	r3, [pc, #56]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 8008416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008418:	4a0d      	ldr	r2, [pc, #52]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 800841a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800841e:	6413      	str	r3, [r2, #64]	; 0x40
 8008420:	4b0b      	ldr	r3, [pc, #44]	; (8008450 <HAL_RCC_OscConfig+0x2a4>)
 8008422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008428:	60fb      	str	r3, [r7, #12]
 800842a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800842c:	2301      	movs	r3, #1
 800842e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008430:	4b0a      	ldr	r3, [pc, #40]	; (800845c <HAL_RCC_OscConfig+0x2b0>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008438:	2b00      	cmp	r3, #0
 800843a:	d120      	bne.n	800847e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800843c:	4b07      	ldr	r3, [pc, #28]	; (800845c <HAL_RCC_OscConfig+0x2b0>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a06      	ldr	r2, [pc, #24]	; (800845c <HAL_RCC_OscConfig+0x2b0>)
 8008442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008446:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008448:	f7fb fb2e 	bl	8003aa8 <HAL_GetTick>
 800844c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800844e:	e010      	b.n	8008472 <HAL_RCC_OscConfig+0x2c6>
 8008450:	40023800 	.word	0x40023800
 8008454:	42470000 	.word	0x42470000
 8008458:	42470e80 	.word	0x42470e80
 800845c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008460:	f7fb fb22 	bl	8003aa8 <HAL_GetTick>
 8008464:	4602      	mov	r2, r0
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	2b02      	cmp	r3, #2
 800846c:	d901      	bls.n	8008472 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800846e:	2303      	movs	r3, #3
 8008470:	e0d3      	b.n	800861a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008472:	4b6c      	ldr	r3, [pc, #432]	; (8008624 <HAL_RCC_OscConfig+0x478>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800847a:	2b00      	cmp	r3, #0
 800847c:	d0f0      	beq.n	8008460 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	2b01      	cmp	r3, #1
 8008484:	d106      	bne.n	8008494 <HAL_RCC_OscConfig+0x2e8>
 8008486:	4b68      	ldr	r3, [pc, #416]	; (8008628 <HAL_RCC_OscConfig+0x47c>)
 8008488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800848a:	4a67      	ldr	r2, [pc, #412]	; (8008628 <HAL_RCC_OscConfig+0x47c>)
 800848c:	f043 0301 	orr.w	r3, r3, #1
 8008490:	6713      	str	r3, [r2, #112]	; 0x70
 8008492:	e01c      	b.n	80084ce <HAL_RCC_OscConfig+0x322>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	2b05      	cmp	r3, #5
 800849a:	d10c      	bne.n	80084b6 <HAL_RCC_OscConfig+0x30a>
 800849c:	4b62      	ldr	r3, [pc, #392]	; (8008628 <HAL_RCC_OscConfig+0x47c>)
 800849e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a0:	4a61      	ldr	r2, [pc, #388]	; (8008628 <HAL_RCC_OscConfig+0x47c>)
 80084a2:	f043 0304 	orr.w	r3, r3, #4
 80084a6:	6713      	str	r3, [r2, #112]	; 0x70
 80084a8:	4b5f      	ldr	r3, [pc, #380]	; (8008628 <HAL_RCC_OscConfig+0x47c>)
 80084aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ac:	4a5e      	ldr	r2, [pc, #376]	; (8008628 <HAL_RCC_OscConfig+0x47c>)
 80084ae:	f043 0301 	orr.w	r3, r3, #1
 80084b2:	6713      	str	r3, [r2, #112]	; 0x70
 80084b4:	e00b      	b.n	80084ce <HAL_RCC_OscConfig+0x322>
 80084b6:	4b5c      	ldr	r3, [pc, #368]	; (8008628 <HAL_RCC_OscConfig+0x47c>)
 80084b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ba:	4a5b      	ldr	r2, [pc, #364]	; (8008628 <HAL_RCC_OscConfig+0x47c>)
 80084bc:	f023 0301 	bic.w	r3, r3, #1
 80084c0:	6713      	str	r3, [r2, #112]	; 0x70
 80084c2:	4b59      	ldr	r3, [pc, #356]	; (8008628 <HAL_RCC_OscConfig+0x47c>)
 80084c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c6:	4a58      	ldr	r2, [pc, #352]	; (8008628 <HAL_RCC_OscConfig+0x47c>)
 80084c8:	f023 0304 	bic.w	r3, r3, #4
 80084cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d015      	beq.n	8008502 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084d6:	f7fb fae7 	bl	8003aa8 <HAL_GetTick>
 80084da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084dc:	e00a      	b.n	80084f4 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084de:	f7fb fae3 	bl	8003aa8 <HAL_GetTick>
 80084e2:	4602      	mov	r2, r0
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	1ad3      	subs	r3, r2, r3
 80084e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d901      	bls.n	80084f4 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80084f0:	2303      	movs	r3, #3
 80084f2:	e092      	b.n	800861a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084f4:	4b4c      	ldr	r3, [pc, #304]	; (8008628 <HAL_RCC_OscConfig+0x47c>)
 80084f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f8:	f003 0302 	and.w	r3, r3, #2
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d0ee      	beq.n	80084de <HAL_RCC_OscConfig+0x332>
 8008500:	e014      	b.n	800852c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008502:	f7fb fad1 	bl	8003aa8 <HAL_GetTick>
 8008506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008508:	e00a      	b.n	8008520 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800850a:	f7fb facd 	bl	8003aa8 <HAL_GetTick>
 800850e:	4602      	mov	r2, r0
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	f241 3288 	movw	r2, #5000	; 0x1388
 8008518:	4293      	cmp	r3, r2
 800851a:	d901      	bls.n	8008520 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800851c:	2303      	movs	r3, #3
 800851e:	e07c      	b.n	800861a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008520:	4b41      	ldr	r3, [pc, #260]	; (8008628 <HAL_RCC_OscConfig+0x47c>)
 8008522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008524:	f003 0302 	and.w	r3, r3, #2
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1ee      	bne.n	800850a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800852c:	7dfb      	ldrb	r3, [r7, #23]
 800852e:	2b01      	cmp	r3, #1
 8008530:	d105      	bne.n	800853e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008532:	4b3d      	ldr	r3, [pc, #244]	; (8008628 <HAL_RCC_OscConfig+0x47c>)
 8008534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008536:	4a3c      	ldr	r2, [pc, #240]	; (8008628 <HAL_RCC_OscConfig+0x47c>)
 8008538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800853c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	699b      	ldr	r3, [r3, #24]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d068      	beq.n	8008618 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008546:	4b38      	ldr	r3, [pc, #224]	; (8008628 <HAL_RCC_OscConfig+0x47c>)
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	f003 030c 	and.w	r3, r3, #12
 800854e:	2b08      	cmp	r3, #8
 8008550:	d060      	beq.n	8008614 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	2b02      	cmp	r3, #2
 8008558:	d145      	bne.n	80085e6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800855a:	4b34      	ldr	r3, [pc, #208]	; (800862c <HAL_RCC_OscConfig+0x480>)
 800855c:	2200      	movs	r2, #0
 800855e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008560:	f7fb faa2 	bl	8003aa8 <HAL_GetTick>
 8008564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008566:	e008      	b.n	800857a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008568:	f7fb fa9e 	bl	8003aa8 <HAL_GetTick>
 800856c:	4602      	mov	r2, r0
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	2b02      	cmp	r3, #2
 8008574:	d901      	bls.n	800857a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8008576:	2303      	movs	r3, #3
 8008578:	e04f      	b.n	800861a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800857a:	4b2b      	ldr	r3, [pc, #172]	; (8008628 <HAL_RCC_OscConfig+0x47c>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1f0      	bne.n	8008568 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	69da      	ldr	r2, [r3, #28]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a1b      	ldr	r3, [r3, #32]
 800858e:	431a      	orrs	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008594:	019b      	lsls	r3, r3, #6
 8008596:	431a      	orrs	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800859c:	085b      	lsrs	r3, r3, #1
 800859e:	3b01      	subs	r3, #1
 80085a0:	041b      	lsls	r3, r3, #16
 80085a2:	431a      	orrs	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a8:	061b      	lsls	r3, r3, #24
 80085aa:	431a      	orrs	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b0:	071b      	lsls	r3, r3, #28
 80085b2:	491d      	ldr	r1, [pc, #116]	; (8008628 <HAL_RCC_OscConfig+0x47c>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80085b8:	4b1c      	ldr	r3, [pc, #112]	; (800862c <HAL_RCC_OscConfig+0x480>)
 80085ba:	2201      	movs	r2, #1
 80085bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085be:	f7fb fa73 	bl	8003aa8 <HAL_GetTick>
 80085c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085c4:	e008      	b.n	80085d8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085c6:	f7fb fa6f 	bl	8003aa8 <HAL_GetTick>
 80085ca:	4602      	mov	r2, r0
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	1ad3      	subs	r3, r2, r3
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d901      	bls.n	80085d8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80085d4:	2303      	movs	r3, #3
 80085d6:	e020      	b.n	800861a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085d8:	4b13      	ldr	r3, [pc, #76]	; (8008628 <HAL_RCC_OscConfig+0x47c>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d0f0      	beq.n	80085c6 <HAL_RCC_OscConfig+0x41a>
 80085e4:	e018      	b.n	8008618 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085e6:	4b11      	ldr	r3, [pc, #68]	; (800862c <HAL_RCC_OscConfig+0x480>)
 80085e8:	2200      	movs	r2, #0
 80085ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085ec:	f7fb fa5c 	bl	8003aa8 <HAL_GetTick>
 80085f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085f2:	e008      	b.n	8008606 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085f4:	f7fb fa58 	bl	8003aa8 <HAL_GetTick>
 80085f8:	4602      	mov	r2, r0
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	2b02      	cmp	r3, #2
 8008600:	d901      	bls.n	8008606 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8008602:	2303      	movs	r3, #3
 8008604:	e009      	b.n	800861a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008606:	4b08      	ldr	r3, [pc, #32]	; (8008628 <HAL_RCC_OscConfig+0x47c>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1f0      	bne.n	80085f4 <HAL_RCC_OscConfig+0x448>
 8008612:	e001      	b.n	8008618 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	e000      	b.n	800861a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3718      	adds	r7, #24
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	40007000 	.word	0x40007000
 8008628:	40023800 	.word	0x40023800
 800862c:	42470060 	.word	0x42470060

08008630 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d101      	bne.n	8008642 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e022      	b.n	8008688 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b00      	cmp	r3, #0
 800864c:	d105      	bne.n	800865a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f7f9 fc69 	bl	8001f2c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2203      	movs	r2, #3
 800865e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 f814 	bl	8008690 <HAL_SD_InitCard>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d001      	beq.n	8008672 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e00a      	b.n	8008688 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008690:	b5b0      	push	{r4, r5, r7, lr}
 8008692:	b08e      	sub	sp, #56	; 0x38
 8008694:	af04      	add	r7, sp, #16
 8008696:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008698:	2300      	movs	r3, #0
 800869a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800869c:	2300      	movs	r3, #0
 800869e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80086a0:	2300      	movs	r3, #0
 80086a2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80086a4:	2300      	movs	r3, #0
 80086a6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80086a8:	2300      	movs	r3, #0
 80086aa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80086ac:	2376      	movs	r3, #118	; 0x76
 80086ae:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681d      	ldr	r5, [r3, #0]
 80086b4:	466c      	mov	r4, sp
 80086b6:	f107 0314 	add.w	r3, r7, #20
 80086ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80086be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80086c2:	f107 0308 	add.w	r3, r7, #8
 80086c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086c8:	4628      	mov	r0, r5
 80086ca:	f002 f895 	bl	800a7f8 <SDIO_Init>
 80086ce:	4603      	mov	r3, r0
 80086d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80086d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d001      	beq.n	80086e0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	e031      	b.n	8008744 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80086e0:	4b1a      	ldr	r3, [pc, #104]	; (800874c <HAL_SD_InitCard+0xbc>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4618      	mov	r0, r3
 80086ec:	f002 f8cd 	bl	800a88a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80086f0:	4b16      	ldr	r3, [pc, #88]	; (800874c <HAL_SD_InitCard+0xbc>)
 80086f2:	2201      	movs	r2, #1
 80086f4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 fefc 	bl	80094f4 <SD_PowerON>
 80086fc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086fe:	6a3b      	ldr	r3, [r7, #32]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00b      	beq.n	800871c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008710:	6a3b      	ldr	r3, [r7, #32]
 8008712:	431a      	orrs	r2, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	e013      	b.n	8008744 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fe1b 	bl	8009358 <SD_InitCard>
 8008722:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008724:	6a3b      	ldr	r3, [r7, #32]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00b      	beq.n	8008742 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2201      	movs	r2, #1
 800872e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	431a      	orrs	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	e000      	b.n	8008744 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3728      	adds	r7, #40	; 0x28
 8008748:	46bd      	mov	sp, r7
 800874a:	bdb0      	pop	{r4, r5, r7, pc}
 800874c:	422580a0 	.word	0x422580a0

08008750 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b092      	sub	sp, #72	; 0x48
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	607a      	str	r2, [r7, #4]
 800875c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800875e:	f7fb f9a3 	bl	8003aa8 <HAL_GetTick>
 8008762:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d107      	bne.n	8008782 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008776:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e1d7      	b.n	8008b32 <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008788:	b2db      	uxtb	r3, r3
 800878a:	2b01      	cmp	r3, #1
 800878c:	f040 81ca 	bne.w	8008b24 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008796:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	441a      	add	r2, r3
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d907      	bls.n	80087b4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	e1be      	b.n	8008b32 <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2203      	movs	r2, #3
 80087b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2200      	movs	r2, #0
 80087c2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d002      	beq.n	80087d2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80087cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ce:	025b      	lsls	r3, r3, #9
 80087d0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80087da:	4618      	mov	r0, r3
 80087dc:	f002 f8e8 	bl	800a9b0 <SDMMC_CmdBlockLength>
 80087e0:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80087e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00f      	beq.n	8008808 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a9a      	ldr	r2, [pc, #616]	; (8008a58 <HAL_SD_ReadBlocks+0x308>)
 80087ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087f6:	431a      	orrs	r2, r3
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e194      	b.n	8008b32 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008808:	f04f 33ff 	mov.w	r3, #4294967295
 800880c:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	025b      	lsls	r3, r3, #9
 8008812:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008814:	2390      	movs	r3, #144	; 0x90
 8008816:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008818:	2302      	movs	r3, #2
 800881a:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800881c:	2300      	movs	r3, #0
 800881e:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008820:	2301      	movs	r3, #1
 8008822:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f107 0214 	add.w	r2, r7, #20
 800882c:	4611      	mov	r1, r2
 800882e:	4618      	mov	r0, r3
 8008830:	f002 f892 	bl	800a958 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	2b01      	cmp	r3, #1
 8008838:	d90a      	bls.n	8008850 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2202      	movs	r2, #2
 800883e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008846:	4618      	mov	r0, r3
 8008848:	f002 f8f6 	bl	800aa38 <SDMMC_CmdReadMultiBlock>
 800884c:	6478      	str	r0, [r7, #68]	; 0x44
 800884e:	e009      	b.n	8008864 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2201      	movs	r2, #1
 8008854:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800885c:	4618      	mov	r0, r3
 800885e:	f002 f8c9 	bl	800a9f4 <SDMMC_CmdReadSingleBlock>
 8008862:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008866:	2b00      	cmp	r3, #0
 8008868:	d012      	beq.n	8008890 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a7a      	ldr	r2, [pc, #488]	; (8008a58 <HAL_SD_ReadBlocks+0x308>)
 8008870:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008876:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008878:	431a      	orrs	r2, r3
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2201      	movs	r2, #1
 8008882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	e150      	b.n	8008b32 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8008894:	e061      	b.n	800895a <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800889c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d03c      	beq.n	800891e <HAL_SD_ReadBlocks+0x1ce>
 80088a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d039      	beq.n	800891e <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80088aa:	2300      	movs	r3, #0
 80088ac:	643b      	str	r3, [r7, #64]	; 0x40
 80088ae:	e033      	b.n	8008918 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4618      	mov	r0, r3
 80088b6:	f001 ffca 	bl	800a84e <SDIO_ReadFIFO>
 80088ba:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80088bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088be:	b2da      	uxtb	r2, r3
 80088c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80088c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c6:	3301      	adds	r3, #1
 80088c8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80088ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088cc:	3b01      	subs	r3, #1
 80088ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80088d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d2:	0a1b      	lsrs	r3, r3, #8
 80088d4:	b2da      	uxtb	r2, r3
 80088d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80088da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088dc:	3301      	adds	r3, #1
 80088de:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80088e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088e2:	3b01      	subs	r3, #1
 80088e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80088e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e8:	0c1b      	lsrs	r3, r3, #16
 80088ea:	b2da      	uxtb	r2, r3
 80088ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ee:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80088f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f2:	3301      	adds	r3, #1
 80088f4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80088f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088f8:	3b01      	subs	r3, #1
 80088fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80088fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fe:	0e1b      	lsrs	r3, r3, #24
 8008900:	b2da      	uxtb	r2, r3
 8008902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008904:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008908:	3301      	adds	r3, #1
 800890a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800890c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800890e:	3b01      	subs	r3, #1
 8008910:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8008912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008914:	3301      	adds	r3, #1
 8008916:	643b      	str	r3, [r7, #64]	; 0x40
 8008918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800891a:	2b07      	cmp	r3, #7
 800891c:	d9c8      	bls.n	80088b0 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800891e:	f7fb f8c3 	bl	8003aa8 <HAL_GetTick>
 8008922:	4602      	mov	r2, r0
 8008924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008926:	1ad3      	subs	r3, r2, r3
 8008928:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800892a:	429a      	cmp	r2, r3
 800892c:	d902      	bls.n	8008934 <HAL_SD_ReadBlocks+0x1e4>
 800892e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008930:	2b00      	cmp	r3, #0
 8008932:	d112      	bne.n	800895a <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a47      	ldr	r2, [pc, #284]	; (8008a58 <HAL_SD_ReadBlocks+0x308>)
 800893a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008940:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008956:	2303      	movs	r3, #3
 8008958:	e0eb      	b.n	8008b32 <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008960:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008964:	2b00      	cmp	r3, #0
 8008966:	d096      	beq.n	8008896 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800896e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008972:	2b00      	cmp	r3, #0
 8008974:	d022      	beq.n	80089bc <HAL_SD_ReadBlocks+0x26c>
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d91f      	bls.n	80089bc <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008980:	2b03      	cmp	r3, #3
 8008982:	d01b      	beq.n	80089bc <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4618      	mov	r0, r3
 800898a:	f002 f8bb 	bl	800ab04 <SDMMC_CmdStopTransfer>
 800898e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008992:	2b00      	cmp	r3, #0
 8008994:	d012      	beq.n	80089bc <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a2f      	ldr	r2, [pc, #188]	; (8008a58 <HAL_SD_ReadBlocks+0x308>)
 800899c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089a4:	431a      	orrs	r2, r3
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e0ba      	b.n	8008b32 <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c2:	f003 0308 	and.w	r3, r3, #8
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d012      	beq.n	80089f0 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a22      	ldr	r2, [pc, #136]	; (8008a58 <HAL_SD_ReadBlocks+0x308>)
 80089d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d6:	f043 0208 	orr.w	r2, r3, #8
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	e0a0      	b.n	8008b32 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f6:	f003 0302 	and.w	r3, r3, #2
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d012      	beq.n	8008a24 <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a15      	ldr	r2, [pc, #84]	; (8008a58 <HAL_SD_ReadBlocks+0x308>)
 8008a04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0a:	f043 0202 	orr.w	r2, r3, #2
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2201      	movs	r2, #1
 8008a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e086      	b.n	8008b32 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a2a:	f003 0320 	and.w	r3, r3, #32
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d063      	beq.n	8008afa <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a08      	ldr	r2, [pc, #32]	; (8008a58 <HAL_SD_ReadBlocks+0x308>)
 8008a38:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a3e:	f043 0220 	orr.w	r2, r3, #32
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2200      	movs	r2, #0
 8008a52:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	e06c      	b.n	8008b32 <HAL_SD_ReadBlocks+0x3e2>
 8008a58:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f001 fef4 	bl	800a84e <SDIO_ReadFIFO>
 8008a66:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8008a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6a:	b2da      	uxtb	r2, r3
 8008a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a6e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a72:	3301      	adds	r3, #1
 8008a74:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7e:	0a1b      	lsrs	r3, r3, #8
 8008a80:	b2da      	uxtb	r2, r3
 8008a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a84:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a88:	3301      	adds	r3, #1
 8008a8a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a94:	0c1b      	lsrs	r3, r3, #16
 8008a96:	b2da      	uxtb	r2, r3
 8008a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a9a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aaa:	0e1b      	lsrs	r3, r3, #24
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aba:	3b01      	subs	r3, #1
 8008abc:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008abe:	f7fa fff3 	bl	8003aa8 <HAL_GetTick>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac6:	1ad3      	subs	r3, r2, r3
 8008ac8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d902      	bls.n	8008ad4 <HAL_SD_ReadBlocks+0x384>
 8008ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d112      	bne.n	8008afa <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a18      	ldr	r2, [pc, #96]	; (8008b3c <HAL_SD_ReadBlocks+0x3ec>)
 8008ada:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2200      	movs	r2, #0
 8008af4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e01b      	b.n	8008b32 <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d002      	beq.n	8008b0e <HAL_SD_ReadBlocks+0x3be>
 8008b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1a6      	bne.n	8008a5c <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f240 523a 	movw	r2, #1338	; 0x53a
 8008b16:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008b20:	2300      	movs	r3, #0
 8008b22:	e006      	b.n	8008b32 <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b28:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
  }
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3748      	adds	r7, #72	; 0x48
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	004005ff 	.word	0x004005ff

08008b40 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b092      	sub	sp, #72	; 0x48
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
 8008b4c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008b4e:	f7fa ffab 	bl	8003aa8 <HAL_GetTick>
 8008b52:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d107      	bne.n	8008b72 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b66:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e182      	b.n	8008e78 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	f040 8175 	bne.w	8008e6a <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008b86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	441a      	add	r2, r3
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d907      	bls.n	8008ba4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b98:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e169      	b.n	8008e78 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2203      	movs	r2, #3
 8008ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d002      	beq.n	8008bc2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bbe:	025b      	lsls	r3, r3, #9
 8008bc0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f001 fef0 	bl	800a9b0 <SDMMC_CmdBlockLength>
 8008bd0:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00f      	beq.n	8008bf8 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a9c      	ldr	r2, [pc, #624]	; (8008e50 <HAL_SD_WriteBlocks+0x310>)
 8008bde:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008be6:	431a      	orrs	r2, r3
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e13f      	b.n	8008e78 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8008bfc:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	025b      	lsls	r3, r3, #9
 8008c02:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008c04:	2390      	movs	r3, #144	; 0x90
 8008c06:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008c10:	2301      	movs	r3, #1
 8008c12:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f107 0218 	add.w	r2, r7, #24
 8008c1c:	4611      	mov	r1, r2
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f001 fe9a 	bl	800a958 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d90a      	bls.n	8008c40 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2220      	movs	r2, #32
 8008c2e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c36:	4618      	mov	r0, r3
 8008c38:	f001 ff42 	bl	800aac0 <SDMMC_CmdWriteMultiBlock>
 8008c3c:	6478      	str	r0, [r7, #68]	; 0x44
 8008c3e:	e009      	b.n	8008c54 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2210      	movs	r2, #16
 8008c44:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f001 ff15 	bl	800aa7c <SDMMC_CmdWriteSingleBlock>
 8008c52:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d012      	beq.n	8008c80 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a7c      	ldr	r2, [pc, #496]	; (8008e50 <HAL_SD_WriteBlocks+0x310>)
 8008c60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c68:	431a      	orrs	r2, r3
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2201      	movs	r2, #1
 8008c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e0fb      	b.n	8008e78 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8008c84:	e065      	b.n	8008d52 <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d040      	beq.n	8008d16 <HAL_SD_WriteBlocks+0x1d6>
 8008c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d03d      	beq.n	8008d16 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	643b      	str	r3, [r7, #64]	; 0x40
 8008c9e:	e037      	b.n	8008d10 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8008ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca8:	3301      	adds	r3, #1
 8008caa:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	021a      	lsls	r2, r3, #8
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	041a      	lsls	r2, r3, #16
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd8:	3301      	adds	r3, #1
 8008cda:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	061a      	lsls	r2, r3, #24
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f107 0214 	add.w	r2, r7, #20
 8008d02:	4611      	mov	r1, r2
 8008d04:	4618      	mov	r0, r3
 8008d06:	f001 fdaf 	bl	800a868 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	643b      	str	r3, [r7, #64]	; 0x40
 8008d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d12:	2b07      	cmp	r3, #7
 8008d14:	d9c4      	bls.n	8008ca0 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008d16:	f7fa fec7 	bl	8003aa8 <HAL_GetTick>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1e:	1ad3      	subs	r3, r2, r3
 8008d20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d902      	bls.n	8008d2c <HAL_SD_WriteBlocks+0x1ec>
 8008d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d112      	bne.n	8008d52 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a47      	ldr	r2, [pc, #284]	; (8008e50 <HAL_SD_WriteBlocks+0x310>)
 8008d32:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d3a:	431a      	orrs	r2, r3
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e092      	b.n	8008e78 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d58:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d092      	beq.n	8008c86 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d022      	beq.n	8008db4 <HAL_SD_WriteBlocks+0x274>
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d91f      	bls.n	8008db4 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d78:	2b03      	cmp	r3, #3
 8008d7a:	d01b      	beq.n	8008db4 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4618      	mov	r0, r3
 8008d82:	f001 febf 	bl	800ab04 <SDMMC_CmdStopTransfer>
 8008d86:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d012      	beq.n	8008db4 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a2f      	ldr	r2, [pc, #188]	; (8008e50 <HAL_SD_WriteBlocks+0x310>)
 8008d94:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d9c:	431a      	orrs	r2, r3
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2201      	movs	r2, #1
 8008da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	e061      	b.n	8008e78 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dba:	f003 0308 	and.w	r3, r3, #8
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d012      	beq.n	8008de8 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a22      	ldr	r2, [pc, #136]	; (8008e50 <HAL_SD_WriteBlocks+0x310>)
 8008dc8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dce:	f043 0208 	orr.w	r2, r3, #8
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e047      	b.n	8008e78 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dee:	f003 0302 	and.w	r3, r3, #2
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d012      	beq.n	8008e1c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a15      	ldr	r2, [pc, #84]	; (8008e50 <HAL_SD_WriteBlocks+0x310>)
 8008dfc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e02:	f043 0202 	orr.w	r2, r3, #2
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2200      	movs	r2, #0
 8008e16:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e02d      	b.n	8008e78 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e22:	f003 0310 	and.w	r3, r3, #16
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d014      	beq.n	8008e54 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a08      	ldr	r2, [pc, #32]	; (8008e50 <HAL_SD_WriteBlocks+0x310>)
 8008e30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e36:	f043 0210 	orr.w	r2, r3, #16
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2201      	movs	r2, #1
 8008e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e013      	b.n	8008e78 <HAL_SD_WriteBlocks+0x338>
 8008e50:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f240 523a 	movw	r2, #1338	; 0x53a
 8008e5c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008e66:	2300      	movs	r3, #0
 8008e68:	e006      	b.n	8008e78 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
  }
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3748      	adds	r7, #72	; 0x48
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b083      	sub	sp, #12
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e8e:	0f9b      	lsrs	r3, r3, #30
 8008e90:	b2da      	uxtb	r2, r3
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e9a:	0e9b      	lsrs	r3, r3, #26
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	f003 030f 	and.w	r3, r3, #15
 8008ea2:	b2da      	uxtb	r2, r3
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008eac:	0e1b      	lsrs	r3, r3, #24
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	f003 0303 	and.w	r3, r3, #3
 8008eb4:	b2da      	uxtb	r2, r3
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ebe:	0c1b      	lsrs	r3, r3, #16
 8008ec0:	b2da      	uxtb	r2, r3
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008eca:	0a1b      	lsrs	r3, r3, #8
 8008ecc:	b2da      	uxtb	r2, r3
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ed6:	b2da      	uxtb	r2, r3
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ee0:	0d1b      	lsrs	r3, r3, #20
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008eec:	0c1b      	lsrs	r3, r3, #16
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	f003 030f 	and.w	r3, r3, #15
 8008ef4:	b2da      	uxtb	r2, r3
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008efe:	0bdb      	lsrs	r3, r3, #15
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	f003 0301 	and.w	r3, r3, #1
 8008f06:	b2da      	uxtb	r2, r3
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f10:	0b9b      	lsrs	r3, r3, #14
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	f003 0301 	and.w	r3, r3, #1
 8008f18:	b2da      	uxtb	r2, r3
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f22:	0b5b      	lsrs	r3, r3, #13
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	f003 0301 	and.w	r3, r3, #1
 8008f2a:	b2da      	uxtb	r2, r3
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f34:	0b1b      	lsrs	r3, r3, #12
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	f003 0301 	and.w	r3, r3, #1
 8008f3c:	b2da      	uxtb	r2, r3
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	2200      	movs	r2, #0
 8008f46:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d163      	bne.n	8009018 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f54:	009a      	lsls	r2, r3, #2
 8008f56:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008f60:	0f92      	lsrs	r2, r2, #30
 8008f62:	431a      	orrs	r2, r3
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f6c:	0edb      	lsrs	r3, r3, #27
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	f003 0307 	and.w	r3, r3, #7
 8008f74:	b2da      	uxtb	r2, r3
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f7e:	0e1b      	lsrs	r3, r3, #24
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	f003 0307 	and.w	r3, r3, #7
 8008f86:	b2da      	uxtb	r2, r3
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f90:	0d5b      	lsrs	r3, r3, #21
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	f003 0307 	and.w	r3, r3, #7
 8008f98:	b2da      	uxtb	r2, r3
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fa2:	0c9b      	lsrs	r3, r3, #18
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	f003 0307 	and.w	r3, r3, #7
 8008faa:	b2da      	uxtb	r2, r3
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fb4:	0bdb      	lsrs	r3, r3, #15
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	f003 0307 	and.w	r3, r3, #7
 8008fbc:	b2da      	uxtb	r2, r3
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	1c5a      	adds	r2, r3, #1
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	7e1b      	ldrb	r3, [r3, #24]
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	f003 0307 	and.w	r3, r3, #7
 8008fd6:	3302      	adds	r3, #2
 8008fd8:	2201      	movs	r2, #1
 8008fda:	fa02 f303 	lsl.w	r3, r2, r3
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008fe2:	fb02 f203 	mul.w	r2, r2, r3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	7a1b      	ldrb	r3, [r3, #8]
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	f003 030f 	and.w	r3, r3, #15
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	409a      	lsls	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009004:	0a52      	lsrs	r2, r2, #9
 8009006:	fb02 f203 	mul.w	r2, r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009014:	661a      	str	r2, [r3, #96]	; 0x60
 8009016:	e031      	b.n	800907c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800901c:	2b01      	cmp	r3, #1
 800901e:	d11d      	bne.n	800905c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009024:	041b      	lsls	r3, r3, #16
 8009026:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800902e:	0c1b      	lsrs	r3, r3, #16
 8009030:	431a      	orrs	r2, r3
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	3301      	adds	r3, #1
 800903c:	029a      	lsls	r2, r3, #10
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009050:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	661a      	str	r2, [r3, #96]	; 0x60
 800905a:	e00f      	b.n	800907c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a58      	ldr	r2, [pc, #352]	; (80091c4 <HAL_SD_GetCardCSD+0x344>)
 8009062:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009068:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	e09d      	b.n	80091b8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009080:	0b9b      	lsrs	r3, r3, #14
 8009082:	b2db      	uxtb	r3, r3
 8009084:	f003 0301 	and.w	r3, r3, #1
 8009088:	b2da      	uxtb	r2, r3
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009092:	09db      	lsrs	r3, r3, #7
 8009094:	b2db      	uxtb	r3, r3
 8009096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800909a:	b2da      	uxtb	r2, r3
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090aa:	b2da      	uxtb	r2, r3
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090b4:	0fdb      	lsrs	r3, r3, #31
 80090b6:	b2da      	uxtb	r2, r3
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090c0:	0f5b      	lsrs	r3, r3, #29
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	f003 0303 	and.w	r3, r3, #3
 80090c8:	b2da      	uxtb	r2, r3
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090d2:	0e9b      	lsrs	r3, r3, #26
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	f003 0307 	and.w	r3, r3, #7
 80090da:	b2da      	uxtb	r2, r3
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090e4:	0d9b      	lsrs	r3, r3, #22
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	f003 030f 	and.w	r3, r3, #15
 80090ec:	b2da      	uxtb	r2, r3
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090f6:	0d5b      	lsrs	r3, r3, #21
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	f003 0301 	and.w	r3, r3, #1
 80090fe:	b2da      	uxtb	r2, r3
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	2200      	movs	r2, #0
 800910a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009112:	0c1b      	lsrs	r3, r3, #16
 8009114:	b2db      	uxtb	r3, r3
 8009116:	f003 0301 	and.w	r3, r3, #1
 800911a:	b2da      	uxtb	r2, r3
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009126:	0bdb      	lsrs	r3, r3, #15
 8009128:	b2db      	uxtb	r3, r3
 800912a:	f003 0301 	and.w	r3, r3, #1
 800912e:	b2da      	uxtb	r2, r3
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800913a:	0b9b      	lsrs	r3, r3, #14
 800913c:	b2db      	uxtb	r3, r3
 800913e:	f003 0301 	and.w	r3, r3, #1
 8009142:	b2da      	uxtb	r2, r3
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800914e:	0b5b      	lsrs	r3, r3, #13
 8009150:	b2db      	uxtb	r3, r3
 8009152:	f003 0301 	and.w	r3, r3, #1
 8009156:	b2da      	uxtb	r2, r3
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009162:	0b1b      	lsrs	r3, r3, #12
 8009164:	b2db      	uxtb	r3, r3
 8009166:	f003 0301 	and.w	r3, r3, #1
 800916a:	b2da      	uxtb	r2, r3
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009176:	0a9b      	lsrs	r3, r3, #10
 8009178:	b2db      	uxtb	r3, r3
 800917a:	f003 0303 	and.w	r3, r3, #3
 800917e:	b2da      	uxtb	r2, r3
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800918a:	0a1b      	lsrs	r3, r3, #8
 800918c:	b2db      	uxtb	r3, r3
 800918e:	f003 0303 	and.w	r3, r3, #3
 8009192:	b2da      	uxtb	r2, r3
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800919e:	085b      	lsrs	r3, r3, #1
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091a6:	b2da      	uxtb	r2, r3
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	2201      	movs	r2, #1
 80091b2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr
 80091c4:	004005ff 	.word	0x004005ff

080091c8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009212:	2300      	movs	r3, #0
}
 8009214:	4618      	mov	r0, r3
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009220:	b5b0      	push	{r4, r5, r7, lr}
 8009222:	b08e      	sub	sp, #56	; 0x38
 8009224:	af04      	add	r7, sp, #16
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2203      	movs	r2, #3
 800922e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009236:	2b03      	cmp	r3, #3
 8009238:	d02e      	beq.n	8009298 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009240:	d106      	bne.n	8009250 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009246:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	639a      	str	r2, [r3, #56]	; 0x38
 800924e:	e029      	b.n	80092a4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009256:	d10a      	bne.n	800926e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 fa01 	bl	8009660 <SD_WideBus_Enable>
 800925e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009266:	431a      	orrs	r2, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	639a      	str	r2, [r3, #56]	; 0x38
 800926c:	e01a      	b.n	80092a4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d10a      	bne.n	800928a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 fa3e 	bl	80096f6 <SD_WideBus_Disable>
 800927a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009282:	431a      	orrs	r2, r3
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	639a      	str	r2, [r3, #56]	; 0x38
 8009288:	e00c      	b.n	80092a4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800928e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	639a      	str	r2, [r3, #56]	; 0x38
 8009296:	e005      	b.n	80092a4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800929c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d009      	beq.n	80092c0 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a18      	ldr	r2, [pc, #96]	; (8009314 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80092b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	e024      	b.n	800930a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	695b      	ldr	r3, [r3, #20]
 80092da:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	699b      	ldr	r3, [r3, #24]
 80092e0:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681d      	ldr	r5, [r3, #0]
 80092e6:	466c      	mov	r4, sp
 80092e8:	f107 0318 	add.w	r3, r7, #24
 80092ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80092f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80092f4:	f107 030c 	add.w	r3, r7, #12
 80092f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80092fa:	4628      	mov	r0, r5
 80092fc:	f001 fa7c 	bl	800a7f8 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3728      	adds	r7, #40	; 0x28
 800930e:	46bd      	mov	sp, r7
 8009310:	bdb0      	pop	{r4, r5, r7, pc}
 8009312:	bf00      	nop
 8009314:	004005ff 	.word	0x004005ff

08009318 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b086      	sub	sp, #24
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009320:	2300      	movs	r3, #0
 8009322:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009324:	f107 030c 	add.w	r3, r7, #12
 8009328:	4619      	mov	r1, r3
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 f970 	bl	8009610 <SD_SendStatus>
 8009330:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d005      	beq.n	8009344 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	431a      	orrs	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	0a5b      	lsrs	r3, r3, #9
 8009348:	f003 030f 	and.w	r3, r3, #15
 800934c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800934e:	693b      	ldr	r3, [r7, #16]
}
 8009350:	4618      	mov	r0, r3
 8009352:	3718      	adds	r7, #24
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009358:	b5b0      	push	{r4, r5, r7, lr}
 800935a:	b094      	sub	sp, #80	; 0x50
 800935c:	af04      	add	r7, sp, #16
 800935e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009360:	2301      	movs	r3, #1
 8009362:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4618      	mov	r0, r3
 800936a:	f001 fa9d 	bl	800a8a8 <SDIO_GetPowerState>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d102      	bne.n	800937a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009374:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009378:	e0b7      	b.n	80094ea <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800937e:	2b03      	cmp	r3, #3
 8009380:	d02f      	beq.n	80093e2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4618      	mov	r0, r3
 8009388:	f001 fcc6 	bl	800ad18 <SDMMC_CmdSendCID>
 800938c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800938e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009390:	2b00      	cmp	r3, #0
 8009392:	d001      	beq.n	8009398 <SD_InitCard+0x40>
    {
      return errorstate;
 8009394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009396:	e0a8      	b.n	80094ea <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2100      	movs	r1, #0
 800939e:	4618      	mov	r0, r3
 80093a0:	f001 fac7 	bl	800a932 <SDIO_GetResponse>
 80093a4:	4602      	mov	r2, r0
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2104      	movs	r1, #4
 80093b0:	4618      	mov	r0, r3
 80093b2:	f001 fabe 	bl	800a932 <SDIO_GetResponse>
 80093b6:	4602      	mov	r2, r0
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2108      	movs	r1, #8
 80093c2:	4618      	mov	r0, r3
 80093c4:	f001 fab5 	bl	800a932 <SDIO_GetResponse>
 80093c8:	4602      	mov	r2, r0
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	210c      	movs	r1, #12
 80093d4:	4618      	mov	r0, r3
 80093d6:	f001 faac 	bl	800a932 <SDIO_GetResponse>
 80093da:	4602      	mov	r2, r0
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093e6:	2b03      	cmp	r3, #3
 80093e8:	d00d      	beq.n	8009406 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f107 020e 	add.w	r2, r7, #14
 80093f2:	4611      	mov	r1, r2
 80093f4:	4618      	mov	r0, r3
 80093f6:	f001 fccc 	bl	800ad92 <SDMMC_CmdSetRelAdd>
 80093fa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80093fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d001      	beq.n	8009406 <SD_InitCard+0xae>
    {
      return errorstate;
 8009402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009404:	e071      	b.n	80094ea <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800940a:	2b03      	cmp	r3, #3
 800940c:	d036      	beq.n	800947c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800940e:	89fb      	ldrh	r3, [r7, #14]
 8009410:	461a      	mov	r2, r3
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800941e:	041b      	lsls	r3, r3, #16
 8009420:	4619      	mov	r1, r3
 8009422:	4610      	mov	r0, r2
 8009424:	f001 fc96 	bl	800ad54 <SDMMC_CmdSendCSD>
 8009428:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800942a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800942c:	2b00      	cmp	r3, #0
 800942e:	d001      	beq.n	8009434 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009432:	e05a      	b.n	80094ea <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2100      	movs	r1, #0
 800943a:	4618      	mov	r0, r3
 800943c:	f001 fa79 	bl	800a932 <SDIO_GetResponse>
 8009440:	4602      	mov	r2, r0
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	2104      	movs	r1, #4
 800944c:	4618      	mov	r0, r3
 800944e:	f001 fa70 	bl	800a932 <SDIO_GetResponse>
 8009452:	4602      	mov	r2, r0
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2108      	movs	r1, #8
 800945e:	4618      	mov	r0, r3
 8009460:	f001 fa67 	bl	800a932 <SDIO_GetResponse>
 8009464:	4602      	mov	r2, r0
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	210c      	movs	r1, #12
 8009470:	4618      	mov	r0, r3
 8009472:	f001 fa5e 	bl	800a932 <SDIO_GetResponse>
 8009476:	4602      	mov	r2, r0
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2104      	movs	r1, #4
 8009482:	4618      	mov	r0, r3
 8009484:	f001 fa55 	bl	800a932 <SDIO_GetResponse>
 8009488:	4603      	mov	r3, r0
 800948a:	0d1a      	lsrs	r2, r3, #20
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009490:	f107 0310 	add.w	r3, r7, #16
 8009494:	4619      	mov	r1, r3
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f7ff fcf2 	bl	8008e80 <HAL_SD_GetCardCSD>
 800949c:	4603      	mov	r3, r0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d002      	beq.n	80094a8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80094a6:	e020      	b.n	80094ea <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6819      	ldr	r1, [r3, #0]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094b0:	041b      	lsls	r3, r3, #16
 80094b2:	f04f 0400 	mov.w	r4, #0
 80094b6:	461a      	mov	r2, r3
 80094b8:	4623      	mov	r3, r4
 80094ba:	4608      	mov	r0, r1
 80094bc:	f001 fb44 	bl	800ab48 <SDMMC_CmdSelDesel>
 80094c0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80094c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d001      	beq.n	80094cc <SD_InitCard+0x174>
  {
    return errorstate;
 80094c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ca:	e00e      	b.n	80094ea <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681d      	ldr	r5, [r3, #0]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	466c      	mov	r4, sp
 80094d4:	f103 0210 	add.w	r2, r3, #16
 80094d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80094da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80094de:	3304      	adds	r3, #4
 80094e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80094e2:	4628      	mov	r0, r5
 80094e4:	f001 f988 	bl	800a7f8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3740      	adds	r7, #64	; 0x40
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080094f4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b086      	sub	sp, #24
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094fc:	2300      	movs	r3, #0
 80094fe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009500:	2300      	movs	r3, #0
 8009502:	617b      	str	r3, [r7, #20]
 8009504:	2300      	movs	r3, #0
 8009506:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4618      	mov	r0, r3
 800950e:	f001 fb3e 	bl	800ab8e <SDMMC_CmdGoIdleState>
 8009512:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d001      	beq.n	800951e <SD_PowerON+0x2a>
  {
    return errorstate;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	e072      	b.n	8009604 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4618      	mov	r0, r3
 8009524:	f001 fb51 	bl	800abca <SDMMC_CmdOperCond>
 8009528:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d00d      	beq.n	800954c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4618      	mov	r0, r3
 800953c:	f001 fb27 	bl	800ab8e <SDMMC_CmdGoIdleState>
 8009540:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d004      	beq.n	8009552 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	e05b      	b.n	8009604 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009556:	2b01      	cmp	r3, #1
 8009558:	d137      	bne.n	80095ca <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2100      	movs	r1, #0
 8009560:	4618      	mov	r0, r3
 8009562:	f001 fb51 	bl	800ac08 <SDMMC_CmdAppCommand>
 8009566:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d02d      	beq.n	80095ca <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800956e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009572:	e047      	b.n	8009604 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2100      	movs	r1, #0
 800957a:	4618      	mov	r0, r3
 800957c:	f001 fb44 	bl	800ac08 <SDMMC_CmdAppCommand>
 8009580:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d001      	beq.n	800958c <SD_PowerON+0x98>
    {
      return errorstate;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	e03b      	b.n	8009604 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	491e      	ldr	r1, [pc, #120]	; (800960c <SD_PowerON+0x118>)
 8009592:	4618      	mov	r0, r3
 8009594:	f001 fb5a 	bl	800ac4c <SDMMC_CmdAppOperCommand>
 8009598:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d002      	beq.n	80095a6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80095a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80095a4:	e02e      	b.n	8009604 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2100      	movs	r1, #0
 80095ac:	4618      	mov	r0, r3
 80095ae:	f001 f9c0 	bl	800a932 <SDIO_GetResponse>
 80095b2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	0fdb      	lsrs	r3, r3, #31
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d101      	bne.n	80095c0 <SD_PowerON+0xcc>
 80095bc:	2301      	movs	r3, #1
 80095be:	e000      	b.n	80095c2 <SD_PowerON+0xce>
 80095c0:	2300      	movs	r3, #0
 80095c2:	613b      	str	r3, [r7, #16]

    count++;
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	3301      	adds	r3, #1
 80095c8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d802      	bhi.n	80095da <SD_PowerON+0xe6>
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d0cc      	beq.n	8009574 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d902      	bls.n	80095ea <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80095e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80095e8:	e00c      	b.n	8009604 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d003      	beq.n	80095fc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2201      	movs	r2, #1
 80095f8:	645a      	str	r2, [r3, #68]	; 0x44
 80095fa:	e002      	b.n	8009602 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009602:	2300      	movs	r3, #0
}
 8009604:	4618      	mov	r0, r3
 8009606:	3718      	adds	r7, #24
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	c1100000 	.word	0xc1100000

08009610 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d102      	bne.n	8009626 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009620:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009624:	e018      	b.n	8009658 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800962e:	041b      	lsls	r3, r3, #16
 8009630:	4619      	mov	r1, r3
 8009632:	4610      	mov	r0, r2
 8009634:	f001 fbce 	bl	800add4 <SDMMC_CmdSendStatus>
 8009638:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d001      	beq.n	8009644 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	e009      	b.n	8009658 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2100      	movs	r1, #0
 800964a:	4618      	mov	r0, r3
 800964c:	f001 f971 	bl	800a932 <SDIO_GetResponse>
 8009650:	4602      	mov	r2, r0
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b086      	sub	sp, #24
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009668:	2300      	movs	r3, #0
 800966a:	60fb      	str	r3, [r7, #12]
 800966c:	2300      	movs	r3, #0
 800966e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2100      	movs	r1, #0
 8009676:	4618      	mov	r0, r3
 8009678:	f001 f95b 	bl	800a932 <SDIO_GetResponse>
 800967c:	4603      	mov	r3, r0
 800967e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009682:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009686:	d102      	bne.n	800968e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009688:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800968c:	e02f      	b.n	80096ee <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800968e:	f107 030c 	add.w	r3, r7, #12
 8009692:	4619      	mov	r1, r3
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 f879 	bl	800978c <SD_FindSCR>
 800969a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d001      	beq.n	80096a6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	e023      	b.n	80096ee <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d01c      	beq.n	80096ea <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096b8:	041b      	lsls	r3, r3, #16
 80096ba:	4619      	mov	r1, r3
 80096bc:	4610      	mov	r0, r2
 80096be:	f001 faa3 	bl	800ac08 <SDMMC_CmdAppCommand>
 80096c2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d001      	beq.n	80096ce <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	e00f      	b.n	80096ee <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2102      	movs	r1, #2
 80096d4:	4618      	mov	r0, r3
 80096d6:	f001 fadc 	bl	800ac92 <SDMMC_CmdBusWidth>
 80096da:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d001      	beq.n	80096e6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	e003      	b.n	80096ee <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80096e6:	2300      	movs	r3, #0
 80096e8:	e001      	b.n	80096ee <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80096ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3718      	adds	r7, #24
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b086      	sub	sp, #24
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80096fe:	2300      	movs	r3, #0
 8009700:	60fb      	str	r3, [r7, #12]
 8009702:	2300      	movs	r3, #0
 8009704:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2100      	movs	r1, #0
 800970c:	4618      	mov	r0, r3
 800970e:	f001 f910 	bl	800a932 <SDIO_GetResponse>
 8009712:	4603      	mov	r3, r0
 8009714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009718:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800971c:	d102      	bne.n	8009724 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800971e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009722:	e02f      	b.n	8009784 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009724:	f107 030c 	add.w	r3, r7, #12
 8009728:	4619      	mov	r1, r3
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 f82e 	bl	800978c <SD_FindSCR>
 8009730:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d001      	beq.n	800973c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	e023      	b.n	8009784 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009742:	2b00      	cmp	r3, #0
 8009744:	d01c      	beq.n	8009780 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800974e:	041b      	lsls	r3, r3, #16
 8009750:	4619      	mov	r1, r3
 8009752:	4610      	mov	r0, r2
 8009754:	f001 fa58 	bl	800ac08 <SDMMC_CmdAppCommand>
 8009758:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d001      	beq.n	8009764 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	e00f      	b.n	8009784 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2100      	movs	r1, #0
 800976a:	4618      	mov	r0, r3
 800976c:	f001 fa91 	bl	800ac92 <SDMMC_CmdBusWidth>
 8009770:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d001      	beq.n	800977c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	e003      	b.n	8009784 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800977c:	2300      	movs	r3, #0
 800977e:	e001      	b.n	8009784 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009780:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009784:	4618      	mov	r0, r3
 8009786:	3718      	adds	r7, #24
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800978c:	b590      	push	{r4, r7, lr}
 800978e:	b08f      	sub	sp, #60	; 0x3c
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009796:	f7fa f987 	bl	8003aa8 <HAL_GetTick>
 800979a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800979c:	2300      	movs	r3, #0
 800979e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80097a0:	2300      	movs	r3, #0
 80097a2:	60bb      	str	r3, [r7, #8]
 80097a4:	2300      	movs	r3, #0
 80097a6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	2108      	movs	r1, #8
 80097b2:	4618      	mov	r0, r3
 80097b4:	f001 f8fc 	bl	800a9b0 <SDMMC_CmdBlockLength>
 80097b8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80097ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d001      	beq.n	80097c4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80097c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c2:	e0a9      	b.n	8009918 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097cc:	041b      	lsls	r3, r3, #16
 80097ce:	4619      	mov	r1, r3
 80097d0:	4610      	mov	r0, r2
 80097d2:	f001 fa19 	bl	800ac08 <SDMMC_CmdAppCommand>
 80097d6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80097d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80097de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e0:	e09a      	b.n	8009918 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80097e2:	f04f 33ff 	mov.w	r3, #4294967295
 80097e6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80097e8:	2308      	movs	r3, #8
 80097ea:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80097ec:	2330      	movs	r3, #48	; 0x30
 80097ee:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80097f0:	2302      	movs	r3, #2
 80097f2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80097f8:	2301      	movs	r3, #1
 80097fa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f107 0210 	add.w	r2, r7, #16
 8009804:	4611      	mov	r1, r2
 8009806:	4618      	mov	r0, r3
 8009808:	f001 f8a6 	bl	800a958 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4618      	mov	r0, r3
 8009812:	f001 fa60 	bl	800acd6 <SDMMC_CmdSendSCR>
 8009816:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981a:	2b00      	cmp	r3, #0
 800981c:	d022      	beq.n	8009864 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800981e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009820:	e07a      	b.n	8009918 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00e      	beq.n	800984e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6819      	ldr	r1, [r3, #0]
 8009834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	f107 0208 	add.w	r2, r7, #8
 800983c:	18d4      	adds	r4, r2, r3
 800983e:	4608      	mov	r0, r1
 8009840:	f001 f805 	bl	800a84e <SDIO_ReadFIFO>
 8009844:	4603      	mov	r3, r0
 8009846:	6023      	str	r3, [r4, #0]
      index++;
 8009848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800984a:	3301      	adds	r3, #1
 800984c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800984e:	f7fa f92b 	bl	8003aa8 <HAL_GetTick>
 8009852:	4602      	mov	r2, r0
 8009854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009856:	1ad3      	subs	r3, r2, r3
 8009858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800985c:	d102      	bne.n	8009864 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800985e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009862:	e059      	b.n	8009918 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800986a:	f240 432a 	movw	r3, #1066	; 0x42a
 800986e:	4013      	ands	r3, r2
 8009870:	2b00      	cmp	r3, #0
 8009872:	d0d6      	beq.n	8009822 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800987a:	f003 0308 	and.w	r3, r3, #8
 800987e:	2b00      	cmp	r3, #0
 8009880:	d005      	beq.n	800988e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2208      	movs	r2, #8
 8009888:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800988a:	2308      	movs	r3, #8
 800988c:	e044      	b.n	8009918 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009894:	f003 0302 	and.w	r3, r3, #2
 8009898:	2b00      	cmp	r3, #0
 800989a:	d005      	beq.n	80098a8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2202      	movs	r2, #2
 80098a2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80098a4:	2302      	movs	r3, #2
 80098a6:	e037      	b.n	8009918 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ae:	f003 0320 	and.w	r3, r3, #32
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d005      	beq.n	80098c2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2220      	movs	r2, #32
 80098bc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80098be:	2320      	movs	r3, #32
 80098c0:	e02a      	b.n	8009918 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f240 523a 	movw	r2, #1338	; 0x53a
 80098ca:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	061a      	lsls	r2, r3, #24
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	021b      	lsls	r3, r3, #8
 80098d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80098d8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	0a1b      	lsrs	r3, r3, #8
 80098de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80098e2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	0e1b      	lsrs	r3, r3, #24
 80098e8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80098ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ec:	601a      	str	r2, [r3, #0]
    scr++;
 80098ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f0:	3304      	adds	r3, #4
 80098f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	061a      	lsls	r2, r3, #24
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	021b      	lsls	r3, r3, #8
 80098fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009900:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	0a1b      	lsrs	r3, r3, #8
 8009906:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800990a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	0e1b      	lsrs	r3, r3, #24
 8009910:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009914:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009916:	2300      	movs	r3, #0
}
 8009918:	4618      	mov	r0, r3
 800991a:	373c      	adds	r7, #60	; 0x3c
 800991c:	46bd      	mov	sp, r7
 800991e:	bd90      	pop	{r4, r7, pc}

08009920 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d101      	bne.n	8009936 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	e034      	b.n	80099a0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800993c:	b2db      	uxtb	r3, r3
 800993e:	2b00      	cmp	r3, #0
 8009940:	d106      	bne.n	8009950 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2200      	movs	r2, #0
 8009946:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f7f8 fc44 	bl	80021d8 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	3308      	adds	r3, #8
 8009958:	4619      	mov	r1, r3
 800995a:	4610      	mov	r0, r2
 800995c:	f000 fe48 	bl	800a5f0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6818      	ldr	r0, [r3, #0]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	461a      	mov	r2, r3
 800996a:	68b9      	ldr	r1, [r7, #8]
 800996c:	f000 feb0 	bl	800a6d0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6858      	ldr	r0, [r3, #4]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	689a      	ldr	r2, [r3, #8]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800997c:	6879      	ldr	r1, [r7, #4]
 800997e:	f000 fefb 	bl	800a778 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	68fa      	ldr	r2, [r7, #12]
 8009988:	6892      	ldr	r2, [r2, #8]
 800998a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	6892      	ldr	r2, [r2, #8]
 8009996:	f041 0101 	orr.w	r1, r1, #1
 800999a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800999e:	2300      	movs	r3, #0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d101      	bne.n	80099ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	e01d      	b.n	80099f6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d106      	bne.n	80099d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f815 	bl	80099fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2202      	movs	r2, #2
 80099d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	3304      	adds	r3, #4
 80099e4:	4619      	mov	r1, r3
 80099e6:	4610      	mov	r0, r2
 80099e8:	f000 f968 	bl	8009cbc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099f4:	2300      	movs	r3, #0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3708      	adds	r7, #8
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80099fe:	b480      	push	{r7}
 8009a00:	b083      	sub	sp, #12
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009a06:	bf00      	nop
 8009a08:	370c      	adds	r7, #12
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr

08009a12 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a12:	b480      	push	{r7}
 8009a14:	b085      	sub	sp, #20
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	68da      	ldr	r2, [r3, #12]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f042 0201 	orr.w	r2, r2, #1
 8009a28:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	f003 0307 	and.w	r3, r3, #7
 8009a34:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2b06      	cmp	r3, #6
 8009a3a:	d007      	beq.n	8009a4c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f042 0201 	orr.w	r2, r2, #1
 8009a4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a4c:	2300      	movs	r3, #0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3714      	adds	r7, #20
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr

08009a5a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b082      	sub	sp, #8
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	691b      	ldr	r3, [r3, #16]
 8009a68:	f003 0302 	and.w	r3, r3, #2
 8009a6c:	2b02      	cmp	r3, #2
 8009a6e:	d122      	bne.n	8009ab6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	f003 0302 	and.w	r3, r3, #2
 8009a7a:	2b02      	cmp	r3, #2
 8009a7c:	d11b      	bne.n	8009ab6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f06f 0202 	mvn.w	r2, #2
 8009a86:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	699b      	ldr	r3, [r3, #24]
 8009a94:	f003 0303 	and.w	r3, r3, #3
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d003      	beq.n	8009aa4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 f8ee 	bl	8009c7e <HAL_TIM_IC_CaptureCallback>
 8009aa2:	e005      	b.n	8009ab0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 f8e0 	bl	8009c6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 f8f1 	bl	8009c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	f003 0304 	and.w	r3, r3, #4
 8009ac0:	2b04      	cmp	r3, #4
 8009ac2:	d122      	bne.n	8009b0a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	f003 0304 	and.w	r3, r3, #4
 8009ace:	2b04      	cmp	r3, #4
 8009ad0:	d11b      	bne.n	8009b0a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f06f 0204 	mvn.w	r2, #4
 8009ada:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2202      	movs	r2, #2
 8009ae0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	699b      	ldr	r3, [r3, #24]
 8009ae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d003      	beq.n	8009af8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 f8c4 	bl	8009c7e <HAL_TIM_IC_CaptureCallback>
 8009af6:	e005      	b.n	8009b04 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 f8b6 	bl	8009c6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 f8c7 	bl	8009c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	f003 0308 	and.w	r3, r3, #8
 8009b14:	2b08      	cmp	r3, #8
 8009b16:	d122      	bne.n	8009b5e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	f003 0308 	and.w	r3, r3, #8
 8009b22:	2b08      	cmp	r3, #8
 8009b24:	d11b      	bne.n	8009b5e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f06f 0208 	mvn.w	r2, #8
 8009b2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2204      	movs	r2, #4
 8009b34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	69db      	ldr	r3, [r3, #28]
 8009b3c:	f003 0303 	and.w	r3, r3, #3
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d003      	beq.n	8009b4c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 f89a 	bl	8009c7e <HAL_TIM_IC_CaptureCallback>
 8009b4a:	e005      	b.n	8009b58 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 f88c 	bl	8009c6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 f89d 	bl	8009c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	f003 0310 	and.w	r3, r3, #16
 8009b68:	2b10      	cmp	r3, #16
 8009b6a:	d122      	bne.n	8009bb2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	f003 0310 	and.w	r3, r3, #16
 8009b76:	2b10      	cmp	r3, #16
 8009b78:	d11b      	bne.n	8009bb2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f06f 0210 	mvn.w	r2, #16
 8009b82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2208      	movs	r2, #8
 8009b88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	69db      	ldr	r3, [r3, #28]
 8009b90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d003      	beq.n	8009ba0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 f870 	bl	8009c7e <HAL_TIM_IC_CaptureCallback>
 8009b9e:	e005      	b.n	8009bac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 f862 	bl	8009c6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 f873 	bl	8009c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	691b      	ldr	r3, [r3, #16]
 8009bb8:	f003 0301 	and.w	r3, r3, #1
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d10e      	bne.n	8009bde <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	f003 0301 	and.w	r3, r3, #1
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d107      	bne.n	8009bde <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f06f 0201 	mvn.w	r2, #1
 8009bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f7f7 fd77 	bl	80016cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009be8:	2b80      	cmp	r3, #128	; 0x80
 8009bea:	d10e      	bne.n	8009c0a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bf6:	2b80      	cmp	r3, #128	; 0x80
 8009bf8:	d107      	bne.n	8009c0a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 f903 	bl	8009e10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	691b      	ldr	r3, [r3, #16]
 8009c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c14:	2b40      	cmp	r3, #64	; 0x40
 8009c16:	d10e      	bne.n	8009c36 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68db      	ldr	r3, [r3, #12]
 8009c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c22:	2b40      	cmp	r3, #64	; 0x40
 8009c24:	d107      	bne.n	8009c36 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 f838 	bl	8009ca6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	691b      	ldr	r3, [r3, #16]
 8009c3c:	f003 0320 	and.w	r3, r3, #32
 8009c40:	2b20      	cmp	r3, #32
 8009c42:	d10e      	bne.n	8009c62 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	f003 0320 	and.w	r3, r3, #32
 8009c4e:	2b20      	cmp	r3, #32
 8009c50:	d107      	bne.n	8009c62 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f06f 0220 	mvn.w	r2, #32
 8009c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 f8cd 	bl	8009dfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c62:	bf00      	nop
 8009c64:	3708      	adds	r7, #8
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c6a:	b480      	push	{r7}
 8009c6c:	b083      	sub	sp, #12
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c72:	bf00      	nop
 8009c74:	370c      	adds	r7, #12
 8009c76:	46bd      	mov	sp, r7
 8009c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7c:	4770      	bx	lr

08009c7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c7e:	b480      	push	{r7}
 8009c80:	b083      	sub	sp, #12
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c86:	bf00      	nop
 8009c88:	370c      	adds	r7, #12
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr

08009c92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c92:	b480      	push	{r7}
 8009c94:	b083      	sub	sp, #12
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c9a:	bf00      	nop
 8009c9c:	370c      	adds	r7, #12
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr

08009ca6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ca6:	b480      	push	{r7}
 8009ca8:	b083      	sub	sp, #12
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009cae:	bf00      	nop
 8009cb0:	370c      	adds	r7, #12
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr
	...

08009cbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	4a40      	ldr	r2, [pc, #256]	; (8009dd0 <TIM_Base_SetConfig+0x114>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d013      	beq.n	8009cfc <TIM_Base_SetConfig+0x40>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cda:	d00f      	beq.n	8009cfc <TIM_Base_SetConfig+0x40>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4a3d      	ldr	r2, [pc, #244]	; (8009dd4 <TIM_Base_SetConfig+0x118>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d00b      	beq.n	8009cfc <TIM_Base_SetConfig+0x40>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4a3c      	ldr	r2, [pc, #240]	; (8009dd8 <TIM_Base_SetConfig+0x11c>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d007      	beq.n	8009cfc <TIM_Base_SetConfig+0x40>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4a3b      	ldr	r2, [pc, #236]	; (8009ddc <TIM_Base_SetConfig+0x120>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d003      	beq.n	8009cfc <TIM_Base_SetConfig+0x40>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a3a      	ldr	r2, [pc, #232]	; (8009de0 <TIM_Base_SetConfig+0x124>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d108      	bne.n	8009d0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	68fa      	ldr	r2, [r7, #12]
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	4a2f      	ldr	r2, [pc, #188]	; (8009dd0 <TIM_Base_SetConfig+0x114>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d02b      	beq.n	8009d6e <TIM_Base_SetConfig+0xb2>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d1c:	d027      	beq.n	8009d6e <TIM_Base_SetConfig+0xb2>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	4a2c      	ldr	r2, [pc, #176]	; (8009dd4 <TIM_Base_SetConfig+0x118>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d023      	beq.n	8009d6e <TIM_Base_SetConfig+0xb2>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	4a2b      	ldr	r2, [pc, #172]	; (8009dd8 <TIM_Base_SetConfig+0x11c>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d01f      	beq.n	8009d6e <TIM_Base_SetConfig+0xb2>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	4a2a      	ldr	r2, [pc, #168]	; (8009ddc <TIM_Base_SetConfig+0x120>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d01b      	beq.n	8009d6e <TIM_Base_SetConfig+0xb2>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4a29      	ldr	r2, [pc, #164]	; (8009de0 <TIM_Base_SetConfig+0x124>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d017      	beq.n	8009d6e <TIM_Base_SetConfig+0xb2>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	4a28      	ldr	r2, [pc, #160]	; (8009de4 <TIM_Base_SetConfig+0x128>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d013      	beq.n	8009d6e <TIM_Base_SetConfig+0xb2>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4a27      	ldr	r2, [pc, #156]	; (8009de8 <TIM_Base_SetConfig+0x12c>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d00f      	beq.n	8009d6e <TIM_Base_SetConfig+0xb2>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4a26      	ldr	r2, [pc, #152]	; (8009dec <TIM_Base_SetConfig+0x130>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d00b      	beq.n	8009d6e <TIM_Base_SetConfig+0xb2>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a25      	ldr	r2, [pc, #148]	; (8009df0 <TIM_Base_SetConfig+0x134>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d007      	beq.n	8009d6e <TIM_Base_SetConfig+0xb2>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4a24      	ldr	r2, [pc, #144]	; (8009df4 <TIM_Base_SetConfig+0x138>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d003      	beq.n	8009d6e <TIM_Base_SetConfig+0xb2>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a23      	ldr	r2, [pc, #140]	; (8009df8 <TIM_Base_SetConfig+0x13c>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d108      	bne.n	8009d80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	68fa      	ldr	r2, [r7, #12]
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	695b      	ldr	r3, [r3, #20]
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	689a      	ldr	r2, [r3, #8]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	4a0a      	ldr	r2, [pc, #40]	; (8009dd0 <TIM_Base_SetConfig+0x114>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d003      	beq.n	8009db4 <TIM_Base_SetConfig+0xf8>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	4a0c      	ldr	r2, [pc, #48]	; (8009de0 <TIM_Base_SetConfig+0x124>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d103      	bne.n	8009dbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	691a      	ldr	r2, [r3, #16]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	615a      	str	r2, [r3, #20]
}
 8009dc2:	bf00      	nop
 8009dc4:	3714      	adds	r7, #20
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr
 8009dce:	bf00      	nop
 8009dd0:	40010000 	.word	0x40010000
 8009dd4:	40000400 	.word	0x40000400
 8009dd8:	40000800 	.word	0x40000800
 8009ddc:	40000c00 	.word	0x40000c00
 8009de0:	40010400 	.word	0x40010400
 8009de4:	40014000 	.word	0x40014000
 8009de8:	40014400 	.word	0x40014400
 8009dec:	40014800 	.word	0x40014800
 8009df0:	40001800 	.word	0x40001800
 8009df4:	40001c00 	.word	0x40001c00
 8009df8:	40002000 	.word	0x40002000

08009dfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e04:	bf00      	nop
 8009e06:	370c      	adds	r7, #12
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b083      	sub	sp, #12
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e18:	bf00      	nop
 8009e1a:	370c      	adds	r7, #12
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d101      	bne.n	8009e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e32:	2301      	movs	r3, #1
 8009e34:	e03f      	b.n	8009eb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d106      	bne.n	8009e50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f7f8 f8d6 	bl	8001ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2224      	movs	r2, #36	; 0x24
 8009e54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	68da      	ldr	r2, [r3, #12]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009e66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 f829 	bl	8009ec0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	691a      	ldr	r2, [r3, #16]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	695a      	ldr	r2, [r3, #20]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68da      	ldr	r2, [r3, #12]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009e9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2220      	movs	r2, #32
 8009ea8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2220      	movs	r2, #32
 8009eb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3708      	adds	r7, #8
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
	...

08009ec0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec4:	b085      	sub	sp, #20
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	691b      	ldr	r3, [r3, #16]
 8009ed0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	68da      	ldr	r2, [r3, #12]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	430a      	orrs	r2, r1
 8009ede:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	689a      	ldr	r2, [r3, #8]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	431a      	orrs	r2, r3
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	695b      	ldr	r3, [r3, #20]
 8009eee:	431a      	orrs	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	69db      	ldr	r3, [r3, #28]
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009f02:	f023 030c 	bic.w	r3, r3, #12
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	6812      	ldr	r2, [r2, #0]
 8009f0a:	68f9      	ldr	r1, [r7, #12]
 8009f0c:	430b      	orrs	r3, r1
 8009f0e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	695b      	ldr	r3, [r3, #20]
 8009f16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	699a      	ldr	r2, [r3, #24]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	430a      	orrs	r2, r1
 8009f24:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	69db      	ldr	r3, [r3, #28]
 8009f2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f2e:	f040 8199 	bne.w	800a264 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4ac6      	ldr	r2, [pc, #792]	; (800a250 <UART_SetConfig+0x390>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d00f      	beq.n	8009f5c <UART_SetConfig+0x9c>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4ac4      	ldr	r2, [pc, #784]	; (800a254 <UART_SetConfig+0x394>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d00a      	beq.n	8009f5c <UART_SetConfig+0x9c>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4ac3      	ldr	r2, [pc, #780]	; (800a258 <UART_SetConfig+0x398>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d005      	beq.n	8009f5c <UART_SetConfig+0x9c>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4ac1      	ldr	r2, [pc, #772]	; (800a25c <UART_SetConfig+0x39c>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	f040 80bd 	bne.w	800a0d6 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009f5c:	f7fd fd04 	bl	8007968 <HAL_RCC_GetPCLK2Freq>
 8009f60:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	461d      	mov	r5, r3
 8009f66:	f04f 0600 	mov.w	r6, #0
 8009f6a:	46a8      	mov	r8, r5
 8009f6c:	46b1      	mov	r9, r6
 8009f6e:	eb18 0308 	adds.w	r3, r8, r8
 8009f72:	eb49 0409 	adc.w	r4, r9, r9
 8009f76:	4698      	mov	r8, r3
 8009f78:	46a1      	mov	r9, r4
 8009f7a:	eb18 0805 	adds.w	r8, r8, r5
 8009f7e:	eb49 0906 	adc.w	r9, r9, r6
 8009f82:	f04f 0100 	mov.w	r1, #0
 8009f86:	f04f 0200 	mov.w	r2, #0
 8009f8a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009f8e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009f92:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009f96:	4688      	mov	r8, r1
 8009f98:	4691      	mov	r9, r2
 8009f9a:	eb18 0005 	adds.w	r0, r8, r5
 8009f9e:	eb49 0106 	adc.w	r1, r9, r6
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	461d      	mov	r5, r3
 8009fa8:	f04f 0600 	mov.w	r6, #0
 8009fac:	196b      	adds	r3, r5, r5
 8009fae:	eb46 0406 	adc.w	r4, r6, r6
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	4623      	mov	r3, r4
 8009fb6:	f7f6 f983 	bl	80002c0 <__aeabi_uldivmod>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	460c      	mov	r4, r1
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	4ba7      	ldr	r3, [pc, #668]	; (800a260 <UART_SetConfig+0x3a0>)
 8009fc2:	fba3 2302 	umull	r2, r3, r3, r2
 8009fc6:	095b      	lsrs	r3, r3, #5
 8009fc8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	461d      	mov	r5, r3
 8009fd0:	f04f 0600 	mov.w	r6, #0
 8009fd4:	46a9      	mov	r9, r5
 8009fd6:	46b2      	mov	sl, r6
 8009fd8:	eb19 0309 	adds.w	r3, r9, r9
 8009fdc:	eb4a 040a 	adc.w	r4, sl, sl
 8009fe0:	4699      	mov	r9, r3
 8009fe2:	46a2      	mov	sl, r4
 8009fe4:	eb19 0905 	adds.w	r9, r9, r5
 8009fe8:	eb4a 0a06 	adc.w	sl, sl, r6
 8009fec:	f04f 0100 	mov.w	r1, #0
 8009ff0:	f04f 0200 	mov.w	r2, #0
 8009ff4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009ff8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009ffc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a000:	4689      	mov	r9, r1
 800a002:	4692      	mov	sl, r2
 800a004:	eb19 0005 	adds.w	r0, r9, r5
 800a008:	eb4a 0106 	adc.w	r1, sl, r6
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	461d      	mov	r5, r3
 800a012:	f04f 0600 	mov.w	r6, #0
 800a016:	196b      	adds	r3, r5, r5
 800a018:	eb46 0406 	adc.w	r4, r6, r6
 800a01c:	461a      	mov	r2, r3
 800a01e:	4623      	mov	r3, r4
 800a020:	f7f6 f94e 	bl	80002c0 <__aeabi_uldivmod>
 800a024:	4603      	mov	r3, r0
 800a026:	460c      	mov	r4, r1
 800a028:	461a      	mov	r2, r3
 800a02a:	4b8d      	ldr	r3, [pc, #564]	; (800a260 <UART_SetConfig+0x3a0>)
 800a02c:	fba3 1302 	umull	r1, r3, r3, r2
 800a030:	095b      	lsrs	r3, r3, #5
 800a032:	2164      	movs	r1, #100	; 0x64
 800a034:	fb01 f303 	mul.w	r3, r1, r3
 800a038:	1ad3      	subs	r3, r2, r3
 800a03a:	00db      	lsls	r3, r3, #3
 800a03c:	3332      	adds	r3, #50	; 0x32
 800a03e:	4a88      	ldr	r2, [pc, #544]	; (800a260 <UART_SetConfig+0x3a0>)
 800a040:	fba2 2303 	umull	r2, r3, r2, r3
 800a044:	095b      	lsrs	r3, r3, #5
 800a046:	005b      	lsls	r3, r3, #1
 800a048:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a04c:	4498      	add	r8, r3
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	461d      	mov	r5, r3
 800a052:	f04f 0600 	mov.w	r6, #0
 800a056:	46a9      	mov	r9, r5
 800a058:	46b2      	mov	sl, r6
 800a05a:	eb19 0309 	adds.w	r3, r9, r9
 800a05e:	eb4a 040a 	adc.w	r4, sl, sl
 800a062:	4699      	mov	r9, r3
 800a064:	46a2      	mov	sl, r4
 800a066:	eb19 0905 	adds.w	r9, r9, r5
 800a06a:	eb4a 0a06 	adc.w	sl, sl, r6
 800a06e:	f04f 0100 	mov.w	r1, #0
 800a072:	f04f 0200 	mov.w	r2, #0
 800a076:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a07a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a07e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a082:	4689      	mov	r9, r1
 800a084:	4692      	mov	sl, r2
 800a086:	eb19 0005 	adds.w	r0, r9, r5
 800a08a:	eb4a 0106 	adc.w	r1, sl, r6
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	461d      	mov	r5, r3
 800a094:	f04f 0600 	mov.w	r6, #0
 800a098:	196b      	adds	r3, r5, r5
 800a09a:	eb46 0406 	adc.w	r4, r6, r6
 800a09e:	461a      	mov	r2, r3
 800a0a0:	4623      	mov	r3, r4
 800a0a2:	f7f6 f90d 	bl	80002c0 <__aeabi_uldivmod>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	460c      	mov	r4, r1
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	4b6c      	ldr	r3, [pc, #432]	; (800a260 <UART_SetConfig+0x3a0>)
 800a0ae:	fba3 1302 	umull	r1, r3, r3, r2
 800a0b2:	095b      	lsrs	r3, r3, #5
 800a0b4:	2164      	movs	r1, #100	; 0x64
 800a0b6:	fb01 f303 	mul.w	r3, r1, r3
 800a0ba:	1ad3      	subs	r3, r2, r3
 800a0bc:	00db      	lsls	r3, r3, #3
 800a0be:	3332      	adds	r3, #50	; 0x32
 800a0c0:	4a67      	ldr	r2, [pc, #412]	; (800a260 <UART_SetConfig+0x3a0>)
 800a0c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0c6:	095b      	lsrs	r3, r3, #5
 800a0c8:	f003 0207 	and.w	r2, r3, #7
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4442      	add	r2, r8
 800a0d2:	609a      	str	r2, [r3, #8]
 800a0d4:	e27d      	b.n	800a5d2 <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a0d6:	f7fd fc33 	bl	8007940 <HAL_RCC_GetPCLK1Freq>
 800a0da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	461d      	mov	r5, r3
 800a0e0:	f04f 0600 	mov.w	r6, #0
 800a0e4:	46a8      	mov	r8, r5
 800a0e6:	46b1      	mov	r9, r6
 800a0e8:	eb18 0308 	adds.w	r3, r8, r8
 800a0ec:	eb49 0409 	adc.w	r4, r9, r9
 800a0f0:	4698      	mov	r8, r3
 800a0f2:	46a1      	mov	r9, r4
 800a0f4:	eb18 0805 	adds.w	r8, r8, r5
 800a0f8:	eb49 0906 	adc.w	r9, r9, r6
 800a0fc:	f04f 0100 	mov.w	r1, #0
 800a100:	f04f 0200 	mov.w	r2, #0
 800a104:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a108:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a10c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a110:	4688      	mov	r8, r1
 800a112:	4691      	mov	r9, r2
 800a114:	eb18 0005 	adds.w	r0, r8, r5
 800a118:	eb49 0106 	adc.w	r1, r9, r6
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	461d      	mov	r5, r3
 800a122:	f04f 0600 	mov.w	r6, #0
 800a126:	196b      	adds	r3, r5, r5
 800a128:	eb46 0406 	adc.w	r4, r6, r6
 800a12c:	461a      	mov	r2, r3
 800a12e:	4623      	mov	r3, r4
 800a130:	f7f6 f8c6 	bl	80002c0 <__aeabi_uldivmod>
 800a134:	4603      	mov	r3, r0
 800a136:	460c      	mov	r4, r1
 800a138:	461a      	mov	r2, r3
 800a13a:	4b49      	ldr	r3, [pc, #292]	; (800a260 <UART_SetConfig+0x3a0>)
 800a13c:	fba3 2302 	umull	r2, r3, r3, r2
 800a140:	095b      	lsrs	r3, r3, #5
 800a142:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	461d      	mov	r5, r3
 800a14a:	f04f 0600 	mov.w	r6, #0
 800a14e:	46a9      	mov	r9, r5
 800a150:	46b2      	mov	sl, r6
 800a152:	eb19 0309 	adds.w	r3, r9, r9
 800a156:	eb4a 040a 	adc.w	r4, sl, sl
 800a15a:	4699      	mov	r9, r3
 800a15c:	46a2      	mov	sl, r4
 800a15e:	eb19 0905 	adds.w	r9, r9, r5
 800a162:	eb4a 0a06 	adc.w	sl, sl, r6
 800a166:	f04f 0100 	mov.w	r1, #0
 800a16a:	f04f 0200 	mov.w	r2, #0
 800a16e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a172:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a176:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a17a:	4689      	mov	r9, r1
 800a17c:	4692      	mov	sl, r2
 800a17e:	eb19 0005 	adds.w	r0, r9, r5
 800a182:	eb4a 0106 	adc.w	r1, sl, r6
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	461d      	mov	r5, r3
 800a18c:	f04f 0600 	mov.w	r6, #0
 800a190:	196b      	adds	r3, r5, r5
 800a192:	eb46 0406 	adc.w	r4, r6, r6
 800a196:	461a      	mov	r2, r3
 800a198:	4623      	mov	r3, r4
 800a19a:	f7f6 f891 	bl	80002c0 <__aeabi_uldivmod>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	460c      	mov	r4, r1
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	4b2e      	ldr	r3, [pc, #184]	; (800a260 <UART_SetConfig+0x3a0>)
 800a1a6:	fba3 1302 	umull	r1, r3, r3, r2
 800a1aa:	095b      	lsrs	r3, r3, #5
 800a1ac:	2164      	movs	r1, #100	; 0x64
 800a1ae:	fb01 f303 	mul.w	r3, r1, r3
 800a1b2:	1ad3      	subs	r3, r2, r3
 800a1b4:	00db      	lsls	r3, r3, #3
 800a1b6:	3332      	adds	r3, #50	; 0x32
 800a1b8:	4a29      	ldr	r2, [pc, #164]	; (800a260 <UART_SetConfig+0x3a0>)
 800a1ba:	fba2 2303 	umull	r2, r3, r2, r3
 800a1be:	095b      	lsrs	r3, r3, #5
 800a1c0:	005b      	lsls	r3, r3, #1
 800a1c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a1c6:	4498      	add	r8, r3
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	461d      	mov	r5, r3
 800a1cc:	f04f 0600 	mov.w	r6, #0
 800a1d0:	46a9      	mov	r9, r5
 800a1d2:	46b2      	mov	sl, r6
 800a1d4:	eb19 0309 	adds.w	r3, r9, r9
 800a1d8:	eb4a 040a 	adc.w	r4, sl, sl
 800a1dc:	4699      	mov	r9, r3
 800a1de:	46a2      	mov	sl, r4
 800a1e0:	eb19 0905 	adds.w	r9, r9, r5
 800a1e4:	eb4a 0a06 	adc.w	sl, sl, r6
 800a1e8:	f04f 0100 	mov.w	r1, #0
 800a1ec:	f04f 0200 	mov.w	r2, #0
 800a1f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a1f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a1f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a1fc:	4689      	mov	r9, r1
 800a1fe:	4692      	mov	sl, r2
 800a200:	eb19 0005 	adds.w	r0, r9, r5
 800a204:	eb4a 0106 	adc.w	r1, sl, r6
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	461d      	mov	r5, r3
 800a20e:	f04f 0600 	mov.w	r6, #0
 800a212:	196b      	adds	r3, r5, r5
 800a214:	eb46 0406 	adc.w	r4, r6, r6
 800a218:	461a      	mov	r2, r3
 800a21a:	4623      	mov	r3, r4
 800a21c:	f7f6 f850 	bl	80002c0 <__aeabi_uldivmod>
 800a220:	4603      	mov	r3, r0
 800a222:	460c      	mov	r4, r1
 800a224:	461a      	mov	r2, r3
 800a226:	4b0e      	ldr	r3, [pc, #56]	; (800a260 <UART_SetConfig+0x3a0>)
 800a228:	fba3 1302 	umull	r1, r3, r3, r2
 800a22c:	095b      	lsrs	r3, r3, #5
 800a22e:	2164      	movs	r1, #100	; 0x64
 800a230:	fb01 f303 	mul.w	r3, r1, r3
 800a234:	1ad3      	subs	r3, r2, r3
 800a236:	00db      	lsls	r3, r3, #3
 800a238:	3332      	adds	r3, #50	; 0x32
 800a23a:	4a09      	ldr	r2, [pc, #36]	; (800a260 <UART_SetConfig+0x3a0>)
 800a23c:	fba2 2303 	umull	r2, r3, r2, r3
 800a240:	095b      	lsrs	r3, r3, #5
 800a242:	f003 0207 	and.w	r2, r3, #7
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4442      	add	r2, r8
 800a24c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800a24e:	e1c0      	b.n	800a5d2 <UART_SetConfig+0x712>
 800a250:	40011000 	.word	0x40011000
 800a254:	40011400 	.word	0x40011400
 800a258:	40011800 	.word	0x40011800
 800a25c:	40011c00 	.word	0x40011c00
 800a260:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4adc      	ldr	r2, [pc, #880]	; (800a5dc <UART_SetConfig+0x71c>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d00f      	beq.n	800a28e <UART_SetConfig+0x3ce>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4adb      	ldr	r2, [pc, #876]	; (800a5e0 <UART_SetConfig+0x720>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d00a      	beq.n	800a28e <UART_SetConfig+0x3ce>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4ad9      	ldr	r2, [pc, #868]	; (800a5e4 <UART_SetConfig+0x724>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d005      	beq.n	800a28e <UART_SetConfig+0x3ce>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4ad8      	ldr	r2, [pc, #864]	; (800a5e8 <UART_SetConfig+0x728>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	f040 80d1 	bne.w	800a430 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a28e:	f7fd fb6b 	bl	8007968 <HAL_RCC_GetPCLK2Freq>
 800a292:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	469a      	mov	sl, r3
 800a298:	f04f 0b00 	mov.w	fp, #0
 800a29c:	46d0      	mov	r8, sl
 800a29e:	46d9      	mov	r9, fp
 800a2a0:	eb18 0308 	adds.w	r3, r8, r8
 800a2a4:	eb49 0409 	adc.w	r4, r9, r9
 800a2a8:	4698      	mov	r8, r3
 800a2aa:	46a1      	mov	r9, r4
 800a2ac:	eb18 080a 	adds.w	r8, r8, sl
 800a2b0:	eb49 090b 	adc.w	r9, r9, fp
 800a2b4:	f04f 0100 	mov.w	r1, #0
 800a2b8:	f04f 0200 	mov.w	r2, #0
 800a2bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a2c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a2c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a2c8:	4688      	mov	r8, r1
 800a2ca:	4691      	mov	r9, r2
 800a2cc:	eb1a 0508 	adds.w	r5, sl, r8
 800a2d0:	eb4b 0609 	adc.w	r6, fp, r9
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	4619      	mov	r1, r3
 800a2da:	f04f 0200 	mov.w	r2, #0
 800a2de:	f04f 0300 	mov.w	r3, #0
 800a2e2:	f04f 0400 	mov.w	r4, #0
 800a2e6:	0094      	lsls	r4, r2, #2
 800a2e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a2ec:	008b      	lsls	r3, r1, #2
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	4623      	mov	r3, r4
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	4631      	mov	r1, r6
 800a2f6:	f7f5 ffe3 	bl	80002c0 <__aeabi_uldivmod>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	460c      	mov	r4, r1
 800a2fe:	461a      	mov	r2, r3
 800a300:	4bba      	ldr	r3, [pc, #744]	; (800a5ec <UART_SetConfig+0x72c>)
 800a302:	fba3 2302 	umull	r2, r3, r3, r2
 800a306:	095b      	lsrs	r3, r3, #5
 800a308:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	469b      	mov	fp, r3
 800a310:	f04f 0c00 	mov.w	ip, #0
 800a314:	46d9      	mov	r9, fp
 800a316:	46e2      	mov	sl, ip
 800a318:	eb19 0309 	adds.w	r3, r9, r9
 800a31c:	eb4a 040a 	adc.w	r4, sl, sl
 800a320:	4699      	mov	r9, r3
 800a322:	46a2      	mov	sl, r4
 800a324:	eb19 090b 	adds.w	r9, r9, fp
 800a328:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a32c:	f04f 0100 	mov.w	r1, #0
 800a330:	f04f 0200 	mov.w	r2, #0
 800a334:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a338:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a33c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a340:	4689      	mov	r9, r1
 800a342:	4692      	mov	sl, r2
 800a344:	eb1b 0509 	adds.w	r5, fp, r9
 800a348:	eb4c 060a 	adc.w	r6, ip, sl
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	4619      	mov	r1, r3
 800a352:	f04f 0200 	mov.w	r2, #0
 800a356:	f04f 0300 	mov.w	r3, #0
 800a35a:	f04f 0400 	mov.w	r4, #0
 800a35e:	0094      	lsls	r4, r2, #2
 800a360:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a364:	008b      	lsls	r3, r1, #2
 800a366:	461a      	mov	r2, r3
 800a368:	4623      	mov	r3, r4
 800a36a:	4628      	mov	r0, r5
 800a36c:	4631      	mov	r1, r6
 800a36e:	f7f5 ffa7 	bl	80002c0 <__aeabi_uldivmod>
 800a372:	4603      	mov	r3, r0
 800a374:	460c      	mov	r4, r1
 800a376:	461a      	mov	r2, r3
 800a378:	4b9c      	ldr	r3, [pc, #624]	; (800a5ec <UART_SetConfig+0x72c>)
 800a37a:	fba3 1302 	umull	r1, r3, r3, r2
 800a37e:	095b      	lsrs	r3, r3, #5
 800a380:	2164      	movs	r1, #100	; 0x64
 800a382:	fb01 f303 	mul.w	r3, r1, r3
 800a386:	1ad3      	subs	r3, r2, r3
 800a388:	011b      	lsls	r3, r3, #4
 800a38a:	3332      	adds	r3, #50	; 0x32
 800a38c:	4a97      	ldr	r2, [pc, #604]	; (800a5ec <UART_SetConfig+0x72c>)
 800a38e:	fba2 2303 	umull	r2, r3, r2, r3
 800a392:	095b      	lsrs	r3, r3, #5
 800a394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a398:	4498      	add	r8, r3
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	469b      	mov	fp, r3
 800a39e:	f04f 0c00 	mov.w	ip, #0
 800a3a2:	46d9      	mov	r9, fp
 800a3a4:	46e2      	mov	sl, ip
 800a3a6:	eb19 0309 	adds.w	r3, r9, r9
 800a3aa:	eb4a 040a 	adc.w	r4, sl, sl
 800a3ae:	4699      	mov	r9, r3
 800a3b0:	46a2      	mov	sl, r4
 800a3b2:	eb19 090b 	adds.w	r9, r9, fp
 800a3b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a3ba:	f04f 0100 	mov.w	r1, #0
 800a3be:	f04f 0200 	mov.w	r2, #0
 800a3c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a3c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a3ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a3ce:	4689      	mov	r9, r1
 800a3d0:	4692      	mov	sl, r2
 800a3d2:	eb1b 0509 	adds.w	r5, fp, r9
 800a3d6:	eb4c 060a 	adc.w	r6, ip, sl
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	4619      	mov	r1, r3
 800a3e0:	f04f 0200 	mov.w	r2, #0
 800a3e4:	f04f 0300 	mov.w	r3, #0
 800a3e8:	f04f 0400 	mov.w	r4, #0
 800a3ec:	0094      	lsls	r4, r2, #2
 800a3ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a3f2:	008b      	lsls	r3, r1, #2
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	4623      	mov	r3, r4
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	4631      	mov	r1, r6
 800a3fc:	f7f5 ff60 	bl	80002c0 <__aeabi_uldivmod>
 800a400:	4603      	mov	r3, r0
 800a402:	460c      	mov	r4, r1
 800a404:	461a      	mov	r2, r3
 800a406:	4b79      	ldr	r3, [pc, #484]	; (800a5ec <UART_SetConfig+0x72c>)
 800a408:	fba3 1302 	umull	r1, r3, r3, r2
 800a40c:	095b      	lsrs	r3, r3, #5
 800a40e:	2164      	movs	r1, #100	; 0x64
 800a410:	fb01 f303 	mul.w	r3, r1, r3
 800a414:	1ad3      	subs	r3, r2, r3
 800a416:	011b      	lsls	r3, r3, #4
 800a418:	3332      	adds	r3, #50	; 0x32
 800a41a:	4a74      	ldr	r2, [pc, #464]	; (800a5ec <UART_SetConfig+0x72c>)
 800a41c:	fba2 2303 	umull	r2, r3, r2, r3
 800a420:	095b      	lsrs	r3, r3, #5
 800a422:	f003 020f 	and.w	r2, r3, #15
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4442      	add	r2, r8
 800a42c:	609a      	str	r2, [r3, #8]
 800a42e:	e0d0      	b.n	800a5d2 <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 800a430:	f7fd fa86 	bl	8007940 <HAL_RCC_GetPCLK1Freq>
 800a434:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	469a      	mov	sl, r3
 800a43a:	f04f 0b00 	mov.w	fp, #0
 800a43e:	46d0      	mov	r8, sl
 800a440:	46d9      	mov	r9, fp
 800a442:	eb18 0308 	adds.w	r3, r8, r8
 800a446:	eb49 0409 	adc.w	r4, r9, r9
 800a44a:	4698      	mov	r8, r3
 800a44c:	46a1      	mov	r9, r4
 800a44e:	eb18 080a 	adds.w	r8, r8, sl
 800a452:	eb49 090b 	adc.w	r9, r9, fp
 800a456:	f04f 0100 	mov.w	r1, #0
 800a45a:	f04f 0200 	mov.w	r2, #0
 800a45e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a462:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a466:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a46a:	4688      	mov	r8, r1
 800a46c:	4691      	mov	r9, r2
 800a46e:	eb1a 0508 	adds.w	r5, sl, r8
 800a472:	eb4b 0609 	adc.w	r6, fp, r9
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	4619      	mov	r1, r3
 800a47c:	f04f 0200 	mov.w	r2, #0
 800a480:	f04f 0300 	mov.w	r3, #0
 800a484:	f04f 0400 	mov.w	r4, #0
 800a488:	0094      	lsls	r4, r2, #2
 800a48a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a48e:	008b      	lsls	r3, r1, #2
 800a490:	461a      	mov	r2, r3
 800a492:	4623      	mov	r3, r4
 800a494:	4628      	mov	r0, r5
 800a496:	4631      	mov	r1, r6
 800a498:	f7f5 ff12 	bl	80002c0 <__aeabi_uldivmod>
 800a49c:	4603      	mov	r3, r0
 800a49e:	460c      	mov	r4, r1
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	4b52      	ldr	r3, [pc, #328]	; (800a5ec <UART_SetConfig+0x72c>)
 800a4a4:	fba3 2302 	umull	r2, r3, r3, r2
 800a4a8:	095b      	lsrs	r3, r3, #5
 800a4aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	469b      	mov	fp, r3
 800a4b2:	f04f 0c00 	mov.w	ip, #0
 800a4b6:	46d9      	mov	r9, fp
 800a4b8:	46e2      	mov	sl, ip
 800a4ba:	eb19 0309 	adds.w	r3, r9, r9
 800a4be:	eb4a 040a 	adc.w	r4, sl, sl
 800a4c2:	4699      	mov	r9, r3
 800a4c4:	46a2      	mov	sl, r4
 800a4c6:	eb19 090b 	adds.w	r9, r9, fp
 800a4ca:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a4ce:	f04f 0100 	mov.w	r1, #0
 800a4d2:	f04f 0200 	mov.w	r2, #0
 800a4d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a4da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a4de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a4e2:	4689      	mov	r9, r1
 800a4e4:	4692      	mov	sl, r2
 800a4e6:	eb1b 0509 	adds.w	r5, fp, r9
 800a4ea:	eb4c 060a 	adc.w	r6, ip, sl
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	f04f 0200 	mov.w	r2, #0
 800a4f8:	f04f 0300 	mov.w	r3, #0
 800a4fc:	f04f 0400 	mov.w	r4, #0
 800a500:	0094      	lsls	r4, r2, #2
 800a502:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a506:	008b      	lsls	r3, r1, #2
 800a508:	461a      	mov	r2, r3
 800a50a:	4623      	mov	r3, r4
 800a50c:	4628      	mov	r0, r5
 800a50e:	4631      	mov	r1, r6
 800a510:	f7f5 fed6 	bl	80002c0 <__aeabi_uldivmod>
 800a514:	4603      	mov	r3, r0
 800a516:	460c      	mov	r4, r1
 800a518:	461a      	mov	r2, r3
 800a51a:	4b34      	ldr	r3, [pc, #208]	; (800a5ec <UART_SetConfig+0x72c>)
 800a51c:	fba3 1302 	umull	r1, r3, r3, r2
 800a520:	095b      	lsrs	r3, r3, #5
 800a522:	2164      	movs	r1, #100	; 0x64
 800a524:	fb01 f303 	mul.w	r3, r1, r3
 800a528:	1ad3      	subs	r3, r2, r3
 800a52a:	011b      	lsls	r3, r3, #4
 800a52c:	3332      	adds	r3, #50	; 0x32
 800a52e:	4a2f      	ldr	r2, [pc, #188]	; (800a5ec <UART_SetConfig+0x72c>)
 800a530:	fba2 2303 	umull	r2, r3, r2, r3
 800a534:	095b      	lsrs	r3, r3, #5
 800a536:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a53a:	4498      	add	r8, r3
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	469b      	mov	fp, r3
 800a540:	f04f 0c00 	mov.w	ip, #0
 800a544:	46d9      	mov	r9, fp
 800a546:	46e2      	mov	sl, ip
 800a548:	eb19 0309 	adds.w	r3, r9, r9
 800a54c:	eb4a 040a 	adc.w	r4, sl, sl
 800a550:	4699      	mov	r9, r3
 800a552:	46a2      	mov	sl, r4
 800a554:	eb19 090b 	adds.w	r9, r9, fp
 800a558:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a55c:	f04f 0100 	mov.w	r1, #0
 800a560:	f04f 0200 	mov.w	r2, #0
 800a564:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a568:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a56c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a570:	4689      	mov	r9, r1
 800a572:	4692      	mov	sl, r2
 800a574:	eb1b 0509 	adds.w	r5, fp, r9
 800a578:	eb4c 060a 	adc.w	r6, ip, sl
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	4619      	mov	r1, r3
 800a582:	f04f 0200 	mov.w	r2, #0
 800a586:	f04f 0300 	mov.w	r3, #0
 800a58a:	f04f 0400 	mov.w	r4, #0
 800a58e:	0094      	lsls	r4, r2, #2
 800a590:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a594:	008b      	lsls	r3, r1, #2
 800a596:	461a      	mov	r2, r3
 800a598:	4623      	mov	r3, r4
 800a59a:	4628      	mov	r0, r5
 800a59c:	4631      	mov	r1, r6
 800a59e:	f7f5 fe8f 	bl	80002c0 <__aeabi_uldivmod>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	460c      	mov	r4, r1
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	4b10      	ldr	r3, [pc, #64]	; (800a5ec <UART_SetConfig+0x72c>)
 800a5aa:	fba3 1302 	umull	r1, r3, r3, r2
 800a5ae:	095b      	lsrs	r3, r3, #5
 800a5b0:	2164      	movs	r1, #100	; 0x64
 800a5b2:	fb01 f303 	mul.w	r3, r1, r3
 800a5b6:	1ad3      	subs	r3, r2, r3
 800a5b8:	011b      	lsls	r3, r3, #4
 800a5ba:	3332      	adds	r3, #50	; 0x32
 800a5bc:	4a0b      	ldr	r2, [pc, #44]	; (800a5ec <UART_SetConfig+0x72c>)
 800a5be:	fba2 2303 	umull	r2, r3, r2, r3
 800a5c2:	095b      	lsrs	r3, r3, #5
 800a5c4:	f003 020f 	and.w	r2, r3, #15
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4442      	add	r2, r8
 800a5ce:	609a      	str	r2, [r3, #8]
}
 800a5d0:	e7ff      	b.n	800a5d2 <UART_SetConfig+0x712>
 800a5d2:	bf00      	nop
 800a5d4:	3714      	adds	r7, #20
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5dc:	40011000 	.word	0x40011000
 800a5e0:	40011400 	.word	0x40011400
 800a5e4:	40011800 	.word	0x40011800
 800a5e8:	40011c00 	.word	0x40011c00
 800a5ec:	51eb851f 	.word	0x51eb851f

0800a5f0 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800a5f0:	b480      	push	{r7}
 800a5f2:	b085      	sub	sp, #20
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a608:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	4b2f      	ldr	r3, [pc, #188]	; (800a6cc <FSMC_NORSRAM_Init+0xdc>)
 800a60e:	4013      	ands	r3, r2
 800a610:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a61a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800a620:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800a626:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800a62c:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 800a632:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800a638:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800a63e:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800a644:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800a64a:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 800a650:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 800a656:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 800a65c:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 800a662:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	4313      	orrs	r3, r2
 800a668:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	2b08      	cmp	r3, #8
 800a670:	d103      	bne.n	800a67a <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a678:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	681a      	ldr	r2, [r3, #0]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	68f9      	ldr	r1, [r7, #12]
 800a682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a68a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a68e:	d10a      	bne.n	800a6a6 <FSMC_NORSRAM_Init+0xb6>
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d006      	beq.n	800a6a6 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6a0:	431a      	orrs	r2, r3
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d006      	beq.n	800a6bc <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681a      	ldr	r2, [r3, #0]
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b6:	431a      	orrs	r2, r3
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3714      	adds	r7, #20
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr
 800a6ca:	bf00      	nop
 800a6cc:	ffc00480 	.word	0xffc00480

0800a6d0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b087      	sub	sp, #28
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	60f8      	str	r0, [r7, #12]
 800a6d8:	60b9      	str	r1, [r7, #8]
 800a6da:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	1c5a      	adds	r2, r3, #1
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ea:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800a6f2:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a6fe:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800a706:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800a70e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	691b      	ldr	r3, [r3, #16]
 800a714:	3b01      	subs	r3, #1
 800a716:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a718:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	695b      	ldr	r3, [r3, #20]
 800a71e:	3b02      	subs	r3, #2
 800a720:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800a722:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a728:	4313      	orrs	r3, r2
 800a72a:	697a      	ldr	r2, [r7, #20]
 800a72c:	4313      	orrs	r3, r2
 800a72e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	1c5a      	adds	r2, r3, #1
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	6979      	ldr	r1, [r7, #20]
 800a738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a744:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a748:	d10e      	bne.n	800a768 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a752:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	691b      	ldr	r3, [r3, #16]
 800a758:	3b01      	subs	r3, #1
 800a75a:	051b      	lsls	r3, r3, #20
 800a75c:	697a      	ldr	r2, [r7, #20]
 800a75e:	4313      	orrs	r3, r2
 800a760:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	697a      	ldr	r2, [r7, #20]
 800a766:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	371c      	adds	r7, #28
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr
	...

0800a778 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800a778:	b480      	push	{r7}
 800a77a:	b087      	sub	sp, #28
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	607a      	str	r2, [r7, #4]
 800a784:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800a786:	2300      	movs	r3, #0
 800a788:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a790:	d122      	bne.n	800a7d8 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a79a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800a79c:	697a      	ldr	r2, [r7, #20]
 800a79e:	4b15      	ldr	r3, [pc, #84]	; (800a7f4 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800a7a0:	4013      	ands	r3, r2
 800a7a2:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a7ae:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800a7b6:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800a7be:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a7c4:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a7c6:	697a      	ldr	r2, [r7, #20]
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	6979      	ldr	r1, [r7, #20]
 800a7d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a7d6:	e005      	b.n	800a7e4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a7e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	371c      	adds	r7, #28
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop
 800a7f4:	cff00000 	.word	0xcff00000

0800a7f8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a7f8:	b084      	sub	sp, #16
 800a7fa:	b480      	push	{r7}
 800a7fc:	b085      	sub	sp, #20
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
 800a802:	f107 001c 	add.w	r0, r7, #28
 800a806:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a80a:	2300      	movs	r3, #0
 800a80c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a80e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a810:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a812:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a816:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a818:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a81a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a81e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a822:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a824:	68fa      	ldr	r2, [r7, #12]
 800a826:	4313      	orrs	r3, r2
 800a828:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a832:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	431a      	orrs	r2, r3
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a83e:	2300      	movs	r3, #0
}
 800a840:	4618      	mov	r0, r3
 800a842:	3714      	adds	r7, #20
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	b004      	add	sp, #16
 800a84c:	4770      	bx	lr

0800a84e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a84e:	b480      	push	{r7}
 800a850:	b083      	sub	sp, #12
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	370c      	adds	r7, #12
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a87c:	2300      	movs	r3, #0
}
 800a87e:	4618      	mov	r0, r3
 800a880:	370c      	adds	r7, #12
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr

0800a88a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b082      	sub	sp, #8
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2203      	movs	r2, #3
 800a896:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a898:	2002      	movs	r0, #2
 800a89a:	f7f9 f911 	bl	8003ac0 <HAL_Delay>
  
  return HAL_OK;
 800a89e:	2300      	movs	r3, #0
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3708      	adds	r7, #8
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b083      	sub	sp, #12
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f003 0303 	and.w	r3, r3, #3
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b085      	sub	sp, #20
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a8e2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a8e8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a8ee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a8f0:	68fa      	ldr	r2, [r7, #12]
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a8fe:	f023 030f 	bic.w	r3, r3, #15
 800a902:	68fa      	ldr	r2, [r7, #12]
 800a904:	431a      	orrs	r2, r3
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a90a:	2300      	movs	r3, #0
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3714      	adds	r7, #20
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	691b      	ldr	r3, [r3, #16]
 800a924:	b2db      	uxtb	r3, r3
}
 800a926:	4618      	mov	r0, r3
 800a928:	370c      	adds	r7, #12
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr

0800a932 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a932:	b480      	push	{r7}
 800a934:	b085      	sub	sp, #20
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
 800a93a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	3314      	adds	r3, #20
 800a940:	461a      	mov	r2, r3
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	4413      	add	r3, r2
 800a946:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
}  
 800a94c:	4618      	mov	r0, r3
 800a94e:	3714      	adds	r7, #20
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a962:	2300      	movs	r3, #0
 800a964:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	685a      	ldr	r2, [r3, #4]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a97e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a984:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a98a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	4313      	orrs	r3, r2
 800a990:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a996:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	431a      	orrs	r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a9a2:	2300      	movs	r3, #0

}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3714      	adds	r7, #20
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b088      	sub	sp, #32
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a9be:	2310      	movs	r3, #16
 800a9c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a9c2:	2340      	movs	r3, #64	; 0x40
 800a9c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a9ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a9d0:	f107 0308 	add.w	r3, r7, #8
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f7ff ff74 	bl	800a8c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a9dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9e0:	2110      	movs	r1, #16
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 fa40 	bl	800ae68 <SDMMC_GetCmdResp1>
 800a9e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9ea:	69fb      	ldr	r3, [r7, #28]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3720      	adds	r7, #32
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b088      	sub	sp, #32
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800aa02:	2311      	movs	r3, #17
 800aa04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa06:	2340      	movs	r3, #64	; 0x40
 800aa08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa14:	f107 0308 	add.w	r3, r7, #8
 800aa18:	4619      	mov	r1, r3
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f7ff ff52 	bl	800a8c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800aa20:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa24:	2111      	movs	r1, #17
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 fa1e 	bl	800ae68 <SDMMC_GetCmdResp1>
 800aa2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa2e:	69fb      	ldr	r3, [r7, #28]
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3720      	adds	r7, #32
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b088      	sub	sp, #32
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800aa46:	2312      	movs	r3, #18
 800aa48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa4a:	2340      	movs	r3, #64	; 0x40
 800aa4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa58:	f107 0308 	add.w	r3, r7, #8
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f7ff ff30 	bl	800a8c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800aa64:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa68:	2112      	movs	r1, #18
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 f9fc 	bl	800ae68 <SDMMC_GetCmdResp1>
 800aa70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa72:	69fb      	ldr	r3, [r7, #28]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3720      	adds	r7, #32
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b088      	sub	sp, #32
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800aa8a:	2318      	movs	r3, #24
 800aa8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa8e:	2340      	movs	r3, #64	; 0x40
 800aa90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa92:	2300      	movs	r3, #0
 800aa94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa9c:	f107 0308 	add.w	r3, r7, #8
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f7ff ff0e 	bl	800a8c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800aaa8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaac:	2118      	movs	r1, #24
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 f9da 	bl	800ae68 <SDMMC_GetCmdResp1>
 800aab4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aab6:	69fb      	ldr	r3, [r7, #28]
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3720      	adds	r7, #32
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b088      	sub	sp, #32
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800aace:	2319      	movs	r3, #25
 800aad0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aad2:	2340      	movs	r3, #64	; 0x40
 800aad4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aad6:	2300      	movs	r3, #0
 800aad8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aade:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aae0:	f107 0308 	add.w	r3, r7, #8
 800aae4:	4619      	mov	r1, r3
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f7ff feec 	bl	800a8c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800aaec:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaf0:	2119      	movs	r1, #25
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 f9b8 	bl	800ae68 <SDMMC_GetCmdResp1>
 800aaf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aafa:	69fb      	ldr	r3, [r7, #28]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3720      	adds	r7, #32
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b088      	sub	sp, #32
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ab10:	230c      	movs	r3, #12
 800ab12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab14:	2340      	movs	r3, #64	; 0x40
 800ab16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab22:	f107 0308 	add.w	r3, r7, #8
 800ab26:	4619      	mov	r1, r3
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f7ff fecb 	bl	800a8c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800ab2e:	4a05      	ldr	r2, [pc, #20]	; (800ab44 <SDMMC_CmdStopTransfer+0x40>)
 800ab30:	210c      	movs	r1, #12
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 f998 	bl	800ae68 <SDMMC_GetCmdResp1>
 800ab38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab3a:	69fb      	ldr	r3, [r7, #28]
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3720      	adds	r7, #32
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	05f5e100 	.word	0x05f5e100

0800ab48 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b08a      	sub	sp, #40	; 0x28
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ab58:	2307      	movs	r3, #7
 800ab5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab5c:	2340      	movs	r3, #64	; 0x40
 800ab5e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab60:	2300      	movs	r3, #0
 800ab62:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab68:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab6a:	f107 0310 	add.w	r3, r7, #16
 800ab6e:	4619      	mov	r1, r3
 800ab70:	68f8      	ldr	r0, [r7, #12]
 800ab72:	f7ff fea7 	bl	800a8c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800ab76:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab7a:	2107      	movs	r1, #7
 800ab7c:	68f8      	ldr	r0, [r7, #12]
 800ab7e:	f000 f973 	bl	800ae68 <SDMMC_GetCmdResp1>
 800ab82:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ab84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3728      	adds	r7, #40	; 0x28
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}

0800ab8e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ab8e:	b580      	push	{r7, lr}
 800ab90:	b088      	sub	sp, #32
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ab96:	2300      	movs	r3, #0
 800ab98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aba2:	2300      	movs	r3, #0
 800aba4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abaa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800abac:	f107 0308 	add.w	r3, r7, #8
 800abb0:	4619      	mov	r1, r3
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f7ff fe86 	bl	800a8c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 f92d 	bl	800ae18 <SDMMC_GetCmdError>
 800abbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abc0:	69fb      	ldr	r3, [r7, #28]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3720      	adds	r7, #32
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}

0800abca <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800abca:	b580      	push	{r7, lr}
 800abcc:	b088      	sub	sp, #32
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800abd2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800abd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800abd8:	2308      	movs	r3, #8
 800abda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800abdc:	2340      	movs	r3, #64	; 0x40
 800abde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800abe0:	2300      	movs	r3, #0
 800abe2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800abe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abe8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800abea:	f107 0308 	add.w	r3, r7, #8
 800abee:	4619      	mov	r1, r3
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f7ff fe67 	bl	800a8c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 fb16 	bl	800b228 <SDMMC_GetCmdResp7>
 800abfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abfe:	69fb      	ldr	r3, [r7, #28]
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3720      	adds	r7, #32
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b088      	sub	sp, #32
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ac16:	2337      	movs	r3, #55	; 0x37
 800ac18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac1a:	2340      	movs	r3, #64	; 0x40
 800ac1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac28:	f107 0308 	add.w	r3, r7, #8
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f7ff fe48 	bl	800a8c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800ac34:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac38:	2137      	movs	r1, #55	; 0x37
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 f914 	bl	800ae68 <SDMMC_GetCmdResp1>
 800ac40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac42:	69fb      	ldr	r3, [r7, #28]
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3720      	adds	r7, #32
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b088      	sub	sp, #32
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ac62:	2329      	movs	r3, #41	; 0x29
 800ac64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac66:	2340      	movs	r3, #64	; 0x40
 800ac68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac74:	f107 0308 	add.w	r3, r7, #8
 800ac78:	4619      	mov	r1, r3
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f7ff fe22 	bl	800a8c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 fa23 	bl	800b0cc <SDMMC_GetCmdResp3>
 800ac86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac88:	69fb      	ldr	r3, [r7, #28]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3720      	adds	r7, #32
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800ac92:	b580      	push	{r7, lr}
 800ac94:	b088      	sub	sp, #32
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
 800ac9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800aca0:	2306      	movs	r3, #6
 800aca2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aca4:	2340      	movs	r3, #64	; 0x40
 800aca6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aca8:	2300      	movs	r3, #0
 800acaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800acac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800acb2:	f107 0308 	add.w	r3, r7, #8
 800acb6:	4619      	mov	r1, r3
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f7ff fe03 	bl	800a8c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800acbe:	f241 3288 	movw	r2, #5000	; 0x1388
 800acc2:	2106      	movs	r1, #6
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f000 f8cf 	bl	800ae68 <SDMMC_GetCmdResp1>
 800acca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800accc:	69fb      	ldr	r3, [r7, #28]
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3720      	adds	r7, #32
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}

0800acd6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800acd6:	b580      	push	{r7, lr}
 800acd8:	b088      	sub	sp, #32
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800acde:	2300      	movs	r3, #0
 800ace0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ace2:	2333      	movs	r3, #51	; 0x33
 800ace4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ace6:	2340      	movs	r3, #64	; 0x40
 800ace8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800acea:	2300      	movs	r3, #0
 800acec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800acee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acf2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800acf4:	f107 0308 	add.w	r3, r7, #8
 800acf8:	4619      	mov	r1, r3
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f7ff fde2 	bl	800a8c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800ad00:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad04:	2133      	movs	r1, #51	; 0x33
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 f8ae 	bl	800ae68 <SDMMC_GetCmdResp1>
 800ad0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad0e:	69fb      	ldr	r3, [r7, #28]
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3720      	adds	r7, #32
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b088      	sub	sp, #32
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ad20:	2300      	movs	r3, #0
 800ad22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ad24:	2302      	movs	r3, #2
 800ad26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ad28:	23c0      	movs	r3, #192	; 0xc0
 800ad2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad36:	f107 0308 	add.w	r3, r7, #8
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f7ff fdc1 	bl	800a8c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 f97c 	bl	800b040 <SDMMC_GetCmdResp2>
 800ad48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad4a:	69fb      	ldr	r3, [r7, #28]
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3720      	adds	r7, #32
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b088      	sub	sp, #32
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ad62:	2309      	movs	r3, #9
 800ad64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ad66:	23c0      	movs	r3, #192	; 0xc0
 800ad68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad74:	f107 0308 	add.w	r3, r7, #8
 800ad78:	4619      	mov	r1, r3
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f7ff fda2 	bl	800a8c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f95d 	bl	800b040 <SDMMC_GetCmdResp2>
 800ad86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad88:	69fb      	ldr	r3, [r7, #28]
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3720      	adds	r7, #32
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b088      	sub	sp, #32
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
 800ad9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ada0:	2303      	movs	r3, #3
 800ada2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ada4:	2340      	movs	r3, #64	; 0x40
 800ada6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ada8:	2300      	movs	r3, #0
 800adaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800adac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800adb2:	f107 0308 	add.w	r3, r7, #8
 800adb6:	4619      	mov	r1, r3
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f7ff fd83 	bl	800a8c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800adbe:	683a      	ldr	r2, [r7, #0]
 800adc0:	2103      	movs	r1, #3
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 f9bc 	bl	800b140 <SDMMC_GetCmdResp6>
 800adc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adca:	69fb      	ldr	r3, [r7, #28]
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3720      	adds	r7, #32
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b088      	sub	sp, #32
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ade2:	230d      	movs	r3, #13
 800ade4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ade6:	2340      	movs	r3, #64	; 0x40
 800ade8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800adea:	2300      	movs	r3, #0
 800adec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800adee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adf2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800adf4:	f107 0308 	add.w	r3, r7, #8
 800adf8:	4619      	mov	r1, r3
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f7ff fd62 	bl	800a8c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800ae00:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae04:	210d      	movs	r1, #13
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 f82e 	bl	800ae68 <SDMMC_GetCmdResp1>
 800ae0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae0e:	69fb      	ldr	r3, [r7, #28]
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3720      	adds	r7, #32
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ae18:	b490      	push	{r4, r7}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ae20:	4b0f      	ldr	r3, [pc, #60]	; (800ae60 <SDMMC_GetCmdError+0x48>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a0f      	ldr	r2, [pc, #60]	; (800ae64 <SDMMC_GetCmdError+0x4c>)
 800ae26:	fba2 2303 	umull	r2, r3, r2, r3
 800ae2a:	0a5b      	lsrs	r3, r3, #9
 800ae2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae30:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ae34:	4623      	mov	r3, r4
 800ae36:	1e5c      	subs	r4, r3, #1
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d102      	bne.n	800ae42 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae40:	e009      	b.n	800ae56 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d0f2      	beq.n	800ae34 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	22c5      	movs	r2, #197	; 0xc5
 800ae52:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ae54:	2300      	movs	r3, #0
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3708      	adds	r7, #8
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bc90      	pop	{r4, r7}
 800ae5e:	4770      	bx	lr
 800ae60:	20000004 	.word	0x20000004
 800ae64:	10624dd3 	.word	0x10624dd3

0800ae68 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ae68:	b590      	push	{r4, r7, lr}
 800ae6a:	b087      	sub	sp, #28
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	460b      	mov	r3, r1
 800ae72:	607a      	str	r2, [r7, #4]
 800ae74:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ae76:	4b6f      	ldr	r3, [pc, #444]	; (800b034 <SDMMC_GetCmdResp1+0x1cc>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4a6f      	ldr	r2, [pc, #444]	; (800b038 <SDMMC_GetCmdResp1+0x1d0>)
 800ae7c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae80:	0a5b      	lsrs	r3, r3, #9
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ae88:	4623      	mov	r3, r4
 800ae8a:	1e5c      	subs	r4, r3, #1
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d102      	bne.n	800ae96 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae94:	e0c9      	b.n	800b02a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae9a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d0f0      	beq.n	800ae88 <SDMMC_GetCmdResp1+0x20>
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d1eb      	bne.n	800ae88 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeb4:	f003 0304 	and.w	r3, r3, #4
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d004      	beq.n	800aec6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2204      	movs	r2, #4
 800aec0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aec2:	2304      	movs	r3, #4
 800aec4:	e0b1      	b.n	800b02a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeca:	f003 0301 	and.w	r3, r3, #1
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d004      	beq.n	800aedc <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2201      	movs	r2, #1
 800aed6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aed8:	2301      	movs	r3, #1
 800aeda:	e0a6      	b.n	800b02a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	22c5      	movs	r2, #197	; 0xc5
 800aee0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800aee2:	68f8      	ldr	r0, [r7, #12]
 800aee4:	f7ff fd18 	bl	800a918 <SDIO_GetCommandResponse>
 800aee8:	4603      	mov	r3, r0
 800aeea:	461a      	mov	r2, r3
 800aeec:	7afb      	ldrb	r3, [r7, #11]
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d001      	beq.n	800aef6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aef2:	2301      	movs	r3, #1
 800aef4:	e099      	b.n	800b02a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800aef6:	2100      	movs	r1, #0
 800aef8:	68f8      	ldr	r0, [r7, #12]
 800aefa:	f7ff fd1a 	bl	800a932 <SDIO_GetResponse>
 800aefe:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800af00:	693a      	ldr	r2, [r7, #16]
 800af02:	4b4e      	ldr	r3, [pc, #312]	; (800b03c <SDMMC_GetCmdResp1+0x1d4>)
 800af04:	4013      	ands	r3, r2
 800af06:	2b00      	cmp	r3, #0
 800af08:	d101      	bne.n	800af0e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800af0a:	2300      	movs	r3, #0
 800af0c:	e08d      	b.n	800b02a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	2b00      	cmp	r3, #0
 800af12:	da02      	bge.n	800af1a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800af14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800af18:	e087      	b.n	800b02a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800af20:	2b00      	cmp	r3, #0
 800af22:	d001      	beq.n	800af28 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800af24:	2340      	movs	r3, #64	; 0x40
 800af26:	e080      	b.n	800b02a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d001      	beq.n	800af36 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800af32:	2380      	movs	r3, #128	; 0x80
 800af34:	e079      	b.n	800b02a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d002      	beq.n	800af46 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800af40:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af44:	e071      	b.n	800b02a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d002      	beq.n	800af56 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800af50:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af54:	e069      	b.n	800b02a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d002      	beq.n	800af66 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800af60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af64:	e061      	b.n	800b02a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d002      	beq.n	800af76 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800af70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800af74:	e059      	b.n	800b02a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d002      	beq.n	800af86 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800af80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af84:	e051      	b.n	800b02a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d002      	beq.n	800af96 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800af90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800af94:	e049      	b.n	800b02a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d002      	beq.n	800afa6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800afa0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800afa4:	e041      	b.n	800b02a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800afac:	2b00      	cmp	r3, #0
 800afae:	d002      	beq.n	800afb6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800afb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800afb4:	e039      	b.n	800b02a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d002      	beq.n	800afc6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800afc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800afc4:	e031      	b.n	800b02a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d002      	beq.n	800afd6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800afd0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800afd4:	e029      	b.n	800b02a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d002      	beq.n	800afe6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800afe0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800afe4:	e021      	b.n	800b02a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800afec:	2b00      	cmp	r3, #0
 800afee:	d002      	beq.n	800aff6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800aff0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800aff4:	e019      	b.n	800b02a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800affc:	2b00      	cmp	r3, #0
 800affe:	d002      	beq.n	800b006 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b000:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b004:	e011      	b.n	800b02a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d002      	beq.n	800b016 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b010:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b014:	e009      	b.n	800b02a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	f003 0308 	and.w	r3, r3, #8
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d002      	beq.n	800b026 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b020:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b024:	e001      	b.n	800b02a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b026:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	371c      	adds	r7, #28
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd90      	pop	{r4, r7, pc}
 800b032:	bf00      	nop
 800b034:	20000004 	.word	0x20000004
 800b038:	10624dd3 	.word	0x10624dd3
 800b03c:	fdffe008 	.word	0xfdffe008

0800b040 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b040:	b490      	push	{r4, r7}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b048:	4b1e      	ldr	r3, [pc, #120]	; (800b0c4 <SDMMC_GetCmdResp2+0x84>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4a1e      	ldr	r2, [pc, #120]	; (800b0c8 <SDMMC_GetCmdResp2+0x88>)
 800b04e:	fba2 2303 	umull	r2, r3, r2, r3
 800b052:	0a5b      	lsrs	r3, r3, #9
 800b054:	f241 3288 	movw	r2, #5000	; 0x1388
 800b058:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b05c:	4623      	mov	r3, r4
 800b05e:	1e5c      	subs	r4, r3, #1
 800b060:	2b00      	cmp	r3, #0
 800b062:	d102      	bne.n	800b06a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b064:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b068:	e026      	b.n	800b0b8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b06e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b076:	2b00      	cmp	r3, #0
 800b078:	d0f0      	beq.n	800b05c <SDMMC_GetCmdResp2+0x1c>
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b080:	2b00      	cmp	r3, #0
 800b082:	d1eb      	bne.n	800b05c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b088:	f003 0304 	and.w	r3, r3, #4
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d004      	beq.n	800b09a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2204      	movs	r2, #4
 800b094:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b096:	2304      	movs	r3, #4
 800b098:	e00e      	b.n	800b0b8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b09e:	f003 0301 	and.w	r3, r3, #1
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d004      	beq.n	800b0b0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	e003      	b.n	800b0b8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	22c5      	movs	r2, #197	; 0xc5
 800b0b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b0b6:	2300      	movs	r3, #0
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3710      	adds	r7, #16
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bc90      	pop	{r4, r7}
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop
 800b0c4:	20000004 	.word	0x20000004
 800b0c8:	10624dd3 	.word	0x10624dd3

0800b0cc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b0cc:	b490      	push	{r4, r7}
 800b0ce:	b084      	sub	sp, #16
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b0d4:	4b18      	ldr	r3, [pc, #96]	; (800b138 <SDMMC_GetCmdResp3+0x6c>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a18      	ldr	r2, [pc, #96]	; (800b13c <SDMMC_GetCmdResp3+0x70>)
 800b0da:	fba2 2303 	umull	r2, r3, r2, r3
 800b0de:	0a5b      	lsrs	r3, r3, #9
 800b0e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0e4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b0e8:	4623      	mov	r3, r4
 800b0ea:	1e5c      	subs	r4, r3, #1
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d102      	bne.n	800b0f6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b0f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b0f4:	e01b      	b.n	800b12e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0fa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b102:	2b00      	cmp	r3, #0
 800b104:	d0f0      	beq.n	800b0e8 <SDMMC_GetCmdResp3+0x1c>
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d1eb      	bne.n	800b0e8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b114:	f003 0304 	and.w	r3, r3, #4
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d004      	beq.n	800b126 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2204      	movs	r2, #4
 800b120:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b122:	2304      	movs	r3, #4
 800b124:	e003      	b.n	800b12e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	22c5      	movs	r2, #197	; 0xc5
 800b12a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b12c:	2300      	movs	r3, #0
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bc90      	pop	{r4, r7}
 800b136:	4770      	bx	lr
 800b138:	20000004 	.word	0x20000004
 800b13c:	10624dd3 	.word	0x10624dd3

0800b140 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b140:	b590      	push	{r4, r7, lr}
 800b142:	b087      	sub	sp, #28
 800b144:	af00      	add	r7, sp, #0
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	460b      	mov	r3, r1
 800b14a:	607a      	str	r2, [r7, #4]
 800b14c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b14e:	4b34      	ldr	r3, [pc, #208]	; (800b220 <SDMMC_GetCmdResp6+0xe0>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	4a34      	ldr	r2, [pc, #208]	; (800b224 <SDMMC_GetCmdResp6+0xe4>)
 800b154:	fba2 2303 	umull	r2, r3, r2, r3
 800b158:	0a5b      	lsrs	r3, r3, #9
 800b15a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b15e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b162:	4623      	mov	r3, r4
 800b164:	1e5c      	subs	r4, r3, #1
 800b166:	2b00      	cmp	r3, #0
 800b168:	d102      	bne.n	800b170 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b16a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b16e:	e052      	b.n	800b216 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b174:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d0f0      	beq.n	800b162 <SDMMC_GetCmdResp6+0x22>
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b186:	2b00      	cmp	r3, #0
 800b188:	d1eb      	bne.n	800b162 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b18e:	f003 0304 	and.w	r3, r3, #4
 800b192:	2b00      	cmp	r3, #0
 800b194:	d004      	beq.n	800b1a0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2204      	movs	r2, #4
 800b19a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b19c:	2304      	movs	r3, #4
 800b19e:	e03a      	b.n	800b216 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1a4:	f003 0301 	and.w	r3, r3, #1
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d004      	beq.n	800b1b6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	e02f      	b.n	800b216 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	f7ff fbae 	bl	800a918 <SDIO_GetCommandResponse>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	461a      	mov	r2, r3
 800b1c0:	7afb      	ldrb	r3, [r7, #11]
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d001      	beq.n	800b1ca <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e025      	b.n	800b216 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	22c5      	movs	r2, #197	; 0xc5
 800b1ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b1d0:	2100      	movs	r1, #0
 800b1d2:	68f8      	ldr	r0, [r7, #12]
 800b1d4:	f7ff fbad 	bl	800a932 <SDIO_GetResponse>
 800b1d8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d106      	bne.n	800b1f2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	0c1b      	lsrs	r3, r3, #16
 800b1e8:	b29a      	uxth	r2, r3
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	e011      	b.n	800b216 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d002      	beq.n	800b202 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b1fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b200:	e009      	b.n	800b216 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d002      	beq.n	800b212 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b20c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b210:	e001      	b.n	800b216 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b212:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b216:	4618      	mov	r0, r3
 800b218:	371c      	adds	r7, #28
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd90      	pop	{r4, r7, pc}
 800b21e:	bf00      	nop
 800b220:	20000004 	.word	0x20000004
 800b224:	10624dd3 	.word	0x10624dd3

0800b228 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b228:	b490      	push	{r4, r7}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b230:	4b21      	ldr	r3, [pc, #132]	; (800b2b8 <SDMMC_GetCmdResp7+0x90>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4a21      	ldr	r2, [pc, #132]	; (800b2bc <SDMMC_GetCmdResp7+0x94>)
 800b236:	fba2 2303 	umull	r2, r3, r2, r3
 800b23a:	0a5b      	lsrs	r3, r3, #9
 800b23c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b240:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b244:	4623      	mov	r3, r4
 800b246:	1e5c      	subs	r4, r3, #1
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d102      	bne.n	800b252 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b24c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b250:	e02c      	b.n	800b2ac <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b256:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d0f0      	beq.n	800b244 <SDMMC_GetCmdResp7+0x1c>
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d1eb      	bne.n	800b244 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b270:	f003 0304 	and.w	r3, r3, #4
 800b274:	2b00      	cmp	r3, #0
 800b276:	d004      	beq.n	800b282 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2204      	movs	r2, #4
 800b27c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b27e:	2304      	movs	r3, #4
 800b280:	e014      	b.n	800b2ac <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b286:	f003 0301 	and.w	r3, r3, #1
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d004      	beq.n	800b298 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2201      	movs	r2, #1
 800b292:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b294:	2301      	movs	r3, #1
 800b296:	e009      	b.n	800b2ac <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b29c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d002      	beq.n	800b2aa <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2240      	movs	r2, #64	; 0x40
 800b2a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b2aa:	2300      	movs	r3, #0
  
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3710      	adds	r7, #16
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bc90      	pop	{r4, r7}
 800b2b4:	4770      	bx	lr
 800b2b6:	bf00      	nop
 800b2b8:	20000004 	.word	0x20000004
 800b2bc:	10624dd3 	.word	0x10624dd3

0800b2c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b2c0:	b084      	sub	sp, #16
 800b2c2:	b580      	push	{r7, lr}
 800b2c4:	b084      	sub	sp, #16
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	6078      	str	r0, [r7, #4]
 800b2ca:	f107 001c 	add.w	r0, r7, #28
 800b2ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d122      	bne.n	800b31e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	68db      	ldr	r3, [r3, #12]
 800b2e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b2ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	68db      	ldr	r3, [r3, #12]
 800b2f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b302:	2b01      	cmp	r3, #1
 800b304:	d105      	bne.n	800b312 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	68db      	ldr	r3, [r3, #12]
 800b30a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 f94a 	bl	800b5ac <USB_CoreReset>
 800b318:	4603      	mov	r3, r0
 800b31a:	73fb      	strb	r3, [r7, #15]
 800b31c:	e01a      	b.n	800b354 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 f93e 	bl	800b5ac <USB_CoreReset>
 800b330:	4603      	mov	r3, r0
 800b332:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b336:	2b00      	cmp	r3, #0
 800b338:	d106      	bne.n	800b348 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b33e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	639a      	str	r2, [r3, #56]	; 0x38
 800b346:	e005      	b.n	800b354 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b34c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b356:	2b01      	cmp	r3, #1
 800b358:	d10b      	bne.n	800b372 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	f043 0206 	orr.w	r2, r3, #6
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	689b      	ldr	r3, [r3, #8]
 800b36a:	f043 0220 	orr.w	r2, r3, #32
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b372:	7bfb      	ldrb	r3, [r7, #15]
}
 800b374:	4618      	mov	r0, r3
 800b376:	3710      	adds	r7, #16
 800b378:	46bd      	mov	sp, r7
 800b37a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b37e:	b004      	add	sp, #16
 800b380:	4770      	bx	lr

0800b382 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b382:	b480      	push	{r7}
 800b384:	b083      	sub	sp, #12
 800b386:	af00      	add	r7, sp, #0
 800b388:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	689b      	ldr	r3, [r3, #8]
 800b38e:	f043 0201 	orr.w	r2, r3, #1
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b396:	2300      	movs	r3, #0
}
 800b398:	4618      	mov	r0, r3
 800b39a:	370c      	adds	r7, #12
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b083      	sub	sp, #12
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	f023 0201 	bic.w	r2, r3, #1
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	370c      	adds	r7, #12
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr

0800b3c6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b3c6:	b580      	push	{r7, lr}
 800b3c8:	b082      	sub	sp, #8
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	68db      	ldr	r3, [r3, #12]
 800b3d6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b3de:	78fb      	ldrb	r3, [r7, #3]
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d106      	bne.n	800b3f2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	68db      	ldr	r3, [r3, #12]
 800b3e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	60da      	str	r2, [r3, #12]
 800b3f0:	e00b      	b.n	800b40a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b3f2:	78fb      	ldrb	r3, [r7, #3]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d106      	bne.n	800b406 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	68db      	ldr	r3, [r3, #12]
 800b3fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	60da      	str	r2, [r3, #12]
 800b404:	e001      	b.n	800b40a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b406:	2301      	movs	r3, #1
 800b408:	e003      	b.n	800b412 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b40a:	2032      	movs	r0, #50	; 0x32
 800b40c:	f7f8 fb58 	bl	8003ac0 <HAL_Delay>

  return HAL_OK;
 800b410:	2300      	movs	r3, #0
}
 800b412:	4618      	mov	r0, r3
 800b414:	3708      	adds	r7, #8
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
	...

0800b41c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b085      	sub	sp, #20
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b426:	2300      	movs	r3, #0
 800b428:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	019b      	lsls	r3, r3, #6
 800b42e:	f043 0220 	orr.w	r2, r3, #32
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	3301      	adds	r3, #1
 800b43a:	60fb      	str	r3, [r7, #12]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	4a09      	ldr	r2, [pc, #36]	; (800b464 <USB_FlushTxFifo+0x48>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d901      	bls.n	800b448 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b444:	2303      	movs	r3, #3
 800b446:	e006      	b.n	800b456 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	691b      	ldr	r3, [r3, #16]
 800b44c:	f003 0320 	and.w	r3, r3, #32
 800b450:	2b20      	cmp	r3, #32
 800b452:	d0f0      	beq.n	800b436 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b454:	2300      	movs	r3, #0
}
 800b456:	4618      	mov	r0, r3
 800b458:	3714      	adds	r7, #20
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr
 800b462:	bf00      	nop
 800b464:	00030d40 	.word	0x00030d40

0800b468 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b468:	b480      	push	{r7}
 800b46a:	b085      	sub	sp, #20
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b470:	2300      	movs	r3, #0
 800b472:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2210      	movs	r2, #16
 800b478:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	3301      	adds	r3, #1
 800b47e:	60fb      	str	r3, [r7, #12]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	4a09      	ldr	r2, [pc, #36]	; (800b4a8 <USB_FlushRxFifo+0x40>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d901      	bls.n	800b48c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b488:	2303      	movs	r3, #3
 800b48a:	e006      	b.n	800b49a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	691b      	ldr	r3, [r3, #16]
 800b490:	f003 0310 	and.w	r3, r3, #16
 800b494:	2b10      	cmp	r3, #16
 800b496:	d0f0      	beq.n	800b47a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b498:	2300      	movs	r3, #0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3714      	adds	r7, #20
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a4:	4770      	bx	lr
 800b4a6:	bf00      	nop
 800b4a8:	00030d40 	.word	0x00030d40

0800b4ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b089      	sub	sp, #36	; 0x24
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	60b9      	str	r1, [r7, #8]
 800b4b6:	4611      	mov	r1, r2
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	71fb      	strb	r3, [r7, #7]
 800b4be:	4613      	mov	r3, r2
 800b4c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b4ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d11a      	bne.n	800b508 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b4d2:	88bb      	ldrh	r3, [r7, #4]
 800b4d4:	3303      	adds	r3, #3
 800b4d6:	089b      	lsrs	r3, r3, #2
 800b4d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b4da:	2300      	movs	r3, #0
 800b4dc:	61bb      	str	r3, [r7, #24]
 800b4de:	e00f      	b.n	800b500 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b4e0:	79fb      	ldrb	r3, [r7, #7]
 800b4e2:	031a      	lsls	r2, r3, #12
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	4413      	add	r3, r2
 800b4e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	69fb      	ldr	r3, [r7, #28]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b4f4:	69fb      	ldr	r3, [r7, #28]
 800b4f6:	3304      	adds	r3, #4
 800b4f8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	61bb      	str	r3, [r7, #24]
 800b500:	69ba      	ldr	r2, [r7, #24]
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	429a      	cmp	r2, r3
 800b506:	d3eb      	bcc.n	800b4e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b508:	2300      	movs	r3, #0
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3724      	adds	r7, #36	; 0x24
 800b50e:	46bd      	mov	sp, r7
 800b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b514:	4770      	bx	lr

0800b516 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b516:	b480      	push	{r7}
 800b518:	b089      	sub	sp, #36	; 0x24
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	60f8      	str	r0, [r7, #12]
 800b51e:	60b9      	str	r1, [r7, #8]
 800b520:	4613      	mov	r3, r2
 800b522:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b52c:	88fb      	ldrh	r3, [r7, #6]
 800b52e:	3303      	adds	r3, #3
 800b530:	089b      	lsrs	r3, r3, #2
 800b532:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b534:	2300      	movs	r3, #0
 800b536:	61bb      	str	r3, [r7, #24]
 800b538:	e00b      	b.n	800b552 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b540:	681a      	ldr	r2, [r3, #0]
 800b542:	69fb      	ldr	r3, [r7, #28]
 800b544:	601a      	str	r2, [r3, #0]
    pDest++;
 800b546:	69fb      	ldr	r3, [r7, #28]
 800b548:	3304      	adds	r3, #4
 800b54a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b54c:	69bb      	ldr	r3, [r7, #24]
 800b54e:	3301      	adds	r3, #1
 800b550:	61bb      	str	r3, [r7, #24]
 800b552:	69ba      	ldr	r2, [r7, #24]
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	429a      	cmp	r2, r3
 800b558:	d3ef      	bcc.n	800b53a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b55a:	69fb      	ldr	r3, [r7, #28]
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3724      	adds	r7, #36	; 0x24
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr

0800b568 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b568:	b480      	push	{r7}
 800b56a:	b085      	sub	sp, #20
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	695b      	ldr	r3, [r3, #20]
 800b574:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	699b      	ldr	r3, [r3, #24]
 800b57a:	68fa      	ldr	r2, [r7, #12]
 800b57c:	4013      	ands	r3, r2
 800b57e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b580:	68fb      	ldr	r3, [r7, #12]
}
 800b582:	4618      	mov	r0, r3
 800b584:	3714      	adds	r7, #20
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr

0800b58e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b58e:	b480      	push	{r7}
 800b590:	b083      	sub	sp, #12
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	695b      	ldr	r3, [r3, #20]
 800b59a:	f003 0301 	and.w	r3, r3, #1
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	370c      	adds	r7, #12
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr
	...

0800b5ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b085      	sub	sp, #20
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	60fb      	str	r3, [r7, #12]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	4a13      	ldr	r2, [pc, #76]	; (800b610 <USB_CoreReset+0x64>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d901      	bls.n	800b5ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b5c6:	2303      	movs	r3, #3
 800b5c8:	e01b      	b.n	800b602 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	691b      	ldr	r3, [r3, #16]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	daf2      	bge.n	800b5b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	691b      	ldr	r3, [r3, #16]
 800b5da:	f043 0201 	orr.w	r2, r3, #1
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	60fb      	str	r3, [r7, #12]
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	4a09      	ldr	r2, [pc, #36]	; (800b610 <USB_CoreReset+0x64>)
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d901      	bls.n	800b5f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b5f0:	2303      	movs	r3, #3
 800b5f2:	e006      	b.n	800b602 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	691b      	ldr	r3, [r3, #16]
 800b5f8:	f003 0301 	and.w	r3, r3, #1
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d0f0      	beq.n	800b5e2 <USB_CoreReset+0x36>

  return HAL_OK;
 800b600:	2300      	movs	r3, #0
}
 800b602:	4618      	mov	r0, r3
 800b604:	3714      	adds	r7, #20
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	00030d40 	.word	0x00030d40

0800b614 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b614:	b084      	sub	sp, #16
 800b616:	b580      	push	{r7, lr}
 800b618:	b084      	sub	sp, #16
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
 800b61e:	f107 001c 	add.w	r0, r7, #28
 800b622:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b630:	461a      	mov	r2, r3
 800b632:	2300      	movs	r3, #0
 800b634:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b63a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b646:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b656:	2b00      	cmp	r3, #0
 800b658:	d018      	beq.n	800b68c <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d10a      	bne.n	800b676 <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	68ba      	ldr	r2, [r7, #8]
 800b66a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b66e:	f043 0304 	orr.w	r3, r3, #4
 800b672:	6013      	str	r3, [r2, #0]
 800b674:	e014      	b.n	800b6a0 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	68ba      	ldr	r2, [r7, #8]
 800b680:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b684:	f023 0304 	bic.w	r3, r3, #4
 800b688:	6013      	str	r3, [r2, #0]
 800b68a:	e009      	b.n	800b6a0 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	68ba      	ldr	r2, [r7, #8]
 800b696:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b69a:	f023 0304 	bic.w	r3, r3, #4
 800b69e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800b6a0:	2110      	movs	r1, #16
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f7ff feba 	bl	800b41c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f7ff fedd 	bl	800b468 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	60fb      	str	r3, [r7, #12]
 800b6b2:	e015      	b.n	800b6e0 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	015a      	lsls	r2, r3, #5
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b6c6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	015a      	lsls	r2, r3, #5
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	4413      	add	r3, r2
 800b6d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	3301      	adds	r3, #1
 800b6de:	60fb      	str	r3, [r7, #12]
 800b6e0:	6a3b      	ldr	r3, [r7, #32]
 800b6e2:	68fa      	ldr	r2, [r7, #12]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d3e5      	bcc.n	800b6b4 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800b6e8:	2101      	movs	r1, #1
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 f8ac 	bl	800b848 <USB_DriveVbus>

  HAL_Delay(200U);
 800b6f0:	20c8      	movs	r0, #200	; 0xc8
 800b6f2:	f7f8 f9e5 	bl	8003ac0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b702:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d00b      	beq.n	800b728 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b716:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	4a14      	ldr	r2, [pc, #80]	; (800b76c <USB_HostInit+0x158>)
 800b71c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	4a13      	ldr	r2, [pc, #76]	; (800b770 <USB_HostInit+0x15c>)
 800b722:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800b726:	e009      	b.n	800b73c <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2280      	movs	r2, #128	; 0x80
 800b72c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	4a10      	ldr	r2, [pc, #64]	; (800b774 <USB_HostInit+0x160>)
 800b732:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	4a10      	ldr	r2, [pc, #64]	; (800b778 <USB_HostInit+0x164>)
 800b738:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d105      	bne.n	800b74e <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	699b      	ldr	r3, [r3, #24]
 800b746:	f043 0210 	orr.w	r2, r3, #16
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	699a      	ldr	r2, [r3, #24]
 800b752:	4b0a      	ldr	r3, [pc, #40]	; (800b77c <USB_HostInit+0x168>)
 800b754:	4313      	orrs	r3, r2
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800b75a:	2300      	movs	r3, #0
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b766:	b004      	add	sp, #16
 800b768:	4770      	bx	lr
 800b76a:	bf00      	nop
 800b76c:	01000200 	.word	0x01000200
 800b770:	00e00300 	.word	0x00e00300
 800b774:	00600080 	.word	0x00600080
 800b778:	004000e0 	.word	0x004000e0
 800b77c:	a3200008 	.word	0xa3200008

0800b780 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b780:	b480      	push	{r7}
 800b782:	b085      	sub	sp, #20
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	460b      	mov	r3, r1
 800b78a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b79e:	f023 0303 	bic.w	r3, r3, #3
 800b7a2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	78fb      	ldrb	r3, [r7, #3]
 800b7ae:	f003 0303 	and.w	r3, r3, #3
 800b7b2:	68f9      	ldr	r1, [r7, #12]
 800b7b4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b7bc:	78fb      	ldrb	r3, [r7, #3]
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d107      	bne.n	800b7d2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b7ce:	6053      	str	r3, [r2, #4]
 800b7d0:	e009      	b.n	800b7e6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800b7d2:	78fb      	ldrb	r3, [r7, #3]
 800b7d4:	2b02      	cmp	r3, #2
 800b7d6:	d106      	bne.n	800b7e6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b7de:	461a      	mov	r2, r3
 800b7e0:	f241 7370 	movw	r3, #6000	; 0x1770
 800b7e4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800b7e6:	2300      	movs	r3, #0
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3714      	adds	r7, #20
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr

0800b7f4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800b800:	2300      	movs	r3, #0
 800b802:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b814:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	68fa      	ldr	r2, [r7, #12]
 800b81a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b81e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b822:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b824:	2064      	movs	r0, #100	; 0x64
 800b826:	f7f8 f94b 	bl	8003ac0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	68fa      	ldr	r2, [r7, #12]
 800b82e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b832:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b836:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b838:	200a      	movs	r0, #10
 800b83a:	f7f8 f941 	bl	8003ac0 <HAL_Delay>

  return HAL_OK;
 800b83e:	2300      	movs	r3, #0
}
 800b840:	4618      	mov	r0, r3
 800b842:	3710      	adds	r7, #16
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b848:	b480      	push	{r7}
 800b84a:	b085      	sub	sp, #20
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	460b      	mov	r3, r1
 800b852:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b858:	2300      	movs	r3, #0
 800b85a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b86c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b874:	2b00      	cmp	r3, #0
 800b876:	d109      	bne.n	800b88c <USB_DriveVbus+0x44>
 800b878:	78fb      	ldrb	r3, [r7, #3]
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	d106      	bne.n	800b88c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b886:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b88a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b896:	d109      	bne.n	800b8ac <USB_DriveVbus+0x64>
 800b898:	78fb      	ldrb	r3, [r7, #3]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d106      	bne.n	800b8ac <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	68fa      	ldr	r2, [r7, #12]
 800b8a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b8a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b8aa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b8ac:	2300      	movs	r3, #0
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3714      	adds	r7, #20
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr

0800b8ba <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b8ba:	b480      	push	{r7}
 800b8bc:	b085      	sub	sp, #20
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	0c5b      	lsrs	r3, r3, #17
 800b8d8:	f003 0303 	and.w	r3, r3, #3
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3714      	adds	r7, #20
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b085      	sub	sp, #20
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8fa:	689b      	ldr	r3, [r3, #8]
 800b8fc:	b29b      	uxth	r3, r3
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3714      	adds	r7, #20
 800b902:	46bd      	mov	sp, r7
 800b904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b908:	4770      	bx	lr
	...

0800b90c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b087      	sub	sp, #28
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	4608      	mov	r0, r1
 800b916:	4611      	mov	r1, r2
 800b918:	461a      	mov	r2, r3
 800b91a:	4603      	mov	r3, r0
 800b91c:	70fb      	strb	r3, [r7, #3]
 800b91e:	460b      	mov	r3, r1
 800b920:	70bb      	strb	r3, [r7, #2]
 800b922:	4613      	mov	r3, r2
 800b924:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b926:	2300      	movs	r3, #0
 800b928:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800b92e:	78fb      	ldrb	r3, [r7, #3]
 800b930:	015a      	lsls	r2, r3, #5
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	4413      	add	r3, r2
 800b936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b93a:	461a      	mov	r2, r3
 800b93c:	f04f 33ff 	mov.w	r3, #4294967295
 800b940:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b942:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b946:	2b03      	cmp	r3, #3
 800b948:	d87e      	bhi.n	800ba48 <USB_HC_Init+0x13c>
 800b94a:	a201      	add	r2, pc, #4	; (adr r2, 800b950 <USB_HC_Init+0x44>)
 800b94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b950:	0800b961 	.word	0x0800b961
 800b954:	0800ba0b 	.word	0x0800ba0b
 800b958:	0800b961 	.word	0x0800b961
 800b95c:	0800b9cd 	.word	0x0800b9cd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b960:	78fb      	ldrb	r3, [r7, #3]
 800b962:	015a      	lsls	r2, r3, #5
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	4413      	add	r3, r2
 800b968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b96c:	461a      	mov	r2, r3
 800b96e:	f240 439d 	movw	r3, #1181	; 0x49d
 800b972:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b974:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	da10      	bge.n	800b99e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b97c:	78fb      	ldrb	r3, [r7, #3]
 800b97e:	015a      	lsls	r2, r3, #5
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	4413      	add	r3, r2
 800b984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b988:	68db      	ldr	r3, [r3, #12]
 800b98a:	78fa      	ldrb	r2, [r7, #3]
 800b98c:	0151      	lsls	r1, r2, #5
 800b98e:	68ba      	ldr	r2, [r7, #8]
 800b990:	440a      	add	r2, r1
 800b992:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b99a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800b99c:	e057      	b.n	800ba4e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d051      	beq.n	800ba4e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800b9aa:	78fb      	ldrb	r3, [r7, #3]
 800b9ac:	015a      	lsls	r2, r3, #5
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	4413      	add	r3, r2
 800b9b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9b6:	68db      	ldr	r3, [r3, #12]
 800b9b8:	78fa      	ldrb	r2, [r7, #3]
 800b9ba:	0151      	lsls	r1, r2, #5
 800b9bc:	68ba      	ldr	r2, [r7, #8]
 800b9be:	440a      	add	r2, r1
 800b9c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b9c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b9c8:	60d3      	str	r3, [r2, #12]
      break;
 800b9ca:	e040      	b.n	800ba4e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b9cc:	78fb      	ldrb	r3, [r7, #3]
 800b9ce:	015a      	lsls	r2, r3, #5
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	4413      	add	r3, r2
 800b9d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9d8:	461a      	mov	r2, r3
 800b9da:	f240 639d 	movw	r3, #1693	; 0x69d
 800b9de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b9e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	da34      	bge.n	800ba52 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b9e8:	78fb      	ldrb	r3, [r7, #3]
 800b9ea:	015a      	lsls	r2, r3, #5
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	4413      	add	r3, r2
 800b9f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9f4:	68db      	ldr	r3, [r3, #12]
 800b9f6:	78fa      	ldrb	r2, [r7, #3]
 800b9f8:	0151      	lsls	r1, r2, #5
 800b9fa:	68ba      	ldr	r2, [r7, #8]
 800b9fc:	440a      	add	r2, r1
 800b9fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ba02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba06:	60d3      	str	r3, [r2, #12]
      }

      break;
 800ba08:	e023      	b.n	800ba52 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ba0a:	78fb      	ldrb	r3, [r7, #3]
 800ba0c:	015a      	lsls	r2, r3, #5
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	4413      	add	r3, r2
 800ba12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba16:	461a      	mov	r2, r3
 800ba18:	f240 2325 	movw	r3, #549	; 0x225
 800ba1c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ba1e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	da17      	bge.n	800ba56 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800ba26:	78fb      	ldrb	r3, [r7, #3]
 800ba28:	015a      	lsls	r2, r3, #5
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	4413      	add	r3, r2
 800ba2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	78fa      	ldrb	r2, [r7, #3]
 800ba36:	0151      	lsls	r1, r2, #5
 800ba38:	68ba      	ldr	r2, [r7, #8]
 800ba3a:	440a      	add	r2, r1
 800ba3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ba40:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800ba44:	60d3      	str	r3, [r2, #12]
      }
      break;
 800ba46:	e006      	b.n	800ba56 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	75fb      	strb	r3, [r7, #23]
      break;
 800ba4c:	e004      	b.n	800ba58 <USB_HC_Init+0x14c>
      break;
 800ba4e:	bf00      	nop
 800ba50:	e002      	b.n	800ba58 <USB_HC_Init+0x14c>
      break;
 800ba52:	bf00      	nop
 800ba54:	e000      	b.n	800ba58 <USB_HC_Init+0x14c>
      break;
 800ba56:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba5e:	699a      	ldr	r2, [r3, #24]
 800ba60:	78fb      	ldrb	r3, [r7, #3]
 800ba62:	f003 030f 	and.w	r3, r3, #15
 800ba66:	2101      	movs	r1, #1
 800ba68:	fa01 f303 	lsl.w	r3, r1, r3
 800ba6c:	68b9      	ldr	r1, [r7, #8]
 800ba6e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ba72:	4313      	orrs	r3, r2
 800ba74:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	699b      	ldr	r3, [r3, #24]
 800ba7a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800ba82:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	da03      	bge.n	800ba92 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800ba8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba8e:	613b      	str	r3, [r7, #16]
 800ba90:	e001      	b.n	800ba96 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800ba92:	2300      	movs	r3, #0
 800ba94:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800ba96:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ba9a:	2b02      	cmp	r3, #2
 800ba9c:	d103      	bne.n	800baa6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800ba9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800baa2:	60fb      	str	r3, [r7, #12]
 800baa4:	e001      	b.n	800baaa <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800baa6:	2300      	movs	r3, #0
 800baa8:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800baaa:	787b      	ldrb	r3, [r7, #1]
 800baac:	059b      	lsls	r3, r3, #22
 800baae:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bab2:	78bb      	ldrb	r3, [r7, #2]
 800bab4:	02db      	lsls	r3, r3, #11
 800bab6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800baba:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800babc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bac0:	049b      	lsls	r3, r3, #18
 800bac2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bac6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bac8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800baca:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800bace:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bad4:	78fb      	ldrb	r3, [r7, #3]
 800bad6:	0159      	lsls	r1, r3, #5
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	440b      	add	r3, r1
 800badc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bae0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bae6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800bae8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800baec:	2b03      	cmp	r3, #3
 800baee:	d10f      	bne.n	800bb10 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800baf0:	78fb      	ldrb	r3, [r7, #3]
 800baf2:	015a      	lsls	r2, r3, #5
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	4413      	add	r3, r2
 800baf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	78fa      	ldrb	r2, [r7, #3]
 800bb00:	0151      	lsls	r1, r2, #5
 800bb02:	68ba      	ldr	r2, [r7, #8]
 800bb04:	440a      	add	r2, r1
 800bb06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bb0e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800bb10:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	371c      	adds	r7, #28
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr
 800bb1e:	bf00      	nop

0800bb20 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b08c      	sub	sp, #48	; 0x30
 800bb24:	af02      	add	r7, sp, #8
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	4613      	mov	r3, r2
 800bb2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	785b      	ldrb	r3, [r3, #1]
 800bb36:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800bb38:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb3c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d028      	beq.n	800bb9c <USB_HC_StartXfer+0x7c>
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	791b      	ldrb	r3, [r3, #4]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d124      	bne.n	800bb9c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800bb52:	79fb      	ldrb	r3, [r7, #7]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d10b      	bne.n	800bb70 <USB_HC_StartXfer+0x50>
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	795b      	ldrb	r3, [r3, #5]
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d107      	bne.n	800bb70 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	785b      	ldrb	r3, [r3, #1]
 800bb64:	4619      	mov	r1, r3
 800bb66:	68f8      	ldr	r0, [r7, #12]
 800bb68:	f000 fa30 	bl	800bfcc <USB_DoPing>
      return HAL_OK;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	e114      	b.n	800bd9a <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800bb70:	79fb      	ldrb	r3, [r7, #7]
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	d112      	bne.n	800bb9c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800bb76:	69fb      	ldr	r3, [r7, #28]
 800bb78:	015a      	lsls	r2, r3, #5
 800bb7a:	6a3b      	ldr	r3, [r7, #32]
 800bb7c:	4413      	add	r3, r2
 800bb7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	69fa      	ldr	r2, [r7, #28]
 800bb86:	0151      	lsls	r1, r2, #5
 800bb88:	6a3a      	ldr	r2, [r7, #32]
 800bb8a:	440a      	add	r2, r1
 800bb8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb90:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800bb94:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	691b      	ldr	r3, [r3, #16]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d018      	beq.n	800bbd6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	691b      	ldr	r3, [r3, #16]
 800bba8:	68ba      	ldr	r2, [r7, #8]
 800bbaa:	8912      	ldrh	r2, [r2, #8]
 800bbac:	4413      	add	r3, r2
 800bbae:	3b01      	subs	r3, #1
 800bbb0:	68ba      	ldr	r2, [r7, #8]
 800bbb2:	8912      	ldrh	r2, [r2, #8]
 800bbb4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbb8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800bbba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bbbc:	8b7b      	ldrh	r3, [r7, #26]
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d90b      	bls.n	800bbda <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800bbc2:	8b7b      	ldrh	r3, [r7, #26]
 800bbc4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800bbc6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bbc8:	68ba      	ldr	r2, [r7, #8]
 800bbca:	8912      	ldrh	r2, [r2, #8]
 800bbcc:	fb02 f203 	mul.w	r2, r2, r3
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	611a      	str	r2, [r3, #16]
 800bbd4:	e001      	b.n	800bbda <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	78db      	ldrb	r3, [r3, #3]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d006      	beq.n	800bbf0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800bbe2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bbe4:	68ba      	ldr	r2, [r7, #8]
 800bbe6:	8912      	ldrh	r2, [r2, #8]
 800bbe8:	fb02 f203 	mul.w	r2, r2, r3
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	691b      	ldr	r3, [r3, #16]
 800bbf4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bbf8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bbfa:	04d9      	lsls	r1, r3, #19
 800bbfc:	4b69      	ldr	r3, [pc, #420]	; (800bda4 <USB_HC_StartXfer+0x284>)
 800bbfe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bc00:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	7a9b      	ldrb	r3, [r3, #10]
 800bc06:	075b      	lsls	r3, r3, #29
 800bc08:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bc0c:	69f9      	ldr	r1, [r7, #28]
 800bc0e:	0148      	lsls	r0, r1, #5
 800bc10:	6a39      	ldr	r1, [r7, #32]
 800bc12:	4401      	add	r1, r0
 800bc14:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bc18:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bc1a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800bc1c:	79fb      	ldrb	r3, [r7, #7]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d009      	beq.n	800bc36 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	68d9      	ldr	r1, [r3, #12]
 800bc26:	69fb      	ldr	r3, [r7, #28]
 800bc28:	015a      	lsls	r2, r3, #5
 800bc2a:	6a3b      	ldr	r3, [r7, #32]
 800bc2c:	4413      	add	r3, r2
 800bc2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc32:	460a      	mov	r2, r1
 800bc34:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800bc36:	6a3b      	ldr	r3, [r7, #32]
 800bc38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc3c:	689b      	ldr	r3, [r3, #8]
 800bc3e:	f003 0301 	and.w	r3, r3, #1
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	bf0c      	ite	eq
 800bc46:	2301      	moveq	r3, #1
 800bc48:	2300      	movne	r3, #0
 800bc4a:	b2db      	uxtb	r3, r3
 800bc4c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800bc4e:	69fb      	ldr	r3, [r7, #28]
 800bc50:	015a      	lsls	r2, r3, #5
 800bc52:	6a3b      	ldr	r3, [r7, #32]
 800bc54:	4413      	add	r3, r2
 800bc56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	69fa      	ldr	r2, [r7, #28]
 800bc5e:	0151      	lsls	r1, r2, #5
 800bc60:	6a3a      	ldr	r2, [r7, #32]
 800bc62:	440a      	add	r2, r1
 800bc64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc68:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bc6c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800bc6e:	69fb      	ldr	r3, [r7, #28]
 800bc70:	015a      	lsls	r2, r3, #5
 800bc72:	6a3b      	ldr	r3, [r7, #32]
 800bc74:	4413      	add	r3, r2
 800bc76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	7e7b      	ldrb	r3, [r7, #25]
 800bc7e:	075b      	lsls	r3, r3, #29
 800bc80:	69f9      	ldr	r1, [r7, #28]
 800bc82:	0148      	lsls	r0, r1, #5
 800bc84:	6a39      	ldr	r1, [r7, #32]
 800bc86:	4401      	add	r1, r0
 800bc88:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800bc8c:	4313      	orrs	r3, r2
 800bc8e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	015a      	lsls	r2, r3, #5
 800bc94:	6a3b      	ldr	r3, [r7, #32]
 800bc96:	4413      	add	r3, r2
 800bc98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4a42      	ldr	r2, [pc, #264]	; (800bda8 <USB_HC_StartXfer+0x288>)
 800bca0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bca2:	4b41      	ldr	r3, [pc, #260]	; (800bda8 <USB_HC_StartXfer+0x288>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bcaa:	4a3f      	ldr	r2, [pc, #252]	; (800bda8 <USB_HC_StartXfer+0x288>)
 800bcac:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	78db      	ldrb	r3, [r3, #3]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d006      	beq.n	800bcc4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800bcb6:	4b3c      	ldr	r3, [pc, #240]	; (800bda8 <USB_HC_StartXfer+0x288>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bcbe:	4a3a      	ldr	r2, [pc, #232]	; (800bda8 <USB_HC_StartXfer+0x288>)
 800bcc0:	6013      	str	r3, [r2, #0]
 800bcc2:	e005      	b.n	800bcd0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800bcc4:	4b38      	ldr	r3, [pc, #224]	; (800bda8 <USB_HC_StartXfer+0x288>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bccc:	4a36      	ldr	r2, [pc, #216]	; (800bda8 <USB_HC_StartXfer+0x288>)
 800bcce:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800bcd0:	4b35      	ldr	r3, [pc, #212]	; (800bda8 <USB_HC_StartXfer+0x288>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bcd8:	4a33      	ldr	r2, [pc, #204]	; (800bda8 <USB_HC_StartXfer+0x288>)
 800bcda:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800bcdc:	69fb      	ldr	r3, [r7, #28]
 800bcde:	015a      	lsls	r2, r3, #5
 800bce0:	6a3b      	ldr	r3, [r7, #32]
 800bce2:	4413      	add	r3, r2
 800bce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bce8:	461a      	mov	r2, r3
 800bcea:	4b2f      	ldr	r3, [pc, #188]	; (800bda8 <USB_HC_StartXfer+0x288>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800bcf0:	79fb      	ldrb	r3, [r7, #7]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d001      	beq.n	800bcfa <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	e04f      	b.n	800bd9a <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	78db      	ldrb	r3, [r3, #3]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d14a      	bne.n	800bd98 <USB_HC_StartXfer+0x278>
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	691b      	ldr	r3, [r3, #16]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d046      	beq.n	800bd98 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	79db      	ldrb	r3, [r3, #7]
 800bd0e:	2b03      	cmp	r3, #3
 800bd10:	d830      	bhi.n	800bd74 <USB_HC_StartXfer+0x254>
 800bd12:	a201      	add	r2, pc, #4	; (adr r2, 800bd18 <USB_HC_StartXfer+0x1f8>)
 800bd14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd18:	0800bd29 	.word	0x0800bd29
 800bd1c:	0800bd4d 	.word	0x0800bd4d
 800bd20:	0800bd29 	.word	0x0800bd29
 800bd24:	0800bd4d 	.word	0x0800bd4d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	691b      	ldr	r3, [r3, #16]
 800bd2c:	3303      	adds	r3, #3
 800bd2e:	089b      	lsrs	r3, r3, #2
 800bd30:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800bd32:	8afa      	ldrh	r2, [r7, #22]
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd38:	b29b      	uxth	r3, r3
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d91c      	bls.n	800bd78 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	699b      	ldr	r3, [r3, #24]
 800bd42:	f043 0220 	orr.w	r2, r3, #32
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	619a      	str	r2, [r3, #24]
        }
        break;
 800bd4a:	e015      	b.n	800bd78 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	691b      	ldr	r3, [r3, #16]
 800bd50:	3303      	adds	r3, #3
 800bd52:	089b      	lsrs	r3, r3, #2
 800bd54:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800bd56:	8afa      	ldrh	r2, [r7, #22]
 800bd58:	6a3b      	ldr	r3, [r7, #32]
 800bd5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd5e:	691b      	ldr	r3, [r3, #16]
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d90a      	bls.n	800bd7c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	699b      	ldr	r3, [r3, #24]
 800bd6a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	619a      	str	r2, [r3, #24]
        }
        break;
 800bd72:	e003      	b.n	800bd7c <USB_HC_StartXfer+0x25c>

      default:
        break;
 800bd74:	bf00      	nop
 800bd76:	e002      	b.n	800bd7e <USB_HC_StartXfer+0x25e>
        break;
 800bd78:	bf00      	nop
 800bd7a:	e000      	b.n	800bd7e <USB_HC_StartXfer+0x25e>
        break;
 800bd7c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	68d9      	ldr	r1, [r3, #12]
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	785a      	ldrb	r2, [r3, #1]
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	691b      	ldr	r3, [r3, #16]
 800bd8a:	b298      	uxth	r0, r3
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	9300      	str	r3, [sp, #0]
 800bd90:	4603      	mov	r3, r0
 800bd92:	68f8      	ldr	r0, [r7, #12]
 800bd94:	f7ff fb8a 	bl	800b4ac <USB_WritePacket>
  }

  return HAL_OK;
 800bd98:	2300      	movs	r3, #0
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3728      	adds	r7, #40	; 0x28
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	1ff80000 	.word	0x1ff80000
 800bda8:	20000234 	.word	0x20000234

0800bdac <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b085      	sub	sp, #20
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bdbe:	695b      	ldr	r3, [r3, #20]
 800bdc0:	b29b      	uxth	r3, r3
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3714      	adds	r7, #20
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdcc:	4770      	bx	lr

0800bdce <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800bdce:	b480      	push	{r7}
 800bdd0:	b087      	sub	sp, #28
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	6078      	str	r0, [r7, #4]
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800bdde:	78fb      	ldrb	r3, [r7, #3]
 800bde0:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800bde2:	2300      	movs	r3, #0
 800bde4:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	015a      	lsls	r2, r3, #5
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	4413      	add	r3, r2
 800bdee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	0c9b      	lsrs	r3, r3, #18
 800bdf6:	f003 0303 	and.w	r3, r3, #3
 800bdfa:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d002      	beq.n	800be08 <USB_HC_Halt+0x3a>
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	2b02      	cmp	r3, #2
 800be06:	d16c      	bne.n	800bee2 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	015a      	lsls	r2, r3, #5
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	4413      	add	r3, r2
 800be10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	68fa      	ldr	r2, [r7, #12]
 800be18:	0151      	lsls	r1, r2, #5
 800be1a:	693a      	ldr	r2, [r7, #16]
 800be1c:	440a      	add	r2, r1
 800be1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800be22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be26:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800be30:	2b00      	cmp	r3, #0
 800be32:	d143      	bne.n	800bebc <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	015a      	lsls	r2, r3, #5
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	4413      	add	r3, r2
 800be3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	68fa      	ldr	r2, [r7, #12]
 800be44:	0151      	lsls	r1, r2, #5
 800be46:	693a      	ldr	r2, [r7, #16]
 800be48:	440a      	add	r2, r1
 800be4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800be4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be52:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	015a      	lsls	r2, r3, #5
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	4413      	add	r3, r2
 800be5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	68fa      	ldr	r2, [r7, #12]
 800be64:	0151      	lsls	r1, r2, #5
 800be66:	693a      	ldr	r2, [r7, #16]
 800be68:	440a      	add	r2, r1
 800be6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800be6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800be72:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	015a      	lsls	r2, r3, #5
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	4413      	add	r3, r2
 800be7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	68fa      	ldr	r2, [r7, #12]
 800be84:	0151      	lsls	r1, r2, #5
 800be86:	693a      	ldr	r2, [r7, #16]
 800be88:	440a      	add	r2, r1
 800be8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800be8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800be92:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	3301      	adds	r3, #1
 800be98:	617b      	str	r3, [r7, #20]
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bea0:	d81d      	bhi.n	800bede <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	015a      	lsls	r2, r3, #5
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	4413      	add	r3, r2
 800beaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800beb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800beb8:	d0ec      	beq.n	800be94 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800beba:	e080      	b.n	800bfbe <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	015a      	lsls	r2, r3, #5
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	4413      	add	r3, r2
 800bec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	68fa      	ldr	r2, [r7, #12]
 800becc:	0151      	lsls	r1, r2, #5
 800bece:	693a      	ldr	r2, [r7, #16]
 800bed0:	440a      	add	r2, r1
 800bed2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bed6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800beda:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bedc:	e06f      	b.n	800bfbe <USB_HC_Halt+0x1f0>
          break;
 800bede:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bee0:	e06d      	b.n	800bfbe <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	015a      	lsls	r2, r3, #5
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	4413      	add	r3, r2
 800beea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	68fa      	ldr	r2, [r7, #12]
 800bef2:	0151      	lsls	r1, r2, #5
 800bef4:	693a      	ldr	r2, [r7, #16]
 800bef6:	440a      	add	r2, r1
 800bef8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800befc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf00:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800bf02:	693b      	ldr	r3, [r7, #16]
 800bf04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf08:	691b      	ldr	r3, [r3, #16]
 800bf0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d143      	bne.n	800bf9a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	015a      	lsls	r2, r3, #5
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	4413      	add	r3, r2
 800bf1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	0151      	lsls	r1, r2, #5
 800bf24:	693a      	ldr	r2, [r7, #16]
 800bf26:	440a      	add	r2, r1
 800bf28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bf2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf30:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	015a      	lsls	r2, r3, #5
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	4413      	add	r3, r2
 800bf3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	68fa      	ldr	r2, [r7, #12]
 800bf42:	0151      	lsls	r1, r2, #5
 800bf44:	693a      	ldr	r2, [r7, #16]
 800bf46:	440a      	add	r2, r1
 800bf48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bf4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bf50:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	015a      	lsls	r2, r3, #5
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	4413      	add	r3, r2
 800bf5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	68fa      	ldr	r2, [r7, #12]
 800bf62:	0151      	lsls	r1, r2, #5
 800bf64:	693a      	ldr	r2, [r7, #16]
 800bf66:	440a      	add	r2, r1
 800bf68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bf6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bf70:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	3301      	adds	r3, #1
 800bf76:	617b      	str	r3, [r7, #20]
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bf7e:	d81d      	bhi.n	800bfbc <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	015a      	lsls	r2, r3, #5
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	4413      	add	r3, r2
 800bf88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf96:	d0ec      	beq.n	800bf72 <USB_HC_Halt+0x1a4>
 800bf98:	e011      	b.n	800bfbe <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	015a      	lsls	r2, r3, #5
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	4413      	add	r3, r2
 800bfa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	68fa      	ldr	r2, [r7, #12]
 800bfaa:	0151      	lsls	r1, r2, #5
 800bfac:	693a      	ldr	r2, [r7, #16]
 800bfae:	440a      	add	r2, r1
 800bfb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bfb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bfb8:	6013      	str	r3, [r2, #0]
 800bfba:	e000      	b.n	800bfbe <USB_HC_Halt+0x1f0>
          break;
 800bfbc:	bf00      	nop
    }
  }

  return HAL_OK;
 800bfbe:	2300      	movs	r3, #0
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	371c      	adds	r7, #28
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr

0800bfcc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b087      	sub	sp, #28
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800bfdc:	78fb      	ldrb	r3, [r7, #3]
 800bfde:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	04da      	lsls	r2, r3, #19
 800bfe8:	4b15      	ldr	r3, [pc, #84]	; (800c040 <USB_DoPing+0x74>)
 800bfea:	4013      	ands	r3, r2
 800bfec:	693a      	ldr	r2, [r7, #16]
 800bfee:	0151      	lsls	r1, r2, #5
 800bff0:	697a      	ldr	r2, [r7, #20]
 800bff2:	440a      	add	r2, r1
 800bff4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bff8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bffc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	015a      	lsls	r2, r3, #5
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	4413      	add	r3, r2
 800c006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c014:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c01c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	015a      	lsls	r2, r3, #5
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	4413      	add	r3, r2
 800c026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c02a:	461a      	mov	r2, r3
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c030:	2300      	movs	r3, #0
}
 800c032:	4618      	mov	r0, r3
 800c034:	371c      	adds	r7, #28
 800c036:	46bd      	mov	sp, r7
 800c038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03c:	4770      	bx	lr
 800c03e:	bf00      	nop
 800c040:	1ff80000 	.word	0x1ff80000

0800c044 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b086      	sub	sp, #24
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c050:	2300      	movs	r3, #0
 800c052:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f7ff f9a5 	bl	800b3a4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800c05a:	2110      	movs	r1, #16
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f7ff f9dd 	bl	800b41c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f7ff fa00 	bl	800b468 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c068:	2300      	movs	r3, #0
 800c06a:	613b      	str	r3, [r7, #16]
 800c06c:	e01f      	b.n	800c0ae <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	015a      	lsls	r2, r3, #5
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	4413      	add	r3, r2
 800c076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c084:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c08c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c094:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	015a      	lsls	r2, r3, #5
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	4413      	add	r3, r2
 800c09e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	613b      	str	r3, [r7, #16]
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	2b0f      	cmp	r3, #15
 800c0b2:	d9dc      	bls.n	800c06e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	613b      	str	r3, [r7, #16]
 800c0b8:	e034      	b.n	800c124 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	015a      	lsls	r2, r3, #5
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	4413      	add	r3, r2
 800c0c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c0d0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c0d8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c0e0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	015a      	lsls	r2, r3, #5
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	4413      	add	r3, r2
 800c0ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	617b      	str	r3, [r7, #20]
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c100:	d80c      	bhi.n	800c11c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	015a      	lsls	r2, r3, #5
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	4413      	add	r3, r2
 800c10a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c114:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c118:	d0ec      	beq.n	800c0f4 <USB_StopHost+0xb0>
 800c11a:	e000      	b.n	800c11e <USB_StopHost+0xda>
        break;
 800c11c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	3301      	adds	r3, #1
 800c122:	613b      	str	r3, [r7, #16]
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	2b0f      	cmp	r3, #15
 800c128:	d9c7      	bls.n	800c0ba <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c130:	461a      	mov	r2, r3
 800c132:	f04f 33ff 	mov.w	r3, #4294967295
 800c136:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f04f 32ff 	mov.w	r2, #4294967295
 800c13e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f7ff f91e 	bl	800b382 <USB_EnableGlobalInt>

  return HAL_OK;
 800c146:	2300      	movs	r3, #0
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3718      	adds	r7, #24
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800c150:	b590      	push	{r4, r7, lr}
 800c152:	b089      	sub	sp, #36	; 0x24
 800c154:	af04      	add	r7, sp, #16
 800c156:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800c158:	2301      	movs	r3, #1
 800c15a:	2202      	movs	r2, #2
 800c15c:	2102      	movs	r1, #2
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 fcb4 	bl	800cacc <USBH_FindInterface>
 800c164:	4603      	mov	r3, r0
 800c166:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c168:	7bfb      	ldrb	r3, [r7, #15]
 800c16a:	2bff      	cmp	r3, #255	; 0xff
 800c16c:	d002      	beq.n	800c174 <USBH_CDC_InterfaceInit+0x24>
 800c16e:	7bfb      	ldrb	r3, [r7, #15]
 800c170:	2b01      	cmp	r3, #1
 800c172:	d901      	bls.n	800c178 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c174:	2302      	movs	r3, #2
 800c176:	e13d      	b.n	800c3f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800c178:	7bfb      	ldrb	r3, [r7, #15]
 800c17a:	4619      	mov	r1, r3
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 fc89 	bl	800ca94 <USBH_SelectInterface>
 800c182:	4603      	mov	r3, r0
 800c184:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800c186:	7bbb      	ldrb	r3, [r7, #14]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d001      	beq.n	800c190 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800c18c:	2302      	movs	r3, #2
 800c18e:	e131      	b.n	800c3f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800c196:	2050      	movs	r0, #80	; 0x50
 800c198:	f007 ff9c 	bl	80140d4 <malloc>
 800c19c:	4603      	mov	r3, r0
 800c19e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c1a6:	69db      	ldr	r3, [r3, #28]
 800c1a8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d101      	bne.n	800c1b4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800c1b0:	2302      	movs	r3, #2
 800c1b2:	e11f      	b.n	800c3f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800c1b4:	2250      	movs	r2, #80	; 0x50
 800c1b6:	2100      	movs	r1, #0
 800c1b8:	68b8      	ldr	r0, [r7, #8]
 800c1ba:	f007 ffa6 	bl	801410a <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c1be:	7bfb      	ldrb	r3, [r7, #15]
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	211a      	movs	r1, #26
 800c1c4:	fb01 f303 	mul.w	r3, r1, r3
 800c1c8:	4413      	add	r3, r2
 800c1ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	b25b      	sxtb	r3, r3
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	da15      	bge.n	800c202 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c1d6:	7bfb      	ldrb	r3, [r7, #15]
 800c1d8:	687a      	ldr	r2, [r7, #4]
 800c1da:	211a      	movs	r1, #26
 800c1dc:	fb01 f303 	mul.w	r3, r1, r3
 800c1e0:	4413      	add	r3, r2
 800c1e2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c1e6:	781a      	ldrb	r2, [r3, #0]
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c1ec:	7bfb      	ldrb	r3, [r7, #15]
 800c1ee:	687a      	ldr	r2, [r7, #4]
 800c1f0:	211a      	movs	r1, #26
 800c1f2:	fb01 f303 	mul.w	r3, r1, r3
 800c1f6:	4413      	add	r3, r2
 800c1f8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c1fc:	881a      	ldrh	r2, [r3, #0]
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	785b      	ldrb	r3, [r3, #1]
 800c206:	4619      	mov	r1, r3
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f002 f890 	bl	800e32e <USBH_AllocPipe>
 800c20e:	4603      	mov	r3, r0
 800c210:	461a      	mov	r2, r3
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	7819      	ldrb	r1, [r3, #0]
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	7858      	ldrb	r0, [r3, #1]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c22a:	68ba      	ldr	r2, [r7, #8]
 800c22c:	8952      	ldrh	r2, [r2, #10]
 800c22e:	9202      	str	r2, [sp, #8]
 800c230:	2203      	movs	r2, #3
 800c232:	9201      	str	r2, [sp, #4]
 800c234:	9300      	str	r3, [sp, #0]
 800c236:	4623      	mov	r3, r4
 800c238:	4602      	mov	r2, r0
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f002 f848 	bl	800e2d0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	2200      	movs	r2, #0
 800c246:	4619      	mov	r1, r3
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f007 fe93 	bl	8013f74 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800c24e:	2300      	movs	r3, #0
 800c250:	2200      	movs	r2, #0
 800c252:	210a      	movs	r1, #10
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f000 fc39 	bl	800cacc <USBH_FindInterface>
 800c25a:	4603      	mov	r3, r0
 800c25c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c25e:	7bfb      	ldrb	r3, [r7, #15]
 800c260:	2bff      	cmp	r3, #255	; 0xff
 800c262:	d002      	beq.n	800c26a <USBH_CDC_InterfaceInit+0x11a>
 800c264:	7bfb      	ldrb	r3, [r7, #15]
 800c266:	2b01      	cmp	r3, #1
 800c268:	d901      	bls.n	800c26e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c26a:	2302      	movs	r3, #2
 800c26c:	e0c2      	b.n	800c3f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c26e:	7bfb      	ldrb	r3, [r7, #15]
 800c270:	687a      	ldr	r2, [r7, #4]
 800c272:	211a      	movs	r1, #26
 800c274:	fb01 f303 	mul.w	r3, r1, r3
 800c278:	4413      	add	r3, r2
 800c27a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	b25b      	sxtb	r3, r3
 800c282:	2b00      	cmp	r3, #0
 800c284:	da16      	bge.n	800c2b4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c286:	7bfb      	ldrb	r3, [r7, #15]
 800c288:	687a      	ldr	r2, [r7, #4]
 800c28a:	211a      	movs	r1, #26
 800c28c:	fb01 f303 	mul.w	r3, r1, r3
 800c290:	4413      	add	r3, r2
 800c292:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c296:	781a      	ldrb	r2, [r3, #0]
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c29c:	7bfb      	ldrb	r3, [r7, #15]
 800c29e:	687a      	ldr	r2, [r7, #4]
 800c2a0:	211a      	movs	r1, #26
 800c2a2:	fb01 f303 	mul.w	r3, r1, r3
 800c2a6:	4413      	add	r3, r2
 800c2a8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c2ac:	881a      	ldrh	r2, [r3, #0]
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	835a      	strh	r2, [r3, #26]
 800c2b2:	e015      	b.n	800c2e0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c2b4:	7bfb      	ldrb	r3, [r7, #15]
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	211a      	movs	r1, #26
 800c2ba:	fb01 f303 	mul.w	r3, r1, r3
 800c2be:	4413      	add	r3, r2
 800c2c0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c2c4:	781a      	ldrb	r2, [r3, #0]
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c2ca:	7bfb      	ldrb	r3, [r7, #15]
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	211a      	movs	r1, #26
 800c2d0:	fb01 f303 	mul.w	r3, r1, r3
 800c2d4:	4413      	add	r3, r2
 800c2d6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c2da:	881a      	ldrh	r2, [r3, #0]
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800c2e0:	7bfb      	ldrb	r3, [r7, #15]
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	211a      	movs	r1, #26
 800c2e6:	fb01 f303 	mul.w	r3, r1, r3
 800c2ea:	4413      	add	r3, r2
 800c2ec:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	b25b      	sxtb	r3, r3
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	da16      	bge.n	800c326 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c2f8:	7bfb      	ldrb	r3, [r7, #15]
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	211a      	movs	r1, #26
 800c2fe:	fb01 f303 	mul.w	r3, r1, r3
 800c302:	4413      	add	r3, r2
 800c304:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c308:	781a      	ldrb	r2, [r3, #0]
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c30e:	7bfb      	ldrb	r3, [r7, #15]
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	211a      	movs	r1, #26
 800c314:	fb01 f303 	mul.w	r3, r1, r3
 800c318:	4413      	add	r3, r2
 800c31a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800c31e:	881a      	ldrh	r2, [r3, #0]
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	835a      	strh	r2, [r3, #26]
 800c324:	e015      	b.n	800c352 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c326:	7bfb      	ldrb	r3, [r7, #15]
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	211a      	movs	r1, #26
 800c32c:	fb01 f303 	mul.w	r3, r1, r3
 800c330:	4413      	add	r3, r2
 800c332:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c336:	781a      	ldrb	r2, [r3, #0]
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c33c:	7bfb      	ldrb	r3, [r7, #15]
 800c33e:	687a      	ldr	r2, [r7, #4]
 800c340:	211a      	movs	r1, #26
 800c342:	fb01 f303 	mul.w	r3, r1, r3
 800c346:	4413      	add	r3, r2
 800c348:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800c34c:	881a      	ldrh	r2, [r3, #0]
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	7b9b      	ldrb	r3, [r3, #14]
 800c356:	4619      	mov	r1, r3
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f001 ffe8 	bl	800e32e <USBH_AllocPipe>
 800c35e:	4603      	mov	r3, r0
 800c360:	461a      	mov	r2, r3
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	7bdb      	ldrb	r3, [r3, #15]
 800c36a:	4619      	mov	r1, r3
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f001 ffde 	bl	800e32e <USBH_AllocPipe>
 800c372:	4603      	mov	r3, r0
 800c374:	461a      	mov	r2, r3
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	7b59      	ldrb	r1, [r3, #13]
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	7b98      	ldrb	r0, [r3, #14]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c38e:	68ba      	ldr	r2, [r7, #8]
 800c390:	8b12      	ldrh	r2, [r2, #24]
 800c392:	9202      	str	r2, [sp, #8]
 800c394:	2202      	movs	r2, #2
 800c396:	9201      	str	r2, [sp, #4]
 800c398:	9300      	str	r3, [sp, #0]
 800c39a:	4623      	mov	r3, r4
 800c39c:	4602      	mov	r2, r0
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f001 ff96 	bl	800e2d0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	7b19      	ldrb	r1, [r3, #12]
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	7bd8      	ldrb	r0, [r3, #15]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c3b8:	68ba      	ldr	r2, [r7, #8]
 800c3ba:	8b52      	ldrh	r2, [r2, #26]
 800c3bc:	9202      	str	r2, [sp, #8]
 800c3be:	2202      	movs	r2, #2
 800c3c0:	9201      	str	r2, [sp, #4]
 800c3c2:	9300      	str	r3, [sp, #0]
 800c3c4:	4623      	mov	r3, r4
 800c3c6:	4602      	mov	r2, r0
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f001 ff81 	bl	800e2d0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	7b5b      	ldrb	r3, [r3, #13]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	4619      	mov	r1, r3
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f007 fdc8 	bl	8013f74 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	7b1b      	ldrb	r3, [r3, #12]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f007 fdc1 	bl	8013f74 <USBH_LL_SetToggle>

  return USBH_OK;
 800c3f2:	2300      	movs	r3, #0
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3714      	adds	r7, #20
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd90      	pop	{r4, r7, pc}

0800c3fc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c40a:	69db      	ldr	r3, [r3, #28]
 800c40c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d00e      	beq.n	800c434 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	4619      	mov	r1, r3
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f001 ff76 	bl	800e30e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	781b      	ldrb	r3, [r3, #0]
 800c426:	4619      	mov	r1, r3
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f001 ffa1 	bl	800e370 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	2200      	movs	r2, #0
 800c432:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	7b1b      	ldrb	r3, [r3, #12]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d00e      	beq.n	800c45a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	7b1b      	ldrb	r3, [r3, #12]
 800c440:	4619      	mov	r1, r3
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f001 ff63 	bl	800e30e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	7b1b      	ldrb	r3, [r3, #12]
 800c44c:	4619      	mov	r1, r3
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f001 ff8e 	bl	800e370 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2200      	movs	r2, #0
 800c458:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	7b5b      	ldrb	r3, [r3, #13]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d00e      	beq.n	800c480 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	7b5b      	ldrb	r3, [r3, #13]
 800c466:	4619      	mov	r1, r3
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f001 ff50 	bl	800e30e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	7b5b      	ldrb	r3, [r3, #13]
 800c472:	4619      	mov	r1, r3
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f001 ff7b 	bl	800e370 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	2200      	movs	r2, #0
 800c47e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c486:	69db      	ldr	r3, [r3, #28]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d00b      	beq.n	800c4a4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c492:	69db      	ldr	r3, [r3, #28]
 800c494:	4618      	mov	r0, r3
 800c496:	f007 fe25 	bl	80140e4 <free>
    phost->pActiveClass->pData = 0U;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c4a4:	2300      	movs	r3, #0
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3710      	adds	r7, #16
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}

0800c4ae <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800c4ae:	b580      	push	{r7, lr}
 800c4b0:	b084      	sub	sp, #16
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c4bc:	69db      	ldr	r3, [r3, #28]
 800c4be:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	3340      	adds	r3, #64	; 0x40
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f000 f8b1 	bl	800c62e <GetLineCoding>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800c4d0:	7afb      	ldrb	r3, [r7, #11]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d105      	bne.n	800c4e2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c4dc:	2102      	movs	r1, #2
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800c4e2:	7afb      	ldrb	r3, [r7, #11]
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3710      	adds	r7, #16
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c502:	69db      	ldr	r3, [r3, #28]
 800c504:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c50c:	2b04      	cmp	r3, #4
 800c50e:	d877      	bhi.n	800c600 <USBH_CDC_Process+0x114>
 800c510:	a201      	add	r2, pc, #4	; (adr r2, 800c518 <USBH_CDC_Process+0x2c>)
 800c512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c516:	bf00      	nop
 800c518:	0800c52d 	.word	0x0800c52d
 800c51c:	0800c533 	.word	0x0800c533
 800c520:	0800c563 	.word	0x0800c563
 800c524:	0800c5d7 	.word	0x0800c5d7
 800c528:	0800c5e5 	.word	0x0800c5e5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800c52c:	2300      	movs	r3, #0
 800c52e:	73fb      	strb	r3, [r7, #15]
      break;
 800c530:	e06d      	b.n	800c60e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c536:	4619      	mov	r1, r3
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f000 f897 	bl	800c66c <SetLineCoding>
 800c53e:	4603      	mov	r3, r0
 800c540:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c542:	7bbb      	ldrb	r3, [r7, #14]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d104      	bne.n	800c552 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	2202      	movs	r2, #2
 800c54c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c550:	e058      	b.n	800c604 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800c552:	7bbb      	ldrb	r3, [r7, #14]
 800c554:	2b01      	cmp	r3, #1
 800c556:	d055      	beq.n	800c604 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	2204      	movs	r2, #4
 800c55c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c560:	e050      	b.n	800c604 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	3340      	adds	r3, #64	; 0x40
 800c566:	4619      	mov	r1, r3
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 f860 	bl	800c62e <GetLineCoding>
 800c56e:	4603      	mov	r3, r0
 800c570:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c572:	7bbb      	ldrb	r3, [r7, #14]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d126      	bne.n	800c5c6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	2200      	movs	r2, #0
 800c57c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c58a:	791b      	ldrb	r3, [r3, #4]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d13b      	bne.n	800c608 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c59a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d133      	bne.n	800c608 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5aa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d12b      	bne.n	800c608 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5b8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d124      	bne.n	800c608 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 f984 	bl	800c8cc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c5c4:	e020      	b.n	800c608 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800c5c6:	7bbb      	ldrb	r3, [r7, #14]
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d01d      	beq.n	800c608 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	2204      	movs	r2, #4
 800c5d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c5d4:	e018      	b.n	800c608 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f000 f867 	bl	800c6aa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f000 f8f8 	bl	800c7d2 <CDC_ProcessReception>
      break;
 800c5e2:	e014      	b.n	800c60e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800c5e4:	2100      	movs	r1, #0
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f001 f94f 	bl	800d88a <USBH_ClrFeature>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c5f0:	7bbb      	ldrb	r3, [r7, #14]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d10a      	bne.n	800c60c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800c5fe:	e005      	b.n	800c60c <USBH_CDC_Process+0x120>

    default:
      break;
 800c600:	bf00      	nop
 800c602:	e004      	b.n	800c60e <USBH_CDC_Process+0x122>
      break;
 800c604:	bf00      	nop
 800c606:	e002      	b.n	800c60e <USBH_CDC_Process+0x122>
      break;
 800c608:	bf00      	nop
 800c60a:	e000      	b.n	800c60e <USBH_CDC_Process+0x122>
      break;
 800c60c:	bf00      	nop

  }

  return status;
 800c60e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c610:	4618      	mov	r0, r3
 800c612:	3710      	adds	r7, #16
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}

0800c618 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c618:	b480      	push	{r7}
 800c61a:	b083      	sub	sp, #12
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c620:	2300      	movs	r3, #0
}
 800c622:	4618      	mov	r0, r3
 800c624:	370c      	adds	r7, #12
 800c626:	46bd      	mov	sp, r7
 800c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62c:	4770      	bx	lr

0800c62e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c62e:	b580      	push	{r7, lr}
 800c630:	b082      	sub	sp, #8
 800c632:	af00      	add	r7, sp, #0
 800c634:	6078      	str	r0, [r7, #4]
 800c636:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	22a1      	movs	r2, #161	; 0xa1
 800c63c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2221      	movs	r2, #33	; 0x21
 800c642:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2200      	movs	r2, #0
 800c648:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2200      	movs	r2, #0
 800c64e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2207      	movs	r2, #7
 800c654:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	2207      	movs	r2, #7
 800c65a:	4619      	mov	r1, r3
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f001 faf4 	bl	800dc4a <USBH_CtlReq>
 800c662:	4603      	mov	r3, r0
}
 800c664:	4618      	mov	r0, r3
 800c666:	3708      	adds	r7, #8
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2221      	movs	r2, #33	; 0x21
 800c67a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2220      	movs	r2, #32
 800c680:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2200      	movs	r2, #0
 800c686:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2200      	movs	r2, #0
 800c68c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2207      	movs	r2, #7
 800c692:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	2207      	movs	r2, #7
 800c698:	4619      	mov	r1, r3
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f001 fad5 	bl	800dc4a <USBH_CtlReq>
 800c6a0:	4603      	mov	r3, r0
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3708      	adds	r7, #8
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}

0800c6aa <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800c6aa:	b580      	push	{r7, lr}
 800c6ac:	b086      	sub	sp, #24
 800c6ae:	af02      	add	r7, sp, #8
 800c6b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c6b8:	69db      	ldr	r3, [r3, #28]
 800c6ba:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800c6c6:	2b01      	cmp	r3, #1
 800c6c8:	d002      	beq.n	800c6d0 <CDC_ProcessTransmission+0x26>
 800c6ca:	2b02      	cmp	r3, #2
 800c6cc:	d025      	beq.n	800c71a <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800c6ce:	e07c      	b.n	800c7ca <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6d4:	68fa      	ldr	r2, [r7, #12]
 800c6d6:	8b12      	ldrh	r2, [r2, #24]
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d90c      	bls.n	800c6f6 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	69d9      	ldr	r1, [r3, #28]
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	8b1a      	ldrh	r2, [r3, #24]
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	7b58      	ldrb	r0, [r3, #13]
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	9300      	str	r3, [sp, #0]
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f001 fdab 	bl	800e24a <USBH_BulkSendData>
 800c6f4:	e00c      	b.n	800c710 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800c6fe:	b29a      	uxth	r2, r3
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	7b58      	ldrb	r0, [r3, #13]
 800c704:	2301      	movs	r3, #1
 800c706:	9300      	str	r3, [sp, #0]
 800c708:	4603      	mov	r3, r0
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f001 fd9d 	bl	800e24a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2202      	movs	r2, #2
 800c714:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800c718:	e057      	b.n	800c7ca <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	7b5b      	ldrb	r3, [r3, #13]
 800c71e:	4619      	mov	r1, r3
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f007 fbfd 	bl	8013f20 <USBH_LL_GetURBState>
 800c726:	4603      	mov	r3, r0
 800c728:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800c72a:	7afb      	ldrb	r3, [r7, #11]
 800c72c:	2b01      	cmp	r3, #1
 800c72e:	d136      	bne.n	800c79e <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c734:	68fa      	ldr	r2, [r7, #12]
 800c736:	8b12      	ldrh	r2, [r2, #24]
 800c738:	4293      	cmp	r3, r2
 800c73a:	d90e      	bls.n	800c75a <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c740:	68fa      	ldr	r2, [r7, #12]
 800c742:	8b12      	ldrh	r2, [r2, #24]
 800c744:	1a9a      	subs	r2, r3, r2
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	69db      	ldr	r3, [r3, #28]
 800c74e:	68fa      	ldr	r2, [r7, #12]
 800c750:	8b12      	ldrh	r2, [r2, #24]
 800c752:	441a      	add	r2, r3
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	61da      	str	r2, [r3, #28]
 800c758:	e002      	b.n	800c760 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2200      	movs	r2, #0
 800c75e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c764:	2b00      	cmp	r3, #0
 800c766:	d004      	beq.n	800c772 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2201      	movs	r2, #1
 800c76c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800c770:	e006      	b.n	800c780 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	2200      	movs	r2, #0
 800c776:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 f892 	bl	800c8a4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2204      	movs	r2, #4
 800c784:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c794:	2300      	movs	r3, #0
 800c796:	2200      	movs	r2, #0
 800c798:	f004 fbce 	bl	8010f38 <osMessageQueuePut>
      break;
 800c79c:	e014      	b.n	800c7c8 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 800c79e:	7afb      	ldrb	r3, [r7, #11]
 800c7a0:	2b02      	cmp	r3, #2
 800c7a2:	d111      	bne.n	800c7c8 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2204      	movs	r2, #4
 800c7b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	f004 fbb8 	bl	8010f38 <osMessageQueuePut>
      break;
 800c7c8:	bf00      	nop
  }
}
 800c7ca:	bf00      	nop
 800c7cc:	3710      	adds	r7, #16
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}

0800c7d2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800c7d2:	b580      	push	{r7, lr}
 800c7d4:	b086      	sub	sp, #24
 800c7d6:	af00      	add	r7, sp, #0
 800c7d8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c7e0:	69db      	ldr	r3, [r3, #28]
 800c7e2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800c7ee:	2b03      	cmp	r3, #3
 800c7f0:	d002      	beq.n	800c7f8 <CDC_ProcessReception+0x26>
 800c7f2:	2b04      	cmp	r3, #4
 800c7f4:	d00e      	beq.n	800c814 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800c7f6:	e051      	b.n	800c89c <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	6a19      	ldr	r1, [r3, #32]
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	8b5a      	ldrh	r2, [r3, #26]
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	7b1b      	ldrb	r3, [r3, #12]
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f001 fd45 	bl	800e294 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	2204      	movs	r2, #4
 800c80e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800c812:	e043      	b.n	800c89c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	7b1b      	ldrb	r3, [r3, #12]
 800c818:	4619      	mov	r1, r3
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f007 fb80 	bl	8013f20 <USBH_LL_GetURBState>
 800c820:	4603      	mov	r3, r0
 800c822:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800c824:	7cfb      	ldrb	r3, [r7, #19]
 800c826:	2b01      	cmp	r3, #1
 800c828:	d137      	bne.n	800c89a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	7b1b      	ldrb	r3, [r3, #12]
 800c82e:	4619      	mov	r1, r3
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f007 fae3 	bl	8013dfc <USBH_LL_GetLastXferSize>
 800c836:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c83c:	68fa      	ldr	r2, [r7, #12]
 800c83e:	429a      	cmp	r2, r3
 800c840:	d016      	beq.n	800c870 <CDC_ProcessReception+0x9e>
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	8b5b      	ldrh	r3, [r3, #26]
 800c846:	461a      	mov	r2, r3
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d910      	bls.n	800c870 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	1ad2      	subs	r2, r2, r3
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	6a1a      	ldr	r2, [r3, #32]
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	441a      	add	r2, r3
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	2203      	movs	r2, #3
 800c86a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800c86e:	e006      	b.n	800c87e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	2200      	movs	r2, #0
 800c874:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f000 f81d 	bl	800c8b8 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2204      	movs	r2, #4
 800c882:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c892:	2300      	movs	r3, #0
 800c894:	2200      	movs	r2, #0
 800c896:	f004 fb4f 	bl	8010f38 <osMessageQueuePut>
      break;
 800c89a:	bf00      	nop
  }
}
 800c89c:	bf00      	nop
 800c89e:	3718      	adds	r7, #24
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}

0800c8a4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b083      	sub	sp, #12
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c8ac:	bf00      	nop
 800c8ae:	370c      	adds	r7, #12
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b6:	4770      	bx	lr

0800c8b8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b083      	sub	sp, #12
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c8c0:	bf00      	nop
 800c8c2:	370c      	adds	r7, #12
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr

0800c8cc <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c8d4:	bf00      	nop
 800c8d6:	370c      	adds	r7, #12
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr

0800c8e0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b084      	sub	sp, #16
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	60f8      	str	r0, [r7, #12]
 800c8e8:	60b9      	str	r1, [r7, #8]
 800c8ea:	4613      	mov	r3, r2
 800c8ec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d101      	bne.n	800c8f8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c8f4:	2302      	movs	r3, #2
 800c8f6:	e044      	b.n	800c982 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	79fa      	ldrb	r2, [r7, #7]
 800c8fc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	2200      	movs	r2, #0
 800c904:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	2200      	movs	r2, #0
 800c90c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800c910:	68f8      	ldr	r0, [r7, #12]
 800c912:	f000 f841 	bl	800c998 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2200      	movs	r2, #0
 800c91a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2200      	movs	r2, #0
 800c922:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	2200      	movs	r2, #0
 800c92a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	2200      	movs	r2, #0
 800c932:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d003      	beq.n	800c944 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	68ba      	ldr	r2, [r7, #8]
 800c940:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800c944:	2200      	movs	r2, #0
 800c946:	2104      	movs	r1, #4
 800c948:	2010      	movs	r0, #16
 800c94a:	f004 fa6f 	bl	8010e2c <osMessageQueueNew>
 800c94e:	4602      	mov	r2, r0
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800c956:	4b0d      	ldr	r3, [pc, #52]	; (800c98c <USBH_Init+0xac>)
 800c958:	4a0d      	ldr	r2, [pc, #52]	; (800c990 <USBH_Init+0xb0>)
 800c95a:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800c95c:	4b0b      	ldr	r3, [pc, #44]	; (800c98c <USBH_Init+0xac>)
 800c95e:	2280      	movs	r2, #128	; 0x80
 800c960:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800c962:	4b0a      	ldr	r3, [pc, #40]	; (800c98c <USBH_Init+0xac>)
 800c964:	2218      	movs	r2, #24
 800c966:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800c968:	4a08      	ldr	r2, [pc, #32]	; (800c98c <USBH_Init+0xac>)
 800c96a:	68f9      	ldr	r1, [r7, #12]
 800c96c:	4809      	ldr	r0, [pc, #36]	; (800c994 <USBH_Init+0xb4>)
 800c96e:	f004 f989 	bl	8010c84 <osThreadNew>
 800c972:	4602      	mov	r2, r0
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800c97a:	68f8      	ldr	r0, [r7, #12]
 800c97c:	f007 f98c 	bl	8013c98 <USBH_LL_Init>

  return USBH_OK;
 800c980:	2300      	movs	r3, #0
}
 800c982:	4618      	mov	r0, r3
 800c984:	3710      	adds	r7, #16
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}
 800c98a:	bf00      	nop
 800c98c:	20021ba8 	.word	0x20021ba8
 800c990:	080149f8 	.word	0x080149f8
 800c994:	0800d601 	.word	0x0800d601

0800c998 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c998:	b480      	push	{r7}
 800c99a:	b085      	sub	sp, #20
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	60fb      	str	r3, [r7, #12]
 800c9a8:	e009      	b.n	800c9be <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c9aa:	687a      	ldr	r2, [r7, #4]
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	33e0      	adds	r3, #224	; 0xe0
 800c9b0:	009b      	lsls	r3, r3, #2
 800c9b2:	4413      	add	r3, r2
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	60fb      	str	r3, [r7, #12]
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2b0e      	cmp	r3, #14
 800c9c2:	d9f2      	bls.n	800c9aa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	60fb      	str	r3, [r7, #12]
 800c9c8:	e009      	b.n	800c9de <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	4413      	add	r3, r2
 800c9d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	3301      	adds	r3, #1
 800c9dc:	60fb      	str	r3, [r7, #12]
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9e4:	d3f1      	bcc.n	800c9ca <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2201      	movs	r2, #1
 800ca04:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2240      	movs	r2, #64	; 0x40
 800ca0a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2200      	movs	r2, #0
 800ca16:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2200      	movs	r2, #0
 800ca26:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800ca32:	2300      	movs	r3, #0
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3714      	adds	r7, #20
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b085      	sub	sp, #20
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
 800ca48:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d016      	beq.n	800ca82 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d10e      	bne.n	800ca7c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ca64:	1c59      	adds	r1, r3, #1
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800ca6c:	687a      	ldr	r2, [r7, #4]
 800ca6e:	33de      	adds	r3, #222	; 0xde
 800ca70:	6839      	ldr	r1, [r7, #0]
 800ca72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ca76:	2300      	movs	r3, #0
 800ca78:	73fb      	strb	r3, [r7, #15]
 800ca7a:	e004      	b.n	800ca86 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ca7c:	2302      	movs	r3, #2
 800ca7e:	73fb      	strb	r3, [r7, #15]
 800ca80:	e001      	b.n	800ca86 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ca82:	2302      	movs	r3, #2
 800ca84:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ca86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	3714      	adds	r7, #20
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca92:	4770      	bx	lr

0800ca94 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b085      	sub	sp, #20
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800caa0:	2300      	movs	r3, #0
 800caa2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800caaa:	78fa      	ldrb	r2, [r7, #3]
 800caac:	429a      	cmp	r2, r3
 800caae:	d204      	bcs.n	800caba <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	78fa      	ldrb	r2, [r7, #3]
 800cab4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800cab8:	e001      	b.n	800cabe <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800caba:	2302      	movs	r3, #2
 800cabc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cabe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3714      	adds	r7, #20
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800cacc:	b480      	push	{r7}
 800cace:	b087      	sub	sp, #28
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	4608      	mov	r0, r1
 800cad6:	4611      	mov	r1, r2
 800cad8:	461a      	mov	r2, r3
 800cada:	4603      	mov	r3, r0
 800cadc:	70fb      	strb	r3, [r7, #3]
 800cade:	460b      	mov	r3, r1
 800cae0:	70bb      	strb	r3, [r7, #2]
 800cae2:	4613      	mov	r3, r2
 800cae4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800cae6:	2300      	movs	r3, #0
 800cae8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800caea:	2300      	movs	r3, #0
 800caec:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800caf4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800caf6:	e025      	b.n	800cb44 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800caf8:	7dfb      	ldrb	r3, [r7, #23]
 800cafa:	221a      	movs	r2, #26
 800cafc:	fb02 f303 	mul.w	r3, r2, r3
 800cb00:	3308      	adds	r3, #8
 800cb02:	68fa      	ldr	r2, [r7, #12]
 800cb04:	4413      	add	r3, r2
 800cb06:	3302      	adds	r3, #2
 800cb08:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	795b      	ldrb	r3, [r3, #5]
 800cb0e:	78fa      	ldrb	r2, [r7, #3]
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d002      	beq.n	800cb1a <USBH_FindInterface+0x4e>
 800cb14:	78fb      	ldrb	r3, [r7, #3]
 800cb16:	2bff      	cmp	r3, #255	; 0xff
 800cb18:	d111      	bne.n	800cb3e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800cb1e:	78ba      	ldrb	r2, [r7, #2]
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d002      	beq.n	800cb2a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cb24:	78bb      	ldrb	r3, [r7, #2]
 800cb26:	2bff      	cmp	r3, #255	; 0xff
 800cb28:	d109      	bne.n	800cb3e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cb2e:	787a      	ldrb	r2, [r7, #1]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d002      	beq.n	800cb3a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cb34:	787b      	ldrb	r3, [r7, #1]
 800cb36:	2bff      	cmp	r3, #255	; 0xff
 800cb38:	d101      	bne.n	800cb3e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800cb3a:	7dfb      	ldrb	r3, [r7, #23]
 800cb3c:	e006      	b.n	800cb4c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800cb3e:	7dfb      	ldrb	r3, [r7, #23]
 800cb40:	3301      	adds	r3, #1
 800cb42:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cb44:	7dfb      	ldrb	r3, [r7, #23]
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	d9d6      	bls.n	800caf8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800cb4a:	23ff      	movs	r3, #255	; 0xff
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	371c      	adds	r7, #28
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr

0800cb58 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f007 f8d5 	bl	8013d10 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800cb66:	2101      	movs	r1, #1
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f007 f9ec 	bl	8013f46 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800cb6e:	2300      	movs	r3, #0
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3708      	adds	r7, #8
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b088      	sub	sp, #32
 800cb7c:	af04      	add	r7, sp, #16
 800cb7e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800cb80:	2302      	movs	r3, #2
 800cb82:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800cb84:	2300      	movs	r3, #0
 800cb86:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800cb8e:	b2db      	uxtb	r3, r3
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d102      	bne.n	800cb9a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2203      	movs	r2, #3
 800cb98:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	b2db      	uxtb	r3, r3
 800cba0:	2b0b      	cmp	r3, #11
 800cba2:	f200 823c 	bhi.w	800d01e <USBH_Process+0x4a6>
 800cba6:	a201      	add	r2, pc, #4	; (adr r2, 800cbac <USBH_Process+0x34>)
 800cba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbac:	0800cbdd 	.word	0x0800cbdd
 800cbb0:	0800cc2b 	.word	0x0800cc2b
 800cbb4:	0800ccaf 	.word	0x0800ccaf
 800cbb8:	0800cf9d 	.word	0x0800cf9d
 800cbbc:	0800d01f 	.word	0x0800d01f
 800cbc0:	0800cd6f 	.word	0x0800cd6f
 800cbc4:	0800cf27 	.word	0x0800cf27
 800cbc8:	0800cdc1 	.word	0x0800cdc1
 800cbcc:	0800cdfd 	.word	0x0800cdfd
 800cbd0:	0800ce37 	.word	0x0800ce37
 800cbd4:	0800ce7f 	.word	0x0800ce7f
 800cbd8:	0800cf85 	.word	0x0800cf85
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800cbe2:	b2db      	uxtb	r3, r3
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	f000 821c 	beq.w	800d022 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2201      	movs	r2, #1
 800cbee:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800cbf0:	20c8      	movs	r0, #200	; 0xc8
 800cbf2:	f007 f9f2 	bl	8013fda <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f007 f8e5 	bl	8013dc6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2200      	movs	r2, #0
 800cc08:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2201      	movs	r2, #1
 800cc10:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cc20:	2300      	movs	r3, #0
 800cc22:	2200      	movs	r2, #0
 800cc24:	f004 f988 	bl	8010f38 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800cc28:	e1fb      	b.n	800d022 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800cc30:	2b01      	cmp	r3, #1
 800cc32:	d107      	bne.n	800cc44 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2200      	movs	r2, #0
 800cc38:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2202      	movs	r2, #2
 800cc40:	701a      	strb	r2, [r3, #0]
 800cc42:	e025      	b.n	800cc90 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cc4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cc4e:	d914      	bls.n	800cc7a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800cc56:	3301      	adds	r3, #1
 800cc58:	b2da      	uxtb	r2, r3
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800cc66:	2b03      	cmp	r3, #3
 800cc68:	d903      	bls.n	800cc72 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	220d      	movs	r2, #13
 800cc6e:	701a      	strb	r2, [r3, #0]
 800cc70:	e00e      	b.n	800cc90 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2200      	movs	r2, #0
 800cc76:	701a      	strb	r2, [r3, #0]
 800cc78:	e00a      	b.n	800cc90 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cc80:	f103 020a 	add.w	r2, r3, #10
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800cc8a:	200a      	movs	r0, #10
 800cc8c:	f007 f9a5 	bl	8013fda <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2201      	movs	r2, #1
 800cc94:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cca4:	2300      	movs	r3, #0
 800cca6:	2200      	movs	r2, #0
 800cca8:	f004 f946 	bl	8010f38 <osMessageQueuePut>
#endif
#endif
      break;
 800ccac:	e1c0      	b.n	800d030 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d005      	beq.n	800ccc4 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ccbe:	2104      	movs	r1, #4
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ccc4:	2064      	movs	r0, #100	; 0x64
 800ccc6:	f007 f988 	bl	8013fda <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f007 f856 	bl	8013d7c <USBH_LL_GetSpeed>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2205      	movs	r2, #5
 800ccde:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800cce0:	2100      	movs	r1, #0
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f001 fb23 	bl	800e32e <USBH_AllocPipe>
 800cce8:	4603      	mov	r3, r0
 800ccea:	461a      	mov	r2, r3
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ccf0:	2180      	movs	r1, #128	; 0x80
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f001 fb1b 	bl	800e32e <USBH_AllocPipe>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	7919      	ldrb	r1, [r3, #4]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cd14:	b292      	uxth	r2, r2
 800cd16:	9202      	str	r2, [sp, #8]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	9201      	str	r2, [sp, #4]
 800cd1c:	9300      	str	r3, [sp, #0]
 800cd1e:	4603      	mov	r3, r0
 800cd20:	2280      	movs	r2, #128	; 0x80
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f001 fad4 	bl	800e2d0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	7959      	ldrb	r1, [r3, #5]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cd3c:	b292      	uxth	r2, r2
 800cd3e:	9202      	str	r2, [sp, #8]
 800cd40:	2200      	movs	r2, #0
 800cd42:	9201      	str	r2, [sp, #4]
 800cd44:	9300      	str	r3, [sp, #0]
 800cd46:	4603      	mov	r3, r0
 800cd48:	2200      	movs	r2, #0
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f001 fac0 	bl	800e2d0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2201      	movs	r2, #1
 800cd54:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cd64:	2300      	movs	r3, #0
 800cd66:	2200      	movs	r2, #0
 800cd68:	f004 f8e6 	bl	8010f38 <osMessageQueuePut>
#endif
#endif
      break;
 800cd6c:	e160      	b.n	800d030 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f000 f964 	bl	800d03c <USBH_HandleEnum>
 800cd74:	4603      	mov	r3, r0
 800cd76:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800cd78:	7bbb      	ldrb	r3, [r7, #14]
 800cd7a:	b2db      	uxtb	r3, r3
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	f040 8152 	bne.w	800d026 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2200      	movs	r2, #0
 800cd86:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800cd90:	2b01      	cmp	r3, #1
 800cd92:	d103      	bne.n	800cd9c <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2208      	movs	r2, #8
 800cd98:	701a      	strb	r2, [r3, #0]
 800cd9a:	e002      	b.n	800cda2 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2207      	movs	r2, #7
 800cda0:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2205      	movs	r2, #5
 800cda6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	2200      	movs	r2, #0
 800cdba:	f004 f8bd 	bl	8010f38 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800cdbe:	e132      	b.n	800d026 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	f000 812f 	beq.w	800d02a <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cdd2:	2101      	movs	r1, #1
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2208      	movs	r2, #8
 800cddc:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2205      	movs	r2, #5
 800cde2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	f004 f89f 	bl	8010f38 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800cdfa:	e116      	b.n	800d02a <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ce02:	b29b      	uxth	r3, r3
 800ce04:	4619      	mov	r1, r3
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f000 fcf8 	bl	800d7fc <USBH_SetCfg>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d102      	bne.n	800ce18 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2209      	movs	r2, #9
 800ce16:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	2200      	movs	r2, #0
 800ce30:	f004 f882 	bl	8010f38 <osMessageQueuePut>
#endif
#endif
      break;
 800ce34:	e0fc      	b.n	800d030 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ce3c:	f003 0320 	and.w	r3, r3, #32
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d00a      	beq.n	800ce5a <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800ce44:	2101      	movs	r1, #1
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f000 fcfb 	bl	800d842 <USBH_SetFeature>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d106      	bne.n	800ce60 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	220a      	movs	r2, #10
 800ce56:	701a      	strb	r2, [r3, #0]
 800ce58:	e002      	b.n	800ce60 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	220a      	movs	r2, #10
 800ce5e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2201      	movs	r2, #1
 800ce64:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce74:	2300      	movs	r3, #0
 800ce76:	2200      	movs	r2, #0
 800ce78:	f004 f85e 	bl	8010f38 <osMessageQueuePut>
#endif
#endif
      break;
 800ce7c:	e0d8      	b.n	800d030 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d03f      	beq.n	800cf08 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ce90:	2300      	movs	r3, #0
 800ce92:	73fb      	strb	r3, [r7, #15]
 800ce94:	e016      	b.n	800cec4 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ce96:	7bfa      	ldrb	r2, [r7, #15]
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	32de      	adds	r2, #222	; 0xde
 800ce9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cea0:	791a      	ldrb	r2, [r3, #4]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d108      	bne.n	800cebe <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800ceac:	7bfa      	ldrb	r2, [r7, #15]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	32de      	adds	r2, #222	; 0xde
 800ceb2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800cebc:	e005      	b.n	800ceca <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cebe:	7bfb      	ldrb	r3, [r7, #15]
 800cec0:	3301      	adds	r3, #1
 800cec2:	73fb      	strb	r3, [r7, #15]
 800cec4:	7bfb      	ldrb	r3, [r7, #15]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d0e5      	beq.n	800ce96 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d016      	beq.n	800cf02 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ceda:	689b      	ldr	r3, [r3, #8]
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	4798      	blx	r3
 800cee0:	4603      	mov	r3, r0
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d109      	bne.n	800cefa <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2206      	movs	r2, #6
 800ceea:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cef2:	2103      	movs	r1, #3
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	4798      	blx	r3
 800cef8:	e006      	b.n	800cf08 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	220d      	movs	r2, #13
 800cefe:	701a      	strb	r2, [r3, #0]
 800cf00:	e002      	b.n	800cf08 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	220d      	movs	r2, #13
 800cf06:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2205      	movs	r2, #5
 800cf0c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	2200      	movs	r2, #0
 800cf20:	f004 f80a 	bl	8010f38 <osMessageQueuePut>
#endif
#endif
      break;
 800cf24:	e084      	b.n	800d030 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d017      	beq.n	800cf60 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cf36:	691b      	ldr	r3, [r3, #16]
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	4798      	blx	r3
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cf40:	7bbb      	ldrb	r3, [r7, #14]
 800cf42:	b2db      	uxtb	r3, r3
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d103      	bne.n	800cf50 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	220b      	movs	r2, #11
 800cf4c:	701a      	strb	r2, [r3, #0]
 800cf4e:	e00a      	b.n	800cf66 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800cf50:	7bbb      	ldrb	r3, [r7, #14]
 800cf52:	b2db      	uxtb	r3, r3
 800cf54:	2b02      	cmp	r3, #2
 800cf56:	d106      	bne.n	800cf66 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	220d      	movs	r2, #13
 800cf5c:	701a      	strb	r2, [r3, #0]
 800cf5e:	e002      	b.n	800cf66 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	220d      	movs	r2, #13
 800cf64:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2205      	movs	r2, #5
 800cf6a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	f003 ffdb 	bl	8010f38 <osMessageQueuePut>
#endif
#endif
      break;
 800cf82:	e055      	b.n	800d030 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d04f      	beq.n	800d02e <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cf94:	695b      	ldr	r3, [r3, #20]
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	4798      	blx	r3
      }
      break;
 800cf9a:	e048      	b.n	800d02e <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f7ff fcf7 	bl	800c998 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d009      	beq.n	800cfc8 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d005      	beq.n	800cfde <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cfd8:	2105      	movs	r1, #5
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800cfe4:	b2db      	uxtb	r3, r3
 800cfe6:	2b01      	cmp	r3, #1
 800cfe8:	d107      	bne.n	800cffa <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2200      	movs	r2, #0
 800cfee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f7ff fdb0 	bl	800cb58 <USBH_Start>
 800cff8:	e002      	b.n	800d000 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f006 fe88 	bl	8013d10 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2201      	movs	r2, #1
 800d004:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d014:	2300      	movs	r3, #0
 800d016:	2200      	movs	r2, #0
 800d018:	f003 ff8e 	bl	8010f38 <osMessageQueuePut>
#endif
#endif
      break;
 800d01c:	e008      	b.n	800d030 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800d01e:	bf00      	nop
 800d020:	e006      	b.n	800d030 <USBH_Process+0x4b8>
      break;
 800d022:	bf00      	nop
 800d024:	e004      	b.n	800d030 <USBH_Process+0x4b8>
      break;
 800d026:	bf00      	nop
 800d028:	e002      	b.n	800d030 <USBH_Process+0x4b8>
    break;
 800d02a:	bf00      	nop
 800d02c:	e000      	b.n	800d030 <USBH_Process+0x4b8>
      break;
 800d02e:	bf00      	nop
  }
  return USBH_OK;
 800d030:	2300      	movs	r3, #0
}
 800d032:	4618      	mov	r0, r3
 800d034:	3710      	adds	r7, #16
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}
 800d03a:	bf00      	nop

0800d03c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b088      	sub	sp, #32
 800d040:	af04      	add	r7, sp, #16
 800d042:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d044:	2301      	movs	r3, #1
 800d046:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d048:	2301      	movs	r3, #1
 800d04a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	785b      	ldrb	r3, [r3, #1]
 800d050:	2b07      	cmp	r3, #7
 800d052:	f200 8208 	bhi.w	800d466 <USBH_HandleEnum+0x42a>
 800d056:	a201      	add	r2, pc, #4	; (adr r2, 800d05c <USBH_HandleEnum+0x20>)
 800d058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d05c:	0800d07d 	.word	0x0800d07d
 800d060:	0800d13b 	.word	0x0800d13b
 800d064:	0800d1a5 	.word	0x0800d1a5
 800d068:	0800d233 	.word	0x0800d233
 800d06c:	0800d29d 	.word	0x0800d29d
 800d070:	0800d30d 	.word	0x0800d30d
 800d074:	0800d3a9 	.word	0x0800d3a9
 800d078:	0800d427 	.word	0x0800d427
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d07c:	2108      	movs	r1, #8
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f000 faec 	bl	800d65c <USBH_Get_DevDesc>
 800d084:	4603      	mov	r3, r0
 800d086:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d088:	7bbb      	ldrb	r3, [r7, #14]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d130      	bne.n	800d0f0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2201      	movs	r2, #1
 800d09c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	7919      	ldrb	r1, [r3, #4]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d0b2:	b292      	uxth	r2, r2
 800d0b4:	9202      	str	r2, [sp, #8]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	9201      	str	r2, [sp, #4]
 800d0ba:	9300      	str	r3, [sp, #0]
 800d0bc:	4603      	mov	r3, r0
 800d0be:	2280      	movs	r2, #128	; 0x80
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f001 f905 	bl	800e2d0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	7959      	ldrb	r1, [r3, #5]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d0da:	b292      	uxth	r2, r2
 800d0dc:	9202      	str	r2, [sp, #8]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	9201      	str	r2, [sp, #4]
 800d0e2:	9300      	str	r3, [sp, #0]
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f001 f8f1 	bl	800e2d0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d0ee:	e1bc      	b.n	800d46a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d0f0:	7bbb      	ldrb	r3, [r7, #14]
 800d0f2:	2b03      	cmp	r3, #3
 800d0f4:	f040 81b9 	bne.w	800d46a <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d0fe:	3301      	adds	r3, #1
 800d100:	b2da      	uxtb	r2, r3
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d10e:	2b03      	cmp	r3, #3
 800d110:	d903      	bls.n	800d11a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	220d      	movs	r2, #13
 800d116:	701a      	strb	r2, [r3, #0]
      break;
 800d118:	e1a7      	b.n	800d46a <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	795b      	ldrb	r3, [r3, #5]
 800d11e:	4619      	mov	r1, r3
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f001 f925 	bl	800e370 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	791b      	ldrb	r3, [r3, #4]
 800d12a:	4619      	mov	r1, r3
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f001 f91f 	bl	800e370 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2200      	movs	r2, #0
 800d136:	701a      	strb	r2, [r3, #0]
      break;
 800d138:	e197      	b.n	800d46a <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d13a:	2112      	movs	r1, #18
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f000 fa8d 	bl	800d65c <USBH_Get_DevDesc>
 800d142:	4603      	mov	r3, r0
 800d144:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d146:	7bbb      	ldrb	r3, [r7, #14]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d103      	bne.n	800d154 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2202      	movs	r2, #2
 800d150:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d152:	e18c      	b.n	800d46e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d154:	7bbb      	ldrb	r3, [r7, #14]
 800d156:	2b03      	cmp	r3, #3
 800d158:	f040 8189 	bne.w	800d46e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d162:	3301      	adds	r3, #1
 800d164:	b2da      	uxtb	r2, r3
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d172:	2b03      	cmp	r3, #3
 800d174:	d903      	bls.n	800d17e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	220d      	movs	r2, #13
 800d17a:	701a      	strb	r2, [r3, #0]
      break;
 800d17c:	e177      	b.n	800d46e <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	795b      	ldrb	r3, [r3, #5]
 800d182:	4619      	mov	r1, r3
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f001 f8f3 	bl	800e370 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	791b      	ldrb	r3, [r3, #4]
 800d18e:	4619      	mov	r1, r3
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f001 f8ed 	bl	800e370 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2200      	movs	r2, #0
 800d19a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	701a      	strb	r2, [r3, #0]
      break;
 800d1a2:	e164      	b.n	800d46e <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d1a4:	2101      	movs	r1, #1
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f000 fb04 	bl	800d7b4 <USBH_SetAddress>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d1b0:	7bbb      	ldrb	r3, [r7, #14]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d132      	bne.n	800d21c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800d1b6:	2002      	movs	r0, #2
 800d1b8:	f006 ff0f 	bl	8013fda <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2201      	movs	r2, #1
 800d1c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2203      	movs	r2, #3
 800d1c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	7919      	ldrb	r1, [r3, #4]
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d1da:	687a      	ldr	r2, [r7, #4]
 800d1dc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d1de:	b292      	uxth	r2, r2
 800d1e0:	9202      	str	r2, [sp, #8]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	9201      	str	r2, [sp, #4]
 800d1e6:	9300      	str	r3, [sp, #0]
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	2280      	movs	r2, #128	; 0x80
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f001 f86f 	bl	800e2d0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	7959      	ldrb	r1, [r3, #5]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d202:	687a      	ldr	r2, [r7, #4]
 800d204:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d206:	b292      	uxth	r2, r2
 800d208:	9202      	str	r2, [sp, #8]
 800d20a:	2200      	movs	r2, #0
 800d20c:	9201      	str	r2, [sp, #4]
 800d20e:	9300      	str	r3, [sp, #0]
 800d210:	4603      	mov	r3, r0
 800d212:	2200      	movs	r2, #0
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f001 f85b 	bl	800e2d0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d21a:	e12a      	b.n	800d472 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d21c:	7bbb      	ldrb	r3, [r7, #14]
 800d21e:	2b03      	cmp	r3, #3
 800d220:	f040 8127 	bne.w	800d472 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	220d      	movs	r2, #13
 800d228:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2200      	movs	r2, #0
 800d22e:	705a      	strb	r2, [r3, #1]
      break;
 800d230:	e11f      	b.n	800d472 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d232:	2109      	movs	r1, #9
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f000 fa39 	bl	800d6ac <USBH_Get_CfgDesc>
 800d23a:	4603      	mov	r3, r0
 800d23c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d23e:	7bbb      	ldrb	r3, [r7, #14]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d103      	bne.n	800d24c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2204      	movs	r2, #4
 800d248:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d24a:	e114      	b.n	800d476 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d24c:	7bbb      	ldrb	r3, [r7, #14]
 800d24e:	2b03      	cmp	r3, #3
 800d250:	f040 8111 	bne.w	800d476 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d25a:	3301      	adds	r3, #1
 800d25c:	b2da      	uxtb	r2, r3
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d26a:	2b03      	cmp	r3, #3
 800d26c:	d903      	bls.n	800d276 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	220d      	movs	r2, #13
 800d272:	701a      	strb	r2, [r3, #0]
      break;
 800d274:	e0ff      	b.n	800d476 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	795b      	ldrb	r3, [r3, #5]
 800d27a:	4619      	mov	r1, r3
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f001 f877 	bl	800e370 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	791b      	ldrb	r3, [r3, #4]
 800d286:	4619      	mov	r1, r3
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f001 f871 	bl	800e370 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2200      	movs	r2, #0
 800d292:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2200      	movs	r2, #0
 800d298:	701a      	strb	r2, [r3, #0]
      break;
 800d29a:	e0ec      	b.n	800d476 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f000 fa01 	bl	800d6ac <USBH_Get_CfgDesc>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d2ae:	7bbb      	ldrb	r3, [r7, #14]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d103      	bne.n	800d2bc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2205      	movs	r2, #5
 800d2b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d2ba:	e0de      	b.n	800d47a <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d2bc:	7bbb      	ldrb	r3, [r7, #14]
 800d2be:	2b03      	cmp	r3, #3
 800d2c0:	f040 80db 	bne.w	800d47a <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d2ca:	3301      	adds	r3, #1
 800d2cc:	b2da      	uxtb	r2, r3
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d2da:	2b03      	cmp	r3, #3
 800d2dc:	d903      	bls.n	800d2e6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	220d      	movs	r2, #13
 800d2e2:	701a      	strb	r2, [r3, #0]
      break;
 800d2e4:	e0c9      	b.n	800d47a <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	795b      	ldrb	r3, [r3, #5]
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f001 f83f 	bl	800e370 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	791b      	ldrb	r3, [r3, #4]
 800d2f6:	4619      	mov	r1, r3
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f001 f839 	bl	800e370 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2200      	movs	r2, #0
 800d302:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2200      	movs	r2, #0
 800d308:	701a      	strb	r2, [r3, #0]
      break;
 800d30a:	e0b6      	b.n	800d47a <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800d312:	2b00      	cmp	r3, #0
 800d314:	d036      	beq.n	800d384 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d322:	23ff      	movs	r3, #255	; 0xff
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f000 f9e5 	bl	800d6f4 <USBH_Get_StringDesc>
 800d32a:	4603      	mov	r3, r0
 800d32c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d32e:	7bbb      	ldrb	r3, [r7, #14]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d111      	bne.n	800d358 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2206      	movs	r2, #6
 800d338:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2205      	movs	r2, #5
 800d33e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d34e:	2300      	movs	r3, #0
 800d350:	2200      	movs	r2, #0
 800d352:	f003 fdf1 	bl	8010f38 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d356:	e092      	b.n	800d47e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d358:	7bbb      	ldrb	r3, [r7, #14]
 800d35a:	2b03      	cmp	r3, #3
 800d35c:	f040 808f 	bne.w	800d47e <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2206      	movs	r2, #6
 800d364:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2205      	movs	r2, #5
 800d36a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d37a:	2300      	movs	r3, #0
 800d37c:	2200      	movs	r2, #0
 800d37e:	f003 fddb 	bl	8010f38 <osMessageQueuePut>
      break;
 800d382:	e07c      	b.n	800d47e <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2206      	movs	r2, #6
 800d388:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2205      	movs	r2, #5
 800d38e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d39e:	2300      	movs	r3, #0
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	f003 fdc9 	bl	8010f38 <osMessageQueuePut>
      break;
 800d3a6:	e06a      	b.n	800d47e <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d027      	beq.n	800d402 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d3be:	23ff      	movs	r3, #255	; 0xff
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f000 f997 	bl	800d6f4 <USBH_Get_StringDesc>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d3ca:	7bbb      	ldrb	r3, [r7, #14]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d103      	bne.n	800d3d8 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2207      	movs	r2, #7
 800d3d4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d3d6:	e054      	b.n	800d482 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d3d8:	7bbb      	ldrb	r3, [r7, #14]
 800d3da:	2b03      	cmp	r3, #3
 800d3dc:	d151      	bne.n	800d482 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2207      	movs	r2, #7
 800d3e2:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2205      	movs	r2, #5
 800d3e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	f003 fd9c 	bl	8010f38 <osMessageQueuePut>
      break;
 800d400:	e03f      	b.n	800d482 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2207      	movs	r2, #7
 800d406:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2205      	movs	r2, #5
 800d40c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d41c:	2300      	movs	r3, #0
 800d41e:	2200      	movs	r2, #0
 800d420:	f003 fd8a 	bl	8010f38 <osMessageQueuePut>
      break;
 800d424:	e02d      	b.n	800d482 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d017      	beq.n	800d460 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d43c:	23ff      	movs	r3, #255	; 0xff
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f000 f958 	bl	800d6f4 <USBH_Get_StringDesc>
 800d444:	4603      	mov	r3, r0
 800d446:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d448:	7bbb      	ldrb	r3, [r7, #14]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d102      	bne.n	800d454 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d44e:	2300      	movs	r3, #0
 800d450:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d452:	e018      	b.n	800d486 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d454:	7bbb      	ldrb	r3, [r7, #14]
 800d456:	2b03      	cmp	r3, #3
 800d458:	d115      	bne.n	800d486 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800d45a:	2300      	movs	r3, #0
 800d45c:	73fb      	strb	r3, [r7, #15]
      break;
 800d45e:	e012      	b.n	800d486 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800d460:	2300      	movs	r3, #0
 800d462:	73fb      	strb	r3, [r7, #15]
      break;
 800d464:	e00f      	b.n	800d486 <USBH_HandleEnum+0x44a>

    default:
      break;
 800d466:	bf00      	nop
 800d468:	e00e      	b.n	800d488 <USBH_HandleEnum+0x44c>
      break;
 800d46a:	bf00      	nop
 800d46c:	e00c      	b.n	800d488 <USBH_HandleEnum+0x44c>
      break;
 800d46e:	bf00      	nop
 800d470:	e00a      	b.n	800d488 <USBH_HandleEnum+0x44c>
      break;
 800d472:	bf00      	nop
 800d474:	e008      	b.n	800d488 <USBH_HandleEnum+0x44c>
      break;
 800d476:	bf00      	nop
 800d478:	e006      	b.n	800d488 <USBH_HandleEnum+0x44c>
      break;
 800d47a:	bf00      	nop
 800d47c:	e004      	b.n	800d488 <USBH_HandleEnum+0x44c>
      break;
 800d47e:	bf00      	nop
 800d480:	e002      	b.n	800d488 <USBH_HandleEnum+0x44c>
      break;
 800d482:	bf00      	nop
 800d484:	e000      	b.n	800d488 <USBH_HandleEnum+0x44c>
      break;
 800d486:	bf00      	nop
  }
  return Status;
 800d488:	7bfb      	ldrb	r3, [r7, #15]
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3710      	adds	r7, #16
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}
 800d492:	bf00      	nop

0800d494 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d494:	b480      	push	{r7}
 800d496:	b083      	sub	sp, #12
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	683a      	ldr	r2, [r7, #0]
 800d4a2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d4a6:	bf00      	nop
 800d4a8:	370c      	adds	r7, #12
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b0:	4770      	bx	lr

0800d4b2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d4b2:	b580      	push	{r7, lr}
 800d4b4:	b082      	sub	sp, #8
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d4c0:	1c5a      	adds	r2, r3, #1
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f000 f804 	bl	800d4d6 <USBH_HandleSof>
}
 800d4ce:	bf00      	nop
 800d4d0:	3708      	adds	r7, #8
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}

0800d4d6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d4d6:	b580      	push	{r7, lr}
 800d4d8:	b082      	sub	sp, #8
 800d4da:	af00      	add	r7, sp, #0
 800d4dc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	781b      	ldrb	r3, [r3, #0]
 800d4e2:	b2db      	uxtb	r3, r3
 800d4e4:	2b0b      	cmp	r3, #11
 800d4e6:	d10a      	bne.n	800d4fe <USBH_HandleSof+0x28>
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d005      	beq.n	800d4fe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d4f8:	699b      	ldr	r3, [r3, #24]
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	4798      	blx	r3
  }
}
 800d4fe:	bf00      	nop
 800d500:	3708      	adds	r7, #8
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}

0800d506 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d506:	b580      	push	{r7, lr}
 800d508:	b082      	sub	sp, #8
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2201      	movs	r2, #1
 800d512:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2201      	movs	r2, #1
 800d51a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d52a:	2300      	movs	r3, #0
 800d52c:	2200      	movs	r2, #0
 800d52e:	f003 fd03 	bl	8010f38 <osMessageQueuePut>
#endif
#endif

  return;
 800d532:	bf00      	nop
}
 800d534:	3708      	adds	r7, #8
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}

0800d53a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d53a:	b480      	push	{r7}
 800d53c:	b083      	sub	sp, #12
 800d53e:	af00      	add	r7, sp, #0
 800d540:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2200      	movs	r2, #0
 800d546:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d54a:	bf00      	nop
}
 800d54c:	370c      	adds	r7, #12
 800d54e:	46bd      	mov	sp, r7
 800d550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d554:	4770      	bx	lr

0800d556 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d556:	b580      	push	{r7, lr}
 800d558:	b082      	sub	sp, #8
 800d55a:	af00      	add	r7, sp, #0
 800d55c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2201      	movs	r2, #1
 800d562:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2200      	movs	r2, #0
 800d56a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2200      	movs	r2, #0
 800d572:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2201      	movs	r2, #1
 800d57a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d58a:	2300      	movs	r3, #0
 800d58c:	2200      	movs	r2, #0
 800d58e:	f003 fcd3 	bl	8010f38 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800d592:	2300      	movs	r3, #0
}
 800d594:	4618      	mov	r0, r3
 800d596:	3708      	adds	r7, #8
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f006 fbc2 	bl	8013d46 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	791b      	ldrb	r3, [r3, #4]
 800d5c6:	4619      	mov	r1, r3
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 fed1 	bl	800e370 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	795b      	ldrb	r3, [r3, #5]
 800d5d2:	4619      	mov	r1, r3
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f000 fecb 	bl	800e370 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2201      	movs	r2, #1
 800d5de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	f003 fca1 	bl	8010f38 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800d5f6:	2300      	movs	r3, #0
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	3708      	adds	r7, #8
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}

0800d600 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b084      	sub	sp, #16
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d614:	f04f 33ff 	mov.w	r3, #4294967295
 800d618:	2200      	movs	r2, #0
 800d61a:	f003 fd01 	bl	8011020 <osMessageQueueGet>
 800d61e:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d1f0      	bne.n	800d608 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f7ff faa6 	bl	800cb78 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d62c:	e7ec      	b.n	800d608 <USBH_Process_OS+0x8>

0800d62e <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800d62e:	b580      	push	{r7, lr}
 800d630:	b082      	sub	sp, #8
 800d632:	af00      	add	r7, sp, #0
 800d634:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2201      	movs	r2, #1
 800d63a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d64a:	2300      	movs	r3, #0
 800d64c:	2200      	movs	r2, #0
 800d64e:	f003 fc73 	bl	8010f38 <osMessageQueuePut>
#endif

  return USBH_OK;
 800d652:	2300      	movs	r3, #0
}
 800d654:	4618      	mov	r0, r3
 800d656:	3708      	adds	r7, #8
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}

0800d65c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b086      	sub	sp, #24
 800d660:	af02      	add	r7, sp, #8
 800d662:	6078      	str	r0, [r7, #4]
 800d664:	460b      	mov	r3, r1
 800d666:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d66e:	78fb      	ldrb	r3, [r7, #3]
 800d670:	b29b      	uxth	r3, r3
 800d672:	9300      	str	r3, [sp, #0]
 800d674:	4613      	mov	r3, r2
 800d676:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d67a:	2100      	movs	r1, #0
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f000 f864 	bl	800d74a <USBH_GetDescriptor>
 800d682:	4603      	mov	r3, r0
 800d684:	73fb      	strb	r3, [r7, #15]
 800d686:	7bfb      	ldrb	r3, [r7, #15]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d10a      	bne.n	800d6a2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d698:	78fa      	ldrb	r2, [r7, #3]
 800d69a:	b292      	uxth	r2, r2
 800d69c:	4619      	mov	r1, r3
 800d69e:	f000 f918 	bl	800d8d2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800d6a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3710      	adds	r7, #16
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b086      	sub	sp, #24
 800d6b0:	af02      	add	r7, sp, #8
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	460b      	mov	r3, r1
 800d6b6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	331c      	adds	r3, #28
 800d6bc:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d6be:	887b      	ldrh	r3, [r7, #2]
 800d6c0:	9300      	str	r3, [sp, #0]
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d6c8:	2100      	movs	r1, #0
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f000 f83d 	bl	800d74a <USBH_GetDescriptor>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	72fb      	strb	r3, [r7, #11]
 800d6d4:	7afb      	ldrb	r3, [r7, #11]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d107      	bne.n	800d6ea <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d6e0:	887a      	ldrh	r2, [r7, #2]
 800d6e2:	68f9      	ldr	r1, [r7, #12]
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f000 f964 	bl	800d9b2 <USBH_ParseCfgDesc>
  }

  return status;
 800d6ea:	7afb      	ldrb	r3, [r7, #11]
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3710      	adds	r7, #16
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b088      	sub	sp, #32
 800d6f8:	af02      	add	r7, sp, #8
 800d6fa:	60f8      	str	r0, [r7, #12]
 800d6fc:	607a      	str	r2, [r7, #4]
 800d6fe:	461a      	mov	r2, r3
 800d700:	460b      	mov	r3, r1
 800d702:	72fb      	strb	r3, [r7, #11]
 800d704:	4613      	mov	r3, r2
 800d706:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800d708:	7afb      	ldrb	r3, [r7, #11]
 800d70a:	b29b      	uxth	r3, r3
 800d70c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d710:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d718:	893b      	ldrh	r3, [r7, #8]
 800d71a:	9300      	str	r3, [sp, #0]
 800d71c:	460b      	mov	r3, r1
 800d71e:	2100      	movs	r1, #0
 800d720:	68f8      	ldr	r0, [r7, #12]
 800d722:	f000 f812 	bl	800d74a <USBH_GetDescriptor>
 800d726:	4603      	mov	r3, r0
 800d728:	75fb      	strb	r3, [r7, #23]
 800d72a:	7dfb      	ldrb	r3, [r7, #23]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d107      	bne.n	800d740 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d736:	893a      	ldrh	r2, [r7, #8]
 800d738:	6879      	ldr	r1, [r7, #4]
 800d73a:	4618      	mov	r0, r3
 800d73c:	f000 fa37 	bl	800dbae <USBH_ParseStringDesc>
  }

  return status;
 800d740:	7dfb      	ldrb	r3, [r7, #23]
}
 800d742:	4618      	mov	r0, r3
 800d744:	3718      	adds	r7, #24
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}

0800d74a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800d74a:	b580      	push	{r7, lr}
 800d74c:	b084      	sub	sp, #16
 800d74e:	af00      	add	r7, sp, #0
 800d750:	60f8      	str	r0, [r7, #12]
 800d752:	607b      	str	r3, [r7, #4]
 800d754:	460b      	mov	r3, r1
 800d756:	72fb      	strb	r3, [r7, #11]
 800d758:	4613      	mov	r3, r2
 800d75a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	789b      	ldrb	r3, [r3, #2]
 800d760:	2b01      	cmp	r3, #1
 800d762:	d11c      	bne.n	800d79e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d764:	7afb      	ldrb	r3, [r7, #11]
 800d766:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d76a:	b2da      	uxtb	r2, r3
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	2206      	movs	r2, #6
 800d774:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	893a      	ldrh	r2, [r7, #8]
 800d77a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d77c:	893b      	ldrh	r3, [r7, #8]
 800d77e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d782:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d786:	d104      	bne.n	800d792 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	f240 4209 	movw	r2, #1033	; 0x409
 800d78e:	829a      	strh	r2, [r3, #20]
 800d790:	e002      	b.n	800d798 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	2200      	movs	r2, #0
 800d796:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	8b3a      	ldrh	r2, [r7, #24]
 800d79c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d79e:	8b3b      	ldrh	r3, [r7, #24]
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	6879      	ldr	r1, [r7, #4]
 800d7a4:	68f8      	ldr	r0, [r7, #12]
 800d7a6:	f000 fa50 	bl	800dc4a <USBH_CtlReq>
 800d7aa:	4603      	mov	r3, r0
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3710      	adds	r7, #16
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b082      	sub	sp, #8
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	460b      	mov	r3, r1
 800d7be:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	789b      	ldrb	r3, [r3, #2]
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	d10f      	bne.n	800d7e8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2205      	movs	r2, #5
 800d7d2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d7d4:	78fb      	ldrb	r3, [r7, #3]
 800d7d6:	b29a      	uxth	r2, r3
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	2100      	movs	r1, #0
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f000 fa2c 	bl	800dc4a <USBH_CtlReq>
 800d7f2:	4603      	mov	r3, r0
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3708      	adds	r7, #8
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	460b      	mov	r3, r1
 800d806:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	789b      	ldrb	r3, [r3, #2]
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	d10e      	bne.n	800d82e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2200      	movs	r2, #0
 800d814:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2209      	movs	r2, #9
 800d81a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	887a      	ldrh	r2, [r7, #2]
 800d820:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2200      	movs	r2, #0
 800d826:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2200      	movs	r2, #0
 800d82c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d82e:	2200      	movs	r2, #0
 800d830:	2100      	movs	r1, #0
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f000 fa09 	bl	800dc4a <USBH_CtlReq>
 800d838:	4603      	mov	r3, r0
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3708      	adds	r7, #8
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}

0800d842 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d842:	b580      	push	{r7, lr}
 800d844:	b082      	sub	sp, #8
 800d846:	af00      	add	r7, sp, #0
 800d848:	6078      	str	r0, [r7, #4]
 800d84a:	460b      	mov	r3, r1
 800d84c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	789b      	ldrb	r3, [r3, #2]
 800d852:	2b01      	cmp	r3, #1
 800d854:	d10f      	bne.n	800d876 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2200      	movs	r2, #0
 800d85a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2203      	movs	r2, #3
 800d860:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d862:	78fb      	ldrb	r3, [r7, #3]
 800d864:	b29a      	uxth	r2, r3
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2200      	movs	r2, #0
 800d86e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2200      	movs	r2, #0
 800d874:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d876:	2200      	movs	r2, #0
 800d878:	2100      	movs	r1, #0
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f000 f9e5 	bl	800dc4a <USBH_CtlReq>
 800d880:	4603      	mov	r3, r0
}
 800d882:	4618      	mov	r0, r3
 800d884:	3708      	adds	r7, #8
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}

0800d88a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d88a:	b580      	push	{r7, lr}
 800d88c:	b082      	sub	sp, #8
 800d88e:	af00      	add	r7, sp, #0
 800d890:	6078      	str	r0, [r7, #4]
 800d892:	460b      	mov	r3, r1
 800d894:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	789b      	ldrb	r3, [r3, #2]
 800d89a:	2b01      	cmp	r3, #1
 800d89c:	d10f      	bne.n	800d8be <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2202      	movs	r2, #2
 800d8a2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d8b0:	78fb      	ldrb	r3, [r7, #3]
 800d8b2:	b29a      	uxth	r2, r3
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800d8be:	2200      	movs	r2, #0
 800d8c0:	2100      	movs	r1, #0
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f000 f9c1 	bl	800dc4a <USBH_CtlReq>
 800d8c8:	4603      	mov	r3, r0
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3708      	adds	r7, #8
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}

0800d8d2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800d8d2:	b480      	push	{r7}
 800d8d4:	b085      	sub	sp, #20
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	60f8      	str	r0, [r7, #12]
 800d8da:	60b9      	str	r1, [r7, #8]
 800d8dc:	4613      	mov	r3, r2
 800d8de:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	781a      	ldrb	r2, [r3, #0]
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	785a      	ldrb	r2, [r3, #1]
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	3302      	adds	r3, #2
 800d8f4:	781b      	ldrb	r3, [r3, #0]
 800d8f6:	b29a      	uxth	r2, r3
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	3303      	adds	r3, #3
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	b29b      	uxth	r3, r3
 800d900:	021b      	lsls	r3, r3, #8
 800d902:	b29b      	uxth	r3, r3
 800d904:	4313      	orrs	r3, r2
 800d906:	b29a      	uxth	r2, r3
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	791a      	ldrb	r2, [r3, #4]
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	795a      	ldrb	r2, [r3, #5]
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	799a      	ldrb	r2, [r3, #6]
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	79da      	ldrb	r2, [r3, #7]
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800d92c:	88fb      	ldrh	r3, [r7, #6]
 800d92e:	2b08      	cmp	r3, #8
 800d930:	d939      	bls.n	800d9a6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	3308      	adds	r3, #8
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	b29a      	uxth	r2, r3
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	3309      	adds	r3, #9
 800d93e:	781b      	ldrb	r3, [r3, #0]
 800d940:	b29b      	uxth	r3, r3
 800d942:	021b      	lsls	r3, r3, #8
 800d944:	b29b      	uxth	r3, r3
 800d946:	4313      	orrs	r3, r2
 800d948:	b29a      	uxth	r2, r3
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	330a      	adds	r3, #10
 800d952:	781b      	ldrb	r3, [r3, #0]
 800d954:	b29a      	uxth	r2, r3
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	330b      	adds	r3, #11
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	b29b      	uxth	r3, r3
 800d95e:	021b      	lsls	r3, r3, #8
 800d960:	b29b      	uxth	r3, r3
 800d962:	4313      	orrs	r3, r2
 800d964:	b29a      	uxth	r2, r3
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	330c      	adds	r3, #12
 800d96e:	781b      	ldrb	r3, [r3, #0]
 800d970:	b29a      	uxth	r2, r3
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	330d      	adds	r3, #13
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	b29b      	uxth	r3, r3
 800d97a:	021b      	lsls	r3, r3, #8
 800d97c:	b29b      	uxth	r3, r3
 800d97e:	4313      	orrs	r3, r2
 800d980:	b29a      	uxth	r2, r3
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	7b9a      	ldrb	r2, [r3, #14]
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	7bda      	ldrb	r2, [r3, #15]
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	7c1a      	ldrb	r2, [r3, #16]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	7c5a      	ldrb	r2, [r3, #17]
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	745a      	strb	r2, [r3, #17]
  }
}
 800d9a6:	bf00      	nop
 800d9a8:	3714      	adds	r7, #20
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b0:	4770      	bx	lr

0800d9b2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800d9b2:	b580      	push	{r7, lr}
 800d9b4:	b08a      	sub	sp, #40	; 0x28
 800d9b6:	af00      	add	r7, sp, #0
 800d9b8:	60f8      	str	r0, [r7, #12]
 800d9ba:	60b9      	str	r1, [r7, #8]
 800d9bc:	4613      	mov	r3, r2
 800d9be:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	781a      	ldrb	r2, [r3, #0]
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	785a      	ldrb	r2, [r3, #1]
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	3302      	adds	r3, #2
 800d9e8:	781b      	ldrb	r3, [r3, #0]
 800d9ea:	b29a      	uxth	r2, r3
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	3303      	adds	r3, #3
 800d9f0:	781b      	ldrb	r3, [r3, #0]
 800d9f2:	b29b      	uxth	r3, r3
 800d9f4:	021b      	lsls	r3, r3, #8
 800d9f6:	b29b      	uxth	r3, r3
 800d9f8:	4313      	orrs	r3, r2
 800d9fa:	b29a      	uxth	r2, r3
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	791a      	ldrb	r2, [r3, #4]
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	795a      	ldrb	r2, [r3, #5]
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	799a      	ldrb	r2, [r3, #6]
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	79da      	ldrb	r2, [r3, #7]
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	7a1a      	ldrb	r2, [r3, #8]
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800da28:	88fb      	ldrh	r3, [r7, #6]
 800da2a:	2b09      	cmp	r3, #9
 800da2c:	d95f      	bls.n	800daee <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800da2e:	2309      	movs	r3, #9
 800da30:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800da32:	2300      	movs	r3, #0
 800da34:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800da36:	e051      	b.n	800dadc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800da38:	f107 0316 	add.w	r3, r7, #22
 800da3c:	4619      	mov	r1, r3
 800da3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da40:	f000 f8e8 	bl	800dc14 <USBH_GetNextDesc>
 800da44:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800da46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da48:	785b      	ldrb	r3, [r3, #1]
 800da4a:	2b04      	cmp	r3, #4
 800da4c:	d146      	bne.n	800dadc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800da4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800da52:	221a      	movs	r2, #26
 800da54:	fb02 f303 	mul.w	r3, r2, r3
 800da58:	3308      	adds	r3, #8
 800da5a:	68fa      	ldr	r2, [r7, #12]
 800da5c:	4413      	add	r3, r2
 800da5e:	3302      	adds	r3, #2
 800da60:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800da62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da64:	69f8      	ldr	r0, [r7, #28]
 800da66:	f000 f846 	bl	800daf6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800da6a:	2300      	movs	r3, #0
 800da6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800da70:	2300      	movs	r3, #0
 800da72:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800da74:	e022      	b.n	800dabc <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800da76:	f107 0316 	add.w	r3, r7, #22
 800da7a:	4619      	mov	r1, r3
 800da7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da7e:	f000 f8c9 	bl	800dc14 <USBH_GetNextDesc>
 800da82:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800da84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da86:	785b      	ldrb	r3, [r3, #1]
 800da88:	2b05      	cmp	r3, #5
 800da8a:	d117      	bne.n	800dabc <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800da8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800da90:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800da94:	3201      	adds	r2, #1
 800da96:	00d2      	lsls	r2, r2, #3
 800da98:	211a      	movs	r1, #26
 800da9a:	fb01 f303 	mul.w	r3, r1, r3
 800da9e:	4413      	add	r3, r2
 800daa0:	3308      	adds	r3, #8
 800daa2:	68fa      	ldr	r2, [r7, #12]
 800daa4:	4413      	add	r3, r2
 800daa6:	3304      	adds	r3, #4
 800daa8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800daaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800daac:	69b8      	ldr	r0, [r7, #24]
 800daae:	f000 f851 	bl	800db54 <USBH_ParseEPDesc>
            ep_ix++;
 800dab2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800dab6:	3301      	adds	r3, #1
 800dab8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800dabc:	69fb      	ldr	r3, [r7, #28]
 800dabe:	791b      	ldrb	r3, [r3, #4]
 800dac0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800dac4:	429a      	cmp	r2, r3
 800dac6:	d204      	bcs.n	800dad2 <USBH_ParseCfgDesc+0x120>
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	885a      	ldrh	r2, [r3, #2]
 800dacc:	8afb      	ldrh	r3, [r7, #22]
 800dace:	429a      	cmp	r2, r3
 800dad0:	d8d1      	bhi.n	800da76 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800dad2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dad6:	3301      	adds	r3, #1
 800dad8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800dadc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	d804      	bhi.n	800daee <USBH_ParseCfgDesc+0x13c>
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	885a      	ldrh	r2, [r3, #2]
 800dae8:	8afb      	ldrh	r3, [r7, #22]
 800daea:	429a      	cmp	r2, r3
 800daec:	d8a4      	bhi.n	800da38 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800daee:	bf00      	nop
 800daf0:	3728      	adds	r7, #40	; 0x28
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}

0800daf6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800daf6:	b480      	push	{r7}
 800daf8:	b083      	sub	sp, #12
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	6078      	str	r0, [r7, #4]
 800dafe:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	781a      	ldrb	r2, [r3, #0]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	785a      	ldrb	r2, [r3, #1]
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	789a      	ldrb	r2, [r3, #2]
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	78da      	ldrb	r2, [r3, #3]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	791a      	ldrb	r2, [r3, #4]
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	795a      	ldrb	r2, [r3, #5]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	799a      	ldrb	r2, [r3, #6]
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	79da      	ldrb	r2, [r3, #7]
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	7a1a      	ldrb	r2, [r3, #8]
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	721a      	strb	r2, [r3, #8]
}
 800db48:	bf00      	nop
 800db4a:	370c      	adds	r7, #12
 800db4c:	46bd      	mov	sp, r7
 800db4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db52:	4770      	bx	lr

0800db54 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800db54:	b480      	push	{r7}
 800db56:	b083      	sub	sp, #12
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	781a      	ldrb	r2, [r3, #0]
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	785a      	ldrb	r2, [r3, #1]
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	789a      	ldrb	r2, [r3, #2]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	78da      	ldrb	r2, [r3, #3]
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	3304      	adds	r3, #4
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	b29a      	uxth	r2, r3
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	3305      	adds	r3, #5
 800db8a:	781b      	ldrb	r3, [r3, #0]
 800db8c:	b29b      	uxth	r3, r3
 800db8e:	021b      	lsls	r3, r3, #8
 800db90:	b29b      	uxth	r3, r3
 800db92:	4313      	orrs	r3, r2
 800db94:	b29a      	uxth	r2, r3
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	799a      	ldrb	r2, [r3, #6]
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	719a      	strb	r2, [r3, #6]
}
 800dba2:	bf00      	nop
 800dba4:	370c      	adds	r7, #12
 800dba6:	46bd      	mov	sp, r7
 800dba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbac:	4770      	bx	lr

0800dbae <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800dbae:	b480      	push	{r7}
 800dbb0:	b087      	sub	sp, #28
 800dbb2:	af00      	add	r7, sp, #0
 800dbb4:	60f8      	str	r0, [r7, #12]
 800dbb6:	60b9      	str	r1, [r7, #8]
 800dbb8:	4613      	mov	r3, r2
 800dbba:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	3301      	adds	r3, #1
 800dbc0:	781b      	ldrb	r3, [r3, #0]
 800dbc2:	2b03      	cmp	r3, #3
 800dbc4:	d120      	bne.n	800dc08 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	1e9a      	subs	r2, r3, #2
 800dbcc:	88fb      	ldrh	r3, [r7, #6]
 800dbce:	4293      	cmp	r3, r2
 800dbd0:	bf28      	it	cs
 800dbd2:	4613      	movcs	r3, r2
 800dbd4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	3302      	adds	r3, #2
 800dbda:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800dbdc:	2300      	movs	r3, #0
 800dbde:	82fb      	strh	r3, [r7, #22]
 800dbe0:	e00b      	b.n	800dbfa <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800dbe2:	8afb      	ldrh	r3, [r7, #22]
 800dbe4:	68fa      	ldr	r2, [r7, #12]
 800dbe6:	4413      	add	r3, r2
 800dbe8:	781a      	ldrb	r2, [r3, #0]
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	701a      	strb	r2, [r3, #0]
      pdest++;
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	3301      	adds	r3, #1
 800dbf2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800dbf4:	8afb      	ldrh	r3, [r7, #22]
 800dbf6:	3302      	adds	r3, #2
 800dbf8:	82fb      	strh	r3, [r7, #22]
 800dbfa:	8afa      	ldrh	r2, [r7, #22]
 800dbfc:	8abb      	ldrh	r3, [r7, #20]
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	d3ef      	bcc.n	800dbe2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	2200      	movs	r2, #0
 800dc06:	701a      	strb	r2, [r3, #0]
  }
}
 800dc08:	bf00      	nop
 800dc0a:	371c      	adds	r7, #28
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc12:	4770      	bx	lr

0800dc14 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800dc14:	b480      	push	{r7}
 800dc16:	b085      	sub	sp, #20
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
 800dc1c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	881a      	ldrh	r2, [r3, #0]
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	b29b      	uxth	r3, r3
 800dc28:	4413      	add	r3, r2
 800dc2a:	b29a      	uxth	r2, r3
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	4413      	add	r3, r2
 800dc3a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800dc3c:	68fb      	ldr	r3, [r7, #12]
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3714      	adds	r7, #20
 800dc42:	46bd      	mov	sp, r7
 800dc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc48:	4770      	bx	lr

0800dc4a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800dc4a:	b580      	push	{r7, lr}
 800dc4c:	b086      	sub	sp, #24
 800dc4e:	af00      	add	r7, sp, #0
 800dc50:	60f8      	str	r0, [r7, #12]
 800dc52:	60b9      	str	r1, [r7, #8]
 800dc54:	4613      	mov	r3, r2
 800dc56:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800dc58:	2301      	movs	r3, #1
 800dc5a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	789b      	ldrb	r3, [r3, #2]
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d002      	beq.n	800dc6a <USBH_CtlReq+0x20>
 800dc64:	2b02      	cmp	r3, #2
 800dc66:	d01d      	beq.n	800dca4 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800dc68:	e043      	b.n	800dcf2 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	68ba      	ldr	r2, [r7, #8]
 800dc6e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	88fa      	ldrh	r2, [r7, #6]
 800dc74:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	2201      	movs	r2, #1
 800dc7a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	2202      	movs	r2, #2
 800dc80:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800dc82:	2301      	movs	r3, #1
 800dc84:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	2203      	movs	r2, #3
 800dc8a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	f003 f94b 	bl	8010f38 <osMessageQueuePut>
      break;
 800dca2:	e026      	b.n	800dcf2 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800dca4:	68f8      	ldr	r0, [r7, #12]
 800dca6:	f000 f829 	bl	800dcfc <USBH_HandleControl>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800dcae:	7dfb      	ldrb	r3, [r7, #23]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d002      	beq.n	800dcba <USBH_CtlReq+0x70>
 800dcb4:	7dfb      	ldrb	r3, [r7, #23]
 800dcb6:	2b03      	cmp	r3, #3
 800dcb8:	d106      	bne.n	800dcc8 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	2201      	movs	r2, #1
 800dcbe:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	761a      	strb	r2, [r3, #24]
 800dcc6:	e005      	b.n	800dcd4 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800dcc8:	7dfb      	ldrb	r3, [r7, #23]
 800dcca:	2b02      	cmp	r3, #2
 800dccc:	d102      	bne.n	800dcd4 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2203      	movs	r2, #3
 800dcd8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dce8:	2300      	movs	r3, #0
 800dcea:	2200      	movs	r2, #0
 800dcec:	f003 f924 	bl	8010f38 <osMessageQueuePut>
      break;
 800dcf0:	bf00      	nop
  }
  return status;
 800dcf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3718      	adds	r7, #24
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}

0800dcfc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b086      	sub	sp, #24
 800dd00:	af02      	add	r7, sp, #8
 800dd02:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800dd04:	2301      	movs	r3, #1
 800dd06:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	7e1b      	ldrb	r3, [r3, #24]
 800dd10:	3b01      	subs	r3, #1
 800dd12:	2b0a      	cmp	r3, #10
 800dd14:	f200 822b 	bhi.w	800e16e <USBH_HandleControl+0x472>
 800dd18:	a201      	add	r2, pc, #4	; (adr r2, 800dd20 <USBH_HandleControl+0x24>)
 800dd1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd1e:	bf00      	nop
 800dd20:	0800dd4d 	.word	0x0800dd4d
 800dd24:	0800dd67 	.word	0x0800dd67
 800dd28:	0800de09 	.word	0x0800de09
 800dd2c:	0800de2f 	.word	0x0800de2f
 800dd30:	0800debb 	.word	0x0800debb
 800dd34:	0800dee7 	.word	0x0800dee7
 800dd38:	0800dfa9 	.word	0x0800dfa9
 800dd3c:	0800dfcb 	.word	0x0800dfcb
 800dd40:	0800e05d 	.word	0x0800e05d
 800dd44:	0800e085 	.word	0x0800e085
 800dd48:	0800e117 	.word	0x0800e117
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f103 0110 	add.w	r1, r3, #16
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	795b      	ldrb	r3, [r3, #5]
 800dd56:	461a      	mov	r2, r3
 800dd58:	6878      	ldr	r0, [r7, #4]
 800dd5a:	f000 fa19 	bl	800e190 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2202      	movs	r2, #2
 800dd62:	761a      	strb	r2, [r3, #24]
      break;
 800dd64:	e20e      	b.n	800e184 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	795b      	ldrb	r3, [r3, #5]
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f006 f8d7 	bl	8013f20 <USBH_LL_GetURBState>
 800dd72:	4603      	mov	r3, r0
 800dd74:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800dd76:	7bbb      	ldrb	r3, [r7, #14]
 800dd78:	2b01      	cmp	r3, #1
 800dd7a:	d12c      	bne.n	800ddd6 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	7c1b      	ldrb	r3, [r3, #16]
 800dd80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dd84:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	8adb      	ldrh	r3, [r3, #22]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d00a      	beq.n	800dda4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800dd8e:	7b7b      	ldrb	r3, [r7, #13]
 800dd90:	2b80      	cmp	r3, #128	; 0x80
 800dd92:	d103      	bne.n	800dd9c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2203      	movs	r2, #3
 800dd98:	761a      	strb	r2, [r3, #24]
 800dd9a:	e00d      	b.n	800ddb8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2205      	movs	r2, #5
 800dda0:	761a      	strb	r2, [r3, #24]
 800dda2:	e009      	b.n	800ddb8 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800dda4:	7b7b      	ldrb	r3, [r7, #13]
 800dda6:	2b80      	cmp	r3, #128	; 0x80
 800dda8:	d103      	bne.n	800ddb2 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2209      	movs	r2, #9
 800ddae:	761a      	strb	r2, [r3, #24]
 800ddb0:	e002      	b.n	800ddb8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2207      	movs	r2, #7
 800ddb6:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2203      	movs	r2, #3
 800ddbc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ddcc:	2300      	movs	r3, #0
 800ddce:	2200      	movs	r2, #0
 800ddd0:	f003 f8b2 	bl	8010f38 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ddd4:	e1cd      	b.n	800e172 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ddd6:	7bbb      	ldrb	r3, [r7, #14]
 800ddd8:	2b04      	cmp	r3, #4
 800ddda:	d003      	beq.n	800dde4 <USBH_HandleControl+0xe8>
 800dddc:	7bbb      	ldrb	r3, [r7, #14]
 800ddde:	2b02      	cmp	r3, #2
 800dde0:	f040 81c7 	bne.w	800e172 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	220b      	movs	r2, #11
 800dde8:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2203      	movs	r2, #3
 800ddee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ddfe:	2300      	movs	r3, #0
 800de00:	2200      	movs	r2, #0
 800de02:	f003 f899 	bl	8010f38 <osMessageQueuePut>
      break;
 800de06:	e1b4      	b.n	800e172 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800de0e:	b29a      	uxth	r2, r3
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6899      	ldr	r1, [r3, #8]
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	899a      	ldrh	r2, [r3, #12]
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	791b      	ldrb	r3, [r3, #4]
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f000 f9f4 	bl	800e20e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2204      	movs	r2, #4
 800de2a:	761a      	strb	r2, [r3, #24]
      break;
 800de2c:	e1aa      	b.n	800e184 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	791b      	ldrb	r3, [r3, #4]
 800de32:	4619      	mov	r1, r3
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f006 f873 	bl	8013f20 <USBH_LL_GetURBState>
 800de3a:	4603      	mov	r3, r0
 800de3c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800de3e:	7bbb      	ldrb	r3, [r7, #14]
 800de40:	2b01      	cmp	r3, #1
 800de42:	d110      	bne.n	800de66 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2209      	movs	r2, #9
 800de48:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2203      	movs	r2, #3
 800de4e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800de5e:	2300      	movs	r3, #0
 800de60:	2200      	movs	r2, #0
 800de62:	f003 f869 	bl	8010f38 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800de66:	7bbb      	ldrb	r3, [r7, #14]
 800de68:	2b05      	cmp	r3, #5
 800de6a:	d110      	bne.n	800de8e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800de6c:	2303      	movs	r3, #3
 800de6e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2203      	movs	r2, #3
 800de74:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800de84:	2300      	movs	r3, #0
 800de86:	2200      	movs	r2, #0
 800de88:	f003 f856 	bl	8010f38 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800de8c:	e173      	b.n	800e176 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800de8e:	7bbb      	ldrb	r3, [r7, #14]
 800de90:	2b04      	cmp	r3, #4
 800de92:	f040 8170 	bne.w	800e176 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	220b      	movs	r2, #11
 800de9a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2203      	movs	r2, #3
 800dea0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800deb0:	2300      	movs	r3, #0
 800deb2:	2200      	movs	r2, #0
 800deb4:	f003 f840 	bl	8010f38 <osMessageQueuePut>
      break;
 800deb8:	e15d      	b.n	800e176 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6899      	ldr	r1, [r3, #8]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	899a      	ldrh	r2, [r3, #12]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	7958      	ldrb	r0, [r3, #5]
 800dec6:	2301      	movs	r3, #1
 800dec8:	9300      	str	r3, [sp, #0]
 800deca:	4603      	mov	r3, r0
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f000 f979 	bl	800e1c4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ded8:	b29a      	uxth	r2, r3
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2206      	movs	r2, #6
 800dee2:	761a      	strb	r2, [r3, #24]
      break;
 800dee4:	e14e      	b.n	800e184 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	795b      	ldrb	r3, [r3, #5]
 800deea:	4619      	mov	r1, r3
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f006 f817 	bl	8013f20 <USBH_LL_GetURBState>
 800def2:	4603      	mov	r3, r0
 800def4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800def6:	7bbb      	ldrb	r3, [r7, #14]
 800def8:	2b01      	cmp	r3, #1
 800defa:	d111      	bne.n	800df20 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2207      	movs	r2, #7
 800df00:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2203      	movs	r2, #3
 800df06:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800df16:	2300      	movs	r3, #0
 800df18:	2200      	movs	r2, #0
 800df1a:	f003 f80d 	bl	8010f38 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800df1e:	e12c      	b.n	800e17a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800df20:	7bbb      	ldrb	r3, [r7, #14]
 800df22:	2b05      	cmp	r3, #5
 800df24:	d113      	bne.n	800df4e <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	220c      	movs	r2, #12
 800df2a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800df2c:	2303      	movs	r3, #3
 800df2e:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2203      	movs	r2, #3
 800df34:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800df44:	2300      	movs	r3, #0
 800df46:	2200      	movs	r2, #0
 800df48:	f002 fff6 	bl	8010f38 <osMessageQueuePut>
      break;
 800df4c:	e115      	b.n	800e17a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800df4e:	7bbb      	ldrb	r3, [r7, #14]
 800df50:	2b02      	cmp	r3, #2
 800df52:	d111      	bne.n	800df78 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2205      	movs	r2, #5
 800df58:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2203      	movs	r2, #3
 800df5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800df6e:	2300      	movs	r3, #0
 800df70:	2200      	movs	r2, #0
 800df72:	f002 ffe1 	bl	8010f38 <osMessageQueuePut>
      break;
 800df76:	e100      	b.n	800e17a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800df78:	7bbb      	ldrb	r3, [r7, #14]
 800df7a:	2b04      	cmp	r3, #4
 800df7c:	f040 80fd 	bne.w	800e17a <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	220b      	movs	r2, #11
 800df84:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800df86:	2302      	movs	r3, #2
 800df88:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2203      	movs	r2, #3
 800df8e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800df9e:	2300      	movs	r3, #0
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	f002 ffc9 	bl	8010f38 <osMessageQueuePut>
      break;
 800dfa6:	e0e8      	b.n	800e17a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	791b      	ldrb	r3, [r3, #4]
 800dfac:	2200      	movs	r2, #0
 800dfae:	2100      	movs	r1, #0
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f000 f92c 	bl	800e20e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dfbc:	b29a      	uxth	r2, r3
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2208      	movs	r2, #8
 800dfc6:	761a      	strb	r2, [r3, #24]

      break;
 800dfc8:	e0dc      	b.n	800e184 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	791b      	ldrb	r3, [r3, #4]
 800dfce:	4619      	mov	r1, r3
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f005 ffa5 	bl	8013f20 <USBH_LL_GetURBState>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800dfda:	7bbb      	ldrb	r3, [r7, #14]
 800dfdc:	2b01      	cmp	r3, #1
 800dfde:	d113      	bne.n	800e008 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	220d      	movs	r2, #13
 800dfe4:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2203      	movs	r2, #3
 800dfee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dffe:	2300      	movs	r3, #0
 800e000:	2200      	movs	r2, #0
 800e002:	f002 ff99 	bl	8010f38 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e006:	e0ba      	b.n	800e17e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800e008:	7bbb      	ldrb	r3, [r7, #14]
 800e00a:	2b04      	cmp	r3, #4
 800e00c:	d111      	bne.n	800e032 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	220b      	movs	r2, #11
 800e012:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2203      	movs	r2, #3
 800e018:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e028:	2300      	movs	r3, #0
 800e02a:	2200      	movs	r2, #0
 800e02c:	f002 ff84 	bl	8010f38 <osMessageQueuePut>
      break;
 800e030:	e0a5      	b.n	800e17e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800e032:	7bbb      	ldrb	r3, [r7, #14]
 800e034:	2b05      	cmp	r3, #5
 800e036:	f040 80a2 	bne.w	800e17e <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800e03a:	2303      	movs	r3, #3
 800e03c:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2203      	movs	r2, #3
 800e042:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e052:	2300      	movs	r3, #0
 800e054:	2200      	movs	r2, #0
 800e056:	f002 ff6f 	bl	8010f38 <osMessageQueuePut>
      break;
 800e05a:	e090      	b.n	800e17e <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	795a      	ldrb	r2, [r3, #5]
 800e060:	2301      	movs	r3, #1
 800e062:	9300      	str	r3, [sp, #0]
 800e064:	4613      	mov	r3, r2
 800e066:	2200      	movs	r2, #0
 800e068:	2100      	movs	r1, #0
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f000 f8aa 	bl	800e1c4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e076:	b29a      	uxth	r2, r3
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	220a      	movs	r2, #10
 800e080:	761a      	strb	r2, [r3, #24]
      break;
 800e082:	e07f      	b.n	800e184 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	795b      	ldrb	r3, [r3, #5]
 800e088:	4619      	mov	r1, r3
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f005 ff48 	bl	8013f20 <USBH_LL_GetURBState>
 800e090:	4603      	mov	r3, r0
 800e092:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e094:	7bbb      	ldrb	r3, [r7, #14]
 800e096:	2b01      	cmp	r3, #1
 800e098:	d113      	bne.n	800e0c2 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800e09a:	2300      	movs	r3, #0
 800e09c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	220d      	movs	r2, #13
 800e0a2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2203      	movs	r2, #3
 800e0a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	f002 ff3c 	bl	8010f38 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e0c0:	e05f      	b.n	800e182 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e0c2:	7bbb      	ldrb	r3, [r7, #14]
 800e0c4:	2b02      	cmp	r3, #2
 800e0c6:	d111      	bne.n	800e0ec <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2209      	movs	r2, #9
 800e0cc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2203      	movs	r2, #3
 800e0d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	f002 ff27 	bl	8010f38 <osMessageQueuePut>
      break;
 800e0ea:	e04a      	b.n	800e182 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800e0ec:	7bbb      	ldrb	r3, [r7, #14]
 800e0ee:	2b04      	cmp	r3, #4
 800e0f0:	d147      	bne.n	800e182 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	220b      	movs	r2, #11
 800e0f6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2203      	movs	r2, #3
 800e0fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e10c:	2300      	movs	r3, #0
 800e10e:	2200      	movs	r2, #0
 800e110:	f002 ff12 	bl	8010f38 <osMessageQueuePut>
      break;
 800e114:	e035      	b.n	800e182 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	7e5b      	ldrb	r3, [r3, #25]
 800e11a:	3301      	adds	r3, #1
 800e11c:	b2da      	uxtb	r2, r3
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	765a      	strb	r2, [r3, #25]
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	7e5b      	ldrb	r3, [r3, #25]
 800e126:	2b02      	cmp	r3, #2
 800e128:	d806      	bhi.n	800e138 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2201      	movs	r2, #1
 800e12e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2201      	movs	r2, #1
 800e134:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e136:	e025      	b.n	800e184 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e13e:	2106      	movs	r1, #6
 800e140:	6878      	ldr	r0, [r7, #4]
 800e142:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2200      	movs	r2, #0
 800e148:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	795b      	ldrb	r3, [r3, #5]
 800e14e:	4619      	mov	r1, r3
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f000 f90d 	bl	800e370 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	791b      	ldrb	r3, [r3, #4]
 800e15a:	4619      	mov	r1, r3
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f000 f907 	bl	800e370 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2200      	movs	r2, #0
 800e166:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e168:	2302      	movs	r3, #2
 800e16a:	73fb      	strb	r3, [r7, #15]
      break;
 800e16c:	e00a      	b.n	800e184 <USBH_HandleControl+0x488>

    default:
      break;
 800e16e:	bf00      	nop
 800e170:	e008      	b.n	800e184 <USBH_HandleControl+0x488>
      break;
 800e172:	bf00      	nop
 800e174:	e006      	b.n	800e184 <USBH_HandleControl+0x488>
      break;
 800e176:	bf00      	nop
 800e178:	e004      	b.n	800e184 <USBH_HandleControl+0x488>
      break;
 800e17a:	bf00      	nop
 800e17c:	e002      	b.n	800e184 <USBH_HandleControl+0x488>
      break;
 800e17e:	bf00      	nop
 800e180:	e000      	b.n	800e184 <USBH_HandleControl+0x488>
      break;
 800e182:	bf00      	nop
  }

  return status;
 800e184:	7bfb      	ldrb	r3, [r7, #15]
}
 800e186:	4618      	mov	r0, r3
 800e188:	3710      	adds	r7, #16
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
 800e18e:	bf00      	nop

0800e190 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b088      	sub	sp, #32
 800e194:	af04      	add	r7, sp, #16
 800e196:	60f8      	str	r0, [r7, #12]
 800e198:	60b9      	str	r1, [r7, #8]
 800e19a:	4613      	mov	r3, r2
 800e19c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e19e:	79f9      	ldrb	r1, [r7, #7]
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	9303      	str	r3, [sp, #12]
 800e1a4:	2308      	movs	r3, #8
 800e1a6:	9302      	str	r3, [sp, #8]
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	9301      	str	r3, [sp, #4]
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	9300      	str	r3, [sp, #0]
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	68f8      	ldr	r0, [r7, #12]
 800e1b6:	f005 fe82 	bl	8013ebe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800e1ba:	2300      	movs	r3, #0
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	3710      	adds	r7, #16
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}

0800e1c4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b088      	sub	sp, #32
 800e1c8:	af04      	add	r7, sp, #16
 800e1ca:	60f8      	str	r0, [r7, #12]
 800e1cc:	60b9      	str	r1, [r7, #8]
 800e1ce:	4611      	mov	r1, r2
 800e1d0:	461a      	mov	r2, r3
 800e1d2:	460b      	mov	r3, r1
 800e1d4:	80fb      	strh	r3, [r7, #6]
 800e1d6:	4613      	mov	r3, r2
 800e1d8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d001      	beq.n	800e1e8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e1e8:	7979      	ldrb	r1, [r7, #5]
 800e1ea:	7e3b      	ldrb	r3, [r7, #24]
 800e1ec:	9303      	str	r3, [sp, #12]
 800e1ee:	88fb      	ldrh	r3, [r7, #6]
 800e1f0:	9302      	str	r3, [sp, #8]
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	9301      	str	r3, [sp, #4]
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	9300      	str	r3, [sp, #0]
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	68f8      	ldr	r0, [r7, #12]
 800e200:	f005 fe5d 	bl	8013ebe <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e204:	2300      	movs	r3, #0
}
 800e206:	4618      	mov	r0, r3
 800e208:	3710      	adds	r7, #16
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}

0800e20e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e20e:	b580      	push	{r7, lr}
 800e210:	b088      	sub	sp, #32
 800e212:	af04      	add	r7, sp, #16
 800e214:	60f8      	str	r0, [r7, #12]
 800e216:	60b9      	str	r1, [r7, #8]
 800e218:	4611      	mov	r1, r2
 800e21a:	461a      	mov	r2, r3
 800e21c:	460b      	mov	r3, r1
 800e21e:	80fb      	strh	r3, [r7, #6]
 800e220:	4613      	mov	r3, r2
 800e222:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e224:	7979      	ldrb	r1, [r7, #5]
 800e226:	2300      	movs	r3, #0
 800e228:	9303      	str	r3, [sp, #12]
 800e22a:	88fb      	ldrh	r3, [r7, #6]
 800e22c:	9302      	str	r3, [sp, #8]
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	9301      	str	r3, [sp, #4]
 800e232:	2301      	movs	r3, #1
 800e234:	9300      	str	r3, [sp, #0]
 800e236:	2300      	movs	r3, #0
 800e238:	2201      	movs	r2, #1
 800e23a:	68f8      	ldr	r0, [r7, #12]
 800e23c:	f005 fe3f 	bl	8013ebe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e240:	2300      	movs	r3, #0

}
 800e242:	4618      	mov	r0, r3
 800e244:	3710      	adds	r7, #16
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}

0800e24a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e24a:	b580      	push	{r7, lr}
 800e24c:	b088      	sub	sp, #32
 800e24e:	af04      	add	r7, sp, #16
 800e250:	60f8      	str	r0, [r7, #12]
 800e252:	60b9      	str	r1, [r7, #8]
 800e254:	4611      	mov	r1, r2
 800e256:	461a      	mov	r2, r3
 800e258:	460b      	mov	r3, r1
 800e25a:	80fb      	strh	r3, [r7, #6]
 800e25c:	4613      	mov	r3, r2
 800e25e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e266:	2b00      	cmp	r3, #0
 800e268:	d001      	beq.n	800e26e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e26a:	2300      	movs	r3, #0
 800e26c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e26e:	7979      	ldrb	r1, [r7, #5]
 800e270:	7e3b      	ldrb	r3, [r7, #24]
 800e272:	9303      	str	r3, [sp, #12]
 800e274:	88fb      	ldrh	r3, [r7, #6]
 800e276:	9302      	str	r3, [sp, #8]
 800e278:	68bb      	ldr	r3, [r7, #8]
 800e27a:	9301      	str	r3, [sp, #4]
 800e27c:	2301      	movs	r3, #1
 800e27e:	9300      	str	r3, [sp, #0]
 800e280:	2302      	movs	r3, #2
 800e282:	2200      	movs	r2, #0
 800e284:	68f8      	ldr	r0, [r7, #12]
 800e286:	f005 fe1a 	bl	8013ebe <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e28a:	2300      	movs	r3, #0
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3710      	adds	r7, #16
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}

0800e294 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b088      	sub	sp, #32
 800e298:	af04      	add	r7, sp, #16
 800e29a:	60f8      	str	r0, [r7, #12]
 800e29c:	60b9      	str	r1, [r7, #8]
 800e29e:	4611      	mov	r1, r2
 800e2a0:	461a      	mov	r2, r3
 800e2a2:	460b      	mov	r3, r1
 800e2a4:	80fb      	strh	r3, [r7, #6]
 800e2a6:	4613      	mov	r3, r2
 800e2a8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e2aa:	7979      	ldrb	r1, [r7, #5]
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	9303      	str	r3, [sp, #12]
 800e2b0:	88fb      	ldrh	r3, [r7, #6]
 800e2b2:	9302      	str	r3, [sp, #8]
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	9301      	str	r3, [sp, #4]
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	9300      	str	r3, [sp, #0]
 800e2bc:	2302      	movs	r3, #2
 800e2be:	2201      	movs	r2, #1
 800e2c0:	68f8      	ldr	r0, [r7, #12]
 800e2c2:	f005 fdfc 	bl	8013ebe <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e2c6:	2300      	movs	r3, #0
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3710      	adds	r7, #16
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}

0800e2d0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b086      	sub	sp, #24
 800e2d4:	af04      	add	r7, sp, #16
 800e2d6:	6078      	str	r0, [r7, #4]
 800e2d8:	4608      	mov	r0, r1
 800e2da:	4611      	mov	r1, r2
 800e2dc:	461a      	mov	r2, r3
 800e2de:	4603      	mov	r3, r0
 800e2e0:	70fb      	strb	r3, [r7, #3]
 800e2e2:	460b      	mov	r3, r1
 800e2e4:	70bb      	strb	r3, [r7, #2]
 800e2e6:	4613      	mov	r3, r2
 800e2e8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e2ea:	7878      	ldrb	r0, [r7, #1]
 800e2ec:	78ba      	ldrb	r2, [r7, #2]
 800e2ee:	78f9      	ldrb	r1, [r7, #3]
 800e2f0:	8b3b      	ldrh	r3, [r7, #24]
 800e2f2:	9302      	str	r3, [sp, #8]
 800e2f4:	7d3b      	ldrb	r3, [r7, #20]
 800e2f6:	9301      	str	r3, [sp, #4]
 800e2f8:	7c3b      	ldrb	r3, [r7, #16]
 800e2fa:	9300      	str	r3, [sp, #0]
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f005 fd8f 	bl	8013e22 <USBH_LL_OpenPipe>

  return USBH_OK;
 800e304:	2300      	movs	r3, #0
}
 800e306:	4618      	mov	r0, r3
 800e308:	3708      	adds	r7, #8
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}

0800e30e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e30e:	b580      	push	{r7, lr}
 800e310:	b082      	sub	sp, #8
 800e312:	af00      	add	r7, sp, #0
 800e314:	6078      	str	r0, [r7, #4]
 800e316:	460b      	mov	r3, r1
 800e318:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800e31a:	78fb      	ldrb	r3, [r7, #3]
 800e31c:	4619      	mov	r1, r3
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f005 fdae 	bl	8013e80 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e324:	2300      	movs	r3, #0
}
 800e326:	4618      	mov	r0, r3
 800e328:	3708      	adds	r7, #8
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}

0800e32e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e32e:	b580      	push	{r7, lr}
 800e330:	b084      	sub	sp, #16
 800e332:	af00      	add	r7, sp, #0
 800e334:	6078      	str	r0, [r7, #4]
 800e336:	460b      	mov	r3, r1
 800e338:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f000 f836 	bl	800e3ac <USBH_GetFreePipe>
 800e340:	4603      	mov	r3, r0
 800e342:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e344:	89fb      	ldrh	r3, [r7, #14]
 800e346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e34a:	4293      	cmp	r3, r2
 800e34c:	d00a      	beq.n	800e364 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800e34e:	78fa      	ldrb	r2, [r7, #3]
 800e350:	89fb      	ldrh	r3, [r7, #14]
 800e352:	f003 030f 	and.w	r3, r3, #15
 800e356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e35a:	6879      	ldr	r1, [r7, #4]
 800e35c:	33e0      	adds	r3, #224	; 0xe0
 800e35e:	009b      	lsls	r3, r3, #2
 800e360:	440b      	add	r3, r1
 800e362:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e364:	89fb      	ldrh	r3, [r7, #14]
 800e366:	b2db      	uxtb	r3, r3
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3710      	adds	r7, #16
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}

0800e370 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e370:	b480      	push	{r7}
 800e372:	b083      	sub	sp, #12
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	460b      	mov	r3, r1
 800e37a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800e37c:	78fb      	ldrb	r3, [r7, #3]
 800e37e:	2b0a      	cmp	r3, #10
 800e380:	d80d      	bhi.n	800e39e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e382:	78fb      	ldrb	r3, [r7, #3]
 800e384:	687a      	ldr	r2, [r7, #4]
 800e386:	33e0      	adds	r3, #224	; 0xe0
 800e388:	009b      	lsls	r3, r3, #2
 800e38a:	4413      	add	r3, r2
 800e38c:	685a      	ldr	r2, [r3, #4]
 800e38e:	78fb      	ldrb	r3, [r7, #3]
 800e390:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e394:	6879      	ldr	r1, [r7, #4]
 800e396:	33e0      	adds	r3, #224	; 0xe0
 800e398:	009b      	lsls	r3, r3, #2
 800e39a:	440b      	add	r3, r1
 800e39c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e39e:	2300      	movs	r3, #0
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	370c      	adds	r7, #12
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3aa:	4770      	bx	lr

0800e3ac <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b085      	sub	sp, #20
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	73fb      	strb	r3, [r7, #15]
 800e3bc:	e00f      	b.n	800e3de <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e3be:	7bfb      	ldrb	r3, [r7, #15]
 800e3c0:	687a      	ldr	r2, [r7, #4]
 800e3c2:	33e0      	adds	r3, #224	; 0xe0
 800e3c4:	009b      	lsls	r3, r3, #2
 800e3c6:	4413      	add	r3, r2
 800e3c8:	685b      	ldr	r3, [r3, #4]
 800e3ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d102      	bne.n	800e3d8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e3d2:	7bfb      	ldrb	r3, [r7, #15]
 800e3d4:	b29b      	uxth	r3, r3
 800e3d6:	e007      	b.n	800e3e8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800e3d8:	7bfb      	ldrb	r3, [r7, #15]
 800e3da:	3301      	adds	r3, #1
 800e3dc:	73fb      	strb	r3, [r7, #15]
 800e3de:	7bfb      	ldrb	r3, [r7, #15]
 800e3e0:	2b0a      	cmp	r3, #10
 800e3e2:	d9ec      	bls.n	800e3be <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e3e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3714      	adds	r7, #20
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f2:	4770      	bx	lr

0800e3f4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b084      	sub	sp, #16
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e3fe:	79fb      	ldrb	r3, [r7, #7]
 800e400:	4a08      	ldr	r2, [pc, #32]	; (800e424 <disk_status+0x30>)
 800e402:	009b      	lsls	r3, r3, #2
 800e404:	4413      	add	r3, r2
 800e406:	685b      	ldr	r3, [r3, #4]
 800e408:	685b      	ldr	r3, [r3, #4]
 800e40a:	79fa      	ldrb	r2, [r7, #7]
 800e40c:	4905      	ldr	r1, [pc, #20]	; (800e424 <disk_status+0x30>)
 800e40e:	440a      	add	r2, r1
 800e410:	7b12      	ldrb	r2, [r2, #12]
 800e412:	4610      	mov	r0, r2
 800e414:	4798      	blx	r3
 800e416:	4603      	mov	r3, r0
 800e418:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e41a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3710      	adds	r7, #16
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}
 800e424:	20000264 	.word	0x20000264

0800e428 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b084      	sub	sp, #16
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	4603      	mov	r3, r0
 800e430:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e432:	2300      	movs	r3, #0
 800e434:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e436:	79fb      	ldrb	r3, [r7, #7]
 800e438:	4a0d      	ldr	r2, [pc, #52]	; (800e470 <disk_initialize+0x48>)
 800e43a:	5cd3      	ldrb	r3, [r2, r3]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d111      	bne.n	800e464 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e440:	79fb      	ldrb	r3, [r7, #7]
 800e442:	4a0b      	ldr	r2, [pc, #44]	; (800e470 <disk_initialize+0x48>)
 800e444:	2101      	movs	r1, #1
 800e446:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e448:	79fb      	ldrb	r3, [r7, #7]
 800e44a:	4a09      	ldr	r2, [pc, #36]	; (800e470 <disk_initialize+0x48>)
 800e44c:	009b      	lsls	r3, r3, #2
 800e44e:	4413      	add	r3, r2
 800e450:	685b      	ldr	r3, [r3, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	79fa      	ldrb	r2, [r7, #7]
 800e456:	4906      	ldr	r1, [pc, #24]	; (800e470 <disk_initialize+0x48>)
 800e458:	440a      	add	r2, r1
 800e45a:	7b12      	ldrb	r2, [r2, #12]
 800e45c:	4610      	mov	r0, r2
 800e45e:	4798      	blx	r3
 800e460:	4603      	mov	r3, r0
 800e462:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e464:	7bfb      	ldrb	r3, [r7, #15]
}
 800e466:	4618      	mov	r0, r3
 800e468:	3710      	adds	r7, #16
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}
 800e46e:	bf00      	nop
 800e470:	20000264 	.word	0x20000264

0800e474 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e474:	b590      	push	{r4, r7, lr}
 800e476:	b087      	sub	sp, #28
 800e478:	af00      	add	r7, sp, #0
 800e47a:	60b9      	str	r1, [r7, #8]
 800e47c:	607a      	str	r2, [r7, #4]
 800e47e:	603b      	str	r3, [r7, #0]
 800e480:	4603      	mov	r3, r0
 800e482:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e484:	7bfb      	ldrb	r3, [r7, #15]
 800e486:	4a0a      	ldr	r2, [pc, #40]	; (800e4b0 <disk_read+0x3c>)
 800e488:	009b      	lsls	r3, r3, #2
 800e48a:	4413      	add	r3, r2
 800e48c:	685b      	ldr	r3, [r3, #4]
 800e48e:	689c      	ldr	r4, [r3, #8]
 800e490:	7bfb      	ldrb	r3, [r7, #15]
 800e492:	4a07      	ldr	r2, [pc, #28]	; (800e4b0 <disk_read+0x3c>)
 800e494:	4413      	add	r3, r2
 800e496:	7b18      	ldrb	r0, [r3, #12]
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	687a      	ldr	r2, [r7, #4]
 800e49c:	68b9      	ldr	r1, [r7, #8]
 800e49e:	47a0      	blx	r4
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	75fb      	strb	r3, [r7, #23]
  return res;
 800e4a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	371c      	adds	r7, #28
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd90      	pop	{r4, r7, pc}
 800e4ae:	bf00      	nop
 800e4b0:	20000264 	.word	0x20000264

0800e4b4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e4b4:	b590      	push	{r4, r7, lr}
 800e4b6:	b087      	sub	sp, #28
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	60b9      	str	r1, [r7, #8]
 800e4bc:	607a      	str	r2, [r7, #4]
 800e4be:	603b      	str	r3, [r7, #0]
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e4c4:	7bfb      	ldrb	r3, [r7, #15]
 800e4c6:	4a0a      	ldr	r2, [pc, #40]	; (800e4f0 <disk_write+0x3c>)
 800e4c8:	009b      	lsls	r3, r3, #2
 800e4ca:	4413      	add	r3, r2
 800e4cc:	685b      	ldr	r3, [r3, #4]
 800e4ce:	68dc      	ldr	r4, [r3, #12]
 800e4d0:	7bfb      	ldrb	r3, [r7, #15]
 800e4d2:	4a07      	ldr	r2, [pc, #28]	; (800e4f0 <disk_write+0x3c>)
 800e4d4:	4413      	add	r3, r2
 800e4d6:	7b18      	ldrb	r0, [r3, #12]
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	687a      	ldr	r2, [r7, #4]
 800e4dc:	68b9      	ldr	r1, [r7, #8]
 800e4de:	47a0      	blx	r4
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	75fb      	strb	r3, [r7, #23]
  return res;
 800e4e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	371c      	adds	r7, #28
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd90      	pop	{r4, r7, pc}
 800e4ee:	bf00      	nop
 800e4f0:	20000264 	.word	0x20000264

0800e4f4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b084      	sub	sp, #16
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	603a      	str	r2, [r7, #0]
 800e4fe:	71fb      	strb	r3, [r7, #7]
 800e500:	460b      	mov	r3, r1
 800e502:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e504:	79fb      	ldrb	r3, [r7, #7]
 800e506:	4a09      	ldr	r2, [pc, #36]	; (800e52c <disk_ioctl+0x38>)
 800e508:	009b      	lsls	r3, r3, #2
 800e50a:	4413      	add	r3, r2
 800e50c:	685b      	ldr	r3, [r3, #4]
 800e50e:	691b      	ldr	r3, [r3, #16]
 800e510:	79fa      	ldrb	r2, [r7, #7]
 800e512:	4906      	ldr	r1, [pc, #24]	; (800e52c <disk_ioctl+0x38>)
 800e514:	440a      	add	r2, r1
 800e516:	7b10      	ldrb	r0, [r2, #12]
 800e518:	79b9      	ldrb	r1, [r7, #6]
 800e51a:	683a      	ldr	r2, [r7, #0]
 800e51c:	4798      	blx	r3
 800e51e:	4603      	mov	r3, r0
 800e520:	73fb      	strb	r3, [r7, #15]
  return res;
 800e522:	7bfb      	ldrb	r3, [r7, #15]
}
 800e524:	4618      	mov	r0, r3
 800e526:	3710      	adds	r7, #16
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}
 800e52c:	20000264 	.word	0x20000264

0800e530 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 800e530:	b480      	push	{r7}
 800e532:	af00      	add	r7, sp, #0
  return 0;
 800e534:	2300      	movs	r3, #0
}
 800e536:	4618      	mov	r0, r3
 800e538:	46bd      	mov	sp, r7
 800e53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53e:	4770      	bx	lr

0800e540 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e540:	b480      	push	{r7}
 800e542:	b085      	sub	sp, #20
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	3301      	adds	r3, #1
 800e54c:	781b      	ldrb	r3, [r3, #0]
 800e54e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e550:	89fb      	ldrh	r3, [r7, #14]
 800e552:	021b      	lsls	r3, r3, #8
 800e554:	b21a      	sxth	r2, r3
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	b21b      	sxth	r3, r3
 800e55c:	4313      	orrs	r3, r2
 800e55e:	b21b      	sxth	r3, r3
 800e560:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e562:	89fb      	ldrh	r3, [r7, #14]
}
 800e564:	4618      	mov	r0, r3
 800e566:	3714      	adds	r7, #20
 800e568:	46bd      	mov	sp, r7
 800e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56e:	4770      	bx	lr

0800e570 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e570:	b480      	push	{r7}
 800e572:	b085      	sub	sp, #20
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	3303      	adds	r3, #3
 800e57c:	781b      	ldrb	r3, [r3, #0]
 800e57e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	021b      	lsls	r3, r3, #8
 800e584:	687a      	ldr	r2, [r7, #4]
 800e586:	3202      	adds	r2, #2
 800e588:	7812      	ldrb	r2, [r2, #0]
 800e58a:	4313      	orrs	r3, r2
 800e58c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	021b      	lsls	r3, r3, #8
 800e592:	687a      	ldr	r2, [r7, #4]
 800e594:	3201      	adds	r2, #1
 800e596:	7812      	ldrb	r2, [r2, #0]
 800e598:	4313      	orrs	r3, r2
 800e59a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	021b      	lsls	r3, r3, #8
 800e5a0:	687a      	ldr	r2, [r7, #4]
 800e5a2:	7812      	ldrb	r2, [r2, #0]
 800e5a4:	4313      	orrs	r3, r2
 800e5a6:	60fb      	str	r3, [r7, #12]
	return rv;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
}
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	3714      	adds	r7, #20
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b4:	4770      	bx	lr

0800e5b6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e5b6:	b480      	push	{r7}
 800e5b8:	b083      	sub	sp, #12
 800e5ba:	af00      	add	r7, sp, #0
 800e5bc:	6078      	str	r0, [r7, #4]
 800e5be:	460b      	mov	r3, r1
 800e5c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	1c5a      	adds	r2, r3, #1
 800e5c6:	607a      	str	r2, [r7, #4]
 800e5c8:	887a      	ldrh	r2, [r7, #2]
 800e5ca:	b2d2      	uxtb	r2, r2
 800e5cc:	701a      	strb	r2, [r3, #0]
 800e5ce:	887b      	ldrh	r3, [r7, #2]
 800e5d0:	0a1b      	lsrs	r3, r3, #8
 800e5d2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	1c5a      	adds	r2, r3, #1
 800e5d8:	607a      	str	r2, [r7, #4]
 800e5da:	887a      	ldrh	r2, [r7, #2]
 800e5dc:	b2d2      	uxtb	r2, r2
 800e5de:	701a      	strb	r2, [r3, #0]
}
 800e5e0:	bf00      	nop
 800e5e2:	370c      	adds	r7, #12
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ea:	4770      	bx	lr

0800e5ec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e5ec:	b480      	push	{r7}
 800e5ee:	b083      	sub	sp, #12
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
 800e5f4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	1c5a      	adds	r2, r3, #1
 800e5fa:	607a      	str	r2, [r7, #4]
 800e5fc:	683a      	ldr	r2, [r7, #0]
 800e5fe:	b2d2      	uxtb	r2, r2
 800e600:	701a      	strb	r2, [r3, #0]
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	0a1b      	lsrs	r3, r3, #8
 800e606:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	1c5a      	adds	r2, r3, #1
 800e60c:	607a      	str	r2, [r7, #4]
 800e60e:	683a      	ldr	r2, [r7, #0]
 800e610:	b2d2      	uxtb	r2, r2
 800e612:	701a      	strb	r2, [r3, #0]
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	0a1b      	lsrs	r3, r3, #8
 800e618:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	1c5a      	adds	r2, r3, #1
 800e61e:	607a      	str	r2, [r7, #4]
 800e620:	683a      	ldr	r2, [r7, #0]
 800e622:	b2d2      	uxtb	r2, r2
 800e624:	701a      	strb	r2, [r3, #0]
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	0a1b      	lsrs	r3, r3, #8
 800e62a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	1c5a      	adds	r2, r3, #1
 800e630:	607a      	str	r2, [r7, #4]
 800e632:	683a      	ldr	r2, [r7, #0]
 800e634:	b2d2      	uxtb	r2, r2
 800e636:	701a      	strb	r2, [r3, #0]
}
 800e638:	bf00      	nop
 800e63a:	370c      	adds	r7, #12
 800e63c:	46bd      	mov	sp, r7
 800e63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e642:	4770      	bx	lr

0800e644 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e644:	b480      	push	{r7}
 800e646:	b087      	sub	sp, #28
 800e648:	af00      	add	r7, sp, #0
 800e64a:	60f8      	str	r0, [r7, #12]
 800e64c:	60b9      	str	r1, [r7, #8]
 800e64e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d00d      	beq.n	800e67a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e65e:	693a      	ldr	r2, [r7, #16]
 800e660:	1c53      	adds	r3, r2, #1
 800e662:	613b      	str	r3, [r7, #16]
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	1c59      	adds	r1, r3, #1
 800e668:	6179      	str	r1, [r7, #20]
 800e66a:	7812      	ldrb	r2, [r2, #0]
 800e66c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	3b01      	subs	r3, #1
 800e672:	607b      	str	r3, [r7, #4]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d1f1      	bne.n	800e65e <mem_cpy+0x1a>
	}
}
 800e67a:	bf00      	nop
 800e67c:	371c      	adds	r7, #28
 800e67e:	46bd      	mov	sp, r7
 800e680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e684:	4770      	bx	lr

0800e686 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e686:	b480      	push	{r7}
 800e688:	b087      	sub	sp, #28
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	60f8      	str	r0, [r7, #12]
 800e68e:	60b9      	str	r1, [r7, #8]
 800e690:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	1c5a      	adds	r2, r3, #1
 800e69a:	617a      	str	r2, [r7, #20]
 800e69c:	68ba      	ldr	r2, [r7, #8]
 800e69e:	b2d2      	uxtb	r2, r2
 800e6a0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	3b01      	subs	r3, #1
 800e6a6:	607b      	str	r3, [r7, #4]
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d1f3      	bne.n	800e696 <mem_set+0x10>
}
 800e6ae:	bf00      	nop
 800e6b0:	371c      	adds	r7, #28
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b8:	4770      	bx	lr

0800e6ba <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e6ba:	b480      	push	{r7}
 800e6bc:	b089      	sub	sp, #36	; 0x24
 800e6be:	af00      	add	r7, sp, #0
 800e6c0:	60f8      	str	r0, [r7, #12]
 800e6c2:	60b9      	str	r1, [r7, #8]
 800e6c4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	61fb      	str	r3, [r7, #28]
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e6d2:	69fb      	ldr	r3, [r7, #28]
 800e6d4:	1c5a      	adds	r2, r3, #1
 800e6d6:	61fa      	str	r2, [r7, #28]
 800e6d8:	781b      	ldrb	r3, [r3, #0]
 800e6da:	4619      	mov	r1, r3
 800e6dc:	69bb      	ldr	r3, [r7, #24]
 800e6de:	1c5a      	adds	r2, r3, #1
 800e6e0:	61ba      	str	r2, [r7, #24]
 800e6e2:	781b      	ldrb	r3, [r3, #0]
 800e6e4:	1acb      	subs	r3, r1, r3
 800e6e6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	3b01      	subs	r3, #1
 800e6ec:	607b      	str	r3, [r7, #4]
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d002      	beq.n	800e6fa <mem_cmp+0x40>
 800e6f4:	697b      	ldr	r3, [r7, #20]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d0eb      	beq.n	800e6d2 <mem_cmp+0x18>

	return r;
 800e6fa:	697b      	ldr	r3, [r7, #20]
}
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	3724      	adds	r7, #36	; 0x24
 800e700:	46bd      	mov	sp, r7
 800e702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e706:	4770      	bx	lr

0800e708 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e708:	b480      	push	{r7}
 800e70a:	b083      	sub	sp, #12
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e712:	e002      	b.n	800e71a <chk_chr+0x12>
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	3301      	adds	r3, #1
 800e718:	607b      	str	r3, [r7, #4]
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	781b      	ldrb	r3, [r3, #0]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d005      	beq.n	800e72e <chk_chr+0x26>
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	781b      	ldrb	r3, [r3, #0]
 800e726:	461a      	mov	r2, r3
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	4293      	cmp	r3, r2
 800e72c:	d1f2      	bne.n	800e714 <chk_chr+0xc>
	return *str;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	781b      	ldrb	r3, [r3, #0]
}
 800e732:	4618      	mov	r0, r3
 800e734:	370c      	adds	r7, #12
 800e736:	46bd      	mov	sp, r7
 800e738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73c:	4770      	bx	lr
	...

0800e740 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e740:	b480      	push	{r7}
 800e742:	b085      	sub	sp, #20
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
 800e748:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e74a:	2300      	movs	r3, #0
 800e74c:	60bb      	str	r3, [r7, #8]
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	60fb      	str	r3, [r7, #12]
 800e752:	e029      	b.n	800e7a8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e754:	4a27      	ldr	r2, [pc, #156]	; (800e7f4 <chk_lock+0xb4>)
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	011b      	lsls	r3, r3, #4
 800e75a:	4413      	add	r3, r2
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d01d      	beq.n	800e79e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e762:	4a24      	ldr	r2, [pc, #144]	; (800e7f4 <chk_lock+0xb4>)
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	011b      	lsls	r3, r3, #4
 800e768:	4413      	add	r3, r2
 800e76a:	681a      	ldr	r2, [r3, #0]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	429a      	cmp	r2, r3
 800e772:	d116      	bne.n	800e7a2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e774:	4a1f      	ldr	r2, [pc, #124]	; (800e7f4 <chk_lock+0xb4>)
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	011b      	lsls	r3, r3, #4
 800e77a:	4413      	add	r3, r2
 800e77c:	3304      	adds	r3, #4
 800e77e:	681a      	ldr	r2, [r3, #0]
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e784:	429a      	cmp	r2, r3
 800e786:	d10c      	bne.n	800e7a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e788:	4a1a      	ldr	r2, [pc, #104]	; (800e7f4 <chk_lock+0xb4>)
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	011b      	lsls	r3, r3, #4
 800e78e:	4413      	add	r3, r2
 800e790:	3308      	adds	r3, #8
 800e792:	681a      	ldr	r2, [r3, #0]
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e798:	429a      	cmp	r2, r3
 800e79a:	d102      	bne.n	800e7a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e79c:	e007      	b.n	800e7ae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e79e:	2301      	movs	r3, #1
 800e7a0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	3301      	adds	r3, #1
 800e7a6:	60fb      	str	r3, [r7, #12]
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	2b01      	cmp	r3, #1
 800e7ac:	d9d2      	bls.n	800e754 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	2b02      	cmp	r3, #2
 800e7b2:	d109      	bne.n	800e7c8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d102      	bne.n	800e7c0 <chk_lock+0x80>
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	2b02      	cmp	r3, #2
 800e7be:	d101      	bne.n	800e7c4 <chk_lock+0x84>
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	e010      	b.n	800e7e6 <chk_lock+0xa6>
 800e7c4:	2312      	movs	r3, #18
 800e7c6:	e00e      	b.n	800e7e6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d108      	bne.n	800e7e0 <chk_lock+0xa0>
 800e7ce:	4a09      	ldr	r2, [pc, #36]	; (800e7f4 <chk_lock+0xb4>)
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	011b      	lsls	r3, r3, #4
 800e7d4:	4413      	add	r3, r2
 800e7d6:	330c      	adds	r3, #12
 800e7d8:	881b      	ldrh	r3, [r3, #0]
 800e7da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7de:	d101      	bne.n	800e7e4 <chk_lock+0xa4>
 800e7e0:	2310      	movs	r3, #16
 800e7e2:	e000      	b.n	800e7e6 <chk_lock+0xa6>
 800e7e4:	2300      	movs	r3, #0
}
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	3714      	adds	r7, #20
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f0:	4770      	bx	lr
 800e7f2:	bf00      	nop
 800e7f4:	20000244 	.word	0x20000244

0800e7f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b083      	sub	sp, #12
 800e7fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e7fe:	2300      	movs	r3, #0
 800e800:	607b      	str	r3, [r7, #4]
 800e802:	e002      	b.n	800e80a <enq_lock+0x12>
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	3301      	adds	r3, #1
 800e808:	607b      	str	r3, [r7, #4]
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2b01      	cmp	r3, #1
 800e80e:	d806      	bhi.n	800e81e <enq_lock+0x26>
 800e810:	4a09      	ldr	r2, [pc, #36]	; (800e838 <enq_lock+0x40>)
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	011b      	lsls	r3, r3, #4
 800e816:	4413      	add	r3, r2
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d1f2      	bne.n	800e804 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2b02      	cmp	r3, #2
 800e822:	bf14      	ite	ne
 800e824:	2301      	movne	r3, #1
 800e826:	2300      	moveq	r3, #0
 800e828:	b2db      	uxtb	r3, r3
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	370c      	adds	r7, #12
 800e82e:	46bd      	mov	sp, r7
 800e830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e834:	4770      	bx	lr
 800e836:	bf00      	nop
 800e838:	20000244 	.word	0x20000244

0800e83c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e83c:	b480      	push	{r7}
 800e83e:	b085      	sub	sp, #20
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
 800e844:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e846:	2300      	movs	r3, #0
 800e848:	60fb      	str	r3, [r7, #12]
 800e84a:	e01f      	b.n	800e88c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e84c:	4a41      	ldr	r2, [pc, #260]	; (800e954 <inc_lock+0x118>)
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	011b      	lsls	r3, r3, #4
 800e852:	4413      	add	r3, r2
 800e854:	681a      	ldr	r2, [r3, #0]
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d113      	bne.n	800e886 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e85e:	4a3d      	ldr	r2, [pc, #244]	; (800e954 <inc_lock+0x118>)
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	011b      	lsls	r3, r3, #4
 800e864:	4413      	add	r3, r2
 800e866:	3304      	adds	r3, #4
 800e868:	681a      	ldr	r2, [r3, #0]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e86e:	429a      	cmp	r2, r3
 800e870:	d109      	bne.n	800e886 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e872:	4a38      	ldr	r2, [pc, #224]	; (800e954 <inc_lock+0x118>)
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	011b      	lsls	r3, r3, #4
 800e878:	4413      	add	r3, r2
 800e87a:	3308      	adds	r3, #8
 800e87c:	681a      	ldr	r2, [r3, #0]
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e882:	429a      	cmp	r2, r3
 800e884:	d006      	beq.n	800e894 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	3301      	adds	r3, #1
 800e88a:	60fb      	str	r3, [r7, #12]
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d9dc      	bls.n	800e84c <inc_lock+0x10>
 800e892:	e000      	b.n	800e896 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e894:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2b02      	cmp	r3, #2
 800e89a:	d132      	bne.n	800e902 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e89c:	2300      	movs	r3, #0
 800e89e:	60fb      	str	r3, [r7, #12]
 800e8a0:	e002      	b.n	800e8a8 <inc_lock+0x6c>
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	3301      	adds	r3, #1
 800e8a6:	60fb      	str	r3, [r7, #12]
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	2b01      	cmp	r3, #1
 800e8ac:	d806      	bhi.n	800e8bc <inc_lock+0x80>
 800e8ae:	4a29      	ldr	r2, [pc, #164]	; (800e954 <inc_lock+0x118>)
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	011b      	lsls	r3, r3, #4
 800e8b4:	4413      	add	r3, r2
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d1f2      	bne.n	800e8a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	2b02      	cmp	r3, #2
 800e8c0:	d101      	bne.n	800e8c6 <inc_lock+0x8a>
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	e040      	b.n	800e948 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681a      	ldr	r2, [r3, #0]
 800e8ca:	4922      	ldr	r1, [pc, #136]	; (800e954 <inc_lock+0x118>)
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	011b      	lsls	r3, r3, #4
 800e8d0:	440b      	add	r3, r1
 800e8d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	689a      	ldr	r2, [r3, #8]
 800e8d8:	491e      	ldr	r1, [pc, #120]	; (800e954 <inc_lock+0x118>)
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	011b      	lsls	r3, r3, #4
 800e8de:	440b      	add	r3, r1
 800e8e0:	3304      	adds	r3, #4
 800e8e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	695a      	ldr	r2, [r3, #20]
 800e8e8:	491a      	ldr	r1, [pc, #104]	; (800e954 <inc_lock+0x118>)
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	011b      	lsls	r3, r3, #4
 800e8ee:	440b      	add	r3, r1
 800e8f0:	3308      	adds	r3, #8
 800e8f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e8f4:	4a17      	ldr	r2, [pc, #92]	; (800e954 <inc_lock+0x118>)
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	011b      	lsls	r3, r3, #4
 800e8fa:	4413      	add	r3, r2
 800e8fc:	330c      	adds	r3, #12
 800e8fe:	2200      	movs	r2, #0
 800e900:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d009      	beq.n	800e91c <inc_lock+0xe0>
 800e908:	4a12      	ldr	r2, [pc, #72]	; (800e954 <inc_lock+0x118>)
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	011b      	lsls	r3, r3, #4
 800e90e:	4413      	add	r3, r2
 800e910:	330c      	adds	r3, #12
 800e912:	881b      	ldrh	r3, [r3, #0]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d001      	beq.n	800e91c <inc_lock+0xe0>
 800e918:	2300      	movs	r3, #0
 800e91a:	e015      	b.n	800e948 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d108      	bne.n	800e934 <inc_lock+0xf8>
 800e922:	4a0c      	ldr	r2, [pc, #48]	; (800e954 <inc_lock+0x118>)
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	011b      	lsls	r3, r3, #4
 800e928:	4413      	add	r3, r2
 800e92a:	330c      	adds	r3, #12
 800e92c:	881b      	ldrh	r3, [r3, #0]
 800e92e:	3301      	adds	r3, #1
 800e930:	b29a      	uxth	r2, r3
 800e932:	e001      	b.n	800e938 <inc_lock+0xfc>
 800e934:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e938:	4906      	ldr	r1, [pc, #24]	; (800e954 <inc_lock+0x118>)
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	011b      	lsls	r3, r3, #4
 800e93e:	440b      	add	r3, r1
 800e940:	330c      	adds	r3, #12
 800e942:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	3301      	adds	r3, #1
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3714      	adds	r7, #20
 800e94c:	46bd      	mov	sp, r7
 800e94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e952:	4770      	bx	lr
 800e954:	20000244 	.word	0x20000244

0800e958 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e958:	b480      	push	{r7}
 800e95a:	b085      	sub	sp, #20
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	3b01      	subs	r3, #1
 800e964:	607b      	str	r3, [r7, #4]
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2b01      	cmp	r3, #1
 800e96a:	d825      	bhi.n	800e9b8 <dec_lock+0x60>
		n = Files[i].ctr;
 800e96c:	4a17      	ldr	r2, [pc, #92]	; (800e9cc <dec_lock+0x74>)
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	011b      	lsls	r3, r3, #4
 800e972:	4413      	add	r3, r2
 800e974:	330c      	adds	r3, #12
 800e976:	881b      	ldrh	r3, [r3, #0]
 800e978:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e97a:	89fb      	ldrh	r3, [r7, #14]
 800e97c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e980:	d101      	bne.n	800e986 <dec_lock+0x2e>
 800e982:	2300      	movs	r3, #0
 800e984:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e986:	89fb      	ldrh	r3, [r7, #14]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d002      	beq.n	800e992 <dec_lock+0x3a>
 800e98c:	89fb      	ldrh	r3, [r7, #14]
 800e98e:	3b01      	subs	r3, #1
 800e990:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e992:	4a0e      	ldr	r2, [pc, #56]	; (800e9cc <dec_lock+0x74>)
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	011b      	lsls	r3, r3, #4
 800e998:	4413      	add	r3, r2
 800e99a:	330c      	adds	r3, #12
 800e99c:	89fa      	ldrh	r2, [r7, #14]
 800e99e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e9a0:	89fb      	ldrh	r3, [r7, #14]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d105      	bne.n	800e9b2 <dec_lock+0x5a>
 800e9a6:	4a09      	ldr	r2, [pc, #36]	; (800e9cc <dec_lock+0x74>)
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	011b      	lsls	r3, r3, #4
 800e9ac:	4413      	add	r3, r2
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	737b      	strb	r3, [r7, #13]
 800e9b6:	e001      	b.n	800e9bc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e9b8:	2302      	movs	r3, #2
 800e9ba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e9bc:	7b7b      	ldrb	r3, [r7, #13]
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3714      	adds	r7, #20
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c8:	4770      	bx	lr
 800e9ca:	bf00      	nop
 800e9cc:	20000244 	.word	0x20000244

0800e9d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e9d0:	b480      	push	{r7}
 800e9d2:	b085      	sub	sp, #20
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e9d8:	2300      	movs	r3, #0
 800e9da:	60fb      	str	r3, [r7, #12]
 800e9dc:	e010      	b.n	800ea00 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e9de:	4a0d      	ldr	r2, [pc, #52]	; (800ea14 <clear_lock+0x44>)
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	011b      	lsls	r3, r3, #4
 800e9e4:	4413      	add	r3, r2
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	687a      	ldr	r2, [r7, #4]
 800e9ea:	429a      	cmp	r2, r3
 800e9ec:	d105      	bne.n	800e9fa <clear_lock+0x2a>
 800e9ee:	4a09      	ldr	r2, [pc, #36]	; (800ea14 <clear_lock+0x44>)
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	011b      	lsls	r3, r3, #4
 800e9f4:	4413      	add	r3, r2
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	3301      	adds	r3, #1
 800e9fe:	60fb      	str	r3, [r7, #12]
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	2b01      	cmp	r3, #1
 800ea04:	d9eb      	bls.n	800e9de <clear_lock+0xe>
	}
}
 800ea06:	bf00      	nop
 800ea08:	3714      	adds	r7, #20
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea10:	4770      	bx	lr
 800ea12:	bf00      	nop
 800ea14:	20000244 	.word	0x20000244

0800ea18 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b086      	sub	sp, #24
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ea20:	2300      	movs	r3, #0
 800ea22:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	78db      	ldrb	r3, [r3, #3]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d034      	beq.n	800ea96 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea30:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	7858      	ldrb	r0, [r3, #1]
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	697a      	ldr	r2, [r7, #20]
 800ea40:	f7ff fd38 	bl	800e4b4 <disk_write>
 800ea44:	4603      	mov	r3, r0
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d002      	beq.n	800ea50 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	73fb      	strb	r3, [r7, #15]
 800ea4e:	e022      	b.n	800ea96 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2200      	movs	r2, #0
 800ea54:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	6a1b      	ldr	r3, [r3, #32]
 800ea5a:	697a      	ldr	r2, [r7, #20]
 800ea5c:	1ad2      	subs	r2, r2, r3
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	699b      	ldr	r3, [r3, #24]
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d217      	bcs.n	800ea96 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	789b      	ldrb	r3, [r3, #2]
 800ea6a:	613b      	str	r3, [r7, #16]
 800ea6c:	e010      	b.n	800ea90 <sync_window+0x78>
					wsect += fs->fsize;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	699b      	ldr	r3, [r3, #24]
 800ea72:	697a      	ldr	r2, [r7, #20]
 800ea74:	4413      	add	r3, r2
 800ea76:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	7858      	ldrb	r0, [r3, #1]
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea82:	2301      	movs	r3, #1
 800ea84:	697a      	ldr	r2, [r7, #20]
 800ea86:	f7ff fd15 	bl	800e4b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ea8a:	693b      	ldr	r3, [r7, #16]
 800ea8c:	3b01      	subs	r3, #1
 800ea8e:	613b      	str	r3, [r7, #16]
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	2b01      	cmp	r3, #1
 800ea94:	d8eb      	bhi.n	800ea6e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ea96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3718      	adds	r7, #24
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}

0800eaa0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b084      	sub	sp, #16
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eab2:	683a      	ldr	r2, [r7, #0]
 800eab4:	429a      	cmp	r2, r3
 800eab6:	d01b      	beq.n	800eaf0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	f7ff ffad 	bl	800ea18 <sync_window>
 800eabe:	4603      	mov	r3, r0
 800eac0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800eac2:	7bfb      	ldrb	r3, [r7, #15]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d113      	bne.n	800eaf0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	7858      	ldrb	r0, [r3, #1]
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ead2:	2301      	movs	r3, #1
 800ead4:	683a      	ldr	r2, [r7, #0]
 800ead6:	f7ff fccd 	bl	800e474 <disk_read>
 800eada:	4603      	mov	r3, r0
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d004      	beq.n	800eaea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800eae0:	f04f 33ff 	mov.w	r3, #4294967295
 800eae4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800eae6:	2301      	movs	r3, #1
 800eae8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	683a      	ldr	r2, [r7, #0]
 800eaee:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800eaf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	3710      	adds	r7, #16
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}
	...

0800eafc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b084      	sub	sp, #16
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	f7ff ff87 	bl	800ea18 <sync_window>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800eb0e:	7bfb      	ldrb	r3, [r7, #15]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d158      	bne.n	800ebc6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	781b      	ldrb	r3, [r3, #0]
 800eb18:	2b03      	cmp	r3, #3
 800eb1a:	d148      	bne.n	800ebae <sync_fs+0xb2>
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	791b      	ldrb	r3, [r3, #4]
 800eb20:	2b01      	cmp	r3, #1
 800eb22:	d144      	bne.n	800ebae <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	3330      	adds	r3, #48	; 0x30
 800eb28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eb2c:	2100      	movs	r1, #0
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f7ff fda9 	bl	800e686 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	3330      	adds	r3, #48	; 0x30
 800eb38:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800eb3c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800eb40:	4618      	mov	r0, r3
 800eb42:	f7ff fd38 	bl	800e5b6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	3330      	adds	r3, #48	; 0x30
 800eb4a:	4921      	ldr	r1, [pc, #132]	; (800ebd0 <sync_fs+0xd4>)
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7ff fd4d 	bl	800e5ec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	3330      	adds	r3, #48	; 0x30
 800eb56:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800eb5a:	491e      	ldr	r1, [pc, #120]	; (800ebd4 <sync_fs+0xd8>)
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f7ff fd45 	bl	800e5ec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	3330      	adds	r3, #48	; 0x30
 800eb66:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	691b      	ldr	r3, [r3, #16]
 800eb6e:	4619      	mov	r1, r3
 800eb70:	4610      	mov	r0, r2
 800eb72:	f7ff fd3b 	bl	800e5ec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	3330      	adds	r3, #48	; 0x30
 800eb7a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	68db      	ldr	r3, [r3, #12]
 800eb82:	4619      	mov	r1, r3
 800eb84:	4610      	mov	r0, r2
 800eb86:	f7ff fd31 	bl	800e5ec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	69db      	ldr	r3, [r3, #28]
 800eb8e:	1c5a      	adds	r2, r3, #1
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	7858      	ldrb	r0, [r3, #1]
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eba2:	2301      	movs	r3, #1
 800eba4:	f7ff fc86 	bl	800e4b4 <disk_write>
			fs->fsi_flag = 0;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2200      	movs	r2, #0
 800ebac:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	785b      	ldrb	r3, [r3, #1]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	2100      	movs	r1, #0
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f7ff fc9c 	bl	800e4f4 <disk_ioctl>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d001      	beq.n	800ebc6 <sync_fs+0xca>
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ebc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	3710      	adds	r7, #16
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}
 800ebd0:	41615252 	.word	0x41615252
 800ebd4:	61417272 	.word	0x61417272

0800ebd8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b083      	sub	sp, #12
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	3b02      	subs	r3, #2
 800ebe6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	695b      	ldr	r3, [r3, #20]
 800ebec:	3b02      	subs	r3, #2
 800ebee:	683a      	ldr	r2, [r7, #0]
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d301      	bcc.n	800ebf8 <clust2sect+0x20>
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	e008      	b.n	800ec0a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	895b      	ldrh	r3, [r3, #10]
 800ebfc:	461a      	mov	r2, r3
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	fb03 f202 	mul.w	r2, r3, r2
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec08:	4413      	add	r3, r2
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	370c      	adds	r7, #12
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec14:	4770      	bx	lr

0800ec16 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ec16:	b580      	push	{r7, lr}
 800ec18:	b086      	sub	sp, #24
 800ec1a:	af00      	add	r7, sp, #0
 800ec1c:	6078      	str	r0, [r7, #4]
 800ec1e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	2b01      	cmp	r3, #1
 800ec2a:	d904      	bls.n	800ec36 <get_fat+0x20>
 800ec2c:	693b      	ldr	r3, [r7, #16]
 800ec2e:	695b      	ldr	r3, [r3, #20]
 800ec30:	683a      	ldr	r2, [r7, #0]
 800ec32:	429a      	cmp	r2, r3
 800ec34:	d302      	bcc.n	800ec3c <get_fat+0x26>
		val = 1;	/* Internal error */
 800ec36:	2301      	movs	r3, #1
 800ec38:	617b      	str	r3, [r7, #20]
 800ec3a:	e08c      	b.n	800ed56 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ec3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ec40:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ec42:	693b      	ldr	r3, [r7, #16]
 800ec44:	781b      	ldrb	r3, [r3, #0]
 800ec46:	2b02      	cmp	r3, #2
 800ec48:	d045      	beq.n	800ecd6 <get_fat+0xc0>
 800ec4a:	2b03      	cmp	r3, #3
 800ec4c:	d05d      	beq.n	800ed0a <get_fat+0xf4>
 800ec4e:	2b01      	cmp	r3, #1
 800ec50:	d177      	bne.n	800ed42 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	60fb      	str	r3, [r7, #12]
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	085b      	lsrs	r3, r3, #1
 800ec5a:	68fa      	ldr	r2, [r7, #12]
 800ec5c:	4413      	add	r3, r2
 800ec5e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	6a1a      	ldr	r2, [r3, #32]
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	0a5b      	lsrs	r3, r3, #9
 800ec68:	4413      	add	r3, r2
 800ec6a:	4619      	mov	r1, r3
 800ec6c:	6938      	ldr	r0, [r7, #16]
 800ec6e:	f7ff ff17 	bl	800eaa0 <move_window>
 800ec72:	4603      	mov	r3, r0
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d167      	bne.n	800ed48 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	1c5a      	adds	r2, r3, #1
 800ec7c:	60fa      	str	r2, [r7, #12]
 800ec7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec82:	693a      	ldr	r2, [r7, #16]
 800ec84:	4413      	add	r3, r2
 800ec86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ec8a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec8c:	693b      	ldr	r3, [r7, #16]
 800ec8e:	6a1a      	ldr	r2, [r3, #32]
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	0a5b      	lsrs	r3, r3, #9
 800ec94:	4413      	add	r3, r2
 800ec96:	4619      	mov	r1, r3
 800ec98:	6938      	ldr	r0, [r7, #16]
 800ec9a:	f7ff ff01 	bl	800eaa0 <move_window>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d153      	bne.n	800ed4c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecaa:	693a      	ldr	r2, [r7, #16]
 800ecac:	4413      	add	r3, r2
 800ecae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ecb2:	021b      	lsls	r3, r3, #8
 800ecb4:	461a      	mov	r2, r3
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	4313      	orrs	r3, r2
 800ecba:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	f003 0301 	and.w	r3, r3, #1
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d002      	beq.n	800eccc <get_fat+0xb6>
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	091b      	lsrs	r3, r3, #4
 800ecca:	e002      	b.n	800ecd2 <get_fat+0xbc>
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ecd2:	617b      	str	r3, [r7, #20]
			break;
 800ecd4:	e03f      	b.n	800ed56 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	6a1a      	ldr	r2, [r3, #32]
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	0a1b      	lsrs	r3, r3, #8
 800ecde:	4413      	add	r3, r2
 800ece0:	4619      	mov	r1, r3
 800ece2:	6938      	ldr	r0, [r7, #16]
 800ece4:	f7ff fedc 	bl	800eaa0 <move_window>
 800ece8:	4603      	mov	r3, r0
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d130      	bne.n	800ed50 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ecee:	693b      	ldr	r3, [r7, #16]
 800ecf0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	005b      	lsls	r3, r3, #1
 800ecf8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ecfc:	4413      	add	r3, r2
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f7ff fc1e 	bl	800e540 <ld_word>
 800ed04:	4603      	mov	r3, r0
 800ed06:	617b      	str	r3, [r7, #20]
			break;
 800ed08:	e025      	b.n	800ed56 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ed0a:	693b      	ldr	r3, [r7, #16]
 800ed0c:	6a1a      	ldr	r2, [r3, #32]
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	09db      	lsrs	r3, r3, #7
 800ed12:	4413      	add	r3, r2
 800ed14:	4619      	mov	r1, r3
 800ed16:	6938      	ldr	r0, [r7, #16]
 800ed18:	f7ff fec2 	bl	800eaa0 <move_window>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d118      	bne.n	800ed54 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ed22:	693b      	ldr	r3, [r7, #16]
 800ed24:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	009b      	lsls	r3, r3, #2
 800ed2c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ed30:	4413      	add	r3, r2
 800ed32:	4618      	mov	r0, r3
 800ed34:	f7ff fc1c 	bl	800e570 <ld_dword>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ed3e:	617b      	str	r3, [r7, #20]
			break;
 800ed40:	e009      	b.n	800ed56 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ed42:	2301      	movs	r3, #1
 800ed44:	617b      	str	r3, [r7, #20]
 800ed46:	e006      	b.n	800ed56 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ed48:	bf00      	nop
 800ed4a:	e004      	b.n	800ed56 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ed4c:	bf00      	nop
 800ed4e:	e002      	b.n	800ed56 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ed50:	bf00      	nop
 800ed52:	e000      	b.n	800ed56 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ed54:	bf00      	nop
		}
	}

	return val;
 800ed56:	697b      	ldr	r3, [r7, #20]
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3718      	adds	r7, #24
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}

0800ed60 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ed60:	b590      	push	{r4, r7, lr}
 800ed62:	b089      	sub	sp, #36	; 0x24
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	60f8      	str	r0, [r7, #12]
 800ed68:	60b9      	str	r1, [r7, #8]
 800ed6a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ed6c:	2302      	movs	r3, #2
 800ed6e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	2b01      	cmp	r3, #1
 800ed74:	f240 80d6 	bls.w	800ef24 <put_fat+0x1c4>
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	695b      	ldr	r3, [r3, #20]
 800ed7c:	68ba      	ldr	r2, [r7, #8]
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	f080 80d0 	bcs.w	800ef24 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	781b      	ldrb	r3, [r3, #0]
 800ed88:	2b02      	cmp	r3, #2
 800ed8a:	d073      	beq.n	800ee74 <put_fat+0x114>
 800ed8c:	2b03      	cmp	r3, #3
 800ed8e:	f000 8091 	beq.w	800eeb4 <put_fat+0x154>
 800ed92:	2b01      	cmp	r3, #1
 800ed94:	f040 80c6 	bne.w	800ef24 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	61bb      	str	r3, [r7, #24]
 800ed9c:	69bb      	ldr	r3, [r7, #24]
 800ed9e:	085b      	lsrs	r3, r3, #1
 800eda0:	69ba      	ldr	r2, [r7, #24]
 800eda2:	4413      	add	r3, r2
 800eda4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	6a1a      	ldr	r2, [r3, #32]
 800edaa:	69bb      	ldr	r3, [r7, #24]
 800edac:	0a5b      	lsrs	r3, r3, #9
 800edae:	4413      	add	r3, r2
 800edb0:	4619      	mov	r1, r3
 800edb2:	68f8      	ldr	r0, [r7, #12]
 800edb4:	f7ff fe74 	bl	800eaa0 <move_window>
 800edb8:	4603      	mov	r3, r0
 800edba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800edbc:	7ffb      	ldrb	r3, [r7, #31]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	f040 80a9 	bne.w	800ef16 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800edca:	69bb      	ldr	r3, [r7, #24]
 800edcc:	1c59      	adds	r1, r3, #1
 800edce:	61b9      	str	r1, [r7, #24]
 800edd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edd4:	4413      	add	r3, r2
 800edd6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	f003 0301 	and.w	r3, r3, #1
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d00d      	beq.n	800edfe <put_fat+0x9e>
 800ede2:	697b      	ldr	r3, [r7, #20]
 800ede4:	781b      	ldrb	r3, [r3, #0]
 800ede6:	b25b      	sxtb	r3, r3
 800ede8:	f003 030f 	and.w	r3, r3, #15
 800edec:	b25a      	sxtb	r2, r3
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	b2db      	uxtb	r3, r3
 800edf2:	011b      	lsls	r3, r3, #4
 800edf4:	b25b      	sxtb	r3, r3
 800edf6:	4313      	orrs	r3, r2
 800edf8:	b25b      	sxtb	r3, r3
 800edfa:	b2db      	uxtb	r3, r3
 800edfc:	e001      	b.n	800ee02 <put_fat+0xa2>
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	b2db      	uxtb	r3, r3
 800ee02:	697a      	ldr	r2, [r7, #20]
 800ee04:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	2201      	movs	r2, #1
 800ee0a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	6a1a      	ldr	r2, [r3, #32]
 800ee10:	69bb      	ldr	r3, [r7, #24]
 800ee12:	0a5b      	lsrs	r3, r3, #9
 800ee14:	4413      	add	r3, r2
 800ee16:	4619      	mov	r1, r3
 800ee18:	68f8      	ldr	r0, [r7, #12]
 800ee1a:	f7ff fe41 	bl	800eaa0 <move_window>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ee22:	7ffb      	ldrb	r3, [r7, #31]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d178      	bne.n	800ef1a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ee2e:	69bb      	ldr	r3, [r7, #24]
 800ee30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee34:	4413      	add	r3, r2
 800ee36:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ee38:	68bb      	ldr	r3, [r7, #8]
 800ee3a:	f003 0301 	and.w	r3, r3, #1
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d003      	beq.n	800ee4a <put_fat+0xea>
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	091b      	lsrs	r3, r3, #4
 800ee46:	b2db      	uxtb	r3, r3
 800ee48:	e00e      	b.n	800ee68 <put_fat+0x108>
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	781b      	ldrb	r3, [r3, #0]
 800ee4e:	b25b      	sxtb	r3, r3
 800ee50:	f023 030f 	bic.w	r3, r3, #15
 800ee54:	b25a      	sxtb	r2, r3
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	0a1b      	lsrs	r3, r3, #8
 800ee5a:	b25b      	sxtb	r3, r3
 800ee5c:	f003 030f 	and.w	r3, r3, #15
 800ee60:	b25b      	sxtb	r3, r3
 800ee62:	4313      	orrs	r3, r2
 800ee64:	b25b      	sxtb	r3, r3
 800ee66:	b2db      	uxtb	r3, r3
 800ee68:	697a      	ldr	r2, [r7, #20]
 800ee6a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	2201      	movs	r2, #1
 800ee70:	70da      	strb	r2, [r3, #3]
			break;
 800ee72:	e057      	b.n	800ef24 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	6a1a      	ldr	r2, [r3, #32]
 800ee78:	68bb      	ldr	r3, [r7, #8]
 800ee7a:	0a1b      	lsrs	r3, r3, #8
 800ee7c:	4413      	add	r3, r2
 800ee7e:	4619      	mov	r1, r3
 800ee80:	68f8      	ldr	r0, [r7, #12]
 800ee82:	f7ff fe0d 	bl	800eaa0 <move_window>
 800ee86:	4603      	mov	r3, r0
 800ee88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ee8a:	7ffb      	ldrb	r3, [r7, #31]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d146      	bne.n	800ef1e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	005b      	lsls	r3, r3, #1
 800ee9a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ee9e:	4413      	add	r3, r2
 800eea0:	687a      	ldr	r2, [r7, #4]
 800eea2:	b292      	uxth	r2, r2
 800eea4:	4611      	mov	r1, r2
 800eea6:	4618      	mov	r0, r3
 800eea8:	f7ff fb85 	bl	800e5b6 <st_word>
			fs->wflag = 1;
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	2201      	movs	r2, #1
 800eeb0:	70da      	strb	r2, [r3, #3]
			break;
 800eeb2:	e037      	b.n	800ef24 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	6a1a      	ldr	r2, [r3, #32]
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	09db      	lsrs	r3, r3, #7
 800eebc:	4413      	add	r3, r2
 800eebe:	4619      	mov	r1, r3
 800eec0:	68f8      	ldr	r0, [r7, #12]
 800eec2:	f7ff fded 	bl	800eaa0 <move_window>
 800eec6:	4603      	mov	r3, r0
 800eec8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eeca:	7ffb      	ldrb	r3, [r7, #31]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d128      	bne.n	800ef22 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	009b      	lsls	r3, r3, #2
 800eee0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800eee4:	4413      	add	r3, r2
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7ff fb42 	bl	800e570 <ld_dword>
 800eeec:	4603      	mov	r3, r0
 800eeee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800eef2:	4323      	orrs	r3, r4
 800eef4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	009b      	lsls	r3, r3, #2
 800ef00:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ef04:	4413      	add	r3, r2
 800ef06:	6879      	ldr	r1, [r7, #4]
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f7ff fb6f 	bl	800e5ec <st_dword>
			fs->wflag = 1;
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	2201      	movs	r2, #1
 800ef12:	70da      	strb	r2, [r3, #3]
			break;
 800ef14:	e006      	b.n	800ef24 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800ef16:	bf00      	nop
 800ef18:	e004      	b.n	800ef24 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800ef1a:	bf00      	nop
 800ef1c:	e002      	b.n	800ef24 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800ef1e:	bf00      	nop
 800ef20:	e000      	b.n	800ef24 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800ef22:	bf00      	nop
		}
	}
	return res;
 800ef24:	7ffb      	ldrb	r3, [r7, #31]
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	3724      	adds	r7, #36	; 0x24
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd90      	pop	{r4, r7, pc}

0800ef2e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ef2e:	b580      	push	{r7, lr}
 800ef30:	b088      	sub	sp, #32
 800ef32:	af00      	add	r7, sp, #0
 800ef34:	60f8      	str	r0, [r7, #12]
 800ef36:	60b9      	str	r1, [r7, #8]
 800ef38:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	2b01      	cmp	r3, #1
 800ef48:	d904      	bls.n	800ef54 <remove_chain+0x26>
 800ef4a:	69bb      	ldr	r3, [r7, #24]
 800ef4c:	695b      	ldr	r3, [r3, #20]
 800ef4e:	68ba      	ldr	r2, [r7, #8]
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d301      	bcc.n	800ef58 <remove_chain+0x2a>
 800ef54:	2302      	movs	r3, #2
 800ef56:	e04b      	b.n	800eff0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d00c      	beq.n	800ef78 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ef5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ef62:	6879      	ldr	r1, [r7, #4]
 800ef64:	69b8      	ldr	r0, [r7, #24]
 800ef66:	f7ff fefb 	bl	800ed60 <put_fat>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ef6e:	7ffb      	ldrb	r3, [r7, #31]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d001      	beq.n	800ef78 <remove_chain+0x4a>
 800ef74:	7ffb      	ldrb	r3, [r7, #31]
 800ef76:	e03b      	b.n	800eff0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ef78:	68b9      	ldr	r1, [r7, #8]
 800ef7a:	68f8      	ldr	r0, [r7, #12]
 800ef7c:	f7ff fe4b 	bl	800ec16 <get_fat>
 800ef80:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d031      	beq.n	800efec <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	2b01      	cmp	r3, #1
 800ef8c:	d101      	bne.n	800ef92 <remove_chain+0x64>
 800ef8e:	2302      	movs	r3, #2
 800ef90:	e02e      	b.n	800eff0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ef92:	697b      	ldr	r3, [r7, #20]
 800ef94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef98:	d101      	bne.n	800ef9e <remove_chain+0x70>
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	e028      	b.n	800eff0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ef9e:	2200      	movs	r2, #0
 800efa0:	68b9      	ldr	r1, [r7, #8]
 800efa2:	69b8      	ldr	r0, [r7, #24]
 800efa4:	f7ff fedc 	bl	800ed60 <put_fat>
 800efa8:	4603      	mov	r3, r0
 800efaa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800efac:	7ffb      	ldrb	r3, [r7, #31]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d001      	beq.n	800efb6 <remove_chain+0x88>
 800efb2:	7ffb      	ldrb	r3, [r7, #31]
 800efb4:	e01c      	b.n	800eff0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800efb6:	69bb      	ldr	r3, [r7, #24]
 800efb8:	691a      	ldr	r2, [r3, #16]
 800efba:	69bb      	ldr	r3, [r7, #24]
 800efbc:	695b      	ldr	r3, [r3, #20]
 800efbe:	3b02      	subs	r3, #2
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d20b      	bcs.n	800efdc <remove_chain+0xae>
			fs->free_clst++;
 800efc4:	69bb      	ldr	r3, [r7, #24]
 800efc6:	691b      	ldr	r3, [r3, #16]
 800efc8:	1c5a      	adds	r2, r3, #1
 800efca:	69bb      	ldr	r3, [r7, #24]
 800efcc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800efce:	69bb      	ldr	r3, [r7, #24]
 800efd0:	791b      	ldrb	r3, [r3, #4]
 800efd2:	f043 0301 	orr.w	r3, r3, #1
 800efd6:	b2da      	uxtb	r2, r3
 800efd8:	69bb      	ldr	r3, [r7, #24]
 800efda:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800efe0:	69bb      	ldr	r3, [r7, #24]
 800efe2:	695b      	ldr	r3, [r3, #20]
 800efe4:	68ba      	ldr	r2, [r7, #8]
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d3c6      	bcc.n	800ef78 <remove_chain+0x4a>
 800efea:	e000      	b.n	800efee <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800efec:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800efee:	2300      	movs	r3, #0
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3720      	adds	r7, #32
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}

0800eff8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b088      	sub	sp, #32
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
 800f000:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d10d      	bne.n	800f02a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f00e:	693b      	ldr	r3, [r7, #16]
 800f010:	68db      	ldr	r3, [r3, #12]
 800f012:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f014:	69bb      	ldr	r3, [r7, #24]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d004      	beq.n	800f024 <create_chain+0x2c>
 800f01a:	693b      	ldr	r3, [r7, #16]
 800f01c:	695b      	ldr	r3, [r3, #20]
 800f01e:	69ba      	ldr	r2, [r7, #24]
 800f020:	429a      	cmp	r2, r3
 800f022:	d31b      	bcc.n	800f05c <create_chain+0x64>
 800f024:	2301      	movs	r3, #1
 800f026:	61bb      	str	r3, [r7, #24]
 800f028:	e018      	b.n	800f05c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f02a:	6839      	ldr	r1, [r7, #0]
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f7ff fdf2 	bl	800ec16 <get_fat>
 800f032:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	2b01      	cmp	r3, #1
 800f038:	d801      	bhi.n	800f03e <create_chain+0x46>
 800f03a:	2301      	movs	r3, #1
 800f03c:	e070      	b.n	800f120 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f044:	d101      	bne.n	800f04a <create_chain+0x52>
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	e06a      	b.n	800f120 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f04a:	693b      	ldr	r3, [r7, #16]
 800f04c:	695b      	ldr	r3, [r3, #20]
 800f04e:	68fa      	ldr	r2, [r7, #12]
 800f050:	429a      	cmp	r2, r3
 800f052:	d201      	bcs.n	800f058 <create_chain+0x60>
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	e063      	b.n	800f120 <create_chain+0x128>
		scl = clst;
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f05c:	69bb      	ldr	r3, [r7, #24]
 800f05e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f060:	69fb      	ldr	r3, [r7, #28]
 800f062:	3301      	adds	r3, #1
 800f064:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f066:	693b      	ldr	r3, [r7, #16]
 800f068:	695b      	ldr	r3, [r3, #20]
 800f06a:	69fa      	ldr	r2, [r7, #28]
 800f06c:	429a      	cmp	r2, r3
 800f06e:	d307      	bcc.n	800f080 <create_chain+0x88>
				ncl = 2;
 800f070:	2302      	movs	r3, #2
 800f072:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f074:	69fa      	ldr	r2, [r7, #28]
 800f076:	69bb      	ldr	r3, [r7, #24]
 800f078:	429a      	cmp	r2, r3
 800f07a:	d901      	bls.n	800f080 <create_chain+0x88>
 800f07c:	2300      	movs	r3, #0
 800f07e:	e04f      	b.n	800f120 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f080:	69f9      	ldr	r1, [r7, #28]
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f7ff fdc7 	bl	800ec16 <get_fat>
 800f088:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d00e      	beq.n	800f0ae <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	2b01      	cmp	r3, #1
 800f094:	d003      	beq.n	800f09e <create_chain+0xa6>
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f09c:	d101      	bne.n	800f0a2 <create_chain+0xaa>
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	e03e      	b.n	800f120 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f0a2:	69fa      	ldr	r2, [r7, #28]
 800f0a4:	69bb      	ldr	r3, [r7, #24]
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d1da      	bne.n	800f060 <create_chain+0x68>
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	e038      	b.n	800f120 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f0ae:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f0b0:	f04f 32ff 	mov.w	r2, #4294967295
 800f0b4:	69f9      	ldr	r1, [r7, #28]
 800f0b6:	6938      	ldr	r0, [r7, #16]
 800f0b8:	f7ff fe52 	bl	800ed60 <put_fat>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f0c0:	7dfb      	ldrb	r3, [r7, #23]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d109      	bne.n	800f0da <create_chain+0xe2>
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d006      	beq.n	800f0da <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f0cc:	69fa      	ldr	r2, [r7, #28]
 800f0ce:	6839      	ldr	r1, [r7, #0]
 800f0d0:	6938      	ldr	r0, [r7, #16]
 800f0d2:	f7ff fe45 	bl	800ed60 <put_fat>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f0da:	7dfb      	ldrb	r3, [r7, #23]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d116      	bne.n	800f10e <create_chain+0x116>
		fs->last_clst = ncl;
 800f0e0:	693b      	ldr	r3, [r7, #16]
 800f0e2:	69fa      	ldr	r2, [r7, #28]
 800f0e4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f0e6:	693b      	ldr	r3, [r7, #16]
 800f0e8:	691a      	ldr	r2, [r3, #16]
 800f0ea:	693b      	ldr	r3, [r7, #16]
 800f0ec:	695b      	ldr	r3, [r3, #20]
 800f0ee:	3b02      	subs	r3, #2
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	d804      	bhi.n	800f0fe <create_chain+0x106>
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	691b      	ldr	r3, [r3, #16]
 800f0f8:	1e5a      	subs	r2, r3, #1
 800f0fa:	693b      	ldr	r3, [r7, #16]
 800f0fc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800f0fe:	693b      	ldr	r3, [r7, #16]
 800f100:	791b      	ldrb	r3, [r3, #4]
 800f102:	f043 0301 	orr.w	r3, r3, #1
 800f106:	b2da      	uxtb	r2, r3
 800f108:	693b      	ldr	r3, [r7, #16]
 800f10a:	711a      	strb	r2, [r3, #4]
 800f10c:	e007      	b.n	800f11e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f10e:	7dfb      	ldrb	r3, [r7, #23]
 800f110:	2b01      	cmp	r3, #1
 800f112:	d102      	bne.n	800f11a <create_chain+0x122>
 800f114:	f04f 33ff 	mov.w	r3, #4294967295
 800f118:	e000      	b.n	800f11c <create_chain+0x124>
 800f11a:	2301      	movs	r3, #1
 800f11c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f11e:	69fb      	ldr	r3, [r7, #28]
}
 800f120:	4618      	mov	r0, r3
 800f122:	3720      	adds	r7, #32
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}

0800f128 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f128:	b480      	push	{r7}
 800f12a:	b087      	sub	sp, #28
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
 800f130:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f13c:	3304      	adds	r3, #4
 800f13e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	0a5b      	lsrs	r3, r3, #9
 800f144:	68fa      	ldr	r2, [r7, #12]
 800f146:	8952      	ldrh	r2, [r2, #10]
 800f148:	fbb3 f3f2 	udiv	r3, r3, r2
 800f14c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f14e:	693b      	ldr	r3, [r7, #16]
 800f150:	1d1a      	adds	r2, r3, #4
 800f152:	613a      	str	r2, [r7, #16]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d101      	bne.n	800f162 <clmt_clust+0x3a>
 800f15e:	2300      	movs	r3, #0
 800f160:	e010      	b.n	800f184 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f162:	697a      	ldr	r2, [r7, #20]
 800f164:	68bb      	ldr	r3, [r7, #8]
 800f166:	429a      	cmp	r2, r3
 800f168:	d307      	bcc.n	800f17a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f16a:	697a      	ldr	r2, [r7, #20]
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	1ad3      	subs	r3, r2, r3
 800f170:	617b      	str	r3, [r7, #20]
 800f172:	693b      	ldr	r3, [r7, #16]
 800f174:	3304      	adds	r3, #4
 800f176:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f178:	e7e9      	b.n	800f14e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f17a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f17c:	693b      	ldr	r3, [r7, #16]
 800f17e:	681a      	ldr	r2, [r3, #0]
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	4413      	add	r3, r2
}
 800f184:	4618      	mov	r0, r3
 800f186:	371c      	adds	r7, #28
 800f188:	46bd      	mov	sp, r7
 800f18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18e:	4770      	bx	lr

0800f190 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b086      	sub	sp, #24
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f1a6:	d204      	bcs.n	800f1b2 <dir_sdi+0x22>
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	f003 031f 	and.w	r3, r3, #31
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d001      	beq.n	800f1b6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f1b2:	2302      	movs	r3, #2
 800f1b4:	e063      	b.n	800f27e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	683a      	ldr	r2, [r7, #0]
 800f1ba:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	689b      	ldr	r3, [r3, #8]
 800f1c0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d106      	bne.n	800f1d6 <dir_sdi+0x46>
 800f1c8:	693b      	ldr	r3, [r7, #16]
 800f1ca:	781b      	ldrb	r3, [r3, #0]
 800f1cc:	2b02      	cmp	r3, #2
 800f1ce:	d902      	bls.n	800f1d6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1d4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f1d6:	697b      	ldr	r3, [r7, #20]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d10c      	bne.n	800f1f6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	095b      	lsrs	r3, r3, #5
 800f1e0:	693a      	ldr	r2, [r7, #16]
 800f1e2:	8912      	ldrh	r2, [r2, #8]
 800f1e4:	4293      	cmp	r3, r2
 800f1e6:	d301      	bcc.n	800f1ec <dir_sdi+0x5c>
 800f1e8:	2302      	movs	r3, #2
 800f1ea:	e048      	b.n	800f27e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f1ec:	693b      	ldr	r3, [r7, #16]
 800f1ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	61da      	str	r2, [r3, #28]
 800f1f4:	e029      	b.n	800f24a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f1f6:	693b      	ldr	r3, [r7, #16]
 800f1f8:	895b      	ldrh	r3, [r3, #10]
 800f1fa:	025b      	lsls	r3, r3, #9
 800f1fc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f1fe:	e019      	b.n	800f234 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	6979      	ldr	r1, [r7, #20]
 800f204:	4618      	mov	r0, r3
 800f206:	f7ff fd06 	bl	800ec16 <get_fat>
 800f20a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f20c:	697b      	ldr	r3, [r7, #20]
 800f20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f212:	d101      	bne.n	800f218 <dir_sdi+0x88>
 800f214:	2301      	movs	r3, #1
 800f216:	e032      	b.n	800f27e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	2b01      	cmp	r3, #1
 800f21c:	d904      	bls.n	800f228 <dir_sdi+0x98>
 800f21e:	693b      	ldr	r3, [r7, #16]
 800f220:	695b      	ldr	r3, [r3, #20]
 800f222:	697a      	ldr	r2, [r7, #20]
 800f224:	429a      	cmp	r2, r3
 800f226:	d301      	bcc.n	800f22c <dir_sdi+0x9c>
 800f228:	2302      	movs	r3, #2
 800f22a:	e028      	b.n	800f27e <dir_sdi+0xee>
			ofs -= csz;
 800f22c:	683a      	ldr	r2, [r7, #0]
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	1ad3      	subs	r3, r2, r3
 800f232:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f234:	683a      	ldr	r2, [r7, #0]
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	429a      	cmp	r2, r3
 800f23a:	d2e1      	bcs.n	800f200 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f23c:	6979      	ldr	r1, [r7, #20]
 800f23e:	6938      	ldr	r0, [r7, #16]
 800f240:	f7ff fcca 	bl	800ebd8 <clust2sect>
 800f244:	4602      	mov	r2, r0
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	697a      	ldr	r2, [r7, #20]
 800f24e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	69db      	ldr	r3, [r3, #28]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d101      	bne.n	800f25c <dir_sdi+0xcc>
 800f258:	2302      	movs	r3, #2
 800f25a:	e010      	b.n	800f27e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	69da      	ldr	r2, [r3, #28]
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	0a5b      	lsrs	r3, r3, #9
 800f264:	441a      	add	r2, r3
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f26a:	693b      	ldr	r3, [r7, #16]
 800f26c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f276:	441a      	add	r2, r3
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f27c:	2300      	movs	r3, #0
}
 800f27e:	4618      	mov	r0, r3
 800f280:	3718      	adds	r7, #24
 800f282:	46bd      	mov	sp, r7
 800f284:	bd80      	pop	{r7, pc}

0800f286 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f286:	b580      	push	{r7, lr}
 800f288:	b086      	sub	sp, #24
 800f28a:	af00      	add	r7, sp, #0
 800f28c:	6078      	str	r0, [r7, #4]
 800f28e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	695b      	ldr	r3, [r3, #20]
 800f29a:	3320      	adds	r3, #32
 800f29c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	69db      	ldr	r3, [r3, #28]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d003      	beq.n	800f2ae <dir_next+0x28>
 800f2a6:	68bb      	ldr	r3, [r7, #8]
 800f2a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f2ac:	d301      	bcc.n	800f2b2 <dir_next+0x2c>
 800f2ae:	2304      	movs	r3, #4
 800f2b0:	e0aa      	b.n	800f408 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f2b2:	68bb      	ldr	r3, [r7, #8]
 800f2b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	f040 8098 	bne.w	800f3ee <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	69db      	ldr	r3, [r3, #28]
 800f2c2:	1c5a      	adds	r2, r3, #1
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	699b      	ldr	r3, [r3, #24]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d10b      	bne.n	800f2e8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f2d0:	68bb      	ldr	r3, [r7, #8]
 800f2d2:	095b      	lsrs	r3, r3, #5
 800f2d4:	68fa      	ldr	r2, [r7, #12]
 800f2d6:	8912      	ldrh	r2, [r2, #8]
 800f2d8:	4293      	cmp	r3, r2
 800f2da:	f0c0 8088 	bcc.w	800f3ee <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	61da      	str	r2, [r3, #28]
 800f2e4:	2304      	movs	r3, #4
 800f2e6:	e08f      	b.n	800f408 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	0a5b      	lsrs	r3, r3, #9
 800f2ec:	68fa      	ldr	r2, [r7, #12]
 800f2ee:	8952      	ldrh	r2, [r2, #10]
 800f2f0:	3a01      	subs	r2, #1
 800f2f2:	4013      	ands	r3, r2
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d17a      	bne.n	800f3ee <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f2f8:	687a      	ldr	r2, [r7, #4]
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	699b      	ldr	r3, [r3, #24]
 800f2fe:	4619      	mov	r1, r3
 800f300:	4610      	mov	r0, r2
 800f302:	f7ff fc88 	bl	800ec16 <get_fat>
 800f306:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	2b01      	cmp	r3, #1
 800f30c:	d801      	bhi.n	800f312 <dir_next+0x8c>
 800f30e:	2302      	movs	r3, #2
 800f310:	e07a      	b.n	800f408 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f318:	d101      	bne.n	800f31e <dir_next+0x98>
 800f31a:	2301      	movs	r3, #1
 800f31c:	e074      	b.n	800f408 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	695b      	ldr	r3, [r3, #20]
 800f322:	697a      	ldr	r2, [r7, #20]
 800f324:	429a      	cmp	r2, r3
 800f326:	d358      	bcc.n	800f3da <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d104      	bne.n	800f338 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	2200      	movs	r2, #0
 800f332:	61da      	str	r2, [r3, #28]
 800f334:	2304      	movs	r3, #4
 800f336:	e067      	b.n	800f408 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f338:	687a      	ldr	r2, [r7, #4]
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	699b      	ldr	r3, [r3, #24]
 800f33e:	4619      	mov	r1, r3
 800f340:	4610      	mov	r0, r2
 800f342:	f7ff fe59 	bl	800eff8 <create_chain>
 800f346:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d101      	bne.n	800f352 <dir_next+0xcc>
 800f34e:	2307      	movs	r3, #7
 800f350:	e05a      	b.n	800f408 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	2b01      	cmp	r3, #1
 800f356:	d101      	bne.n	800f35c <dir_next+0xd6>
 800f358:	2302      	movs	r3, #2
 800f35a:	e055      	b.n	800f408 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f362:	d101      	bne.n	800f368 <dir_next+0xe2>
 800f364:	2301      	movs	r3, #1
 800f366:	e04f      	b.n	800f408 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f368:	68f8      	ldr	r0, [r7, #12]
 800f36a:	f7ff fb55 	bl	800ea18 <sync_window>
 800f36e:	4603      	mov	r3, r0
 800f370:	2b00      	cmp	r3, #0
 800f372:	d001      	beq.n	800f378 <dir_next+0xf2>
 800f374:	2301      	movs	r3, #1
 800f376:	e047      	b.n	800f408 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	3330      	adds	r3, #48	; 0x30
 800f37c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f380:	2100      	movs	r1, #0
 800f382:	4618      	mov	r0, r3
 800f384:	f7ff f97f 	bl	800e686 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f388:	2300      	movs	r3, #0
 800f38a:	613b      	str	r3, [r7, #16]
 800f38c:	6979      	ldr	r1, [r7, #20]
 800f38e:	68f8      	ldr	r0, [r7, #12]
 800f390:	f7ff fc22 	bl	800ebd8 <clust2sect>
 800f394:	4602      	mov	r2, r0
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	62da      	str	r2, [r3, #44]	; 0x2c
 800f39a:	e012      	b.n	800f3c2 <dir_next+0x13c>
						fs->wflag = 1;
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	2201      	movs	r2, #1
 800f3a0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f3a2:	68f8      	ldr	r0, [r7, #12]
 800f3a4:	f7ff fb38 	bl	800ea18 <sync_window>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d001      	beq.n	800f3b2 <dir_next+0x12c>
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	e02a      	b.n	800f408 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f3b2:	693b      	ldr	r3, [r7, #16]
 800f3b4:	3301      	adds	r3, #1
 800f3b6:	613b      	str	r3, [r7, #16]
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3bc:	1c5a      	adds	r2, r3, #1
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	62da      	str	r2, [r3, #44]	; 0x2c
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	895b      	ldrh	r3, [r3, #10]
 800f3c6:	461a      	mov	r2, r3
 800f3c8:	693b      	ldr	r3, [r7, #16]
 800f3ca:	4293      	cmp	r3, r2
 800f3cc:	d3e6      	bcc.n	800f39c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3d2:	693b      	ldr	r3, [r7, #16]
 800f3d4:	1ad2      	subs	r2, r2, r3
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	697a      	ldr	r2, [r7, #20]
 800f3de:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f3e0:	6979      	ldr	r1, [r7, #20]
 800f3e2:	68f8      	ldr	r0, [r7, #12]
 800f3e4:	f7ff fbf8 	bl	800ebd8 <clust2sect>
 800f3e8:	4602      	mov	r2, r0
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	68ba      	ldr	r2, [r7, #8]
 800f3f2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f400:	441a      	add	r2, r3
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f406:	2300      	movs	r3, #0
}
 800f408:	4618      	mov	r0, r3
 800f40a:	3718      	adds	r7, #24
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b086      	sub	sp, #24
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
 800f418:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f420:	2100      	movs	r1, #0
 800f422:	6878      	ldr	r0, [r7, #4]
 800f424:	f7ff feb4 	bl	800f190 <dir_sdi>
 800f428:	4603      	mov	r3, r0
 800f42a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f42c:	7dfb      	ldrb	r3, [r7, #23]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d12b      	bne.n	800f48a <dir_alloc+0x7a>
		n = 0;
 800f432:	2300      	movs	r3, #0
 800f434:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	69db      	ldr	r3, [r3, #28]
 800f43a:	4619      	mov	r1, r3
 800f43c:	68f8      	ldr	r0, [r7, #12]
 800f43e:	f7ff fb2f 	bl	800eaa0 <move_window>
 800f442:	4603      	mov	r3, r0
 800f444:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f446:	7dfb      	ldrb	r3, [r7, #23]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d11d      	bne.n	800f488 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6a1b      	ldr	r3, [r3, #32]
 800f450:	781b      	ldrb	r3, [r3, #0]
 800f452:	2be5      	cmp	r3, #229	; 0xe5
 800f454:	d004      	beq.n	800f460 <dir_alloc+0x50>
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6a1b      	ldr	r3, [r3, #32]
 800f45a:	781b      	ldrb	r3, [r3, #0]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d107      	bne.n	800f470 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f460:	693b      	ldr	r3, [r7, #16]
 800f462:	3301      	adds	r3, #1
 800f464:	613b      	str	r3, [r7, #16]
 800f466:	693a      	ldr	r2, [r7, #16]
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	429a      	cmp	r2, r3
 800f46c:	d102      	bne.n	800f474 <dir_alloc+0x64>
 800f46e:	e00c      	b.n	800f48a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f470:	2300      	movs	r3, #0
 800f472:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f474:	2101      	movs	r1, #1
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	f7ff ff05 	bl	800f286 <dir_next>
 800f47c:	4603      	mov	r3, r0
 800f47e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f480:	7dfb      	ldrb	r3, [r7, #23]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d0d7      	beq.n	800f436 <dir_alloc+0x26>
 800f486:	e000      	b.n	800f48a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f488:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f48a:	7dfb      	ldrb	r3, [r7, #23]
 800f48c:	2b04      	cmp	r3, #4
 800f48e:	d101      	bne.n	800f494 <dir_alloc+0x84>
 800f490:	2307      	movs	r3, #7
 800f492:	75fb      	strb	r3, [r7, #23]
	return res;
 800f494:	7dfb      	ldrb	r3, [r7, #23]
}
 800f496:	4618      	mov	r0, r3
 800f498:	3718      	adds	r7, #24
 800f49a:	46bd      	mov	sp, r7
 800f49c:	bd80      	pop	{r7, pc}

0800f49e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f49e:	b580      	push	{r7, lr}
 800f4a0:	b084      	sub	sp, #16
 800f4a2:	af00      	add	r7, sp, #0
 800f4a4:	6078      	str	r0, [r7, #4]
 800f4a6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	331a      	adds	r3, #26
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f7ff f847 	bl	800e540 <ld_word>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	781b      	ldrb	r3, [r3, #0]
 800f4ba:	2b03      	cmp	r3, #3
 800f4bc:	d109      	bne.n	800f4d2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	3314      	adds	r3, #20
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f7ff f83c 	bl	800e540 <ld_word>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	041b      	lsls	r3, r3, #16
 800f4cc:	68fa      	ldr	r2, [r7, #12]
 800f4ce:	4313      	orrs	r3, r2
 800f4d0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
}
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	3710      	adds	r7, #16
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}

0800f4dc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b084      	sub	sp, #16
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	60f8      	str	r0, [r7, #12]
 800f4e4:	60b9      	str	r1, [r7, #8]
 800f4e6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	331a      	adds	r3, #26
 800f4ec:	687a      	ldr	r2, [r7, #4]
 800f4ee:	b292      	uxth	r2, r2
 800f4f0:	4611      	mov	r1, r2
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f7ff f85f 	bl	800e5b6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	781b      	ldrb	r3, [r3, #0]
 800f4fc:	2b03      	cmp	r3, #3
 800f4fe:	d109      	bne.n	800f514 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f500:	68bb      	ldr	r3, [r7, #8]
 800f502:	f103 0214 	add.w	r2, r3, #20
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	0c1b      	lsrs	r3, r3, #16
 800f50a:	b29b      	uxth	r3, r3
 800f50c:	4619      	mov	r1, r3
 800f50e:	4610      	mov	r0, r2
 800f510:	f7ff f851 	bl	800e5b6 <st_word>
	}
}
 800f514:	bf00      	nop
 800f516:	3710      	adds	r7, #16
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}

0800f51c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b086      	sub	sp, #24
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f526:	2304      	movs	r3, #4
 800f528:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800f530:	e03c      	b.n	800f5ac <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	69db      	ldr	r3, [r3, #28]
 800f536:	4619      	mov	r1, r3
 800f538:	6938      	ldr	r0, [r7, #16]
 800f53a:	f7ff fab1 	bl	800eaa0 <move_window>
 800f53e:	4603      	mov	r3, r0
 800f540:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f542:	7dfb      	ldrb	r3, [r7, #23]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d136      	bne.n	800f5b6 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	6a1b      	ldr	r3, [r3, #32]
 800f54c:	781b      	ldrb	r3, [r3, #0]
 800f54e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800f550:	7bfb      	ldrb	r3, [r7, #15]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d102      	bne.n	800f55c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f556:	2304      	movs	r3, #4
 800f558:	75fb      	strb	r3, [r7, #23]
 800f55a:	e031      	b.n	800f5c0 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	6a1b      	ldr	r3, [r3, #32]
 800f560:	330b      	adds	r3, #11
 800f562:	781b      	ldrb	r3, [r3, #0]
 800f564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f568:	73bb      	strb	r3, [r7, #14]
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	7bba      	ldrb	r2, [r7, #14]
 800f56e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800f570:	7bfb      	ldrb	r3, [r7, #15]
 800f572:	2be5      	cmp	r3, #229	; 0xe5
 800f574:	d011      	beq.n	800f59a <dir_read+0x7e>
 800f576:	7bfb      	ldrb	r3, [r7, #15]
 800f578:	2b2e      	cmp	r3, #46	; 0x2e
 800f57a:	d00e      	beq.n	800f59a <dir_read+0x7e>
 800f57c:	7bbb      	ldrb	r3, [r7, #14]
 800f57e:	2b0f      	cmp	r3, #15
 800f580:	d00b      	beq.n	800f59a <dir_read+0x7e>
 800f582:	7bbb      	ldrb	r3, [r7, #14]
 800f584:	f023 0320 	bic.w	r3, r3, #32
 800f588:	2b08      	cmp	r3, #8
 800f58a:	bf0c      	ite	eq
 800f58c:	2301      	moveq	r3, #1
 800f58e:	2300      	movne	r3, #0
 800f590:	b2db      	uxtb	r3, r3
 800f592:	461a      	mov	r2, r3
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	4293      	cmp	r3, r2
 800f598:	d00f      	beq.n	800f5ba <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f59a:	2100      	movs	r1, #0
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f7ff fe72 	bl	800f286 <dir_next>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f5a6:	7dfb      	ldrb	r3, [r7, #23]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d108      	bne.n	800f5be <dir_read+0xa2>
	while (dp->sect) {
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	69db      	ldr	r3, [r3, #28]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d1be      	bne.n	800f532 <dir_read+0x16>
 800f5b4:	e004      	b.n	800f5c0 <dir_read+0xa4>
		if (res != FR_OK) break;
 800f5b6:	bf00      	nop
 800f5b8:	e002      	b.n	800f5c0 <dir_read+0xa4>
				break;
 800f5ba:	bf00      	nop
 800f5bc:	e000      	b.n	800f5c0 <dir_read+0xa4>
		if (res != FR_OK) break;
 800f5be:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f5c0:	7dfb      	ldrb	r3, [r7, #23]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d002      	beq.n	800f5cc <dir_read+0xb0>
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	61da      	str	r2, [r3, #28]
	return res;
 800f5cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	3718      	adds	r7, #24
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}

0800f5d6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f5d6:	b580      	push	{r7, lr}
 800f5d8:	b086      	sub	sp, #24
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f5e4:	2100      	movs	r1, #0
 800f5e6:	6878      	ldr	r0, [r7, #4]
 800f5e8:	f7ff fdd2 	bl	800f190 <dir_sdi>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f5f0:	7dfb      	ldrb	r3, [r7, #23]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d001      	beq.n	800f5fa <dir_find+0x24>
 800f5f6:	7dfb      	ldrb	r3, [r7, #23]
 800f5f8:	e03e      	b.n	800f678 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	69db      	ldr	r3, [r3, #28]
 800f5fe:	4619      	mov	r1, r3
 800f600:	6938      	ldr	r0, [r7, #16]
 800f602:	f7ff fa4d 	bl	800eaa0 <move_window>
 800f606:	4603      	mov	r3, r0
 800f608:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f60a:	7dfb      	ldrb	r3, [r7, #23]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d12f      	bne.n	800f670 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	6a1b      	ldr	r3, [r3, #32]
 800f614:	781b      	ldrb	r3, [r3, #0]
 800f616:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f618:	7bfb      	ldrb	r3, [r7, #15]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d102      	bne.n	800f624 <dir_find+0x4e>
 800f61e:	2304      	movs	r3, #4
 800f620:	75fb      	strb	r3, [r7, #23]
 800f622:	e028      	b.n	800f676 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	6a1b      	ldr	r3, [r3, #32]
 800f628:	330b      	adds	r3, #11
 800f62a:	781b      	ldrb	r3, [r3, #0]
 800f62c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f630:	b2da      	uxtb	r2, r3
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6a1b      	ldr	r3, [r3, #32]
 800f63a:	330b      	adds	r3, #11
 800f63c:	781b      	ldrb	r3, [r3, #0]
 800f63e:	f003 0308 	and.w	r3, r3, #8
 800f642:	2b00      	cmp	r3, #0
 800f644:	d10a      	bne.n	800f65c <dir_find+0x86>
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6a18      	ldr	r0, [r3, #32]
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	3324      	adds	r3, #36	; 0x24
 800f64e:	220b      	movs	r2, #11
 800f650:	4619      	mov	r1, r3
 800f652:	f7ff f832 	bl	800e6ba <mem_cmp>
 800f656:	4603      	mov	r3, r0
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d00b      	beq.n	800f674 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f65c:	2100      	movs	r1, #0
 800f65e:	6878      	ldr	r0, [r7, #4]
 800f660:	f7ff fe11 	bl	800f286 <dir_next>
 800f664:	4603      	mov	r3, r0
 800f666:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f668:	7dfb      	ldrb	r3, [r7, #23]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d0c5      	beq.n	800f5fa <dir_find+0x24>
 800f66e:	e002      	b.n	800f676 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f670:	bf00      	nop
 800f672:	e000      	b.n	800f676 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f674:	bf00      	nop

	return res;
 800f676:	7dfb      	ldrb	r3, [r7, #23]
}
 800f678:	4618      	mov	r0, r3
 800f67a:	3718      	adds	r7, #24
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd80      	pop	{r7, pc}

0800f680 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b084      	sub	sp, #16
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f68e:	2101      	movs	r1, #1
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f7ff febd 	bl	800f410 <dir_alloc>
 800f696:	4603      	mov	r3, r0
 800f698:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f69a:	7bfb      	ldrb	r3, [r7, #15]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d11c      	bne.n	800f6da <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	69db      	ldr	r3, [r3, #28]
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	68b8      	ldr	r0, [r7, #8]
 800f6a8:	f7ff f9fa 	bl	800eaa0 <move_window>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f6b0:	7bfb      	ldrb	r3, [r7, #15]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d111      	bne.n	800f6da <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	6a1b      	ldr	r3, [r3, #32]
 800f6ba:	2220      	movs	r2, #32
 800f6bc:	2100      	movs	r1, #0
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f7fe ffe1 	bl	800e686 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	6a18      	ldr	r0, [r3, #32]
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	3324      	adds	r3, #36	; 0x24
 800f6cc:	220b      	movs	r2, #11
 800f6ce:	4619      	mov	r1, r3
 800f6d0:	f7fe ffb8 	bl	800e644 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	2201      	movs	r2, #1
 800f6d8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f6da:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6dc:	4618      	mov	r0, r3
 800f6de:	3710      	adds	r7, #16
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}

0800f6e4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b086      	sub	sp, #24
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
 800f6ec:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	69db      	ldr	r3, [r3, #28]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d04e      	beq.n	800f79a <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	613b      	str	r3, [r7, #16]
 800f700:	693b      	ldr	r3, [r7, #16]
 800f702:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800f704:	e021      	b.n	800f74a <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6a1a      	ldr	r2, [r3, #32]
 800f70a:	697b      	ldr	r3, [r7, #20]
 800f70c:	1c59      	adds	r1, r3, #1
 800f70e:	6179      	str	r1, [r7, #20]
 800f710:	4413      	add	r3, r2
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800f716:	7bfb      	ldrb	r3, [r7, #15]
 800f718:	2b20      	cmp	r3, #32
 800f71a:	d100      	bne.n	800f71e <get_fileinfo+0x3a>
 800f71c:	e015      	b.n	800f74a <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800f71e:	7bfb      	ldrb	r3, [r7, #15]
 800f720:	2b05      	cmp	r3, #5
 800f722:	d101      	bne.n	800f728 <get_fileinfo+0x44>
 800f724:	23e5      	movs	r3, #229	; 0xe5
 800f726:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800f728:	697b      	ldr	r3, [r7, #20]
 800f72a:	2b09      	cmp	r3, #9
 800f72c:	d106      	bne.n	800f73c <get_fileinfo+0x58>
 800f72e:	693b      	ldr	r3, [r7, #16]
 800f730:	1c5a      	adds	r2, r3, #1
 800f732:	613a      	str	r2, [r7, #16]
 800f734:	683a      	ldr	r2, [r7, #0]
 800f736:	4413      	add	r3, r2
 800f738:	222e      	movs	r2, #46	; 0x2e
 800f73a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800f73c:	693b      	ldr	r3, [r7, #16]
 800f73e:	1c5a      	adds	r2, r3, #1
 800f740:	613a      	str	r2, [r7, #16]
 800f742:	683a      	ldr	r2, [r7, #0]
 800f744:	4413      	add	r3, r2
 800f746:	7bfa      	ldrb	r2, [r7, #15]
 800f748:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800f74a:	697b      	ldr	r3, [r7, #20]
 800f74c:	2b0a      	cmp	r3, #10
 800f74e:	d9da      	bls.n	800f706 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800f750:	683a      	ldr	r2, [r7, #0]
 800f752:	693b      	ldr	r3, [r7, #16]
 800f754:	4413      	add	r3, r2
 800f756:	3309      	adds	r3, #9
 800f758:	2200      	movs	r2, #0
 800f75a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6a1b      	ldr	r3, [r3, #32]
 800f760:	7ada      	ldrb	r2, [r3, #11]
 800f762:	683b      	ldr	r3, [r7, #0]
 800f764:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	6a1b      	ldr	r3, [r3, #32]
 800f76a:	331c      	adds	r3, #28
 800f76c:	4618      	mov	r0, r3
 800f76e:	f7fe feff 	bl	800e570 <ld_dword>
 800f772:	4602      	mov	r2, r0
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	6a1b      	ldr	r3, [r3, #32]
 800f77c:	3316      	adds	r3, #22
 800f77e:	4618      	mov	r0, r3
 800f780:	f7fe fef6 	bl	800e570 <ld_dword>
 800f784:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800f786:	68bb      	ldr	r3, [r7, #8]
 800f788:	b29a      	uxth	r2, r3
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	80da      	strh	r2, [r3, #6]
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	0c1b      	lsrs	r3, r3, #16
 800f792:	b29a      	uxth	r2, r3
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	809a      	strh	r2, [r3, #4]
 800f798:	e000      	b.n	800f79c <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f79a:	bf00      	nop
}
 800f79c:	3718      	adds	r7, #24
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}
	...

0800f7a4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b088      	sub	sp, #32
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f7ae:	683b      	ldr	r3, [r7, #0]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	60fb      	str	r3, [r7, #12]
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	3324      	adds	r3, #36	; 0x24
 800f7b8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f7ba:	220b      	movs	r2, #11
 800f7bc:	2120      	movs	r1, #32
 800f7be:	68b8      	ldr	r0, [r7, #8]
 800f7c0:	f7fe ff61 	bl	800e686 <mem_set>
	si = i = 0; ni = 8;
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	613b      	str	r3, [r7, #16]
 800f7c8:	693b      	ldr	r3, [r7, #16]
 800f7ca:	617b      	str	r3, [r7, #20]
 800f7cc:	2308      	movs	r3, #8
 800f7ce:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	1c5a      	adds	r2, r3, #1
 800f7d4:	617a      	str	r2, [r7, #20]
 800f7d6:	68fa      	ldr	r2, [r7, #12]
 800f7d8:	4413      	add	r3, r2
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f7de:	7ffb      	ldrb	r3, [r7, #31]
 800f7e0:	2b20      	cmp	r3, #32
 800f7e2:	d94e      	bls.n	800f882 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f7e4:	7ffb      	ldrb	r3, [r7, #31]
 800f7e6:	2b2f      	cmp	r3, #47	; 0x2f
 800f7e8:	d006      	beq.n	800f7f8 <create_name+0x54>
 800f7ea:	7ffb      	ldrb	r3, [r7, #31]
 800f7ec:	2b5c      	cmp	r3, #92	; 0x5c
 800f7ee:	d110      	bne.n	800f812 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f7f0:	e002      	b.n	800f7f8 <create_name+0x54>
 800f7f2:	697b      	ldr	r3, [r7, #20]
 800f7f4:	3301      	adds	r3, #1
 800f7f6:	617b      	str	r3, [r7, #20]
 800f7f8:	68fa      	ldr	r2, [r7, #12]
 800f7fa:	697b      	ldr	r3, [r7, #20]
 800f7fc:	4413      	add	r3, r2
 800f7fe:	781b      	ldrb	r3, [r3, #0]
 800f800:	2b2f      	cmp	r3, #47	; 0x2f
 800f802:	d0f6      	beq.n	800f7f2 <create_name+0x4e>
 800f804:	68fa      	ldr	r2, [r7, #12]
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	4413      	add	r3, r2
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	2b5c      	cmp	r3, #92	; 0x5c
 800f80e:	d0f0      	beq.n	800f7f2 <create_name+0x4e>
			break;
 800f810:	e038      	b.n	800f884 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f812:	7ffb      	ldrb	r3, [r7, #31]
 800f814:	2b2e      	cmp	r3, #46	; 0x2e
 800f816:	d003      	beq.n	800f820 <create_name+0x7c>
 800f818:	693a      	ldr	r2, [r7, #16]
 800f81a:	69bb      	ldr	r3, [r7, #24]
 800f81c:	429a      	cmp	r2, r3
 800f81e:	d30c      	bcc.n	800f83a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f820:	69bb      	ldr	r3, [r7, #24]
 800f822:	2b0b      	cmp	r3, #11
 800f824:	d002      	beq.n	800f82c <create_name+0x88>
 800f826:	7ffb      	ldrb	r3, [r7, #31]
 800f828:	2b2e      	cmp	r3, #46	; 0x2e
 800f82a:	d001      	beq.n	800f830 <create_name+0x8c>
 800f82c:	2306      	movs	r3, #6
 800f82e:	e044      	b.n	800f8ba <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f830:	2308      	movs	r3, #8
 800f832:	613b      	str	r3, [r7, #16]
 800f834:	230b      	movs	r3, #11
 800f836:	61bb      	str	r3, [r7, #24]
			continue;
 800f838:	e022      	b.n	800f880 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f83a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	da04      	bge.n	800f84c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f842:	7ffb      	ldrb	r3, [r7, #31]
 800f844:	3b80      	subs	r3, #128	; 0x80
 800f846:	4a1f      	ldr	r2, [pc, #124]	; (800f8c4 <create_name+0x120>)
 800f848:	5cd3      	ldrb	r3, [r2, r3]
 800f84a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f84c:	7ffb      	ldrb	r3, [r7, #31]
 800f84e:	4619      	mov	r1, r3
 800f850:	481d      	ldr	r0, [pc, #116]	; (800f8c8 <create_name+0x124>)
 800f852:	f7fe ff59 	bl	800e708 <chk_chr>
 800f856:	4603      	mov	r3, r0
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d001      	beq.n	800f860 <create_name+0xbc>
 800f85c:	2306      	movs	r3, #6
 800f85e:	e02c      	b.n	800f8ba <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f860:	7ffb      	ldrb	r3, [r7, #31]
 800f862:	2b60      	cmp	r3, #96	; 0x60
 800f864:	d905      	bls.n	800f872 <create_name+0xce>
 800f866:	7ffb      	ldrb	r3, [r7, #31]
 800f868:	2b7a      	cmp	r3, #122	; 0x7a
 800f86a:	d802      	bhi.n	800f872 <create_name+0xce>
 800f86c:	7ffb      	ldrb	r3, [r7, #31]
 800f86e:	3b20      	subs	r3, #32
 800f870:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800f872:	693b      	ldr	r3, [r7, #16]
 800f874:	1c5a      	adds	r2, r3, #1
 800f876:	613a      	str	r2, [r7, #16]
 800f878:	68ba      	ldr	r2, [r7, #8]
 800f87a:	4413      	add	r3, r2
 800f87c:	7ffa      	ldrb	r2, [r7, #31]
 800f87e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f880:	e7a6      	b.n	800f7d0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f882:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f884:	68fa      	ldr	r2, [r7, #12]
 800f886:	697b      	ldr	r3, [r7, #20]
 800f888:	441a      	add	r2, r3
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f88e:	693b      	ldr	r3, [r7, #16]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d101      	bne.n	800f898 <create_name+0xf4>
 800f894:	2306      	movs	r3, #6
 800f896:	e010      	b.n	800f8ba <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f898:	68bb      	ldr	r3, [r7, #8]
 800f89a:	781b      	ldrb	r3, [r3, #0]
 800f89c:	2be5      	cmp	r3, #229	; 0xe5
 800f89e:	d102      	bne.n	800f8a6 <create_name+0x102>
 800f8a0:	68bb      	ldr	r3, [r7, #8]
 800f8a2:	2205      	movs	r2, #5
 800f8a4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f8a6:	7ffb      	ldrb	r3, [r7, #31]
 800f8a8:	2b20      	cmp	r3, #32
 800f8aa:	d801      	bhi.n	800f8b0 <create_name+0x10c>
 800f8ac:	2204      	movs	r2, #4
 800f8ae:	e000      	b.n	800f8b2 <create_name+0x10e>
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	330b      	adds	r3, #11
 800f8b6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f8b8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	3720      	adds	r7, #32
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd80      	pop	{r7, pc}
 800f8c2:	bf00      	nop
 800f8c4:	08017620 	.word	0x08017620
 800f8c8:	08014a04 	.word	0x08014a04

0800f8cc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b086      	sub	sp, #24
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	6078      	str	r0, [r7, #4]
 800f8d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f8da:	693b      	ldr	r3, [r7, #16]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f8e0:	e002      	b.n	800f8e8 <follow_path+0x1c>
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	3301      	adds	r3, #1
 800f8e6:	603b      	str	r3, [r7, #0]
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	781b      	ldrb	r3, [r3, #0]
 800f8ec:	2b2f      	cmp	r3, #47	; 0x2f
 800f8ee:	d0f8      	beq.n	800f8e2 <follow_path+0x16>
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	781b      	ldrb	r3, [r3, #0]
 800f8f4:	2b5c      	cmp	r3, #92	; 0x5c
 800f8f6:	d0f4      	beq.n	800f8e2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f8f8:	693b      	ldr	r3, [r7, #16]
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	781b      	ldrb	r3, [r3, #0]
 800f902:	2b1f      	cmp	r3, #31
 800f904:	d80a      	bhi.n	800f91c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	2280      	movs	r2, #128	; 0x80
 800f90a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f90e:	2100      	movs	r1, #0
 800f910:	6878      	ldr	r0, [r7, #4]
 800f912:	f7ff fc3d 	bl	800f190 <dir_sdi>
 800f916:	4603      	mov	r3, r0
 800f918:	75fb      	strb	r3, [r7, #23]
 800f91a:	e043      	b.n	800f9a4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f91c:	463b      	mov	r3, r7
 800f91e:	4619      	mov	r1, r3
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f7ff ff3f 	bl	800f7a4 <create_name>
 800f926:	4603      	mov	r3, r0
 800f928:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f92a:	7dfb      	ldrb	r3, [r7, #23]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d134      	bne.n	800f99a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f930:	6878      	ldr	r0, [r7, #4]
 800f932:	f7ff fe50 	bl	800f5d6 <dir_find>
 800f936:	4603      	mov	r3, r0
 800f938:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f940:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f942:	7dfb      	ldrb	r3, [r7, #23]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d00a      	beq.n	800f95e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f948:	7dfb      	ldrb	r3, [r7, #23]
 800f94a:	2b04      	cmp	r3, #4
 800f94c:	d127      	bne.n	800f99e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f94e:	7afb      	ldrb	r3, [r7, #11]
 800f950:	f003 0304 	and.w	r3, r3, #4
 800f954:	2b00      	cmp	r3, #0
 800f956:	d122      	bne.n	800f99e <follow_path+0xd2>
 800f958:	2305      	movs	r3, #5
 800f95a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f95c:	e01f      	b.n	800f99e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f95e:	7afb      	ldrb	r3, [r7, #11]
 800f960:	f003 0304 	and.w	r3, r3, #4
 800f964:	2b00      	cmp	r3, #0
 800f966:	d11c      	bne.n	800f9a2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f968:	693b      	ldr	r3, [r7, #16]
 800f96a:	799b      	ldrb	r3, [r3, #6]
 800f96c:	f003 0310 	and.w	r3, r3, #16
 800f970:	2b00      	cmp	r3, #0
 800f972:	d102      	bne.n	800f97a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f974:	2305      	movs	r3, #5
 800f976:	75fb      	strb	r3, [r7, #23]
 800f978:	e014      	b.n	800f9a4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	695b      	ldr	r3, [r3, #20]
 800f984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f988:	4413      	add	r3, r2
 800f98a:	4619      	mov	r1, r3
 800f98c:	68f8      	ldr	r0, [r7, #12]
 800f98e:	f7ff fd86 	bl	800f49e <ld_clust>
 800f992:	4602      	mov	r2, r0
 800f994:	693b      	ldr	r3, [r7, #16]
 800f996:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f998:	e7c0      	b.n	800f91c <follow_path+0x50>
			if (res != FR_OK) break;
 800f99a:	bf00      	nop
 800f99c:	e002      	b.n	800f9a4 <follow_path+0xd8>
				break;
 800f99e:	bf00      	nop
 800f9a0:	e000      	b.n	800f9a4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f9a2:	bf00      	nop
			}
		}
	}

	return res;
 800f9a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	3718      	adds	r7, #24
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}

0800f9ae <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f9ae:	b480      	push	{r7}
 800f9b0:	b087      	sub	sp, #28
 800f9b2:	af00      	add	r7, sp, #0
 800f9b4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f9b6:	f04f 33ff 	mov.w	r3, #4294967295
 800f9ba:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d031      	beq.n	800fa28 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	617b      	str	r3, [r7, #20]
 800f9ca:	e002      	b.n	800f9d2 <get_ldnumber+0x24>
 800f9cc:	697b      	ldr	r3, [r7, #20]
 800f9ce:	3301      	adds	r3, #1
 800f9d0:	617b      	str	r3, [r7, #20]
 800f9d2:	697b      	ldr	r3, [r7, #20]
 800f9d4:	781b      	ldrb	r3, [r3, #0]
 800f9d6:	2b20      	cmp	r3, #32
 800f9d8:	d903      	bls.n	800f9e2 <get_ldnumber+0x34>
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	781b      	ldrb	r3, [r3, #0]
 800f9de:	2b3a      	cmp	r3, #58	; 0x3a
 800f9e0:	d1f4      	bne.n	800f9cc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f9e2:	697b      	ldr	r3, [r7, #20]
 800f9e4:	781b      	ldrb	r3, [r3, #0]
 800f9e6:	2b3a      	cmp	r3, #58	; 0x3a
 800f9e8:	d11c      	bne.n	800fa24 <get_ldnumber+0x76>
			tp = *path;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	1c5a      	adds	r2, r3, #1
 800f9f4:	60fa      	str	r2, [r7, #12]
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	3b30      	subs	r3, #48	; 0x30
 800f9fa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	2b09      	cmp	r3, #9
 800fa00:	d80e      	bhi.n	800fa20 <get_ldnumber+0x72>
 800fa02:	68fa      	ldr	r2, [r7, #12]
 800fa04:	697b      	ldr	r3, [r7, #20]
 800fa06:	429a      	cmp	r2, r3
 800fa08:	d10a      	bne.n	800fa20 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	2b01      	cmp	r3, #1
 800fa0e:	d807      	bhi.n	800fa20 <get_ldnumber+0x72>
					vol = (int)i;
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fa14:	697b      	ldr	r3, [r7, #20]
 800fa16:	3301      	adds	r3, #1
 800fa18:	617b      	str	r3, [r7, #20]
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	697a      	ldr	r2, [r7, #20]
 800fa1e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fa20:	693b      	ldr	r3, [r7, #16]
 800fa22:	e002      	b.n	800fa2a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fa24:	2300      	movs	r3, #0
 800fa26:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fa28:	693b      	ldr	r3, [r7, #16]
}
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	371c      	adds	r7, #28
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa34:	4770      	bx	lr
	...

0800fa38 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b082      	sub	sp, #8
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
 800fa40:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	2200      	movs	r2, #0
 800fa46:	70da      	strb	r2, [r3, #3]
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	f04f 32ff 	mov.w	r2, #4294967295
 800fa4e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fa50:	6839      	ldr	r1, [r7, #0]
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f7ff f824 	bl	800eaa0 <move_window>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d001      	beq.n	800fa62 <check_fs+0x2a>
 800fa5e:	2304      	movs	r3, #4
 800fa60:	e038      	b.n	800fad4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	3330      	adds	r3, #48	; 0x30
 800fa66:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f7fe fd68 	bl	800e540 <ld_word>
 800fa70:	4603      	mov	r3, r0
 800fa72:	461a      	mov	r2, r3
 800fa74:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fa78:	429a      	cmp	r2, r3
 800fa7a:	d001      	beq.n	800fa80 <check_fs+0x48>
 800fa7c:	2303      	movs	r3, #3
 800fa7e:	e029      	b.n	800fad4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fa86:	2be9      	cmp	r3, #233	; 0xe9
 800fa88:	d009      	beq.n	800fa9e <check_fs+0x66>
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fa90:	2beb      	cmp	r3, #235	; 0xeb
 800fa92:	d11e      	bne.n	800fad2 <check_fs+0x9a>
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800fa9a:	2b90      	cmp	r3, #144	; 0x90
 800fa9c:	d119      	bne.n	800fad2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	3330      	adds	r3, #48	; 0x30
 800faa2:	3336      	adds	r3, #54	; 0x36
 800faa4:	4618      	mov	r0, r3
 800faa6:	f7fe fd63 	bl	800e570 <ld_dword>
 800faaa:	4603      	mov	r3, r0
 800faac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fab0:	4a0a      	ldr	r2, [pc, #40]	; (800fadc <check_fs+0xa4>)
 800fab2:	4293      	cmp	r3, r2
 800fab4:	d101      	bne.n	800faba <check_fs+0x82>
 800fab6:	2300      	movs	r3, #0
 800fab8:	e00c      	b.n	800fad4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	3330      	adds	r3, #48	; 0x30
 800fabe:	3352      	adds	r3, #82	; 0x52
 800fac0:	4618      	mov	r0, r3
 800fac2:	f7fe fd55 	bl	800e570 <ld_dword>
 800fac6:	4602      	mov	r2, r0
 800fac8:	4b05      	ldr	r3, [pc, #20]	; (800fae0 <check_fs+0xa8>)
 800faca:	429a      	cmp	r2, r3
 800facc:	d101      	bne.n	800fad2 <check_fs+0x9a>
 800face:	2300      	movs	r3, #0
 800fad0:	e000      	b.n	800fad4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fad2:	2302      	movs	r3, #2
}
 800fad4:	4618      	mov	r0, r3
 800fad6:	3708      	adds	r7, #8
 800fad8:	46bd      	mov	sp, r7
 800fada:	bd80      	pop	{r7, pc}
 800fadc:	00544146 	.word	0x00544146
 800fae0:	33544146 	.word	0x33544146

0800fae4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b096      	sub	sp, #88	; 0x58
 800fae8:	af00      	add	r7, sp, #0
 800faea:	60f8      	str	r0, [r7, #12]
 800faec:	60b9      	str	r1, [r7, #8]
 800faee:	4613      	mov	r3, r2
 800faf0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	2200      	movs	r2, #0
 800faf6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800faf8:	68f8      	ldr	r0, [r7, #12]
 800fafa:	f7ff ff58 	bl	800f9ae <get_ldnumber>
 800fafe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fb00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	da01      	bge.n	800fb0a <find_volume+0x26>
 800fb06:	230b      	movs	r3, #11
 800fb08:	e22e      	b.n	800ff68 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fb0a:	4aa8      	ldr	r2, [pc, #672]	; (800fdac <find_volume+0x2c8>)
 800fb0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb12:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d101      	bne.n	800fb1e <find_volume+0x3a>
 800fb1a:	230c      	movs	r3, #12
 800fb1c:	e224      	b.n	800ff68 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fb1e:	68bb      	ldr	r3, [r7, #8]
 800fb20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb22:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fb24:	79fb      	ldrb	r3, [r7, #7]
 800fb26:	f023 0301 	bic.w	r3, r3, #1
 800fb2a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb2e:	781b      	ldrb	r3, [r3, #0]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d01a      	beq.n	800fb6a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb36:	785b      	ldrb	r3, [r3, #1]
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7fe fc5b 	bl	800e3f4 <disk_status>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fb44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb48:	f003 0301 	and.w	r3, r3, #1
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d10c      	bne.n	800fb6a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fb50:	79fb      	ldrb	r3, [r7, #7]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d007      	beq.n	800fb66 <find_volume+0x82>
 800fb56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb5a:	f003 0304 	and.w	r3, r3, #4
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d001      	beq.n	800fb66 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fb62:	230a      	movs	r3, #10
 800fb64:	e200      	b.n	800ff68 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800fb66:	2300      	movs	r3, #0
 800fb68:	e1fe      	b.n	800ff68 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fb6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fb70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb72:	b2da      	uxtb	r2, r3
 800fb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb76:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb7a:	785b      	ldrb	r3, [r3, #1]
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f7fe fc53 	bl	800e428 <disk_initialize>
 800fb82:	4603      	mov	r3, r0
 800fb84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fb88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb8c:	f003 0301 	and.w	r3, r3, #1
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d001      	beq.n	800fb98 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fb94:	2303      	movs	r3, #3
 800fb96:	e1e7      	b.n	800ff68 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fb98:	79fb      	ldrb	r3, [r7, #7]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d007      	beq.n	800fbae <find_volume+0xca>
 800fb9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fba2:	f003 0304 	and.w	r3, r3, #4
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d001      	beq.n	800fbae <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fbaa:	230a      	movs	r3, #10
 800fbac:	e1dc      	b.n	800ff68 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fbb2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fbb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fbb6:	f7ff ff3f 	bl	800fa38 <check_fs>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fbc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fbc4:	2b02      	cmp	r3, #2
 800fbc6:	d14b      	bne.n	800fc60 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fbc8:	2300      	movs	r3, #0
 800fbca:	643b      	str	r3, [r7, #64]	; 0x40
 800fbcc:	e01f      	b.n	800fc0e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbd0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fbd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbd6:	011b      	lsls	r3, r3, #4
 800fbd8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fbdc:	4413      	add	r3, r2
 800fbde:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbe2:	3304      	adds	r3, #4
 800fbe4:	781b      	ldrb	r3, [r3, #0]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d006      	beq.n	800fbf8 <find_volume+0x114>
 800fbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbec:	3308      	adds	r3, #8
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f7fe fcbe 	bl	800e570 <ld_dword>
 800fbf4:	4602      	mov	r2, r0
 800fbf6:	e000      	b.n	800fbfa <find_volume+0x116>
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbfc:	009b      	lsls	r3, r3, #2
 800fbfe:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800fc02:	440b      	add	r3, r1
 800fc04:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fc08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc0a:	3301      	adds	r3, #1
 800fc0c:	643b      	str	r3, [r7, #64]	; 0x40
 800fc0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc10:	2b03      	cmp	r3, #3
 800fc12:	d9dc      	bls.n	800fbce <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fc14:	2300      	movs	r3, #0
 800fc16:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fc18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d002      	beq.n	800fc24 <find_volume+0x140>
 800fc1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc20:	3b01      	subs	r3, #1
 800fc22:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fc24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc26:	009b      	lsls	r3, r3, #2
 800fc28:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800fc2c:	4413      	add	r3, r2
 800fc2e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fc32:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fc34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d005      	beq.n	800fc46 <find_volume+0x162>
 800fc3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fc3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fc3e:	f7ff fefb 	bl	800fa38 <check_fs>
 800fc42:	4603      	mov	r3, r0
 800fc44:	e000      	b.n	800fc48 <find_volume+0x164>
 800fc46:	2303      	movs	r3, #3
 800fc48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fc4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc50:	2b01      	cmp	r3, #1
 800fc52:	d905      	bls.n	800fc60 <find_volume+0x17c>
 800fc54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc56:	3301      	adds	r3, #1
 800fc58:	643b      	str	r3, [r7, #64]	; 0x40
 800fc5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc5c:	2b03      	cmp	r3, #3
 800fc5e:	d9e1      	bls.n	800fc24 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fc60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc64:	2b04      	cmp	r3, #4
 800fc66:	d101      	bne.n	800fc6c <find_volume+0x188>
 800fc68:	2301      	movs	r3, #1
 800fc6a:	e17d      	b.n	800ff68 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fc6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	d901      	bls.n	800fc78 <find_volume+0x194>
 800fc74:	230d      	movs	r3, #13
 800fc76:	e177      	b.n	800ff68 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc7a:	3330      	adds	r3, #48	; 0x30
 800fc7c:	330b      	adds	r3, #11
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7fe fc5e 	bl	800e540 <ld_word>
 800fc84:	4603      	mov	r3, r0
 800fc86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc8a:	d001      	beq.n	800fc90 <find_volume+0x1ac>
 800fc8c:	230d      	movs	r3, #13
 800fc8e:	e16b      	b.n	800ff68 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc92:	3330      	adds	r3, #48	; 0x30
 800fc94:	3316      	adds	r3, #22
 800fc96:	4618      	mov	r0, r3
 800fc98:	f7fe fc52 	bl	800e540 <ld_word>
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d106      	bne.n	800fcb4 <find_volume+0x1d0>
 800fca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fca8:	3330      	adds	r3, #48	; 0x30
 800fcaa:	3324      	adds	r3, #36	; 0x24
 800fcac:	4618      	mov	r0, r3
 800fcae:	f7fe fc5f 	bl	800e570 <ld_dword>
 800fcb2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800fcb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fcb8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fcba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcbc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800fcc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fcc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc6:	789b      	ldrb	r3, [r3, #2]
 800fcc8:	2b01      	cmp	r3, #1
 800fcca:	d005      	beq.n	800fcd8 <find_volume+0x1f4>
 800fccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcce:	789b      	ldrb	r3, [r3, #2]
 800fcd0:	2b02      	cmp	r3, #2
 800fcd2:	d001      	beq.n	800fcd8 <find_volume+0x1f4>
 800fcd4:	230d      	movs	r3, #13
 800fcd6:	e147      	b.n	800ff68 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fcd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcda:	789b      	ldrb	r3, [r3, #2]
 800fcdc:	461a      	mov	r2, r3
 800fcde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fce0:	fb02 f303 	mul.w	r3, r2, r3
 800fce4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fcec:	b29a      	uxth	r2, r3
 800fcee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcf0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fcf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcf4:	895b      	ldrh	r3, [r3, #10]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d008      	beq.n	800fd0c <find_volume+0x228>
 800fcfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcfc:	895b      	ldrh	r3, [r3, #10]
 800fcfe:	461a      	mov	r2, r3
 800fd00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd02:	895b      	ldrh	r3, [r3, #10]
 800fd04:	3b01      	subs	r3, #1
 800fd06:	4013      	ands	r3, r2
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d001      	beq.n	800fd10 <find_volume+0x22c>
 800fd0c:	230d      	movs	r3, #13
 800fd0e:	e12b      	b.n	800ff68 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd12:	3330      	adds	r3, #48	; 0x30
 800fd14:	3311      	adds	r3, #17
 800fd16:	4618      	mov	r0, r3
 800fd18:	f7fe fc12 	bl	800e540 <ld_word>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	461a      	mov	r2, r3
 800fd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd22:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd26:	891b      	ldrh	r3, [r3, #8]
 800fd28:	f003 030f 	and.w	r3, r3, #15
 800fd2c:	b29b      	uxth	r3, r3
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d001      	beq.n	800fd36 <find_volume+0x252>
 800fd32:	230d      	movs	r3, #13
 800fd34:	e118      	b.n	800ff68 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fd36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd38:	3330      	adds	r3, #48	; 0x30
 800fd3a:	3313      	adds	r3, #19
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f7fe fbff 	bl	800e540 <ld_word>
 800fd42:	4603      	mov	r3, r0
 800fd44:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fd46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d106      	bne.n	800fd5a <find_volume+0x276>
 800fd4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd4e:	3330      	adds	r3, #48	; 0x30
 800fd50:	3320      	adds	r3, #32
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7fe fc0c 	bl	800e570 <ld_dword>
 800fd58:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd5c:	3330      	adds	r3, #48	; 0x30
 800fd5e:	330e      	adds	r3, #14
 800fd60:	4618      	mov	r0, r3
 800fd62:	f7fe fbed 	bl	800e540 <ld_word>
 800fd66:	4603      	mov	r3, r0
 800fd68:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fd6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d101      	bne.n	800fd74 <find_volume+0x290>
 800fd70:	230d      	movs	r3, #13
 800fd72:	e0f9      	b.n	800ff68 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fd74:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fd76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd78:	4413      	add	r3, r2
 800fd7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd7c:	8912      	ldrh	r2, [r2, #8]
 800fd7e:	0912      	lsrs	r2, r2, #4
 800fd80:	b292      	uxth	r2, r2
 800fd82:	4413      	add	r3, r2
 800fd84:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fd86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd8a:	429a      	cmp	r2, r3
 800fd8c:	d201      	bcs.n	800fd92 <find_volume+0x2ae>
 800fd8e:	230d      	movs	r3, #13
 800fd90:	e0ea      	b.n	800ff68 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fd92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd96:	1ad3      	subs	r3, r2, r3
 800fd98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd9a:	8952      	ldrh	r2, [r2, #10]
 800fd9c:	fbb3 f3f2 	udiv	r3, r3, r2
 800fda0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d103      	bne.n	800fdb0 <find_volume+0x2cc>
 800fda8:	230d      	movs	r3, #13
 800fdaa:	e0dd      	b.n	800ff68 <find_volume+0x484>
 800fdac:	20000238 	.word	0x20000238
		fmt = FS_FAT32;
 800fdb0:	2303      	movs	r3, #3
 800fdb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fdb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdb8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	d802      	bhi.n	800fdc6 <find_volume+0x2e2>
 800fdc0:	2302      	movs	r3, #2
 800fdc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fdc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdc8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fdcc:	4293      	cmp	r3, r2
 800fdce:	d802      	bhi.n	800fdd6 <find_volume+0x2f2>
 800fdd0:	2301      	movs	r3, #1
 800fdd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fdd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd8:	1c9a      	adds	r2, r3, #2
 800fdda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fddc:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800fdde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fde2:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fde4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fde6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fde8:	441a      	add	r2, r3
 800fdea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdec:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800fdee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdf2:	441a      	add	r2, r3
 800fdf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf6:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800fdf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fdfc:	2b03      	cmp	r3, #3
 800fdfe:	d11e      	bne.n	800fe3e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fe00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe02:	3330      	adds	r3, #48	; 0x30
 800fe04:	332a      	adds	r3, #42	; 0x2a
 800fe06:	4618      	mov	r0, r3
 800fe08:	f7fe fb9a 	bl	800e540 <ld_word>
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d001      	beq.n	800fe16 <find_volume+0x332>
 800fe12:	230d      	movs	r3, #13
 800fe14:	e0a8      	b.n	800ff68 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fe16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe18:	891b      	ldrh	r3, [r3, #8]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d001      	beq.n	800fe22 <find_volume+0x33e>
 800fe1e:	230d      	movs	r3, #13
 800fe20:	e0a2      	b.n	800ff68 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fe22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe24:	3330      	adds	r3, #48	; 0x30
 800fe26:	332c      	adds	r3, #44	; 0x2c
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f7fe fba1 	bl	800e570 <ld_dword>
 800fe2e:	4602      	mov	r2, r0
 800fe30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe32:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fe34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe36:	695b      	ldr	r3, [r3, #20]
 800fe38:	009b      	lsls	r3, r3, #2
 800fe3a:	647b      	str	r3, [r7, #68]	; 0x44
 800fe3c:	e01f      	b.n	800fe7e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fe3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe40:	891b      	ldrh	r3, [r3, #8]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d101      	bne.n	800fe4a <find_volume+0x366>
 800fe46:	230d      	movs	r3, #13
 800fe48:	e08e      	b.n	800ff68 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fe4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe4c:	6a1a      	ldr	r2, [r3, #32]
 800fe4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe50:	441a      	add	r2, r3
 800fe52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe54:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fe56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe5a:	2b02      	cmp	r3, #2
 800fe5c:	d103      	bne.n	800fe66 <find_volume+0x382>
 800fe5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe60:	695b      	ldr	r3, [r3, #20]
 800fe62:	005b      	lsls	r3, r3, #1
 800fe64:	e00a      	b.n	800fe7c <find_volume+0x398>
 800fe66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe68:	695a      	ldr	r2, [r3, #20]
 800fe6a:	4613      	mov	r3, r2
 800fe6c:	005b      	lsls	r3, r3, #1
 800fe6e:	4413      	add	r3, r2
 800fe70:	085a      	lsrs	r2, r3, #1
 800fe72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe74:	695b      	ldr	r3, [r3, #20]
 800fe76:	f003 0301 	and.w	r3, r3, #1
 800fe7a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fe7c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fe7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe80:	699a      	ldr	r2, [r3, #24]
 800fe82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe84:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800fe88:	0a5b      	lsrs	r3, r3, #9
 800fe8a:	429a      	cmp	r2, r3
 800fe8c:	d201      	bcs.n	800fe92 <find_volume+0x3ae>
 800fe8e:	230d      	movs	r3, #13
 800fe90:	e06a      	b.n	800ff68 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fe92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe94:	f04f 32ff 	mov.w	r2, #4294967295
 800fe98:	611a      	str	r2, [r3, #16]
 800fe9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe9c:	691a      	ldr	r2, [r3, #16]
 800fe9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea0:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800fea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea4:	2280      	movs	r2, #128	; 0x80
 800fea6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fea8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800feac:	2b03      	cmp	r3, #3
 800feae:	d149      	bne.n	800ff44 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800feb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb2:	3330      	adds	r3, #48	; 0x30
 800feb4:	3330      	adds	r3, #48	; 0x30
 800feb6:	4618      	mov	r0, r3
 800feb8:	f7fe fb42 	bl	800e540 <ld_word>
 800febc:	4603      	mov	r3, r0
 800febe:	2b01      	cmp	r3, #1
 800fec0:	d140      	bne.n	800ff44 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fec4:	3301      	adds	r3, #1
 800fec6:	4619      	mov	r1, r3
 800fec8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800feca:	f7fe fde9 	bl	800eaa0 <move_window>
 800fece:	4603      	mov	r3, r0
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d137      	bne.n	800ff44 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800fed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed6:	2200      	movs	r2, #0
 800fed8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800feda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fedc:	3330      	adds	r3, #48	; 0x30
 800fede:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fee2:	4618      	mov	r0, r3
 800fee4:	f7fe fb2c 	bl	800e540 <ld_word>
 800fee8:	4603      	mov	r3, r0
 800feea:	461a      	mov	r2, r3
 800feec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fef0:	429a      	cmp	r2, r3
 800fef2:	d127      	bne.n	800ff44 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef6:	3330      	adds	r3, #48	; 0x30
 800fef8:	4618      	mov	r0, r3
 800fefa:	f7fe fb39 	bl	800e570 <ld_dword>
 800fefe:	4602      	mov	r2, r0
 800ff00:	4b1b      	ldr	r3, [pc, #108]	; (800ff70 <find_volume+0x48c>)
 800ff02:	429a      	cmp	r2, r3
 800ff04:	d11e      	bne.n	800ff44 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ff06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff08:	3330      	adds	r3, #48	; 0x30
 800ff0a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ff0e:	4618      	mov	r0, r3
 800ff10:	f7fe fb2e 	bl	800e570 <ld_dword>
 800ff14:	4602      	mov	r2, r0
 800ff16:	4b17      	ldr	r3, [pc, #92]	; (800ff74 <find_volume+0x490>)
 800ff18:	429a      	cmp	r2, r3
 800ff1a:	d113      	bne.n	800ff44 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ff1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff1e:	3330      	adds	r3, #48	; 0x30
 800ff20:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ff24:	4618      	mov	r0, r3
 800ff26:	f7fe fb23 	bl	800e570 <ld_dword>
 800ff2a:	4602      	mov	r2, r0
 800ff2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff2e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ff30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff32:	3330      	adds	r3, #48	; 0x30
 800ff34:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f7fe fb19 	bl	800e570 <ld_dword>
 800ff3e:	4602      	mov	r2, r0
 800ff40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff42:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ff44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff46:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ff4a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ff4c:	4b0a      	ldr	r3, [pc, #40]	; (800ff78 <find_volume+0x494>)
 800ff4e:	881b      	ldrh	r3, [r3, #0]
 800ff50:	3301      	adds	r3, #1
 800ff52:	b29a      	uxth	r2, r3
 800ff54:	4b08      	ldr	r3, [pc, #32]	; (800ff78 <find_volume+0x494>)
 800ff56:	801a      	strh	r2, [r3, #0]
 800ff58:	4b07      	ldr	r3, [pc, #28]	; (800ff78 <find_volume+0x494>)
 800ff5a:	881a      	ldrh	r2, [r3, #0]
 800ff5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff5e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ff60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ff62:	f7fe fd35 	bl	800e9d0 <clear_lock>
#endif
	return FR_OK;
 800ff66:	2300      	movs	r3, #0
}
 800ff68:	4618      	mov	r0, r3
 800ff6a:	3758      	adds	r7, #88	; 0x58
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}
 800ff70:	41615252 	.word	0x41615252
 800ff74:	61417272 	.word	0x61417272
 800ff78:	20000240 	.word	0x20000240

0800ff7c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b084      	sub	sp, #16
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
 800ff84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ff86:	2309      	movs	r3, #9
 800ff88:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d01c      	beq.n	800ffca <validate+0x4e>
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d018      	beq.n	800ffca <validate+0x4e>
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	781b      	ldrb	r3, [r3, #0]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d013      	beq.n	800ffca <validate+0x4e>
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	889a      	ldrh	r2, [r3, #4]
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	88db      	ldrh	r3, [r3, #6]
 800ffac:	429a      	cmp	r2, r3
 800ffae:	d10c      	bne.n	800ffca <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	785b      	ldrb	r3, [r3, #1]
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f7fe fa1c 	bl	800e3f4 <disk_status>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	f003 0301 	and.w	r3, r3, #1
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d101      	bne.n	800ffca <validate+0x4e>
			res = FR_OK;
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ffca:	7bfb      	ldrb	r3, [r7, #15]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d102      	bne.n	800ffd6 <validate+0x5a>
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	e000      	b.n	800ffd8 <validate+0x5c>
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	683a      	ldr	r2, [r7, #0]
 800ffda:	6013      	str	r3, [r2, #0]
	return res;
 800ffdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffde:	4618      	mov	r0, r3
 800ffe0:	3710      	adds	r7, #16
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bd80      	pop	{r7, pc}
	...

0800ffe8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b088      	sub	sp, #32
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	60f8      	str	r0, [r7, #12]
 800fff0:	60b9      	str	r1, [r7, #8]
 800fff2:	4613      	mov	r3, r2
 800fff4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fff6:	68bb      	ldr	r3, [r7, #8]
 800fff8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fffa:	f107 0310 	add.w	r3, r7, #16
 800fffe:	4618      	mov	r0, r3
 8010000:	f7ff fcd5 	bl	800f9ae <get_ldnumber>
 8010004:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010006:	69fb      	ldr	r3, [r7, #28]
 8010008:	2b00      	cmp	r3, #0
 801000a:	da01      	bge.n	8010010 <f_mount+0x28>
 801000c:	230b      	movs	r3, #11
 801000e:	e02b      	b.n	8010068 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010010:	4a17      	ldr	r2, [pc, #92]	; (8010070 <f_mount+0x88>)
 8010012:	69fb      	ldr	r3, [r7, #28]
 8010014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010018:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801001a:	69bb      	ldr	r3, [r7, #24]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d005      	beq.n	801002c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010020:	69b8      	ldr	r0, [r7, #24]
 8010022:	f7fe fcd5 	bl	800e9d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010026:	69bb      	ldr	r3, [r7, #24]
 8010028:	2200      	movs	r2, #0
 801002a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d002      	beq.n	8010038 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	2200      	movs	r2, #0
 8010036:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010038:	68fa      	ldr	r2, [r7, #12]
 801003a:	490d      	ldr	r1, [pc, #52]	; (8010070 <f_mount+0x88>)
 801003c:	69fb      	ldr	r3, [r7, #28]
 801003e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d002      	beq.n	801004e <f_mount+0x66>
 8010048:	79fb      	ldrb	r3, [r7, #7]
 801004a:	2b01      	cmp	r3, #1
 801004c:	d001      	beq.n	8010052 <f_mount+0x6a>
 801004e:	2300      	movs	r3, #0
 8010050:	e00a      	b.n	8010068 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010052:	f107 010c 	add.w	r1, r7, #12
 8010056:	f107 0308 	add.w	r3, r7, #8
 801005a:	2200      	movs	r2, #0
 801005c:	4618      	mov	r0, r3
 801005e:	f7ff fd41 	bl	800fae4 <find_volume>
 8010062:	4603      	mov	r3, r0
 8010064:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010066:	7dfb      	ldrb	r3, [r7, #23]
}
 8010068:	4618      	mov	r0, r3
 801006a:	3720      	adds	r7, #32
 801006c:	46bd      	mov	sp, r7
 801006e:	bd80      	pop	{r7, pc}
 8010070:	20000238 	.word	0x20000238

08010074 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b098      	sub	sp, #96	; 0x60
 8010078:	af00      	add	r7, sp, #0
 801007a:	60f8      	str	r0, [r7, #12]
 801007c:	60b9      	str	r1, [r7, #8]
 801007e:	4613      	mov	r3, r2
 8010080:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d101      	bne.n	801008c <f_open+0x18>
 8010088:	2309      	movs	r3, #9
 801008a:	e1ad      	b.n	80103e8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801008c:	79fb      	ldrb	r3, [r7, #7]
 801008e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010092:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010094:	79fa      	ldrb	r2, [r7, #7]
 8010096:	f107 0110 	add.w	r1, r7, #16
 801009a:	f107 0308 	add.w	r3, r7, #8
 801009e:	4618      	mov	r0, r3
 80100a0:	f7ff fd20 	bl	800fae4 <find_volume>
 80100a4:	4603      	mov	r3, r0
 80100a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80100aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	f040 8191 	bne.w	80103d6 <f_open+0x362>
		dj.obj.fs = fs;
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80100b8:	68ba      	ldr	r2, [r7, #8]
 80100ba:	f107 0314 	add.w	r3, r7, #20
 80100be:	4611      	mov	r1, r2
 80100c0:	4618      	mov	r0, r3
 80100c2:	f7ff fc03 	bl	800f8cc <follow_path>
 80100c6:	4603      	mov	r3, r0
 80100c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80100cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d11a      	bne.n	801010a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80100d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80100d8:	b25b      	sxtb	r3, r3
 80100da:	2b00      	cmp	r3, #0
 80100dc:	da03      	bge.n	80100e6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80100de:	2306      	movs	r3, #6
 80100e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80100e4:	e011      	b.n	801010a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80100e6:	79fb      	ldrb	r3, [r7, #7]
 80100e8:	f023 0301 	bic.w	r3, r3, #1
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	bf14      	ite	ne
 80100f0:	2301      	movne	r3, #1
 80100f2:	2300      	moveq	r3, #0
 80100f4:	b2db      	uxtb	r3, r3
 80100f6:	461a      	mov	r2, r3
 80100f8:	f107 0314 	add.w	r3, r7, #20
 80100fc:	4611      	mov	r1, r2
 80100fe:	4618      	mov	r0, r3
 8010100:	f7fe fb1e 	bl	800e740 <chk_lock>
 8010104:	4603      	mov	r3, r0
 8010106:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801010a:	79fb      	ldrb	r3, [r7, #7]
 801010c:	f003 031c 	and.w	r3, r3, #28
 8010110:	2b00      	cmp	r3, #0
 8010112:	d07f      	beq.n	8010214 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010114:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010118:	2b00      	cmp	r3, #0
 801011a:	d017      	beq.n	801014c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801011c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010120:	2b04      	cmp	r3, #4
 8010122:	d10e      	bne.n	8010142 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010124:	f7fe fb68 	bl	800e7f8 <enq_lock>
 8010128:	4603      	mov	r3, r0
 801012a:	2b00      	cmp	r3, #0
 801012c:	d006      	beq.n	801013c <f_open+0xc8>
 801012e:	f107 0314 	add.w	r3, r7, #20
 8010132:	4618      	mov	r0, r3
 8010134:	f7ff faa4 	bl	800f680 <dir_register>
 8010138:	4603      	mov	r3, r0
 801013a:	e000      	b.n	801013e <f_open+0xca>
 801013c:	2312      	movs	r3, #18
 801013e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010142:	79fb      	ldrb	r3, [r7, #7]
 8010144:	f043 0308 	orr.w	r3, r3, #8
 8010148:	71fb      	strb	r3, [r7, #7]
 801014a:	e010      	b.n	801016e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801014c:	7ebb      	ldrb	r3, [r7, #26]
 801014e:	f003 0311 	and.w	r3, r3, #17
 8010152:	2b00      	cmp	r3, #0
 8010154:	d003      	beq.n	801015e <f_open+0xea>
					res = FR_DENIED;
 8010156:	2307      	movs	r3, #7
 8010158:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801015c:	e007      	b.n	801016e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801015e:	79fb      	ldrb	r3, [r7, #7]
 8010160:	f003 0304 	and.w	r3, r3, #4
 8010164:	2b00      	cmp	r3, #0
 8010166:	d002      	beq.n	801016e <f_open+0xfa>
 8010168:	2308      	movs	r3, #8
 801016a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801016e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010172:	2b00      	cmp	r3, #0
 8010174:	d168      	bne.n	8010248 <f_open+0x1d4>
 8010176:	79fb      	ldrb	r3, [r7, #7]
 8010178:	f003 0308 	and.w	r3, r3, #8
 801017c:	2b00      	cmp	r3, #0
 801017e:	d063      	beq.n	8010248 <f_open+0x1d4>
				dw = GET_FATTIME();
 8010180:	f7fe f9d6 	bl	800e530 <get_fattime>
 8010184:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010188:	330e      	adds	r3, #14
 801018a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801018c:	4618      	mov	r0, r3
 801018e:	f7fe fa2d 	bl	800e5ec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010194:	3316      	adds	r3, #22
 8010196:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010198:	4618      	mov	r0, r3
 801019a:	f7fe fa27 	bl	800e5ec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801019e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101a0:	330b      	adds	r3, #11
 80101a2:	2220      	movs	r2, #32
 80101a4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80101a6:	693b      	ldr	r3, [r7, #16]
 80101a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101aa:	4611      	mov	r1, r2
 80101ac:	4618      	mov	r0, r3
 80101ae:	f7ff f976 	bl	800f49e <ld_clust>
 80101b2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80101b4:	693b      	ldr	r3, [r7, #16]
 80101b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80101b8:	2200      	movs	r2, #0
 80101ba:	4618      	mov	r0, r3
 80101bc:	f7ff f98e 	bl	800f4dc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80101c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101c2:	331c      	adds	r3, #28
 80101c4:	2100      	movs	r1, #0
 80101c6:	4618      	mov	r0, r3
 80101c8:	f7fe fa10 	bl	800e5ec <st_dword>
					fs->wflag = 1;
 80101cc:	693b      	ldr	r3, [r7, #16]
 80101ce:	2201      	movs	r2, #1
 80101d0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80101d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d037      	beq.n	8010248 <f_open+0x1d4>
						dw = fs->winsect;
 80101d8:	693b      	ldr	r3, [r7, #16]
 80101da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101dc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80101de:	f107 0314 	add.w	r3, r7, #20
 80101e2:	2200      	movs	r2, #0
 80101e4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80101e6:	4618      	mov	r0, r3
 80101e8:	f7fe fea1 	bl	800ef2e <remove_chain>
 80101ec:	4603      	mov	r3, r0
 80101ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80101f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d126      	bne.n	8010248 <f_open+0x1d4>
							res = move_window(fs, dw);
 80101fa:	693b      	ldr	r3, [r7, #16]
 80101fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80101fe:	4618      	mov	r0, r3
 8010200:	f7fe fc4e 	bl	800eaa0 <move_window>
 8010204:	4603      	mov	r3, r0
 8010206:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801020a:	693b      	ldr	r3, [r7, #16]
 801020c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801020e:	3a01      	subs	r2, #1
 8010210:	60da      	str	r2, [r3, #12]
 8010212:	e019      	b.n	8010248 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010214:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010218:	2b00      	cmp	r3, #0
 801021a:	d115      	bne.n	8010248 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801021c:	7ebb      	ldrb	r3, [r7, #26]
 801021e:	f003 0310 	and.w	r3, r3, #16
 8010222:	2b00      	cmp	r3, #0
 8010224:	d003      	beq.n	801022e <f_open+0x1ba>
					res = FR_NO_FILE;
 8010226:	2304      	movs	r3, #4
 8010228:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801022c:	e00c      	b.n	8010248 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801022e:	79fb      	ldrb	r3, [r7, #7]
 8010230:	f003 0302 	and.w	r3, r3, #2
 8010234:	2b00      	cmp	r3, #0
 8010236:	d007      	beq.n	8010248 <f_open+0x1d4>
 8010238:	7ebb      	ldrb	r3, [r7, #26]
 801023a:	f003 0301 	and.w	r3, r3, #1
 801023e:	2b00      	cmp	r3, #0
 8010240:	d002      	beq.n	8010248 <f_open+0x1d4>
						res = FR_DENIED;
 8010242:	2307      	movs	r3, #7
 8010244:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010248:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801024c:	2b00      	cmp	r3, #0
 801024e:	d128      	bne.n	80102a2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010250:	79fb      	ldrb	r3, [r7, #7]
 8010252:	f003 0308 	and.w	r3, r3, #8
 8010256:	2b00      	cmp	r3, #0
 8010258:	d003      	beq.n	8010262 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801025a:	79fb      	ldrb	r3, [r7, #7]
 801025c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010260:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010262:	693b      	ldr	r3, [r7, #16]
 8010264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801026a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010270:	79fb      	ldrb	r3, [r7, #7]
 8010272:	f023 0301 	bic.w	r3, r3, #1
 8010276:	2b00      	cmp	r3, #0
 8010278:	bf14      	ite	ne
 801027a:	2301      	movne	r3, #1
 801027c:	2300      	moveq	r3, #0
 801027e:	b2db      	uxtb	r3, r3
 8010280:	461a      	mov	r2, r3
 8010282:	f107 0314 	add.w	r3, r7, #20
 8010286:	4611      	mov	r1, r2
 8010288:	4618      	mov	r0, r3
 801028a:	f7fe fad7 	bl	800e83c <inc_lock>
 801028e:	4602      	mov	r2, r0
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	691b      	ldr	r3, [r3, #16]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d102      	bne.n	80102a2 <f_open+0x22e>
 801029c:	2302      	movs	r3, #2
 801029e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80102a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	f040 8095 	bne.w	80103d6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80102ac:	693b      	ldr	r3, [r7, #16]
 80102ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102b0:	4611      	mov	r1, r2
 80102b2:	4618      	mov	r0, r3
 80102b4:	f7ff f8f3 	bl	800f49e <ld_clust>
 80102b8:	4602      	mov	r2, r0
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80102be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102c0:	331c      	adds	r3, #28
 80102c2:	4618      	mov	r0, r3
 80102c4:	f7fe f954 	bl	800e570 <ld_dword>
 80102c8:	4602      	mov	r2, r0
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	2200      	movs	r2, #0
 80102d2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80102d4:	693a      	ldr	r2, [r7, #16]
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80102da:	693b      	ldr	r3, [r7, #16]
 80102dc:	88da      	ldrh	r2, [r3, #6]
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	79fa      	ldrb	r2, [r7, #7]
 80102e6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	2200      	movs	r2, #0
 80102ec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	2200      	movs	r2, #0
 80102f2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	2200      	movs	r2, #0
 80102f8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	3330      	adds	r3, #48	; 0x30
 80102fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010302:	2100      	movs	r1, #0
 8010304:	4618      	mov	r0, r3
 8010306:	f7fe f9be 	bl	800e686 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801030a:	79fb      	ldrb	r3, [r7, #7]
 801030c:	f003 0320 	and.w	r3, r3, #32
 8010310:	2b00      	cmp	r3, #0
 8010312:	d060      	beq.n	80103d6 <f_open+0x362>
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	68db      	ldr	r3, [r3, #12]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d05c      	beq.n	80103d6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	68da      	ldr	r2, [r3, #12]
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010324:	693b      	ldr	r3, [r7, #16]
 8010326:	895b      	ldrh	r3, [r3, #10]
 8010328:	025b      	lsls	r3, r3, #9
 801032a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	689b      	ldr	r3, [r3, #8]
 8010330:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	68db      	ldr	r3, [r3, #12]
 8010336:	657b      	str	r3, [r7, #84]	; 0x54
 8010338:	e016      	b.n	8010368 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801033e:	4618      	mov	r0, r3
 8010340:	f7fe fc69 	bl	800ec16 <get_fat>
 8010344:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8010346:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010348:	2b01      	cmp	r3, #1
 801034a:	d802      	bhi.n	8010352 <f_open+0x2de>
 801034c:	2302      	movs	r3, #2
 801034e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010352:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010358:	d102      	bne.n	8010360 <f_open+0x2ec>
 801035a:	2301      	movs	r3, #1
 801035c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010360:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010364:	1ad3      	subs	r3, r2, r3
 8010366:	657b      	str	r3, [r7, #84]	; 0x54
 8010368:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801036c:	2b00      	cmp	r3, #0
 801036e:	d103      	bne.n	8010378 <f_open+0x304>
 8010370:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010374:	429a      	cmp	r2, r3
 8010376:	d8e0      	bhi.n	801033a <f_open+0x2c6>
				}
				fp->clust = clst;
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801037c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801037e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010382:	2b00      	cmp	r3, #0
 8010384:	d127      	bne.n	80103d6 <f_open+0x362>
 8010386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801038c:	2b00      	cmp	r3, #0
 801038e:	d022      	beq.n	80103d6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010390:	693b      	ldr	r3, [r7, #16]
 8010392:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010394:	4618      	mov	r0, r3
 8010396:	f7fe fc1f 	bl	800ebd8 <clust2sect>
 801039a:	6478      	str	r0, [r7, #68]	; 0x44
 801039c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d103      	bne.n	80103aa <f_open+0x336>
						res = FR_INT_ERR;
 80103a2:	2302      	movs	r3, #2
 80103a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80103a8:	e015      	b.n	80103d6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80103aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103ac:	0a5a      	lsrs	r2, r3, #9
 80103ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103b0:	441a      	add	r2, r3
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80103b6:	693b      	ldr	r3, [r7, #16]
 80103b8:	7858      	ldrb	r0, [r3, #1]
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	6a1a      	ldr	r2, [r3, #32]
 80103c4:	2301      	movs	r3, #1
 80103c6:	f7fe f855 	bl	800e474 <disk_read>
 80103ca:	4603      	mov	r3, r0
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d002      	beq.n	80103d6 <f_open+0x362>
 80103d0:	2301      	movs	r3, #1
 80103d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80103d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d002      	beq.n	80103e4 <f_open+0x370>
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	2200      	movs	r2, #0
 80103e2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80103e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80103e8:	4618      	mov	r0, r3
 80103ea:	3760      	adds	r7, #96	; 0x60
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}

080103f0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b08e      	sub	sp, #56	; 0x38
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	60f8      	str	r0, [r7, #12]
 80103f8:	60b9      	str	r1, [r7, #8]
 80103fa:	607a      	str	r2, [r7, #4]
 80103fc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80103fe:	68bb      	ldr	r3, [r7, #8]
 8010400:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	2200      	movs	r2, #0
 8010406:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	f107 0214 	add.w	r2, r7, #20
 801040e:	4611      	mov	r1, r2
 8010410:	4618      	mov	r0, r3
 8010412:	f7ff fdb3 	bl	800ff7c <validate>
 8010416:	4603      	mov	r3, r0
 8010418:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801041c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010420:	2b00      	cmp	r3, #0
 8010422:	d107      	bne.n	8010434 <f_read+0x44>
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	7d5b      	ldrb	r3, [r3, #21]
 8010428:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801042c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010430:	2b00      	cmp	r3, #0
 8010432:	d002      	beq.n	801043a <f_read+0x4a>
 8010434:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010438:	e115      	b.n	8010666 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	7d1b      	ldrb	r3, [r3, #20]
 801043e:	f003 0301 	and.w	r3, r3, #1
 8010442:	2b00      	cmp	r3, #0
 8010444:	d101      	bne.n	801044a <f_read+0x5a>
 8010446:	2307      	movs	r3, #7
 8010448:	e10d      	b.n	8010666 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	68da      	ldr	r2, [r3, #12]
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	699b      	ldr	r3, [r3, #24]
 8010452:	1ad3      	subs	r3, r2, r3
 8010454:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8010456:	687a      	ldr	r2, [r7, #4]
 8010458:	6a3b      	ldr	r3, [r7, #32]
 801045a:	429a      	cmp	r2, r3
 801045c:	f240 80fe 	bls.w	801065c <f_read+0x26c>
 8010460:	6a3b      	ldr	r3, [r7, #32]
 8010462:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010464:	e0fa      	b.n	801065c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	699b      	ldr	r3, [r3, #24]
 801046a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801046e:	2b00      	cmp	r3, #0
 8010470:	f040 80c6 	bne.w	8010600 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	699b      	ldr	r3, [r3, #24]
 8010478:	0a5b      	lsrs	r3, r3, #9
 801047a:	697a      	ldr	r2, [r7, #20]
 801047c:	8952      	ldrh	r2, [r2, #10]
 801047e:	3a01      	subs	r2, #1
 8010480:	4013      	ands	r3, r2
 8010482:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8010484:	69fb      	ldr	r3, [r7, #28]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d12f      	bne.n	80104ea <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	699b      	ldr	r3, [r3, #24]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d103      	bne.n	801049a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	689b      	ldr	r3, [r3, #8]
 8010496:	633b      	str	r3, [r7, #48]	; 0x30
 8010498:	e013      	b.n	80104c2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d007      	beq.n	80104b2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	699b      	ldr	r3, [r3, #24]
 80104a6:	4619      	mov	r1, r3
 80104a8:	68f8      	ldr	r0, [r7, #12]
 80104aa:	f7fe fe3d 	bl	800f128 <clmt_clust>
 80104ae:	6338      	str	r0, [r7, #48]	; 0x30
 80104b0:	e007      	b.n	80104c2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80104b2:	68fa      	ldr	r2, [r7, #12]
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	69db      	ldr	r3, [r3, #28]
 80104b8:	4619      	mov	r1, r3
 80104ba:	4610      	mov	r0, r2
 80104bc:	f7fe fbab 	bl	800ec16 <get_fat>
 80104c0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80104c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104c4:	2b01      	cmp	r3, #1
 80104c6:	d804      	bhi.n	80104d2 <f_read+0xe2>
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	2202      	movs	r2, #2
 80104cc:	755a      	strb	r2, [r3, #21]
 80104ce:	2302      	movs	r3, #2
 80104d0:	e0c9      	b.n	8010666 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80104d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104d8:	d104      	bne.n	80104e4 <f_read+0xf4>
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	2201      	movs	r2, #1
 80104de:	755a      	strb	r2, [r3, #21]
 80104e0:	2301      	movs	r3, #1
 80104e2:	e0c0      	b.n	8010666 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80104e8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80104ea:	697a      	ldr	r2, [r7, #20]
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	69db      	ldr	r3, [r3, #28]
 80104f0:	4619      	mov	r1, r3
 80104f2:	4610      	mov	r0, r2
 80104f4:	f7fe fb70 	bl	800ebd8 <clust2sect>
 80104f8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80104fa:	69bb      	ldr	r3, [r7, #24]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d104      	bne.n	801050a <f_read+0x11a>
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	2202      	movs	r2, #2
 8010504:	755a      	strb	r2, [r3, #21]
 8010506:	2302      	movs	r3, #2
 8010508:	e0ad      	b.n	8010666 <f_read+0x276>
			sect += csect;
 801050a:	69ba      	ldr	r2, [r7, #24]
 801050c:	69fb      	ldr	r3, [r7, #28]
 801050e:	4413      	add	r3, r2
 8010510:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	0a5b      	lsrs	r3, r3, #9
 8010516:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8010518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801051a:	2b00      	cmp	r3, #0
 801051c:	d039      	beq.n	8010592 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801051e:	69fa      	ldr	r2, [r7, #28]
 8010520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010522:	4413      	add	r3, r2
 8010524:	697a      	ldr	r2, [r7, #20]
 8010526:	8952      	ldrh	r2, [r2, #10]
 8010528:	4293      	cmp	r3, r2
 801052a:	d905      	bls.n	8010538 <f_read+0x148>
					cc = fs->csize - csect;
 801052c:	697b      	ldr	r3, [r7, #20]
 801052e:	895b      	ldrh	r3, [r3, #10]
 8010530:	461a      	mov	r2, r3
 8010532:	69fb      	ldr	r3, [r7, #28]
 8010534:	1ad3      	subs	r3, r2, r3
 8010536:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010538:	697b      	ldr	r3, [r7, #20]
 801053a:	7858      	ldrb	r0, [r3, #1]
 801053c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801053e:	69ba      	ldr	r2, [r7, #24]
 8010540:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010542:	f7fd ff97 	bl	800e474 <disk_read>
 8010546:	4603      	mov	r3, r0
 8010548:	2b00      	cmp	r3, #0
 801054a:	d004      	beq.n	8010556 <f_read+0x166>
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	2201      	movs	r2, #1
 8010550:	755a      	strb	r2, [r3, #21]
 8010552:	2301      	movs	r3, #1
 8010554:	e087      	b.n	8010666 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	7d1b      	ldrb	r3, [r3, #20]
 801055a:	b25b      	sxtb	r3, r3
 801055c:	2b00      	cmp	r3, #0
 801055e:	da14      	bge.n	801058a <f_read+0x19a>
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	6a1a      	ldr	r2, [r3, #32]
 8010564:	69bb      	ldr	r3, [r7, #24]
 8010566:	1ad3      	subs	r3, r2, r3
 8010568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801056a:	429a      	cmp	r2, r3
 801056c:	d90d      	bls.n	801058a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	6a1a      	ldr	r2, [r3, #32]
 8010572:	69bb      	ldr	r3, [r7, #24]
 8010574:	1ad3      	subs	r3, r2, r3
 8010576:	025b      	lsls	r3, r3, #9
 8010578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801057a:	18d0      	adds	r0, r2, r3
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	3330      	adds	r3, #48	; 0x30
 8010580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010584:	4619      	mov	r1, r3
 8010586:	f7fe f85d 	bl	800e644 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801058a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801058c:	025b      	lsls	r3, r3, #9
 801058e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8010590:	e050      	b.n	8010634 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	6a1b      	ldr	r3, [r3, #32]
 8010596:	69ba      	ldr	r2, [r7, #24]
 8010598:	429a      	cmp	r2, r3
 801059a:	d02e      	beq.n	80105fa <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	7d1b      	ldrb	r3, [r3, #20]
 80105a0:	b25b      	sxtb	r3, r3
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	da18      	bge.n	80105d8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80105a6:	697b      	ldr	r3, [r7, #20]
 80105a8:	7858      	ldrb	r0, [r3, #1]
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	6a1a      	ldr	r2, [r3, #32]
 80105b4:	2301      	movs	r3, #1
 80105b6:	f7fd ff7d 	bl	800e4b4 <disk_write>
 80105ba:	4603      	mov	r3, r0
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d004      	beq.n	80105ca <f_read+0x1da>
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	2201      	movs	r2, #1
 80105c4:	755a      	strb	r2, [r3, #21]
 80105c6:	2301      	movs	r3, #1
 80105c8:	e04d      	b.n	8010666 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	7d1b      	ldrb	r3, [r3, #20]
 80105ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105d2:	b2da      	uxtb	r2, r3
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80105d8:	697b      	ldr	r3, [r7, #20]
 80105da:	7858      	ldrb	r0, [r3, #1]
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80105e2:	2301      	movs	r3, #1
 80105e4:	69ba      	ldr	r2, [r7, #24]
 80105e6:	f7fd ff45 	bl	800e474 <disk_read>
 80105ea:	4603      	mov	r3, r0
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d004      	beq.n	80105fa <f_read+0x20a>
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	2201      	movs	r2, #1
 80105f4:	755a      	strb	r2, [r3, #21]
 80105f6:	2301      	movs	r3, #1
 80105f8:	e035      	b.n	8010666 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	69ba      	ldr	r2, [r7, #24]
 80105fe:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	699b      	ldr	r3, [r3, #24]
 8010604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010608:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801060c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801060e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	429a      	cmp	r2, r3
 8010614:	d901      	bls.n	801061a <f_read+0x22a>
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	699b      	ldr	r3, [r3, #24]
 8010624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010628:	4413      	add	r3, r2
 801062a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801062c:	4619      	mov	r1, r3
 801062e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010630:	f7fe f808 	bl	800e644 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010638:	4413      	add	r3, r2
 801063a:	627b      	str	r3, [r7, #36]	; 0x24
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	699a      	ldr	r2, [r3, #24]
 8010640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010642:	441a      	add	r2, r3
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	619a      	str	r2, [r3, #24]
 8010648:	683b      	ldr	r3, [r7, #0]
 801064a:	681a      	ldr	r2, [r3, #0]
 801064c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801064e:	441a      	add	r2, r3
 8010650:	683b      	ldr	r3, [r7, #0]
 8010652:	601a      	str	r2, [r3, #0]
 8010654:	687a      	ldr	r2, [r7, #4]
 8010656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010658:	1ad3      	subs	r3, r2, r3
 801065a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	2b00      	cmp	r3, #0
 8010660:	f47f af01 	bne.w	8010466 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010664:	2300      	movs	r3, #0
}
 8010666:	4618      	mov	r0, r3
 8010668:	3738      	adds	r7, #56	; 0x38
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}

0801066e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801066e:	b580      	push	{r7, lr}
 8010670:	b086      	sub	sp, #24
 8010672:	af00      	add	r7, sp, #0
 8010674:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	f107 0208 	add.w	r2, r7, #8
 801067c:	4611      	mov	r1, r2
 801067e:	4618      	mov	r0, r3
 8010680:	f7ff fc7c 	bl	800ff7c <validate>
 8010684:	4603      	mov	r3, r0
 8010686:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010688:	7dfb      	ldrb	r3, [r7, #23]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d168      	bne.n	8010760 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	7d1b      	ldrb	r3, [r3, #20]
 8010692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010696:	2b00      	cmp	r3, #0
 8010698:	d062      	beq.n	8010760 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	7d1b      	ldrb	r3, [r3, #20]
 801069e:	b25b      	sxtb	r3, r3
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	da15      	bge.n	80106d0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80106a4:	68bb      	ldr	r3, [r7, #8]
 80106a6:	7858      	ldrb	r0, [r3, #1]
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	6a1a      	ldr	r2, [r3, #32]
 80106b2:	2301      	movs	r3, #1
 80106b4:	f7fd fefe 	bl	800e4b4 <disk_write>
 80106b8:	4603      	mov	r3, r0
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d001      	beq.n	80106c2 <f_sync+0x54>
 80106be:	2301      	movs	r3, #1
 80106c0:	e04f      	b.n	8010762 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	7d1b      	ldrb	r3, [r3, #20]
 80106c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80106ca:	b2da      	uxtb	r2, r3
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80106d0:	f7fd ff2e 	bl	800e530 <get_fattime>
 80106d4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80106d6:	68ba      	ldr	r2, [r7, #8]
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106dc:	4619      	mov	r1, r3
 80106de:	4610      	mov	r0, r2
 80106e0:	f7fe f9de 	bl	800eaa0 <move_window>
 80106e4:	4603      	mov	r3, r0
 80106e6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80106e8:	7dfb      	ldrb	r3, [r7, #23]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d138      	bne.n	8010760 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106f2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	330b      	adds	r3, #11
 80106f8:	781a      	ldrb	r2, [r3, #0]
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	330b      	adds	r3, #11
 80106fe:	f042 0220 	orr.w	r2, r2, #32
 8010702:	b2d2      	uxtb	r2, r2
 8010704:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	6818      	ldr	r0, [r3, #0]
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	689b      	ldr	r3, [r3, #8]
 801070e:	461a      	mov	r2, r3
 8010710:	68f9      	ldr	r1, [r7, #12]
 8010712:	f7fe fee3 	bl	800f4dc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	f103 021c 	add.w	r2, r3, #28
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	68db      	ldr	r3, [r3, #12]
 8010720:	4619      	mov	r1, r3
 8010722:	4610      	mov	r0, r2
 8010724:	f7fd ff62 	bl	800e5ec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	3316      	adds	r3, #22
 801072c:	6939      	ldr	r1, [r7, #16]
 801072e:	4618      	mov	r0, r3
 8010730:	f7fd ff5c 	bl	800e5ec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	3312      	adds	r3, #18
 8010738:	2100      	movs	r1, #0
 801073a:	4618      	mov	r0, r3
 801073c:	f7fd ff3b 	bl	800e5b6 <st_word>
					fs->wflag = 1;
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	2201      	movs	r2, #1
 8010744:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010746:	68bb      	ldr	r3, [r7, #8]
 8010748:	4618      	mov	r0, r3
 801074a:	f7fe f9d7 	bl	800eafc <sync_fs>
 801074e:	4603      	mov	r3, r0
 8010750:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	7d1b      	ldrb	r3, [r3, #20]
 8010756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801075a:	b2da      	uxtb	r2, r3
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010760:	7dfb      	ldrb	r3, [r7, #23]
}
 8010762:	4618      	mov	r0, r3
 8010764:	3718      	adds	r7, #24
 8010766:	46bd      	mov	sp, r7
 8010768:	bd80      	pop	{r7, pc}

0801076a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801076a:	b580      	push	{r7, lr}
 801076c:	b084      	sub	sp, #16
 801076e:	af00      	add	r7, sp, #0
 8010770:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010772:	6878      	ldr	r0, [r7, #4]
 8010774:	f7ff ff7b 	bl	801066e <f_sync>
 8010778:	4603      	mov	r3, r0
 801077a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801077c:	7bfb      	ldrb	r3, [r7, #15]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d118      	bne.n	80107b4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	f107 0208 	add.w	r2, r7, #8
 8010788:	4611      	mov	r1, r2
 801078a:	4618      	mov	r0, r3
 801078c:	f7ff fbf6 	bl	800ff7c <validate>
 8010790:	4603      	mov	r3, r0
 8010792:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010794:	7bfb      	ldrb	r3, [r7, #15]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d10c      	bne.n	80107b4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	691b      	ldr	r3, [r3, #16]
 801079e:	4618      	mov	r0, r3
 80107a0:	f7fe f8da 	bl	800e958 <dec_lock>
 80107a4:	4603      	mov	r3, r0
 80107a6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80107a8:	7bfb      	ldrb	r3, [r7, #15]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d102      	bne.n	80107b4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	2200      	movs	r2, #0
 80107b2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80107b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80107b6:	4618      	mov	r0, r3
 80107b8:	3710      	adds	r7, #16
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd80      	pop	{r7, pc}

080107be <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80107be:	b580      	push	{r7, lr}
 80107c0:	b086      	sub	sp, #24
 80107c2:	af00      	add	r7, sp, #0
 80107c4:	6078      	str	r0, [r7, #4]
 80107c6:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d101      	bne.n	80107d2 <f_opendir+0x14>
 80107ce:	2309      	movs	r3, #9
 80107d0:	e064      	b.n	801089c <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80107d6:	f107 010c 	add.w	r1, r7, #12
 80107da:	463b      	mov	r3, r7
 80107dc:	2200      	movs	r2, #0
 80107de:	4618      	mov	r0, r3
 80107e0:	f7ff f980 	bl	800fae4 <find_volume>
 80107e4:	4603      	mov	r3, r0
 80107e6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80107e8:	7dfb      	ldrb	r3, [r7, #23]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d14f      	bne.n	801088e <f_opendir+0xd0>
		obj->fs = fs;
 80107ee:	68fa      	ldr	r2, [r7, #12]
 80107f0:	693b      	ldr	r3, [r7, #16]
 80107f2:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80107f4:	683b      	ldr	r3, [r7, #0]
 80107f6:	4619      	mov	r1, r3
 80107f8:	6878      	ldr	r0, [r7, #4]
 80107fa:	f7ff f867 	bl	800f8cc <follow_path>
 80107fe:	4603      	mov	r3, r0
 8010800:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8010802:	7dfb      	ldrb	r3, [r7, #23]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d13d      	bne.n	8010884 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801080e:	b25b      	sxtb	r3, r3
 8010810:	2b00      	cmp	r3, #0
 8010812:	db12      	blt.n	801083a <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8010814:	693b      	ldr	r3, [r7, #16]
 8010816:	799b      	ldrb	r3, [r3, #6]
 8010818:	f003 0310 	and.w	r3, r3, #16
 801081c:	2b00      	cmp	r3, #0
 801081e:	d00a      	beq.n	8010836 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8010820:	68fa      	ldr	r2, [r7, #12]
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	6a1b      	ldr	r3, [r3, #32]
 8010826:	4619      	mov	r1, r3
 8010828:	4610      	mov	r0, r2
 801082a:	f7fe fe38 	bl	800f49e <ld_clust>
 801082e:	4602      	mov	r2, r0
 8010830:	693b      	ldr	r3, [r7, #16]
 8010832:	609a      	str	r2, [r3, #8]
 8010834:	e001      	b.n	801083a <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8010836:	2305      	movs	r3, #5
 8010838:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801083a:	7dfb      	ldrb	r3, [r7, #23]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d121      	bne.n	8010884 <f_opendir+0xc6>
				obj->id = fs->id;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	88da      	ldrh	r2, [r3, #6]
 8010844:	693b      	ldr	r3, [r7, #16]
 8010846:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8010848:	2100      	movs	r1, #0
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	f7fe fca0 	bl	800f190 <dir_sdi>
 8010850:	4603      	mov	r3, r0
 8010852:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8010854:	7dfb      	ldrb	r3, [r7, #23]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d114      	bne.n	8010884 <f_opendir+0xc6>
					if (obj->sclust) {
 801085a:	693b      	ldr	r3, [r7, #16]
 801085c:	689b      	ldr	r3, [r3, #8]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d00d      	beq.n	801087e <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8010862:	2100      	movs	r1, #0
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	f7fd ffe9 	bl	800e83c <inc_lock>
 801086a:	4602      	mov	r2, r0
 801086c:	693b      	ldr	r3, [r7, #16]
 801086e:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8010870:	693b      	ldr	r3, [r7, #16]
 8010872:	691b      	ldr	r3, [r3, #16]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d105      	bne.n	8010884 <f_opendir+0xc6>
 8010878:	2312      	movs	r3, #18
 801087a:	75fb      	strb	r3, [r7, #23]
 801087c:	e002      	b.n	8010884 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 801087e:	693b      	ldr	r3, [r7, #16]
 8010880:	2200      	movs	r2, #0
 8010882:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010884:	7dfb      	ldrb	r3, [r7, #23]
 8010886:	2b04      	cmp	r3, #4
 8010888:	d101      	bne.n	801088e <f_opendir+0xd0>
 801088a:	2305      	movs	r3, #5
 801088c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801088e:	7dfb      	ldrb	r3, [r7, #23]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d002      	beq.n	801089a <f_opendir+0xdc>
 8010894:	693b      	ldr	r3, [r7, #16]
 8010896:	2200      	movs	r2, #0
 8010898:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801089a:	7dfb      	ldrb	r3, [r7, #23]
}
 801089c:	4618      	mov	r0, r3
 801089e:	3718      	adds	r7, #24
 80108a0:	46bd      	mov	sp, r7
 80108a2:	bd80      	pop	{r7, pc}

080108a4 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b084      	sub	sp, #16
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	f107 0208 	add.w	r2, r7, #8
 80108b4:	4611      	mov	r1, r2
 80108b6:	4618      	mov	r0, r3
 80108b8:	f7ff fb60 	bl	800ff7c <validate>
 80108bc:	4603      	mov	r3, r0
 80108be:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80108c0:	7bfb      	ldrb	r3, [r7, #15]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d126      	bne.n	8010914 <f_readdir+0x70>
		if (!fno) {
 80108c6:	683b      	ldr	r3, [r7, #0]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d106      	bne.n	80108da <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80108cc:	2100      	movs	r1, #0
 80108ce:	6878      	ldr	r0, [r7, #4]
 80108d0:	f7fe fc5e 	bl	800f190 <dir_sdi>
 80108d4:	4603      	mov	r3, r0
 80108d6:	73fb      	strb	r3, [r7, #15]
 80108d8:	e01c      	b.n	8010914 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80108da:	2100      	movs	r1, #0
 80108dc:	6878      	ldr	r0, [r7, #4]
 80108de:	f7fe fe1d 	bl	800f51c <dir_read>
 80108e2:	4603      	mov	r3, r0
 80108e4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80108e6:	7bfb      	ldrb	r3, [r7, #15]
 80108e8:	2b04      	cmp	r3, #4
 80108ea:	d101      	bne.n	80108f0 <f_readdir+0x4c>
 80108ec:	2300      	movs	r3, #0
 80108ee:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80108f0:	7bfb      	ldrb	r3, [r7, #15]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d10e      	bne.n	8010914 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80108f6:	6839      	ldr	r1, [r7, #0]
 80108f8:	6878      	ldr	r0, [r7, #4]
 80108fa:	f7fe fef3 	bl	800f6e4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80108fe:	2100      	movs	r1, #0
 8010900:	6878      	ldr	r0, [r7, #4]
 8010902:	f7fe fcc0 	bl	800f286 <dir_next>
 8010906:	4603      	mov	r3, r0
 8010908:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801090a:	7bfb      	ldrb	r3, [r7, #15]
 801090c:	2b04      	cmp	r3, #4
 801090e:	d101      	bne.n	8010914 <f_readdir+0x70>
 8010910:	2300      	movs	r3, #0
 8010912:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8010914:	7bfb      	ldrb	r3, [r7, #15]
}
 8010916:	4618      	mov	r0, r3
 8010918:	3710      	adds	r7, #16
 801091a:	46bd      	mov	sp, r7
 801091c:	bd80      	pop	{r7, pc}
	...

08010920 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010920:	b480      	push	{r7}
 8010922:	b087      	sub	sp, #28
 8010924:	af00      	add	r7, sp, #0
 8010926:	60f8      	str	r0, [r7, #12]
 8010928:	60b9      	str	r1, [r7, #8]
 801092a:	4613      	mov	r3, r2
 801092c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801092e:	2301      	movs	r3, #1
 8010930:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010932:	2300      	movs	r3, #0
 8010934:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010936:	4b1f      	ldr	r3, [pc, #124]	; (80109b4 <FATFS_LinkDriverEx+0x94>)
 8010938:	7b9b      	ldrb	r3, [r3, #14]
 801093a:	b2db      	uxtb	r3, r3
 801093c:	2b01      	cmp	r3, #1
 801093e:	d831      	bhi.n	80109a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010940:	4b1c      	ldr	r3, [pc, #112]	; (80109b4 <FATFS_LinkDriverEx+0x94>)
 8010942:	7b9b      	ldrb	r3, [r3, #14]
 8010944:	b2db      	uxtb	r3, r3
 8010946:	461a      	mov	r2, r3
 8010948:	4b1a      	ldr	r3, [pc, #104]	; (80109b4 <FATFS_LinkDriverEx+0x94>)
 801094a:	2100      	movs	r1, #0
 801094c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801094e:	4b19      	ldr	r3, [pc, #100]	; (80109b4 <FATFS_LinkDriverEx+0x94>)
 8010950:	7b9b      	ldrb	r3, [r3, #14]
 8010952:	b2db      	uxtb	r3, r3
 8010954:	4a17      	ldr	r2, [pc, #92]	; (80109b4 <FATFS_LinkDriverEx+0x94>)
 8010956:	009b      	lsls	r3, r3, #2
 8010958:	4413      	add	r3, r2
 801095a:	68fa      	ldr	r2, [r7, #12]
 801095c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801095e:	4b15      	ldr	r3, [pc, #84]	; (80109b4 <FATFS_LinkDriverEx+0x94>)
 8010960:	7b9b      	ldrb	r3, [r3, #14]
 8010962:	b2db      	uxtb	r3, r3
 8010964:	461a      	mov	r2, r3
 8010966:	4b13      	ldr	r3, [pc, #76]	; (80109b4 <FATFS_LinkDriverEx+0x94>)
 8010968:	4413      	add	r3, r2
 801096a:	79fa      	ldrb	r2, [r7, #7]
 801096c:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 801096e:	4b11      	ldr	r3, [pc, #68]	; (80109b4 <FATFS_LinkDriverEx+0x94>)
 8010970:	7b9b      	ldrb	r3, [r3, #14]
 8010972:	b2db      	uxtb	r3, r3
 8010974:	1c5a      	adds	r2, r3, #1
 8010976:	b2d1      	uxtb	r1, r2
 8010978:	4a0e      	ldr	r2, [pc, #56]	; (80109b4 <FATFS_LinkDriverEx+0x94>)
 801097a:	7391      	strb	r1, [r2, #14]
 801097c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801097e:	7dbb      	ldrb	r3, [r7, #22]
 8010980:	3330      	adds	r3, #48	; 0x30
 8010982:	b2da      	uxtb	r2, r3
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	3301      	adds	r3, #1
 801098c:	223a      	movs	r2, #58	; 0x3a
 801098e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010990:	68bb      	ldr	r3, [r7, #8]
 8010992:	3302      	adds	r3, #2
 8010994:	222f      	movs	r2, #47	; 0x2f
 8010996:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	3303      	adds	r3, #3
 801099c:	2200      	movs	r2, #0
 801099e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80109a0:	2300      	movs	r3, #0
 80109a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80109a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80109a6:	4618      	mov	r0, r3
 80109a8:	371c      	adds	r7, #28
 80109aa:	46bd      	mov	sp, r7
 80109ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b0:	4770      	bx	lr
 80109b2:	bf00      	nop
 80109b4:	20000264 	.word	0x20000264

080109b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b082      	sub	sp, #8
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
 80109c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80109c2:	2200      	movs	r2, #0
 80109c4:	6839      	ldr	r1, [r7, #0]
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	f7ff ffaa 	bl	8010920 <FATFS_LinkDriverEx>
 80109cc:	4603      	mov	r3, r0
}
 80109ce:	4618      	mov	r0, r3
 80109d0:	3708      	adds	r7, #8
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd80      	pop	{r7, pc}
	...

080109d8 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b082      	sub	sp, #8
 80109dc:	af00      	add	r7, sp, #0
 80109de:	4603      	mov	r3, r0
 80109e0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80109e2:	4b0b      	ldr	r3, [pc, #44]	; (8010a10 <SD_CheckStatus+0x38>)
 80109e4:	2201      	movs	r2, #1
 80109e6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80109e8:	f7f3 f80a 	bl	8003a00 <BSP_SD_GetCardState>
 80109ec:	4603      	mov	r3, r0
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d107      	bne.n	8010a02 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80109f2:	4b07      	ldr	r3, [pc, #28]	; (8010a10 <SD_CheckStatus+0x38>)
 80109f4:	781b      	ldrb	r3, [r3, #0]
 80109f6:	b2db      	uxtb	r3, r3
 80109f8:	f023 0301 	bic.w	r3, r3, #1
 80109fc:	b2da      	uxtb	r2, r3
 80109fe:	4b04      	ldr	r3, [pc, #16]	; (8010a10 <SD_CheckStatus+0x38>)
 8010a00:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010a02:	4b03      	ldr	r3, [pc, #12]	; (8010a10 <SD_CheckStatus+0x38>)
 8010a04:	781b      	ldrb	r3, [r3, #0]
 8010a06:	b2db      	uxtb	r3, r3
}
 8010a08:	4618      	mov	r0, r3
 8010a0a:	3708      	adds	r7, #8
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}
 8010a10:	20000088 	.word	0x20000088

08010a14 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b082      	sub	sp, #8
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010a1e:	4b0b      	ldr	r3, [pc, #44]	; (8010a4c <SD_initialize+0x38>)
 8010a20:	2201      	movs	r2, #1
 8010a22:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010a24:	f7f2 fe32 	bl	800368c <BSP_SD_Init>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d107      	bne.n	8010a3e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8010a2e:	79fb      	ldrb	r3, [r7, #7]
 8010a30:	4618      	mov	r0, r3
 8010a32:	f7ff ffd1 	bl	80109d8 <SD_CheckStatus>
 8010a36:	4603      	mov	r3, r0
 8010a38:	461a      	mov	r2, r3
 8010a3a:	4b04      	ldr	r3, [pc, #16]	; (8010a4c <SD_initialize+0x38>)
 8010a3c:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8010a3e:	4b03      	ldr	r3, [pc, #12]	; (8010a4c <SD_initialize+0x38>)
 8010a40:	781b      	ldrb	r3, [r3, #0]
 8010a42:	b2db      	uxtb	r3, r3
}
 8010a44:	4618      	mov	r0, r3
 8010a46:	3708      	adds	r7, #8
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	bd80      	pop	{r7, pc}
 8010a4c:	20000088 	.word	0x20000088

08010a50 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b082      	sub	sp, #8
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	4603      	mov	r3, r0
 8010a58:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010a5a:	79fb      	ldrb	r3, [r7, #7]
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f7ff ffbb 	bl	80109d8 <SD_CheckStatus>
 8010a62:	4603      	mov	r3, r0
}
 8010a64:	4618      	mov	r0, r3
 8010a66:	3708      	adds	r7, #8
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}

08010a6c <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b086      	sub	sp, #24
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	60b9      	str	r1, [r7, #8]
 8010a74:	607a      	str	r2, [r7, #4]
 8010a76:	603b      	str	r3, [r7, #0]
 8010a78:	4603      	mov	r3, r0
 8010a7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8010a80:	f04f 33ff 	mov.w	r3, #4294967295
 8010a84:	683a      	ldr	r2, [r7, #0]
 8010a86:	6879      	ldr	r1, [r7, #4]
 8010a88:	68b8      	ldr	r0, [r7, #8]
 8010a8a:	f7f2 fe63 	bl	8003754 <BSP_SD_ReadBlocks>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d107      	bne.n	8010aa4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010a94:	bf00      	nop
 8010a96:	f7f2 ffb3 	bl	8003a00 <BSP_SD_GetCardState>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d1fa      	bne.n	8010a96 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8010aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3718      	adds	r7, #24
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}

08010aae <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010aae:	b580      	push	{r7, lr}
 8010ab0:	b086      	sub	sp, #24
 8010ab2:	af00      	add	r7, sp, #0
 8010ab4:	60b9      	str	r1, [r7, #8]
 8010ab6:	607a      	str	r2, [r7, #4]
 8010ab8:	603b      	str	r3, [r7, #0]
 8010aba:	4603      	mov	r3, r0
 8010abc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010abe:	2301      	movs	r3, #1
 8010ac0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8010ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8010ac6:	683a      	ldr	r2, [r7, #0]
 8010ac8:	6879      	ldr	r1, [r7, #4]
 8010aca:	68b8      	ldr	r0, [r7, #8]
 8010acc:	f7f2 fe5e 	bl	800378c <BSP_SD_WriteBlocks>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d107      	bne.n	8010ae6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8010ad6:	bf00      	nop
 8010ad8:	f7f2 ff92 	bl	8003a00 <BSP_SD_GetCardState>
 8010adc:	4603      	mov	r3, r0
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d1fa      	bne.n	8010ad8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8010ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ae8:	4618      	mov	r0, r3
 8010aea:	3718      	adds	r7, #24
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}

08010af0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b08c      	sub	sp, #48	; 0x30
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	4603      	mov	r3, r0
 8010af8:	603a      	str	r2, [r7, #0]
 8010afa:	71fb      	strb	r3, [r7, #7]
 8010afc:	460b      	mov	r3, r1
 8010afe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010b00:	2301      	movs	r3, #1
 8010b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010b06:	4b25      	ldr	r3, [pc, #148]	; (8010b9c <SD_ioctl+0xac>)
 8010b08:	781b      	ldrb	r3, [r3, #0]
 8010b0a:	b2db      	uxtb	r3, r3
 8010b0c:	f003 0301 	and.w	r3, r3, #1
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d001      	beq.n	8010b18 <SD_ioctl+0x28>
 8010b14:	2303      	movs	r3, #3
 8010b16:	e03c      	b.n	8010b92 <SD_ioctl+0xa2>

  switch (cmd)
 8010b18:	79bb      	ldrb	r3, [r7, #6]
 8010b1a:	2b03      	cmp	r3, #3
 8010b1c:	d834      	bhi.n	8010b88 <SD_ioctl+0x98>
 8010b1e:	a201      	add	r2, pc, #4	; (adr r2, 8010b24 <SD_ioctl+0x34>)
 8010b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b24:	08010b35 	.word	0x08010b35
 8010b28:	08010b3d 	.word	0x08010b3d
 8010b2c:	08010b55 	.word	0x08010b55
 8010b30:	08010b6f 	.word	0x08010b6f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010b34:	2300      	movs	r3, #0
 8010b36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010b3a:	e028      	b.n	8010b8e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010b3c:	f107 030c 	add.w	r3, r7, #12
 8010b40:	4618      	mov	r0, r3
 8010b42:	f7f2 ff6d 	bl	8003a20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010b52:	e01c      	b.n	8010b8e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010b54:	f107 030c 	add.w	r3, r7, #12
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f7f2 ff61 	bl	8003a20 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b60:	b29a      	uxth	r2, r3
 8010b62:	683b      	ldr	r3, [r7, #0]
 8010b64:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010b66:	2300      	movs	r3, #0
 8010b68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010b6c:	e00f      	b.n	8010b8e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010b6e:	f107 030c 	add.w	r3, r7, #12
 8010b72:	4618      	mov	r0, r3
 8010b74:	f7f2 ff54 	bl	8003a20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b7a:	0a5a      	lsrs	r2, r3, #9
 8010b7c:	683b      	ldr	r3, [r7, #0]
 8010b7e:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 8010b80:	2300      	movs	r3, #0
 8010b82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010b86:	e002      	b.n	8010b8e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010b88:	2304      	movs	r3, #4
 8010b8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8010b8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010b92:	4618      	mov	r0, r3
 8010b94:	3730      	adds	r7, #48	; 0x30
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd80      	pop	{r7, pc}
 8010b9a:	bf00      	nop
 8010b9c:	20000088 	.word	0x20000088

08010ba0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010ba0:	b480      	push	{r7}
 8010ba2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8010ba4:	bf00      	nop
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bac:	4770      	bx	lr
	...

08010bb0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010bb0:	b480      	push	{r7}
 8010bb2:	b085      	sub	sp, #20
 8010bb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010bb6:	f3ef 8305 	mrs	r3, IPSR
 8010bba:	60bb      	str	r3, [r7, #8]
  return(result);
 8010bbc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d10f      	bne.n	8010be2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8010bc6:	607b      	str	r3, [r7, #4]
  return(result);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d105      	bne.n	8010bda <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010bce:	f3ef 8311 	mrs	r3, BASEPRI
 8010bd2:	603b      	str	r3, [r7, #0]
  return(result);
 8010bd4:	683b      	ldr	r3, [r7, #0]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d007      	beq.n	8010bea <osKernelInitialize+0x3a>
 8010bda:	4b0e      	ldr	r3, [pc, #56]	; (8010c14 <osKernelInitialize+0x64>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	2b02      	cmp	r3, #2
 8010be0:	d103      	bne.n	8010bea <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8010be2:	f06f 0305 	mvn.w	r3, #5
 8010be6:	60fb      	str	r3, [r7, #12]
 8010be8:	e00c      	b.n	8010c04 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010bea:	4b0a      	ldr	r3, [pc, #40]	; (8010c14 <osKernelInitialize+0x64>)
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d105      	bne.n	8010bfe <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010bf2:	4b08      	ldr	r3, [pc, #32]	; (8010c14 <osKernelInitialize+0x64>)
 8010bf4:	2201      	movs	r2, #1
 8010bf6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	60fb      	str	r3, [r7, #12]
 8010bfc:	e002      	b.n	8010c04 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8010bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8010c02:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8010c04:	68fb      	ldr	r3, [r7, #12]
}
 8010c06:	4618      	mov	r0, r3
 8010c08:	3714      	adds	r7, #20
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c10:	4770      	bx	lr
 8010c12:	bf00      	nop
 8010c14:	20000274 	.word	0x20000274

08010c18 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b084      	sub	sp, #16
 8010c1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010c1e:	f3ef 8305 	mrs	r3, IPSR
 8010c22:	60bb      	str	r3, [r7, #8]
  return(result);
 8010c24:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d10f      	bne.n	8010c4a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c2a:	f3ef 8310 	mrs	r3, PRIMASK
 8010c2e:	607b      	str	r3, [r7, #4]
  return(result);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d105      	bne.n	8010c42 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010c36:	f3ef 8311 	mrs	r3, BASEPRI
 8010c3a:	603b      	str	r3, [r7, #0]
  return(result);
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d007      	beq.n	8010c52 <osKernelStart+0x3a>
 8010c42:	4b0f      	ldr	r3, [pc, #60]	; (8010c80 <osKernelStart+0x68>)
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	2b02      	cmp	r3, #2
 8010c48:	d103      	bne.n	8010c52 <osKernelStart+0x3a>
    stat = osErrorISR;
 8010c4a:	f06f 0305 	mvn.w	r3, #5
 8010c4e:	60fb      	str	r3, [r7, #12]
 8010c50:	e010      	b.n	8010c74 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010c52:	4b0b      	ldr	r3, [pc, #44]	; (8010c80 <osKernelStart+0x68>)
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	2b01      	cmp	r3, #1
 8010c58:	d109      	bne.n	8010c6e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010c5a:	f7ff ffa1 	bl	8010ba0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010c5e:	4b08      	ldr	r3, [pc, #32]	; (8010c80 <osKernelStart+0x68>)
 8010c60:	2202      	movs	r2, #2
 8010c62:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010c64:	f001 fa9a 	bl	801219c <vTaskStartScheduler>
      stat = osOK;
 8010c68:	2300      	movs	r3, #0
 8010c6a:	60fb      	str	r3, [r7, #12]
 8010c6c:	e002      	b.n	8010c74 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8010c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8010c72:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8010c74:	68fb      	ldr	r3, [r7, #12]
}
 8010c76:	4618      	mov	r0, r3
 8010c78:	3710      	adds	r7, #16
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	bd80      	pop	{r7, pc}
 8010c7e:	bf00      	nop
 8010c80:	20000274 	.word	0x20000274

08010c84 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b090      	sub	sp, #64	; 0x40
 8010c88:	af04      	add	r7, sp, #16
 8010c8a:	60f8      	str	r0, [r7, #12]
 8010c8c:	60b9      	str	r1, [r7, #8]
 8010c8e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010c90:	2300      	movs	r3, #0
 8010c92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010c94:	f3ef 8305 	mrs	r3, IPSR
 8010c98:	61fb      	str	r3, [r7, #28]
  return(result);
 8010c9a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	f040 808f 	bne.w	8010dc0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ca2:	f3ef 8310 	mrs	r3, PRIMASK
 8010ca6:	61bb      	str	r3, [r7, #24]
  return(result);
 8010ca8:	69bb      	ldr	r3, [r7, #24]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d105      	bne.n	8010cba <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010cae:	f3ef 8311 	mrs	r3, BASEPRI
 8010cb2:	617b      	str	r3, [r7, #20]
  return(result);
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d003      	beq.n	8010cc2 <osThreadNew+0x3e>
 8010cba:	4b44      	ldr	r3, [pc, #272]	; (8010dcc <osThreadNew+0x148>)
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	2b02      	cmp	r3, #2
 8010cc0:	d07e      	beq.n	8010dc0 <osThreadNew+0x13c>
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d07b      	beq.n	8010dc0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8010cc8:	2380      	movs	r3, #128	; 0x80
 8010cca:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8010ccc:	2318      	movs	r3, #24
 8010cce:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8010cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8010cd8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d045      	beq.n	8010d6c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d002      	beq.n	8010cee <osThreadNew+0x6a>
        name = attr->name;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	699b      	ldr	r3, [r3, #24]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d002      	beq.n	8010cfc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	699b      	ldr	r3, [r3, #24]
 8010cfa:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d008      	beq.n	8010d14 <osThreadNew+0x90>
 8010d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d04:	2b38      	cmp	r3, #56	; 0x38
 8010d06:	d805      	bhi.n	8010d14 <osThreadNew+0x90>
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	685b      	ldr	r3, [r3, #4]
 8010d0c:	f003 0301 	and.w	r3, r3, #1
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d001      	beq.n	8010d18 <osThreadNew+0x94>
        return (NULL);
 8010d14:	2300      	movs	r3, #0
 8010d16:	e054      	b.n	8010dc2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	695b      	ldr	r3, [r3, #20]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d003      	beq.n	8010d28 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	695b      	ldr	r3, [r3, #20]
 8010d24:	089b      	lsrs	r3, r3, #2
 8010d26:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	689b      	ldr	r3, [r3, #8]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d00e      	beq.n	8010d4e <osThreadNew+0xca>
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	68db      	ldr	r3, [r3, #12]
 8010d34:	2b5b      	cmp	r3, #91	; 0x5b
 8010d36:	d90a      	bls.n	8010d4e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d006      	beq.n	8010d4e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	695b      	ldr	r3, [r3, #20]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d002      	beq.n	8010d4e <osThreadNew+0xca>
        mem = 1;
 8010d48:	2301      	movs	r3, #1
 8010d4a:	623b      	str	r3, [r7, #32]
 8010d4c:	e010      	b.n	8010d70 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	689b      	ldr	r3, [r3, #8]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d10c      	bne.n	8010d70 <osThreadNew+0xec>
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	68db      	ldr	r3, [r3, #12]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d108      	bne.n	8010d70 <osThreadNew+0xec>
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	691b      	ldr	r3, [r3, #16]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d104      	bne.n	8010d70 <osThreadNew+0xec>
          mem = 0;
 8010d66:	2300      	movs	r3, #0
 8010d68:	623b      	str	r3, [r7, #32]
 8010d6a:	e001      	b.n	8010d70 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010d70:	6a3b      	ldr	r3, [r7, #32]
 8010d72:	2b01      	cmp	r3, #1
 8010d74:	d110      	bne.n	8010d98 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8010d7a:	687a      	ldr	r2, [r7, #4]
 8010d7c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010d7e:	9202      	str	r2, [sp, #8]
 8010d80:	9301      	str	r3, [sp, #4]
 8010d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d84:	9300      	str	r3, [sp, #0]
 8010d86:	68bb      	ldr	r3, [r7, #8]
 8010d88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010d8c:	68f8      	ldr	r0, [r7, #12]
 8010d8e:	f001 f833 	bl	8011df8 <xTaskCreateStatic>
 8010d92:	4603      	mov	r3, r0
 8010d94:	613b      	str	r3, [r7, #16]
 8010d96:	e013      	b.n	8010dc0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8010d98:	6a3b      	ldr	r3, [r7, #32]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d110      	bne.n	8010dc0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010da0:	b29a      	uxth	r2, r3
 8010da2:	f107 0310 	add.w	r3, r7, #16
 8010da6:	9301      	str	r3, [sp, #4]
 8010da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010daa:	9300      	str	r3, [sp, #0]
 8010dac:	68bb      	ldr	r3, [r7, #8]
 8010dae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010db0:	68f8      	ldr	r0, [r7, #12]
 8010db2:	f001 f87b 	bl	8011eac <xTaskCreate>
 8010db6:	4603      	mov	r3, r0
 8010db8:	2b01      	cmp	r3, #1
 8010dba:	d001      	beq.n	8010dc0 <osThreadNew+0x13c>
          hTask = NULL;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010dc0:	693b      	ldr	r3, [r7, #16]
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	3730      	adds	r7, #48	; 0x30
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}
 8010dca:	bf00      	nop
 8010dcc:	20000274 	.word	0x20000274

08010dd0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b086      	sub	sp, #24
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010dd8:	f3ef 8305 	mrs	r3, IPSR
 8010ddc:	613b      	str	r3, [r7, #16]
  return(result);
 8010dde:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d10f      	bne.n	8010e04 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010de4:	f3ef 8310 	mrs	r3, PRIMASK
 8010de8:	60fb      	str	r3, [r7, #12]
  return(result);
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d105      	bne.n	8010dfc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010df0:	f3ef 8311 	mrs	r3, BASEPRI
 8010df4:	60bb      	str	r3, [r7, #8]
  return(result);
 8010df6:	68bb      	ldr	r3, [r7, #8]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d007      	beq.n	8010e0c <osDelay+0x3c>
 8010dfc:	4b0a      	ldr	r3, [pc, #40]	; (8010e28 <osDelay+0x58>)
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	2b02      	cmp	r3, #2
 8010e02:	d103      	bne.n	8010e0c <osDelay+0x3c>
    stat = osErrorISR;
 8010e04:	f06f 0305 	mvn.w	r3, #5
 8010e08:	617b      	str	r3, [r7, #20]
 8010e0a:	e007      	b.n	8010e1c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d002      	beq.n	8010e1c <osDelay+0x4c>
      vTaskDelay(ticks);
 8010e16:	6878      	ldr	r0, [r7, #4]
 8010e18:	f001 f98c 	bl	8012134 <vTaskDelay>
    }
  }

  return (stat);
 8010e1c:	697b      	ldr	r3, [r7, #20]
}
 8010e1e:	4618      	mov	r0, r3
 8010e20:	3718      	adds	r7, #24
 8010e22:	46bd      	mov	sp, r7
 8010e24:	bd80      	pop	{r7, pc}
 8010e26:	bf00      	nop
 8010e28:	20000274 	.word	0x20000274

08010e2c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b08c      	sub	sp, #48	; 0x30
 8010e30:	af02      	add	r7, sp, #8
 8010e32:	60f8      	str	r0, [r7, #12]
 8010e34:	60b9      	str	r1, [r7, #8]
 8010e36:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010e38:	2300      	movs	r3, #0
 8010e3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e3c:	f3ef 8305 	mrs	r3, IPSR
 8010e40:	61bb      	str	r3, [r7, #24]
  return(result);
 8010e42:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d170      	bne.n	8010f2a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e48:	f3ef 8310 	mrs	r3, PRIMASK
 8010e4c:	617b      	str	r3, [r7, #20]
  return(result);
 8010e4e:	697b      	ldr	r3, [r7, #20]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d105      	bne.n	8010e60 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010e54:	f3ef 8311 	mrs	r3, BASEPRI
 8010e58:	613b      	str	r3, [r7, #16]
  return(result);
 8010e5a:	693b      	ldr	r3, [r7, #16]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d003      	beq.n	8010e68 <osMessageQueueNew+0x3c>
 8010e60:	4b34      	ldr	r3, [pc, #208]	; (8010f34 <osMessageQueueNew+0x108>)
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	2b02      	cmp	r3, #2
 8010e66:	d060      	beq.n	8010f2a <osMessageQueueNew+0xfe>
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d05d      	beq.n	8010f2a <osMessageQueueNew+0xfe>
 8010e6e:	68bb      	ldr	r3, [r7, #8]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d05a      	beq.n	8010f2a <osMessageQueueNew+0xfe>
    mem = -1;
 8010e74:	f04f 33ff 	mov.w	r3, #4294967295
 8010e78:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d029      	beq.n	8010ed4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	689b      	ldr	r3, [r3, #8]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d012      	beq.n	8010eae <osMessageQueueNew+0x82>
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	68db      	ldr	r3, [r3, #12]
 8010e8c:	2b4f      	cmp	r3, #79	; 0x4f
 8010e8e:	d90e      	bls.n	8010eae <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d00a      	beq.n	8010eae <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	695a      	ldr	r2, [r3, #20]
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	68b9      	ldr	r1, [r7, #8]
 8010ea0:	fb01 f303 	mul.w	r3, r1, r3
 8010ea4:	429a      	cmp	r2, r3
 8010ea6:	d302      	bcc.n	8010eae <osMessageQueueNew+0x82>
        mem = 1;
 8010ea8:	2301      	movs	r3, #1
 8010eaa:	623b      	str	r3, [r7, #32]
 8010eac:	e014      	b.n	8010ed8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	689b      	ldr	r3, [r3, #8]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d110      	bne.n	8010ed8 <osMessageQueueNew+0xac>
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	68db      	ldr	r3, [r3, #12]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d10c      	bne.n	8010ed8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d108      	bne.n	8010ed8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	695b      	ldr	r3, [r3, #20]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d104      	bne.n	8010ed8 <osMessageQueueNew+0xac>
          mem = 0;
 8010ece:	2300      	movs	r3, #0
 8010ed0:	623b      	str	r3, [r7, #32]
 8010ed2:	e001      	b.n	8010ed8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010ed8:	6a3b      	ldr	r3, [r7, #32]
 8010eda:	2b01      	cmp	r3, #1
 8010edc:	d10c      	bne.n	8010ef8 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	691a      	ldr	r2, [r3, #16]
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	6899      	ldr	r1, [r3, #8]
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	9300      	str	r3, [sp, #0]
 8010eea:	460b      	mov	r3, r1
 8010eec:	68b9      	ldr	r1, [r7, #8]
 8010eee:	68f8      	ldr	r0, [r7, #12]
 8010ef0:	f000 fa58 	bl	80113a4 <xQueueGenericCreateStatic>
 8010ef4:	6278      	str	r0, [r7, #36]	; 0x24
 8010ef6:	e008      	b.n	8010f0a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8010ef8:	6a3b      	ldr	r3, [r7, #32]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d105      	bne.n	8010f0a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8010efe:	2200      	movs	r2, #0
 8010f00:	68b9      	ldr	r1, [r7, #8]
 8010f02:	68f8      	ldr	r0, [r7, #12]
 8010f04:	f000 fac1 	bl	801148a <xQueueGenericCreate>
 8010f08:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d00c      	beq.n	8010f2a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d003      	beq.n	8010f1e <osMessageQueueNew+0xf2>
        name = attr->name;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	61fb      	str	r3, [r7, #28]
 8010f1c:	e001      	b.n	8010f22 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8010f1e:	2300      	movs	r3, #0
 8010f20:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8010f22:	69f9      	ldr	r1, [r7, #28]
 8010f24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f26:	f000 ff0b 	bl	8011d40 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	3728      	adds	r7, #40	; 0x28
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}
 8010f34:	20000274 	.word	0x20000274

08010f38 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b08a      	sub	sp, #40	; 0x28
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	60f8      	str	r0, [r7, #12]
 8010f40:	60b9      	str	r1, [r7, #8]
 8010f42:	603b      	str	r3, [r7, #0]
 8010f44:	4613      	mov	r3, r2
 8010f46:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010f50:	f3ef 8305 	mrs	r3, IPSR
 8010f54:	61fb      	str	r3, [r7, #28]
  return(result);
 8010f56:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d10f      	bne.n	8010f7c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f5c:	f3ef 8310 	mrs	r3, PRIMASK
 8010f60:	61bb      	str	r3, [r7, #24]
  return(result);
 8010f62:	69bb      	ldr	r3, [r7, #24]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d105      	bne.n	8010f74 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010f68:	f3ef 8311 	mrs	r3, BASEPRI
 8010f6c:	617b      	str	r3, [r7, #20]
  return(result);
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d02c      	beq.n	8010fce <osMessageQueuePut+0x96>
 8010f74:	4b28      	ldr	r3, [pc, #160]	; (8011018 <osMessageQueuePut+0xe0>)
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	2b02      	cmp	r3, #2
 8010f7a:	d128      	bne.n	8010fce <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010f7c:	6a3b      	ldr	r3, [r7, #32]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d005      	beq.n	8010f8e <osMessageQueuePut+0x56>
 8010f82:	68bb      	ldr	r3, [r7, #8]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d002      	beq.n	8010f8e <osMessageQueuePut+0x56>
 8010f88:	683b      	ldr	r3, [r7, #0]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d003      	beq.n	8010f96 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8010f8e:	f06f 0303 	mvn.w	r3, #3
 8010f92:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010f94:	e039      	b.n	801100a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8010f96:	2300      	movs	r3, #0
 8010f98:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010f9a:	f107 0210 	add.w	r2, r7, #16
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	68b9      	ldr	r1, [r7, #8]
 8010fa2:	6a38      	ldr	r0, [r7, #32]
 8010fa4:	f000 fbce 	bl	8011744 <xQueueGenericSendFromISR>
 8010fa8:	4603      	mov	r3, r0
 8010faa:	2b01      	cmp	r3, #1
 8010fac:	d003      	beq.n	8010fb6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8010fae:	f06f 0302 	mvn.w	r3, #2
 8010fb2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010fb4:	e029      	b.n	801100a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8010fb6:	693b      	ldr	r3, [r7, #16]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d026      	beq.n	801100a <osMessageQueuePut+0xd2>
 8010fbc:	4b17      	ldr	r3, [pc, #92]	; (801101c <osMessageQueuePut+0xe4>)
 8010fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fc2:	601a      	str	r2, [r3, #0]
 8010fc4:	f3bf 8f4f 	dsb	sy
 8010fc8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010fcc:	e01d      	b.n	801100a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010fce:	6a3b      	ldr	r3, [r7, #32]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d002      	beq.n	8010fda <osMessageQueuePut+0xa2>
 8010fd4:	68bb      	ldr	r3, [r7, #8]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d103      	bne.n	8010fe2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8010fda:	f06f 0303 	mvn.w	r3, #3
 8010fde:	627b      	str	r3, [r7, #36]	; 0x24
 8010fe0:	e014      	b.n	801100c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	683a      	ldr	r2, [r7, #0]
 8010fe6:	68b9      	ldr	r1, [r7, #8]
 8010fe8:	6a38      	ldr	r0, [r7, #32]
 8010fea:	f000 fab1 	bl	8011550 <xQueueGenericSend>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	2b01      	cmp	r3, #1
 8010ff2:	d00b      	beq.n	801100c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d003      	beq.n	8011002 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8010ffa:	f06f 0301 	mvn.w	r3, #1
 8010ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8011000:	e004      	b.n	801100c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8011002:	f06f 0302 	mvn.w	r3, #2
 8011006:	627b      	str	r3, [r7, #36]	; 0x24
 8011008:	e000      	b.n	801100c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801100a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 801100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801100e:	4618      	mov	r0, r3
 8011010:	3728      	adds	r7, #40	; 0x28
 8011012:	46bd      	mov	sp, r7
 8011014:	bd80      	pop	{r7, pc}
 8011016:	bf00      	nop
 8011018:	20000274 	.word	0x20000274
 801101c:	e000ed04 	.word	0xe000ed04

08011020 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8011020:	b580      	push	{r7, lr}
 8011022:	b08a      	sub	sp, #40	; 0x28
 8011024:	af00      	add	r7, sp, #0
 8011026:	60f8      	str	r0, [r7, #12]
 8011028:	60b9      	str	r1, [r7, #8]
 801102a:	607a      	str	r2, [r7, #4]
 801102c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011032:	2300      	movs	r3, #0
 8011034:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011036:	f3ef 8305 	mrs	r3, IPSR
 801103a:	61fb      	str	r3, [r7, #28]
  return(result);
 801103c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801103e:	2b00      	cmp	r3, #0
 8011040:	d10f      	bne.n	8011062 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011042:	f3ef 8310 	mrs	r3, PRIMASK
 8011046:	61bb      	str	r3, [r7, #24]
  return(result);
 8011048:	69bb      	ldr	r3, [r7, #24]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d105      	bne.n	801105a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801104e:	f3ef 8311 	mrs	r3, BASEPRI
 8011052:	617b      	str	r3, [r7, #20]
  return(result);
 8011054:	697b      	ldr	r3, [r7, #20]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d02c      	beq.n	80110b4 <osMessageQueueGet+0x94>
 801105a:	4b28      	ldr	r3, [pc, #160]	; (80110fc <osMessageQueueGet+0xdc>)
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	2b02      	cmp	r3, #2
 8011060:	d128      	bne.n	80110b4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011062:	6a3b      	ldr	r3, [r7, #32]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d005      	beq.n	8011074 <osMessageQueueGet+0x54>
 8011068:	68bb      	ldr	r3, [r7, #8]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d002      	beq.n	8011074 <osMessageQueueGet+0x54>
 801106e:	683b      	ldr	r3, [r7, #0]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d003      	beq.n	801107c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8011074:	f06f 0303 	mvn.w	r3, #3
 8011078:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801107a:	e038      	b.n	80110ee <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 801107c:	2300      	movs	r3, #0
 801107e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8011080:	f107 0310 	add.w	r3, r7, #16
 8011084:	461a      	mov	r2, r3
 8011086:	68b9      	ldr	r1, [r7, #8]
 8011088:	6a38      	ldr	r0, [r7, #32]
 801108a:	f000 fccb 	bl	8011a24 <xQueueReceiveFromISR>
 801108e:	4603      	mov	r3, r0
 8011090:	2b01      	cmp	r3, #1
 8011092:	d003      	beq.n	801109c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8011094:	f06f 0302 	mvn.w	r3, #2
 8011098:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801109a:	e028      	b.n	80110ee <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 801109c:	693b      	ldr	r3, [r7, #16]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d025      	beq.n	80110ee <osMessageQueueGet+0xce>
 80110a2:	4b17      	ldr	r3, [pc, #92]	; (8011100 <osMessageQueueGet+0xe0>)
 80110a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110a8:	601a      	str	r2, [r3, #0]
 80110aa:	f3bf 8f4f 	dsb	sy
 80110ae:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80110b2:	e01c      	b.n	80110ee <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80110b4:	6a3b      	ldr	r3, [r7, #32]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d002      	beq.n	80110c0 <osMessageQueueGet+0xa0>
 80110ba:	68bb      	ldr	r3, [r7, #8]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d103      	bne.n	80110c8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80110c0:	f06f 0303 	mvn.w	r3, #3
 80110c4:	627b      	str	r3, [r7, #36]	; 0x24
 80110c6:	e013      	b.n	80110f0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80110c8:	683a      	ldr	r2, [r7, #0]
 80110ca:	68b9      	ldr	r1, [r7, #8]
 80110cc:	6a38      	ldr	r0, [r7, #32]
 80110ce:	f000 fbcd 	bl	801186c <xQueueReceive>
 80110d2:	4603      	mov	r3, r0
 80110d4:	2b01      	cmp	r3, #1
 80110d6:	d00b      	beq.n	80110f0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d003      	beq.n	80110e6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80110de:	f06f 0301 	mvn.w	r3, #1
 80110e2:	627b      	str	r3, [r7, #36]	; 0x24
 80110e4:	e004      	b.n	80110f0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80110e6:	f06f 0302 	mvn.w	r3, #2
 80110ea:	627b      	str	r3, [r7, #36]	; 0x24
 80110ec:	e000      	b.n	80110f0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80110ee:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80110f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80110f2:	4618      	mov	r0, r3
 80110f4:	3728      	adds	r7, #40	; 0x28
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bd80      	pop	{r7, pc}
 80110fa:	bf00      	nop
 80110fc:	20000274 	.word	0x20000274
 8011100:	e000ed04 	.word	0xe000ed04

08011104 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8011104:	b480      	push	{r7}
 8011106:	b085      	sub	sp, #20
 8011108:	af00      	add	r7, sp, #0
 801110a:	60f8      	str	r0, [r7, #12]
 801110c:	60b9      	str	r1, [r7, #8]
 801110e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	4a07      	ldr	r2, [pc, #28]	; (8011130 <vApplicationGetIdleTaskMemory+0x2c>)
 8011114:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8011116:	68bb      	ldr	r3, [r7, #8]
 8011118:	4a06      	ldr	r2, [pc, #24]	; (8011134 <vApplicationGetIdleTaskMemory+0x30>)
 801111a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	2280      	movs	r2, #128	; 0x80
 8011120:	601a      	str	r2, [r3, #0]
}
 8011122:	bf00      	nop
 8011124:	3714      	adds	r7, #20
 8011126:	46bd      	mov	sp, r7
 8011128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112c:	4770      	bx	lr
 801112e:	bf00      	nop
 8011130:	20000278 	.word	0x20000278
 8011134:	200002d4 	.word	0x200002d4

08011138 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011138:	b480      	push	{r7}
 801113a:	b085      	sub	sp, #20
 801113c:	af00      	add	r7, sp, #0
 801113e:	60f8      	str	r0, [r7, #12]
 8011140:	60b9      	str	r1, [r7, #8]
 8011142:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	4a07      	ldr	r2, [pc, #28]	; (8011164 <vApplicationGetTimerTaskMemory+0x2c>)
 8011148:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801114a:	68bb      	ldr	r3, [r7, #8]
 801114c:	4a06      	ldr	r2, [pc, #24]	; (8011168 <vApplicationGetTimerTaskMemory+0x30>)
 801114e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011156:	601a      	str	r2, [r3, #0]
}
 8011158:	bf00      	nop
 801115a:	3714      	adds	r7, #20
 801115c:	46bd      	mov	sp, r7
 801115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011162:	4770      	bx	lr
 8011164:	200004d4 	.word	0x200004d4
 8011168:	20000530 	.word	0x20000530

0801116c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801116c:	b480      	push	{r7}
 801116e:	b083      	sub	sp, #12
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	f103 0208 	add.w	r2, r3, #8
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	f04f 32ff 	mov.w	r2, #4294967295
 8011184:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	f103 0208 	add.w	r2, r3, #8
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	f103 0208 	add.w	r2, r3, #8
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	2200      	movs	r2, #0
 801119e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80111a0:	bf00      	nop
 80111a2:	370c      	adds	r7, #12
 80111a4:	46bd      	mov	sp, r7
 80111a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111aa:	4770      	bx	lr

080111ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80111ac:	b480      	push	{r7}
 80111ae:	b083      	sub	sp, #12
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	2200      	movs	r2, #0
 80111b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80111ba:	bf00      	nop
 80111bc:	370c      	adds	r7, #12
 80111be:	46bd      	mov	sp, r7
 80111c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c4:	4770      	bx	lr

080111c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80111c6:	b480      	push	{r7}
 80111c8:	b085      	sub	sp, #20
 80111ca:	af00      	add	r7, sp, #0
 80111cc:	6078      	str	r0, [r7, #4]
 80111ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	685b      	ldr	r3, [r3, #4]
 80111d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80111d6:	683b      	ldr	r3, [r7, #0]
 80111d8:	68fa      	ldr	r2, [r7, #12]
 80111da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	689a      	ldr	r2, [r3, #8]
 80111e0:	683b      	ldr	r3, [r7, #0]
 80111e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	689b      	ldr	r3, [r3, #8]
 80111e8:	683a      	ldr	r2, [r7, #0]
 80111ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	683a      	ldr	r2, [r7, #0]
 80111f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	687a      	ldr	r2, [r7, #4]
 80111f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	1c5a      	adds	r2, r3, #1
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	601a      	str	r2, [r3, #0]
}
 8011202:	bf00      	nop
 8011204:	3714      	adds	r7, #20
 8011206:	46bd      	mov	sp, r7
 8011208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120c:	4770      	bx	lr

0801120e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801120e:	b480      	push	{r7}
 8011210:	b085      	sub	sp, #20
 8011212:	af00      	add	r7, sp, #0
 8011214:	6078      	str	r0, [r7, #4]
 8011216:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801121e:	68bb      	ldr	r3, [r7, #8]
 8011220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011224:	d103      	bne.n	801122e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	691b      	ldr	r3, [r3, #16]
 801122a:	60fb      	str	r3, [r7, #12]
 801122c:	e00c      	b.n	8011248 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	3308      	adds	r3, #8
 8011232:	60fb      	str	r3, [r7, #12]
 8011234:	e002      	b.n	801123c <vListInsert+0x2e>
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	685b      	ldr	r3, [r3, #4]
 801123a:	60fb      	str	r3, [r7, #12]
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	685b      	ldr	r3, [r3, #4]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	68ba      	ldr	r2, [r7, #8]
 8011244:	429a      	cmp	r2, r3
 8011246:	d2f6      	bcs.n	8011236 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	685a      	ldr	r2, [r3, #4]
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011250:	683b      	ldr	r3, [r7, #0]
 8011252:	685b      	ldr	r3, [r3, #4]
 8011254:	683a      	ldr	r2, [r7, #0]
 8011256:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011258:	683b      	ldr	r3, [r7, #0]
 801125a:	68fa      	ldr	r2, [r7, #12]
 801125c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	683a      	ldr	r2, [r7, #0]
 8011262:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011264:	683b      	ldr	r3, [r7, #0]
 8011266:	687a      	ldr	r2, [r7, #4]
 8011268:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	1c5a      	adds	r2, r3, #1
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	601a      	str	r2, [r3, #0]
}
 8011274:	bf00      	nop
 8011276:	3714      	adds	r7, #20
 8011278:	46bd      	mov	sp, r7
 801127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127e:	4770      	bx	lr

08011280 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011280:	b480      	push	{r7}
 8011282:	b085      	sub	sp, #20
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	691b      	ldr	r3, [r3, #16]
 801128c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	685b      	ldr	r3, [r3, #4]
 8011292:	687a      	ldr	r2, [r7, #4]
 8011294:	6892      	ldr	r2, [r2, #8]
 8011296:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	689b      	ldr	r3, [r3, #8]
 801129c:	687a      	ldr	r2, [r7, #4]
 801129e:	6852      	ldr	r2, [r2, #4]
 80112a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	685b      	ldr	r3, [r3, #4]
 80112a6:	687a      	ldr	r2, [r7, #4]
 80112a8:	429a      	cmp	r2, r3
 80112aa:	d103      	bne.n	80112b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	689a      	ldr	r2, [r3, #8]
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2200      	movs	r2, #0
 80112b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	1e5a      	subs	r2, r3, #1
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	681b      	ldr	r3, [r3, #0]
}
 80112c8:	4618      	mov	r0, r3
 80112ca:	3714      	adds	r7, #20
 80112cc:	46bd      	mov	sp, r7
 80112ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d2:	4770      	bx	lr

080112d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b084      	sub	sp, #16
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
 80112dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d109      	bne.n	80112fc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80112e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ec:	f383 8811 	msr	BASEPRI, r3
 80112f0:	f3bf 8f6f 	isb	sy
 80112f4:	f3bf 8f4f 	dsb	sy
 80112f8:	60bb      	str	r3, [r7, #8]
 80112fa:	e7fe      	b.n	80112fa <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80112fc:	f002 f8ce 	bl	801349c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	681a      	ldr	r2, [r3, #0]
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011308:	68f9      	ldr	r1, [r7, #12]
 801130a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801130c:	fb01 f303 	mul.w	r3, r1, r3
 8011310:	441a      	add	r2, r3
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	2200      	movs	r2, #0
 801131a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	681a      	ldr	r2, [r3, #0]
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	681a      	ldr	r2, [r3, #0]
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801132c:	3b01      	subs	r3, #1
 801132e:	68f9      	ldr	r1, [r7, #12]
 8011330:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011332:	fb01 f303 	mul.w	r3, r1, r3
 8011336:	441a      	add	r2, r3
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	22ff      	movs	r2, #255	; 0xff
 8011340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	22ff      	movs	r2, #255	; 0xff
 8011348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801134c:	683b      	ldr	r3, [r7, #0]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d114      	bne.n	801137c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	691b      	ldr	r3, [r3, #16]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d01a      	beq.n	8011390 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	3310      	adds	r3, #16
 801135e:	4618      	mov	r0, r3
 8011360:	f001 f99c 	bl	801269c <xTaskRemoveFromEventList>
 8011364:	4603      	mov	r3, r0
 8011366:	2b00      	cmp	r3, #0
 8011368:	d012      	beq.n	8011390 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801136a:	4b0d      	ldr	r3, [pc, #52]	; (80113a0 <xQueueGenericReset+0xcc>)
 801136c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011370:	601a      	str	r2, [r3, #0]
 8011372:	f3bf 8f4f 	dsb	sy
 8011376:	f3bf 8f6f 	isb	sy
 801137a:	e009      	b.n	8011390 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	3310      	adds	r3, #16
 8011380:	4618      	mov	r0, r3
 8011382:	f7ff fef3 	bl	801116c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	3324      	adds	r3, #36	; 0x24
 801138a:	4618      	mov	r0, r3
 801138c:	f7ff feee 	bl	801116c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011390:	f002 f8b2 	bl	80134f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011394:	2301      	movs	r3, #1
}
 8011396:	4618      	mov	r0, r3
 8011398:	3710      	adds	r7, #16
 801139a:	46bd      	mov	sp, r7
 801139c:	bd80      	pop	{r7, pc}
 801139e:	bf00      	nop
 80113a0:	e000ed04 	.word	0xe000ed04

080113a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b08e      	sub	sp, #56	; 0x38
 80113a8:	af02      	add	r7, sp, #8
 80113aa:	60f8      	str	r0, [r7, #12]
 80113ac:	60b9      	str	r1, [r7, #8]
 80113ae:	607a      	str	r2, [r7, #4]
 80113b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d109      	bne.n	80113cc <xQueueGenericCreateStatic+0x28>
 80113b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113bc:	f383 8811 	msr	BASEPRI, r3
 80113c0:	f3bf 8f6f 	isb	sy
 80113c4:	f3bf 8f4f 	dsb	sy
 80113c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80113ca:	e7fe      	b.n	80113ca <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d109      	bne.n	80113e6 <xQueueGenericCreateStatic+0x42>
 80113d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113d6:	f383 8811 	msr	BASEPRI, r3
 80113da:	f3bf 8f6f 	isb	sy
 80113de:	f3bf 8f4f 	dsb	sy
 80113e2:	627b      	str	r3, [r7, #36]	; 0x24
 80113e4:	e7fe      	b.n	80113e4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d002      	beq.n	80113f2 <xQueueGenericCreateStatic+0x4e>
 80113ec:	68bb      	ldr	r3, [r7, #8]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d001      	beq.n	80113f6 <xQueueGenericCreateStatic+0x52>
 80113f2:	2301      	movs	r3, #1
 80113f4:	e000      	b.n	80113f8 <xQueueGenericCreateStatic+0x54>
 80113f6:	2300      	movs	r3, #0
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d109      	bne.n	8011410 <xQueueGenericCreateStatic+0x6c>
 80113fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011400:	f383 8811 	msr	BASEPRI, r3
 8011404:	f3bf 8f6f 	isb	sy
 8011408:	f3bf 8f4f 	dsb	sy
 801140c:	623b      	str	r3, [r7, #32]
 801140e:	e7fe      	b.n	801140e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d102      	bne.n	801141c <xQueueGenericCreateStatic+0x78>
 8011416:	68bb      	ldr	r3, [r7, #8]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d101      	bne.n	8011420 <xQueueGenericCreateStatic+0x7c>
 801141c:	2301      	movs	r3, #1
 801141e:	e000      	b.n	8011422 <xQueueGenericCreateStatic+0x7e>
 8011420:	2300      	movs	r3, #0
 8011422:	2b00      	cmp	r3, #0
 8011424:	d109      	bne.n	801143a <xQueueGenericCreateStatic+0x96>
 8011426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801142a:	f383 8811 	msr	BASEPRI, r3
 801142e:	f3bf 8f6f 	isb	sy
 8011432:	f3bf 8f4f 	dsb	sy
 8011436:	61fb      	str	r3, [r7, #28]
 8011438:	e7fe      	b.n	8011438 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801143a:	2350      	movs	r3, #80	; 0x50
 801143c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801143e:	697b      	ldr	r3, [r7, #20]
 8011440:	2b50      	cmp	r3, #80	; 0x50
 8011442:	d009      	beq.n	8011458 <xQueueGenericCreateStatic+0xb4>
 8011444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011448:	f383 8811 	msr	BASEPRI, r3
 801144c:	f3bf 8f6f 	isb	sy
 8011450:	f3bf 8f4f 	dsb	sy
 8011454:	61bb      	str	r3, [r7, #24]
 8011456:	e7fe      	b.n	8011456 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011458:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801145e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011460:	2b00      	cmp	r3, #0
 8011462:	d00d      	beq.n	8011480 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011466:	2201      	movs	r2, #1
 8011468:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801146c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011472:	9300      	str	r3, [sp, #0]
 8011474:	4613      	mov	r3, r2
 8011476:	687a      	ldr	r2, [r7, #4]
 8011478:	68b9      	ldr	r1, [r7, #8]
 801147a:	68f8      	ldr	r0, [r7, #12]
 801147c:	f000 f844 	bl	8011508 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011482:	4618      	mov	r0, r3
 8011484:	3730      	adds	r7, #48	; 0x30
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}

0801148a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801148a:	b580      	push	{r7, lr}
 801148c:	b08a      	sub	sp, #40	; 0x28
 801148e:	af02      	add	r7, sp, #8
 8011490:	60f8      	str	r0, [r7, #12]
 8011492:	60b9      	str	r1, [r7, #8]
 8011494:	4613      	mov	r3, r2
 8011496:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d109      	bne.n	80114b2 <xQueueGenericCreate+0x28>
 801149e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114a2:	f383 8811 	msr	BASEPRI, r3
 80114a6:	f3bf 8f6f 	isb	sy
 80114aa:	f3bf 8f4f 	dsb	sy
 80114ae:	613b      	str	r3, [r7, #16]
 80114b0:	e7fe      	b.n	80114b0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d102      	bne.n	80114be <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80114b8:	2300      	movs	r3, #0
 80114ba:	61fb      	str	r3, [r7, #28]
 80114bc:	e004      	b.n	80114c8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	68ba      	ldr	r2, [r7, #8]
 80114c2:	fb02 f303 	mul.w	r3, r2, r3
 80114c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80114c8:	69fb      	ldr	r3, [r7, #28]
 80114ca:	3350      	adds	r3, #80	; 0x50
 80114cc:	4618      	mov	r0, r3
 80114ce:	f002 f8ff 	bl	80136d0 <pvPortMalloc>
 80114d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80114d4:	69bb      	ldr	r3, [r7, #24]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d011      	beq.n	80114fe <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80114da:	69bb      	ldr	r3, [r7, #24]
 80114dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80114de:	697b      	ldr	r3, [r7, #20]
 80114e0:	3350      	adds	r3, #80	; 0x50
 80114e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80114e4:	69bb      	ldr	r3, [r7, #24]
 80114e6:	2200      	movs	r2, #0
 80114e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80114ec:	79fa      	ldrb	r2, [r7, #7]
 80114ee:	69bb      	ldr	r3, [r7, #24]
 80114f0:	9300      	str	r3, [sp, #0]
 80114f2:	4613      	mov	r3, r2
 80114f4:	697a      	ldr	r2, [r7, #20]
 80114f6:	68b9      	ldr	r1, [r7, #8]
 80114f8:	68f8      	ldr	r0, [r7, #12]
 80114fa:	f000 f805 	bl	8011508 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80114fe:	69bb      	ldr	r3, [r7, #24]
	}
 8011500:	4618      	mov	r0, r3
 8011502:	3720      	adds	r7, #32
 8011504:	46bd      	mov	sp, r7
 8011506:	bd80      	pop	{r7, pc}

08011508 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011508:	b580      	push	{r7, lr}
 801150a:	b084      	sub	sp, #16
 801150c:	af00      	add	r7, sp, #0
 801150e:	60f8      	str	r0, [r7, #12]
 8011510:	60b9      	str	r1, [r7, #8]
 8011512:	607a      	str	r2, [r7, #4]
 8011514:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011516:	68bb      	ldr	r3, [r7, #8]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d103      	bne.n	8011524 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801151c:	69bb      	ldr	r3, [r7, #24]
 801151e:	69ba      	ldr	r2, [r7, #24]
 8011520:	601a      	str	r2, [r3, #0]
 8011522:	e002      	b.n	801152a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011524:	69bb      	ldr	r3, [r7, #24]
 8011526:	687a      	ldr	r2, [r7, #4]
 8011528:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801152a:	69bb      	ldr	r3, [r7, #24]
 801152c:	68fa      	ldr	r2, [r7, #12]
 801152e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011530:	69bb      	ldr	r3, [r7, #24]
 8011532:	68ba      	ldr	r2, [r7, #8]
 8011534:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011536:	2101      	movs	r1, #1
 8011538:	69b8      	ldr	r0, [r7, #24]
 801153a:	f7ff fecb 	bl	80112d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801153e:	69bb      	ldr	r3, [r7, #24]
 8011540:	78fa      	ldrb	r2, [r7, #3]
 8011542:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011546:	bf00      	nop
 8011548:	3710      	adds	r7, #16
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}
	...

08011550 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011550:	b580      	push	{r7, lr}
 8011552:	b08e      	sub	sp, #56	; 0x38
 8011554:	af00      	add	r7, sp, #0
 8011556:	60f8      	str	r0, [r7, #12]
 8011558:	60b9      	str	r1, [r7, #8]
 801155a:	607a      	str	r2, [r7, #4]
 801155c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801155e:	2300      	movs	r3, #0
 8011560:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011568:	2b00      	cmp	r3, #0
 801156a:	d109      	bne.n	8011580 <xQueueGenericSend+0x30>
 801156c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011570:	f383 8811 	msr	BASEPRI, r3
 8011574:	f3bf 8f6f 	isb	sy
 8011578:	f3bf 8f4f 	dsb	sy
 801157c:	62bb      	str	r3, [r7, #40]	; 0x28
 801157e:	e7fe      	b.n	801157e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d103      	bne.n	801158e <xQueueGenericSend+0x3e>
 8011586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801158a:	2b00      	cmp	r3, #0
 801158c:	d101      	bne.n	8011592 <xQueueGenericSend+0x42>
 801158e:	2301      	movs	r3, #1
 8011590:	e000      	b.n	8011594 <xQueueGenericSend+0x44>
 8011592:	2300      	movs	r3, #0
 8011594:	2b00      	cmp	r3, #0
 8011596:	d109      	bne.n	80115ac <xQueueGenericSend+0x5c>
 8011598:	f04f 0350 	mov.w	r3, #80	; 0x50
 801159c:	f383 8811 	msr	BASEPRI, r3
 80115a0:	f3bf 8f6f 	isb	sy
 80115a4:	f3bf 8f4f 	dsb	sy
 80115a8:	627b      	str	r3, [r7, #36]	; 0x24
 80115aa:	e7fe      	b.n	80115aa <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80115ac:	683b      	ldr	r3, [r7, #0]
 80115ae:	2b02      	cmp	r3, #2
 80115b0:	d103      	bne.n	80115ba <xQueueGenericSend+0x6a>
 80115b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115b6:	2b01      	cmp	r3, #1
 80115b8:	d101      	bne.n	80115be <xQueueGenericSend+0x6e>
 80115ba:	2301      	movs	r3, #1
 80115bc:	e000      	b.n	80115c0 <xQueueGenericSend+0x70>
 80115be:	2300      	movs	r3, #0
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d109      	bne.n	80115d8 <xQueueGenericSend+0x88>
 80115c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115c8:	f383 8811 	msr	BASEPRI, r3
 80115cc:	f3bf 8f6f 	isb	sy
 80115d0:	f3bf 8f4f 	dsb	sy
 80115d4:	623b      	str	r3, [r7, #32]
 80115d6:	e7fe      	b.n	80115d6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80115d8:	f001 fa16 	bl	8012a08 <xTaskGetSchedulerState>
 80115dc:	4603      	mov	r3, r0
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d102      	bne.n	80115e8 <xQueueGenericSend+0x98>
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d101      	bne.n	80115ec <xQueueGenericSend+0x9c>
 80115e8:	2301      	movs	r3, #1
 80115ea:	e000      	b.n	80115ee <xQueueGenericSend+0x9e>
 80115ec:	2300      	movs	r3, #0
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d109      	bne.n	8011606 <xQueueGenericSend+0xb6>
 80115f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115f6:	f383 8811 	msr	BASEPRI, r3
 80115fa:	f3bf 8f6f 	isb	sy
 80115fe:	f3bf 8f4f 	dsb	sy
 8011602:	61fb      	str	r3, [r7, #28]
 8011604:	e7fe      	b.n	8011604 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011606:	f001 ff49 	bl	801349c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801160a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801160c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801160e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011612:	429a      	cmp	r2, r3
 8011614:	d302      	bcc.n	801161c <xQueueGenericSend+0xcc>
 8011616:	683b      	ldr	r3, [r7, #0]
 8011618:	2b02      	cmp	r3, #2
 801161a:	d129      	bne.n	8011670 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801161c:	683a      	ldr	r2, [r7, #0]
 801161e:	68b9      	ldr	r1, [r7, #8]
 8011620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011622:	f000 fa7c 	bl	8011b1e <prvCopyDataToQueue>
 8011626:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801162c:	2b00      	cmp	r3, #0
 801162e:	d010      	beq.n	8011652 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011632:	3324      	adds	r3, #36	; 0x24
 8011634:	4618      	mov	r0, r3
 8011636:	f001 f831 	bl	801269c <xTaskRemoveFromEventList>
 801163a:	4603      	mov	r3, r0
 801163c:	2b00      	cmp	r3, #0
 801163e:	d013      	beq.n	8011668 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011640:	4b3f      	ldr	r3, [pc, #252]	; (8011740 <xQueueGenericSend+0x1f0>)
 8011642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011646:	601a      	str	r2, [r3, #0]
 8011648:	f3bf 8f4f 	dsb	sy
 801164c:	f3bf 8f6f 	isb	sy
 8011650:	e00a      	b.n	8011668 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011654:	2b00      	cmp	r3, #0
 8011656:	d007      	beq.n	8011668 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011658:	4b39      	ldr	r3, [pc, #228]	; (8011740 <xQueueGenericSend+0x1f0>)
 801165a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801165e:	601a      	str	r2, [r3, #0]
 8011660:	f3bf 8f4f 	dsb	sy
 8011664:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011668:	f001 ff46 	bl	80134f8 <vPortExitCritical>
				return pdPASS;
 801166c:	2301      	movs	r3, #1
 801166e:	e063      	b.n	8011738 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d103      	bne.n	801167e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011676:	f001 ff3f 	bl	80134f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801167a:	2300      	movs	r3, #0
 801167c:	e05c      	b.n	8011738 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801167e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011680:	2b00      	cmp	r3, #0
 8011682:	d106      	bne.n	8011692 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011684:	f107 0314 	add.w	r3, r7, #20
 8011688:	4618      	mov	r0, r3
 801168a:	f001 f869 	bl	8012760 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801168e:	2301      	movs	r3, #1
 8011690:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011692:	f001 ff31 	bl	80134f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011696:	f000 fde5 	bl	8012264 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801169a:	f001 feff 	bl	801349c <vPortEnterCritical>
 801169e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80116a4:	b25b      	sxtb	r3, r3
 80116a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116aa:	d103      	bne.n	80116b4 <xQueueGenericSend+0x164>
 80116ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ae:	2200      	movs	r2, #0
 80116b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80116b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80116ba:	b25b      	sxtb	r3, r3
 80116bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116c0:	d103      	bne.n	80116ca <xQueueGenericSend+0x17a>
 80116c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116c4:	2200      	movs	r2, #0
 80116c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80116ca:	f001 ff15 	bl	80134f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80116ce:	1d3a      	adds	r2, r7, #4
 80116d0:	f107 0314 	add.w	r3, r7, #20
 80116d4:	4611      	mov	r1, r2
 80116d6:	4618      	mov	r0, r3
 80116d8:	f001 f858 	bl	801278c <xTaskCheckForTimeOut>
 80116dc:	4603      	mov	r3, r0
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d124      	bne.n	801172c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80116e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116e4:	f000 fb13 	bl	8011d0e <prvIsQueueFull>
 80116e8:	4603      	mov	r3, r0
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d018      	beq.n	8011720 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80116ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116f0:	3310      	adds	r3, #16
 80116f2:	687a      	ldr	r2, [r7, #4]
 80116f4:	4611      	mov	r1, r2
 80116f6:	4618      	mov	r0, r3
 80116f8:	f000 ff82 	bl	8012600 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80116fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116fe:	f000 fa9e 	bl	8011c3e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011702:	f000 fdbd 	bl	8012280 <xTaskResumeAll>
 8011706:	4603      	mov	r3, r0
 8011708:	2b00      	cmp	r3, #0
 801170a:	f47f af7c 	bne.w	8011606 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 801170e:	4b0c      	ldr	r3, [pc, #48]	; (8011740 <xQueueGenericSend+0x1f0>)
 8011710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011714:	601a      	str	r2, [r3, #0]
 8011716:	f3bf 8f4f 	dsb	sy
 801171a:	f3bf 8f6f 	isb	sy
 801171e:	e772      	b.n	8011606 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011720:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011722:	f000 fa8c 	bl	8011c3e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011726:	f000 fdab 	bl	8012280 <xTaskResumeAll>
 801172a:	e76c      	b.n	8011606 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801172c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801172e:	f000 fa86 	bl	8011c3e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011732:	f000 fda5 	bl	8012280 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011736:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011738:	4618      	mov	r0, r3
 801173a:	3738      	adds	r7, #56	; 0x38
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}
 8011740:	e000ed04 	.word	0xe000ed04

08011744 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b08e      	sub	sp, #56	; 0x38
 8011748:	af00      	add	r7, sp, #0
 801174a:	60f8      	str	r0, [r7, #12]
 801174c:	60b9      	str	r1, [r7, #8]
 801174e:	607a      	str	r2, [r7, #4]
 8011750:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011758:	2b00      	cmp	r3, #0
 801175a:	d109      	bne.n	8011770 <xQueueGenericSendFromISR+0x2c>
 801175c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011760:	f383 8811 	msr	BASEPRI, r3
 8011764:	f3bf 8f6f 	isb	sy
 8011768:	f3bf 8f4f 	dsb	sy
 801176c:	627b      	str	r3, [r7, #36]	; 0x24
 801176e:	e7fe      	b.n	801176e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011770:	68bb      	ldr	r3, [r7, #8]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d103      	bne.n	801177e <xQueueGenericSendFromISR+0x3a>
 8011776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801177a:	2b00      	cmp	r3, #0
 801177c:	d101      	bne.n	8011782 <xQueueGenericSendFromISR+0x3e>
 801177e:	2301      	movs	r3, #1
 8011780:	e000      	b.n	8011784 <xQueueGenericSendFromISR+0x40>
 8011782:	2300      	movs	r3, #0
 8011784:	2b00      	cmp	r3, #0
 8011786:	d109      	bne.n	801179c <xQueueGenericSendFromISR+0x58>
 8011788:	f04f 0350 	mov.w	r3, #80	; 0x50
 801178c:	f383 8811 	msr	BASEPRI, r3
 8011790:	f3bf 8f6f 	isb	sy
 8011794:	f3bf 8f4f 	dsb	sy
 8011798:	623b      	str	r3, [r7, #32]
 801179a:	e7fe      	b.n	801179a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801179c:	683b      	ldr	r3, [r7, #0]
 801179e:	2b02      	cmp	r3, #2
 80117a0:	d103      	bne.n	80117aa <xQueueGenericSendFromISR+0x66>
 80117a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117a6:	2b01      	cmp	r3, #1
 80117a8:	d101      	bne.n	80117ae <xQueueGenericSendFromISR+0x6a>
 80117aa:	2301      	movs	r3, #1
 80117ac:	e000      	b.n	80117b0 <xQueueGenericSendFromISR+0x6c>
 80117ae:	2300      	movs	r3, #0
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d109      	bne.n	80117c8 <xQueueGenericSendFromISR+0x84>
 80117b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117b8:	f383 8811 	msr	BASEPRI, r3
 80117bc:	f3bf 8f6f 	isb	sy
 80117c0:	f3bf 8f4f 	dsb	sy
 80117c4:	61fb      	str	r3, [r7, #28]
 80117c6:	e7fe      	b.n	80117c6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80117c8:	f001 ff44 	bl	8013654 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80117cc:	f3ef 8211 	mrs	r2, BASEPRI
 80117d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117d4:	f383 8811 	msr	BASEPRI, r3
 80117d8:	f3bf 8f6f 	isb	sy
 80117dc:	f3bf 8f4f 	dsb	sy
 80117e0:	61ba      	str	r2, [r7, #24]
 80117e2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80117e4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80117e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80117e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80117ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117f0:	429a      	cmp	r2, r3
 80117f2:	d302      	bcc.n	80117fa <xQueueGenericSendFromISR+0xb6>
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	2b02      	cmp	r3, #2
 80117f8:	d12c      	bne.n	8011854 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80117fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011800:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011804:	683a      	ldr	r2, [r7, #0]
 8011806:	68b9      	ldr	r1, [r7, #8]
 8011808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801180a:	f000 f988 	bl	8011b1e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801180e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8011812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011816:	d112      	bne.n	801183e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801181c:	2b00      	cmp	r3, #0
 801181e:	d016      	beq.n	801184e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011822:	3324      	adds	r3, #36	; 0x24
 8011824:	4618      	mov	r0, r3
 8011826:	f000 ff39 	bl	801269c <xTaskRemoveFromEventList>
 801182a:	4603      	mov	r3, r0
 801182c:	2b00      	cmp	r3, #0
 801182e:	d00e      	beq.n	801184e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d00b      	beq.n	801184e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	2201      	movs	r2, #1
 801183a:	601a      	str	r2, [r3, #0]
 801183c:	e007      	b.n	801184e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801183e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011842:	3301      	adds	r3, #1
 8011844:	b2db      	uxtb	r3, r3
 8011846:	b25a      	sxtb	r2, r3
 8011848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801184a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801184e:	2301      	movs	r3, #1
 8011850:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8011852:	e001      	b.n	8011858 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011854:	2300      	movs	r3, #0
 8011856:	637b      	str	r3, [r7, #52]	; 0x34
 8011858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801185a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801185c:	693b      	ldr	r3, [r7, #16]
 801185e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011864:	4618      	mov	r0, r3
 8011866:	3738      	adds	r7, #56	; 0x38
 8011868:	46bd      	mov	sp, r7
 801186a:	bd80      	pop	{r7, pc}

0801186c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801186c:	b580      	push	{r7, lr}
 801186e:	b08c      	sub	sp, #48	; 0x30
 8011870:	af00      	add	r7, sp, #0
 8011872:	60f8      	str	r0, [r7, #12]
 8011874:	60b9      	str	r1, [r7, #8]
 8011876:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011878:	2300      	movs	r3, #0
 801187a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011882:	2b00      	cmp	r3, #0
 8011884:	d109      	bne.n	801189a <xQueueReceive+0x2e>
	__asm volatile
 8011886:	f04f 0350 	mov.w	r3, #80	; 0x50
 801188a:	f383 8811 	msr	BASEPRI, r3
 801188e:	f3bf 8f6f 	isb	sy
 8011892:	f3bf 8f4f 	dsb	sy
 8011896:	623b      	str	r3, [r7, #32]
 8011898:	e7fe      	b.n	8011898 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801189a:	68bb      	ldr	r3, [r7, #8]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d103      	bne.n	80118a8 <xQueueReceive+0x3c>
 80118a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d101      	bne.n	80118ac <xQueueReceive+0x40>
 80118a8:	2301      	movs	r3, #1
 80118aa:	e000      	b.n	80118ae <xQueueReceive+0x42>
 80118ac:	2300      	movs	r3, #0
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d109      	bne.n	80118c6 <xQueueReceive+0x5a>
 80118b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118b6:	f383 8811 	msr	BASEPRI, r3
 80118ba:	f3bf 8f6f 	isb	sy
 80118be:	f3bf 8f4f 	dsb	sy
 80118c2:	61fb      	str	r3, [r7, #28]
 80118c4:	e7fe      	b.n	80118c4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80118c6:	f001 f89f 	bl	8012a08 <xTaskGetSchedulerState>
 80118ca:	4603      	mov	r3, r0
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d102      	bne.n	80118d6 <xQueueReceive+0x6a>
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d101      	bne.n	80118da <xQueueReceive+0x6e>
 80118d6:	2301      	movs	r3, #1
 80118d8:	e000      	b.n	80118dc <xQueueReceive+0x70>
 80118da:	2300      	movs	r3, #0
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d109      	bne.n	80118f4 <xQueueReceive+0x88>
 80118e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118e4:	f383 8811 	msr	BASEPRI, r3
 80118e8:	f3bf 8f6f 	isb	sy
 80118ec:	f3bf 8f4f 	dsb	sy
 80118f0:	61bb      	str	r3, [r7, #24]
 80118f2:	e7fe      	b.n	80118f2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80118f4:	f001 fdd2 	bl	801349c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80118f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118fc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80118fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011900:	2b00      	cmp	r3, #0
 8011902:	d01f      	beq.n	8011944 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011904:	68b9      	ldr	r1, [r7, #8]
 8011906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011908:	f000 f973 	bl	8011bf2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801190e:	1e5a      	subs	r2, r3, #1
 8011910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011912:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011916:	691b      	ldr	r3, [r3, #16]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d00f      	beq.n	801193c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801191c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801191e:	3310      	adds	r3, #16
 8011920:	4618      	mov	r0, r3
 8011922:	f000 febb 	bl	801269c <xTaskRemoveFromEventList>
 8011926:	4603      	mov	r3, r0
 8011928:	2b00      	cmp	r3, #0
 801192a:	d007      	beq.n	801193c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801192c:	4b3c      	ldr	r3, [pc, #240]	; (8011a20 <xQueueReceive+0x1b4>)
 801192e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011932:	601a      	str	r2, [r3, #0]
 8011934:	f3bf 8f4f 	dsb	sy
 8011938:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801193c:	f001 fddc 	bl	80134f8 <vPortExitCritical>
				return pdPASS;
 8011940:	2301      	movs	r3, #1
 8011942:	e069      	b.n	8011a18 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d103      	bne.n	8011952 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801194a:	f001 fdd5 	bl	80134f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801194e:	2300      	movs	r3, #0
 8011950:	e062      	b.n	8011a18 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011954:	2b00      	cmp	r3, #0
 8011956:	d106      	bne.n	8011966 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011958:	f107 0310 	add.w	r3, r7, #16
 801195c:	4618      	mov	r0, r3
 801195e:	f000 feff 	bl	8012760 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011962:	2301      	movs	r3, #1
 8011964:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011966:	f001 fdc7 	bl	80134f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801196a:	f000 fc7b 	bl	8012264 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801196e:	f001 fd95 	bl	801349c <vPortEnterCritical>
 8011972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011974:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011978:	b25b      	sxtb	r3, r3
 801197a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801197e:	d103      	bne.n	8011988 <xQueueReceive+0x11c>
 8011980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011982:	2200      	movs	r2, #0
 8011984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801198a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801198e:	b25b      	sxtb	r3, r3
 8011990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011994:	d103      	bne.n	801199e <xQueueReceive+0x132>
 8011996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011998:	2200      	movs	r2, #0
 801199a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801199e:	f001 fdab 	bl	80134f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80119a2:	1d3a      	adds	r2, r7, #4
 80119a4:	f107 0310 	add.w	r3, r7, #16
 80119a8:	4611      	mov	r1, r2
 80119aa:	4618      	mov	r0, r3
 80119ac:	f000 feee 	bl	801278c <xTaskCheckForTimeOut>
 80119b0:	4603      	mov	r3, r0
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d123      	bne.n	80119fe <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80119b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119b8:	f000 f993 	bl	8011ce2 <prvIsQueueEmpty>
 80119bc:	4603      	mov	r3, r0
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d017      	beq.n	80119f2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80119c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119c4:	3324      	adds	r3, #36	; 0x24
 80119c6:	687a      	ldr	r2, [r7, #4]
 80119c8:	4611      	mov	r1, r2
 80119ca:	4618      	mov	r0, r3
 80119cc:	f000 fe18 	bl	8012600 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80119d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119d2:	f000 f934 	bl	8011c3e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80119d6:	f000 fc53 	bl	8012280 <xTaskResumeAll>
 80119da:	4603      	mov	r3, r0
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d189      	bne.n	80118f4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80119e0:	4b0f      	ldr	r3, [pc, #60]	; (8011a20 <xQueueReceive+0x1b4>)
 80119e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119e6:	601a      	str	r2, [r3, #0]
 80119e8:	f3bf 8f4f 	dsb	sy
 80119ec:	f3bf 8f6f 	isb	sy
 80119f0:	e780      	b.n	80118f4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80119f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119f4:	f000 f923 	bl	8011c3e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80119f8:	f000 fc42 	bl	8012280 <xTaskResumeAll>
 80119fc:	e77a      	b.n	80118f4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80119fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a00:	f000 f91d 	bl	8011c3e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011a04:	f000 fc3c 	bl	8012280 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011a08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a0a:	f000 f96a 	bl	8011ce2 <prvIsQueueEmpty>
 8011a0e:	4603      	mov	r3, r0
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	f43f af6f 	beq.w	80118f4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011a16:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011a18:	4618      	mov	r0, r3
 8011a1a:	3730      	adds	r7, #48	; 0x30
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd80      	pop	{r7, pc}
 8011a20:	e000ed04 	.word	0xe000ed04

08011a24 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b08e      	sub	sp, #56	; 0x38
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	60f8      	str	r0, [r7, #12]
 8011a2c:	60b9      	str	r1, [r7, #8]
 8011a2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d109      	bne.n	8011a4e <xQueueReceiveFromISR+0x2a>
 8011a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a3e:	f383 8811 	msr	BASEPRI, r3
 8011a42:	f3bf 8f6f 	isb	sy
 8011a46:	f3bf 8f4f 	dsb	sy
 8011a4a:	623b      	str	r3, [r7, #32]
 8011a4c:	e7fe      	b.n	8011a4c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011a4e:	68bb      	ldr	r3, [r7, #8]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d103      	bne.n	8011a5c <xQueueReceiveFromISR+0x38>
 8011a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d101      	bne.n	8011a60 <xQueueReceiveFromISR+0x3c>
 8011a5c:	2301      	movs	r3, #1
 8011a5e:	e000      	b.n	8011a62 <xQueueReceiveFromISR+0x3e>
 8011a60:	2300      	movs	r3, #0
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d109      	bne.n	8011a7a <xQueueReceiveFromISR+0x56>
 8011a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a6a:	f383 8811 	msr	BASEPRI, r3
 8011a6e:	f3bf 8f6f 	isb	sy
 8011a72:	f3bf 8f4f 	dsb	sy
 8011a76:	61fb      	str	r3, [r7, #28]
 8011a78:	e7fe      	b.n	8011a78 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011a7a:	f001 fdeb 	bl	8013654 <vPortValidateInterruptPriority>
	__asm volatile
 8011a7e:	f3ef 8211 	mrs	r2, BASEPRI
 8011a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a86:	f383 8811 	msr	BASEPRI, r3
 8011a8a:	f3bf 8f6f 	isb	sy
 8011a8e:	f3bf 8f4f 	dsb	sy
 8011a92:	61ba      	str	r2, [r7, #24]
 8011a94:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011a96:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011a98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a9e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d02f      	beq.n	8011b06 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011ab0:	68b9      	ldr	r1, [r7, #8]
 8011ab2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ab4:	f000 f89d 	bl	8011bf2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aba:	1e5a      	subs	r2, r3, #1
 8011abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011abe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011ac0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ac8:	d112      	bne.n	8011af0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011acc:	691b      	ldr	r3, [r3, #16]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d016      	beq.n	8011b00 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ad4:	3310      	adds	r3, #16
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	f000 fde0 	bl	801269c <xTaskRemoveFromEventList>
 8011adc:	4603      	mov	r3, r0
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d00e      	beq.n	8011b00 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d00b      	beq.n	8011b00 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	2201      	movs	r2, #1
 8011aec:	601a      	str	r2, [r3, #0]
 8011aee:	e007      	b.n	8011b00 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011af4:	3301      	adds	r3, #1
 8011af6:	b2db      	uxtb	r3, r3
 8011af8:	b25a      	sxtb	r2, r3
 8011afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011b00:	2301      	movs	r3, #1
 8011b02:	637b      	str	r3, [r7, #52]	; 0x34
 8011b04:	e001      	b.n	8011b0a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8011b06:	2300      	movs	r3, #0
 8011b08:	637b      	str	r3, [r7, #52]	; 0x34
 8011b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b0c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011b0e:	693b      	ldr	r3, [r7, #16]
 8011b10:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011b16:	4618      	mov	r0, r3
 8011b18:	3738      	adds	r7, #56	; 0x38
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}

08011b1e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011b1e:	b580      	push	{r7, lr}
 8011b20:	b086      	sub	sp, #24
 8011b22:	af00      	add	r7, sp, #0
 8011b24:	60f8      	str	r0, [r7, #12]
 8011b26:	60b9      	str	r1, [r7, #8]
 8011b28:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b32:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d10d      	bne.n	8011b58 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d14d      	bne.n	8011be0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	689b      	ldr	r3, [r3, #8]
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f000 ff7b 	bl	8012a44 <xTaskPriorityDisinherit>
 8011b4e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	2200      	movs	r2, #0
 8011b54:	609a      	str	r2, [r3, #8]
 8011b56:	e043      	b.n	8011be0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d119      	bne.n	8011b92 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	6858      	ldr	r0, [r3, #4]
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b66:	461a      	mov	r2, r3
 8011b68:	68b9      	ldr	r1, [r7, #8]
 8011b6a:	f002 fac3 	bl	80140f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	685a      	ldr	r2, [r3, #4]
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b76:	441a      	add	r2, r3
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	685a      	ldr	r2, [r3, #4]
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	689b      	ldr	r3, [r3, #8]
 8011b84:	429a      	cmp	r2, r3
 8011b86:	d32b      	bcc.n	8011be0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	681a      	ldr	r2, [r3, #0]
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	605a      	str	r2, [r3, #4]
 8011b90:	e026      	b.n	8011be0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	68d8      	ldr	r0, [r3, #12]
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b9a:	461a      	mov	r2, r3
 8011b9c:	68b9      	ldr	r1, [r7, #8]
 8011b9e:	f002 faa9 	bl	80140f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	68da      	ldr	r2, [r3, #12]
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011baa:	425b      	negs	r3, r3
 8011bac:	441a      	add	r2, r3
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	68da      	ldr	r2, [r3, #12]
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	429a      	cmp	r2, r3
 8011bbc:	d207      	bcs.n	8011bce <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	689a      	ldr	r2, [r3, #8]
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bc6:	425b      	negs	r3, r3
 8011bc8:	441a      	add	r2, r3
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	2b02      	cmp	r3, #2
 8011bd2:	d105      	bne.n	8011be0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011bd4:	693b      	ldr	r3, [r7, #16]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d002      	beq.n	8011be0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011bda:	693b      	ldr	r3, [r7, #16]
 8011bdc:	3b01      	subs	r3, #1
 8011bde:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011be0:	693b      	ldr	r3, [r7, #16]
 8011be2:	1c5a      	adds	r2, r3, #1
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011be8:	697b      	ldr	r3, [r7, #20]
}
 8011bea:	4618      	mov	r0, r3
 8011bec:	3718      	adds	r7, #24
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	bd80      	pop	{r7, pc}

08011bf2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011bf2:	b580      	push	{r7, lr}
 8011bf4:	b082      	sub	sp, #8
 8011bf6:	af00      	add	r7, sp, #0
 8011bf8:	6078      	str	r0, [r7, #4]
 8011bfa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d018      	beq.n	8011c36 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	68da      	ldr	r2, [r3, #12]
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c0c:	441a      	add	r2, r3
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	68da      	ldr	r2, [r3, #12]
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	689b      	ldr	r3, [r3, #8]
 8011c1a:	429a      	cmp	r2, r3
 8011c1c:	d303      	bcc.n	8011c26 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	681a      	ldr	r2, [r3, #0]
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	68d9      	ldr	r1, [r3, #12]
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c2e:	461a      	mov	r2, r3
 8011c30:	6838      	ldr	r0, [r7, #0]
 8011c32:	f002 fa5f 	bl	80140f4 <memcpy>
	}
}
 8011c36:	bf00      	nop
 8011c38:	3708      	adds	r7, #8
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd80      	pop	{r7, pc}

08011c3e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011c3e:	b580      	push	{r7, lr}
 8011c40:	b084      	sub	sp, #16
 8011c42:	af00      	add	r7, sp, #0
 8011c44:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011c46:	f001 fc29 	bl	801349c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011c50:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011c52:	e011      	b.n	8011c78 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d012      	beq.n	8011c82 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	3324      	adds	r3, #36	; 0x24
 8011c60:	4618      	mov	r0, r3
 8011c62:	f000 fd1b 	bl	801269c <xTaskRemoveFromEventList>
 8011c66:	4603      	mov	r3, r0
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d001      	beq.n	8011c70 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011c6c:	f000 fdee 	bl	801284c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011c70:	7bfb      	ldrb	r3, [r7, #15]
 8011c72:	3b01      	subs	r3, #1
 8011c74:	b2db      	uxtb	r3, r3
 8011c76:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	dce9      	bgt.n	8011c54 <prvUnlockQueue+0x16>
 8011c80:	e000      	b.n	8011c84 <prvUnlockQueue+0x46>
					break;
 8011c82:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	22ff      	movs	r2, #255	; 0xff
 8011c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011c8c:	f001 fc34 	bl	80134f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011c90:	f001 fc04 	bl	801349c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011c9a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011c9c:	e011      	b.n	8011cc2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	691b      	ldr	r3, [r3, #16]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d012      	beq.n	8011ccc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	3310      	adds	r3, #16
 8011caa:	4618      	mov	r0, r3
 8011cac:	f000 fcf6 	bl	801269c <xTaskRemoveFromEventList>
 8011cb0:	4603      	mov	r3, r0
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d001      	beq.n	8011cba <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011cb6:	f000 fdc9 	bl	801284c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011cba:	7bbb      	ldrb	r3, [r7, #14]
 8011cbc:	3b01      	subs	r3, #1
 8011cbe:	b2db      	uxtb	r3, r3
 8011cc0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011cc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	dce9      	bgt.n	8011c9e <prvUnlockQueue+0x60>
 8011cca:	e000      	b.n	8011cce <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011ccc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	22ff      	movs	r2, #255	; 0xff
 8011cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011cd6:	f001 fc0f 	bl	80134f8 <vPortExitCritical>
}
 8011cda:	bf00      	nop
 8011cdc:	3710      	adds	r7, #16
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	bd80      	pop	{r7, pc}

08011ce2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011ce2:	b580      	push	{r7, lr}
 8011ce4:	b084      	sub	sp, #16
 8011ce6:	af00      	add	r7, sp, #0
 8011ce8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011cea:	f001 fbd7 	bl	801349c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d102      	bne.n	8011cfc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011cf6:	2301      	movs	r3, #1
 8011cf8:	60fb      	str	r3, [r7, #12]
 8011cfa:	e001      	b.n	8011d00 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011d00:	f001 fbfa 	bl	80134f8 <vPortExitCritical>

	return xReturn;
 8011d04:	68fb      	ldr	r3, [r7, #12]
}
 8011d06:	4618      	mov	r0, r3
 8011d08:	3710      	adds	r7, #16
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	bd80      	pop	{r7, pc}

08011d0e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011d0e:	b580      	push	{r7, lr}
 8011d10:	b084      	sub	sp, #16
 8011d12:	af00      	add	r7, sp, #0
 8011d14:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011d16:	f001 fbc1 	bl	801349c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d22:	429a      	cmp	r2, r3
 8011d24:	d102      	bne.n	8011d2c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011d26:	2301      	movs	r3, #1
 8011d28:	60fb      	str	r3, [r7, #12]
 8011d2a:	e001      	b.n	8011d30 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011d30:	f001 fbe2 	bl	80134f8 <vPortExitCritical>

	return xReturn;
 8011d34:	68fb      	ldr	r3, [r7, #12]
}
 8011d36:	4618      	mov	r0, r3
 8011d38:	3710      	adds	r7, #16
 8011d3a:	46bd      	mov	sp, r7
 8011d3c:	bd80      	pop	{r7, pc}
	...

08011d40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011d40:	b480      	push	{r7}
 8011d42:	b085      	sub	sp, #20
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
 8011d48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	60fb      	str	r3, [r7, #12]
 8011d4e:	e014      	b.n	8011d7a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011d50:	4a0e      	ldr	r2, [pc, #56]	; (8011d8c <vQueueAddToRegistry+0x4c>)
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d10b      	bne.n	8011d74 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011d5c:	490b      	ldr	r1, [pc, #44]	; (8011d8c <vQueueAddToRegistry+0x4c>)
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	683a      	ldr	r2, [r7, #0]
 8011d62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011d66:	4a09      	ldr	r2, [pc, #36]	; (8011d8c <vQueueAddToRegistry+0x4c>)
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	00db      	lsls	r3, r3, #3
 8011d6c:	4413      	add	r3, r2
 8011d6e:	687a      	ldr	r2, [r7, #4]
 8011d70:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011d72:	e005      	b.n	8011d80 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	3301      	adds	r3, #1
 8011d78:	60fb      	str	r3, [r7, #12]
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	2b07      	cmp	r3, #7
 8011d7e:	d9e7      	bls.n	8011d50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011d80:	bf00      	nop
 8011d82:	3714      	adds	r7, #20
 8011d84:	46bd      	mov	sp, r7
 8011d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8a:	4770      	bx	lr
 8011d8c:	20021bcc 	.word	0x20021bcc

08011d90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b086      	sub	sp, #24
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	60f8      	str	r0, [r7, #12]
 8011d98:	60b9      	str	r1, [r7, #8]
 8011d9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011da0:	f001 fb7c 	bl	801349c <vPortEnterCritical>
 8011da4:	697b      	ldr	r3, [r7, #20]
 8011da6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011daa:	b25b      	sxtb	r3, r3
 8011dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011db0:	d103      	bne.n	8011dba <vQueueWaitForMessageRestricted+0x2a>
 8011db2:	697b      	ldr	r3, [r7, #20]
 8011db4:	2200      	movs	r2, #0
 8011db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011dba:	697b      	ldr	r3, [r7, #20]
 8011dbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011dc0:	b25b      	sxtb	r3, r3
 8011dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dc6:	d103      	bne.n	8011dd0 <vQueueWaitForMessageRestricted+0x40>
 8011dc8:	697b      	ldr	r3, [r7, #20]
 8011dca:	2200      	movs	r2, #0
 8011dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011dd0:	f001 fb92 	bl	80134f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011dd4:	697b      	ldr	r3, [r7, #20]
 8011dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d106      	bne.n	8011dea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011ddc:	697b      	ldr	r3, [r7, #20]
 8011dde:	3324      	adds	r3, #36	; 0x24
 8011de0:	687a      	ldr	r2, [r7, #4]
 8011de2:	68b9      	ldr	r1, [r7, #8]
 8011de4:	4618      	mov	r0, r3
 8011de6:	f000 fc2f 	bl	8012648 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011dea:	6978      	ldr	r0, [r7, #20]
 8011dec:	f7ff ff27 	bl	8011c3e <prvUnlockQueue>
	}
 8011df0:	bf00      	nop
 8011df2:	3718      	adds	r7, #24
 8011df4:	46bd      	mov	sp, r7
 8011df6:	bd80      	pop	{r7, pc}

08011df8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b08e      	sub	sp, #56	; 0x38
 8011dfc:	af04      	add	r7, sp, #16
 8011dfe:	60f8      	str	r0, [r7, #12]
 8011e00:	60b9      	str	r1, [r7, #8]
 8011e02:	607a      	str	r2, [r7, #4]
 8011e04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d109      	bne.n	8011e20 <xTaskCreateStatic+0x28>
	__asm volatile
 8011e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e10:	f383 8811 	msr	BASEPRI, r3
 8011e14:	f3bf 8f6f 	isb	sy
 8011e18:	f3bf 8f4f 	dsb	sy
 8011e1c:	623b      	str	r3, [r7, #32]
 8011e1e:	e7fe      	b.n	8011e1e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8011e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d109      	bne.n	8011e3a <xTaskCreateStatic+0x42>
 8011e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e2a:	f383 8811 	msr	BASEPRI, r3
 8011e2e:	f3bf 8f6f 	isb	sy
 8011e32:	f3bf 8f4f 	dsb	sy
 8011e36:	61fb      	str	r3, [r7, #28]
 8011e38:	e7fe      	b.n	8011e38 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011e3a:	235c      	movs	r3, #92	; 0x5c
 8011e3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011e3e:	693b      	ldr	r3, [r7, #16]
 8011e40:	2b5c      	cmp	r3, #92	; 0x5c
 8011e42:	d009      	beq.n	8011e58 <xTaskCreateStatic+0x60>
 8011e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e48:	f383 8811 	msr	BASEPRI, r3
 8011e4c:	f3bf 8f6f 	isb	sy
 8011e50:	f3bf 8f4f 	dsb	sy
 8011e54:	61bb      	str	r3, [r7, #24]
 8011e56:	e7fe      	b.n	8011e56 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011e58:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d01e      	beq.n	8011e9e <xTaskCreateStatic+0xa6>
 8011e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d01b      	beq.n	8011e9e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e68:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e6e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e72:	2202      	movs	r2, #2
 8011e74:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011e78:	2300      	movs	r3, #0
 8011e7a:	9303      	str	r3, [sp, #12]
 8011e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e7e:	9302      	str	r3, [sp, #8]
 8011e80:	f107 0314 	add.w	r3, r7, #20
 8011e84:	9301      	str	r3, [sp, #4]
 8011e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e88:	9300      	str	r3, [sp, #0]
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	687a      	ldr	r2, [r7, #4]
 8011e8e:	68b9      	ldr	r1, [r7, #8]
 8011e90:	68f8      	ldr	r0, [r7, #12]
 8011e92:	f000 f850 	bl	8011f36 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011e96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e98:	f000 f8dc 	bl	8012054 <prvAddNewTaskToReadyList>
 8011e9c:	e001      	b.n	8011ea2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011ea2:	697b      	ldr	r3, [r7, #20]
	}
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	3728      	adds	r7, #40	; 0x28
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	bd80      	pop	{r7, pc}

08011eac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b08c      	sub	sp, #48	; 0x30
 8011eb0:	af04      	add	r7, sp, #16
 8011eb2:	60f8      	str	r0, [r7, #12]
 8011eb4:	60b9      	str	r1, [r7, #8]
 8011eb6:	603b      	str	r3, [r7, #0]
 8011eb8:	4613      	mov	r3, r2
 8011eba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011ebc:	88fb      	ldrh	r3, [r7, #6]
 8011ebe:	009b      	lsls	r3, r3, #2
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	f001 fc05 	bl	80136d0 <pvPortMalloc>
 8011ec6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011ec8:	697b      	ldr	r3, [r7, #20]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d00e      	beq.n	8011eec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011ece:	205c      	movs	r0, #92	; 0x5c
 8011ed0:	f001 fbfe 	bl	80136d0 <pvPortMalloc>
 8011ed4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011ed6:	69fb      	ldr	r3, [r7, #28]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d003      	beq.n	8011ee4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011edc:	69fb      	ldr	r3, [r7, #28]
 8011ede:	697a      	ldr	r2, [r7, #20]
 8011ee0:	631a      	str	r2, [r3, #48]	; 0x30
 8011ee2:	e005      	b.n	8011ef0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011ee4:	6978      	ldr	r0, [r7, #20]
 8011ee6:	f001 fcb5 	bl	8013854 <vPortFree>
 8011eea:	e001      	b.n	8011ef0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011eec:	2300      	movs	r3, #0
 8011eee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011ef0:	69fb      	ldr	r3, [r7, #28]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d017      	beq.n	8011f26 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011ef6:	69fb      	ldr	r3, [r7, #28]
 8011ef8:	2200      	movs	r2, #0
 8011efa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011efe:	88fa      	ldrh	r2, [r7, #6]
 8011f00:	2300      	movs	r3, #0
 8011f02:	9303      	str	r3, [sp, #12]
 8011f04:	69fb      	ldr	r3, [r7, #28]
 8011f06:	9302      	str	r3, [sp, #8]
 8011f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f0a:	9301      	str	r3, [sp, #4]
 8011f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f0e:	9300      	str	r3, [sp, #0]
 8011f10:	683b      	ldr	r3, [r7, #0]
 8011f12:	68b9      	ldr	r1, [r7, #8]
 8011f14:	68f8      	ldr	r0, [r7, #12]
 8011f16:	f000 f80e 	bl	8011f36 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011f1a:	69f8      	ldr	r0, [r7, #28]
 8011f1c:	f000 f89a 	bl	8012054 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011f20:	2301      	movs	r3, #1
 8011f22:	61bb      	str	r3, [r7, #24]
 8011f24:	e002      	b.n	8011f2c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011f26:	f04f 33ff 	mov.w	r3, #4294967295
 8011f2a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011f2c:	69bb      	ldr	r3, [r7, #24]
	}
 8011f2e:	4618      	mov	r0, r3
 8011f30:	3720      	adds	r7, #32
 8011f32:	46bd      	mov	sp, r7
 8011f34:	bd80      	pop	{r7, pc}

08011f36 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011f36:	b580      	push	{r7, lr}
 8011f38:	b088      	sub	sp, #32
 8011f3a:	af00      	add	r7, sp, #0
 8011f3c:	60f8      	str	r0, [r7, #12]
 8011f3e:	60b9      	str	r1, [r7, #8]
 8011f40:	607a      	str	r2, [r7, #4]
 8011f42:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f46:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	009b      	lsls	r3, r3, #2
 8011f4c:	461a      	mov	r2, r3
 8011f4e:	21a5      	movs	r1, #165	; 0xa5
 8011f50:	f002 f8db 	bl	801410a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011f5e:	3b01      	subs	r3, #1
 8011f60:	009b      	lsls	r3, r3, #2
 8011f62:	4413      	add	r3, r2
 8011f64:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011f66:	69bb      	ldr	r3, [r7, #24]
 8011f68:	f023 0307 	bic.w	r3, r3, #7
 8011f6c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011f6e:	69bb      	ldr	r3, [r7, #24]
 8011f70:	f003 0307 	and.w	r3, r3, #7
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d009      	beq.n	8011f8c <prvInitialiseNewTask+0x56>
 8011f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f7c:	f383 8811 	msr	BASEPRI, r3
 8011f80:	f3bf 8f6f 	isb	sy
 8011f84:	f3bf 8f4f 	dsb	sy
 8011f88:	617b      	str	r3, [r7, #20]
 8011f8a:	e7fe      	b.n	8011f8a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011f8c:	68bb      	ldr	r3, [r7, #8]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d01f      	beq.n	8011fd2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011f92:	2300      	movs	r3, #0
 8011f94:	61fb      	str	r3, [r7, #28]
 8011f96:	e012      	b.n	8011fbe <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011f98:	68ba      	ldr	r2, [r7, #8]
 8011f9a:	69fb      	ldr	r3, [r7, #28]
 8011f9c:	4413      	add	r3, r2
 8011f9e:	7819      	ldrb	r1, [r3, #0]
 8011fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011fa2:	69fb      	ldr	r3, [r7, #28]
 8011fa4:	4413      	add	r3, r2
 8011fa6:	3334      	adds	r3, #52	; 0x34
 8011fa8:	460a      	mov	r2, r1
 8011faa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011fac:	68ba      	ldr	r2, [r7, #8]
 8011fae:	69fb      	ldr	r3, [r7, #28]
 8011fb0:	4413      	add	r3, r2
 8011fb2:	781b      	ldrb	r3, [r3, #0]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d006      	beq.n	8011fc6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011fb8:	69fb      	ldr	r3, [r7, #28]
 8011fba:	3301      	adds	r3, #1
 8011fbc:	61fb      	str	r3, [r7, #28]
 8011fbe:	69fb      	ldr	r3, [r7, #28]
 8011fc0:	2b0f      	cmp	r3, #15
 8011fc2:	d9e9      	bls.n	8011f98 <prvInitialiseNewTask+0x62>
 8011fc4:	e000      	b.n	8011fc8 <prvInitialiseNewTask+0x92>
			{
				break;
 8011fc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fca:	2200      	movs	r2, #0
 8011fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011fd0:	e003      	b.n	8011fda <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fdc:	2b37      	cmp	r3, #55	; 0x37
 8011fde:	d901      	bls.n	8011fe4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011fe0:	2337      	movs	r3, #55	; 0x37
 8011fe2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011fe8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011fee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ff8:	3304      	adds	r3, #4
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f7ff f8d6 	bl	80111ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012002:	3318      	adds	r3, #24
 8012004:	4618      	mov	r0, r3
 8012006:	f7ff f8d1 	bl	80111ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801200a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801200c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801200e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012012:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012018:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801201a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801201c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801201e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012022:	2200      	movs	r2, #0
 8012024:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012028:	2200      	movs	r2, #0
 801202a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801202e:	683a      	ldr	r2, [r7, #0]
 8012030:	68f9      	ldr	r1, [r7, #12]
 8012032:	69b8      	ldr	r0, [r7, #24]
 8012034:	f001 f90c 	bl	8013250 <pxPortInitialiseStack>
 8012038:	4602      	mov	r2, r0
 801203a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801203c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801203e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012040:	2b00      	cmp	r3, #0
 8012042:	d002      	beq.n	801204a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012048:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801204a:	bf00      	nop
 801204c:	3720      	adds	r7, #32
 801204e:	46bd      	mov	sp, r7
 8012050:	bd80      	pop	{r7, pc}
	...

08012054 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012054:	b580      	push	{r7, lr}
 8012056:	b082      	sub	sp, #8
 8012058:	af00      	add	r7, sp, #0
 801205a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801205c:	f001 fa1e 	bl	801349c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012060:	4b2d      	ldr	r3, [pc, #180]	; (8012118 <prvAddNewTaskToReadyList+0xc4>)
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	3301      	adds	r3, #1
 8012066:	4a2c      	ldr	r2, [pc, #176]	; (8012118 <prvAddNewTaskToReadyList+0xc4>)
 8012068:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801206a:	4b2c      	ldr	r3, [pc, #176]	; (801211c <prvAddNewTaskToReadyList+0xc8>)
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d109      	bne.n	8012086 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012072:	4a2a      	ldr	r2, [pc, #168]	; (801211c <prvAddNewTaskToReadyList+0xc8>)
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012078:	4b27      	ldr	r3, [pc, #156]	; (8012118 <prvAddNewTaskToReadyList+0xc4>)
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	2b01      	cmp	r3, #1
 801207e:	d110      	bne.n	80120a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012080:	f000 fc08 	bl	8012894 <prvInitialiseTaskLists>
 8012084:	e00d      	b.n	80120a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012086:	4b26      	ldr	r3, [pc, #152]	; (8012120 <prvAddNewTaskToReadyList+0xcc>)
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d109      	bne.n	80120a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801208e:	4b23      	ldr	r3, [pc, #140]	; (801211c <prvAddNewTaskToReadyList+0xc8>)
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012098:	429a      	cmp	r2, r3
 801209a:	d802      	bhi.n	80120a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801209c:	4a1f      	ldr	r2, [pc, #124]	; (801211c <prvAddNewTaskToReadyList+0xc8>)
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80120a2:	4b20      	ldr	r3, [pc, #128]	; (8012124 <prvAddNewTaskToReadyList+0xd0>)
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	3301      	adds	r3, #1
 80120a8:	4a1e      	ldr	r2, [pc, #120]	; (8012124 <prvAddNewTaskToReadyList+0xd0>)
 80120aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80120ac:	4b1d      	ldr	r3, [pc, #116]	; (8012124 <prvAddNewTaskToReadyList+0xd0>)
 80120ae:	681a      	ldr	r2, [r3, #0]
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120b8:	4b1b      	ldr	r3, [pc, #108]	; (8012128 <prvAddNewTaskToReadyList+0xd4>)
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	429a      	cmp	r2, r3
 80120be:	d903      	bls.n	80120c8 <prvAddNewTaskToReadyList+0x74>
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120c4:	4a18      	ldr	r2, [pc, #96]	; (8012128 <prvAddNewTaskToReadyList+0xd4>)
 80120c6:	6013      	str	r3, [r2, #0]
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120cc:	4613      	mov	r3, r2
 80120ce:	009b      	lsls	r3, r3, #2
 80120d0:	4413      	add	r3, r2
 80120d2:	009b      	lsls	r3, r3, #2
 80120d4:	4a15      	ldr	r2, [pc, #84]	; (801212c <prvAddNewTaskToReadyList+0xd8>)
 80120d6:	441a      	add	r2, r3
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	3304      	adds	r3, #4
 80120dc:	4619      	mov	r1, r3
 80120de:	4610      	mov	r0, r2
 80120e0:	f7ff f871 	bl	80111c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80120e4:	f001 fa08 	bl	80134f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80120e8:	4b0d      	ldr	r3, [pc, #52]	; (8012120 <prvAddNewTaskToReadyList+0xcc>)
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d00e      	beq.n	801210e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80120f0:	4b0a      	ldr	r3, [pc, #40]	; (801211c <prvAddNewTaskToReadyList+0xc8>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120fa:	429a      	cmp	r2, r3
 80120fc:	d207      	bcs.n	801210e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80120fe:	4b0c      	ldr	r3, [pc, #48]	; (8012130 <prvAddNewTaskToReadyList+0xdc>)
 8012100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012104:	601a      	str	r2, [r3, #0]
 8012106:	f3bf 8f4f 	dsb	sy
 801210a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801210e:	bf00      	nop
 8012110:	3708      	adds	r7, #8
 8012112:	46bd      	mov	sp, r7
 8012114:	bd80      	pop	{r7, pc}
 8012116:	bf00      	nop
 8012118:	20000e04 	.word	0x20000e04
 801211c:	20000930 	.word	0x20000930
 8012120:	20000e10 	.word	0x20000e10
 8012124:	20000e20 	.word	0x20000e20
 8012128:	20000e0c 	.word	0x20000e0c
 801212c:	20000934 	.word	0x20000934
 8012130:	e000ed04 	.word	0xe000ed04

08012134 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012134:	b580      	push	{r7, lr}
 8012136:	b084      	sub	sp, #16
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801213c:	2300      	movs	r3, #0
 801213e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d016      	beq.n	8012174 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012146:	4b13      	ldr	r3, [pc, #76]	; (8012194 <vTaskDelay+0x60>)
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d009      	beq.n	8012162 <vTaskDelay+0x2e>
 801214e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012152:	f383 8811 	msr	BASEPRI, r3
 8012156:	f3bf 8f6f 	isb	sy
 801215a:	f3bf 8f4f 	dsb	sy
 801215e:	60bb      	str	r3, [r7, #8]
 8012160:	e7fe      	b.n	8012160 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8012162:	f000 f87f 	bl	8012264 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012166:	2100      	movs	r1, #0
 8012168:	6878      	ldr	r0, [r7, #4]
 801216a:	f000 fcd7 	bl	8012b1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801216e:	f000 f887 	bl	8012280 <xTaskResumeAll>
 8012172:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d107      	bne.n	801218a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 801217a:	4b07      	ldr	r3, [pc, #28]	; (8012198 <vTaskDelay+0x64>)
 801217c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012180:	601a      	str	r2, [r3, #0]
 8012182:	f3bf 8f4f 	dsb	sy
 8012186:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801218a:	bf00      	nop
 801218c:	3710      	adds	r7, #16
 801218e:	46bd      	mov	sp, r7
 8012190:	bd80      	pop	{r7, pc}
 8012192:	bf00      	nop
 8012194:	20000e2c 	.word	0x20000e2c
 8012198:	e000ed04 	.word	0xe000ed04

0801219c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b08a      	sub	sp, #40	; 0x28
 80121a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80121a2:	2300      	movs	r3, #0
 80121a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80121a6:	2300      	movs	r3, #0
 80121a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80121aa:	463a      	mov	r2, r7
 80121ac:	1d39      	adds	r1, r7, #4
 80121ae:	f107 0308 	add.w	r3, r7, #8
 80121b2:	4618      	mov	r0, r3
 80121b4:	f7fe ffa6 	bl	8011104 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80121b8:	6839      	ldr	r1, [r7, #0]
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	68ba      	ldr	r2, [r7, #8]
 80121be:	9202      	str	r2, [sp, #8]
 80121c0:	9301      	str	r3, [sp, #4]
 80121c2:	2300      	movs	r3, #0
 80121c4:	9300      	str	r3, [sp, #0]
 80121c6:	2300      	movs	r3, #0
 80121c8:	460a      	mov	r2, r1
 80121ca:	4920      	ldr	r1, [pc, #128]	; (801224c <vTaskStartScheduler+0xb0>)
 80121cc:	4820      	ldr	r0, [pc, #128]	; (8012250 <vTaskStartScheduler+0xb4>)
 80121ce:	f7ff fe13 	bl	8011df8 <xTaskCreateStatic>
 80121d2:	4602      	mov	r2, r0
 80121d4:	4b1f      	ldr	r3, [pc, #124]	; (8012254 <vTaskStartScheduler+0xb8>)
 80121d6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80121d8:	4b1e      	ldr	r3, [pc, #120]	; (8012254 <vTaskStartScheduler+0xb8>)
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d002      	beq.n	80121e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80121e0:	2301      	movs	r3, #1
 80121e2:	617b      	str	r3, [r7, #20]
 80121e4:	e001      	b.n	80121ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80121e6:	2300      	movs	r3, #0
 80121e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80121ea:	697b      	ldr	r3, [r7, #20]
 80121ec:	2b01      	cmp	r3, #1
 80121ee:	d102      	bne.n	80121f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80121f0:	f000 fce8 	bl	8012bc4 <xTimerCreateTimerTask>
 80121f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80121f6:	697b      	ldr	r3, [r7, #20]
 80121f8:	2b01      	cmp	r3, #1
 80121fa:	d115      	bne.n	8012228 <vTaskStartScheduler+0x8c>
 80121fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012200:	f383 8811 	msr	BASEPRI, r3
 8012204:	f3bf 8f6f 	isb	sy
 8012208:	f3bf 8f4f 	dsb	sy
 801220c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801220e:	4b12      	ldr	r3, [pc, #72]	; (8012258 <vTaskStartScheduler+0xbc>)
 8012210:	f04f 32ff 	mov.w	r2, #4294967295
 8012214:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012216:	4b11      	ldr	r3, [pc, #68]	; (801225c <vTaskStartScheduler+0xc0>)
 8012218:	2201      	movs	r2, #1
 801221a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801221c:	4b10      	ldr	r3, [pc, #64]	; (8012260 <vTaskStartScheduler+0xc4>)
 801221e:	2200      	movs	r2, #0
 8012220:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012222:	f001 f89d 	bl	8013360 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012226:	e00d      	b.n	8012244 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012228:	697b      	ldr	r3, [r7, #20]
 801222a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801222e:	d109      	bne.n	8012244 <vTaskStartScheduler+0xa8>
 8012230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012234:	f383 8811 	msr	BASEPRI, r3
 8012238:	f3bf 8f6f 	isb	sy
 801223c:	f3bf 8f4f 	dsb	sy
 8012240:	60fb      	str	r3, [r7, #12]
 8012242:	e7fe      	b.n	8012242 <vTaskStartScheduler+0xa6>
}
 8012244:	bf00      	nop
 8012246:	3718      	adds	r7, #24
 8012248:	46bd      	mov	sp, r7
 801224a:	bd80      	pop	{r7, pc}
 801224c:	08014a48 	.word	0x08014a48
 8012250:	08012865 	.word	0x08012865
 8012254:	20000e28 	.word	0x20000e28
 8012258:	20000e24 	.word	0x20000e24
 801225c:	20000e10 	.word	0x20000e10
 8012260:	20000e08 	.word	0x20000e08

08012264 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012264:	b480      	push	{r7}
 8012266:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012268:	4b04      	ldr	r3, [pc, #16]	; (801227c <vTaskSuspendAll+0x18>)
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	3301      	adds	r3, #1
 801226e:	4a03      	ldr	r2, [pc, #12]	; (801227c <vTaskSuspendAll+0x18>)
 8012270:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8012272:	bf00      	nop
 8012274:	46bd      	mov	sp, r7
 8012276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227a:	4770      	bx	lr
 801227c:	20000e2c 	.word	0x20000e2c

08012280 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b084      	sub	sp, #16
 8012284:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012286:	2300      	movs	r3, #0
 8012288:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801228a:	2300      	movs	r3, #0
 801228c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801228e:	4b41      	ldr	r3, [pc, #260]	; (8012394 <xTaskResumeAll+0x114>)
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d109      	bne.n	80122aa <xTaskResumeAll+0x2a>
 8012296:	f04f 0350 	mov.w	r3, #80	; 0x50
 801229a:	f383 8811 	msr	BASEPRI, r3
 801229e:	f3bf 8f6f 	isb	sy
 80122a2:	f3bf 8f4f 	dsb	sy
 80122a6:	603b      	str	r3, [r7, #0]
 80122a8:	e7fe      	b.n	80122a8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80122aa:	f001 f8f7 	bl	801349c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80122ae:	4b39      	ldr	r3, [pc, #228]	; (8012394 <xTaskResumeAll+0x114>)
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	3b01      	subs	r3, #1
 80122b4:	4a37      	ldr	r2, [pc, #220]	; (8012394 <xTaskResumeAll+0x114>)
 80122b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80122b8:	4b36      	ldr	r3, [pc, #216]	; (8012394 <xTaskResumeAll+0x114>)
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d162      	bne.n	8012386 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80122c0:	4b35      	ldr	r3, [pc, #212]	; (8012398 <xTaskResumeAll+0x118>)
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d05e      	beq.n	8012386 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80122c8:	e02f      	b.n	801232a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80122ca:	4b34      	ldr	r3, [pc, #208]	; (801239c <xTaskResumeAll+0x11c>)
 80122cc:	68db      	ldr	r3, [r3, #12]
 80122ce:	68db      	ldr	r3, [r3, #12]
 80122d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	3318      	adds	r3, #24
 80122d6:	4618      	mov	r0, r3
 80122d8:	f7fe ffd2 	bl	8011280 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	3304      	adds	r3, #4
 80122e0:	4618      	mov	r0, r3
 80122e2:	f7fe ffcd 	bl	8011280 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122ea:	4b2d      	ldr	r3, [pc, #180]	; (80123a0 <xTaskResumeAll+0x120>)
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	429a      	cmp	r2, r3
 80122f0:	d903      	bls.n	80122fa <xTaskResumeAll+0x7a>
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122f6:	4a2a      	ldr	r2, [pc, #168]	; (80123a0 <xTaskResumeAll+0x120>)
 80122f8:	6013      	str	r3, [r2, #0]
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122fe:	4613      	mov	r3, r2
 8012300:	009b      	lsls	r3, r3, #2
 8012302:	4413      	add	r3, r2
 8012304:	009b      	lsls	r3, r3, #2
 8012306:	4a27      	ldr	r2, [pc, #156]	; (80123a4 <xTaskResumeAll+0x124>)
 8012308:	441a      	add	r2, r3
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	3304      	adds	r3, #4
 801230e:	4619      	mov	r1, r3
 8012310:	4610      	mov	r0, r2
 8012312:	f7fe ff58 	bl	80111c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801231a:	4b23      	ldr	r3, [pc, #140]	; (80123a8 <xTaskResumeAll+0x128>)
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012320:	429a      	cmp	r2, r3
 8012322:	d302      	bcc.n	801232a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8012324:	4b21      	ldr	r3, [pc, #132]	; (80123ac <xTaskResumeAll+0x12c>)
 8012326:	2201      	movs	r2, #1
 8012328:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801232a:	4b1c      	ldr	r3, [pc, #112]	; (801239c <xTaskResumeAll+0x11c>)
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d1cb      	bne.n	80122ca <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d001      	beq.n	801233c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012338:	f000 fb46 	bl	80129c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801233c:	4b1c      	ldr	r3, [pc, #112]	; (80123b0 <xTaskResumeAll+0x130>)
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d010      	beq.n	801236a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012348:	f000 f846 	bl	80123d8 <xTaskIncrementTick>
 801234c:	4603      	mov	r3, r0
 801234e:	2b00      	cmp	r3, #0
 8012350:	d002      	beq.n	8012358 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8012352:	4b16      	ldr	r3, [pc, #88]	; (80123ac <xTaskResumeAll+0x12c>)
 8012354:	2201      	movs	r2, #1
 8012356:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	3b01      	subs	r3, #1
 801235c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d1f1      	bne.n	8012348 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8012364:	4b12      	ldr	r3, [pc, #72]	; (80123b0 <xTaskResumeAll+0x130>)
 8012366:	2200      	movs	r2, #0
 8012368:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801236a:	4b10      	ldr	r3, [pc, #64]	; (80123ac <xTaskResumeAll+0x12c>)
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d009      	beq.n	8012386 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012372:	2301      	movs	r3, #1
 8012374:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012376:	4b0f      	ldr	r3, [pc, #60]	; (80123b4 <xTaskResumeAll+0x134>)
 8012378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801237c:	601a      	str	r2, [r3, #0]
 801237e:	f3bf 8f4f 	dsb	sy
 8012382:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012386:	f001 f8b7 	bl	80134f8 <vPortExitCritical>

	return xAlreadyYielded;
 801238a:	68bb      	ldr	r3, [r7, #8]
}
 801238c:	4618      	mov	r0, r3
 801238e:	3710      	adds	r7, #16
 8012390:	46bd      	mov	sp, r7
 8012392:	bd80      	pop	{r7, pc}
 8012394:	20000e2c 	.word	0x20000e2c
 8012398:	20000e04 	.word	0x20000e04
 801239c:	20000dc4 	.word	0x20000dc4
 80123a0:	20000e0c 	.word	0x20000e0c
 80123a4:	20000934 	.word	0x20000934
 80123a8:	20000930 	.word	0x20000930
 80123ac:	20000e18 	.word	0x20000e18
 80123b0:	20000e14 	.word	0x20000e14
 80123b4:	e000ed04 	.word	0xe000ed04

080123b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80123b8:	b480      	push	{r7}
 80123ba:	b083      	sub	sp, #12
 80123bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80123be:	4b05      	ldr	r3, [pc, #20]	; (80123d4 <xTaskGetTickCount+0x1c>)
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80123c4:	687b      	ldr	r3, [r7, #4]
}
 80123c6:	4618      	mov	r0, r3
 80123c8:	370c      	adds	r7, #12
 80123ca:	46bd      	mov	sp, r7
 80123cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d0:	4770      	bx	lr
 80123d2:	bf00      	nop
 80123d4:	20000e08 	.word	0x20000e08

080123d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b086      	sub	sp, #24
 80123dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80123de:	2300      	movs	r3, #0
 80123e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80123e2:	4b4e      	ldr	r3, [pc, #312]	; (801251c <xTaskIncrementTick+0x144>)
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	f040 8088 	bne.w	80124fc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80123ec:	4b4c      	ldr	r3, [pc, #304]	; (8012520 <xTaskIncrementTick+0x148>)
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	3301      	adds	r3, #1
 80123f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80123f4:	4a4a      	ldr	r2, [pc, #296]	; (8012520 <xTaskIncrementTick+0x148>)
 80123f6:	693b      	ldr	r3, [r7, #16]
 80123f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80123fa:	693b      	ldr	r3, [r7, #16]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d11f      	bne.n	8012440 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8012400:	4b48      	ldr	r3, [pc, #288]	; (8012524 <xTaskIncrementTick+0x14c>)
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d009      	beq.n	801241e <xTaskIncrementTick+0x46>
 801240a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801240e:	f383 8811 	msr	BASEPRI, r3
 8012412:	f3bf 8f6f 	isb	sy
 8012416:	f3bf 8f4f 	dsb	sy
 801241a:	603b      	str	r3, [r7, #0]
 801241c:	e7fe      	b.n	801241c <xTaskIncrementTick+0x44>
 801241e:	4b41      	ldr	r3, [pc, #260]	; (8012524 <xTaskIncrementTick+0x14c>)
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	60fb      	str	r3, [r7, #12]
 8012424:	4b40      	ldr	r3, [pc, #256]	; (8012528 <xTaskIncrementTick+0x150>)
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	4a3e      	ldr	r2, [pc, #248]	; (8012524 <xTaskIncrementTick+0x14c>)
 801242a:	6013      	str	r3, [r2, #0]
 801242c:	4a3e      	ldr	r2, [pc, #248]	; (8012528 <xTaskIncrementTick+0x150>)
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	6013      	str	r3, [r2, #0]
 8012432:	4b3e      	ldr	r3, [pc, #248]	; (801252c <xTaskIncrementTick+0x154>)
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	3301      	adds	r3, #1
 8012438:	4a3c      	ldr	r2, [pc, #240]	; (801252c <xTaskIncrementTick+0x154>)
 801243a:	6013      	str	r3, [r2, #0]
 801243c:	f000 fac4 	bl	80129c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012440:	4b3b      	ldr	r3, [pc, #236]	; (8012530 <xTaskIncrementTick+0x158>)
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	693a      	ldr	r2, [r7, #16]
 8012446:	429a      	cmp	r2, r3
 8012448:	d349      	bcc.n	80124de <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801244a:	4b36      	ldr	r3, [pc, #216]	; (8012524 <xTaskIncrementTick+0x14c>)
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d104      	bne.n	801245e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012454:	4b36      	ldr	r3, [pc, #216]	; (8012530 <xTaskIncrementTick+0x158>)
 8012456:	f04f 32ff 	mov.w	r2, #4294967295
 801245a:	601a      	str	r2, [r3, #0]
					break;
 801245c:	e03f      	b.n	80124de <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801245e:	4b31      	ldr	r3, [pc, #196]	; (8012524 <xTaskIncrementTick+0x14c>)
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	68db      	ldr	r3, [r3, #12]
 8012464:	68db      	ldr	r3, [r3, #12]
 8012466:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	685b      	ldr	r3, [r3, #4]
 801246c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801246e:	693a      	ldr	r2, [r7, #16]
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	429a      	cmp	r2, r3
 8012474:	d203      	bcs.n	801247e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012476:	4a2e      	ldr	r2, [pc, #184]	; (8012530 <xTaskIncrementTick+0x158>)
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801247c:	e02f      	b.n	80124de <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801247e:	68bb      	ldr	r3, [r7, #8]
 8012480:	3304      	adds	r3, #4
 8012482:	4618      	mov	r0, r3
 8012484:	f7fe fefc 	bl	8011280 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012488:	68bb      	ldr	r3, [r7, #8]
 801248a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801248c:	2b00      	cmp	r3, #0
 801248e:	d004      	beq.n	801249a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012490:	68bb      	ldr	r3, [r7, #8]
 8012492:	3318      	adds	r3, #24
 8012494:	4618      	mov	r0, r3
 8012496:	f7fe fef3 	bl	8011280 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801249a:	68bb      	ldr	r3, [r7, #8]
 801249c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801249e:	4b25      	ldr	r3, [pc, #148]	; (8012534 <xTaskIncrementTick+0x15c>)
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	429a      	cmp	r2, r3
 80124a4:	d903      	bls.n	80124ae <xTaskIncrementTick+0xd6>
 80124a6:	68bb      	ldr	r3, [r7, #8]
 80124a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124aa:	4a22      	ldr	r2, [pc, #136]	; (8012534 <xTaskIncrementTick+0x15c>)
 80124ac:	6013      	str	r3, [r2, #0]
 80124ae:	68bb      	ldr	r3, [r7, #8]
 80124b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124b2:	4613      	mov	r3, r2
 80124b4:	009b      	lsls	r3, r3, #2
 80124b6:	4413      	add	r3, r2
 80124b8:	009b      	lsls	r3, r3, #2
 80124ba:	4a1f      	ldr	r2, [pc, #124]	; (8012538 <xTaskIncrementTick+0x160>)
 80124bc:	441a      	add	r2, r3
 80124be:	68bb      	ldr	r3, [r7, #8]
 80124c0:	3304      	adds	r3, #4
 80124c2:	4619      	mov	r1, r3
 80124c4:	4610      	mov	r0, r2
 80124c6:	f7fe fe7e 	bl	80111c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80124ca:	68bb      	ldr	r3, [r7, #8]
 80124cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124ce:	4b1b      	ldr	r3, [pc, #108]	; (801253c <xTaskIncrementTick+0x164>)
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124d4:	429a      	cmp	r2, r3
 80124d6:	d3b8      	bcc.n	801244a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80124d8:	2301      	movs	r3, #1
 80124da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80124dc:	e7b5      	b.n	801244a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80124de:	4b17      	ldr	r3, [pc, #92]	; (801253c <xTaskIncrementTick+0x164>)
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124e4:	4914      	ldr	r1, [pc, #80]	; (8012538 <xTaskIncrementTick+0x160>)
 80124e6:	4613      	mov	r3, r2
 80124e8:	009b      	lsls	r3, r3, #2
 80124ea:	4413      	add	r3, r2
 80124ec:	009b      	lsls	r3, r3, #2
 80124ee:	440b      	add	r3, r1
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	2b01      	cmp	r3, #1
 80124f4:	d907      	bls.n	8012506 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80124f6:	2301      	movs	r3, #1
 80124f8:	617b      	str	r3, [r7, #20]
 80124fa:	e004      	b.n	8012506 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80124fc:	4b10      	ldr	r3, [pc, #64]	; (8012540 <xTaskIncrementTick+0x168>)
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	3301      	adds	r3, #1
 8012502:	4a0f      	ldr	r2, [pc, #60]	; (8012540 <xTaskIncrementTick+0x168>)
 8012504:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012506:	4b0f      	ldr	r3, [pc, #60]	; (8012544 <xTaskIncrementTick+0x16c>)
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d001      	beq.n	8012512 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 801250e:	2301      	movs	r3, #1
 8012510:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012512:	697b      	ldr	r3, [r7, #20]
}
 8012514:	4618      	mov	r0, r3
 8012516:	3718      	adds	r7, #24
 8012518:	46bd      	mov	sp, r7
 801251a:	bd80      	pop	{r7, pc}
 801251c:	20000e2c 	.word	0x20000e2c
 8012520:	20000e08 	.word	0x20000e08
 8012524:	20000dbc 	.word	0x20000dbc
 8012528:	20000dc0 	.word	0x20000dc0
 801252c:	20000e1c 	.word	0x20000e1c
 8012530:	20000e24 	.word	0x20000e24
 8012534:	20000e0c 	.word	0x20000e0c
 8012538:	20000934 	.word	0x20000934
 801253c:	20000930 	.word	0x20000930
 8012540:	20000e14 	.word	0x20000e14
 8012544:	20000e18 	.word	0x20000e18

08012548 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012548:	b480      	push	{r7}
 801254a:	b085      	sub	sp, #20
 801254c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801254e:	4b27      	ldr	r3, [pc, #156]	; (80125ec <vTaskSwitchContext+0xa4>)
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d003      	beq.n	801255e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012556:	4b26      	ldr	r3, [pc, #152]	; (80125f0 <vTaskSwitchContext+0xa8>)
 8012558:	2201      	movs	r2, #1
 801255a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801255c:	e040      	b.n	80125e0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 801255e:	4b24      	ldr	r3, [pc, #144]	; (80125f0 <vTaskSwitchContext+0xa8>)
 8012560:	2200      	movs	r2, #0
 8012562:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012564:	4b23      	ldr	r3, [pc, #140]	; (80125f4 <vTaskSwitchContext+0xac>)
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	60fb      	str	r3, [r7, #12]
 801256a:	e00f      	b.n	801258c <vTaskSwitchContext+0x44>
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d109      	bne.n	8012586 <vTaskSwitchContext+0x3e>
 8012572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012576:	f383 8811 	msr	BASEPRI, r3
 801257a:	f3bf 8f6f 	isb	sy
 801257e:	f3bf 8f4f 	dsb	sy
 8012582:	607b      	str	r3, [r7, #4]
 8012584:	e7fe      	b.n	8012584 <vTaskSwitchContext+0x3c>
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	3b01      	subs	r3, #1
 801258a:	60fb      	str	r3, [r7, #12]
 801258c:	491a      	ldr	r1, [pc, #104]	; (80125f8 <vTaskSwitchContext+0xb0>)
 801258e:	68fa      	ldr	r2, [r7, #12]
 8012590:	4613      	mov	r3, r2
 8012592:	009b      	lsls	r3, r3, #2
 8012594:	4413      	add	r3, r2
 8012596:	009b      	lsls	r3, r3, #2
 8012598:	440b      	add	r3, r1
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d0e5      	beq.n	801256c <vTaskSwitchContext+0x24>
 80125a0:	68fa      	ldr	r2, [r7, #12]
 80125a2:	4613      	mov	r3, r2
 80125a4:	009b      	lsls	r3, r3, #2
 80125a6:	4413      	add	r3, r2
 80125a8:	009b      	lsls	r3, r3, #2
 80125aa:	4a13      	ldr	r2, [pc, #76]	; (80125f8 <vTaskSwitchContext+0xb0>)
 80125ac:	4413      	add	r3, r2
 80125ae:	60bb      	str	r3, [r7, #8]
 80125b0:	68bb      	ldr	r3, [r7, #8]
 80125b2:	685b      	ldr	r3, [r3, #4]
 80125b4:	685a      	ldr	r2, [r3, #4]
 80125b6:	68bb      	ldr	r3, [r7, #8]
 80125b8:	605a      	str	r2, [r3, #4]
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	685a      	ldr	r2, [r3, #4]
 80125be:	68bb      	ldr	r3, [r7, #8]
 80125c0:	3308      	adds	r3, #8
 80125c2:	429a      	cmp	r2, r3
 80125c4:	d104      	bne.n	80125d0 <vTaskSwitchContext+0x88>
 80125c6:	68bb      	ldr	r3, [r7, #8]
 80125c8:	685b      	ldr	r3, [r3, #4]
 80125ca:	685a      	ldr	r2, [r3, #4]
 80125cc:	68bb      	ldr	r3, [r7, #8]
 80125ce:	605a      	str	r2, [r3, #4]
 80125d0:	68bb      	ldr	r3, [r7, #8]
 80125d2:	685b      	ldr	r3, [r3, #4]
 80125d4:	68db      	ldr	r3, [r3, #12]
 80125d6:	4a09      	ldr	r2, [pc, #36]	; (80125fc <vTaskSwitchContext+0xb4>)
 80125d8:	6013      	str	r3, [r2, #0]
 80125da:	4a06      	ldr	r2, [pc, #24]	; (80125f4 <vTaskSwitchContext+0xac>)
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	6013      	str	r3, [r2, #0]
}
 80125e0:	bf00      	nop
 80125e2:	3714      	adds	r7, #20
 80125e4:	46bd      	mov	sp, r7
 80125e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ea:	4770      	bx	lr
 80125ec:	20000e2c 	.word	0x20000e2c
 80125f0:	20000e18 	.word	0x20000e18
 80125f4:	20000e0c 	.word	0x20000e0c
 80125f8:	20000934 	.word	0x20000934
 80125fc:	20000930 	.word	0x20000930

08012600 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012600:	b580      	push	{r7, lr}
 8012602:	b084      	sub	sp, #16
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]
 8012608:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d109      	bne.n	8012624 <vTaskPlaceOnEventList+0x24>
 8012610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012614:	f383 8811 	msr	BASEPRI, r3
 8012618:	f3bf 8f6f 	isb	sy
 801261c:	f3bf 8f4f 	dsb	sy
 8012620:	60fb      	str	r3, [r7, #12]
 8012622:	e7fe      	b.n	8012622 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012624:	4b07      	ldr	r3, [pc, #28]	; (8012644 <vTaskPlaceOnEventList+0x44>)
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	3318      	adds	r3, #24
 801262a:	4619      	mov	r1, r3
 801262c:	6878      	ldr	r0, [r7, #4]
 801262e:	f7fe fdee 	bl	801120e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012632:	2101      	movs	r1, #1
 8012634:	6838      	ldr	r0, [r7, #0]
 8012636:	f000 fa71 	bl	8012b1c <prvAddCurrentTaskToDelayedList>
}
 801263a:	bf00      	nop
 801263c:	3710      	adds	r7, #16
 801263e:	46bd      	mov	sp, r7
 8012640:	bd80      	pop	{r7, pc}
 8012642:	bf00      	nop
 8012644:	20000930 	.word	0x20000930

08012648 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012648:	b580      	push	{r7, lr}
 801264a:	b086      	sub	sp, #24
 801264c:	af00      	add	r7, sp, #0
 801264e:	60f8      	str	r0, [r7, #12]
 8012650:	60b9      	str	r1, [r7, #8]
 8012652:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d109      	bne.n	801266e <vTaskPlaceOnEventListRestricted+0x26>
 801265a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801265e:	f383 8811 	msr	BASEPRI, r3
 8012662:	f3bf 8f6f 	isb	sy
 8012666:	f3bf 8f4f 	dsb	sy
 801266a:	617b      	str	r3, [r7, #20]
 801266c:	e7fe      	b.n	801266c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801266e:	4b0a      	ldr	r3, [pc, #40]	; (8012698 <vTaskPlaceOnEventListRestricted+0x50>)
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	3318      	adds	r3, #24
 8012674:	4619      	mov	r1, r3
 8012676:	68f8      	ldr	r0, [r7, #12]
 8012678:	f7fe fda5 	bl	80111c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d002      	beq.n	8012688 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8012682:	f04f 33ff 	mov.w	r3, #4294967295
 8012686:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012688:	6879      	ldr	r1, [r7, #4]
 801268a:	68b8      	ldr	r0, [r7, #8]
 801268c:	f000 fa46 	bl	8012b1c <prvAddCurrentTaskToDelayedList>
	}
 8012690:	bf00      	nop
 8012692:	3718      	adds	r7, #24
 8012694:	46bd      	mov	sp, r7
 8012696:	bd80      	pop	{r7, pc}
 8012698:	20000930 	.word	0x20000930

0801269c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b086      	sub	sp, #24
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	68db      	ldr	r3, [r3, #12]
 80126a8:	68db      	ldr	r3, [r3, #12]
 80126aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80126ac:	693b      	ldr	r3, [r7, #16]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d109      	bne.n	80126c6 <xTaskRemoveFromEventList+0x2a>
 80126b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126b6:	f383 8811 	msr	BASEPRI, r3
 80126ba:	f3bf 8f6f 	isb	sy
 80126be:	f3bf 8f4f 	dsb	sy
 80126c2:	60fb      	str	r3, [r7, #12]
 80126c4:	e7fe      	b.n	80126c4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80126c6:	693b      	ldr	r3, [r7, #16]
 80126c8:	3318      	adds	r3, #24
 80126ca:	4618      	mov	r0, r3
 80126cc:	f7fe fdd8 	bl	8011280 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80126d0:	4b1d      	ldr	r3, [pc, #116]	; (8012748 <xTaskRemoveFromEventList+0xac>)
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d11d      	bne.n	8012714 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80126d8:	693b      	ldr	r3, [r7, #16]
 80126da:	3304      	adds	r3, #4
 80126dc:	4618      	mov	r0, r3
 80126de:	f7fe fdcf 	bl	8011280 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80126e2:	693b      	ldr	r3, [r7, #16]
 80126e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126e6:	4b19      	ldr	r3, [pc, #100]	; (801274c <xTaskRemoveFromEventList+0xb0>)
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	429a      	cmp	r2, r3
 80126ec:	d903      	bls.n	80126f6 <xTaskRemoveFromEventList+0x5a>
 80126ee:	693b      	ldr	r3, [r7, #16]
 80126f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126f2:	4a16      	ldr	r2, [pc, #88]	; (801274c <xTaskRemoveFromEventList+0xb0>)
 80126f4:	6013      	str	r3, [r2, #0]
 80126f6:	693b      	ldr	r3, [r7, #16]
 80126f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126fa:	4613      	mov	r3, r2
 80126fc:	009b      	lsls	r3, r3, #2
 80126fe:	4413      	add	r3, r2
 8012700:	009b      	lsls	r3, r3, #2
 8012702:	4a13      	ldr	r2, [pc, #76]	; (8012750 <xTaskRemoveFromEventList+0xb4>)
 8012704:	441a      	add	r2, r3
 8012706:	693b      	ldr	r3, [r7, #16]
 8012708:	3304      	adds	r3, #4
 801270a:	4619      	mov	r1, r3
 801270c:	4610      	mov	r0, r2
 801270e:	f7fe fd5a 	bl	80111c6 <vListInsertEnd>
 8012712:	e005      	b.n	8012720 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012714:	693b      	ldr	r3, [r7, #16]
 8012716:	3318      	adds	r3, #24
 8012718:	4619      	mov	r1, r3
 801271a:	480e      	ldr	r0, [pc, #56]	; (8012754 <xTaskRemoveFromEventList+0xb8>)
 801271c:	f7fe fd53 	bl	80111c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012720:	693b      	ldr	r3, [r7, #16]
 8012722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012724:	4b0c      	ldr	r3, [pc, #48]	; (8012758 <xTaskRemoveFromEventList+0xbc>)
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801272a:	429a      	cmp	r2, r3
 801272c:	d905      	bls.n	801273a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801272e:	2301      	movs	r3, #1
 8012730:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012732:	4b0a      	ldr	r3, [pc, #40]	; (801275c <xTaskRemoveFromEventList+0xc0>)
 8012734:	2201      	movs	r2, #1
 8012736:	601a      	str	r2, [r3, #0]
 8012738:	e001      	b.n	801273e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801273a:	2300      	movs	r3, #0
 801273c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801273e:	697b      	ldr	r3, [r7, #20]
}
 8012740:	4618      	mov	r0, r3
 8012742:	3718      	adds	r7, #24
 8012744:	46bd      	mov	sp, r7
 8012746:	bd80      	pop	{r7, pc}
 8012748:	20000e2c 	.word	0x20000e2c
 801274c:	20000e0c 	.word	0x20000e0c
 8012750:	20000934 	.word	0x20000934
 8012754:	20000dc4 	.word	0x20000dc4
 8012758:	20000930 	.word	0x20000930
 801275c:	20000e18 	.word	0x20000e18

08012760 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012760:	b480      	push	{r7}
 8012762:	b083      	sub	sp, #12
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012768:	4b06      	ldr	r3, [pc, #24]	; (8012784 <vTaskInternalSetTimeOutState+0x24>)
 801276a:	681a      	ldr	r2, [r3, #0]
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012770:	4b05      	ldr	r3, [pc, #20]	; (8012788 <vTaskInternalSetTimeOutState+0x28>)
 8012772:	681a      	ldr	r2, [r3, #0]
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	605a      	str	r2, [r3, #4]
}
 8012778:	bf00      	nop
 801277a:	370c      	adds	r7, #12
 801277c:	46bd      	mov	sp, r7
 801277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012782:	4770      	bx	lr
 8012784:	20000e1c 	.word	0x20000e1c
 8012788:	20000e08 	.word	0x20000e08

0801278c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801278c:	b580      	push	{r7, lr}
 801278e:	b088      	sub	sp, #32
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
 8012794:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d109      	bne.n	80127b0 <xTaskCheckForTimeOut+0x24>
 801279c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127a0:	f383 8811 	msr	BASEPRI, r3
 80127a4:	f3bf 8f6f 	isb	sy
 80127a8:	f3bf 8f4f 	dsb	sy
 80127ac:	613b      	str	r3, [r7, #16]
 80127ae:	e7fe      	b.n	80127ae <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80127b0:	683b      	ldr	r3, [r7, #0]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d109      	bne.n	80127ca <xTaskCheckForTimeOut+0x3e>
 80127b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127ba:	f383 8811 	msr	BASEPRI, r3
 80127be:	f3bf 8f6f 	isb	sy
 80127c2:	f3bf 8f4f 	dsb	sy
 80127c6:	60fb      	str	r3, [r7, #12]
 80127c8:	e7fe      	b.n	80127c8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80127ca:	f000 fe67 	bl	801349c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80127ce:	4b1d      	ldr	r3, [pc, #116]	; (8012844 <xTaskCheckForTimeOut+0xb8>)
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	685b      	ldr	r3, [r3, #4]
 80127d8:	69ba      	ldr	r2, [r7, #24]
 80127da:	1ad3      	subs	r3, r2, r3
 80127dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80127de:	683b      	ldr	r3, [r7, #0]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127e6:	d102      	bne.n	80127ee <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80127e8:	2300      	movs	r3, #0
 80127ea:	61fb      	str	r3, [r7, #28]
 80127ec:	e023      	b.n	8012836 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	681a      	ldr	r2, [r3, #0]
 80127f2:	4b15      	ldr	r3, [pc, #84]	; (8012848 <xTaskCheckForTimeOut+0xbc>)
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	429a      	cmp	r2, r3
 80127f8:	d007      	beq.n	801280a <xTaskCheckForTimeOut+0x7e>
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	685b      	ldr	r3, [r3, #4]
 80127fe:	69ba      	ldr	r2, [r7, #24]
 8012800:	429a      	cmp	r2, r3
 8012802:	d302      	bcc.n	801280a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012804:	2301      	movs	r3, #1
 8012806:	61fb      	str	r3, [r7, #28]
 8012808:	e015      	b.n	8012836 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801280a:	683b      	ldr	r3, [r7, #0]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	697a      	ldr	r2, [r7, #20]
 8012810:	429a      	cmp	r2, r3
 8012812:	d20b      	bcs.n	801282c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012814:	683b      	ldr	r3, [r7, #0]
 8012816:	681a      	ldr	r2, [r3, #0]
 8012818:	697b      	ldr	r3, [r7, #20]
 801281a:	1ad2      	subs	r2, r2, r3
 801281c:	683b      	ldr	r3, [r7, #0]
 801281e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012820:	6878      	ldr	r0, [r7, #4]
 8012822:	f7ff ff9d 	bl	8012760 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012826:	2300      	movs	r3, #0
 8012828:	61fb      	str	r3, [r7, #28]
 801282a:	e004      	b.n	8012836 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 801282c:	683b      	ldr	r3, [r7, #0]
 801282e:	2200      	movs	r2, #0
 8012830:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012832:	2301      	movs	r3, #1
 8012834:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012836:	f000 fe5f 	bl	80134f8 <vPortExitCritical>

	return xReturn;
 801283a:	69fb      	ldr	r3, [r7, #28]
}
 801283c:	4618      	mov	r0, r3
 801283e:	3720      	adds	r7, #32
 8012840:	46bd      	mov	sp, r7
 8012842:	bd80      	pop	{r7, pc}
 8012844:	20000e08 	.word	0x20000e08
 8012848:	20000e1c 	.word	0x20000e1c

0801284c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801284c:	b480      	push	{r7}
 801284e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012850:	4b03      	ldr	r3, [pc, #12]	; (8012860 <vTaskMissedYield+0x14>)
 8012852:	2201      	movs	r2, #1
 8012854:	601a      	str	r2, [r3, #0]
}
 8012856:	bf00      	nop
 8012858:	46bd      	mov	sp, r7
 801285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285e:	4770      	bx	lr
 8012860:	20000e18 	.word	0x20000e18

08012864 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012864:	b580      	push	{r7, lr}
 8012866:	b082      	sub	sp, #8
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801286c:	f000 f852 	bl	8012914 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012870:	4b06      	ldr	r3, [pc, #24]	; (801288c <prvIdleTask+0x28>)
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	2b01      	cmp	r3, #1
 8012876:	d9f9      	bls.n	801286c <prvIdleTask+0x8>
			{
				taskYIELD();
 8012878:	4b05      	ldr	r3, [pc, #20]	; (8012890 <prvIdleTask+0x2c>)
 801287a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801287e:	601a      	str	r2, [r3, #0]
 8012880:	f3bf 8f4f 	dsb	sy
 8012884:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012888:	e7f0      	b.n	801286c <prvIdleTask+0x8>
 801288a:	bf00      	nop
 801288c:	20000934 	.word	0x20000934
 8012890:	e000ed04 	.word	0xe000ed04

08012894 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b082      	sub	sp, #8
 8012898:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801289a:	2300      	movs	r3, #0
 801289c:	607b      	str	r3, [r7, #4]
 801289e:	e00c      	b.n	80128ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80128a0:	687a      	ldr	r2, [r7, #4]
 80128a2:	4613      	mov	r3, r2
 80128a4:	009b      	lsls	r3, r3, #2
 80128a6:	4413      	add	r3, r2
 80128a8:	009b      	lsls	r3, r3, #2
 80128aa:	4a12      	ldr	r2, [pc, #72]	; (80128f4 <prvInitialiseTaskLists+0x60>)
 80128ac:	4413      	add	r3, r2
 80128ae:	4618      	mov	r0, r3
 80128b0:	f7fe fc5c 	bl	801116c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	3301      	adds	r3, #1
 80128b8:	607b      	str	r3, [r7, #4]
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	2b37      	cmp	r3, #55	; 0x37
 80128be:	d9ef      	bls.n	80128a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80128c0:	480d      	ldr	r0, [pc, #52]	; (80128f8 <prvInitialiseTaskLists+0x64>)
 80128c2:	f7fe fc53 	bl	801116c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80128c6:	480d      	ldr	r0, [pc, #52]	; (80128fc <prvInitialiseTaskLists+0x68>)
 80128c8:	f7fe fc50 	bl	801116c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80128cc:	480c      	ldr	r0, [pc, #48]	; (8012900 <prvInitialiseTaskLists+0x6c>)
 80128ce:	f7fe fc4d 	bl	801116c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80128d2:	480c      	ldr	r0, [pc, #48]	; (8012904 <prvInitialiseTaskLists+0x70>)
 80128d4:	f7fe fc4a 	bl	801116c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80128d8:	480b      	ldr	r0, [pc, #44]	; (8012908 <prvInitialiseTaskLists+0x74>)
 80128da:	f7fe fc47 	bl	801116c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80128de:	4b0b      	ldr	r3, [pc, #44]	; (801290c <prvInitialiseTaskLists+0x78>)
 80128e0:	4a05      	ldr	r2, [pc, #20]	; (80128f8 <prvInitialiseTaskLists+0x64>)
 80128e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80128e4:	4b0a      	ldr	r3, [pc, #40]	; (8012910 <prvInitialiseTaskLists+0x7c>)
 80128e6:	4a05      	ldr	r2, [pc, #20]	; (80128fc <prvInitialiseTaskLists+0x68>)
 80128e8:	601a      	str	r2, [r3, #0]
}
 80128ea:	bf00      	nop
 80128ec:	3708      	adds	r7, #8
 80128ee:	46bd      	mov	sp, r7
 80128f0:	bd80      	pop	{r7, pc}
 80128f2:	bf00      	nop
 80128f4:	20000934 	.word	0x20000934
 80128f8:	20000d94 	.word	0x20000d94
 80128fc:	20000da8 	.word	0x20000da8
 8012900:	20000dc4 	.word	0x20000dc4
 8012904:	20000dd8 	.word	0x20000dd8
 8012908:	20000df0 	.word	0x20000df0
 801290c:	20000dbc 	.word	0x20000dbc
 8012910:	20000dc0 	.word	0x20000dc0

08012914 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b082      	sub	sp, #8
 8012918:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801291a:	e019      	b.n	8012950 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801291c:	f000 fdbe 	bl	801349c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012920:	4b0f      	ldr	r3, [pc, #60]	; (8012960 <prvCheckTasksWaitingTermination+0x4c>)
 8012922:	68db      	ldr	r3, [r3, #12]
 8012924:	68db      	ldr	r3, [r3, #12]
 8012926:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	3304      	adds	r3, #4
 801292c:	4618      	mov	r0, r3
 801292e:	f7fe fca7 	bl	8011280 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012932:	4b0c      	ldr	r3, [pc, #48]	; (8012964 <prvCheckTasksWaitingTermination+0x50>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	3b01      	subs	r3, #1
 8012938:	4a0a      	ldr	r2, [pc, #40]	; (8012964 <prvCheckTasksWaitingTermination+0x50>)
 801293a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801293c:	4b0a      	ldr	r3, [pc, #40]	; (8012968 <prvCheckTasksWaitingTermination+0x54>)
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	3b01      	subs	r3, #1
 8012942:	4a09      	ldr	r2, [pc, #36]	; (8012968 <prvCheckTasksWaitingTermination+0x54>)
 8012944:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012946:	f000 fdd7 	bl	80134f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801294a:	6878      	ldr	r0, [r7, #4]
 801294c:	f000 f80e 	bl	801296c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012950:	4b05      	ldr	r3, [pc, #20]	; (8012968 <prvCheckTasksWaitingTermination+0x54>)
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d1e1      	bne.n	801291c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012958:	bf00      	nop
 801295a:	3708      	adds	r7, #8
 801295c:	46bd      	mov	sp, r7
 801295e:	bd80      	pop	{r7, pc}
 8012960:	20000dd8 	.word	0x20000dd8
 8012964:	20000e04 	.word	0x20000e04
 8012968:	20000dec 	.word	0x20000dec

0801296c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801296c:	b580      	push	{r7, lr}
 801296e:	b084      	sub	sp, #16
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801297a:	2b00      	cmp	r3, #0
 801297c:	d108      	bne.n	8012990 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012982:	4618      	mov	r0, r3
 8012984:	f000 ff66 	bl	8013854 <vPortFree>
				vPortFree( pxTCB );
 8012988:	6878      	ldr	r0, [r7, #4]
 801298a:	f000 ff63 	bl	8013854 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801298e:	e017      	b.n	80129c0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012996:	2b01      	cmp	r3, #1
 8012998:	d103      	bne.n	80129a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801299a:	6878      	ldr	r0, [r7, #4]
 801299c:	f000 ff5a 	bl	8013854 <vPortFree>
	}
 80129a0:	e00e      	b.n	80129c0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80129a8:	2b02      	cmp	r3, #2
 80129aa:	d009      	beq.n	80129c0 <prvDeleteTCB+0x54>
 80129ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129b0:	f383 8811 	msr	BASEPRI, r3
 80129b4:	f3bf 8f6f 	isb	sy
 80129b8:	f3bf 8f4f 	dsb	sy
 80129bc:	60fb      	str	r3, [r7, #12]
 80129be:	e7fe      	b.n	80129be <prvDeleteTCB+0x52>
	}
 80129c0:	bf00      	nop
 80129c2:	3710      	adds	r7, #16
 80129c4:	46bd      	mov	sp, r7
 80129c6:	bd80      	pop	{r7, pc}

080129c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80129c8:	b480      	push	{r7}
 80129ca:	b083      	sub	sp, #12
 80129cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80129ce:	4b0c      	ldr	r3, [pc, #48]	; (8012a00 <prvResetNextTaskUnblockTime+0x38>)
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d104      	bne.n	80129e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80129d8:	4b0a      	ldr	r3, [pc, #40]	; (8012a04 <prvResetNextTaskUnblockTime+0x3c>)
 80129da:	f04f 32ff 	mov.w	r2, #4294967295
 80129de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80129e0:	e008      	b.n	80129f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80129e2:	4b07      	ldr	r3, [pc, #28]	; (8012a00 <prvResetNextTaskUnblockTime+0x38>)
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	68db      	ldr	r3, [r3, #12]
 80129e8:	68db      	ldr	r3, [r3, #12]
 80129ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	685b      	ldr	r3, [r3, #4]
 80129f0:	4a04      	ldr	r2, [pc, #16]	; (8012a04 <prvResetNextTaskUnblockTime+0x3c>)
 80129f2:	6013      	str	r3, [r2, #0]
}
 80129f4:	bf00      	nop
 80129f6:	370c      	adds	r7, #12
 80129f8:	46bd      	mov	sp, r7
 80129fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fe:	4770      	bx	lr
 8012a00:	20000dbc 	.word	0x20000dbc
 8012a04:	20000e24 	.word	0x20000e24

08012a08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012a08:	b480      	push	{r7}
 8012a0a:	b083      	sub	sp, #12
 8012a0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012a0e:	4b0b      	ldr	r3, [pc, #44]	; (8012a3c <xTaskGetSchedulerState+0x34>)
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d102      	bne.n	8012a1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012a16:	2301      	movs	r3, #1
 8012a18:	607b      	str	r3, [r7, #4]
 8012a1a:	e008      	b.n	8012a2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012a1c:	4b08      	ldr	r3, [pc, #32]	; (8012a40 <xTaskGetSchedulerState+0x38>)
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d102      	bne.n	8012a2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012a24:	2302      	movs	r3, #2
 8012a26:	607b      	str	r3, [r7, #4]
 8012a28:	e001      	b.n	8012a2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012a2e:	687b      	ldr	r3, [r7, #4]
	}
 8012a30:	4618      	mov	r0, r3
 8012a32:	370c      	adds	r7, #12
 8012a34:	46bd      	mov	sp, r7
 8012a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3a:	4770      	bx	lr
 8012a3c:	20000e10 	.word	0x20000e10
 8012a40:	20000e2c 	.word	0x20000e2c

08012a44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b086      	sub	sp, #24
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012a50:	2300      	movs	r3, #0
 8012a52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d054      	beq.n	8012b04 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012a5a:	4b2d      	ldr	r3, [pc, #180]	; (8012b10 <xTaskPriorityDisinherit+0xcc>)
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	693a      	ldr	r2, [r7, #16]
 8012a60:	429a      	cmp	r2, r3
 8012a62:	d009      	beq.n	8012a78 <xTaskPriorityDisinherit+0x34>
 8012a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a68:	f383 8811 	msr	BASEPRI, r3
 8012a6c:	f3bf 8f6f 	isb	sy
 8012a70:	f3bf 8f4f 	dsb	sy
 8012a74:	60fb      	str	r3, [r7, #12]
 8012a76:	e7fe      	b.n	8012a76 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8012a78:	693b      	ldr	r3, [r7, #16]
 8012a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d109      	bne.n	8012a94 <xTaskPriorityDisinherit+0x50>
 8012a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a84:	f383 8811 	msr	BASEPRI, r3
 8012a88:	f3bf 8f6f 	isb	sy
 8012a8c:	f3bf 8f4f 	dsb	sy
 8012a90:	60bb      	str	r3, [r7, #8]
 8012a92:	e7fe      	b.n	8012a92 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8012a94:	693b      	ldr	r3, [r7, #16]
 8012a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a98:	1e5a      	subs	r2, r3, #1
 8012a9a:	693b      	ldr	r3, [r7, #16]
 8012a9c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012a9e:	693b      	ldr	r3, [r7, #16]
 8012aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012aa2:	693b      	ldr	r3, [r7, #16]
 8012aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012aa6:	429a      	cmp	r2, r3
 8012aa8:	d02c      	beq.n	8012b04 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012aaa:	693b      	ldr	r3, [r7, #16]
 8012aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d128      	bne.n	8012b04 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012ab2:	693b      	ldr	r3, [r7, #16]
 8012ab4:	3304      	adds	r3, #4
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	f7fe fbe2 	bl	8011280 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012abc:	693b      	ldr	r3, [r7, #16]
 8012abe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012ac0:	693b      	ldr	r3, [r7, #16]
 8012ac2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012ac4:	693b      	ldr	r3, [r7, #16]
 8012ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ac8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012acc:	693b      	ldr	r3, [r7, #16]
 8012ace:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012ad0:	693b      	ldr	r3, [r7, #16]
 8012ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ad4:	4b0f      	ldr	r3, [pc, #60]	; (8012b14 <xTaskPriorityDisinherit+0xd0>)
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	429a      	cmp	r2, r3
 8012ada:	d903      	bls.n	8012ae4 <xTaskPriorityDisinherit+0xa0>
 8012adc:	693b      	ldr	r3, [r7, #16]
 8012ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ae0:	4a0c      	ldr	r2, [pc, #48]	; (8012b14 <xTaskPriorityDisinherit+0xd0>)
 8012ae2:	6013      	str	r3, [r2, #0]
 8012ae4:	693b      	ldr	r3, [r7, #16]
 8012ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ae8:	4613      	mov	r3, r2
 8012aea:	009b      	lsls	r3, r3, #2
 8012aec:	4413      	add	r3, r2
 8012aee:	009b      	lsls	r3, r3, #2
 8012af0:	4a09      	ldr	r2, [pc, #36]	; (8012b18 <xTaskPriorityDisinherit+0xd4>)
 8012af2:	441a      	add	r2, r3
 8012af4:	693b      	ldr	r3, [r7, #16]
 8012af6:	3304      	adds	r3, #4
 8012af8:	4619      	mov	r1, r3
 8012afa:	4610      	mov	r0, r2
 8012afc:	f7fe fb63 	bl	80111c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012b00:	2301      	movs	r3, #1
 8012b02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012b04:	697b      	ldr	r3, [r7, #20]
	}
 8012b06:	4618      	mov	r0, r3
 8012b08:	3718      	adds	r7, #24
 8012b0a:	46bd      	mov	sp, r7
 8012b0c:	bd80      	pop	{r7, pc}
 8012b0e:	bf00      	nop
 8012b10:	20000930 	.word	0x20000930
 8012b14:	20000e0c 	.word	0x20000e0c
 8012b18:	20000934 	.word	0x20000934

08012b1c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b084      	sub	sp, #16
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
 8012b24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012b26:	4b21      	ldr	r3, [pc, #132]	; (8012bac <prvAddCurrentTaskToDelayedList+0x90>)
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012b2c:	4b20      	ldr	r3, [pc, #128]	; (8012bb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	3304      	adds	r3, #4
 8012b32:	4618      	mov	r0, r3
 8012b34:	f7fe fba4 	bl	8011280 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b3e:	d10a      	bne.n	8012b56 <prvAddCurrentTaskToDelayedList+0x3a>
 8012b40:	683b      	ldr	r3, [r7, #0]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d007      	beq.n	8012b56 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012b46:	4b1a      	ldr	r3, [pc, #104]	; (8012bb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	3304      	adds	r3, #4
 8012b4c:	4619      	mov	r1, r3
 8012b4e:	4819      	ldr	r0, [pc, #100]	; (8012bb4 <prvAddCurrentTaskToDelayedList+0x98>)
 8012b50:	f7fe fb39 	bl	80111c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012b54:	e026      	b.n	8012ba4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012b56:	68fa      	ldr	r2, [r7, #12]
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	4413      	add	r3, r2
 8012b5c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012b5e:	4b14      	ldr	r3, [pc, #80]	; (8012bb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	68ba      	ldr	r2, [r7, #8]
 8012b64:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012b66:	68ba      	ldr	r2, [r7, #8]
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	429a      	cmp	r2, r3
 8012b6c:	d209      	bcs.n	8012b82 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012b6e:	4b12      	ldr	r3, [pc, #72]	; (8012bb8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012b70:	681a      	ldr	r2, [r3, #0]
 8012b72:	4b0f      	ldr	r3, [pc, #60]	; (8012bb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	3304      	adds	r3, #4
 8012b78:	4619      	mov	r1, r3
 8012b7a:	4610      	mov	r0, r2
 8012b7c:	f7fe fb47 	bl	801120e <vListInsert>
}
 8012b80:	e010      	b.n	8012ba4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012b82:	4b0e      	ldr	r3, [pc, #56]	; (8012bbc <prvAddCurrentTaskToDelayedList+0xa0>)
 8012b84:	681a      	ldr	r2, [r3, #0]
 8012b86:	4b0a      	ldr	r3, [pc, #40]	; (8012bb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	3304      	adds	r3, #4
 8012b8c:	4619      	mov	r1, r3
 8012b8e:	4610      	mov	r0, r2
 8012b90:	f7fe fb3d 	bl	801120e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012b94:	4b0a      	ldr	r3, [pc, #40]	; (8012bc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	68ba      	ldr	r2, [r7, #8]
 8012b9a:	429a      	cmp	r2, r3
 8012b9c:	d202      	bcs.n	8012ba4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012b9e:	4a08      	ldr	r2, [pc, #32]	; (8012bc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012ba0:	68bb      	ldr	r3, [r7, #8]
 8012ba2:	6013      	str	r3, [r2, #0]
}
 8012ba4:	bf00      	nop
 8012ba6:	3710      	adds	r7, #16
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	bd80      	pop	{r7, pc}
 8012bac:	20000e08 	.word	0x20000e08
 8012bb0:	20000930 	.word	0x20000930
 8012bb4:	20000df0 	.word	0x20000df0
 8012bb8:	20000dc0 	.word	0x20000dc0
 8012bbc:	20000dbc 	.word	0x20000dbc
 8012bc0:	20000e24 	.word	0x20000e24

08012bc4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b08a      	sub	sp, #40	; 0x28
 8012bc8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012bca:	2300      	movs	r3, #0
 8012bcc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012bce:	f000 faff 	bl	80131d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012bd2:	4b1c      	ldr	r3, [pc, #112]	; (8012c44 <xTimerCreateTimerTask+0x80>)
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d021      	beq.n	8012c1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012bda:	2300      	movs	r3, #0
 8012bdc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012bde:	2300      	movs	r3, #0
 8012be0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012be2:	1d3a      	adds	r2, r7, #4
 8012be4:	f107 0108 	add.w	r1, r7, #8
 8012be8:	f107 030c 	add.w	r3, r7, #12
 8012bec:	4618      	mov	r0, r3
 8012bee:	f7fe faa3 	bl	8011138 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012bf2:	6879      	ldr	r1, [r7, #4]
 8012bf4:	68bb      	ldr	r3, [r7, #8]
 8012bf6:	68fa      	ldr	r2, [r7, #12]
 8012bf8:	9202      	str	r2, [sp, #8]
 8012bfa:	9301      	str	r3, [sp, #4]
 8012bfc:	2302      	movs	r3, #2
 8012bfe:	9300      	str	r3, [sp, #0]
 8012c00:	2300      	movs	r3, #0
 8012c02:	460a      	mov	r2, r1
 8012c04:	4910      	ldr	r1, [pc, #64]	; (8012c48 <xTimerCreateTimerTask+0x84>)
 8012c06:	4811      	ldr	r0, [pc, #68]	; (8012c4c <xTimerCreateTimerTask+0x88>)
 8012c08:	f7ff f8f6 	bl	8011df8 <xTaskCreateStatic>
 8012c0c:	4602      	mov	r2, r0
 8012c0e:	4b10      	ldr	r3, [pc, #64]	; (8012c50 <xTimerCreateTimerTask+0x8c>)
 8012c10:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012c12:	4b0f      	ldr	r3, [pc, #60]	; (8012c50 <xTimerCreateTimerTask+0x8c>)
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d001      	beq.n	8012c1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012c1a:	2301      	movs	r3, #1
 8012c1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012c1e:	697b      	ldr	r3, [r7, #20]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d109      	bne.n	8012c38 <xTimerCreateTimerTask+0x74>
 8012c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c28:	f383 8811 	msr	BASEPRI, r3
 8012c2c:	f3bf 8f6f 	isb	sy
 8012c30:	f3bf 8f4f 	dsb	sy
 8012c34:	613b      	str	r3, [r7, #16]
 8012c36:	e7fe      	b.n	8012c36 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8012c38:	697b      	ldr	r3, [r7, #20]
}
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	3718      	adds	r7, #24
 8012c3e:	46bd      	mov	sp, r7
 8012c40:	bd80      	pop	{r7, pc}
 8012c42:	bf00      	nop
 8012c44:	20000e60 	.word	0x20000e60
 8012c48:	08014a50 	.word	0x08014a50
 8012c4c:	08012d85 	.word	0x08012d85
 8012c50:	20000e64 	.word	0x20000e64

08012c54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b08a      	sub	sp, #40	; 0x28
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	60f8      	str	r0, [r7, #12]
 8012c5c:	60b9      	str	r1, [r7, #8]
 8012c5e:	607a      	str	r2, [r7, #4]
 8012c60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012c62:	2300      	movs	r3, #0
 8012c64:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d109      	bne.n	8012c80 <xTimerGenericCommand+0x2c>
 8012c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c70:	f383 8811 	msr	BASEPRI, r3
 8012c74:	f3bf 8f6f 	isb	sy
 8012c78:	f3bf 8f4f 	dsb	sy
 8012c7c:	623b      	str	r3, [r7, #32]
 8012c7e:	e7fe      	b.n	8012c7e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012c80:	4b19      	ldr	r3, [pc, #100]	; (8012ce8 <xTimerGenericCommand+0x94>)
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d02a      	beq.n	8012cde <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012c88:	68bb      	ldr	r3, [r7, #8]
 8012c8a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012c94:	68bb      	ldr	r3, [r7, #8]
 8012c96:	2b05      	cmp	r3, #5
 8012c98:	dc18      	bgt.n	8012ccc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012c9a:	f7ff feb5 	bl	8012a08 <xTaskGetSchedulerState>
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	2b02      	cmp	r3, #2
 8012ca2:	d109      	bne.n	8012cb8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012ca4:	4b10      	ldr	r3, [pc, #64]	; (8012ce8 <xTimerGenericCommand+0x94>)
 8012ca6:	6818      	ldr	r0, [r3, #0]
 8012ca8:	f107 0110 	add.w	r1, r7, #16
 8012cac:	2300      	movs	r3, #0
 8012cae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012cb0:	f7fe fc4e 	bl	8011550 <xQueueGenericSend>
 8012cb4:	6278      	str	r0, [r7, #36]	; 0x24
 8012cb6:	e012      	b.n	8012cde <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012cb8:	4b0b      	ldr	r3, [pc, #44]	; (8012ce8 <xTimerGenericCommand+0x94>)
 8012cba:	6818      	ldr	r0, [r3, #0]
 8012cbc:	f107 0110 	add.w	r1, r7, #16
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	f7fe fc44 	bl	8011550 <xQueueGenericSend>
 8012cc8:	6278      	str	r0, [r7, #36]	; 0x24
 8012cca:	e008      	b.n	8012cde <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012ccc:	4b06      	ldr	r3, [pc, #24]	; (8012ce8 <xTimerGenericCommand+0x94>)
 8012cce:	6818      	ldr	r0, [r3, #0]
 8012cd0:	f107 0110 	add.w	r1, r7, #16
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	683a      	ldr	r2, [r7, #0]
 8012cd8:	f7fe fd34 	bl	8011744 <xQueueGenericSendFromISR>
 8012cdc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	3728      	adds	r7, #40	; 0x28
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	bd80      	pop	{r7, pc}
 8012ce8:	20000e60 	.word	0x20000e60

08012cec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b088      	sub	sp, #32
 8012cf0:	af02      	add	r7, sp, #8
 8012cf2:	6078      	str	r0, [r7, #4]
 8012cf4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012cf6:	4b22      	ldr	r3, [pc, #136]	; (8012d80 <prvProcessExpiredTimer+0x94>)
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	68db      	ldr	r3, [r3, #12]
 8012cfc:	68db      	ldr	r3, [r3, #12]
 8012cfe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012d00:	697b      	ldr	r3, [r7, #20]
 8012d02:	3304      	adds	r3, #4
 8012d04:	4618      	mov	r0, r3
 8012d06:	f7fe fabb 	bl	8011280 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012d0a:	697b      	ldr	r3, [r7, #20]
 8012d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012d10:	f003 0304 	and.w	r3, r3, #4
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d021      	beq.n	8012d5c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012d18:	697b      	ldr	r3, [r7, #20]
 8012d1a:	699a      	ldr	r2, [r3, #24]
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	18d1      	adds	r1, r2, r3
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	683a      	ldr	r2, [r7, #0]
 8012d24:	6978      	ldr	r0, [r7, #20]
 8012d26:	f000 f8d1 	bl	8012ecc <prvInsertTimerInActiveList>
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d01e      	beq.n	8012d6e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012d30:	2300      	movs	r3, #0
 8012d32:	9300      	str	r3, [sp, #0]
 8012d34:	2300      	movs	r3, #0
 8012d36:	687a      	ldr	r2, [r7, #4]
 8012d38:	2100      	movs	r1, #0
 8012d3a:	6978      	ldr	r0, [r7, #20]
 8012d3c:	f7ff ff8a 	bl	8012c54 <xTimerGenericCommand>
 8012d40:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012d42:	693b      	ldr	r3, [r7, #16]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d112      	bne.n	8012d6e <prvProcessExpiredTimer+0x82>
 8012d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d4c:	f383 8811 	msr	BASEPRI, r3
 8012d50:	f3bf 8f6f 	isb	sy
 8012d54:	f3bf 8f4f 	dsb	sy
 8012d58:	60fb      	str	r3, [r7, #12]
 8012d5a:	e7fe      	b.n	8012d5a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012d5c:	697b      	ldr	r3, [r7, #20]
 8012d5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012d62:	f023 0301 	bic.w	r3, r3, #1
 8012d66:	b2da      	uxtb	r2, r3
 8012d68:	697b      	ldr	r3, [r7, #20]
 8012d6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012d6e:	697b      	ldr	r3, [r7, #20]
 8012d70:	6a1b      	ldr	r3, [r3, #32]
 8012d72:	6978      	ldr	r0, [r7, #20]
 8012d74:	4798      	blx	r3
}
 8012d76:	bf00      	nop
 8012d78:	3718      	adds	r7, #24
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd80      	pop	{r7, pc}
 8012d7e:	bf00      	nop
 8012d80:	20000e58 	.word	0x20000e58

08012d84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b084      	sub	sp, #16
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012d8c:	f107 0308 	add.w	r3, r7, #8
 8012d90:	4618      	mov	r0, r3
 8012d92:	f000 f857 	bl	8012e44 <prvGetNextExpireTime>
 8012d96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012d98:	68bb      	ldr	r3, [r7, #8]
 8012d9a:	4619      	mov	r1, r3
 8012d9c:	68f8      	ldr	r0, [r7, #12]
 8012d9e:	f000 f803 	bl	8012da8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012da2:	f000 f8d5 	bl	8012f50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012da6:	e7f1      	b.n	8012d8c <prvTimerTask+0x8>

08012da8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b084      	sub	sp, #16
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
 8012db0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012db2:	f7ff fa57 	bl	8012264 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012db6:	f107 0308 	add.w	r3, r7, #8
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f000 f866 	bl	8012e8c <prvSampleTimeNow>
 8012dc0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012dc2:	68bb      	ldr	r3, [r7, #8]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d130      	bne.n	8012e2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012dc8:	683b      	ldr	r3, [r7, #0]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d10a      	bne.n	8012de4 <prvProcessTimerOrBlockTask+0x3c>
 8012dce:	687a      	ldr	r2, [r7, #4]
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	429a      	cmp	r2, r3
 8012dd4:	d806      	bhi.n	8012de4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012dd6:	f7ff fa53 	bl	8012280 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012dda:	68f9      	ldr	r1, [r7, #12]
 8012ddc:	6878      	ldr	r0, [r7, #4]
 8012dde:	f7ff ff85 	bl	8012cec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012de2:	e024      	b.n	8012e2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012de4:	683b      	ldr	r3, [r7, #0]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d008      	beq.n	8012dfc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012dea:	4b13      	ldr	r3, [pc, #76]	; (8012e38 <prvProcessTimerOrBlockTask+0x90>)
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d101      	bne.n	8012df8 <prvProcessTimerOrBlockTask+0x50>
 8012df4:	2301      	movs	r3, #1
 8012df6:	e000      	b.n	8012dfa <prvProcessTimerOrBlockTask+0x52>
 8012df8:	2300      	movs	r3, #0
 8012dfa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012dfc:	4b0f      	ldr	r3, [pc, #60]	; (8012e3c <prvProcessTimerOrBlockTask+0x94>)
 8012dfe:	6818      	ldr	r0, [r3, #0]
 8012e00:	687a      	ldr	r2, [r7, #4]
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	1ad3      	subs	r3, r2, r3
 8012e06:	683a      	ldr	r2, [r7, #0]
 8012e08:	4619      	mov	r1, r3
 8012e0a:	f7fe ffc1 	bl	8011d90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012e0e:	f7ff fa37 	bl	8012280 <xTaskResumeAll>
 8012e12:	4603      	mov	r3, r0
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d10a      	bne.n	8012e2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012e18:	4b09      	ldr	r3, [pc, #36]	; (8012e40 <prvProcessTimerOrBlockTask+0x98>)
 8012e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e1e:	601a      	str	r2, [r3, #0]
 8012e20:	f3bf 8f4f 	dsb	sy
 8012e24:	f3bf 8f6f 	isb	sy
}
 8012e28:	e001      	b.n	8012e2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012e2a:	f7ff fa29 	bl	8012280 <xTaskResumeAll>
}
 8012e2e:	bf00      	nop
 8012e30:	3710      	adds	r7, #16
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bd80      	pop	{r7, pc}
 8012e36:	bf00      	nop
 8012e38:	20000e5c 	.word	0x20000e5c
 8012e3c:	20000e60 	.word	0x20000e60
 8012e40:	e000ed04 	.word	0xe000ed04

08012e44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012e44:	b480      	push	{r7}
 8012e46:	b085      	sub	sp, #20
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012e4c:	4b0e      	ldr	r3, [pc, #56]	; (8012e88 <prvGetNextExpireTime+0x44>)
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d101      	bne.n	8012e5a <prvGetNextExpireTime+0x16>
 8012e56:	2201      	movs	r2, #1
 8012e58:	e000      	b.n	8012e5c <prvGetNextExpireTime+0x18>
 8012e5a:	2200      	movs	r2, #0
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d105      	bne.n	8012e74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012e68:	4b07      	ldr	r3, [pc, #28]	; (8012e88 <prvGetNextExpireTime+0x44>)
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	68db      	ldr	r3, [r3, #12]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	60fb      	str	r3, [r7, #12]
 8012e72:	e001      	b.n	8012e78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012e74:	2300      	movs	r3, #0
 8012e76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012e78:	68fb      	ldr	r3, [r7, #12]
}
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	3714      	adds	r7, #20
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e84:	4770      	bx	lr
 8012e86:	bf00      	nop
 8012e88:	20000e58 	.word	0x20000e58

08012e8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b084      	sub	sp, #16
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012e94:	f7ff fa90 	bl	80123b8 <xTaskGetTickCount>
 8012e98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012e9a:	4b0b      	ldr	r3, [pc, #44]	; (8012ec8 <prvSampleTimeNow+0x3c>)
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	68fa      	ldr	r2, [r7, #12]
 8012ea0:	429a      	cmp	r2, r3
 8012ea2:	d205      	bcs.n	8012eb0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012ea4:	f000 f930 	bl	8013108 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	2201      	movs	r2, #1
 8012eac:	601a      	str	r2, [r3, #0]
 8012eae:	e002      	b.n	8012eb6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012eb6:	4a04      	ldr	r2, [pc, #16]	; (8012ec8 <prvSampleTimeNow+0x3c>)
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012ebc:	68fb      	ldr	r3, [r7, #12]
}
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	3710      	adds	r7, #16
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	bd80      	pop	{r7, pc}
 8012ec6:	bf00      	nop
 8012ec8:	20000e68 	.word	0x20000e68

08012ecc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b086      	sub	sp, #24
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	60f8      	str	r0, [r7, #12]
 8012ed4:	60b9      	str	r1, [r7, #8]
 8012ed6:	607a      	str	r2, [r7, #4]
 8012ed8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012eda:	2300      	movs	r3, #0
 8012edc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	68ba      	ldr	r2, [r7, #8]
 8012ee2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	68fa      	ldr	r2, [r7, #12]
 8012ee8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012eea:	68ba      	ldr	r2, [r7, #8]
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	429a      	cmp	r2, r3
 8012ef0:	d812      	bhi.n	8012f18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012ef2:	687a      	ldr	r2, [r7, #4]
 8012ef4:	683b      	ldr	r3, [r7, #0]
 8012ef6:	1ad2      	subs	r2, r2, r3
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	699b      	ldr	r3, [r3, #24]
 8012efc:	429a      	cmp	r2, r3
 8012efe:	d302      	bcc.n	8012f06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012f00:	2301      	movs	r3, #1
 8012f02:	617b      	str	r3, [r7, #20]
 8012f04:	e01b      	b.n	8012f3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012f06:	4b10      	ldr	r3, [pc, #64]	; (8012f48 <prvInsertTimerInActiveList+0x7c>)
 8012f08:	681a      	ldr	r2, [r3, #0]
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	3304      	adds	r3, #4
 8012f0e:	4619      	mov	r1, r3
 8012f10:	4610      	mov	r0, r2
 8012f12:	f7fe f97c 	bl	801120e <vListInsert>
 8012f16:	e012      	b.n	8012f3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012f18:	687a      	ldr	r2, [r7, #4]
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	429a      	cmp	r2, r3
 8012f1e:	d206      	bcs.n	8012f2e <prvInsertTimerInActiveList+0x62>
 8012f20:	68ba      	ldr	r2, [r7, #8]
 8012f22:	683b      	ldr	r3, [r7, #0]
 8012f24:	429a      	cmp	r2, r3
 8012f26:	d302      	bcc.n	8012f2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012f28:	2301      	movs	r3, #1
 8012f2a:	617b      	str	r3, [r7, #20]
 8012f2c:	e007      	b.n	8012f3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012f2e:	4b07      	ldr	r3, [pc, #28]	; (8012f4c <prvInsertTimerInActiveList+0x80>)
 8012f30:	681a      	ldr	r2, [r3, #0]
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	3304      	adds	r3, #4
 8012f36:	4619      	mov	r1, r3
 8012f38:	4610      	mov	r0, r2
 8012f3a:	f7fe f968 	bl	801120e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012f3e:	697b      	ldr	r3, [r7, #20]
}
 8012f40:	4618      	mov	r0, r3
 8012f42:	3718      	adds	r7, #24
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd80      	pop	{r7, pc}
 8012f48:	20000e5c 	.word	0x20000e5c
 8012f4c:	20000e58 	.word	0x20000e58

08012f50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b08e      	sub	sp, #56	; 0x38
 8012f54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012f56:	e0c6      	b.n	80130e6 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	da17      	bge.n	8012f8e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012f5e:	1d3b      	adds	r3, r7, #4
 8012f60:	3304      	adds	r3, #4
 8012f62:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d109      	bne.n	8012f7e <prvProcessReceivedCommands+0x2e>
 8012f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f6e:	f383 8811 	msr	BASEPRI, r3
 8012f72:	f3bf 8f6f 	isb	sy
 8012f76:	f3bf 8f4f 	dsb	sy
 8012f7a:	61fb      	str	r3, [r7, #28]
 8012f7c:	e7fe      	b.n	8012f7c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f84:	6850      	ldr	r0, [r2, #4]
 8012f86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f88:	6892      	ldr	r2, [r2, #8]
 8012f8a:	4611      	mov	r1, r2
 8012f8c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	f2c0 80a7 	blt.w	80130e4 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f9c:	695b      	ldr	r3, [r3, #20]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d004      	beq.n	8012fac <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fa4:	3304      	adds	r3, #4
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	f7fe f96a 	bl	8011280 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012fac:	463b      	mov	r3, r7
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f7ff ff6c 	bl	8012e8c <prvSampleTimeNow>
 8012fb4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	2b09      	cmp	r3, #9
 8012fba:	f200 8094 	bhi.w	80130e6 <prvProcessReceivedCommands+0x196>
 8012fbe:	a201      	add	r2, pc, #4	; (adr r2, 8012fc4 <prvProcessReceivedCommands+0x74>)
 8012fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fc4:	08012fed 	.word	0x08012fed
 8012fc8:	08012fed 	.word	0x08012fed
 8012fcc:	08012fed 	.word	0x08012fed
 8012fd0:	0801305f 	.word	0x0801305f
 8012fd4:	08013073 	.word	0x08013073
 8012fd8:	080130bb 	.word	0x080130bb
 8012fdc:	08012fed 	.word	0x08012fed
 8012fe0:	08012fed 	.word	0x08012fed
 8012fe4:	0801305f 	.word	0x0801305f
 8012fe8:	08013073 	.word	0x08013073
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012ff2:	f043 0301 	orr.w	r3, r3, #1
 8012ff6:	b2da      	uxtb	r2, r3
 8012ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ffa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012ffe:	68ba      	ldr	r2, [r7, #8]
 8013000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013002:	699b      	ldr	r3, [r3, #24]
 8013004:	18d1      	adds	r1, r2, r3
 8013006:	68bb      	ldr	r3, [r7, #8]
 8013008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801300a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801300c:	f7ff ff5e 	bl	8012ecc <prvInsertTimerInActiveList>
 8013010:	4603      	mov	r3, r0
 8013012:	2b00      	cmp	r3, #0
 8013014:	d067      	beq.n	80130e6 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013018:	6a1b      	ldr	r3, [r3, #32]
 801301a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801301c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801301e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013020:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013024:	f003 0304 	and.w	r3, r3, #4
 8013028:	2b00      	cmp	r3, #0
 801302a:	d05c      	beq.n	80130e6 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801302c:	68ba      	ldr	r2, [r7, #8]
 801302e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013030:	699b      	ldr	r3, [r3, #24]
 8013032:	441a      	add	r2, r3
 8013034:	2300      	movs	r3, #0
 8013036:	9300      	str	r3, [sp, #0]
 8013038:	2300      	movs	r3, #0
 801303a:	2100      	movs	r1, #0
 801303c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801303e:	f7ff fe09 	bl	8012c54 <xTimerGenericCommand>
 8013042:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013044:	6a3b      	ldr	r3, [r7, #32]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d14d      	bne.n	80130e6 <prvProcessReceivedCommands+0x196>
 801304a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801304e:	f383 8811 	msr	BASEPRI, r3
 8013052:	f3bf 8f6f 	isb	sy
 8013056:	f3bf 8f4f 	dsb	sy
 801305a:	61bb      	str	r3, [r7, #24]
 801305c:	e7fe      	b.n	801305c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801305e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013064:	f023 0301 	bic.w	r3, r3, #1
 8013068:	b2da      	uxtb	r2, r3
 801306a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801306c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013070:	e039      	b.n	80130e6 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013074:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013078:	f043 0301 	orr.w	r3, r3, #1
 801307c:	b2da      	uxtb	r2, r3
 801307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013080:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013084:	68ba      	ldr	r2, [r7, #8]
 8013086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013088:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801308a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801308c:	699b      	ldr	r3, [r3, #24]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d109      	bne.n	80130a6 <prvProcessReceivedCommands+0x156>
 8013092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013096:	f383 8811 	msr	BASEPRI, r3
 801309a:	f3bf 8f6f 	isb	sy
 801309e:	f3bf 8f4f 	dsb	sy
 80130a2:	617b      	str	r3, [r7, #20]
 80130a4:	e7fe      	b.n	80130a4 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80130a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130a8:	699a      	ldr	r2, [r3, #24]
 80130aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ac:	18d1      	adds	r1, r2, r3
 80130ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130b4:	f7ff ff0a 	bl	8012ecc <prvInsertTimerInActiveList>
					break;
 80130b8:	e015      	b.n	80130e6 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80130ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80130c0:	f003 0302 	and.w	r3, r3, #2
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d103      	bne.n	80130d0 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80130c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130ca:	f000 fbc3 	bl	8013854 <vPortFree>
 80130ce:	e00a      	b.n	80130e6 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80130d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80130d6:	f023 0301 	bic.w	r3, r3, #1
 80130da:	b2da      	uxtb	r2, r3
 80130dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80130e2:	e000      	b.n	80130e6 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80130e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80130e6:	4b07      	ldr	r3, [pc, #28]	; (8013104 <prvProcessReceivedCommands+0x1b4>)
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	1d39      	adds	r1, r7, #4
 80130ec:	2200      	movs	r2, #0
 80130ee:	4618      	mov	r0, r3
 80130f0:	f7fe fbbc 	bl	801186c <xQueueReceive>
 80130f4:	4603      	mov	r3, r0
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	f47f af2e 	bne.w	8012f58 <prvProcessReceivedCommands+0x8>
	}
}
 80130fc:	bf00      	nop
 80130fe:	3730      	adds	r7, #48	; 0x30
 8013100:	46bd      	mov	sp, r7
 8013102:	bd80      	pop	{r7, pc}
 8013104:	20000e60 	.word	0x20000e60

08013108 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013108:	b580      	push	{r7, lr}
 801310a:	b088      	sub	sp, #32
 801310c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801310e:	e047      	b.n	80131a0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013110:	4b2d      	ldr	r3, [pc, #180]	; (80131c8 <prvSwitchTimerLists+0xc0>)
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	68db      	ldr	r3, [r3, #12]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801311a:	4b2b      	ldr	r3, [pc, #172]	; (80131c8 <prvSwitchTimerLists+0xc0>)
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	68db      	ldr	r3, [r3, #12]
 8013120:	68db      	ldr	r3, [r3, #12]
 8013122:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	3304      	adds	r3, #4
 8013128:	4618      	mov	r0, r3
 801312a:	f7fe f8a9 	bl	8011280 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	6a1b      	ldr	r3, [r3, #32]
 8013132:	68f8      	ldr	r0, [r7, #12]
 8013134:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801313c:	f003 0304 	and.w	r3, r3, #4
 8013140:	2b00      	cmp	r3, #0
 8013142:	d02d      	beq.n	80131a0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	699b      	ldr	r3, [r3, #24]
 8013148:	693a      	ldr	r2, [r7, #16]
 801314a:	4413      	add	r3, r2
 801314c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801314e:	68ba      	ldr	r2, [r7, #8]
 8013150:	693b      	ldr	r3, [r7, #16]
 8013152:	429a      	cmp	r2, r3
 8013154:	d90e      	bls.n	8013174 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	68ba      	ldr	r2, [r7, #8]
 801315a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	68fa      	ldr	r2, [r7, #12]
 8013160:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013162:	4b19      	ldr	r3, [pc, #100]	; (80131c8 <prvSwitchTimerLists+0xc0>)
 8013164:	681a      	ldr	r2, [r3, #0]
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	3304      	adds	r3, #4
 801316a:	4619      	mov	r1, r3
 801316c:	4610      	mov	r0, r2
 801316e:	f7fe f84e 	bl	801120e <vListInsert>
 8013172:	e015      	b.n	80131a0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013174:	2300      	movs	r3, #0
 8013176:	9300      	str	r3, [sp, #0]
 8013178:	2300      	movs	r3, #0
 801317a:	693a      	ldr	r2, [r7, #16]
 801317c:	2100      	movs	r1, #0
 801317e:	68f8      	ldr	r0, [r7, #12]
 8013180:	f7ff fd68 	bl	8012c54 <xTimerGenericCommand>
 8013184:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d109      	bne.n	80131a0 <prvSwitchTimerLists+0x98>
 801318c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013190:	f383 8811 	msr	BASEPRI, r3
 8013194:	f3bf 8f6f 	isb	sy
 8013198:	f3bf 8f4f 	dsb	sy
 801319c:	603b      	str	r3, [r7, #0]
 801319e:	e7fe      	b.n	801319e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80131a0:	4b09      	ldr	r3, [pc, #36]	; (80131c8 <prvSwitchTimerLists+0xc0>)
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d1b2      	bne.n	8013110 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80131aa:	4b07      	ldr	r3, [pc, #28]	; (80131c8 <prvSwitchTimerLists+0xc0>)
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80131b0:	4b06      	ldr	r3, [pc, #24]	; (80131cc <prvSwitchTimerLists+0xc4>)
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	4a04      	ldr	r2, [pc, #16]	; (80131c8 <prvSwitchTimerLists+0xc0>)
 80131b6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80131b8:	4a04      	ldr	r2, [pc, #16]	; (80131cc <prvSwitchTimerLists+0xc4>)
 80131ba:	697b      	ldr	r3, [r7, #20]
 80131bc:	6013      	str	r3, [r2, #0]
}
 80131be:	bf00      	nop
 80131c0:	3718      	adds	r7, #24
 80131c2:	46bd      	mov	sp, r7
 80131c4:	bd80      	pop	{r7, pc}
 80131c6:	bf00      	nop
 80131c8:	20000e58 	.word	0x20000e58
 80131cc:	20000e5c 	.word	0x20000e5c

080131d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b082      	sub	sp, #8
 80131d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80131d6:	f000 f961 	bl	801349c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80131da:	4b15      	ldr	r3, [pc, #84]	; (8013230 <prvCheckForValidListAndQueue+0x60>)
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d120      	bne.n	8013224 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80131e2:	4814      	ldr	r0, [pc, #80]	; (8013234 <prvCheckForValidListAndQueue+0x64>)
 80131e4:	f7fd ffc2 	bl	801116c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80131e8:	4813      	ldr	r0, [pc, #76]	; (8013238 <prvCheckForValidListAndQueue+0x68>)
 80131ea:	f7fd ffbf 	bl	801116c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80131ee:	4b13      	ldr	r3, [pc, #76]	; (801323c <prvCheckForValidListAndQueue+0x6c>)
 80131f0:	4a10      	ldr	r2, [pc, #64]	; (8013234 <prvCheckForValidListAndQueue+0x64>)
 80131f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80131f4:	4b12      	ldr	r3, [pc, #72]	; (8013240 <prvCheckForValidListAndQueue+0x70>)
 80131f6:	4a10      	ldr	r2, [pc, #64]	; (8013238 <prvCheckForValidListAndQueue+0x68>)
 80131f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80131fa:	2300      	movs	r3, #0
 80131fc:	9300      	str	r3, [sp, #0]
 80131fe:	4b11      	ldr	r3, [pc, #68]	; (8013244 <prvCheckForValidListAndQueue+0x74>)
 8013200:	4a11      	ldr	r2, [pc, #68]	; (8013248 <prvCheckForValidListAndQueue+0x78>)
 8013202:	2110      	movs	r1, #16
 8013204:	200a      	movs	r0, #10
 8013206:	f7fe f8cd 	bl	80113a4 <xQueueGenericCreateStatic>
 801320a:	4602      	mov	r2, r0
 801320c:	4b08      	ldr	r3, [pc, #32]	; (8013230 <prvCheckForValidListAndQueue+0x60>)
 801320e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013210:	4b07      	ldr	r3, [pc, #28]	; (8013230 <prvCheckForValidListAndQueue+0x60>)
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d005      	beq.n	8013224 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013218:	4b05      	ldr	r3, [pc, #20]	; (8013230 <prvCheckForValidListAndQueue+0x60>)
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	490b      	ldr	r1, [pc, #44]	; (801324c <prvCheckForValidListAndQueue+0x7c>)
 801321e:	4618      	mov	r0, r3
 8013220:	f7fe fd8e 	bl	8011d40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013224:	f000 f968 	bl	80134f8 <vPortExitCritical>
}
 8013228:	bf00      	nop
 801322a:	46bd      	mov	sp, r7
 801322c:	bd80      	pop	{r7, pc}
 801322e:	bf00      	nop
 8013230:	20000e60 	.word	0x20000e60
 8013234:	20000e30 	.word	0x20000e30
 8013238:	20000e44 	.word	0x20000e44
 801323c:	20000e58 	.word	0x20000e58
 8013240:	20000e5c 	.word	0x20000e5c
 8013244:	20000f0c 	.word	0x20000f0c
 8013248:	20000e6c 	.word	0x20000e6c
 801324c:	08014a58 	.word	0x08014a58

08013250 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013250:	b480      	push	{r7}
 8013252:	b085      	sub	sp, #20
 8013254:	af00      	add	r7, sp, #0
 8013256:	60f8      	str	r0, [r7, #12]
 8013258:	60b9      	str	r1, [r7, #8]
 801325a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	3b04      	subs	r3, #4
 8013260:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013268:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	3b04      	subs	r3, #4
 801326e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013270:	68bb      	ldr	r3, [r7, #8]
 8013272:	f023 0201 	bic.w	r2, r3, #1
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	3b04      	subs	r3, #4
 801327e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013280:	4a0c      	ldr	r2, [pc, #48]	; (80132b4 <pxPortInitialiseStack+0x64>)
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	3b14      	subs	r3, #20
 801328a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801328c:	687a      	ldr	r2, [r7, #4]
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	3b04      	subs	r3, #4
 8013296:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	f06f 0202 	mvn.w	r2, #2
 801329e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	3b20      	subs	r3, #32
 80132a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80132a6:	68fb      	ldr	r3, [r7, #12]
}
 80132a8:	4618      	mov	r0, r3
 80132aa:	3714      	adds	r7, #20
 80132ac:	46bd      	mov	sp, r7
 80132ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b2:	4770      	bx	lr
 80132b4:	080132b9 	.word	0x080132b9

080132b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80132b8:	b480      	push	{r7}
 80132ba:	b085      	sub	sp, #20
 80132bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80132be:	2300      	movs	r3, #0
 80132c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80132c2:	4b11      	ldr	r3, [pc, #68]	; (8013308 <prvTaskExitError+0x50>)
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132ca:	d009      	beq.n	80132e0 <prvTaskExitError+0x28>
 80132cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132d0:	f383 8811 	msr	BASEPRI, r3
 80132d4:	f3bf 8f6f 	isb	sy
 80132d8:	f3bf 8f4f 	dsb	sy
 80132dc:	60fb      	str	r3, [r7, #12]
 80132de:	e7fe      	b.n	80132de <prvTaskExitError+0x26>
 80132e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132e4:	f383 8811 	msr	BASEPRI, r3
 80132e8:	f3bf 8f6f 	isb	sy
 80132ec:	f3bf 8f4f 	dsb	sy
 80132f0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80132f2:	bf00      	nop
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d0fc      	beq.n	80132f4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80132fa:	bf00      	nop
 80132fc:	3714      	adds	r7, #20
 80132fe:	46bd      	mov	sp, r7
 8013300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013304:	4770      	bx	lr
 8013306:	bf00      	nop
 8013308:	2000008c 	.word	0x2000008c
 801330c:	00000000 	.word	0x00000000

08013310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013310:	4b07      	ldr	r3, [pc, #28]	; (8013330 <pxCurrentTCBConst2>)
 8013312:	6819      	ldr	r1, [r3, #0]
 8013314:	6808      	ldr	r0, [r1, #0]
 8013316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801331a:	f380 8809 	msr	PSP, r0
 801331e:	f3bf 8f6f 	isb	sy
 8013322:	f04f 0000 	mov.w	r0, #0
 8013326:	f380 8811 	msr	BASEPRI, r0
 801332a:	4770      	bx	lr
 801332c:	f3af 8000 	nop.w

08013330 <pxCurrentTCBConst2>:
 8013330:	20000930 	.word	0x20000930
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013334:	bf00      	nop
 8013336:	bf00      	nop

08013338 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013338:	4808      	ldr	r0, [pc, #32]	; (801335c <prvPortStartFirstTask+0x24>)
 801333a:	6800      	ldr	r0, [r0, #0]
 801333c:	6800      	ldr	r0, [r0, #0]
 801333e:	f380 8808 	msr	MSP, r0
 8013342:	f04f 0000 	mov.w	r0, #0
 8013346:	f380 8814 	msr	CONTROL, r0
 801334a:	b662      	cpsie	i
 801334c:	b661      	cpsie	f
 801334e:	f3bf 8f4f 	dsb	sy
 8013352:	f3bf 8f6f 	isb	sy
 8013356:	df00      	svc	0
 8013358:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801335a:	bf00      	nop
 801335c:	e000ed08 	.word	0xe000ed08

08013360 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b086      	sub	sp, #24
 8013364:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013366:	4b44      	ldr	r3, [pc, #272]	; (8013478 <xPortStartScheduler+0x118>)
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	4a44      	ldr	r2, [pc, #272]	; (801347c <xPortStartScheduler+0x11c>)
 801336c:	4293      	cmp	r3, r2
 801336e:	d109      	bne.n	8013384 <xPortStartScheduler+0x24>
 8013370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013374:	f383 8811 	msr	BASEPRI, r3
 8013378:	f3bf 8f6f 	isb	sy
 801337c:	f3bf 8f4f 	dsb	sy
 8013380:	613b      	str	r3, [r7, #16]
 8013382:	e7fe      	b.n	8013382 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013384:	4b3c      	ldr	r3, [pc, #240]	; (8013478 <xPortStartScheduler+0x118>)
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	4a3d      	ldr	r2, [pc, #244]	; (8013480 <xPortStartScheduler+0x120>)
 801338a:	4293      	cmp	r3, r2
 801338c:	d109      	bne.n	80133a2 <xPortStartScheduler+0x42>
 801338e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013392:	f383 8811 	msr	BASEPRI, r3
 8013396:	f3bf 8f6f 	isb	sy
 801339a:	f3bf 8f4f 	dsb	sy
 801339e:	60fb      	str	r3, [r7, #12]
 80133a0:	e7fe      	b.n	80133a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80133a2:	4b38      	ldr	r3, [pc, #224]	; (8013484 <xPortStartScheduler+0x124>)
 80133a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80133a6:	697b      	ldr	r3, [r7, #20]
 80133a8:	781b      	ldrb	r3, [r3, #0]
 80133aa:	b2db      	uxtb	r3, r3
 80133ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80133ae:	697b      	ldr	r3, [r7, #20]
 80133b0:	22ff      	movs	r2, #255	; 0xff
 80133b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80133b4:	697b      	ldr	r3, [r7, #20]
 80133b6:	781b      	ldrb	r3, [r3, #0]
 80133b8:	b2db      	uxtb	r3, r3
 80133ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80133bc:	78fb      	ldrb	r3, [r7, #3]
 80133be:	b2db      	uxtb	r3, r3
 80133c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80133c4:	b2da      	uxtb	r2, r3
 80133c6:	4b30      	ldr	r3, [pc, #192]	; (8013488 <xPortStartScheduler+0x128>)
 80133c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80133ca:	4b30      	ldr	r3, [pc, #192]	; (801348c <xPortStartScheduler+0x12c>)
 80133cc:	2207      	movs	r2, #7
 80133ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80133d0:	e009      	b.n	80133e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80133d2:	4b2e      	ldr	r3, [pc, #184]	; (801348c <xPortStartScheduler+0x12c>)
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	3b01      	subs	r3, #1
 80133d8:	4a2c      	ldr	r2, [pc, #176]	; (801348c <xPortStartScheduler+0x12c>)
 80133da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80133dc:	78fb      	ldrb	r3, [r7, #3]
 80133de:	b2db      	uxtb	r3, r3
 80133e0:	005b      	lsls	r3, r3, #1
 80133e2:	b2db      	uxtb	r3, r3
 80133e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80133e6:	78fb      	ldrb	r3, [r7, #3]
 80133e8:	b2db      	uxtb	r3, r3
 80133ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80133ee:	2b80      	cmp	r3, #128	; 0x80
 80133f0:	d0ef      	beq.n	80133d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80133f2:	4b26      	ldr	r3, [pc, #152]	; (801348c <xPortStartScheduler+0x12c>)
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	f1c3 0307 	rsb	r3, r3, #7
 80133fa:	2b04      	cmp	r3, #4
 80133fc:	d009      	beq.n	8013412 <xPortStartScheduler+0xb2>
 80133fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013402:	f383 8811 	msr	BASEPRI, r3
 8013406:	f3bf 8f6f 	isb	sy
 801340a:	f3bf 8f4f 	dsb	sy
 801340e:	60bb      	str	r3, [r7, #8]
 8013410:	e7fe      	b.n	8013410 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013412:	4b1e      	ldr	r3, [pc, #120]	; (801348c <xPortStartScheduler+0x12c>)
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	021b      	lsls	r3, r3, #8
 8013418:	4a1c      	ldr	r2, [pc, #112]	; (801348c <xPortStartScheduler+0x12c>)
 801341a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801341c:	4b1b      	ldr	r3, [pc, #108]	; (801348c <xPortStartScheduler+0x12c>)
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013424:	4a19      	ldr	r2, [pc, #100]	; (801348c <xPortStartScheduler+0x12c>)
 8013426:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	b2da      	uxtb	r2, r3
 801342c:	697b      	ldr	r3, [r7, #20]
 801342e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013430:	4b17      	ldr	r3, [pc, #92]	; (8013490 <xPortStartScheduler+0x130>)
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	4a16      	ldr	r2, [pc, #88]	; (8013490 <xPortStartScheduler+0x130>)
 8013436:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801343a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801343c:	4b14      	ldr	r3, [pc, #80]	; (8013490 <xPortStartScheduler+0x130>)
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	4a13      	ldr	r2, [pc, #76]	; (8013490 <xPortStartScheduler+0x130>)
 8013442:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013446:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013448:	f000 f8d6 	bl	80135f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801344c:	4b11      	ldr	r3, [pc, #68]	; (8013494 <xPortStartScheduler+0x134>)
 801344e:	2200      	movs	r2, #0
 8013450:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013452:	f000 f8f5 	bl	8013640 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013456:	4b10      	ldr	r3, [pc, #64]	; (8013498 <xPortStartScheduler+0x138>)
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	4a0f      	ldr	r2, [pc, #60]	; (8013498 <xPortStartScheduler+0x138>)
 801345c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013460:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013462:	f7ff ff69 	bl	8013338 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013466:	f7ff f86f 	bl	8012548 <vTaskSwitchContext>
	prvTaskExitError();
 801346a:	f7ff ff25 	bl	80132b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801346e:	2300      	movs	r3, #0
}
 8013470:	4618      	mov	r0, r3
 8013472:	3718      	adds	r7, #24
 8013474:	46bd      	mov	sp, r7
 8013476:	bd80      	pop	{r7, pc}
 8013478:	e000ed00 	.word	0xe000ed00
 801347c:	410fc271 	.word	0x410fc271
 8013480:	410fc270 	.word	0x410fc270
 8013484:	e000e400 	.word	0xe000e400
 8013488:	20000f5c 	.word	0x20000f5c
 801348c:	20000f60 	.word	0x20000f60
 8013490:	e000ed20 	.word	0xe000ed20
 8013494:	2000008c 	.word	0x2000008c
 8013498:	e000ef34 	.word	0xe000ef34

0801349c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801349c:	b480      	push	{r7}
 801349e:	b083      	sub	sp, #12
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134a6:	f383 8811 	msr	BASEPRI, r3
 80134aa:	f3bf 8f6f 	isb	sy
 80134ae:	f3bf 8f4f 	dsb	sy
 80134b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80134b4:	4b0e      	ldr	r3, [pc, #56]	; (80134f0 <vPortEnterCritical+0x54>)
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	3301      	adds	r3, #1
 80134ba:	4a0d      	ldr	r2, [pc, #52]	; (80134f0 <vPortEnterCritical+0x54>)
 80134bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80134be:	4b0c      	ldr	r3, [pc, #48]	; (80134f0 <vPortEnterCritical+0x54>)
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	2b01      	cmp	r3, #1
 80134c4:	d10e      	bne.n	80134e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80134c6:	4b0b      	ldr	r3, [pc, #44]	; (80134f4 <vPortEnterCritical+0x58>)
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	b2db      	uxtb	r3, r3
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d009      	beq.n	80134e4 <vPortEnterCritical+0x48>
 80134d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134d4:	f383 8811 	msr	BASEPRI, r3
 80134d8:	f3bf 8f6f 	isb	sy
 80134dc:	f3bf 8f4f 	dsb	sy
 80134e0:	603b      	str	r3, [r7, #0]
 80134e2:	e7fe      	b.n	80134e2 <vPortEnterCritical+0x46>
	}
}
 80134e4:	bf00      	nop
 80134e6:	370c      	adds	r7, #12
 80134e8:	46bd      	mov	sp, r7
 80134ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ee:	4770      	bx	lr
 80134f0:	2000008c 	.word	0x2000008c
 80134f4:	e000ed04 	.word	0xe000ed04

080134f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80134f8:	b480      	push	{r7}
 80134fa:	b083      	sub	sp, #12
 80134fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80134fe:	4b11      	ldr	r3, [pc, #68]	; (8013544 <vPortExitCritical+0x4c>)
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d109      	bne.n	801351a <vPortExitCritical+0x22>
 8013506:	f04f 0350 	mov.w	r3, #80	; 0x50
 801350a:	f383 8811 	msr	BASEPRI, r3
 801350e:	f3bf 8f6f 	isb	sy
 8013512:	f3bf 8f4f 	dsb	sy
 8013516:	607b      	str	r3, [r7, #4]
 8013518:	e7fe      	b.n	8013518 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801351a:	4b0a      	ldr	r3, [pc, #40]	; (8013544 <vPortExitCritical+0x4c>)
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	3b01      	subs	r3, #1
 8013520:	4a08      	ldr	r2, [pc, #32]	; (8013544 <vPortExitCritical+0x4c>)
 8013522:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013524:	4b07      	ldr	r3, [pc, #28]	; (8013544 <vPortExitCritical+0x4c>)
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d104      	bne.n	8013536 <vPortExitCritical+0x3e>
 801352c:	2300      	movs	r3, #0
 801352e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013530:	683b      	ldr	r3, [r7, #0]
 8013532:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8013536:	bf00      	nop
 8013538:	370c      	adds	r7, #12
 801353a:	46bd      	mov	sp, r7
 801353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013540:	4770      	bx	lr
 8013542:	bf00      	nop
 8013544:	2000008c 	.word	0x2000008c
	...

08013550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013550:	f3ef 8009 	mrs	r0, PSP
 8013554:	f3bf 8f6f 	isb	sy
 8013558:	4b15      	ldr	r3, [pc, #84]	; (80135b0 <pxCurrentTCBConst>)
 801355a:	681a      	ldr	r2, [r3, #0]
 801355c:	f01e 0f10 	tst.w	lr, #16
 8013560:	bf08      	it	eq
 8013562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801356a:	6010      	str	r0, [r2, #0]
 801356c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013570:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013574:	f380 8811 	msr	BASEPRI, r0
 8013578:	f3bf 8f4f 	dsb	sy
 801357c:	f3bf 8f6f 	isb	sy
 8013580:	f7fe ffe2 	bl	8012548 <vTaskSwitchContext>
 8013584:	f04f 0000 	mov.w	r0, #0
 8013588:	f380 8811 	msr	BASEPRI, r0
 801358c:	bc09      	pop	{r0, r3}
 801358e:	6819      	ldr	r1, [r3, #0]
 8013590:	6808      	ldr	r0, [r1, #0]
 8013592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013596:	f01e 0f10 	tst.w	lr, #16
 801359a:	bf08      	it	eq
 801359c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80135a0:	f380 8809 	msr	PSP, r0
 80135a4:	f3bf 8f6f 	isb	sy
 80135a8:	4770      	bx	lr
 80135aa:	bf00      	nop
 80135ac:	f3af 8000 	nop.w

080135b0 <pxCurrentTCBConst>:
 80135b0:	20000930 	.word	0x20000930
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80135b4:	bf00      	nop
 80135b6:	bf00      	nop

080135b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80135b8:	b580      	push	{r7, lr}
 80135ba:	b082      	sub	sp, #8
 80135bc:	af00      	add	r7, sp, #0
	__asm volatile
 80135be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135c2:	f383 8811 	msr	BASEPRI, r3
 80135c6:	f3bf 8f6f 	isb	sy
 80135ca:	f3bf 8f4f 	dsb	sy
 80135ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80135d0:	f7fe ff02 	bl	80123d8 <xTaskIncrementTick>
 80135d4:	4603      	mov	r3, r0
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d003      	beq.n	80135e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80135da:	4b06      	ldr	r3, [pc, #24]	; (80135f4 <SysTick_Handler+0x3c>)
 80135dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135e0:	601a      	str	r2, [r3, #0]
 80135e2:	2300      	movs	r3, #0
 80135e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80135e6:	683b      	ldr	r3, [r7, #0]
 80135e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80135ec:	bf00      	nop
 80135ee:	3708      	adds	r7, #8
 80135f0:	46bd      	mov	sp, r7
 80135f2:	bd80      	pop	{r7, pc}
 80135f4:	e000ed04 	.word	0xe000ed04

080135f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80135f8:	b480      	push	{r7}
 80135fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80135fc:	4b0b      	ldr	r3, [pc, #44]	; (801362c <vPortSetupTimerInterrupt+0x34>)
 80135fe:	2200      	movs	r2, #0
 8013600:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013602:	4b0b      	ldr	r3, [pc, #44]	; (8013630 <vPortSetupTimerInterrupt+0x38>)
 8013604:	2200      	movs	r2, #0
 8013606:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013608:	4b0a      	ldr	r3, [pc, #40]	; (8013634 <vPortSetupTimerInterrupt+0x3c>)
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	4a0a      	ldr	r2, [pc, #40]	; (8013638 <vPortSetupTimerInterrupt+0x40>)
 801360e:	fba2 2303 	umull	r2, r3, r2, r3
 8013612:	099b      	lsrs	r3, r3, #6
 8013614:	4a09      	ldr	r2, [pc, #36]	; (801363c <vPortSetupTimerInterrupt+0x44>)
 8013616:	3b01      	subs	r3, #1
 8013618:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801361a:	4b04      	ldr	r3, [pc, #16]	; (801362c <vPortSetupTimerInterrupt+0x34>)
 801361c:	2207      	movs	r2, #7
 801361e:	601a      	str	r2, [r3, #0]
}
 8013620:	bf00      	nop
 8013622:	46bd      	mov	sp, r7
 8013624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013628:	4770      	bx	lr
 801362a:	bf00      	nop
 801362c:	e000e010 	.word	0xe000e010
 8013630:	e000e018 	.word	0xe000e018
 8013634:	20000004 	.word	0x20000004
 8013638:	10624dd3 	.word	0x10624dd3
 801363c:	e000e014 	.word	0xe000e014

08013640 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013640:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013650 <vPortEnableVFP+0x10>
 8013644:	6801      	ldr	r1, [r0, #0]
 8013646:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801364a:	6001      	str	r1, [r0, #0]
 801364c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801364e:	bf00      	nop
 8013650:	e000ed88 	.word	0xe000ed88

08013654 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013654:	b480      	push	{r7}
 8013656:	b085      	sub	sp, #20
 8013658:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801365a:	f3ef 8305 	mrs	r3, IPSR
 801365e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	2b0f      	cmp	r3, #15
 8013664:	d913      	bls.n	801368e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013666:	4a16      	ldr	r2, [pc, #88]	; (80136c0 <vPortValidateInterruptPriority+0x6c>)
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	4413      	add	r3, r2
 801366c:	781b      	ldrb	r3, [r3, #0]
 801366e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013670:	4b14      	ldr	r3, [pc, #80]	; (80136c4 <vPortValidateInterruptPriority+0x70>)
 8013672:	781b      	ldrb	r3, [r3, #0]
 8013674:	7afa      	ldrb	r2, [r7, #11]
 8013676:	429a      	cmp	r2, r3
 8013678:	d209      	bcs.n	801368e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801367a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801367e:	f383 8811 	msr	BASEPRI, r3
 8013682:	f3bf 8f6f 	isb	sy
 8013686:	f3bf 8f4f 	dsb	sy
 801368a:	607b      	str	r3, [r7, #4]
 801368c:	e7fe      	b.n	801368c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801368e:	4b0e      	ldr	r3, [pc, #56]	; (80136c8 <vPortValidateInterruptPriority+0x74>)
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013696:	4b0d      	ldr	r3, [pc, #52]	; (80136cc <vPortValidateInterruptPriority+0x78>)
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	429a      	cmp	r2, r3
 801369c:	d909      	bls.n	80136b2 <vPortValidateInterruptPriority+0x5e>
 801369e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136a2:	f383 8811 	msr	BASEPRI, r3
 80136a6:	f3bf 8f6f 	isb	sy
 80136aa:	f3bf 8f4f 	dsb	sy
 80136ae:	603b      	str	r3, [r7, #0]
 80136b0:	e7fe      	b.n	80136b0 <vPortValidateInterruptPriority+0x5c>
	}
 80136b2:	bf00      	nop
 80136b4:	3714      	adds	r7, #20
 80136b6:	46bd      	mov	sp, r7
 80136b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136bc:	4770      	bx	lr
 80136be:	bf00      	nop
 80136c0:	e000e3f0 	.word	0xe000e3f0
 80136c4:	20000f5c 	.word	0x20000f5c
 80136c8:	e000ed0c 	.word	0xe000ed0c
 80136cc:	20000f60 	.word	0x20000f60

080136d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b08a      	sub	sp, #40	; 0x28
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80136d8:	2300      	movs	r3, #0
 80136da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80136dc:	f7fe fdc2 	bl	8012264 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80136e0:	4b57      	ldr	r3, [pc, #348]	; (8013840 <pvPortMalloc+0x170>)
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d101      	bne.n	80136ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80136e8:	f000 f90c 	bl	8013904 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80136ec:	4b55      	ldr	r3, [pc, #340]	; (8013844 <pvPortMalloc+0x174>)
 80136ee:	681a      	ldr	r2, [r3, #0]
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	4013      	ands	r3, r2
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	f040 808c 	bne.w	8013812 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d01c      	beq.n	801373a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8013700:	2208      	movs	r2, #8
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	4413      	add	r3, r2
 8013706:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	f003 0307 	and.w	r3, r3, #7
 801370e:	2b00      	cmp	r3, #0
 8013710:	d013      	beq.n	801373a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	f023 0307 	bic.w	r3, r3, #7
 8013718:	3308      	adds	r3, #8
 801371a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	f003 0307 	and.w	r3, r3, #7
 8013722:	2b00      	cmp	r3, #0
 8013724:	d009      	beq.n	801373a <pvPortMalloc+0x6a>
 8013726:	f04f 0350 	mov.w	r3, #80	; 0x50
 801372a:	f383 8811 	msr	BASEPRI, r3
 801372e:	f3bf 8f6f 	isb	sy
 8013732:	f3bf 8f4f 	dsb	sy
 8013736:	617b      	str	r3, [r7, #20]
 8013738:	e7fe      	b.n	8013738 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d068      	beq.n	8013812 <pvPortMalloc+0x142>
 8013740:	4b41      	ldr	r3, [pc, #260]	; (8013848 <pvPortMalloc+0x178>)
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	687a      	ldr	r2, [r7, #4]
 8013746:	429a      	cmp	r2, r3
 8013748:	d863      	bhi.n	8013812 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801374a:	4b40      	ldr	r3, [pc, #256]	; (801384c <pvPortMalloc+0x17c>)
 801374c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801374e:	4b3f      	ldr	r3, [pc, #252]	; (801384c <pvPortMalloc+0x17c>)
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013754:	e004      	b.n	8013760 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8013756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013758:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013762:	685b      	ldr	r3, [r3, #4]
 8013764:	687a      	ldr	r2, [r7, #4]
 8013766:	429a      	cmp	r2, r3
 8013768:	d903      	bls.n	8013772 <pvPortMalloc+0xa2>
 801376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d1f1      	bne.n	8013756 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013772:	4b33      	ldr	r3, [pc, #204]	; (8013840 <pvPortMalloc+0x170>)
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013778:	429a      	cmp	r2, r3
 801377a:	d04a      	beq.n	8013812 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801377c:	6a3b      	ldr	r3, [r7, #32]
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	2208      	movs	r2, #8
 8013782:	4413      	add	r3, r2
 8013784:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013788:	681a      	ldr	r2, [r3, #0]
 801378a:	6a3b      	ldr	r3, [r7, #32]
 801378c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013790:	685a      	ldr	r2, [r3, #4]
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	1ad2      	subs	r2, r2, r3
 8013796:	2308      	movs	r3, #8
 8013798:	005b      	lsls	r3, r3, #1
 801379a:	429a      	cmp	r2, r3
 801379c:	d91e      	bls.n	80137dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801379e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	4413      	add	r3, r2
 80137a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80137a6:	69bb      	ldr	r3, [r7, #24]
 80137a8:	f003 0307 	and.w	r3, r3, #7
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d009      	beq.n	80137c4 <pvPortMalloc+0xf4>
 80137b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137b4:	f383 8811 	msr	BASEPRI, r3
 80137b8:	f3bf 8f6f 	isb	sy
 80137bc:	f3bf 8f4f 	dsb	sy
 80137c0:	613b      	str	r3, [r7, #16]
 80137c2:	e7fe      	b.n	80137c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80137c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137c6:	685a      	ldr	r2, [r3, #4]
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	1ad2      	subs	r2, r2, r3
 80137cc:	69bb      	ldr	r3, [r7, #24]
 80137ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80137d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137d2:	687a      	ldr	r2, [r7, #4]
 80137d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80137d6:	69b8      	ldr	r0, [r7, #24]
 80137d8:	f000 f8f6 	bl	80139c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80137dc:	4b1a      	ldr	r3, [pc, #104]	; (8013848 <pvPortMalloc+0x178>)
 80137de:	681a      	ldr	r2, [r3, #0]
 80137e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137e2:	685b      	ldr	r3, [r3, #4]
 80137e4:	1ad3      	subs	r3, r2, r3
 80137e6:	4a18      	ldr	r2, [pc, #96]	; (8013848 <pvPortMalloc+0x178>)
 80137e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80137ea:	4b17      	ldr	r3, [pc, #92]	; (8013848 <pvPortMalloc+0x178>)
 80137ec:	681a      	ldr	r2, [r3, #0]
 80137ee:	4b18      	ldr	r3, [pc, #96]	; (8013850 <pvPortMalloc+0x180>)
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	429a      	cmp	r2, r3
 80137f4:	d203      	bcs.n	80137fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80137f6:	4b14      	ldr	r3, [pc, #80]	; (8013848 <pvPortMalloc+0x178>)
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	4a15      	ldr	r2, [pc, #84]	; (8013850 <pvPortMalloc+0x180>)
 80137fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80137fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013800:	685a      	ldr	r2, [r3, #4]
 8013802:	4b10      	ldr	r3, [pc, #64]	; (8013844 <pvPortMalloc+0x174>)
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	431a      	orrs	r2, r3
 8013808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801380a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801380e:	2200      	movs	r2, #0
 8013810:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013812:	f7fe fd35 	bl	8012280 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013816:	69fb      	ldr	r3, [r7, #28]
 8013818:	f003 0307 	and.w	r3, r3, #7
 801381c:	2b00      	cmp	r3, #0
 801381e:	d009      	beq.n	8013834 <pvPortMalloc+0x164>
 8013820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013824:	f383 8811 	msr	BASEPRI, r3
 8013828:	f3bf 8f6f 	isb	sy
 801382c:	f3bf 8f4f 	dsb	sy
 8013830:	60fb      	str	r3, [r7, #12]
 8013832:	e7fe      	b.n	8013832 <pvPortMalloc+0x162>
	return pvReturn;
 8013834:	69fb      	ldr	r3, [r7, #28]
}
 8013836:	4618      	mov	r0, r3
 8013838:	3728      	adds	r7, #40	; 0x28
 801383a:	46bd      	mov	sp, r7
 801383c:	bd80      	pop	{r7, pc}
 801383e:	bf00      	nop
 8013840:	20004b6c 	.word	0x20004b6c
 8013844:	20004b78 	.word	0x20004b78
 8013848:	20004b70 	.word	0x20004b70
 801384c:	20004b64 	.word	0x20004b64
 8013850:	20004b74 	.word	0x20004b74

08013854 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013854:	b580      	push	{r7, lr}
 8013856:	b086      	sub	sp, #24
 8013858:	af00      	add	r7, sp, #0
 801385a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d046      	beq.n	80138f4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013866:	2308      	movs	r3, #8
 8013868:	425b      	negs	r3, r3
 801386a:	697a      	ldr	r2, [r7, #20]
 801386c:	4413      	add	r3, r2
 801386e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013870:	697b      	ldr	r3, [r7, #20]
 8013872:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013874:	693b      	ldr	r3, [r7, #16]
 8013876:	685a      	ldr	r2, [r3, #4]
 8013878:	4b20      	ldr	r3, [pc, #128]	; (80138fc <vPortFree+0xa8>)
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	4013      	ands	r3, r2
 801387e:	2b00      	cmp	r3, #0
 8013880:	d109      	bne.n	8013896 <vPortFree+0x42>
 8013882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013886:	f383 8811 	msr	BASEPRI, r3
 801388a:	f3bf 8f6f 	isb	sy
 801388e:	f3bf 8f4f 	dsb	sy
 8013892:	60fb      	str	r3, [r7, #12]
 8013894:	e7fe      	b.n	8013894 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013896:	693b      	ldr	r3, [r7, #16]
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d009      	beq.n	80138b2 <vPortFree+0x5e>
 801389e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138a2:	f383 8811 	msr	BASEPRI, r3
 80138a6:	f3bf 8f6f 	isb	sy
 80138aa:	f3bf 8f4f 	dsb	sy
 80138ae:	60bb      	str	r3, [r7, #8]
 80138b0:	e7fe      	b.n	80138b0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80138b2:	693b      	ldr	r3, [r7, #16]
 80138b4:	685a      	ldr	r2, [r3, #4]
 80138b6:	4b11      	ldr	r3, [pc, #68]	; (80138fc <vPortFree+0xa8>)
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	4013      	ands	r3, r2
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d019      	beq.n	80138f4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80138c0:	693b      	ldr	r3, [r7, #16]
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d115      	bne.n	80138f4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80138c8:	693b      	ldr	r3, [r7, #16]
 80138ca:	685a      	ldr	r2, [r3, #4]
 80138cc:	4b0b      	ldr	r3, [pc, #44]	; (80138fc <vPortFree+0xa8>)
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	43db      	mvns	r3, r3
 80138d2:	401a      	ands	r2, r3
 80138d4:	693b      	ldr	r3, [r7, #16]
 80138d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80138d8:	f7fe fcc4 	bl	8012264 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80138dc:	693b      	ldr	r3, [r7, #16]
 80138de:	685a      	ldr	r2, [r3, #4]
 80138e0:	4b07      	ldr	r3, [pc, #28]	; (8013900 <vPortFree+0xac>)
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	4413      	add	r3, r2
 80138e6:	4a06      	ldr	r2, [pc, #24]	; (8013900 <vPortFree+0xac>)
 80138e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80138ea:	6938      	ldr	r0, [r7, #16]
 80138ec:	f000 f86c 	bl	80139c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80138f0:	f7fe fcc6 	bl	8012280 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80138f4:	bf00      	nop
 80138f6:	3718      	adds	r7, #24
 80138f8:	46bd      	mov	sp, r7
 80138fa:	bd80      	pop	{r7, pc}
 80138fc:	20004b78 	.word	0x20004b78
 8013900:	20004b70 	.word	0x20004b70

08013904 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013904:	b480      	push	{r7}
 8013906:	b085      	sub	sp, #20
 8013908:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801390a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801390e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013910:	4b27      	ldr	r3, [pc, #156]	; (80139b0 <prvHeapInit+0xac>)
 8013912:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	f003 0307 	and.w	r3, r3, #7
 801391a:	2b00      	cmp	r3, #0
 801391c:	d00c      	beq.n	8013938 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	3307      	adds	r3, #7
 8013922:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	f023 0307 	bic.w	r3, r3, #7
 801392a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801392c:	68ba      	ldr	r2, [r7, #8]
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	1ad3      	subs	r3, r2, r3
 8013932:	4a1f      	ldr	r2, [pc, #124]	; (80139b0 <prvHeapInit+0xac>)
 8013934:	4413      	add	r3, r2
 8013936:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801393c:	4a1d      	ldr	r2, [pc, #116]	; (80139b4 <prvHeapInit+0xb0>)
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013942:	4b1c      	ldr	r3, [pc, #112]	; (80139b4 <prvHeapInit+0xb0>)
 8013944:	2200      	movs	r2, #0
 8013946:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	68ba      	ldr	r2, [r7, #8]
 801394c:	4413      	add	r3, r2
 801394e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013950:	2208      	movs	r2, #8
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	1a9b      	subs	r3, r3, r2
 8013956:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	f023 0307 	bic.w	r3, r3, #7
 801395e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	4a15      	ldr	r2, [pc, #84]	; (80139b8 <prvHeapInit+0xb4>)
 8013964:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013966:	4b14      	ldr	r3, [pc, #80]	; (80139b8 <prvHeapInit+0xb4>)
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	2200      	movs	r2, #0
 801396c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801396e:	4b12      	ldr	r3, [pc, #72]	; (80139b8 <prvHeapInit+0xb4>)
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	2200      	movs	r2, #0
 8013974:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801397a:	683b      	ldr	r3, [r7, #0]
 801397c:	68fa      	ldr	r2, [r7, #12]
 801397e:	1ad2      	subs	r2, r2, r3
 8013980:	683b      	ldr	r3, [r7, #0]
 8013982:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013984:	4b0c      	ldr	r3, [pc, #48]	; (80139b8 <prvHeapInit+0xb4>)
 8013986:	681a      	ldr	r2, [r3, #0]
 8013988:	683b      	ldr	r3, [r7, #0]
 801398a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801398c:	683b      	ldr	r3, [r7, #0]
 801398e:	685b      	ldr	r3, [r3, #4]
 8013990:	4a0a      	ldr	r2, [pc, #40]	; (80139bc <prvHeapInit+0xb8>)
 8013992:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013994:	683b      	ldr	r3, [r7, #0]
 8013996:	685b      	ldr	r3, [r3, #4]
 8013998:	4a09      	ldr	r2, [pc, #36]	; (80139c0 <prvHeapInit+0xbc>)
 801399a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801399c:	4b09      	ldr	r3, [pc, #36]	; (80139c4 <prvHeapInit+0xc0>)
 801399e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80139a2:	601a      	str	r2, [r3, #0]
}
 80139a4:	bf00      	nop
 80139a6:	3714      	adds	r7, #20
 80139a8:	46bd      	mov	sp, r7
 80139aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ae:	4770      	bx	lr
 80139b0:	20000f64 	.word	0x20000f64
 80139b4:	20004b64 	.word	0x20004b64
 80139b8:	20004b6c 	.word	0x20004b6c
 80139bc:	20004b74 	.word	0x20004b74
 80139c0:	20004b70 	.word	0x20004b70
 80139c4:	20004b78 	.word	0x20004b78

080139c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80139c8:	b480      	push	{r7}
 80139ca:	b085      	sub	sp, #20
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80139d0:	4b28      	ldr	r3, [pc, #160]	; (8013a74 <prvInsertBlockIntoFreeList+0xac>)
 80139d2:	60fb      	str	r3, [r7, #12]
 80139d4:	e002      	b.n	80139dc <prvInsertBlockIntoFreeList+0x14>
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	60fb      	str	r3, [r7, #12]
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	687a      	ldr	r2, [r7, #4]
 80139e2:	429a      	cmp	r2, r3
 80139e4:	d8f7      	bhi.n	80139d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	685b      	ldr	r3, [r3, #4]
 80139ee:	68ba      	ldr	r2, [r7, #8]
 80139f0:	4413      	add	r3, r2
 80139f2:	687a      	ldr	r2, [r7, #4]
 80139f4:	429a      	cmp	r2, r3
 80139f6:	d108      	bne.n	8013a0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	685a      	ldr	r2, [r3, #4]
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	685b      	ldr	r3, [r3, #4]
 8013a00:	441a      	add	r2, r3
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	685b      	ldr	r3, [r3, #4]
 8013a12:	68ba      	ldr	r2, [r7, #8]
 8013a14:	441a      	add	r2, r3
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	429a      	cmp	r2, r3
 8013a1c:	d118      	bne.n	8013a50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	681a      	ldr	r2, [r3, #0]
 8013a22:	4b15      	ldr	r3, [pc, #84]	; (8013a78 <prvInsertBlockIntoFreeList+0xb0>)
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	429a      	cmp	r2, r3
 8013a28:	d00d      	beq.n	8013a46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	685a      	ldr	r2, [r3, #4]
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	685b      	ldr	r3, [r3, #4]
 8013a34:	441a      	add	r2, r3
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	681a      	ldr	r2, [r3, #0]
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	601a      	str	r2, [r3, #0]
 8013a44:	e008      	b.n	8013a58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013a46:	4b0c      	ldr	r3, [pc, #48]	; (8013a78 <prvInsertBlockIntoFreeList+0xb0>)
 8013a48:	681a      	ldr	r2, [r3, #0]
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	601a      	str	r2, [r3, #0]
 8013a4e:	e003      	b.n	8013a58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	681a      	ldr	r2, [r3, #0]
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013a58:	68fa      	ldr	r2, [r7, #12]
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	429a      	cmp	r2, r3
 8013a5e:	d002      	beq.n	8013a66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	687a      	ldr	r2, [r7, #4]
 8013a64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013a66:	bf00      	nop
 8013a68:	3714      	adds	r7, #20
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a70:	4770      	bx	lr
 8013a72:	bf00      	nop
 8013a74:	20004b64 	.word	0x20004b64
 8013a78:	20004b6c 	.word	0x20004b6c

08013a7c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8013a7c:	b580      	push	{r7, lr}
 8013a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8013a80:	2201      	movs	r2, #1
 8013a82:	490e      	ldr	r1, [pc, #56]	; (8013abc <MX_USB_HOST_Init+0x40>)
 8013a84:	480e      	ldr	r0, [pc, #56]	; (8013ac0 <MX_USB_HOST_Init+0x44>)
 8013a86:	f7f8 ff2b 	bl	800c8e0 <USBH_Init>
 8013a8a:	4603      	mov	r3, r0
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d001      	beq.n	8013a94 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8013a90:	f7ed fe2e 	bl	80016f0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8013a94:	490b      	ldr	r1, [pc, #44]	; (8013ac4 <MX_USB_HOST_Init+0x48>)
 8013a96:	480a      	ldr	r0, [pc, #40]	; (8013ac0 <MX_USB_HOST_Init+0x44>)
 8013a98:	f7f8 ffd2 	bl	800ca40 <USBH_RegisterClass>
 8013a9c:	4603      	mov	r3, r0
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d001      	beq.n	8013aa6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8013aa2:	f7ed fe25 	bl	80016f0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8013aa6:	4806      	ldr	r0, [pc, #24]	; (8013ac0 <MX_USB_HOST_Init+0x44>)
 8013aa8:	f7f9 f856 	bl	800cb58 <USBH_Start>
 8013aac:	4603      	mov	r3, r0
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d001      	beq.n	8013ab6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8013ab2:	f7ed fe1d 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8013ab6:	bf00      	nop
 8013ab8:	bd80      	pop	{r7, pc}
 8013aba:	bf00      	nop
 8013abc:	08013ac9 	.word	0x08013ac9
 8013ac0:	20021c0c 	.word	0x20021c0c
 8013ac4:	20000068 	.word	0x20000068

08013ac8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8013ac8:	b480      	push	{r7}
 8013aca:	b083      	sub	sp, #12
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
 8013ad0:	460b      	mov	r3, r1
 8013ad2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8013ad4:	78fb      	ldrb	r3, [r7, #3]
 8013ad6:	3b01      	subs	r3, #1
 8013ad8:	2b04      	cmp	r3, #4
 8013ada:	d819      	bhi.n	8013b10 <USBH_UserProcess+0x48>
 8013adc:	a201      	add	r2, pc, #4	; (adr r2, 8013ae4 <USBH_UserProcess+0x1c>)
 8013ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ae2:	bf00      	nop
 8013ae4:	08013b11 	.word	0x08013b11
 8013ae8:	08013b01 	.word	0x08013b01
 8013aec:	08013b11 	.word	0x08013b11
 8013af0:	08013b09 	.word	0x08013b09
 8013af4:	08013af9 	.word	0x08013af9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8013af8:	4b09      	ldr	r3, [pc, #36]	; (8013b20 <USBH_UserProcess+0x58>)
 8013afa:	2203      	movs	r2, #3
 8013afc:	701a      	strb	r2, [r3, #0]
  break;
 8013afe:	e008      	b.n	8013b12 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8013b00:	4b07      	ldr	r3, [pc, #28]	; (8013b20 <USBH_UserProcess+0x58>)
 8013b02:	2202      	movs	r2, #2
 8013b04:	701a      	strb	r2, [r3, #0]
  break;
 8013b06:	e004      	b.n	8013b12 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8013b08:	4b05      	ldr	r3, [pc, #20]	; (8013b20 <USBH_UserProcess+0x58>)
 8013b0a:	2201      	movs	r2, #1
 8013b0c:	701a      	strb	r2, [r3, #0]
  break;
 8013b0e:	e000      	b.n	8013b12 <USBH_UserProcess+0x4a>

  default:
  break;
 8013b10:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8013b12:	bf00      	nop
 8013b14:	370c      	adds	r7, #12
 8013b16:	46bd      	mov	sp, r7
 8013b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1c:	4770      	bx	lr
 8013b1e:	bf00      	nop
 8013b20:	20004b7c 	.word	0x20004b7c

08013b24 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8013b24:	b580      	push	{r7, lr}
 8013b26:	b08a      	sub	sp, #40	; 0x28
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013b2c:	f107 0314 	add.w	r3, r7, #20
 8013b30:	2200      	movs	r2, #0
 8013b32:	601a      	str	r2, [r3, #0]
 8013b34:	605a      	str	r2, [r3, #4]
 8013b36:	609a      	str	r2, [r3, #8]
 8013b38:	60da      	str	r2, [r3, #12]
 8013b3a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013b44:	d147      	bne.n	8013bd6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013b46:	2300      	movs	r3, #0
 8013b48:	613b      	str	r3, [r7, #16]
 8013b4a:	4b25      	ldr	r3, [pc, #148]	; (8013be0 <HAL_HCD_MspInit+0xbc>)
 8013b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b4e:	4a24      	ldr	r2, [pc, #144]	; (8013be0 <HAL_HCD_MspInit+0xbc>)
 8013b50:	f043 0301 	orr.w	r3, r3, #1
 8013b54:	6313      	str	r3, [r2, #48]	; 0x30
 8013b56:	4b22      	ldr	r3, [pc, #136]	; (8013be0 <HAL_HCD_MspInit+0xbc>)
 8013b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b5a:	f003 0301 	and.w	r3, r3, #1
 8013b5e:	613b      	str	r3, [r7, #16]
 8013b60:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8013b62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013b68:	2300      	movs	r3, #0
 8013b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8013b70:	f107 0314 	add.w	r3, r7, #20
 8013b74:	4619      	mov	r1, r3
 8013b76:	481b      	ldr	r0, [pc, #108]	; (8013be4 <HAL_HCD_MspInit+0xc0>)
 8013b78:	f7f0 ffd0 	bl	8004b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8013b7c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8013b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013b82:	2302      	movs	r3, #2
 8013b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b86:	2300      	movs	r3, #0
 8013b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013b8a:	2303      	movs	r3, #3
 8013b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8013b8e:	230a      	movs	r3, #10
 8013b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013b92:	f107 0314 	add.w	r3, r7, #20
 8013b96:	4619      	mov	r1, r3
 8013b98:	4812      	ldr	r0, [pc, #72]	; (8013be4 <HAL_HCD_MspInit+0xc0>)
 8013b9a:	f7f0 ffbf 	bl	8004b1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013b9e:	4b10      	ldr	r3, [pc, #64]	; (8013be0 <HAL_HCD_MspInit+0xbc>)
 8013ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ba2:	4a0f      	ldr	r2, [pc, #60]	; (8013be0 <HAL_HCD_MspInit+0xbc>)
 8013ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ba8:	6353      	str	r3, [r2, #52]	; 0x34
 8013baa:	2300      	movs	r3, #0
 8013bac:	60fb      	str	r3, [r7, #12]
 8013bae:	4b0c      	ldr	r3, [pc, #48]	; (8013be0 <HAL_HCD_MspInit+0xbc>)
 8013bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013bb2:	4a0b      	ldr	r2, [pc, #44]	; (8013be0 <HAL_HCD_MspInit+0xbc>)
 8013bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8013bba:	4b09      	ldr	r3, [pc, #36]	; (8013be0 <HAL_HCD_MspInit+0xbc>)
 8013bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013bc2:	60fb      	str	r3, [r7, #12]
 8013bc4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8013bc6:	2200      	movs	r2, #0
 8013bc8:	2100      	movs	r1, #0
 8013bca:	2043      	movs	r0, #67	; 0x43
 8013bcc:	f7f0 fac4 	bl	8004158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8013bd0:	2043      	movs	r0, #67	; 0x43
 8013bd2:	f7f0 fadd 	bl	8004190 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013bd6:	bf00      	nop
 8013bd8:	3728      	adds	r7, #40	; 0x28
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bd80      	pop	{r7, pc}
 8013bde:	bf00      	nop
 8013be0:	40023800 	.word	0x40023800
 8013be4:	40020000 	.word	0x40020000

08013be8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8013be8:	b580      	push	{r7, lr}
 8013bea:	b082      	sub	sp, #8
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	f7f9 fc5b 	bl	800d4b2 <USBH_LL_IncTimer>
}
 8013bfc:	bf00      	nop
 8013bfe:	3708      	adds	r7, #8
 8013c00:	46bd      	mov	sp, r7
 8013c02:	bd80      	pop	{r7, pc}

08013c04 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b082      	sub	sp, #8
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013c12:	4618      	mov	r0, r3
 8013c14:	f7f9 fc9f 	bl	800d556 <USBH_LL_Connect>
}
 8013c18:	bf00      	nop
 8013c1a:	3708      	adds	r7, #8
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	bd80      	pop	{r7, pc}

08013c20 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013c20:	b580      	push	{r7, lr}
 8013c22:	b082      	sub	sp, #8
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013c2e:	4618      	mov	r0, r3
 8013c30:	f7f9 fcb4 	bl	800d59c <USBH_LL_Disconnect>
}
 8013c34:	bf00      	nop
 8013c36:	3708      	adds	r7, #8
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	bd80      	pop	{r7, pc}

08013c3c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	b082      	sub	sp, #8
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
 8013c44:	460b      	mov	r3, r1
 8013c46:	70fb      	strb	r3, [r7, #3]
 8013c48:	4613      	mov	r3, r2
 8013c4a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013c52:	4618      	mov	r0, r3
 8013c54:	f7f9 fceb 	bl	800d62e <USBH_LL_NotifyURBChange>
#endif
}
 8013c58:	bf00      	nop
 8013c5a:	3708      	adds	r7, #8
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	bd80      	pop	{r7, pc}

08013c60 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8013c60:	b580      	push	{r7, lr}
 8013c62:	b082      	sub	sp, #8
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013c6e:	4618      	mov	r0, r3
 8013c70:	f7f9 fc49 	bl	800d506 <USBH_LL_PortEnabled>
}
 8013c74:	bf00      	nop
 8013c76:	3708      	adds	r7, #8
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	bd80      	pop	{r7, pc}

08013c7c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b082      	sub	sp, #8
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	f7f9 fc55 	bl	800d53a <USBH_LL_PortDisabled>
}
 8013c90:	bf00      	nop
 8013c92:	3708      	adds	r7, #8
 8013c94:	46bd      	mov	sp, r7
 8013c96:	bd80      	pop	{r7, pc}

08013c98 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b082      	sub	sp, #8
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8013ca6:	2b01      	cmp	r3, #1
 8013ca8:	d12a      	bne.n	8013d00 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8013caa:	4a18      	ldr	r2, [pc, #96]	; (8013d0c <USBH_LL_Init+0x74>)
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	4a15      	ldr	r2, [pc, #84]	; (8013d0c <USBH_LL_Init+0x74>)
 8013cb6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013cba:	4b14      	ldr	r3, [pc, #80]	; (8013d0c <USBH_LL_Init+0x74>)
 8013cbc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8013cc0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8013cc2:	4b12      	ldr	r3, [pc, #72]	; (8013d0c <USBH_LL_Init+0x74>)
 8013cc4:	220c      	movs	r2, #12
 8013cc6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8013cc8:	4b10      	ldr	r3, [pc, #64]	; (8013d0c <USBH_LL_Init+0x74>)
 8013cca:	2201      	movs	r2, #1
 8013ccc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8013cce:	4b0f      	ldr	r3, [pc, #60]	; (8013d0c <USBH_LL_Init+0x74>)
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8013cd4:	4b0d      	ldr	r3, [pc, #52]	; (8013d0c <USBH_LL_Init+0x74>)
 8013cd6:	2202      	movs	r2, #2
 8013cd8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013cda:	4b0c      	ldr	r3, [pc, #48]	; (8013d0c <USBH_LL_Init+0x74>)
 8013cdc:	2200      	movs	r2, #0
 8013cde:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8013ce0:	480a      	ldr	r0, [pc, #40]	; (8013d0c <USBH_LL_Init+0x74>)
 8013ce2:	f7f1 f8f9 	bl	8004ed8 <HAL_HCD_Init>
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d001      	beq.n	8013cf0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8013cec:	f7ed fd00 	bl	80016f0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8013cf0:	4806      	ldr	r0, [pc, #24]	; (8013d0c <USBH_LL_Init+0x74>)
 8013cf2:	f7f1 fcfd 	bl	80056f0 <HAL_HCD_GetCurrentFrame>
 8013cf6:	4603      	mov	r3, r0
 8013cf8:	4619      	mov	r1, r3
 8013cfa:	6878      	ldr	r0, [r7, #4]
 8013cfc:	f7f9 fbca 	bl	800d494 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8013d00:	2300      	movs	r3, #0
}
 8013d02:	4618      	mov	r0, r3
 8013d04:	3708      	adds	r7, #8
 8013d06:	46bd      	mov	sp, r7
 8013d08:	bd80      	pop	{r7, pc}
 8013d0a:	bf00      	nop
 8013d0c:	20021ff0 	.word	0x20021ff0

08013d10 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b084      	sub	sp, #16
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d18:	2300      	movs	r3, #0
 8013d1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013d26:	4618      	mov	r0, r3
 8013d28:	f7f1 fc6a 	bl	8005600 <HAL_HCD_Start>
 8013d2c:	4603      	mov	r3, r0
 8013d2e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013d30:	7bfb      	ldrb	r3, [r7, #15]
 8013d32:	4618      	mov	r0, r3
 8013d34:	f000 f95c 	bl	8013ff0 <USBH_Get_USB_Status>
 8013d38:	4603      	mov	r3, r0
 8013d3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013d3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8013d3e:	4618      	mov	r0, r3
 8013d40:	3710      	adds	r7, #16
 8013d42:	46bd      	mov	sp, r7
 8013d44:	bd80      	pop	{r7, pc}

08013d46 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8013d46:	b580      	push	{r7, lr}
 8013d48:	b084      	sub	sp, #16
 8013d4a:	af00      	add	r7, sp, #0
 8013d4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d4e:	2300      	movs	r3, #0
 8013d50:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013d52:	2300      	movs	r3, #0
 8013d54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	f7f1 fc72 	bl	8005646 <HAL_HCD_Stop>
 8013d62:	4603      	mov	r3, r0
 8013d64:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013d66:	7bfb      	ldrb	r3, [r7, #15]
 8013d68:	4618      	mov	r0, r3
 8013d6a:	f000 f941 	bl	8013ff0 <USBH_Get_USB_Status>
 8013d6e:	4603      	mov	r3, r0
 8013d70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013d72:	7bbb      	ldrb	r3, [r7, #14]
}
 8013d74:	4618      	mov	r0, r3
 8013d76:	3710      	adds	r7, #16
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	bd80      	pop	{r7, pc}

08013d7c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	b084      	sub	sp, #16
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8013d84:	2301      	movs	r3, #1
 8013d86:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f7f1 fcbc 	bl	800570c <HAL_HCD_GetCurrentSpeed>
 8013d94:	4603      	mov	r3, r0
 8013d96:	2b01      	cmp	r3, #1
 8013d98:	d007      	beq.n	8013daa <USBH_LL_GetSpeed+0x2e>
 8013d9a:	2b01      	cmp	r3, #1
 8013d9c:	d302      	bcc.n	8013da4 <USBH_LL_GetSpeed+0x28>
 8013d9e:	2b02      	cmp	r3, #2
 8013da0:	d006      	beq.n	8013db0 <USBH_LL_GetSpeed+0x34>
 8013da2:	e008      	b.n	8013db6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8013da4:	2300      	movs	r3, #0
 8013da6:	73fb      	strb	r3, [r7, #15]
    break;
 8013da8:	e008      	b.n	8013dbc <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8013daa:	2301      	movs	r3, #1
 8013dac:	73fb      	strb	r3, [r7, #15]
    break;
 8013dae:	e005      	b.n	8013dbc <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8013db0:	2302      	movs	r3, #2
 8013db2:	73fb      	strb	r3, [r7, #15]
    break;
 8013db4:	e002      	b.n	8013dbc <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8013db6:	2301      	movs	r3, #1
 8013db8:	73fb      	strb	r3, [r7, #15]
    break;
 8013dba:	bf00      	nop
  }
  return  speed;
 8013dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	3710      	adds	r7, #16
 8013dc2:	46bd      	mov	sp, r7
 8013dc4:	bd80      	pop	{r7, pc}

08013dc6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8013dc6:	b580      	push	{r7, lr}
 8013dc8:	b084      	sub	sp, #16
 8013dca:	af00      	add	r7, sp, #0
 8013dcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013dce:	2300      	movs	r3, #0
 8013dd0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013ddc:	4618      	mov	r0, r3
 8013dde:	f7f1 fc4f 	bl	8005680 <HAL_HCD_ResetPort>
 8013de2:	4603      	mov	r3, r0
 8013de4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013de6:	7bfb      	ldrb	r3, [r7, #15]
 8013de8:	4618      	mov	r0, r3
 8013dea:	f000 f901 	bl	8013ff0 <USBH_Get_USB_Status>
 8013dee:	4603      	mov	r3, r0
 8013df0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013df2:	7bbb      	ldrb	r3, [r7, #14]
}
 8013df4:	4618      	mov	r0, r3
 8013df6:	3710      	adds	r7, #16
 8013df8:	46bd      	mov	sp, r7
 8013dfa:	bd80      	pop	{r7, pc}

08013dfc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b082      	sub	sp, #8
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
 8013e04:	460b      	mov	r3, r1
 8013e06:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013e0e:	78fa      	ldrb	r2, [r7, #3]
 8013e10:	4611      	mov	r1, r2
 8013e12:	4618      	mov	r0, r3
 8013e14:	f7f1 fc57 	bl	80056c6 <HAL_HCD_HC_GetXferCount>
 8013e18:	4603      	mov	r3, r0
}
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	3708      	adds	r7, #8
 8013e1e:	46bd      	mov	sp, r7
 8013e20:	bd80      	pop	{r7, pc}

08013e22 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8013e22:	b590      	push	{r4, r7, lr}
 8013e24:	b089      	sub	sp, #36	; 0x24
 8013e26:	af04      	add	r7, sp, #16
 8013e28:	6078      	str	r0, [r7, #4]
 8013e2a:	4608      	mov	r0, r1
 8013e2c:	4611      	mov	r1, r2
 8013e2e:	461a      	mov	r2, r3
 8013e30:	4603      	mov	r3, r0
 8013e32:	70fb      	strb	r3, [r7, #3]
 8013e34:	460b      	mov	r3, r1
 8013e36:	70bb      	strb	r3, [r7, #2]
 8013e38:	4613      	mov	r3, r2
 8013e3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013e40:	2300      	movs	r3, #0
 8013e42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8013e4a:	787c      	ldrb	r4, [r7, #1]
 8013e4c:	78ba      	ldrb	r2, [r7, #2]
 8013e4e:	78f9      	ldrb	r1, [r7, #3]
 8013e50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013e52:	9302      	str	r3, [sp, #8]
 8013e54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013e58:	9301      	str	r3, [sp, #4]
 8013e5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013e5e:	9300      	str	r3, [sp, #0]
 8013e60:	4623      	mov	r3, r4
 8013e62:	f7f1 f89b 	bl	8004f9c <HAL_HCD_HC_Init>
 8013e66:	4603      	mov	r3, r0
 8013e68:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8013e6a:	7bfb      	ldrb	r3, [r7, #15]
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	f000 f8bf 	bl	8013ff0 <USBH_Get_USB_Status>
 8013e72:	4603      	mov	r3, r0
 8013e74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013e76:	7bbb      	ldrb	r3, [r7, #14]
}
 8013e78:	4618      	mov	r0, r3
 8013e7a:	3714      	adds	r7, #20
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	bd90      	pop	{r4, r7, pc}

08013e80 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b084      	sub	sp, #16
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
 8013e88:	460b      	mov	r3, r1
 8013e8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013e90:	2300      	movs	r3, #0
 8013e92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013e9a:	78fa      	ldrb	r2, [r7, #3]
 8013e9c:	4611      	mov	r1, r2
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	f7f1 f914 	bl	80050cc <HAL_HCD_HC_Halt>
 8013ea4:	4603      	mov	r3, r0
 8013ea6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013ea8:	7bfb      	ldrb	r3, [r7, #15]
 8013eaa:	4618      	mov	r0, r3
 8013eac:	f000 f8a0 	bl	8013ff0 <USBH_Get_USB_Status>
 8013eb0:	4603      	mov	r3, r0
 8013eb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013eb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	3710      	adds	r7, #16
 8013eba:	46bd      	mov	sp, r7
 8013ebc:	bd80      	pop	{r7, pc}

08013ebe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8013ebe:	b590      	push	{r4, r7, lr}
 8013ec0:	b089      	sub	sp, #36	; 0x24
 8013ec2:	af04      	add	r7, sp, #16
 8013ec4:	6078      	str	r0, [r7, #4]
 8013ec6:	4608      	mov	r0, r1
 8013ec8:	4611      	mov	r1, r2
 8013eca:	461a      	mov	r2, r3
 8013ecc:	4603      	mov	r3, r0
 8013ece:	70fb      	strb	r3, [r7, #3]
 8013ed0:	460b      	mov	r3, r1
 8013ed2:	70bb      	strb	r3, [r7, #2]
 8013ed4:	4613      	mov	r3, r2
 8013ed6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013ed8:	2300      	movs	r3, #0
 8013eda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013edc:	2300      	movs	r3, #0
 8013ede:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8013ee6:	787c      	ldrb	r4, [r7, #1]
 8013ee8:	78ba      	ldrb	r2, [r7, #2]
 8013eea:	78f9      	ldrb	r1, [r7, #3]
 8013eec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013ef0:	9303      	str	r3, [sp, #12]
 8013ef2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013ef4:	9302      	str	r3, [sp, #8]
 8013ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ef8:	9301      	str	r3, [sp, #4]
 8013efa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013efe:	9300      	str	r3, [sp, #0]
 8013f00:	4623      	mov	r3, r4
 8013f02:	f7f1 f907 	bl	8005114 <HAL_HCD_HC_SubmitRequest>
 8013f06:	4603      	mov	r3, r0
 8013f08:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8013f0a:	7bfb      	ldrb	r3, [r7, #15]
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	f000 f86f 	bl	8013ff0 <USBH_Get_USB_Status>
 8013f12:	4603      	mov	r3, r0
 8013f14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013f16:	7bbb      	ldrb	r3, [r7, #14]
}
 8013f18:	4618      	mov	r0, r3
 8013f1a:	3714      	adds	r7, #20
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	bd90      	pop	{r4, r7, pc}

08013f20 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013f20:	b580      	push	{r7, lr}
 8013f22:	b082      	sub	sp, #8
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	6078      	str	r0, [r7, #4]
 8013f28:	460b      	mov	r3, r1
 8013f2a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013f32:	78fa      	ldrb	r2, [r7, #3]
 8013f34:	4611      	mov	r1, r2
 8013f36:	4618      	mov	r0, r3
 8013f38:	f7f1 fbb0 	bl	800569c <HAL_HCD_HC_GetURBState>
 8013f3c:	4603      	mov	r3, r0
}
 8013f3e:	4618      	mov	r0, r3
 8013f40:	3708      	adds	r7, #8
 8013f42:	46bd      	mov	sp, r7
 8013f44:	bd80      	pop	{r7, pc}

08013f46 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8013f46:	b580      	push	{r7, lr}
 8013f48:	b082      	sub	sp, #8
 8013f4a:	af00      	add	r7, sp, #0
 8013f4c:	6078      	str	r0, [r7, #4]
 8013f4e:	460b      	mov	r3, r1
 8013f50:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8013f58:	2b01      	cmp	r3, #1
 8013f5a:	d103      	bne.n	8013f64 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8013f5c:	78fb      	ldrb	r3, [r7, #3]
 8013f5e:	4618      	mov	r0, r3
 8013f60:	f000 f872 	bl	8014048 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8013f64:	20c8      	movs	r0, #200	; 0xc8
 8013f66:	f7ef fdab 	bl	8003ac0 <HAL_Delay>
  return USBH_OK;
 8013f6a:	2300      	movs	r3, #0
}
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	3708      	adds	r7, #8
 8013f70:	46bd      	mov	sp, r7
 8013f72:	bd80      	pop	{r7, pc}

08013f74 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8013f74:	b480      	push	{r7}
 8013f76:	b085      	sub	sp, #20
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	6078      	str	r0, [r7, #4]
 8013f7c:	460b      	mov	r3, r1
 8013f7e:	70fb      	strb	r3, [r7, #3]
 8013f80:	4613      	mov	r3, r2
 8013f82:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013f8a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8013f8c:	78fa      	ldrb	r2, [r7, #3]
 8013f8e:	68f9      	ldr	r1, [r7, #12]
 8013f90:	4613      	mov	r3, r2
 8013f92:	009b      	lsls	r3, r3, #2
 8013f94:	4413      	add	r3, r2
 8013f96:	00db      	lsls	r3, r3, #3
 8013f98:	440b      	add	r3, r1
 8013f9a:	333b      	adds	r3, #59	; 0x3b
 8013f9c:	781b      	ldrb	r3, [r3, #0]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d00a      	beq.n	8013fb8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8013fa2:	78fa      	ldrb	r2, [r7, #3]
 8013fa4:	68f9      	ldr	r1, [r7, #12]
 8013fa6:	4613      	mov	r3, r2
 8013fa8:	009b      	lsls	r3, r3, #2
 8013faa:	4413      	add	r3, r2
 8013fac:	00db      	lsls	r3, r3, #3
 8013fae:	440b      	add	r3, r1
 8013fb0:	3350      	adds	r3, #80	; 0x50
 8013fb2:	78ba      	ldrb	r2, [r7, #2]
 8013fb4:	701a      	strb	r2, [r3, #0]
 8013fb6:	e009      	b.n	8013fcc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8013fb8:	78fa      	ldrb	r2, [r7, #3]
 8013fba:	68f9      	ldr	r1, [r7, #12]
 8013fbc:	4613      	mov	r3, r2
 8013fbe:	009b      	lsls	r3, r3, #2
 8013fc0:	4413      	add	r3, r2
 8013fc2:	00db      	lsls	r3, r3, #3
 8013fc4:	440b      	add	r3, r1
 8013fc6:	3351      	adds	r3, #81	; 0x51
 8013fc8:	78ba      	ldrb	r2, [r7, #2]
 8013fca:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8013fcc:	2300      	movs	r3, #0
}
 8013fce:	4618      	mov	r0, r3
 8013fd0:	3714      	adds	r7, #20
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd8:	4770      	bx	lr

08013fda <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8013fda:	b580      	push	{r7, lr}
 8013fdc:	b082      	sub	sp, #8
 8013fde:	af00      	add	r7, sp, #0
 8013fe0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8013fe2:	6878      	ldr	r0, [r7, #4]
 8013fe4:	f7ef fd6c 	bl	8003ac0 <HAL_Delay>
}
 8013fe8:	bf00      	nop
 8013fea:	3708      	adds	r7, #8
 8013fec:	46bd      	mov	sp, r7
 8013fee:	bd80      	pop	{r7, pc}

08013ff0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013ff0:	b480      	push	{r7}
 8013ff2:	b085      	sub	sp, #20
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013ffa:	2300      	movs	r3, #0
 8013ffc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013ffe:	79fb      	ldrb	r3, [r7, #7]
 8014000:	2b03      	cmp	r3, #3
 8014002:	d817      	bhi.n	8014034 <USBH_Get_USB_Status+0x44>
 8014004:	a201      	add	r2, pc, #4	; (adr r2, 801400c <USBH_Get_USB_Status+0x1c>)
 8014006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801400a:	bf00      	nop
 801400c:	0801401d 	.word	0x0801401d
 8014010:	08014023 	.word	0x08014023
 8014014:	08014029 	.word	0x08014029
 8014018:	0801402f 	.word	0x0801402f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801401c:	2300      	movs	r3, #0
 801401e:	73fb      	strb	r3, [r7, #15]
    break;
 8014020:	e00b      	b.n	801403a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8014022:	2302      	movs	r3, #2
 8014024:	73fb      	strb	r3, [r7, #15]
    break;
 8014026:	e008      	b.n	801403a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8014028:	2301      	movs	r3, #1
 801402a:	73fb      	strb	r3, [r7, #15]
    break;
 801402c:	e005      	b.n	801403a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801402e:	2302      	movs	r3, #2
 8014030:	73fb      	strb	r3, [r7, #15]
    break;
 8014032:	e002      	b.n	801403a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8014034:	2302      	movs	r3, #2
 8014036:	73fb      	strb	r3, [r7, #15]
    break;
 8014038:	bf00      	nop
  }
  return usb_status;
 801403a:	7bfb      	ldrb	r3, [r7, #15]
}
 801403c:	4618      	mov	r0, r3
 801403e:	3714      	adds	r7, #20
 8014040:	46bd      	mov	sp, r7
 8014042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014046:	4770      	bx	lr

08014048 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8014048:	b580      	push	{r7, lr}
 801404a:	b084      	sub	sp, #16
 801404c:	af00      	add	r7, sp, #0
 801404e:	4603      	mov	r3, r0
 8014050:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8014052:	79fb      	ldrb	r3, [r7, #7]
 8014054:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8014056:	79fb      	ldrb	r3, [r7, #7]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d102      	bne.n	8014062 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 801405c:	2301      	movs	r3, #1
 801405e:	73fb      	strb	r3, [r7, #15]
 8014060:	e001      	b.n	8014066 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8014062:	2300      	movs	r3, #0
 8014064:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 8014066:	7bfb      	ldrb	r3, [r7, #15]
 8014068:	461a      	mov	r2, r3
 801406a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801406e:	4803      	ldr	r0, [pc, #12]	; (801407c <MX_DriverVbusFS+0x34>)
 8014070:	f7f0 fefe 	bl	8004e70 <HAL_GPIO_WritePin>
}
 8014074:	bf00      	nop
 8014076:	3710      	adds	r7, #16
 8014078:	46bd      	mov	sp, r7
 801407a:	bd80      	pop	{r7, pc}
 801407c:	40021800 	.word	0x40021800

08014080 <__errno>:
 8014080:	4b01      	ldr	r3, [pc, #4]	; (8014088 <__errno+0x8>)
 8014082:	6818      	ldr	r0, [r3, #0]
 8014084:	4770      	bx	lr
 8014086:	bf00      	nop
 8014088:	20000090 	.word	0x20000090

0801408c <__libc_init_array>:
 801408c:	b570      	push	{r4, r5, r6, lr}
 801408e:	4e0d      	ldr	r6, [pc, #52]	; (80140c4 <__libc_init_array+0x38>)
 8014090:	4c0d      	ldr	r4, [pc, #52]	; (80140c8 <__libc_init_array+0x3c>)
 8014092:	1ba4      	subs	r4, r4, r6
 8014094:	10a4      	asrs	r4, r4, #2
 8014096:	2500      	movs	r5, #0
 8014098:	42a5      	cmp	r5, r4
 801409a:	d109      	bne.n	80140b0 <__libc_init_array+0x24>
 801409c:	4e0b      	ldr	r6, [pc, #44]	; (80140cc <__libc_init_array+0x40>)
 801409e:	4c0c      	ldr	r4, [pc, #48]	; (80140d0 <__libc_init_array+0x44>)
 80140a0:	f000 fc40 	bl	8014924 <_init>
 80140a4:	1ba4      	subs	r4, r4, r6
 80140a6:	10a4      	asrs	r4, r4, #2
 80140a8:	2500      	movs	r5, #0
 80140aa:	42a5      	cmp	r5, r4
 80140ac:	d105      	bne.n	80140ba <__libc_init_array+0x2e>
 80140ae:	bd70      	pop	{r4, r5, r6, pc}
 80140b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80140b4:	4798      	blx	r3
 80140b6:	3501      	adds	r5, #1
 80140b8:	e7ee      	b.n	8014098 <__libc_init_array+0xc>
 80140ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80140be:	4798      	blx	r3
 80140c0:	3501      	adds	r5, #1
 80140c2:	e7f2      	b.n	80140aa <__libc_init_array+0x1e>
 80140c4:	080176f0 	.word	0x080176f0
 80140c8:	080176f0 	.word	0x080176f0
 80140cc:	080176f0 	.word	0x080176f0
 80140d0:	080176f4 	.word	0x080176f4

080140d4 <malloc>:
 80140d4:	4b02      	ldr	r3, [pc, #8]	; (80140e0 <malloc+0xc>)
 80140d6:	4601      	mov	r1, r0
 80140d8:	6818      	ldr	r0, [r3, #0]
 80140da:	f000 b86d 	b.w	80141b8 <_malloc_r>
 80140de:	bf00      	nop
 80140e0:	20000090 	.word	0x20000090

080140e4 <free>:
 80140e4:	4b02      	ldr	r3, [pc, #8]	; (80140f0 <free+0xc>)
 80140e6:	4601      	mov	r1, r0
 80140e8:	6818      	ldr	r0, [r3, #0]
 80140ea:	f000 b817 	b.w	801411c <_free_r>
 80140ee:	bf00      	nop
 80140f0:	20000090 	.word	0x20000090

080140f4 <memcpy>:
 80140f4:	b510      	push	{r4, lr}
 80140f6:	1e43      	subs	r3, r0, #1
 80140f8:	440a      	add	r2, r1
 80140fa:	4291      	cmp	r1, r2
 80140fc:	d100      	bne.n	8014100 <memcpy+0xc>
 80140fe:	bd10      	pop	{r4, pc}
 8014100:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014104:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014108:	e7f7      	b.n	80140fa <memcpy+0x6>

0801410a <memset>:
 801410a:	4402      	add	r2, r0
 801410c:	4603      	mov	r3, r0
 801410e:	4293      	cmp	r3, r2
 8014110:	d100      	bne.n	8014114 <memset+0xa>
 8014112:	4770      	bx	lr
 8014114:	f803 1b01 	strb.w	r1, [r3], #1
 8014118:	e7f9      	b.n	801410e <memset+0x4>
	...

0801411c <_free_r>:
 801411c:	b538      	push	{r3, r4, r5, lr}
 801411e:	4605      	mov	r5, r0
 8014120:	2900      	cmp	r1, #0
 8014122:	d045      	beq.n	80141b0 <_free_r+0x94>
 8014124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014128:	1f0c      	subs	r4, r1, #4
 801412a:	2b00      	cmp	r3, #0
 801412c:	bfb8      	it	lt
 801412e:	18e4      	addlt	r4, r4, r3
 8014130:	f000 f8d4 	bl	80142dc <__malloc_lock>
 8014134:	4a1f      	ldr	r2, [pc, #124]	; (80141b4 <_free_r+0x98>)
 8014136:	6813      	ldr	r3, [r2, #0]
 8014138:	4610      	mov	r0, r2
 801413a:	b933      	cbnz	r3, 801414a <_free_r+0x2e>
 801413c:	6063      	str	r3, [r4, #4]
 801413e:	6014      	str	r4, [r2, #0]
 8014140:	4628      	mov	r0, r5
 8014142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014146:	f000 b8ca 	b.w	80142de <__malloc_unlock>
 801414a:	42a3      	cmp	r3, r4
 801414c:	d90c      	bls.n	8014168 <_free_r+0x4c>
 801414e:	6821      	ldr	r1, [r4, #0]
 8014150:	1862      	adds	r2, r4, r1
 8014152:	4293      	cmp	r3, r2
 8014154:	bf04      	itt	eq
 8014156:	681a      	ldreq	r2, [r3, #0]
 8014158:	685b      	ldreq	r3, [r3, #4]
 801415a:	6063      	str	r3, [r4, #4]
 801415c:	bf04      	itt	eq
 801415e:	1852      	addeq	r2, r2, r1
 8014160:	6022      	streq	r2, [r4, #0]
 8014162:	6004      	str	r4, [r0, #0]
 8014164:	e7ec      	b.n	8014140 <_free_r+0x24>
 8014166:	4613      	mov	r3, r2
 8014168:	685a      	ldr	r2, [r3, #4]
 801416a:	b10a      	cbz	r2, 8014170 <_free_r+0x54>
 801416c:	42a2      	cmp	r2, r4
 801416e:	d9fa      	bls.n	8014166 <_free_r+0x4a>
 8014170:	6819      	ldr	r1, [r3, #0]
 8014172:	1858      	adds	r0, r3, r1
 8014174:	42a0      	cmp	r0, r4
 8014176:	d10b      	bne.n	8014190 <_free_r+0x74>
 8014178:	6820      	ldr	r0, [r4, #0]
 801417a:	4401      	add	r1, r0
 801417c:	1858      	adds	r0, r3, r1
 801417e:	4282      	cmp	r2, r0
 8014180:	6019      	str	r1, [r3, #0]
 8014182:	d1dd      	bne.n	8014140 <_free_r+0x24>
 8014184:	6810      	ldr	r0, [r2, #0]
 8014186:	6852      	ldr	r2, [r2, #4]
 8014188:	605a      	str	r2, [r3, #4]
 801418a:	4401      	add	r1, r0
 801418c:	6019      	str	r1, [r3, #0]
 801418e:	e7d7      	b.n	8014140 <_free_r+0x24>
 8014190:	d902      	bls.n	8014198 <_free_r+0x7c>
 8014192:	230c      	movs	r3, #12
 8014194:	602b      	str	r3, [r5, #0]
 8014196:	e7d3      	b.n	8014140 <_free_r+0x24>
 8014198:	6820      	ldr	r0, [r4, #0]
 801419a:	1821      	adds	r1, r4, r0
 801419c:	428a      	cmp	r2, r1
 801419e:	bf04      	itt	eq
 80141a0:	6811      	ldreq	r1, [r2, #0]
 80141a2:	6852      	ldreq	r2, [r2, #4]
 80141a4:	6062      	str	r2, [r4, #4]
 80141a6:	bf04      	itt	eq
 80141a8:	1809      	addeq	r1, r1, r0
 80141aa:	6021      	streq	r1, [r4, #0]
 80141ac:	605c      	str	r4, [r3, #4]
 80141ae:	e7c7      	b.n	8014140 <_free_r+0x24>
 80141b0:	bd38      	pop	{r3, r4, r5, pc}
 80141b2:	bf00      	nop
 80141b4:	20004b80 	.word	0x20004b80

080141b8 <_malloc_r>:
 80141b8:	b570      	push	{r4, r5, r6, lr}
 80141ba:	1ccd      	adds	r5, r1, #3
 80141bc:	f025 0503 	bic.w	r5, r5, #3
 80141c0:	3508      	adds	r5, #8
 80141c2:	2d0c      	cmp	r5, #12
 80141c4:	bf38      	it	cc
 80141c6:	250c      	movcc	r5, #12
 80141c8:	2d00      	cmp	r5, #0
 80141ca:	4606      	mov	r6, r0
 80141cc:	db01      	blt.n	80141d2 <_malloc_r+0x1a>
 80141ce:	42a9      	cmp	r1, r5
 80141d0:	d903      	bls.n	80141da <_malloc_r+0x22>
 80141d2:	230c      	movs	r3, #12
 80141d4:	6033      	str	r3, [r6, #0]
 80141d6:	2000      	movs	r0, #0
 80141d8:	bd70      	pop	{r4, r5, r6, pc}
 80141da:	f000 f87f 	bl	80142dc <__malloc_lock>
 80141de:	4a21      	ldr	r2, [pc, #132]	; (8014264 <_malloc_r+0xac>)
 80141e0:	6814      	ldr	r4, [r2, #0]
 80141e2:	4621      	mov	r1, r4
 80141e4:	b991      	cbnz	r1, 801420c <_malloc_r+0x54>
 80141e6:	4c20      	ldr	r4, [pc, #128]	; (8014268 <_malloc_r+0xb0>)
 80141e8:	6823      	ldr	r3, [r4, #0]
 80141ea:	b91b      	cbnz	r3, 80141f4 <_malloc_r+0x3c>
 80141ec:	4630      	mov	r0, r6
 80141ee:	f000 f83d 	bl	801426c <_sbrk_r>
 80141f2:	6020      	str	r0, [r4, #0]
 80141f4:	4629      	mov	r1, r5
 80141f6:	4630      	mov	r0, r6
 80141f8:	f000 f838 	bl	801426c <_sbrk_r>
 80141fc:	1c43      	adds	r3, r0, #1
 80141fe:	d124      	bne.n	801424a <_malloc_r+0x92>
 8014200:	230c      	movs	r3, #12
 8014202:	6033      	str	r3, [r6, #0]
 8014204:	4630      	mov	r0, r6
 8014206:	f000 f86a 	bl	80142de <__malloc_unlock>
 801420a:	e7e4      	b.n	80141d6 <_malloc_r+0x1e>
 801420c:	680b      	ldr	r3, [r1, #0]
 801420e:	1b5b      	subs	r3, r3, r5
 8014210:	d418      	bmi.n	8014244 <_malloc_r+0x8c>
 8014212:	2b0b      	cmp	r3, #11
 8014214:	d90f      	bls.n	8014236 <_malloc_r+0x7e>
 8014216:	600b      	str	r3, [r1, #0]
 8014218:	50cd      	str	r5, [r1, r3]
 801421a:	18cc      	adds	r4, r1, r3
 801421c:	4630      	mov	r0, r6
 801421e:	f000 f85e 	bl	80142de <__malloc_unlock>
 8014222:	f104 000b 	add.w	r0, r4, #11
 8014226:	1d23      	adds	r3, r4, #4
 8014228:	f020 0007 	bic.w	r0, r0, #7
 801422c:	1ac3      	subs	r3, r0, r3
 801422e:	d0d3      	beq.n	80141d8 <_malloc_r+0x20>
 8014230:	425a      	negs	r2, r3
 8014232:	50e2      	str	r2, [r4, r3]
 8014234:	e7d0      	b.n	80141d8 <_malloc_r+0x20>
 8014236:	428c      	cmp	r4, r1
 8014238:	684b      	ldr	r3, [r1, #4]
 801423a:	bf16      	itet	ne
 801423c:	6063      	strne	r3, [r4, #4]
 801423e:	6013      	streq	r3, [r2, #0]
 8014240:	460c      	movne	r4, r1
 8014242:	e7eb      	b.n	801421c <_malloc_r+0x64>
 8014244:	460c      	mov	r4, r1
 8014246:	6849      	ldr	r1, [r1, #4]
 8014248:	e7cc      	b.n	80141e4 <_malloc_r+0x2c>
 801424a:	1cc4      	adds	r4, r0, #3
 801424c:	f024 0403 	bic.w	r4, r4, #3
 8014250:	42a0      	cmp	r0, r4
 8014252:	d005      	beq.n	8014260 <_malloc_r+0xa8>
 8014254:	1a21      	subs	r1, r4, r0
 8014256:	4630      	mov	r0, r6
 8014258:	f000 f808 	bl	801426c <_sbrk_r>
 801425c:	3001      	adds	r0, #1
 801425e:	d0cf      	beq.n	8014200 <_malloc_r+0x48>
 8014260:	6025      	str	r5, [r4, #0]
 8014262:	e7db      	b.n	801421c <_malloc_r+0x64>
 8014264:	20004b80 	.word	0x20004b80
 8014268:	20004b84 	.word	0x20004b84

0801426c <_sbrk_r>:
 801426c:	b538      	push	{r3, r4, r5, lr}
 801426e:	4c06      	ldr	r4, [pc, #24]	; (8014288 <_sbrk_r+0x1c>)
 8014270:	2300      	movs	r3, #0
 8014272:	4605      	mov	r5, r0
 8014274:	4608      	mov	r0, r1
 8014276:	6023      	str	r3, [r4, #0]
 8014278:	f7ee f842 	bl	8002300 <_sbrk>
 801427c:	1c43      	adds	r3, r0, #1
 801427e:	d102      	bne.n	8014286 <_sbrk_r+0x1a>
 8014280:	6823      	ldr	r3, [r4, #0]
 8014282:	b103      	cbz	r3, 8014286 <_sbrk_r+0x1a>
 8014284:	602b      	str	r3, [r5, #0]
 8014286:	bd38      	pop	{r3, r4, r5, pc}
 8014288:	200222b4 	.word	0x200222b4

0801428c <siprintf>:
 801428c:	b40e      	push	{r1, r2, r3}
 801428e:	b500      	push	{lr}
 8014290:	b09c      	sub	sp, #112	; 0x70
 8014292:	ab1d      	add	r3, sp, #116	; 0x74
 8014294:	9002      	str	r0, [sp, #8]
 8014296:	9006      	str	r0, [sp, #24]
 8014298:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801429c:	4809      	ldr	r0, [pc, #36]	; (80142c4 <siprintf+0x38>)
 801429e:	9107      	str	r1, [sp, #28]
 80142a0:	9104      	str	r1, [sp, #16]
 80142a2:	4909      	ldr	r1, [pc, #36]	; (80142c8 <siprintf+0x3c>)
 80142a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80142a8:	9105      	str	r1, [sp, #20]
 80142aa:	6800      	ldr	r0, [r0, #0]
 80142ac:	9301      	str	r3, [sp, #4]
 80142ae:	a902      	add	r1, sp, #8
 80142b0:	f000 f870 	bl	8014394 <_svfiprintf_r>
 80142b4:	9b02      	ldr	r3, [sp, #8]
 80142b6:	2200      	movs	r2, #0
 80142b8:	701a      	strb	r2, [r3, #0]
 80142ba:	b01c      	add	sp, #112	; 0x70
 80142bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80142c0:	b003      	add	sp, #12
 80142c2:	4770      	bx	lr
 80142c4:	20000090 	.word	0x20000090
 80142c8:	ffff0208 	.word	0xffff0208

080142cc <strcpy>:
 80142cc:	4603      	mov	r3, r0
 80142ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80142d2:	f803 2b01 	strb.w	r2, [r3], #1
 80142d6:	2a00      	cmp	r2, #0
 80142d8:	d1f9      	bne.n	80142ce <strcpy+0x2>
 80142da:	4770      	bx	lr

080142dc <__malloc_lock>:
 80142dc:	4770      	bx	lr

080142de <__malloc_unlock>:
 80142de:	4770      	bx	lr

080142e0 <__ssputs_r>:
 80142e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142e4:	688e      	ldr	r6, [r1, #8]
 80142e6:	429e      	cmp	r6, r3
 80142e8:	4682      	mov	sl, r0
 80142ea:	460c      	mov	r4, r1
 80142ec:	4690      	mov	r8, r2
 80142ee:	4699      	mov	r9, r3
 80142f0:	d837      	bhi.n	8014362 <__ssputs_r+0x82>
 80142f2:	898a      	ldrh	r2, [r1, #12]
 80142f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80142f8:	d031      	beq.n	801435e <__ssputs_r+0x7e>
 80142fa:	6825      	ldr	r5, [r4, #0]
 80142fc:	6909      	ldr	r1, [r1, #16]
 80142fe:	1a6f      	subs	r7, r5, r1
 8014300:	6965      	ldr	r5, [r4, #20]
 8014302:	2302      	movs	r3, #2
 8014304:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014308:	fb95 f5f3 	sdiv	r5, r5, r3
 801430c:	f109 0301 	add.w	r3, r9, #1
 8014310:	443b      	add	r3, r7
 8014312:	429d      	cmp	r5, r3
 8014314:	bf38      	it	cc
 8014316:	461d      	movcc	r5, r3
 8014318:	0553      	lsls	r3, r2, #21
 801431a:	d530      	bpl.n	801437e <__ssputs_r+0x9e>
 801431c:	4629      	mov	r1, r5
 801431e:	f7ff ff4b 	bl	80141b8 <_malloc_r>
 8014322:	4606      	mov	r6, r0
 8014324:	b950      	cbnz	r0, 801433c <__ssputs_r+0x5c>
 8014326:	230c      	movs	r3, #12
 8014328:	f8ca 3000 	str.w	r3, [sl]
 801432c:	89a3      	ldrh	r3, [r4, #12]
 801432e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014332:	81a3      	strh	r3, [r4, #12]
 8014334:	f04f 30ff 	mov.w	r0, #4294967295
 8014338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801433c:	463a      	mov	r2, r7
 801433e:	6921      	ldr	r1, [r4, #16]
 8014340:	f7ff fed8 	bl	80140f4 <memcpy>
 8014344:	89a3      	ldrh	r3, [r4, #12]
 8014346:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801434a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801434e:	81a3      	strh	r3, [r4, #12]
 8014350:	6126      	str	r6, [r4, #16]
 8014352:	6165      	str	r5, [r4, #20]
 8014354:	443e      	add	r6, r7
 8014356:	1bed      	subs	r5, r5, r7
 8014358:	6026      	str	r6, [r4, #0]
 801435a:	60a5      	str	r5, [r4, #8]
 801435c:	464e      	mov	r6, r9
 801435e:	454e      	cmp	r6, r9
 8014360:	d900      	bls.n	8014364 <__ssputs_r+0x84>
 8014362:	464e      	mov	r6, r9
 8014364:	4632      	mov	r2, r6
 8014366:	4641      	mov	r1, r8
 8014368:	6820      	ldr	r0, [r4, #0]
 801436a:	f000 fa93 	bl	8014894 <memmove>
 801436e:	68a3      	ldr	r3, [r4, #8]
 8014370:	1b9b      	subs	r3, r3, r6
 8014372:	60a3      	str	r3, [r4, #8]
 8014374:	6823      	ldr	r3, [r4, #0]
 8014376:	441e      	add	r6, r3
 8014378:	6026      	str	r6, [r4, #0]
 801437a:	2000      	movs	r0, #0
 801437c:	e7dc      	b.n	8014338 <__ssputs_r+0x58>
 801437e:	462a      	mov	r2, r5
 8014380:	f000 faa1 	bl	80148c6 <_realloc_r>
 8014384:	4606      	mov	r6, r0
 8014386:	2800      	cmp	r0, #0
 8014388:	d1e2      	bne.n	8014350 <__ssputs_r+0x70>
 801438a:	6921      	ldr	r1, [r4, #16]
 801438c:	4650      	mov	r0, sl
 801438e:	f7ff fec5 	bl	801411c <_free_r>
 8014392:	e7c8      	b.n	8014326 <__ssputs_r+0x46>

08014394 <_svfiprintf_r>:
 8014394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014398:	461d      	mov	r5, r3
 801439a:	898b      	ldrh	r3, [r1, #12]
 801439c:	061f      	lsls	r7, r3, #24
 801439e:	b09d      	sub	sp, #116	; 0x74
 80143a0:	4680      	mov	r8, r0
 80143a2:	460c      	mov	r4, r1
 80143a4:	4616      	mov	r6, r2
 80143a6:	d50f      	bpl.n	80143c8 <_svfiprintf_r+0x34>
 80143a8:	690b      	ldr	r3, [r1, #16]
 80143aa:	b96b      	cbnz	r3, 80143c8 <_svfiprintf_r+0x34>
 80143ac:	2140      	movs	r1, #64	; 0x40
 80143ae:	f7ff ff03 	bl	80141b8 <_malloc_r>
 80143b2:	6020      	str	r0, [r4, #0]
 80143b4:	6120      	str	r0, [r4, #16]
 80143b6:	b928      	cbnz	r0, 80143c4 <_svfiprintf_r+0x30>
 80143b8:	230c      	movs	r3, #12
 80143ba:	f8c8 3000 	str.w	r3, [r8]
 80143be:	f04f 30ff 	mov.w	r0, #4294967295
 80143c2:	e0c8      	b.n	8014556 <_svfiprintf_r+0x1c2>
 80143c4:	2340      	movs	r3, #64	; 0x40
 80143c6:	6163      	str	r3, [r4, #20]
 80143c8:	2300      	movs	r3, #0
 80143ca:	9309      	str	r3, [sp, #36]	; 0x24
 80143cc:	2320      	movs	r3, #32
 80143ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80143d2:	2330      	movs	r3, #48	; 0x30
 80143d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80143d8:	9503      	str	r5, [sp, #12]
 80143da:	f04f 0b01 	mov.w	fp, #1
 80143de:	4637      	mov	r7, r6
 80143e0:	463d      	mov	r5, r7
 80143e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80143e6:	b10b      	cbz	r3, 80143ec <_svfiprintf_r+0x58>
 80143e8:	2b25      	cmp	r3, #37	; 0x25
 80143ea:	d13e      	bne.n	801446a <_svfiprintf_r+0xd6>
 80143ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80143f0:	d00b      	beq.n	801440a <_svfiprintf_r+0x76>
 80143f2:	4653      	mov	r3, sl
 80143f4:	4632      	mov	r2, r6
 80143f6:	4621      	mov	r1, r4
 80143f8:	4640      	mov	r0, r8
 80143fa:	f7ff ff71 	bl	80142e0 <__ssputs_r>
 80143fe:	3001      	adds	r0, #1
 8014400:	f000 80a4 	beq.w	801454c <_svfiprintf_r+0x1b8>
 8014404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014406:	4453      	add	r3, sl
 8014408:	9309      	str	r3, [sp, #36]	; 0x24
 801440a:	783b      	ldrb	r3, [r7, #0]
 801440c:	2b00      	cmp	r3, #0
 801440e:	f000 809d 	beq.w	801454c <_svfiprintf_r+0x1b8>
 8014412:	2300      	movs	r3, #0
 8014414:	f04f 32ff 	mov.w	r2, #4294967295
 8014418:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801441c:	9304      	str	r3, [sp, #16]
 801441e:	9307      	str	r3, [sp, #28]
 8014420:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014424:	931a      	str	r3, [sp, #104]	; 0x68
 8014426:	462f      	mov	r7, r5
 8014428:	2205      	movs	r2, #5
 801442a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801442e:	4850      	ldr	r0, [pc, #320]	; (8014570 <_svfiprintf_r+0x1dc>)
 8014430:	f7eb fef6 	bl	8000220 <memchr>
 8014434:	9b04      	ldr	r3, [sp, #16]
 8014436:	b9d0      	cbnz	r0, 801446e <_svfiprintf_r+0xda>
 8014438:	06d9      	lsls	r1, r3, #27
 801443a:	bf44      	itt	mi
 801443c:	2220      	movmi	r2, #32
 801443e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014442:	071a      	lsls	r2, r3, #28
 8014444:	bf44      	itt	mi
 8014446:	222b      	movmi	r2, #43	; 0x2b
 8014448:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801444c:	782a      	ldrb	r2, [r5, #0]
 801444e:	2a2a      	cmp	r2, #42	; 0x2a
 8014450:	d015      	beq.n	801447e <_svfiprintf_r+0xea>
 8014452:	9a07      	ldr	r2, [sp, #28]
 8014454:	462f      	mov	r7, r5
 8014456:	2000      	movs	r0, #0
 8014458:	250a      	movs	r5, #10
 801445a:	4639      	mov	r1, r7
 801445c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014460:	3b30      	subs	r3, #48	; 0x30
 8014462:	2b09      	cmp	r3, #9
 8014464:	d94d      	bls.n	8014502 <_svfiprintf_r+0x16e>
 8014466:	b1b8      	cbz	r0, 8014498 <_svfiprintf_r+0x104>
 8014468:	e00f      	b.n	801448a <_svfiprintf_r+0xf6>
 801446a:	462f      	mov	r7, r5
 801446c:	e7b8      	b.n	80143e0 <_svfiprintf_r+0x4c>
 801446e:	4a40      	ldr	r2, [pc, #256]	; (8014570 <_svfiprintf_r+0x1dc>)
 8014470:	1a80      	subs	r0, r0, r2
 8014472:	fa0b f000 	lsl.w	r0, fp, r0
 8014476:	4318      	orrs	r0, r3
 8014478:	9004      	str	r0, [sp, #16]
 801447a:	463d      	mov	r5, r7
 801447c:	e7d3      	b.n	8014426 <_svfiprintf_r+0x92>
 801447e:	9a03      	ldr	r2, [sp, #12]
 8014480:	1d11      	adds	r1, r2, #4
 8014482:	6812      	ldr	r2, [r2, #0]
 8014484:	9103      	str	r1, [sp, #12]
 8014486:	2a00      	cmp	r2, #0
 8014488:	db01      	blt.n	801448e <_svfiprintf_r+0xfa>
 801448a:	9207      	str	r2, [sp, #28]
 801448c:	e004      	b.n	8014498 <_svfiprintf_r+0x104>
 801448e:	4252      	negs	r2, r2
 8014490:	f043 0302 	orr.w	r3, r3, #2
 8014494:	9207      	str	r2, [sp, #28]
 8014496:	9304      	str	r3, [sp, #16]
 8014498:	783b      	ldrb	r3, [r7, #0]
 801449a:	2b2e      	cmp	r3, #46	; 0x2e
 801449c:	d10c      	bne.n	80144b8 <_svfiprintf_r+0x124>
 801449e:	787b      	ldrb	r3, [r7, #1]
 80144a0:	2b2a      	cmp	r3, #42	; 0x2a
 80144a2:	d133      	bne.n	801450c <_svfiprintf_r+0x178>
 80144a4:	9b03      	ldr	r3, [sp, #12]
 80144a6:	1d1a      	adds	r2, r3, #4
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	9203      	str	r2, [sp, #12]
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	bfb8      	it	lt
 80144b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80144b4:	3702      	adds	r7, #2
 80144b6:	9305      	str	r3, [sp, #20]
 80144b8:	4d2e      	ldr	r5, [pc, #184]	; (8014574 <_svfiprintf_r+0x1e0>)
 80144ba:	7839      	ldrb	r1, [r7, #0]
 80144bc:	2203      	movs	r2, #3
 80144be:	4628      	mov	r0, r5
 80144c0:	f7eb feae 	bl	8000220 <memchr>
 80144c4:	b138      	cbz	r0, 80144d6 <_svfiprintf_r+0x142>
 80144c6:	2340      	movs	r3, #64	; 0x40
 80144c8:	1b40      	subs	r0, r0, r5
 80144ca:	fa03 f000 	lsl.w	r0, r3, r0
 80144ce:	9b04      	ldr	r3, [sp, #16]
 80144d0:	4303      	orrs	r3, r0
 80144d2:	3701      	adds	r7, #1
 80144d4:	9304      	str	r3, [sp, #16]
 80144d6:	7839      	ldrb	r1, [r7, #0]
 80144d8:	4827      	ldr	r0, [pc, #156]	; (8014578 <_svfiprintf_r+0x1e4>)
 80144da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80144de:	2206      	movs	r2, #6
 80144e0:	1c7e      	adds	r6, r7, #1
 80144e2:	f7eb fe9d 	bl	8000220 <memchr>
 80144e6:	2800      	cmp	r0, #0
 80144e8:	d038      	beq.n	801455c <_svfiprintf_r+0x1c8>
 80144ea:	4b24      	ldr	r3, [pc, #144]	; (801457c <_svfiprintf_r+0x1e8>)
 80144ec:	bb13      	cbnz	r3, 8014534 <_svfiprintf_r+0x1a0>
 80144ee:	9b03      	ldr	r3, [sp, #12]
 80144f0:	3307      	adds	r3, #7
 80144f2:	f023 0307 	bic.w	r3, r3, #7
 80144f6:	3308      	adds	r3, #8
 80144f8:	9303      	str	r3, [sp, #12]
 80144fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144fc:	444b      	add	r3, r9
 80144fe:	9309      	str	r3, [sp, #36]	; 0x24
 8014500:	e76d      	b.n	80143de <_svfiprintf_r+0x4a>
 8014502:	fb05 3202 	mla	r2, r5, r2, r3
 8014506:	2001      	movs	r0, #1
 8014508:	460f      	mov	r7, r1
 801450a:	e7a6      	b.n	801445a <_svfiprintf_r+0xc6>
 801450c:	2300      	movs	r3, #0
 801450e:	3701      	adds	r7, #1
 8014510:	9305      	str	r3, [sp, #20]
 8014512:	4619      	mov	r1, r3
 8014514:	250a      	movs	r5, #10
 8014516:	4638      	mov	r0, r7
 8014518:	f810 2b01 	ldrb.w	r2, [r0], #1
 801451c:	3a30      	subs	r2, #48	; 0x30
 801451e:	2a09      	cmp	r2, #9
 8014520:	d903      	bls.n	801452a <_svfiprintf_r+0x196>
 8014522:	2b00      	cmp	r3, #0
 8014524:	d0c8      	beq.n	80144b8 <_svfiprintf_r+0x124>
 8014526:	9105      	str	r1, [sp, #20]
 8014528:	e7c6      	b.n	80144b8 <_svfiprintf_r+0x124>
 801452a:	fb05 2101 	mla	r1, r5, r1, r2
 801452e:	2301      	movs	r3, #1
 8014530:	4607      	mov	r7, r0
 8014532:	e7f0      	b.n	8014516 <_svfiprintf_r+0x182>
 8014534:	ab03      	add	r3, sp, #12
 8014536:	9300      	str	r3, [sp, #0]
 8014538:	4622      	mov	r2, r4
 801453a:	4b11      	ldr	r3, [pc, #68]	; (8014580 <_svfiprintf_r+0x1ec>)
 801453c:	a904      	add	r1, sp, #16
 801453e:	4640      	mov	r0, r8
 8014540:	f3af 8000 	nop.w
 8014544:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014548:	4681      	mov	r9, r0
 801454a:	d1d6      	bne.n	80144fa <_svfiprintf_r+0x166>
 801454c:	89a3      	ldrh	r3, [r4, #12]
 801454e:	065b      	lsls	r3, r3, #25
 8014550:	f53f af35 	bmi.w	80143be <_svfiprintf_r+0x2a>
 8014554:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014556:	b01d      	add	sp, #116	; 0x74
 8014558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801455c:	ab03      	add	r3, sp, #12
 801455e:	9300      	str	r3, [sp, #0]
 8014560:	4622      	mov	r2, r4
 8014562:	4b07      	ldr	r3, [pc, #28]	; (8014580 <_svfiprintf_r+0x1ec>)
 8014564:	a904      	add	r1, sp, #16
 8014566:	4640      	mov	r0, r8
 8014568:	f000 f882 	bl	8014670 <_printf_i>
 801456c:	e7ea      	b.n	8014544 <_svfiprintf_r+0x1b0>
 801456e:	bf00      	nop
 8014570:	080176b4 	.word	0x080176b4
 8014574:	080176ba 	.word	0x080176ba
 8014578:	080176be 	.word	0x080176be
 801457c:	00000000 	.word	0x00000000
 8014580:	080142e1 	.word	0x080142e1

08014584 <_printf_common>:
 8014584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014588:	4691      	mov	r9, r2
 801458a:	461f      	mov	r7, r3
 801458c:	688a      	ldr	r2, [r1, #8]
 801458e:	690b      	ldr	r3, [r1, #16]
 8014590:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014594:	4293      	cmp	r3, r2
 8014596:	bfb8      	it	lt
 8014598:	4613      	movlt	r3, r2
 801459a:	f8c9 3000 	str.w	r3, [r9]
 801459e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80145a2:	4606      	mov	r6, r0
 80145a4:	460c      	mov	r4, r1
 80145a6:	b112      	cbz	r2, 80145ae <_printf_common+0x2a>
 80145a8:	3301      	adds	r3, #1
 80145aa:	f8c9 3000 	str.w	r3, [r9]
 80145ae:	6823      	ldr	r3, [r4, #0]
 80145b0:	0699      	lsls	r1, r3, #26
 80145b2:	bf42      	ittt	mi
 80145b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80145b8:	3302      	addmi	r3, #2
 80145ba:	f8c9 3000 	strmi.w	r3, [r9]
 80145be:	6825      	ldr	r5, [r4, #0]
 80145c0:	f015 0506 	ands.w	r5, r5, #6
 80145c4:	d107      	bne.n	80145d6 <_printf_common+0x52>
 80145c6:	f104 0a19 	add.w	sl, r4, #25
 80145ca:	68e3      	ldr	r3, [r4, #12]
 80145cc:	f8d9 2000 	ldr.w	r2, [r9]
 80145d0:	1a9b      	subs	r3, r3, r2
 80145d2:	42ab      	cmp	r3, r5
 80145d4:	dc28      	bgt.n	8014628 <_printf_common+0xa4>
 80145d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80145da:	6822      	ldr	r2, [r4, #0]
 80145dc:	3300      	adds	r3, #0
 80145de:	bf18      	it	ne
 80145e0:	2301      	movne	r3, #1
 80145e2:	0692      	lsls	r2, r2, #26
 80145e4:	d42d      	bmi.n	8014642 <_printf_common+0xbe>
 80145e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80145ea:	4639      	mov	r1, r7
 80145ec:	4630      	mov	r0, r6
 80145ee:	47c0      	blx	r8
 80145f0:	3001      	adds	r0, #1
 80145f2:	d020      	beq.n	8014636 <_printf_common+0xb2>
 80145f4:	6823      	ldr	r3, [r4, #0]
 80145f6:	68e5      	ldr	r5, [r4, #12]
 80145f8:	f8d9 2000 	ldr.w	r2, [r9]
 80145fc:	f003 0306 	and.w	r3, r3, #6
 8014600:	2b04      	cmp	r3, #4
 8014602:	bf08      	it	eq
 8014604:	1aad      	subeq	r5, r5, r2
 8014606:	68a3      	ldr	r3, [r4, #8]
 8014608:	6922      	ldr	r2, [r4, #16]
 801460a:	bf0c      	ite	eq
 801460c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014610:	2500      	movne	r5, #0
 8014612:	4293      	cmp	r3, r2
 8014614:	bfc4      	itt	gt
 8014616:	1a9b      	subgt	r3, r3, r2
 8014618:	18ed      	addgt	r5, r5, r3
 801461a:	f04f 0900 	mov.w	r9, #0
 801461e:	341a      	adds	r4, #26
 8014620:	454d      	cmp	r5, r9
 8014622:	d11a      	bne.n	801465a <_printf_common+0xd6>
 8014624:	2000      	movs	r0, #0
 8014626:	e008      	b.n	801463a <_printf_common+0xb6>
 8014628:	2301      	movs	r3, #1
 801462a:	4652      	mov	r2, sl
 801462c:	4639      	mov	r1, r7
 801462e:	4630      	mov	r0, r6
 8014630:	47c0      	blx	r8
 8014632:	3001      	adds	r0, #1
 8014634:	d103      	bne.n	801463e <_printf_common+0xba>
 8014636:	f04f 30ff 	mov.w	r0, #4294967295
 801463a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801463e:	3501      	adds	r5, #1
 8014640:	e7c3      	b.n	80145ca <_printf_common+0x46>
 8014642:	18e1      	adds	r1, r4, r3
 8014644:	1c5a      	adds	r2, r3, #1
 8014646:	2030      	movs	r0, #48	; 0x30
 8014648:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801464c:	4422      	add	r2, r4
 801464e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014652:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014656:	3302      	adds	r3, #2
 8014658:	e7c5      	b.n	80145e6 <_printf_common+0x62>
 801465a:	2301      	movs	r3, #1
 801465c:	4622      	mov	r2, r4
 801465e:	4639      	mov	r1, r7
 8014660:	4630      	mov	r0, r6
 8014662:	47c0      	blx	r8
 8014664:	3001      	adds	r0, #1
 8014666:	d0e6      	beq.n	8014636 <_printf_common+0xb2>
 8014668:	f109 0901 	add.w	r9, r9, #1
 801466c:	e7d8      	b.n	8014620 <_printf_common+0x9c>
	...

08014670 <_printf_i>:
 8014670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014674:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014678:	460c      	mov	r4, r1
 801467a:	7e09      	ldrb	r1, [r1, #24]
 801467c:	b085      	sub	sp, #20
 801467e:	296e      	cmp	r1, #110	; 0x6e
 8014680:	4617      	mov	r7, r2
 8014682:	4606      	mov	r6, r0
 8014684:	4698      	mov	r8, r3
 8014686:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014688:	f000 80b3 	beq.w	80147f2 <_printf_i+0x182>
 801468c:	d822      	bhi.n	80146d4 <_printf_i+0x64>
 801468e:	2963      	cmp	r1, #99	; 0x63
 8014690:	d036      	beq.n	8014700 <_printf_i+0x90>
 8014692:	d80a      	bhi.n	80146aa <_printf_i+0x3a>
 8014694:	2900      	cmp	r1, #0
 8014696:	f000 80b9 	beq.w	801480c <_printf_i+0x19c>
 801469a:	2958      	cmp	r1, #88	; 0x58
 801469c:	f000 8083 	beq.w	80147a6 <_printf_i+0x136>
 80146a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80146a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80146a8:	e032      	b.n	8014710 <_printf_i+0xa0>
 80146aa:	2964      	cmp	r1, #100	; 0x64
 80146ac:	d001      	beq.n	80146b2 <_printf_i+0x42>
 80146ae:	2969      	cmp	r1, #105	; 0x69
 80146b0:	d1f6      	bne.n	80146a0 <_printf_i+0x30>
 80146b2:	6820      	ldr	r0, [r4, #0]
 80146b4:	6813      	ldr	r3, [r2, #0]
 80146b6:	0605      	lsls	r5, r0, #24
 80146b8:	f103 0104 	add.w	r1, r3, #4
 80146bc:	d52a      	bpl.n	8014714 <_printf_i+0xa4>
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	6011      	str	r1, [r2, #0]
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	da03      	bge.n	80146ce <_printf_i+0x5e>
 80146c6:	222d      	movs	r2, #45	; 0x2d
 80146c8:	425b      	negs	r3, r3
 80146ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80146ce:	486f      	ldr	r0, [pc, #444]	; (801488c <_printf_i+0x21c>)
 80146d0:	220a      	movs	r2, #10
 80146d2:	e039      	b.n	8014748 <_printf_i+0xd8>
 80146d4:	2973      	cmp	r1, #115	; 0x73
 80146d6:	f000 809d 	beq.w	8014814 <_printf_i+0x1a4>
 80146da:	d808      	bhi.n	80146ee <_printf_i+0x7e>
 80146dc:	296f      	cmp	r1, #111	; 0x6f
 80146de:	d020      	beq.n	8014722 <_printf_i+0xb2>
 80146e0:	2970      	cmp	r1, #112	; 0x70
 80146e2:	d1dd      	bne.n	80146a0 <_printf_i+0x30>
 80146e4:	6823      	ldr	r3, [r4, #0]
 80146e6:	f043 0320 	orr.w	r3, r3, #32
 80146ea:	6023      	str	r3, [r4, #0]
 80146ec:	e003      	b.n	80146f6 <_printf_i+0x86>
 80146ee:	2975      	cmp	r1, #117	; 0x75
 80146f0:	d017      	beq.n	8014722 <_printf_i+0xb2>
 80146f2:	2978      	cmp	r1, #120	; 0x78
 80146f4:	d1d4      	bne.n	80146a0 <_printf_i+0x30>
 80146f6:	2378      	movs	r3, #120	; 0x78
 80146f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80146fc:	4864      	ldr	r0, [pc, #400]	; (8014890 <_printf_i+0x220>)
 80146fe:	e055      	b.n	80147ac <_printf_i+0x13c>
 8014700:	6813      	ldr	r3, [r2, #0]
 8014702:	1d19      	adds	r1, r3, #4
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	6011      	str	r1, [r2, #0]
 8014708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801470c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014710:	2301      	movs	r3, #1
 8014712:	e08c      	b.n	801482e <_printf_i+0x1be>
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	6011      	str	r1, [r2, #0]
 8014718:	f010 0f40 	tst.w	r0, #64	; 0x40
 801471c:	bf18      	it	ne
 801471e:	b21b      	sxthne	r3, r3
 8014720:	e7cf      	b.n	80146c2 <_printf_i+0x52>
 8014722:	6813      	ldr	r3, [r2, #0]
 8014724:	6825      	ldr	r5, [r4, #0]
 8014726:	1d18      	adds	r0, r3, #4
 8014728:	6010      	str	r0, [r2, #0]
 801472a:	0628      	lsls	r0, r5, #24
 801472c:	d501      	bpl.n	8014732 <_printf_i+0xc2>
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	e002      	b.n	8014738 <_printf_i+0xc8>
 8014732:	0668      	lsls	r0, r5, #25
 8014734:	d5fb      	bpl.n	801472e <_printf_i+0xbe>
 8014736:	881b      	ldrh	r3, [r3, #0]
 8014738:	4854      	ldr	r0, [pc, #336]	; (801488c <_printf_i+0x21c>)
 801473a:	296f      	cmp	r1, #111	; 0x6f
 801473c:	bf14      	ite	ne
 801473e:	220a      	movne	r2, #10
 8014740:	2208      	moveq	r2, #8
 8014742:	2100      	movs	r1, #0
 8014744:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014748:	6865      	ldr	r5, [r4, #4]
 801474a:	60a5      	str	r5, [r4, #8]
 801474c:	2d00      	cmp	r5, #0
 801474e:	f2c0 8095 	blt.w	801487c <_printf_i+0x20c>
 8014752:	6821      	ldr	r1, [r4, #0]
 8014754:	f021 0104 	bic.w	r1, r1, #4
 8014758:	6021      	str	r1, [r4, #0]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d13d      	bne.n	80147da <_printf_i+0x16a>
 801475e:	2d00      	cmp	r5, #0
 8014760:	f040 808e 	bne.w	8014880 <_printf_i+0x210>
 8014764:	4665      	mov	r5, ip
 8014766:	2a08      	cmp	r2, #8
 8014768:	d10b      	bne.n	8014782 <_printf_i+0x112>
 801476a:	6823      	ldr	r3, [r4, #0]
 801476c:	07db      	lsls	r3, r3, #31
 801476e:	d508      	bpl.n	8014782 <_printf_i+0x112>
 8014770:	6923      	ldr	r3, [r4, #16]
 8014772:	6862      	ldr	r2, [r4, #4]
 8014774:	429a      	cmp	r2, r3
 8014776:	bfde      	ittt	le
 8014778:	2330      	movle	r3, #48	; 0x30
 801477a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801477e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014782:	ebac 0305 	sub.w	r3, ip, r5
 8014786:	6123      	str	r3, [r4, #16]
 8014788:	f8cd 8000 	str.w	r8, [sp]
 801478c:	463b      	mov	r3, r7
 801478e:	aa03      	add	r2, sp, #12
 8014790:	4621      	mov	r1, r4
 8014792:	4630      	mov	r0, r6
 8014794:	f7ff fef6 	bl	8014584 <_printf_common>
 8014798:	3001      	adds	r0, #1
 801479a:	d14d      	bne.n	8014838 <_printf_i+0x1c8>
 801479c:	f04f 30ff 	mov.w	r0, #4294967295
 80147a0:	b005      	add	sp, #20
 80147a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80147a6:	4839      	ldr	r0, [pc, #228]	; (801488c <_printf_i+0x21c>)
 80147a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80147ac:	6813      	ldr	r3, [r2, #0]
 80147ae:	6821      	ldr	r1, [r4, #0]
 80147b0:	1d1d      	adds	r5, r3, #4
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	6015      	str	r5, [r2, #0]
 80147b6:	060a      	lsls	r2, r1, #24
 80147b8:	d50b      	bpl.n	80147d2 <_printf_i+0x162>
 80147ba:	07ca      	lsls	r2, r1, #31
 80147bc:	bf44      	itt	mi
 80147be:	f041 0120 	orrmi.w	r1, r1, #32
 80147c2:	6021      	strmi	r1, [r4, #0]
 80147c4:	b91b      	cbnz	r3, 80147ce <_printf_i+0x15e>
 80147c6:	6822      	ldr	r2, [r4, #0]
 80147c8:	f022 0220 	bic.w	r2, r2, #32
 80147cc:	6022      	str	r2, [r4, #0]
 80147ce:	2210      	movs	r2, #16
 80147d0:	e7b7      	b.n	8014742 <_printf_i+0xd2>
 80147d2:	064d      	lsls	r5, r1, #25
 80147d4:	bf48      	it	mi
 80147d6:	b29b      	uxthmi	r3, r3
 80147d8:	e7ef      	b.n	80147ba <_printf_i+0x14a>
 80147da:	4665      	mov	r5, ip
 80147dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80147e0:	fb02 3311 	mls	r3, r2, r1, r3
 80147e4:	5cc3      	ldrb	r3, [r0, r3]
 80147e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80147ea:	460b      	mov	r3, r1
 80147ec:	2900      	cmp	r1, #0
 80147ee:	d1f5      	bne.n	80147dc <_printf_i+0x16c>
 80147f0:	e7b9      	b.n	8014766 <_printf_i+0xf6>
 80147f2:	6813      	ldr	r3, [r2, #0]
 80147f4:	6825      	ldr	r5, [r4, #0]
 80147f6:	6961      	ldr	r1, [r4, #20]
 80147f8:	1d18      	adds	r0, r3, #4
 80147fa:	6010      	str	r0, [r2, #0]
 80147fc:	0628      	lsls	r0, r5, #24
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	d501      	bpl.n	8014806 <_printf_i+0x196>
 8014802:	6019      	str	r1, [r3, #0]
 8014804:	e002      	b.n	801480c <_printf_i+0x19c>
 8014806:	066a      	lsls	r2, r5, #25
 8014808:	d5fb      	bpl.n	8014802 <_printf_i+0x192>
 801480a:	8019      	strh	r1, [r3, #0]
 801480c:	2300      	movs	r3, #0
 801480e:	6123      	str	r3, [r4, #16]
 8014810:	4665      	mov	r5, ip
 8014812:	e7b9      	b.n	8014788 <_printf_i+0x118>
 8014814:	6813      	ldr	r3, [r2, #0]
 8014816:	1d19      	adds	r1, r3, #4
 8014818:	6011      	str	r1, [r2, #0]
 801481a:	681d      	ldr	r5, [r3, #0]
 801481c:	6862      	ldr	r2, [r4, #4]
 801481e:	2100      	movs	r1, #0
 8014820:	4628      	mov	r0, r5
 8014822:	f7eb fcfd 	bl	8000220 <memchr>
 8014826:	b108      	cbz	r0, 801482c <_printf_i+0x1bc>
 8014828:	1b40      	subs	r0, r0, r5
 801482a:	6060      	str	r0, [r4, #4]
 801482c:	6863      	ldr	r3, [r4, #4]
 801482e:	6123      	str	r3, [r4, #16]
 8014830:	2300      	movs	r3, #0
 8014832:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014836:	e7a7      	b.n	8014788 <_printf_i+0x118>
 8014838:	6923      	ldr	r3, [r4, #16]
 801483a:	462a      	mov	r2, r5
 801483c:	4639      	mov	r1, r7
 801483e:	4630      	mov	r0, r6
 8014840:	47c0      	blx	r8
 8014842:	3001      	adds	r0, #1
 8014844:	d0aa      	beq.n	801479c <_printf_i+0x12c>
 8014846:	6823      	ldr	r3, [r4, #0]
 8014848:	079b      	lsls	r3, r3, #30
 801484a:	d413      	bmi.n	8014874 <_printf_i+0x204>
 801484c:	68e0      	ldr	r0, [r4, #12]
 801484e:	9b03      	ldr	r3, [sp, #12]
 8014850:	4298      	cmp	r0, r3
 8014852:	bfb8      	it	lt
 8014854:	4618      	movlt	r0, r3
 8014856:	e7a3      	b.n	80147a0 <_printf_i+0x130>
 8014858:	2301      	movs	r3, #1
 801485a:	464a      	mov	r2, r9
 801485c:	4639      	mov	r1, r7
 801485e:	4630      	mov	r0, r6
 8014860:	47c0      	blx	r8
 8014862:	3001      	adds	r0, #1
 8014864:	d09a      	beq.n	801479c <_printf_i+0x12c>
 8014866:	3501      	adds	r5, #1
 8014868:	68e3      	ldr	r3, [r4, #12]
 801486a:	9a03      	ldr	r2, [sp, #12]
 801486c:	1a9b      	subs	r3, r3, r2
 801486e:	42ab      	cmp	r3, r5
 8014870:	dcf2      	bgt.n	8014858 <_printf_i+0x1e8>
 8014872:	e7eb      	b.n	801484c <_printf_i+0x1dc>
 8014874:	2500      	movs	r5, #0
 8014876:	f104 0919 	add.w	r9, r4, #25
 801487a:	e7f5      	b.n	8014868 <_printf_i+0x1f8>
 801487c:	2b00      	cmp	r3, #0
 801487e:	d1ac      	bne.n	80147da <_printf_i+0x16a>
 8014880:	7803      	ldrb	r3, [r0, #0]
 8014882:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014886:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801488a:	e76c      	b.n	8014766 <_printf_i+0xf6>
 801488c:	080176c5 	.word	0x080176c5
 8014890:	080176d6 	.word	0x080176d6

08014894 <memmove>:
 8014894:	4288      	cmp	r0, r1
 8014896:	b510      	push	{r4, lr}
 8014898:	eb01 0302 	add.w	r3, r1, r2
 801489c:	d807      	bhi.n	80148ae <memmove+0x1a>
 801489e:	1e42      	subs	r2, r0, #1
 80148a0:	4299      	cmp	r1, r3
 80148a2:	d00a      	beq.n	80148ba <memmove+0x26>
 80148a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80148a8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80148ac:	e7f8      	b.n	80148a0 <memmove+0xc>
 80148ae:	4283      	cmp	r3, r0
 80148b0:	d9f5      	bls.n	801489e <memmove+0xa>
 80148b2:	1881      	adds	r1, r0, r2
 80148b4:	1ad2      	subs	r2, r2, r3
 80148b6:	42d3      	cmn	r3, r2
 80148b8:	d100      	bne.n	80148bc <memmove+0x28>
 80148ba:	bd10      	pop	{r4, pc}
 80148bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80148c0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80148c4:	e7f7      	b.n	80148b6 <memmove+0x22>

080148c6 <_realloc_r>:
 80148c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148c8:	4607      	mov	r7, r0
 80148ca:	4614      	mov	r4, r2
 80148cc:	460e      	mov	r6, r1
 80148ce:	b921      	cbnz	r1, 80148da <_realloc_r+0x14>
 80148d0:	4611      	mov	r1, r2
 80148d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80148d6:	f7ff bc6f 	b.w	80141b8 <_malloc_r>
 80148da:	b922      	cbnz	r2, 80148e6 <_realloc_r+0x20>
 80148dc:	f7ff fc1e 	bl	801411c <_free_r>
 80148e0:	4625      	mov	r5, r4
 80148e2:	4628      	mov	r0, r5
 80148e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148e6:	f000 f814 	bl	8014912 <_malloc_usable_size_r>
 80148ea:	42a0      	cmp	r0, r4
 80148ec:	d20f      	bcs.n	801490e <_realloc_r+0x48>
 80148ee:	4621      	mov	r1, r4
 80148f0:	4638      	mov	r0, r7
 80148f2:	f7ff fc61 	bl	80141b8 <_malloc_r>
 80148f6:	4605      	mov	r5, r0
 80148f8:	2800      	cmp	r0, #0
 80148fa:	d0f2      	beq.n	80148e2 <_realloc_r+0x1c>
 80148fc:	4631      	mov	r1, r6
 80148fe:	4622      	mov	r2, r4
 8014900:	f7ff fbf8 	bl	80140f4 <memcpy>
 8014904:	4631      	mov	r1, r6
 8014906:	4638      	mov	r0, r7
 8014908:	f7ff fc08 	bl	801411c <_free_r>
 801490c:	e7e9      	b.n	80148e2 <_realloc_r+0x1c>
 801490e:	4635      	mov	r5, r6
 8014910:	e7e7      	b.n	80148e2 <_realloc_r+0x1c>

08014912 <_malloc_usable_size_r>:
 8014912:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014916:	1f18      	subs	r0, r3, #4
 8014918:	2b00      	cmp	r3, #0
 801491a:	bfbc      	itt	lt
 801491c:	580b      	ldrlt	r3, [r1, r0]
 801491e:	18c0      	addlt	r0, r0, r3
 8014920:	4770      	bx	lr
	...

08014924 <_init>:
 8014924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014926:	bf00      	nop
 8014928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801492a:	bc08      	pop	{r3}
 801492c:	469e      	mov	lr, r3
 801492e:	4770      	bx	lr

08014930 <_fini>:
 8014930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014932:	bf00      	nop
 8014934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014936:	bc08      	pop	{r3}
 8014938:	469e      	mov	lr, r3
 801493a:	4770      	bx	lr
